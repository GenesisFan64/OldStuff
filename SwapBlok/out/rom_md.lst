 AS V1.42 Beta [Bld 118] - source file main.asm - page 1 - 9/4/2021 9:21:17


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; PROJECT SWAPBLOK (Puzzul Swap)
       4/       0 :                     ; 
       5/       0 :                     ; Kevin C. "GenesisFan64"
       6/       0 :                     ; +-----------------------------------------------------------------+
       7/       0 :                     
       8/       0 :                     		cpu 68000				; [AS] Current CPU is 68000
       9/       0 :                     		padding off				; [AS] Don't pad dc.b
      10/       0 :                     		listing purecode			; [AS] Want listing file, but only the final code in expanded macros
      11/       0 :                     		supmode on 				; [AS] Supervisor mode
      12/       0 :                     		page 0
      13/       0 :                     		
      14/       0 :                     ; ====================================================================
      15/       0 :                     ; ----------------------------------------------------------------
      16/       0 :                     ; Include variables
      17/       0 :                     ; ----------------------------------------------------------------
      18/       0 :                     
      19/       0 :                     		include "system/macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ---------------------------------------------
(1)    8/       0 :                     ; Functions
(1)    9/       0 :                     ; ---------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     doubleword 	function l,r,(l<<16&$FFFF0000|r&$FFFF)				; LLLL RRRR
(1)   12/       0 :                     mapsize		function l,r,( ((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF )	; for cell w/h use doubleword
(1)   13/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)		; Layer,X pos,Y pos for some video routines
(1)   14/       0 :                     
(1)   15/       0 :                     ; ====================================================================
(1)   16/       0 :                     ; ---------------------------------------------
(1)   17/       0 :                     ; Macros
(1)   18/       0 :                     ; ---------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------------------------------
(1)   21/       0 :                     ; Reserve memory space
(1)   22/       0 :                     ; -------------------------------------
(1)   23/       0 :                     
(1)   24/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   25/       0 :                     GLBL_LASTPC	set *
(1)   26/       0 :                     GLBL_LASTORG	set *
(1)   27/       0 :                     		dephase
(1)   28/       0 :                     		phase thisinput
(1)   29/       0 :                     		endm
(1)   30/       0 :                     		
(1)   31/       0 :                     ; -------------------------------------
(1)   32/       0 :                     ; Finish reserve
(1)   33/       0 :                     ; -------------------------------------
(1)   34/       0 :                     
(1)   35/       0 :                     finish		macro				; Then finish
(1)   36/       0 :                     		!org GLBL_LASTORG
(1)   37/       0 :                     		phase GLBL_LASTPC
(1)   38/       0 :                     		endm
(1)   39/       0 :                     
(1)   40/       0 :                     ; -------------------------------------
(1)   41/       0 :                     ; ZERO Fill padding
(1)   42/       0 :                     ; 
(1)   43/       0 :                     ; if AS align doesn't work
(1)   44/       0 :                     ; -------------------------------------
(1)   45/       0 :                     
(1)   46/       0 :                     rompad		macro address			; Zero fill
(1)   47/       0 :                     diff := address - *
(1)   48/       0 :                     		if diff < 0
(1)   49/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   50/       0 :                     		else
(1)   51/       0 :                     			while diff > 1024
(1)   52/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   53/       0 :                     				dc.b [1024]0
(1)   54/       0 :                     diff := diff - 1024
(1)   55/       0 :                     			endm
(1)   56/       0 :                     			dc.b [diff]0
(1)   57/       0 :                     		endif
(1)   58/       0 :                     	endm
(1)   59/       0 :                     	
(1)   60/       0 :                     ; -------------------------------------
(1)   61/       0 :                     ; ORG
(1)   62/       0 :                     ;
(1)   63/       0 :                     ; (from s2disasm)
(1)   64/       0 :                     ; -------------------------------------
(1)   65/       0 :                     
(1)   66/       0 : =$0                 paddingSoFar set 0
(1)   67/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   68/       0 :                     org macro address
(1)   69/       0 :                     	if notZ80(MOMCPU)
(1)   70/       0 :                     		if address < *
(1)   71/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   72/       0 :                     		elseif address > *
(1)   73/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)   74/       0 :                     			!org address
(1)   75/       0 :                     		endif
(1)   76/       0 :                     	else
(1)   77/       0 :                     		if address < $
(1)   78/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   79/       0 :                     		else
(1)   80/       0 :                     			while address > $
(1)   81/       0 :                     				db 0
(1)   82/       0 :                     			endm
(1)   83/       0 :                     		endif
(1)   84/       0 :                     	endif
(1)   85/       0 :                         endm
(1)   86/       0 :                     
(1)   87/       0 :                     ; ====================================================================
(1)   88/       0 :                     ; ---------------------------------------------
(1)   89/       0 :                     ; Mega CD only
(1)   90/       0 :                     ; ---------------------------------------------
(1)   91/       0 :                     
(1)   92/       0 :                     ; Set a ISO file
(1)   93/       0 :                     ; NOTES:
(1)   94/       0 :                     ; - a valid ISO head is required ($8000 to $B7FF)
(1)   95/       0 :                     ; - currently only the year is set
(1)   96/       0 :                     
(1)   97/       0 :                     ; -----------------------------------------
(1)   98/       0 :                     ; type - 0 or 1
(1)   99/       0 :                     ; start - ISO filelist start point
(1)  100/       0 :                     ; end - ISO filelist end point
(1)  101/       0 :                     ; -----------------------------------------
(1)  102/       0 :                     
(1)  103/       0 :                     iso_setfs	macro type,start,end
(1)  104/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  105/       0 :                     		dc.b 0						; zero
(1)  106/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  107/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  108/       0 :                     		dc.l start>>11					; Start sector, big
(1)  109/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  110/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  111/       0 :                     		dc.l end-start					; Filesize, big
(1)  112/       0 :                     		dc.b (2019-1900)+1				; Year
(1)  113/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  114/       0 :                     		dc.b 2						; File flags
(1)  115/       0 :                     		dc.b 0,0
(1)  116/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  117/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  118/       0 :                     		dc.b 1,type
(1)  119/       0 :                     .fend:
(1)  120/       0 :                     		endm
(1)  121/       0 :                     
(1)  122/       0 :                     ; -----------------------------------------
(1)  123/       0 :                     ; filename - ISO Filename 8.3
(1)  124/       0 :                     ; start - File data start position
(1)  125/       0 :                     ; end - File data end position
(1)  126/       0 :                     ; 
(1)  127/       0 :                     ; Don't forget to pad $800 at the end
(1)  128/       0 :                     ; of each file
(1)  129/       0 :                     ; -----------------------------------------
(1)  130/       0 :                     
(1)  131/       0 :                     iso_file	macro filename,start,end
(1)  132/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  133/       0 :                     		dc.b 0						; zero
(1)  134/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  135/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  136/       0 :                     		dc.l start>>11					; Start sector, big
(1)  137/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  138/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  139/       0 :                     		dc.l end-start					; Filesize, big
(1)  140/       0 :                     		dc.b (2019-1900)+1				; Year
(1)  141/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  142/       0 :                     		dc.b 0						; File flags
(1)  143/       0 :                     		dc.b 0,0
(1)  144/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  145/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  146/       0 :                     		dc.b .flend-.flen
(1)  147/       0 :                     .flen:		dc.b filename,";1"
(1)  148/       0 :                     .flend:		dc.b 0
(1)  149/       0 :                     .fend:
(1)  150/       0 :                     		endm
(1)  151/       0 :                     		
(1)  152/       0 :                     ; ====================================================================
(1)  153/       0 :                     ; ---------------------------------------------
(1)  154/       0 :                     ; 32X only
(1)  155/       0 :                     ; ---------------------------------------------
(1)  156/       0 :                     
(1)  157/       0 :                     ; (later)
(1)  158/       0 :                     
(1)  159/       0 :                     
      20/       0 :                     		include "system/md/const.asm"		; Variables and constants
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Settings
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; If you want to set your RAM structure below $FF8000, you will
(1)    7/       0 :                     ; need to modify the instructions that locate RAM as a WORD:
(1)    8/       0 :                     ; ($8000-$FFFF)
(1)    9/       0 :                     ; 
(1)   10/       0 :                     ; from (ram_label).w to (ram_label).l
(1)   11/       0 :                     
(1)   12/       0 : =$FFFF8000          MDRAM_START	equ	$FFFF8000		; MD RAM Start, keep the first $FF (Available: $FF0000-$FFFFFF)
(1)   13/       0 : =$2000              MAX_LOCRAM	equ	$2000			; Maximum local RAM for the current screen
(1)   14/       0 : =$10                MAX_PRNTLIST	equ	16			; Maximum print values
(1)   15/       0 :                     
(1)   16/       0 : =$7FF               varNullVram	equ	$7FF			; Blank VRAM cell, for some video routines
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; ----------------------------------------------------------------
(1)   20/       0 :                     ; Variables
(1)   21/       0 :                     ; ----------------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     ; System
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     ; vdp_ctrl READ bits
(1)   29/       0 :                     ; ------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$7                 bitVInt 	equ 7			; If a VBlank interrupt started
(1)   32/       0 : =$6                 bitSprOvr	equ 6			; Sprite overflow
(1)   33/       0 : =$5                 bitSprCol	equ 5			; Sprite collision (leftover from MS)
(1)   34/       0 : =$4                 bitOdd		equ 4			; if we are in a Odd frame
(1)   35/       0 : =$3                 bitVBlnk	equ 3			; VBlank
(1)   36/       0 : =$2                 bitHBlnk	equ 2			; HBlank
(1)   37/       0 : =$1                 bitDma		equ 1			; DMA Busy
(1)   38/       0 : =$0                 bitPal		equ 0			; PAL flag (from VDP)
(1)   39/       0 :                     
(1)   40/       0 :                     ; ------------------------------------------------
(1)   41/       0 :                     ; VDP register variables
(1)   42/       0 :                     ; ------------------------------------------------
(1)   43/       0 :                     
(1)   44/       0 :                     ; Register $80
(1)   45/       0 : =$2                 HVStop		equ $02
(1)   46/       0 : =$10                HintEnbl	equ $10
(1)   47/       0 : =$1                 bitHVStop	equ 1
(1)   48/       0 : =$4                 bitHintEnbl	equ 4
(1)   49/       0 :                     
(1)   50/       0 :                     ; Register $81
(1)   51/       0 : =$40                DispEnbl 	equ $40
(1)   52/       0 : =$20                VintEnbl 	equ $20
(1)   53/       0 : =$10                DmaEnbl		equ $10
(1)   54/       0 : =$6                 bitDispEnbl	equ 6
(1)   55/       0 : =$5                 bitVintEnbl	equ 5
(1)   56/       0 : =$4                 bitDmaEnbl	equ 4
(1)   57/       0 : =$3                 bitV30		equ 3
(1)   58/       0 :                     	
(1)   59/       0 :                     ; ------------------------------------------------
(1)   60/       0 :                     ; Controller buttons
(1)   61/       0 :                     ; ------------------------------------------------
(1)   62/       0 :                     
(1)   63/       0 : =$1                 JoyUp		equ $0001
(1)   64/       0 : =$2                 JoyDown		equ $0002
(1)   65/       0 : =$4                 JoyLeft		equ $0004
(1)   66/       0 : =$8                 JoyRight	equ $0008
(1)   67/       0 : =$10                JoyB		equ $0010
(1)   68/       0 : =$20                JoyC		equ $0020
(1)   69/       0 : =$40                JoyA		equ $0040
(1)   70/       0 : =$80                JoyStart	equ $0080
(1)   71/       0 : =$100               JoyZ		equ $0100
(1)   72/       0 : =$200               JoyY		equ $0200
(1)   73/       0 : =$400               JoyX		equ $0400
(1)   74/       0 : =$800               JoyMode		equ $0800
(1)   75/       0 :                     
(1)   76/       0 :                     ; right byte only
(1)   77/       0 : =$0                 bitJoyUp	equ 0
(1)   78/       0 : =$1                 bitJoyDown	equ 1
(1)   79/       0 : =$2                 bitJoyLeft	equ 2
(1)   80/       0 : =$3                 bitJoyRight	equ 3
(1)   81/       0 : =$4                 bitJoyB		equ 4
(1)   82/       0 : =$5                 bitJoyC		equ 5
(1)   83/       0 : =$6                 bitJoyA		equ 6
(1)   84/       0 : =$7                 bitJoyStart	equ 7
(1)   85/       0 :                     
(1)   86/       0 :                     ; left byte only
(1)   87/       0 : =$0                 bitJoyZ		equ 0
(1)   88/       0 : =$1                 bitJoyY		equ 1
(1)   89/       0 : =$2                 bitJoyX		equ 2
(1)   90/       0 : =$3                 bitJoyMode	equ 3
(1)   91/       0 :                     
(1)   92/       0 :                     ; ====================================================================
(1)   93/       0 :                     ; ----------------------------------------------------------------
(1)   94/       0 :                     ; Structures
(1)   95/       0 :                     ; ----------------------------------------------------------------
(1)   96/       0 :                     
(1)   97/       0 :                     ; Controller
(1)   98/       0 : (MACRO)             		struct 0
(1)   98/       0 : =$0                 GLBL_LASTPC     set *
(1)   98/       0 : =$0                 GLBL_LASTORG    set *
(1)   98/       0 :                                     dephase
(1)   98/       0 :                                     phase 0
(1)   99/       0 :                     pad_id		ds.b 1
(1)  100/       1 :                     pad_ver		ds.b 1
(1)  101/       2 :                     on_hold		ds.w 1
(1)  102/       4 :                     on_press	ds.w 1
(1)  103/       6 :                     sizeof_input	ds.l 0
(1)  104/       8 : (MACRO)             		finish
(1)  104/       0 :                                     !org GLBL_LASTORG
(1)  104/       0 :                                     phase GLBL_LASTPC
(1)  105/       0 :                     
(1)  106/       0 :                     ; ====================================================================
(1)  107/       0 :                     ; ----------------------------------------------------------------
(1)  108/       0 :                     ; Alias
(1)  109/       0 :                     ; ----------------------------------------------------------------
(1)  110/       0 :                     
(1)  111/       0 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)  112/       0 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)  113/       0 : =$FFFFFFFFFF..      Controller_3	equ RAM_InputData+(sizeof_input*2)
(1)  114/       0 : =$FFFFFFFFFF..      Controller_4	equ RAM_InputData+(sizeof_input*3)
(1)  115/       0 :                     
(1)  116/       0 : =$C0000000          VDP_PALETTE	equ $C0000000				; Palette
(1)  117/       0 : =$40000010          VDP_VSRAM	equ $40000010				; Vertical scroll
(1)  118/       0 :                     
(1)  119/       0 :                     ; ====================================================================
(1)  120/       0 :                     ; ----------------------------------------------------------------
(1)  121/       0 :                     ; MD RAM
(1)  122/       0 :                     ; ----------------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 :                     ; This looks bad but it works as intended
(1)  125/       0 :                     
(1)  126/       0 : (MACRO)             		struct MDRAM_START		; Set struct at start of our base RAM
(1)  126/       0 : =$0                 GLBL_LASTPC     set *
(1)  126/       0 : =$0                 GLBL_LASTORG    set *
(1)  126/       0 :                                     dephase
(1)  126/FFFFFFFFFFFF8000 :                                     phase MDRAM_START
(1)  127/FFFFFFFFFFFF8000 :                     
(1)  128/FFFFFFFFFFFF8000 :                     	; --------------------------------
(1)  129/FFFFFFFFFFFF8000 :                     	; First pass, empty sizes
(1)  137/FFFFFFFFFFFF8000 :                     	
(1)  138/FFFFFFFFFFFF8000 :                     	; --------------------------------
(1)  139/FFFFFFFFFFFF8000 :                     	; Second pass, sizes are set
(1)  140/FFFFFFFFFFFF8000 :                     RAM_Global	ds.b sizeof_global-RAM_Global
(1)  141/FFFFFFFFFFFF86F0 :                     RAM_Local	ds.b MAX_LOCRAM
(1)  142/FFFFFFFFFFFFA6F0 :                     RAM_MdSystem	ds.b sizeof_mdsys-RAM_MdSystem
(1)  143/FFFFFFFFFFFFA714 :                     RAM_MdVideo	ds.b sizeof_mdvid-RAM_MdVideo
(1)  144/FFFFFFFFFFFFA894 :                     sizeof_mdram	ds.l 0
(1)  146/FFFFFFFFFFFFA894 :                     	
(1)  147/FFFFFFFFFFFFA894 :                     	; --------------------------------
(1)  148/FFFFFFFFFFFFA894 :                     	; Report RAM usage on pass 5
(1)  152/FFFFFFFFFFFFA894 : (MACRO)             		finish
(1)  152/FFFFFFFFFFFF8000 :                                     !org GLBL_LASTORG
(1)  152/       0 :                                     phase GLBL_LASTPC
(1)  153/       0 :                     
(1)  154/       0 :                     ; ====================================================================
(1)  155/       0 :                     ; ----------------------------------------------------------------
(1)  156/       0 :                     ; System RAM
(1)  157/       0 :                     ; ----------------------------------------------------------------
(1)  158/       0 :                     
(1)  159/       0 : (MACRO)             		struct RAM_MdSystem
(1)  159/       0 : =$0                 GLBL_LASTPC     set *
(1)  159/       0 : =$0                 GLBL_LASTORG    set *
(1)  159/       0 :                                     dephase
(1)  159/FFFFFFFFFFFFA6F0 :                                     phase RAM_MDSYSTEM
(1)  160/FFFFFFFFFFFFA6F0 :                     RAM_GoToHBlnk	ds.w 3
(1)  161/FFFFFFFFFFFFA6F6 :                     RAM_GoToVBlnk	ds.w 3
(1)  162/FFFFFFFFFFFFA6FC :                     RAM_InputData	ds.b sizeof_input*4		; 4 controller buffers
(1)  163/FFFFFFFFFFFFA714 :                     sizeof_mdsys	ds.l 0
(1)  164/FFFFFFFFFFFFA714 : (MACRO)             		finish
(1)  164/FFFFFFFFFFFFA6F0 :                                     !org GLBL_LASTORG
(1)  164/       0 :                                     phase GLBL_LASTPC
(1)  165/       0 :                     		
(1)  166/       0 :                     ; ====================================================================
(1)  167/       0 :                     ; ----------------------------------------------------------------
(1)  168/       0 :                     ; Video cache RAM
(1)  169/       0 :                     ; ----------------------------------------------------------------
(1)  170/       0 :                     
(1)  171/       0 : (MACRO)             		struct RAM_MdVideo
(1)  171/       0 : =$0                 GLBL_LASTPC     set *
(1)  171/       0 : =$0                 GLBL_LASTORG    set *
(1)  171/       0 :                                     dephase
(1)  171/FFFFFFFFFFFFA714 :                                     phase RAM_MDVIDEO
(1)  172/FFFFFFFFFFFFA714 :                     RAM_FadeStart	ds.w 1
(1)  173/FFFFFFFFFFFFA716 :                     RAM_FadeEnd	ds.w 1
(1)  174/FFFFFFFFFFFFA718 :                     RAM_FadeTimer	ds.w 1
(1)  175/FFFFFFFFFFFFA71A :                     RAM_FadeBuff	ds.w 64
(1)  176/FFFFFFFFFFFFA79A :                     RAM_FadeTarget	ds.w 64
(1)  177/FFFFFFFFFFFFA81A :                     RAM_VidPrntList	ds.w MAX_PRNTLIST*3		; VDP address (2 WORDS), value type (WORD)
(1)  178/FFFFFFFFFFFFA87A :                     RAM_VidPrntVram	ds.w 1				; Current VRAM address for the Print routines
(1)  179/FFFFFFFFFFFFA87C :                     RAM_VdpCache	ds.b 24				; List of VDP register data copies
(1)  180/FFFFFFFFFFFFA894 :                     sizeof_mdvid	ds.l 0
(1)  181/FFFFFFFFFFFFA894 : (MACRO)             		finish
(1)  181/FFFFFFFFFFFFA714 :                                     !org GLBL_LASTORG
(1)  181/       0 :                                     phase GLBL_LASTPC
(1)  182/       0 :                     		
(1)  183/       0 :                     ; ====================================================================
(1)  184/       0 :                     ; ----------------------------------------------------------------
(1)  185/       0 :                     ; Sound buffer RAM (68k and Z80)
(1)  186/       0 :                     ; ----------------------------------------------------------------
(1)  187/       0 :                     
(1)  188/       0 :                     ; 		struct RAM_MdSound
(1)  189/       0 :                     ; 		finish
(1)  190/       0 :                     
(1)  191/       0 :                     ; ====================================================================
(1)  192/       0 :                     
      21/       0 :                     		include "system/md/map.asm"		; Memory map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Mega drive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; External RAM
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU RAM, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 Reg 1, channels 1-3
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 Reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 Reg 1, channels 4-6
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 Reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A14000            sys_tmss	equ	$A14000		; Write "SEGA" here if ver > 0
(1)   20/       0 : =$A11100            z80_bus 	equ	$A11100		; Only use bit 0 (bit 8 as WORD)
(1)   21/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   22/       0 : =$A130EC            md_mars_id	equ	$A130EC		; MARS ID "MARS"
(1)   23/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   24/       0 : =$C00000            vdp_data	equ	$C00000		; Video data port (mirror: $C00002)
(1)   25/       0 : =$C00004            vdp_ctrl	equ	$C00004		; Video control port (mirror: $C00006)
(1)   26/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG Sound port
(1)   27/       0 :                     
(1)   28/       0 :                     ; ----------------------------------------------------------------
(1)   29/       0 :                     ; Genesis / Mega drive Z80 map
(1)   30/       0 :                     ; ----------------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   33/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   34/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   35/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   36/       0 : =$6000              zbank		equ	$6000		; ROM BANK 24bits %XXXXXXXX X0000000 00000000
(1)   37/       0 : =$7F00              zvdp_data	equ	$7F00		; Video data port
(1)   38/       0 : =$7F04              zvdp_ctrl	equ	$7F04		; Video control port
(1)   39/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; If a SEGA CD is attached
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$20000             syscd_prgram	equ	$020000		; SubCPU PRG-RAM, up to $1FFFF, banked
(1)   46/       0 : =$200000            syscd_wordram	equ	$200000		; WORD-RAM seen in MAIN-CPU
(1)   47/       0 : =$A12000            syscd_bus	equ	$A12000		; WORD | Sub-CPU BUS/RESET
(1)   48/       0 : =$A12003            syscd_memory	equ	$A12003		; BYTE | Sub-CPU memory mode
(1)   49/       0 : =$A12004            syscd_cdcmode	equ	$A12004		; WORD | CDC Mode
(1)   50/       0 : =$A12006            syscd_hint	equ	$A12006		; WORD | VDP HBlank jump ($FFxxxx)
(1)   51/       0 : =$A12008            syscd_cdchost	equ	$A12008		; WORD | CDC Host
(1)   52/       0 : =$A12008            syscd_stopwtch	equ	$A12008		; WORD | Stopwatch
(1)   53/       0 : =$A1200E            syscd_comm_m	equ	$A1200E		; BYTE | MainCPU R/W comm byte
(1)   54/       0 : =$A1200F            syscd_comm_s	equ	$A1200F		; BYTE | Sub-CPU Read comm byte
(1)   55/       0 : =$A12010            syscd_args_m	equ	$A12010		; DATA | Comm R/W list, max size: $E
(1)   56/       0 : =$A12020            syscd_args_s	equ	$A12020		; DATA | Comm Read list, max size: $E
(1)   57/       0 :                     
(1)   58/       0 :                     ; ----------------------------------------------------------------
(1)   59/       0 :                     ; If a 32X is attached
(1)   60/       0 :                     ; ----------------------------------------------------------------
(1)   61/       0 :                     
(1)   62/       0 : =$A130EC            sysmars_ID	equ	$A130EC		; MARS ID "MARS"
(1)   63/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X buffer (check for mars_ID first)
(1)   64/       0 :                     
      22/       0 :                     		include "game/global.asm"		; Global variables and RAM
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Put your global structs/values here
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; --------------------------------------------------------
(1)    8/       0 :                     ; Settings
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 : =$4                 MAX_BOXES		equ 4
(1)   12/       0 : =$5                 MAX_SCORBOX		equ 5 			; score and time boxes
(1)   13/       0 :                     
(1)   14/       0 :                     ; ====================================================================
(1)   15/       0 :                     ; --------------------------------------------------------
(1)   16/       0 :                     ; Structures
(1)   17/       0 :                     ; --------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     ; Box
(1)   20/       0 : (MACRO)             			struct 0
(1)   20/       0 : =$0                 GLBL_LASTPC     set *
(1)   20/       0 : =$0                 GLBL_LASTORG    set *
(1)   20/       0 :                                     dephase
(1)   20/       0 :                                     phase 0
(1)   21/       0 :                     box_BlockTrsh		ds.l MAX_BOXES-1	; box pointer(s) to attack
(1)   22/       C :                     box_BlockData		ds.l 1			; MAIN block pointer
(1)   23/      10 :                     box_YScrl		ds.l 1			; YYYY.0000
(1)   24/      14 :                     box_YScrl_old		ds.l 1
(1)   25/      18 :                     box_YSpd		ds.l 1			; 0000.0000
(1)   26/      1C :                     box_BoardTimeOut	ds.l 1			; TIMER before getting game over on full box
(1)   27/      20 :                     box_TrshSmlReq		ds.l 1			; Small trash request (if 4+ blocks)
(1)   28/      24 :                     box_Status		ds.w 1			; bitstatus
(1)   29/      26 :                     box_BoardX		ds.w 1			; Board X pos
(1)   30/      28 :                     box_BoardY		ds.w 1			; Board Y pos
(1)   31/      2A :                     box_Width		ds.w 1			; Width (MAX 16)
(1)   32/      2C :                     box_Height		ds.w 1			; Height (currently hardcoded to $000D)
(1)   33/      2E :                     box_MatchCount		ds.w 1			; Number of matches
(1)   34/      30 :                     box_NumMtchAdd		ds.w 1			; Add blocks to match
(1)   35/      32 :                     box_NumMtchLast		ds.w 1			; Last maximum of matches
(1)   36/      34 :                     box_NumMtchBlk		ds.w 1			; Number of blocks flashing
(1)   37/      36 :                     box_ComboCount		ds.w 1			; Number of combos
(1)   38/      38 :                     box_ComboCntShow	ds.w 1			; Same thing but in BCD
(1)   39/      3A :                     box_YShake		ds.w 1			; 0.000
(1)   40/      3C :                     box_FrameTimer		ds.w 1			; (Used by shake)
(1)   41/      3E :                     box_TrshReq		ds.w 1			; Trash request bits
(1)   42/      40 :                     
(1)   43/      40 :                     box_UserScore		ds.l 1			; 000000
(1)   44/      44 :                     box_UserTime		ds.l 1			; 00:00.00 (milisecs hidden)
(1)   45/      48 :                     box_UserBorder		ds.w 1			; border color
(1)   46/      4A :                     box_UserLevel		ds.w 1			; START fill level
(1)   47/      4C :                     box_UserMaxIds		ds.w 1			; MAX usable blocks to grab
(1)   48/      4E :                     box_UserWins		ds.w 1			; WIN points
(1)   49/      50 :                     box_UserLoses		ds.w 1			; LOSE points
(1)   50/      52 :                     sizeof_Box		ds.l 0
(1)   51/      54 : (MACRO)             			finish
(1)   51/       0 :                                     !org GLBL_LASTORG
(1)   51/       0 :                                     phase GLBL_LASTPC
(1)   52/       0 :                     
(1)   53/       0 :                     ; Cursor
(1)   54/       0 : (MACRO)             			struct 0
(1)   54/       0 : =$0                 GLBL_LASTPC     set *
(1)   54/       0 : =$0                 GLBL_LASTORG    set *
(1)   54/       0 :                                     dephase
(1)   54/       0 :                                     phase 0
(1)   55/       0 :                     cursor_Control		ds.l 1			; RAM address for current controller
(1)   56/       4 :                     cursor_Box		ds.l 1			; RAM address for block box
(1)   57/       8 :                     cursor_SwapSrcPos	ds.w 2			; X / Y piece src position
(1)   58/       C :                     cursor_SwapDstPos	ds.w 2			; X / Y piece dest position
(1)   59/      10 :                     cursor_SwapSrcShdw	ds.w 2			; Xpos | Ypos
(1)   60/      14 :                     cursor_SwapDstShdw	ds.w 2			; Xpos | Ypos
(1)   61/      18 :                     cursor_SwapSrcId	ds.w 1			; ID
(1)   62/      1A :                     cursor_SwapDstId	ds.w 1			; ID
(1)   63/      1C :                     cursor_SwapSrcSpr	ds.l 2			; Xpos.0000 | Ypos.0000
(1)   64/      24 :                     cursor_SwapSrcSprOld	ds.l 2			; Xpos.0000 | Ypos.0000
(1)   65/      2C :                     cursor_SwapSrcSprSpd	ds.l 2			; Xpos.0000 | Ypos.0000
(1)   66/      34 :                     cursor_SwapDstSpr	ds.l 2			; Xpos.0000 | Ypos.0000
(1)   67/      3C :                     cursor_SwapDstSprOld	ds.l 2			; Xpos.0000 | Ypos.0000
(1)   68/      44 :                     cursor_SwapDstSprSpd	ds.l 2			; Xpos.0000 | Ypos.0000
(1)   69/      4C :                     cursor_SwapMode		ds.w 1			; Current swap mode
(1)   70/      4E :                     cursor_Type		ds.w 1			; 0 - 3blocks | 1 - 6blocks
(1)   71/      50 :                     cursor_TypeOld		ds.w 1
(1)   72/      52 :                     cursor_X		ds.w 1
(1)   73/      54 :                     cursor_Y		ds.w 1
(1)   74/      56 :                     cursor_Frame		ds.w 1
(1)   75/      58 :                     cursor_Status		ds.w 1
(1)   76/      5A :                     cursor_SpdUpTmr		ds.w 1
(1)   77/      5C :                     sizeof_Cursor		ds.l 0
(1)   78/      5C : (MACRO)             			finish
(1)   78/       0 :                                     !org GLBL_LASTORG
(1)   78/       0 :                                     phase GLBL_LASTPC
(1)   79/       0 :                     
(1)   80/       0 : (MACRO)             			struct 0
(1)   80/       0 : =$0                 GLBL_LASTPC     set *
(1)   80/       0 : =$0                 GLBL_LASTORG    set *
(1)   80/       0 :                                     dephase
(1)   80/       0 :                                     phase 0
(1)   81/       0 :                     scorBox_BoxAddr		ds.l 1
(1)   82/       4 :                     scorBox_Status		ds.w 1
(1)   83/       6 :                     scorBox_X		ds.w 1
(1)   84/       8 :                     scorBox_Y		ds.w 1
(1)   85/       A :                     scorBox_Width		ds.w 1
(1)   86/       C :                     scorBox_Height		ds.w 1
(1)   87/       E :                     scorBox_Type		ds.w 1
(1)   88/      10 :                     sizeof_ScorBox		ds.l 0
(1)   89/      10 : (MACRO)             			finish
(1)   89/       0 :                                     !org GLBL_LASTORG
(1)   89/       0 :                                     phase GLBL_LASTPC
(1)   90/       0 :                     			
(1)   91/       0 :                     ; ====================================================================
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     ; Variables
(1)   94/       0 :                     ; --------------------------------------------------------
(1)   95/       0 :                     
(1)   96/       0 :                     ; cursor_Status
(1)   97/       0 : =$7                 bitCurSt_Active		equ 7
(1)   98/       0 : =$6                 bitCurSt_MidSwapLock	equ 6
(1)   99/       0 :                     
(1)  100/       0 :                     ; box_Status
(1)  101/       0 : =$7                 bitPlySt_Active		equ 7
(1)  102/       0 : =$5                 bitPlySt_DrwAll		equ 5
(1)  103/       0 : =$4                 bitPlySt_DrwLine	equ 4
(1)  104/       0 : =$3                 bitPlySt_ChkMatch	equ 3
(1)  105/       0 : =$2                 bitPlySt_GameOver	equ 2
(1)  106/       0 : =$1                 bitPlySt_SpdUp		equ 1
(1)  107/       0 : =$0                 bitPlySt_MidSwapStop	equ 0
(1)  108/       0 :                     
(1)  109/       0 :                     ; box_Status
(1)  110/       0 : =$7                 bitScorSt_Active	equ 7
(1)  111/       0 :                     
(1)  112/       0 :                     ; RAM_PGame_GlblMtchFlags
(1)  113/       0 : =$4                 MtchFlg_ComboSpdUp	equ $0004
(1)  114/       0 : =$2                 MtchFlg_TrashEnbl	equ $0002
(1)  115/       0 : =$1                 MtchFlg_TimerDown	equ $0001
(1)  116/       0 : =$7                 bitMtch_Pause		equ 7
(1)  117/       0 : =$6                 bitMtch_MatchOver	equ 6
(1)  118/       0 : =$5                 bitMtch_Timeout		equ 5
(1)  119/       0 : =$2                 bitMtch_ComboSpdUp	equ 2
(1)  120/       0 : =$1                 bitMtch_TrashEnbl	equ 1
(1)  121/       0 : =$0                 bitMtch_TimerDown	equ 0
(1)  122/       0 :                     
(1)  123/       0 :                     ; ====================================================================
(1)  124/       0 :                     ; --------------------------------------------------------
(1)  125/       0 :                     ; RAM
(1)  126/       0 :                     ; --------------------------------------------------------
(1)  127/       0 :                     
(1)  128/       0 :                     ; ds.b numof_bytes
(1)  129/       0 :                     ; ds.w numof_words (2 bytes)
(1)  130/       0 :                     ; ds.l numof_longs (4 bytes)
(1)  131/       0 : (MACRO)             			struct RAM_Global
(1)  131/       0 : =$0                 GLBL_LASTPC     set *
(1)  131/       0 : =$0                 GLBL_LASTORG    set *
(1)  131/       0 :                                     dephase
(1)  131/FFFFFFFFFFFF8000 :                                     phase RAM_GLOBAL
(1)  132/FFFFFFFFFFFF8000 :                     RAM_HorScroll		ds.l 224
(1)  133/FFFFFFFFFFFF8380 :                     RAM_VerScroll		ds.l 336/16
(1)  134/FFFFFFFFFFFF83D4 :                     RAM_Glbl_PzlScores	ds.b sizeof_ScorBox*MAX_SCORBOX
(1)  135/FFFFFFFFFFFF8424 :                     RAM_Glbl_PzlBoxes	ds.b sizeof_Box*MAX_BOXES
(1)  136/FFFFFFFFFFFF856C :                     RAM_Glbl_PzlCursors	ds.b sizeof_Cursor*MAX_BOXES
(1)  137/FFFFFFFFFFFF86DC :                     RAM_Glbl_NumPlayers	ds.w 1
(1)  138/FFFFFFFFFFFF86DE :                     RAM_Glbl_NumBoxes	ds.w 1
(1)  139/FFFFFFFFFFFF86E0 :                     RAM_Glbl_GameMtchFlags	ds.w 1			; Match flags (for everyone)
(1)  140/FFFFFFFFFFFF86E2 :                     RAM_GlblRndSeeds	ds.l 2
(1)  141/FFFFFFFFFFFF86EA :                     RAM_GlblFrameCnt	ds.l 1
(1)  142/FFFFFFFFFFFF86EE :                     RAM_PuzlGameMode	ds.w 1
(1)  143/FFFFFFFFFFFF86F0 :                     sizeof_global		ds.l 0
(1)  144/FFFFFFFFFFFF86F0 : (MACRO)             			finish
(1)  144/FFFFFFFFFFFF8000 :                                     !org GLBL_LASTORG
(1)  144/       0 :                                     phase GLBL_LASTPC
(1)  145/       0 :                     
      23/       0 :                     
      24/       0 :                     ; ====================================================================
      25/       0 :                     ; ----------------------------------------------------------------
      26/       0 :                     ; Header
      27/       0 :                     ; ----------------------------------------------------------------
      28/       0 :                     
      29/       0 :                     		include "system/head.asm"		; Header and initialization
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM HEAD
(1)    4/       0 :                     ; 
(1)    5/       0 :                     ; Genesis
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 0000 0000           		dc.l 0				; Stack point (at end of RAM, goes backwards)
(1)    9/       4 : 0000 0202           		dc.l MD_Entry			; Entry point
(1)   10/       8 : 0000 0200           		dc.l MD_ErrBus			; Bus error
(1)   11/       C : 0000 0200           		dc.l MD_ErrAddr			; Address error
(1)   12/      10 : 0000 0200           		dc.l MD_ErrIll			; ILLEGAL Instruction
(1)   13/      14 : 0000 0200           		dc.l MD_ErrZDiv			; Divide by 0
(1)   14/      18 : 0000 0200           		dc.l MD_ErrChk			; CHK Instruction
(1)   15/      1C : 0000 0200           		dc.l MD_ErrTrapV		; TRAPV Instruction
(1)   16/      20 : 0000 0200           		dc.l MD_ErrPrivl		; Privilege violation
(1)   17/      24 : 0000 0200           		dc.l MD_Trace			; Trace
(1)   18/      28 : 0000 0200           		dc.l MD_Line1010		; Line 1010 Emulator
(1)   19/      2C : 0000 0200           		dc.l MD_Line1111		; Line 1111 Emulator
(1)   20/      30 : 0000 0200           		dc.l MD_ErrorEx			; Error exception
(1)   21/      34 : 0000 0200           		dc.l MD_ErrorEx
(1)   22/      38 : 0000 0200           		dc.l MD_ErrorEx
(1)   23/      3C : 0000 0200           		dc.l MD_ErrorEx
(1)   24/      40 : 0000 0200           		dc.l MD_ErrorEx	
(1)   25/      44 : 0000 0200           		dc.l MD_ErrorEx
(1)   26/      48 : 0000 0200           		dc.l MD_ErrorEx
(1)   27/      4C : 0000 0200           		dc.l MD_ErrorEx
(1)   28/      50 : 0000 0200           		dc.l MD_ErrorEx
(1)   29/      54 : 0000 0200           		dc.l MD_ErrorEx
(1)   30/      58 : 0000 0200           		dc.l MD_ErrorEx
(1)   31/      5C : 0000 0200           		dc.l MD_ErrorEx
(1)   32/      60 : 0000 0200           		dc.l MD_ErrorEx		
(1)   33/      64 : 0000 0200           		dc.l MD_ErrorTrap
(1)   34/      68 : 0000 0200           		dc.l MD_ErrorTrap
(1)   35/      6C : 0000 0200           		dc.l MD_ErrorTrap
(1)   36/      70 : FFFF A6F0           		dc.l RAM_GoToHBlnk		; VDP HBlank interrupt
(1)   37/      74 : 0000 0200           		dc.l MD_ErrorTrap
(1)   38/      78 : FFFF A6F6           		dc.l RAM_GoToVBlnk		; VDP VBlank interrupt
(1)   39/      7C : 0000 0200           		dc.l MD_ErrorTrap
(1)   40/      80 : 0000 0200           		dc.l MD_ErrorTrap
(1)   41/      84 : 0000 0200           		dc.l MD_ErrorTrap
(1)   42/      88 : 0000 0200           		dc.l MD_ErrorTrap
(1)   43/      8C : 0000 0200           		dc.l MD_ErrorTrap
(1)   44/      90 : 0000 0200           		dc.l MD_ErrorTrap
(1)   45/      94 : 0000 0200           		dc.l MD_ErrorTrap
(1)   46/      98 : 0000 0200           		dc.l MD_ErrorTrap
(1)   47/      9C : 0000 0200           		dc.l MD_ErrorTrap
(1)   48/      A0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   49/      A4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   50/      A8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   51/      AC : 0000 0200           		dc.l MD_ErrorTrap
(1)   52/      B0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   53/      B4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   54/      B8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   55/      BC : 0000 0200           		dc.l MD_ErrorTrap
(1)   56/      C0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   57/      C4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   58/      C8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   59/      CC : 0000 0200           		dc.l MD_ErrorTrap
(1)   60/      D0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   61/      D4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   62/      D8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   63/      DC : 0000 0200           		dc.l MD_ErrorTrap
(1)   64/      E0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   65/      E4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   66/      E8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   67/      EC : 0000 0200           		dc.l MD_ErrorTrap
(1)   68/      F0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   69/      F4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   70/      F8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   71/      FC : 0000 0200           		dc.l MD_ErrorTrap
(1)   72/     100 : 5345 4741 2047 454E 		dc.b "SEGA GENESIS    "					; System name, the "SEGA" word is required
                    4553 4953 2020 2020 
(1)   73/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2020.SEP"					; "(C)[company] [year].[month]"
                    3230 3230 2E53 4550 
(1)   74/     120 : 5075 7A7A 6C65 2053 		dc.b "Puzzle Swap (2020 DEMO)                         " ; Your game title in your country
                    7761 7020 2832 3032 
                    3020 4445 4D4F 2920 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   75/     150 : 5075 7A7A 756C 2053 		dc.b "Puzzul Swap (2020 DEMO)                         "	; Your game title outside of your country
                    7761 7020 2832 3032 
                    3020 4445 4D4F 2920 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   76/     180 : 474D 2048 4F4D 4542 		dc.b "GM HOMEBREW-00"					; Serial number and version
                    5245 572D 3030      
(1)   77/     18E : 0000                		dc.w 0							; Checksum, leave it zero if not needed
(1)   78/     190 : 4A36 2020 2020 2020 		dc.b "J6              "					; Peripherals supported, "J" is 3-button controller
                    2020 2020 2020 2020 
(1)   79/     1A0 : 0000 0000           		dc.l 0							; ROM Start address, always 0
(1)   80/     1A4 : 0002 000A           		dc.l ROM_END-1						; ROM End address - 1
(1)   81/     1A8 : 00FF 0000           		dc.l $FF0000						; RAM Start address, always $FF0000
(1)   82/     1AC : 00FF FFFF           		dc.l $FFFFFF						; RAM Start address, always $FFFFFF
(1)   83/     1B0 :                     
(1)   84/     1B0 :                     ; 		dc.b "RA",$F8,$20
(1)   85/     1B0 :                     ; 		dc.l $200001
(1)   86/     1B0 :                     ; 		dc.l $20FFFF
(1)   87/     1B0 : 2020 2020           		dc.l $20202020
(1)   88/     1B4 : 2020 2020           		dc.l $20202020
(1)   89/     1B8 : 2020 2020           		dc.l $20202020
(1)   90/     1BC :                     
(1)   91/     1BC : 2020 2020           		dc.l $20202020						; Modem data, not used
(1)   92/     1C0 : 2020 2020           		dc.l $20202020
(1)   93/     1C4 : 2020 2020           		dc.l $20202020
(1)   94/     1C8 : 4120 636F 6D70 6574 		dc.b "A competitive puzzle game.              "		; Memo
                    6974 6976 6520 7075 
                    7A7A 6C65 2067 616D 
                    652E 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   95/     1F0 : 4A55 4520 2020 2020 		dc.b "JUE             "					; Allowed regions: Japan, United states and Europe
                    2020 2020 2020 2020 
(1)   96/     200 :                     
(1)   97/     200 :                     ; ====================================================================
(1)   98/     200 :                     ; ----------------------------------------------------------------
(1)   99/     200 :                     ; Error handlers
(1)  100/     200 :                     ; 
(1)  101/     200 :                     ; all these do nothing currently
(1)  102/     200 :                     ; ----------------------------------------------------------------
(1)  103/     200 :                     
(1)  104/     200 :                     MD_ErrBus:				; Bus error
(1)  105/     200 :                     MD_ErrAddr:				; Address error
(1)  106/     200 :                     MD_ErrIll:				; ILLEGAL Instruction
(1)  107/     200 :                     MD_ErrZDiv:				; Divide by 0
(1)  108/     200 :                     MD_ErrChk:				; CHK Instruction
(1)  109/     200 :                     MD_ErrTrapV:				; TRAPV Instruction
(1)  110/     200 :                     MD_ErrPrivl:				; Privilege violation
(1)  111/     200 :                     MD_Trace:				; Trace
(1)  112/     200 :                     MD_Line1010:				; Line 1010 Emulator
(1)  113/     200 :                     MD_Line1111:				; Line 1111 Emulator
(1)  114/     200 :                     MD_ErrorEx:				; Error exception
(1)  115/     200 :                     MD_ErrorTrap:
(1)  116/     200 : 4E73                		rte			; Return from Exception
(1)  117/     202 :                     
(1)  118/     202 :                     ; ====================================================================
(1)  119/     202 :                     ; ----------------------------------------------------------------
(1)  120/     202 :                     ; Entry point
(1)  121/     202 :                     ; ----------------------------------------------------------------
(1)  122/     202 :                     
(1)  123/     202 :                     MD_Entry:
(1)  124/     202 :                     	; --------------------------------
(1)  125/     202 :                     	; Check if the system has TMSS
(1)  126/     202 : 46FC 2700           		move	#$2700,sr			; Disable interrputs
(1)  127/     206 : 1039 00A1 0001      		move.b	(sys_io).l,d0			; Read IO port
(1)  128/     20C : 0200 000F           		andi.b	#%1111,d0			; Get version, right 4 bits
(1)  129/     210 : 670A                		beq.s	.oldmd				; If == 0, skip this part
(1)  130/     212 : 23F9 0000 0100 00A1 		move.l	($100).l,(sys_tmss).l		; Write "SEGA" to port sys_tmss
                    4000                
(1)  131/     21C :                     .oldmd:
(1)  132/     21C : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l			; Random VDP test, to unlock it
(1)  133/     222 :                     		
(1)  134/     222 :                     	; --------------------------------
(1)  135/     222 : 7000                		moveq	#0,d0				; d0 = 0
(1)  136/     224 : 2C40                		movea.l	d0,a6				; a6 = d0
(1)  137/     226 : 4E66                		move.l	a6,usp				; move a6 to usp
(1)  138/     228 : 3039 00C0 0004      .waitframe:	move.w	(vdp_ctrl).l,d0			; Wait for VBlank
(1)  139/     22E : 0800 0007           		btst	#bitVint,d0
(1)  140/     232 : 67F4                		beq.s	.waitframe
(1)  141/     234 : 23FC 8004 8104 00C0 		move.l	#$80048104,(vdp_ctrl).l		; VDP: Set special bits, and keep Display (TMSS screen stays on)
                    0004                
(1)  142/     23E : 41F9 FFFF 0000      		lea	($FFFF0000),a0			; a0 - RAM Address
(1)  143/     244 : 303C 3BFF           		move.w	#($F000/4)-1,d0			; d0 - Bytes to clear / 4, minus 1
(1)  144/     248 :                     .clrram:
(1)  145/     248 : 4298                		clr.l	(a0)+				; Clear 4 bytes, and increment by 4
(1)  146/     24A : 51C8 FFFC           		dbf	d0,.clrram			; Loop until d0 == 0
(1)  147/     24E : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6			; Trick: Grab clean RAM memory to clear all registers except a7 (Stack point)
(1)  148/     256 : 6000 2E60           		bra	MD_Main				; Branch to MD_Main
(1)  149/     25A :                     
      30/     25A :                     
      31/     25A :                     ; ====================================================================
      32/     25A :                     ; CODE Section
      33/     25A :                     ; ====================================================================
      34/     25A :                     
      35/     25A :                     ; ====================================================================
      36/     25A :                     ; ----------------------------------------------------------------
      37/     25A :                     ; System functions
      38/     25A :                     ; ----------------------------------------------------------------
      39/     25A :                     
      40/     25A :                     		include "system/md/sound/main.asm"	; Sound
(1)    1/     25A :                     ; ====================================================================
(1)    2/     25A :                     ; ----------------------------------------------------------------
(1)    3/     25A :                     ; Sound
(1)    4/     25A :                     ; ----------------------------------------------------------------
(1)    5/     25A :                     
(1)    6/     25A :                     ; --------------------------------------------------------
(1)    7/     25A :                     ; Init Sound
(1)    8/     25A :                     ; 
(1)    9/     25A :                     ; Uses:
(1)   10/     25A :                     ; a0-a1,d0-d1
(1)   11/     25A :                     ; --------------------------------------------------------
(1)   12/     25A :                     
(1)   13/     25A :                     Sound_Init:
(1)   14/     25A : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)   15/     262 : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Reset
(1)   16/     26A :                     .wait:
(1)   17/     26A : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for it
(1)   18/     272 : 66F6                		bne.s	.wait
(1)   19/     274 : 41F9 00A0 0000      		lea	(z80_cpu).l,a0
(1)   20/     27A : 303C 1FFF           		move.w	#$1FFF,d0
(1)   21/     27E : 7200                		moveq	#0,d1
(1)   22/     280 :                     .cleanup:
(1)   23/     280 : 10C1                		move.b	d1,(a0)+
(1)   24/     282 : 51C8 FFFC           		dbf	d0,.cleanup
(1)   25/     286 : 41F9 0000 0400      		lea	(Z80_CODE).l,a0			; Send this code
(1)   26/     28C : 43F9 00A0 0000      		lea	(z80_cpu).l,a1
(1)   27/     292 : 303C 14CF           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0
(1)   28/     296 :                     .copy:
(1)   29/     296 : 12D8                		move.b	(a0)+,(a1)+
(1)   30/     298 : 51C8 FFFC           		dbf	d0,.copy
(1)   31/     29C : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Reset
(1)   32/     2A4 : 4E71                		nop 
(1)   33/     2A6 : 4E71                		nop 
(1)   34/     2A8 : 4E71                		nop 
(1)   35/     2AA : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   36/     2B2 : 4E75                		rts
(1)   37/     2B4 :                     		
(1)   38/     2B4 :                     ; ====================================================================
(1)   39/     2B4 :                     ; ----------------------------------------------------------------
(1)   40/     2B4 :                     ; Subroutines
(1)   41/     2B4 :                     ; ----------------------------------------------------------------
(1)   42/     2B4 :                     
(1)   43/     2B4 :                     ; --------------------------------------------------------
(1)   44/     2B4 :                     ; Sound_SetTrack
(1)   45/     2B4 :                     ; 
(1)   46/     2B4 :                     ; Input:
(1)   47/     2B4 :                     ; d0 | LONG - Track blocks (Z80 WORD) | Track pattern (Z80 WORD)
(1)   48/     2B4 :                     ; d1 | LONG - ROM bank | Track instruments (Z80 WORD)
(1)   49/     2B4 :                     ; d2 | LONG - Volume | Start Block | Tempo bits | Ticks
(1)   50/     2B4 :                     ; d3 | WORD - Slot
(1)   51/     2B4 :                     ; 
(1)   52/     2B4 :                     ; Uses:
(1)   53/     2B4 :                     ; d4/a4
(1)   54/     2B4 :                     ; --------------------------------------------------------
(1)   55/     2B4 :                     
(1)   56/     2B4 :                     Sound_SetTrack:
(1)   57/     2B4 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)   58/     2BC :                     .wait:
(1)   59/     2BC : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   60/     2C4 : 66F6                		bne.s	.wait
(1)   61/     2C6 : 3803                		move.w	d3,d4
(1)   62/     2C8 : D844                		add.w	d4,d4
(1)   63/     2CA : D844                		add.w	d4,d4
(1)   64/     2CC : 287B 4054           		movea.l	SndDrv_TrckBuffers(pc,d4.w),a4
(1)   65/     2D0 :                     
(1)   66/     2D0 : 2800                		move.l	d0,d4
(1)   67/     2D2 : 1944 0002           		move.b	d4,trck_ReqPatt(a4)
(1)   68/     2D6 : E08C                		lsr.l	#8,d4
(1)   69/     2D8 : 1944 0003           		move.b	d4,trck_ReqPatt+1(a4)
(1)   70/     2DC : E08C                		lsr.l	#8,d4
(1)   71/     2DE : 1884                		move.b	d4,trck_ReqBlk(a4)
(1)   72/     2E0 : E08C                		lsr.l	#8,d4
(1)   73/     2E2 : 1944 0001           		move.b	d4,trck_ReqBlk+1(a4)
(1)   74/     2E6 :                     
(1)   75/     2E6 : 2801                		move.l	d1,d4
(1)   76/     2E8 : 1944 0004           		move.b	d4,trck_ReqIns(a4)
(1)   77/     2EC : E04C                		lsr.w	#8,d4
(1)   78/     2EE : 1944 0005           		move.b	d4,trck_ReqIns+1(a4)
(1)   79/     2F2 : 4844                		swap	d4
(1)   80/     2F4 : 1944 0009           		move.b	d4,trck_ReqSndBnk(a4)
(1)   81/     2F8 :                     		
(1)   82/     2F8 : 2802                		move.l	d2,d4	
(1)   83/     2FA : 1944 0006           		move.b	d4,trck_ReqTicks(a4)		; Ticks
(1)   84/     2FE : E08C                		lsr.l	#8,d4
(1)   85/     300 : 1944 0007           		move.b	d4,trck_ReqTempo(a4)		; Tempo
(1)   86/     304 : E08C                		lsr.l	#8,d4
(1)   87/     306 : 1944 0008           		move.b	d4,trck_ReqCurrBlk(a4)		; Block start
(1)   88/     30A : E08C                		lsr.l	#8,d4
(1)   89/     30C : 1944 0020           		move.b	d4,trck_Volume(a4)		; Volume
(1)   90/     310 :                     
(1)   91/     310 : 383C 0001           		move.w	#1,d4
(1)   92/     314 : 1944 000A           		move.b	d4,trck_ReqFlag(a4)		; Request $01, set and play song
(1)   93/     318 :                     		
(1)   94/     318 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   95/     320 : 4E75                		rts
(1)   96/     322 :                     
(1)   97/     322 :                     SndDrv_TrckBuffers:
(1)   98/     322 : 00A0 0F0A           		dc.l SndBuff_Track_1|Z80_CPU
(1)   99/     326 : 00A0 0F4A           		dc.l SndBuff_Track_2|Z80_CPU
(1)  100/     32A :                     
(1)  101/     32A :                     ; --------------------------------------------------------
(1)  102/     32A :                     ; Sound_Stop
(1)  103/     32A :                     ; 
(1)  104/     32A :                     ; Input:
(1)  105/     32A :                     ; d0 | WORD - Request Type
(1)  106/     32A :                     ; d1 | WORD - Slot
(1)  107/     32A :                     ; --------------------------------------------------------
(1)  108/     32A :                     
(1)  109/     32A :                     Sound_StopTrack:
(1)  110/     32A : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)  111/     332 :                     .wait:
(1)  112/     332 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)  113/     33A : 66F6                		bne.s	.wait
(1)  114/     33C :                     
(1)  115/     33C : 3801                		move.w	d1,d4
(1)  116/     33E : D844                		add.w	d4,d4
(1)  117/     340 : D844                		add.w	d4,d4
(1)  118/     342 : 287B 40DE           		movea.l	SndDrv_TrckBuffers(pc,d4.w),a4
(1)  119/     346 : 3800                		move.w	d0,d4
(1)  120/     348 : 1944 000A           		move.b	d4,trck_ReqFlag(a4)
(1)  121/     34C :                     
(1)  122/     34C : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  123/     354 : 4E75                		rts
(1)  124/     356 :                     
(1)  125/     356 :                     ; --------------------------------------------------------
(1)  126/     356 :                     ; Sound_Stop
(1)  127/     356 :                     ; 
(1)  128/     356 :                     ; Input:
(1)  129/     356 :                     ; d0 | Start point
(1)  130/     356 :                     ; d1 | End point
(1)  131/     356 :                     ; d2 | Loop point
(1)  132/     356 :                     ; 
(1)  133/     356 :                     ; Uses:
(1)  134/     356 :                     ; d4-d5
(1)  135/     356 :                     ; --------------------------------------------------------
(1)  136/     356 :                     
(1)  137/     356 :                     Sound_PlayWav:
(1)  138/     356 : 46FC 2700           		move.w	#$2700,sr
(1)  139/     35A : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)  140/     362 :                     .wait:
(1)  141/     362 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)  142/     36A : 66F6                		bne.s	.wait
(1)  143/     36C : 49F9 00A0 0000      		lea	(z80_cpu),a4
(1)  144/     372 :                     
(1)  145/     372 : 2800                		move.l	d0,d4
(1)  146/     374 : 2A00                		move.l	d0,d5
(1)  147/     376 : 887C 8000           		or.w	#$8000,d4
(1)  148/     37A : 1944 0024           		move.b	d4,Sample_Start(a4)
(1)  149/     37E : E04C                		lsr.w	#8,d4
(1)  150/     380 : 1944 0025           		move.b	d4,Sample_Start+1(a4)
(1)  151/     384 : E08D                		lsr.l	#8,d5
(1)  152/     386 : EE8D                		lsr.l	#7,d5
(1)  153/     388 : 1945 0026           		move.b	d5,Sample_Start+2(a4)
(1)  154/     38C :                     
(1)  155/     38C : 3801                		move.w	d1,d4
(1)  156/     38E : 2A01                		move.l	d1,d5
(1)  157/     390 : 887C 8000           		or.w	#$8000,d4
(1)  158/     394 : 1944 0027           		move.b	d4,Sample_End(a4)
(1)  159/     398 : E04C                		lsr.w	#8,d4
(1)  160/     39A : 1944 0028           		move.b	d4,Sample_End+1(a4)
(1)  161/     39E : E08D                		lsr.l	#8,d5
(1)  162/     3A0 : EE8D                		lsr.l	#7,d5
(1)  163/     3A2 : 1945 0029           		move.b	d5,Sample_End+2(a4)
(1)  164/     3A6 :                     		
(1)  165/     3A6 : 3802                		move.w	d2,d4
(1)  166/     3A8 : 2A02                		move.l	d2,d5
(1)  167/     3AA : 887C 8000           		or.w	#$8000,d4
(1)  168/     3AE : 1944 002A           		move.b	d4,Sample_Loop(a4)
(1)  169/     3B2 : E04C                		lsr.w	#8,d4
(1)  170/     3B4 : 1944 002B           		move.b	d4,Sample_Loop+1(a4)
(1)  171/     3B8 : E08D                		lsr.l	#8,d5
(1)  172/     3BA : EE8D                		lsr.l	#7,d5
(1)  173/     3BC : 1945 002C           		move.b	d5,Sample_Loop+2(a4)
(1)  174/     3C0 :                     
(1)  175/     3C0 : 3803                		move.w	d3,d4
(1)  176/     3C2 : 1944 002D           		move.b	d4,Sample_Speed(a4)
(1)  177/     3C6 : E04C                		lsr.w	#8,d4
(1)  178/     3C8 : 1944 002E           		move.b	d4,Sample_Speed+1(a4)
(1)  179/     3CC :                     		
(1)  180/     3CC : 197C 0003 001F      		move.b	#%11,Sample_Flags(a4)
(1)  181/     3D2 :                     
(1)  182/     3D2 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  183/     3DA : 46FC 2000           		move.w	#$2000,sr
(1)  184/     3DE : 4E75                		rts
(1)  185/     3E0 :                     
(1)  186/     3E0 :                     ; ====================================================================
(1)  187/     3E0 :                     ; ----------------------------------------------------------------
(1)  188/     3E0 :                     ; Z80 Code
(1)  189/     3E0 :                     ; 
(1)  190/     3E0 :                     ; Maximum size: 2000h-stack
(1)  191/     3E0 :                     ; ----------------------------------------------------------------
(1)  192/     3E0 :                     
(1)  193/     3E0 :                     		align $100
(1)  194/     400 :                     Z80_CODE:
(1)  195/     400 :                     		cpu Z80				; [AS] Set to Z80
(1)  196/       0 :                     		phase 0				; [AS] Reset PC to zero, for this section
(1)  197/       0 :                     		
(1)  198/       0 :                     ; ====================================================================
(1)  199/       0 :                     ; Z80 goes here
(1)  200/       0 :                     
(1)  201/       0 :                     		include "system/md/sound/z80.asm"
(2)    1/       0 :                     ; ====================================================================
(2)    2/       0 :                     ; ----------------------------------------------------------------
(2)    3/       0 :                     ; Z80 Code
(2)    4/       0 :                     ; ----------------------------------------------------------------
(2)    5/       0 :                     
(2)    6/       0 : =AH                 MAX_CHNLS	equ	10			; Only the first 10 are used
(2)    7/       0 : =2H                 MAX_TRACKS	equ	2
(2)    8/       0 :                     
(2)    9/       0 :                     ; --------------------------------------------------------
(2)   10/       0 :                     ; Init
(2)   11/       0 :                     ; --------------------------------------------------------
(2)   12/       0 :                     
(2)   13/       0 : F3                  		di				; Disable interrputs
(2)   14/       1 : ED 56               		im	1			; Interrput mode 1
(2)   15/       3 : 31 00 20            		ld	sp,2000h		; Set stack at the end of Z80
(2)   16/       6 : 18 33               		jr	z80_init		; Jump to z80_init
(2)   17/       8 :                     
(2)   18/       8 :                     ; --------------------------------------------------------
(2)   19/       8 :                     ; RST 0008h
(2)   20/       8 :                     ; 
(2)   21/       8 :                     ; Set ROM Bank
(2)   22/       8 :                     ; ; a - 0xxx xxxx x0000 0000
(2)   23/       8 :                     ; --------------------------------------------------------
(2)   24/       8 :                     
(2)   25/       8 : (MACRO)             		org 0008h
(2)   26/       8 : E5                  		push	hl
(2)   27/       9 : 21 00 60            		ld	hl,zbank
(2)   28/       C : 77                  		ld	(hl),a
(2)   29/       D : 0F                  		rrca
(2)   30/       E : 77                  		ld	(hl),a
(2)   31/       F : 0F                  		rrca
(2)   32/      10 : 77                  		ld	(hl),a
(2)   33/      11 : 0F                  		rrca
(2)   34/      12 : 77                  		ld	(hl),a
(2)   35/      13 : 0F                  		rrca
(2)   36/      14 : 77                  		ld	(hl),a
(2)   37/      15 : 0F                  		rrca
(2)   38/      16 : 77                  		ld	(hl),a
(2)   39/      17 : 0F                  		rrca
(2)   40/      18 : 77                  		ld	(hl),a
(2)   41/      19 : 0F                  		rrca
(2)   42/      1A : 77                  		ld	(hl),a
(2)   43/      1B : AF                  		xor	a
(2)   44/      1C : 77                  		ld	(hl),a
(2)   45/      1D : E1                  		pop	hl
(2)   46/      1E : C9                  		ret
(2)   47/      1F :                     		
(2)   48/      1F :                     ; ----------------------------------------------------
(2)   49/      1F :                     ; DAC Sample buffer
(2)   50/      1F :                     ; ----------------------------------------------------
(2)   51/      1F :                     
(2)   52/      1F : 00                  Sample_Flags	db 00000000b				; Request
(2)   53/      20 : 00                  Sample_Read	db 0					; Read
(2)   54/      21 : 00 00               		dw 0;(WavIns_Pursuit&7FFFh)|8000h	
(2)   55/      23 : 00                  		db 0;WavIns_Pursuit>>15
(2)   56/      24 : 00 00               Sample_Start	dw 0;(WavIns_Pursuit&7FFFh)|8000h	; Start
(2)   57/      26 : 00                  		db 0;WavIns_Pursuit>>15
(2)   58/      27 : 00 00               Sample_End	dw 0;(WavIns_Pursuit_e&7FFFh)|8000h	; End
(2)   59/      29 : 00                  		db 0;WavIns_Pursuit_e>>15
(2)   60/      2A : 00 00               Sample_Loop	dw 0;(WavIns_Pursuit&7FFFh)|8000h	; Loop
(2)   61/      2C : 00                  		db 0;WavIns_Pursuit>>15
(2)   62/      2D : 00 01               Sample_Speed	dw 0100h				; update me with bit 1 on Sample_Flags
(2)   63/      2F :                     
(2)   64/      2F :                     ; --------------------------------------------------------
(2)   65/      2F :                     
(2)   66/      2F : C3                  curr_Jsr	db 0C3h					; (moved here)
(2)   67/      30 : 00 00               		dw 0
(2)   68/      32 : 00                  curr_SndBank	db 0					; Current ROM bank for pulsemini
(2)   69/      33 : 00                  curr_NoiseMode	db 0					; Current PSG Noise mode
(2)   70/      34 :                     
(2)   71/      34 :                     ; --------------------------------------------------------
(2)   72/      34 :                     ; Z80 Interrupt at 0038h
(2)   73/      34 :                     ; 
(2)   74/      34 :                     ; VBlank only
(2)   75/      34 :                     ; --------------------------------------------------------
(2)   76/      34 :                     
(2)   77/      34 : (MACRO)             		org 0038h			; align to 0038h
(2)   77/      34 : 00                                                  db 0
(2)   77/      35 : 00                                                  db 0
(2)   77/      36 : 00                                                  db 0
(2)   77/      37 : 00                                                  db 0
(2)   77/      38 :                     
(2)   78/      38 : C3 7A 01            		jp	z80_int
(2)   79/      3B :                     		
(2)   80/      3B :                     ; --------------------------------------------------------
(2)   81/      3B :                     ; Z80 Init
(2)   82/      3B :                     ; --------------------------------------------------------
(2)   83/      3B :                     
(2)   84/      3B :                     z80_init:
(2)   85/      3B : CD A8 01            		call	SndDrv_Init
(2)   86/      3E : FB                  		ei
(2)   87/      3F :                     
(2)   88/      3F :                     ; --------------------------------------------------------
(2)   89/      3F :                     ; Sample playback LOOP
(2)   90/      3F :                     ; --------------------------------------------------------
(2)   91/      3F :                     
(2)   92/      3F :                     .loop:
(2)   93/      3F : 3A 1F 00            		ld	a,(Sample_Flags)
(2)   94/      42 : B7                  		or	a
(2)   95/      43 : F2 F6 00            		jp	p,.request
(2)   96/      46 :                     
(2)   97/      46 : 3E 2A               		ld	a,2Ah
(2)   98/      48 : 32 00 40            		ld	(zym_ctrl_1),a
(2)   99/      4B : 2A 21 00            		ld	hl,(Sample_Read+1)
(2)  100/      4E : 7E                  		ld	a,(hl)
(2)  101/      4F : 09                  		add	hl,bc
(2)  102/      50 : DA A4 00            		jp	c,.exit
(2)  103/      53 :                     
(2)  104/      53 : 00                  		nop
(2)  105/      54 : 00                  		nop
(2)  106/      55 : 00                  		nop
(2)  107/      56 : 00                  		nop
(2)  108/      57 : 00                  		nop
(2)  109/      58 : 32 01 40            		ld	(zym_data_1),a
(2)  110/      5B : 00                  		nop
(2)  111/      5C : 00                  		nop
(2)  112/      5D : 00                  		nop
(2)  113/      5E : 00                  		nop
(2)  114/      5F : 00                  		nop
(2)  115/      60 :                     
(2)  116/      60 : 2A 20 00            		ld	hl,(Sample_Read)	; 0000XX.XX
(2)  117/      63 : ED 5B 2D 00         		ld	de,(Sample_Speed)
(2)  118/      67 : 19                  		add 	hl,de
(2)  119/      68 : 22 20 00            		ld	(Sample_Read),hl
(2)  120/      6B : D2 3F 00            		jp	nc,.loop
(2)  121/      6E : 3A 22 00            		ld	a,(Sample_Read+2)	; 00XX00.00
(2)  122/      71 : 3C                  		inc 	a
(2)  123/      72 : 32 22 00            		ld	(Sample_Read+2),a
(2)  124/      75 : FA 3F 00            		jp	m,.loop
(2)  125/      78 : 3A 23 00            		ld	a,(Sample_Read+3)	; XX8000.00
(2)  126/      7B : 3C                  		inc	a
(2)  127/      7C : 67                  		ld	h,a
(2)  128/      7D : 32 23 00            		ld	(Sample_Read+3),a
(2)  129/      80 : CF                  		rst	8
(2)  130/      81 : 3A 22 00            		ld	a,(Sample_Read+2)
(2)  131/      84 : F6 80               		or	80h
(2)  132/      86 : 32 22 00            		ld	(Sample_Read+2),a
(2)  133/      89 : 01 00 00            		ld	bc,0
(2)  134/      8C : 3A 29 00            		ld	a,(Sample_End+2)
(2)  135/      8F : BC                  		cp	h
(2)  136/      90 : C2 3F 00            		jp	nz,.loop
(2)  137/      93 : 2A 27 00            		ld	hl,(Sample_End)
(2)  138/      96 : ED 4B 27 00         		ld	bc,(Sample_End)
(2)  139/      9A : 3F                  		ccf
(2)  140/      9B : ED 42               		sbc 	hl,bc
(2)  141/      9D : 3F                  		ccf
(2)  142/      9E : ED 42               		sbc 	hl,bc
(2)  143/      A0 : 44                  		ld	b,h
(2)  144/      A1 : 4D                  		ld	c,l
(2)  145/      A2 : 18 9B               		jr	.loop
(2)  146/      A4 :                     
(2)  147/      A4 :                     ; ------------------------------------------------
(2)  148/      A4 :                     ; WAV Exit
(2)  149/      A4 :                     ; ------------------------------------------------
(2)  150/      A4 :                     
(2)  151/      A4 :                     .exit:
(2)  152/      A4 : 3A 1F 00            		ld	a,(Sample_Flags)
(2)  153/      A7 : CB BF               		res	7,a
(2)  154/      A9 : 32 1F 00            		ld	(Sample_Flags),a
(2)  155/      AC : CB 77               		bit 	6,a
(2)  156/      AE : CA EA 00            		jp	z,.full_stop
(2)  157/      B1 :                     
(2)  158/      B1 : AF                  		xor	a
(2)  159/      B2 : 32 20 00            		ld	(Sample_Read),a
(2)  160/      B5 : 2A 2A 00            		ld	hl,(Sample_Loop)
(2)  161/      B8 : 3A 2C 00            		ld	a,(Sample_Loop+2)
(2)  162/      BB : 32 23 00            		ld	(Sample_Read+3),a
(2)  163/      BE : 22 21 00            		ld	(Sample_Read+1),hl
(2)  164/      C1 : CF                  		rst	8
(2)  165/      C2 :                     		
(2)  166/      C2 : 3A 1F 00            		ld	a,(Sample_Flags)
(2)  167/      C5 : CB FF               		set	7,a
(2)  168/      C7 : 32 1F 00            		ld	(Sample_Flags),a
(2)  169/      CA : 01 00 00            		ld	bc,0
(2)  170/      CD : 3A 23 00            		ld	a,(Sample_Read+3)
(2)  171/      D0 : 67                  		ld	h,a
(2)  172/      D1 : 3A 29 00            		ld	a,(Sample_End+2)
(2)  173/      D4 : BC                  		cp	h
(2)  174/      D5 : C2 3F 00            		jp	nz,.loop
(2)  175/      D8 : 2A 27 00            		ld	hl,(Sample_End)
(2)  176/      DB : ED 4B 27 00         		ld	bc,(Sample_End)
(2)  177/      DF : 3F                  		ccf
(2)  178/      E0 : ED 42               		sbc 	hl,bc
(2)  179/      E2 : 3F                  		ccf
(2)  180/      E3 : ED 42               		sbc 	hl,bc
(2)  181/      E5 : 44                  		ld	b,h
(2)  182/      E6 : 4D                  		ld	c,l
(2)  183/      E7 : C3 3F 00            		jp	.loop
(2)  184/      EA :                     
(2)  185/      EA :                     ; ----------------------------------------
(2)  186/      EA :                     
(2)  187/      EA :                     .full_stop:
(2)  188/      EA : 3E 2B               		ld	a,2Bh
(2)  189/      EC : 32 00 40            		ld	(zym_ctrl_1),a
(2)  190/      EF : AF                  		xor	a
(2)  191/      F0 : 32 01 40            		ld	(zym_data_1),a
(2)  192/      F3 : 32 1F 00            		ld	(Sample_Flags),a
(2)  193/      F6 :                     		
(2)  194/      F6 :                     ; ------------------------------------------------
(2)  195/      F6 :                     ; WAV Request
(2)  196/      F6 :                     ; ------------------------------------------------
(2)  197/      F6 :                     
(2)  198/      F6 :                     .request:
(2)  199/      F6 : 3A 1F 00            		ld	a,(Sample_Flags)
(2)  200/      F9 : CB 57               		bit 	2,a
(2)  201/      FB : C2 5A 01            		jp	nz,.pitch
(2)  202/      FE : CB 77               		bit	6,a
(2)  203/     100 : C2 6B 01            		jp	nz,.turn_off
(2)  204/     103 : B7                  		or	a
(2)  205/     104 : CA F6 00            		jp	z,.request
(2)  206/     107 :                     		
(2)  207/     107 :                     ; ----------------------------------------
(2)  208/     107 :                     
(2)  209/     107 :                     .restart:
(2)  210/     107 : 3E 2B               		ld	a,2Bh
(2)  211/     109 : 32 00 40            		ld	(zym_ctrl_1),a
(2)  212/     10C : 3E 80               		ld	a,80h
(2)  213/     10E : 32 01 40            		ld	(zym_data_1),a
(2)  214/     111 : 01 00 00            		ld	bc,0
(2)  215/     114 : 3A 1F 00            		ld	a,(Sample_Flags)
(2)  216/     117 : F6 80               		or	10000000b
(2)  217/     119 : CB 4F               		bit 	1,a			; LOOP bit?
(2)  218/     11B : CA 20 01            		jp	z,.nlpfl
(2)  219/     11E : F6 40               		or	01000000b
(2)  220/     120 :                     .nlpfl:
(2)  221/     120 : E6 F0               		and 	11110000b
(2)  222/     122 : 32 1F 00            		ld	(Sample_Flags),a
(2)  223/     125 : ED 5B 2D 00         		ld	de,(Sample_Speed)
(2)  224/     129 :                     		
(2)  225/     129 : AF                  		xor	a
(2)  226/     12A : 32 20 00            		ld	(Sample_Read),a
(2)  227/     12D : 2A 24 00            		ld	hl,(Sample_Start)
(2)  228/     130 : 3A 26 00            		ld	a,(Sample_Start+2)
(2)  229/     133 : 22 21 00            		ld	(Sample_Read+1),hl
(2)  230/     136 : 32 23 00            		ld	(Sample_Read+3),a
(2)  231/     139 : CF                  		rst 	8
(2)  232/     13A :                     
(2)  233/     13A : 01 00 00            		ld	bc,0			; full size
(2)  234/     13D : 3A 26 00            		ld	a,(Sample_Start+2)
(2)  235/     140 : 67                  		ld	h,a
(2)  236/     141 : 3A 29 00            		ld	a,(Sample_End+2)
(2)  237/     144 : BC                  		cp	h
(2)  238/     145 : C2 3F 00            		jp	nz,.loop
(2)  239/     148 : 2A 27 00            		ld	hl,(Sample_End)
(2)  240/     14B : ED 4B 27 00         		ld	bc,(Sample_End)
(2)  241/     14F : 3F                  		ccf
(2)  242/     150 : ED 42               		sbc 	hl,bc
(2)  243/     152 : 3F                  		ccf
(2)  244/     153 : ED 42               		sbc 	hl,bc
(2)  245/     155 : 44                  		ld	b,h
(2)  246/     156 : 4D                  		ld	c,l
(2)  247/     157 : C3 3F 00            		jp	.loop
(2)  248/     15A :                     
(2)  249/     15A :                     ; ----------------------------------------
(2)  250/     15A :                     
(2)  251/     15A :                     .pitch:
(2)  252/     15A : ED 5B 2D 00         		ld	de,(Sample_Speed)
(2)  253/     15E : 3A 1F 00            		ld	a,(Sample_Flags)
(2)  254/     161 : E6 FB               		and	11111011b
(2)  255/     163 : F6 80               		or	80h
(2)  256/     165 : 32 1F 00            		ld	(Sample_Flags),a
(2)  257/     168 : C3 3F 00            		jp	.loop
(2)  258/     16B :                     
(2)  259/     16B :                     ; ------------------------------------------------
(2)  260/     16B :                     ; Stop WAV
(2)  261/     16B :                     ; ------------------------------------------------
(2)  262/     16B :                     
(2)  263/     16B :                     .turn_off:
(2)  264/     16B : 3E 2B               		ld	a,2Bh
(2)  265/     16D : 32 00 40            		ld	(zym_ctrl_1),a
(2)  266/     170 : AF                  		xor	a
(2)  267/     171 : 32 1F 00            		ld	(Sample_Flags),a
(2)  268/     174 : 32 01 40            		ld	(zym_data_1),a
(2)  269/     177 : C3 3F 00            		jp	.loop
(2)  270/     17A :                     		
(2)  271/     17A :                     ; ====================================================================
(2)  272/     17A :                     ; ----------------------------------------------------------------
(2)  273/     17A :                     ; FM/PSG track player
(2)  274/     17A :                     ; 
(2)  275/     17A :                     ; ticks: 150 + trck_tempo_bits*10
(2)  276/     17A :                     ; speed: trck_speed - 1
(2)  277/     17A :                     ; ----------------------------------------------------------------
(2)  278/     17A :                     
(2)  279/     17A :                     z80_int:
(2)  280/     17A : F3                  		di
(2)  281/     17B : F5                  		push	af
(2)  282/     17C : D9                  		exx
(2)  283/     17D :                     
(2)  284/     17D :                     ; ------------------------------------
(2)  285/     17D :                     ; Read tracks
(2)  286/     17D :                     ; ------------------------------------
(2)  287/     17D :                     
(2)  288/     17D : 3A 32 00            		ld	a,(curr_SndBank)		; Move ROM to music data
(2)  289/     180 : CF                  		rst 	8
(2)  290/     181 : FD 21 0A 0F         		ld	iy,SndBuff_Track_1
(2)  291/     185 : DD 21 8A 0F         		ld	ix,SndBuff_ChnlBuff_1
(2)  292/     189 : CD F8 01            		call	SndDrv_ReadTrack
(2)  293/     18C : FD 21 4A 0F         		ld	iy,SndBuff_Track_2
(2)  294/     190 : DD 21 CA 10         		ld	ix,SndBuff_ChnlBuff_2
(2)  295/     194 : CD F8 01            		call	SndDrv_ReadTrack
(2)  296/     197 :                     
(2)  297/     197 :                     ; ------------------------------------
(2)  298/     197 :                     ; Exit Vint
(2)  299/     197 :                     ; ------------------------------------
(2)  300/     197 :                     
(2)  301/     197 : 3A 23 00            		ld	a,(Sample_Read+3)		; Return ROM bank to sample
(2)  302/     19A : CF                  		rst 	8
(2)  303/     19B : 16 2A               		ld	d,2Ah				; Play last byte
(2)  304/     19D : 2A 21 00            		ld	hl,(Sample_Read+1)		; TODO: might read a bad byte (no EOF check)
(2)  305/     1A0 : 5E                  		ld	e,(hl)
(2)  306/     1A1 : CD 52 0C            		call	SndDrv_FmSet_1
(2)  307/     1A4 :                     
(2)  308/     1A4 :                     ; ------------------------------------
(2)  309/     1A4 :                     
(2)  310/     1A4 :                     .no_trcks:
(2)  311/     1A4 : D9                  		exx
(2)  312/     1A5 : F1                  		pop	af
(2)  313/     1A6 : FB                  		ei
(2)  314/     1A7 : C9                  		ret					; Return
(2)  315/     1A8 :                     
(2)  316/     1A8 :                     ; ===================================================================
(2)  317/     1A8 :                     ; ------------------------------------
(2)  318/     1A8 :                     ; Init driver
(2)  319/     1A8 :                     ; ------------------------------------
(2)  320/     1A8 :                     
(2)  321/     1A8 :                     SndDrv_Init:
(2)  322/     1A8 : 11 0B 22            		ld	de,220Bh			; LFO 03h
(2)  323/     1AB : CD 52 0C            		call	SndDrv_FmSet_1
(2)  324/     1AE : 11 00 27            		ld	de,2700h
(2)  325/     1B1 : CD 52 0C            		call	SndDrv_FmSet_1
(2)  326/     1B4 : 11 00 28            		ld	de,2800h
(2)  327/     1B7 : CD 52 0C            		call	SndDrv_FmSet_1
(2)  328/     1BA : 11 01 28            		ld	de,2801h
(2)  329/     1BD : CD 52 0C            		call	SndDrv_FmSet_1
(2)  330/     1C0 : 11 02 28            		ld	de,2802h
(2)  331/     1C3 : CD 52 0C            		call	SndDrv_FmSet_1
(2)  332/     1C6 : 11 04 28            		ld	de,2804h
(2)  333/     1C9 : CD 52 0C            		call	SndDrv_FmSet_1
(2)  334/     1CC : 11 05 28            		ld	de,2805h
(2)  335/     1CF : CD 52 0C            		call	SndDrv_FmSet_1
(2)  336/     1D2 : 11 06 28            		ld	de,2806h
(2)  337/     1D5 : CD 52 0C            		call	SndDrv_FmSet_1
(2)  338/     1D8 : 11 00 2B            		ld	de,2B00h
(2)  339/     1DB : CD 52 0C            		call	SndDrv_FmSet_1
(2)  340/     1DE : 3E 9F               		ld	a,09Fh
(2)  341/     1E0 : 32 11 7F            		ld	(Zpsg_ctrl),a
(2)  342/     1E3 : 3E BF               		ld	a,0BFh
(2)  343/     1E5 : 32 11 7F            		ld	(Zpsg_ctrl),a		
(2)  344/     1E8 : 3E DF               		ld	a,0DFh
(2)  345/     1EA : 32 11 7F            		ld	(Zpsg_ctrl),a	
(2)  346/     1ED : 3E FF               		ld	a,0FFh
(2)  347/     1EF : 32 11 7F            		ld	(Zpsg_ctrl),a
(2)  348/     1F2 :                     		
(2)  349/     1F2 :                     	; Set LOW priority to the BGM track buffer
(2)  350/     1F2 : 3E 01               		ld	a,1
(2)  351/     1F4 : 32 5A 0F            		ld	(SndBuff_Track_2+trck_Priority),a
(2)  352/     1F7 : C9                  		ret
(2)  353/     1F8 :                     
(2)  354/     1F8 :                     ; ===================================================================
(2)  355/     1F8 :                     ; ------------------------------------
(2)  356/     1F8 :                     ; Read track
(2)  357/     1F8 :                     ; 
(2)  358/     1F8 :                     ; iy - Pattern buffer
(2)  359/     1F8 :                     ; ix - Channel list
(2)  360/     1F8 :                     ; ------------------------------------
(2)  361/     1F8 :                     
(2)  362/     1F8 :                     SndDrv_ReadTrack:
(2)  363/     1F8 : FD 7E 0A            		ld	a,(iy+trck_ReqFlag)
(2)  364/     1FB : B7                  		or	a
(2)  365/     1FC : C4 53 0B            		call	nz,SndDrv_ReqTrack
(2)  366/     1FF : FD 7E 11            		ld	a,(iy+trck_Active)
(2)  367/     202 : B7                  		or	a
(2)  368/     203 : C8                  		ret	z
(2)  369/     204 : FD 7E 1D            		ld	a,(iy+trck_TempoBits)
(2)  370/     207 : 0F                  		rrca
(2)  371/     208 : FD 77 1D            		ld	(iy+trck_TempoBits),a
(2)  372/     20B : DA 1C 02            		jp	c,.force_on
(2)  373/     20E : FD 7E 0D            		ld	a,(iy+trck_TicksRead)
(2)  374/     211 : 3D                  		dec	a
(2)  375/     212 : FD 77 0D            		ld	(iy+trck_TicksRead),a
(2)  376/     215 : F0                  		ret	p
(2)  377/     216 : FD 7E 1F            		ld	a,(iy+trck_TicksCurr)		; save Ticks
(2)  378/     219 : FD 77 0D            		ld	(iy+trck_TicksRead),a
(2)  379/     21C :                     .force_on:
(2)  380/     21C : FD 7E 1E            		ld	a,(iy+trck_RowWait)		; row countdown
(2)  381/     21F : 3D                  		dec	a
(2)  382/     220 : FD 77 1E            		ld	(iy+trck_RowWait),a
(2)  383/     223 : F2 F7 02            		jp	p,.row_countdwn
(2)  384/     226 : FD 36 1E 00         		ld	(iy+trck_RowWait),0
(2)  385/     22A :                     		
(2)  386/     22A :                     ; ------------------------------
(2)  387/     22A :                     ; check for new track data
(2)  388/     22A :                     ; ------------------------------
(2)  389/     22A :                     
(2)  390/     22A : FD 5E 1A            		ld	e,(iy+trck_RowSteps)		; Row finished?
(2)  391/     22D : FD 56 1B            		ld	d,(iy+(trck_RowSteps+1))
(2)  392/     230 : 7B                  		ld	a,e
(2)  393/     231 : B2                  		or	d
(2)  394/     232 : C2 7A 02            		jp	nz,.dontupd_trck
(2)  395/     235 :                     .trck_restart:
(2)  396/     235 : 11 00 00            		ld	de,0
(2)  397/     238 : FD 5E 0E            		ld	e,(iy+trck_BlockCurr)
(2)  398/     23B : FD 6E 12            		ld	l,(iy+trck_Blocks)
(2)  399/     23E : FD 66 13            		ld	h,(iy+(trck_Blocks+1))
(2)  400/     241 : 4D                  		ld	c,l				; bc - copy of hl
(2)  401/     242 : 44                  		ld	b,h
(2)  402/     243 : 19                  		add 	hl,de
(2)  403/     244 : 7E                  		ld	a,(hl)
(2)  404/     245 : FE FE               		cp	0FEh
(2)  405/     247 : CC E1 02            		call	z,.skip_block
(2)  406/     24A : FE FF               		cp	0FFh				; End of song marker? 0FFh
(2)  407/     24C : CA E5 02            		jp	z,.stop_track
(2)  408/     24F : 87                  		add 	a,a
(2)  409/     250 : 87                  		add 	a,a
(2)  410/     251 : 23                  		inc 	hl
(2)  411/     252 : FD 34 0E            		inc 	(iy+trck_BlockCurr)
(2)  412/     255 : 11 00 00            		ld	de,0
(2)  413/     258 : 5F                  		ld	e,a
(2)  414/     259 : FD 6E 14            		ld	l,(iy+trck_PattBase)
(2)  415/     25C : FD 66 15            		ld	h,(iy+(trck_PattBase+1))
(2)  416/     25F : 19                  		add 	hl,de
(2)  417/     260 : 4E                  		ld	c,(hl)
(2)  418/     261 : 23                  		inc 	hl
(2)  419/     262 : 46                  		ld	b,(hl)
(2)  420/     263 : 23                  		inc 	hl
(2)  421/     264 : 5E                  		ld	e,(hl)
(2)  422/     265 : 23                  		inc 	hl
(2)  423/     266 : 56                  		ld	d,(hl)
(2)  424/     267 : FD 6E 14            		ld	l,(iy+trck_PattBase)
(2)  425/     26A : FD 66 15            		ld	h,(iy+(trck_PattBase+1))
(2)  426/     26D : 09                  		add 	hl,bc
(2)  427/     26E : FD 75 18            		ld	(iy+trck_PattRead),l
(2)  428/     271 : FD 74 19            		ld	(iy+(trck_PattRead+1)),h
(2)  429/     274 : FD 73 1A            		ld	(iy+trck_RowSteps),e
(2)  430/     277 : FD 72 1B            		ld	(iy+(trck_RowSteps+1)),d
(2)  431/     27A :                     .dontupd_trck:
(2)  432/     27A : FD 6E 18            		ld	l,(iy+trck_PattRead)		; Set last read point
(2)  433/     27D : FD 66 19            		ld	h,(iy+(trck_PattRead+1))
(2)  434/     280 :                     
(2)  435/     280 :                     ; ------------------------------
(2)  436/     280 :                     ; Check timer or note data
(2)  437/     280 :                     ; ------------------------------
(2)  438/     280 : 7E                  		ld	a,(hl)
(2)  439/     281 : B7                  		or	a
(2)  440/     282 : F2 ED 02            		jp	p,.set_timer
(2)  441/     285 :                     .loop_me:
(2)  442/     285 : 23                  		inc	hl
(2)  443/     286 : 4F                  		ld	c,a
(2)  444/     287 : E6 3F               		and	00111111b
(2)  445/     289 : 11 00 00            		ld	de,0			; size 20h
(2)  446/     28C : 5F                  		ld	e,a
(2)  447/     28D : E6 18               		and	00011000b
(2)  448/     28F : 0F                  		rrca
(2)  449/     290 : 0F                  		rrca
(2)  450/     291 : 0F                  		rrca
(2)  451/     292 : 57                  		ld	d,a
(2)  452/     293 : 7B                  		ld	a,e
(2)  453/     294 : E6 07               		and	00000111b
(2)  454/     296 : 0F                  		rrca
(2)  455/     297 : 0F                  		rrca
(2)  456/     298 : 0F                  		rrca
(2)  457/     299 : 5F                  		ld	e,a
(2)  458/     29A : DD E5               		push	ix			; Save channel buffer
(2)  459/     29C : DD 19               		add	ix,de
(2)  460/     29E : CB 71               		bit 	6,c
(2)  461/     2A0 : CA A8 02            		jp	z,.keep_ctrl
(2)  462/     2A3 : 7E                  		ld	a,(hl)
(2)  463/     2A4 : 23                  		inc	hl
(2)  464/     2A5 : DD 77 01            		ld	(ix+chnl_Type),a
(2)  465/     2A8 :                     .keep_ctrl:
(2)  466/     2A8 : DD 7E 01            		ld	a,(ix+chnl_Type)
(2)  467/     2AB : 0F                  		rrca
(2)  468/     2AC : D2 B4 02            		jp	nc,.no_note
(2)  469/     2AF : 4E                  		ld	c,(hl)			; Note
(2)  470/     2B0 : 23                  		inc 	hl
(2)  471/     2B1 : DD 71 02            		ld	(ix+chnl_Note),c
(2)  472/     2B4 :                     .no_note:
(2)  473/     2B4 : 0F                  		rrca				; Instrument
(2)  474/     2B5 : D2 BD 02            		jp	nc,.no_inst
(2)  475/     2B8 : 4E                  		ld	c,(hl)
(2)  476/     2B9 : 23                  		inc 	hl
(2)  477/     2BA : DD 71 03            		ld	(ix+chnl_Ins),c
(2)  478/     2BD :                     .no_inst:
(2)  479/     2BD : 0F                  		rrca				; Volume
(2)  480/     2BE : D2 C6 02            		jp	nc,.no_vol
(2)  481/     2C1 : 4E                  		ld	c,(hl)
(2)  482/     2C2 : 23                  		inc 	hl
(2)  483/     2C3 : DD 71 04            		ld	(ix+chnl_Vol),c
(2)  484/     2C6 :                     .no_vol:
(2)  485/     2C6 : 0F                  		rrca				; Effect
(2)  486/     2C7 : D2 D4 02            		jp	nc,.no_eff
(2)  487/     2CA : 4E                  		ld	c,(hl)
(2)  488/     2CB : 23                  		inc 	hl
(2)  489/     2CC : DD 71 05            		ld	(ix+chnl_EffId),c
(2)  490/     2CF : 4E                  		ld	c,(hl)
(2)  491/     2D0 : 23                  		inc 	hl
(2)  492/     2D1 : DD 71 06            		ld	(ix+chnl_EffArg),c
(2)  493/     2D4 :                     .no_eff:
(2)  494/     2D4 : CD BD 03            		call	.chip_setup
(2)  495/     2D7 : DD E1               		pop	ix			; Restore channel buffer
(2)  496/     2D9 : 7E                  		ld	a,(hl)
(2)  497/     2DA : B7                  		or	a
(2)  498/     2DB : CA F0 02            		jp	z,.exit_notes
(2)  499/     2DE : C3 85 02            		jp	.loop_me
(2)  500/     2E1 :                     		
(2)  501/     2E1 :                     ; ------------------------------
(2)  502/     2E1 :                     ; block 0FEh
(2)  503/     2E1 :                     ; skip block
(2)  504/     2E1 :                     ; ------------------------------
(2)  505/     2E1 :                     
(2)  506/     2E1 :                     ; TODO ver que es esto
(2)  507/     2E1 :                     ; en OpenMPT
(2)  508/     2E1 :                     .skip_block:
(2)  509/     2E1 : FD 34 0E            		inc	(iy+trck_BlockCurr)
(2)  510/     2E4 : C9                  		ret
(2)  511/     2E5 :                     		
(2)  512/     2E5 :                     ; ------------------------------
(2)  513/     2E5 :                     ; block 0FFh
(2)  514/     2E5 :                     ; end of tracks
(2)  515/     2E5 :                     ; ------------------------------
(2)  516/     2E5 :                     
(2)  517/     2E5 :                     .stop_track:
(2)  518/     2E5 : CD D1 0B            		call	SndDrv_ResetChan
(2)  519/     2E8 : FD 36 11 00         		ld	(iy+trck_Active),0
(2)  520/     2EC : C9                  		ret
(2)  521/     2ED :                     
(2)  522/     2ED :                     ; ------------------------------
(2)  523/     2ED :                     ; Set ROW wait timer
(2)  524/     2ED :                     ; 
(2)  525/     2ED :                     ; if a = 00h-7Fh
(2)  526/     2ED :                     ; ------------------------------
(2)  527/     2ED :                     
(2)  528/     2ED :                     .set_timer:
(2)  529/     2ED : FD 77 1E            		ld	(iy+trck_RowWait),a
(2)  530/     2F0 :                     
(2)  531/     2F0 :                     ; ------------------------------
(2)  532/     2F0 :                     ; Note pack exit
(2)  533/     2F0 :                     ; ------------------------------
(2)  534/     2F0 :                     
(2)  535/     2F0 :                     .exit_notes:
(2)  536/     2F0 : 23                  		inc 	hl
(2)  537/     2F1 :                     .exit_busy:
(2)  538/     2F1 : FD 75 18            		ld	(iy+trck_PattRead),l		; Save new read point
(2)  539/     2F4 : FD 74 19            		ld	(iy+(trck_PattRead+1)),h
(2)  540/     2F7 :                     
(2)  541/     2F7 :                     ; ------------------------------
(2)  542/     2F7 :                     ; Decrement rows
(2)  543/     2F7 :                     ; ------------------------------
(2)  544/     2F7 :                     
(2)  545/     2F7 :                     .row_countdwn:
(2)  546/     2F7 : FD 5E 1A            		ld	e,(iy+trck_RowSteps)
(2)  547/     2FA : FD 56 1B            		ld	d,(iy+(trck_RowSteps+1))
(2)  548/     2FD : 1B                  		dec 	de
(2)  549/     2FE : FD 73 1A            		ld	(iy+trck_RowSteps),e
(2)  550/     301 : FD 72 1B            		ld	(iy+(trck_RowSteps+1)),d
(2)  551/     304 :                     		
(2)  552/     304 :                     ; --------------------------------
(2)  553/     304 :                     ; Update PSG manually
(2)  554/     304 :                     ; 
(2)  555/     304 :                     ; NOTE: this costs CPU time if
(2)  556/     304 :                     ; playing a sample
(2)  557/     304 :                     ; --------------------------------
(2)  558/     304 :                     
(2)  559/     304 : 01 C0 00            		ld	bc,20h*6
(2)  560/     307 : DD 09               		add 	ix,bc
(2)  561/     309 : CD 31 03            		call	.psg_envlope
(2)  562/     30C : 11 20 00            		ld	de,20h
(2)  563/     30F : DD 19               		add 	ix,de
(2)  564/     311 : CD 31 03            		call	.psg_envlope
(2)  565/     314 : 11 40 00            		ld	de,40h			; go to NOISE first
(2)  566/     317 : DD 19               		add 	ix,de
(2)  567/     319 : CD 31 03            		call	.psg_envlope
(2)  568/     31C : 11 E0 FF            		ld	de,-20h			; back to PSG3
(2)  569/     31F : DD 19               		add 	ix,de
(2)  570/     321 : 3A 33 00            		ld	a,(curr_NoiseMode)
(2)  571/     324 : E6 03               		and	00000011b
(2)  572/     326 : FE 03               		cp	3
(2)  573/     328 : C2 31 03            		jp	nz,.psg_envlope
(2)  574/     32B : 3E DF               		ld	a,0DFh
(2)  575/     32D : 32 11 7F            		ld	(zpsg_ctrl),a
(2)  576/     330 : C9                  		ret
(2)  577/     331 :                     
(2)  578/     331 :                     ; --------------------------------
(2)  579/     331 :                     
(2)  580/     331 :                     .psg_envlope:
(2)  581/     331 : CD 95 04            		call	.search_slot
(2)  582/     334 : D8                  		ret	c
(2)  583/     335 : DD 7E 01            		ld	a,(ix+chnl_Type)
(2)  584/     338 : B7                  		or	a
(2)  585/     339 : C8                  		ret	z
(2)  586/     33A : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2)  587/     33D : 57                  		ld	d,a
(2)  588/     33E : FE E0               		cp	0E0h
(2)  589/     340 : C2 54 03            		jp	nz,.not_noise
(2)  590/     343 : 3A 33 00            		ld	a,(curr_NoiseMode)
(2)  591/     346 : FD 4E 0C            		ld	c,(iy+trck_PsgNoise)
(2)  592/     349 : B9                  		cp	c
(2)  593/     34A : CA 54 03            		jp	z,.not_noise
(2)  594/     34D : 79                  		ld	a,c
(2)  595/     34E : 32 33 00            		ld	(curr_NoiseMode),a
(2)  596/     351 : 32 11 7F            		ld	(zpsg_ctrl),a
(2)  597/     354 :                     .not_noise:
(2)  598/     354 : 7A                  		ld	a,d
(2)  599/     355 : F6 1F               		or	1Fh
(2)  600/     357 : 5F                  		ld	e,a
(2)  601/     358 : DD 7E 02            		ld	a,(ix+chnl_Note)
(2)  602/     35B : FE FF               		cp	-1
(2)  603/     35D : CA B8 03            		jp	z,.set_vol
(2)  604/     360 : FE FE               		cp	-2
(2)  605/     362 : CA B8 03            		jp	z,.set_vol
(2)  606/     365 : FE F6               		cp	-10
(2)  607/     367 : CA B8 03            		jp	z,.set_vol
(2)  608/     36A :                     
(2)  609/     36A : DD 7E 1B            		ld	a,(ix+chnl_PsgOutFreq)
(2)  610/     36D : B7                  		or	a
(2)  611/     36E : CA 7E 03            		jp	z,.no_upd_freq
(2)  612/     371 : 32 11 7F            		ld	(zpsg_ctrl),a
(2)  613/     374 : AF                  		xor	a
(2)  614/     375 : DD 77 1B            		ld	(ix+chnl_PsgOutFreq),a
(2)  615/     378 : DD 7E 1C            		ld	a,(ix+(chnl_PsgOutFreq+1))
(2)  616/     37B : 32 11 7F            		ld	(zpsg_ctrl),a
(2)  617/     37E :                     .no_upd_freq:
(2)  618/     37E :                     
(2)  619/     37E : DD 66 08            		ld	h,(ix+(chnl_InsAddr+1))
(2)  620/     381 : DD 6E 07            		ld	l,(ix+chnl_InsAddr)
(2)  621/     384 : DD 5E 11            		ld	e,(ix+chnl_ChnVolBase)		; Set volume
(2)  622/     387 : 01 00 00            		ld	bc,0
(2)  623/     38A : DD 4E 13            		ld	c,(ix+chnl_PsgIndx)
(2)  624/     38D : 09                  		add 	hl,bc
(2)  625/     38E :                     
(2)  626/     38E : 7E                  		ld	a,(hl)
(2)  627/     38F : FE FF               		cp	-1				; -1, endoflist
(2)  628/     391 : CA A7 03            		jp	z,.envbyte_eof
(2)  629/     394 : FE FE               		cp	-2				; -2, goto index
(2)  630/     396 : C2 A1 03            		jp	nz,.envbyte_goto
(2)  631/     399 : 23                  		inc	hl
(2)  632/     39A : 7E                  		ld	a,(hl)
(2)  633/     39B : DD 77 13            		ld	(ix+chnl_PsgIndx),a
(2)  634/     39E : C3 A7 03            		jp	.envbyte_eof
(2)  635/     3A1 :                     .envbyte_goto:
(2)  636/     3A1 : DD 77 12            		ld	(ix+chnl_PsgVolEnv),a
(2)  637/     3A4 : DD 34 13            		inc 	(ix+chnl_PsgIndx)
(2)  638/     3A7 :                     .envbyte_eof:
(2)  639/     3A7 : DD 7E 12            		ld	a,(ix+chnl_PsgVolEnv)
(2)  640/     3AA : 83                  		add 	a,e
(2)  641/     3AB : 5F                  		ld	e,a
(2)  642/     3AC : E6 F0               		and	11110000b
(2)  643/     3AE : CA B3 03            		jp	z,.no_max
(2)  644/     3B1 : 1E 0F               		ld	e,00001111b
(2)  645/     3B3 :                     .no_max:
(2)  646/     3B3 : 7B                  		ld	a,e
(2)  647/     3B4 : F6 10               		or	00010000b
(2)  648/     3B6 : B2                  		or	d
(2)  649/     3B7 : 5F                  		ld	e,a
(2)  650/     3B8 :                     .set_vol:
(2)  651/     3B8 : 7B                  		ld	a,e
(2)  652/     3B9 : 32 11 7F            		ld	(zpsg_ctrl),a
(2)  653/     3BC :                     .next_psg:
(2)  654/     3BC : C9                  		ret
(2)  655/     3BD :                     
(2)  656/     3BD :                     ; ------------------------------------
(2)  657/     3BD :                     ; Set chip
(2)  658/     3BD :                     ; 
(2)  659/     3BD :                     ; iy - track buffer
(2)  660/     3BD :                     ; ix - current channel
(2)  661/     3BD :                     ; ------------------------------------
(2)  662/     3BD :                     
(2)  663/     3BD :                     .chip_setup:
(2)  664/     3BD : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2)  665/     3C0 : E6 07               		and	111b
(2)  666/     3C2 : FE 03               		cp	3
(2)  667/     3C4 : C8                  		ret	z			; 03h invalid channel
(2)  668/     3C5 :                     
(2)  669/     3C5 :                     ; ---------------------------------------------
(2)  670/     3C5 :                     ; Track channel list:
(2)  671/     3C5 :                     ; FM1 FM2 FM4 FM5 FM3 FM6 PSG1 PSG2 PSG3 NOISE
(2)  672/     3C5 :                     ; ---------------------------------------------
(2)  673/     3C5 :                     
(2)  674/     3C5 : E5                  		push	hl
(2)  675/     3C6 : DD 7E 01            		ld	a,(ix+chnl_Type)	; Instrument
(2)  676/     3C9 : CB 6F               		bit	5,a
(2)  677/     3CB : C2 D3 03            		jp	nz,.use_newinst
(2)  678/     3CE : E6 02               		and	0010b
(2)  679/     3D0 : CA 0E 04            		jp	z,.no_newinst
(2)  680/     3D3 :                     .use_newinst:
(2)  681/     3D3 : CD BD 06            		call	.grab_instslot
(2)  682/     3D6 : 7E                  		ld	a,(hl)
(2)  683/     3D7 : FE FF               		cp	-1
(2)  684/     3D9 : CA 0E 04            		jp	z,.no_newinst
(2)  685/     3DC : DD 77 0B            		ld	(ix+chnl_InsType),a
(2)  686/     3DF : 23                  		inc	hl
(2)  687/     3E0 : 7E                  		ld	a,(hl)
(2)  688/     3E1 : DD 77 0C            		ld	(ix+chnl_InsOpt),a
(2)  689/     3E4 : 23                  		inc	hl
(2)  690/     3E5 : 7E                  		ld	a,(hl)
(2)  691/     3E6 : DD 77 07            		ld	(ix+chnl_InsAddr),a
(2)  692/     3E9 : 23                  		inc	hl
(2)  693/     3EA : 7E                  		ld	a,(hl)
(2)  694/     3EB : DD 77 08            		ld	(ix+(chnl_InsAddr+1)),a
(2)  695/     3EE :                     		
(2)  696/     3EE : DD 7E 00            		ld	a,(ix+chnl_Chip)	; PSG instr are external
(2)  697/     3F1 : B7                  		or	a
(2)  698/     3F2 : FA FB 03            		jp	m,.psg_instr
(2)  699/     3F5 : CD BB 07            		call	.set_fm_ins
(2)  700/     3F8 : C3 0E 04            		jp	.no_newinst
(2)  701/     3FB :                     .psg_instr:
(2)  702/     3FB : FE E0               		cp	0E0h
(2)  703/     3FD : C2 0E 04            		jp	nz,.no_newinst
(2)  704/     400 : DD 7E 0B            		ld	a,(ix+chnl_InsType)	; Set new noise type
(2)  705/     403 : 4F                  		ld	c,a
(2)  706/     404 : E6 E0               		and 	0E0h
(2)  707/     406 : FE E0               		cp	0E0h
(2)  708/     408 : C2 0E 04            		jp	nz,.no_newinst
(2)  709/     40B : FD 71 0C            		ld	(iy+trck_PsgNoise),c	; to TRACK buffer
(2)  710/     40E :                     .no_newinst:
(2)  711/     40E :                     		
(2)  712/     40E :                     	; ---------------------------------------------
(2)  713/     40E : DD 7E 01            		ld	a,(ix+chnl_Type)	; Effect
(2)  714/     411 : CB 7F               		bit	7,a
(2)  715/     413 : C2 1B 04            		jp	nz,.use_neweff
(2)  716/     416 : E6 08               		and	1000b
(2)  717/     418 : CA 27 04            		jp	z,.no_neweff
(2)  718/     41B :                     .use_neweff:	
(2)  719/     41B : CD A1 05            		call	.set_effect
(2)  720/     41E : CD 95 04            		call	.search_slot
(2)  721/     421 : DA 27 04            		jp	c,.no_neweff
(2)  722/     424 : CD 9C 0A            		call	.run_effect
(2)  723/     427 :                     .no_neweff:
(2)  724/     427 :                     
(2)  725/     427 :                     	; ---------------------------------------------
(2)  726/     427 : DD 7E 01            		ld	a,(ix+chnl_Type)	; Note
(2)  727/     42A : 5F                  		ld	e,a
(2)  728/     42B : CB 67               		bit	4,a
(2)  729/     42D : C2 35 04            		jp	nz,.use_notereq
(2)  730/     430 : E6 01               		and	0001b
(2)  731/     432 : CA 4A 04            		jp	z,.no_notereq
(2)  732/     435 :                     .use_notereq:
(2)  733/     435 : CD BD 06            		call	.grab_instslot
(2)  734/     438 : 7E                  		ld	a,(hl)
(2)  735/     439 : FE FF               		cp	-1
(2)  736/     43B : CA 4A 04            		jp	z,.no_notereq
(2)  737/     43E :                     
(2)  738/     43E : CD CE 04            		call	.set_frequency
(2)  739/     441 : CD 95 04            		call	.search_slot
(2)  740/     444 : DA 4A 04            		jp	c,.no_notereq
(2)  741/     447 : CD D3 06            		call	.run_frequency
(2)  742/     44A :                     .no_notereq:
(2)  743/     44A :                     
(2)  744/     44A :                     	; ------------------------------------
(2)  745/     44A : DD 7E 01            		ld	a,(ix+chnl_Type)
(2)  746/     44D : CB 77               		bit	6,a			; Volume
(2)  747/     44F : C2 57 04            		jp	nz,.use_newvol
(2)  748/     452 : E6 04               		and	0100b
(2)  749/     454 : CA 66 04            		jp	z,.no_newvol
(2)  750/     457 :                     .use_newvol:
(2)  751/     457 : DD 46 04            		ld	b,(ix+chnl_Vol)
(2)  752/     45A : DD 70 16            		ld	(ix+chnl_EfNewVol),b
(2)  753/     45D : CD 95 04            		call	.search_slot
(2)  754/     460 : DA 66 04            		jp	c,.no_newvol
(2)  755/     463 : CD C0 04            		call	.set_volume
(2)  756/     466 :                     .no_newvol:
(2)  757/     466 :                     
(2)  758/     466 :                     	; ---------------------------------------------
(2)  759/     466 :                     	; Mark active SFX channels
(2)  760/     466 : 21 0A 12            		ld	hl,SndBuff_UsedChnls
(2)  761/     469 : FD 7E 10            		ld	a,(iy+trck_Priority)
(2)  762/     46C : B7                  		or	a
(2)  763/     46D : CA 73 04            		jp	z,.lowprioset
(2)  764/     470 : 21 14 12            		ld	hl,SndBuff_UsedChnls_2
(2)  765/     473 :                     .lowprioset:	
(2)  766/     473 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2)  767/     476 : B7                  		or	a
(2)  768/     477 : F2 84 04            		jp	p,.plusfm
(2)  769/     47A : 07                  		rlca
(2)  770/     47B : 07                  		rlca
(2)  771/     47C : 07                  		rlca
(2)  772/     47D : E6 03               		and	00000011b
(2)  773/     47F : C6 06               		add 	a,6
(2)  774/     481 : C3 8A 04            		jp	.leftfm
(2)  775/     484 :                     .plusfm:
(2)  776/     484 : CB 57               		bit 	2,a
(2)  777/     486 : CA 8A 04            		jp	z,.leftfm
(2)  778/     489 : 3D                  		dec	a
(2)  779/     48A :                     .leftfm:
(2)  780/     48A : 11 00 00            		ld	de,0
(2)  781/     48D : 5F                  		ld	e,a
(2)  782/     48E : 19                  		add 	hl,de
(2)  783/     48F : DD 7E 01            		ld	a,(ix+chnl_Type)
(2)  784/     492 : 77                  		ld	(hl),a
(2)  785/     493 :                     
(2)  786/     493 :                     	; ---------------------------------------------
(2)  787/     493 :                     
(2)  788/     493 : E1                  		pop	hl
(2)  789/     494 : C9                  		ret
(2)  790/     495 :                     
(2)  791/     495 :                     ; ------------------------------------
(2)  792/     495 :                     ; Check if slot is busy
(2)  793/     495 :                     ; 
(2)  794/     495 :                     ; Returns:
(2)  795/     495 :                     ;  c - Channel is busy
(2)  796/     495 :                     ; nc - Channel is free or
(2)  797/     495 :                     ;      ignore (BGM only)
(2)  798/     495 :                     ; ------------------------------------
(2)  799/     495 :                     
(2)  800/     495 :                     .search_slot:
(2)  801/     495 : 3F                  		ccf
(2)  802/     496 : FD 7E 10            		ld	a,(iy+trck_Priority)
(2)  803/     499 : B7                  		or	a
(2)  804/     49A : C8                  		ret 	z
(2)  805/     49B : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2)  806/     49E : B7                  		or	a
(2)  807/     49F : F2 AC 04            		jp	p,.srchfm
(2)  808/     4A2 : 07                  		rlca
(2)  809/     4A3 : 07                  		rlca
(2)  810/     4A4 : 07                  		rlca
(2)  811/     4A5 : E6 03               		and	00000011b
(2)  812/     4A7 : C6 06               		add 	a,6
(2)  813/     4A9 : C3 B2 04            		jp	.gosrch
(2)  814/     4AC :                     .srchfm:
(2)  815/     4AC : CB 57               		bit 	2,a
(2)  816/     4AE : CA B2 04            		jp	z,.gosrch
(2)  817/     4B1 : 3D                  		dec	a
(2)  818/     4B2 :                     .gosrch:
(2)  819/     4B2 : 21 0A 12            		ld	hl,SndBuff_UsedChnls
(2)  820/     4B5 : 11 00 00            		ld	de,0
(2)  821/     4B8 : 5F                  		ld	e,a
(2)  822/     4B9 : 19                  		add 	hl,de
(2)  823/     4BA : 7E                  		ld	a,(hl)
(2)  824/     4BB : 3F                  		ccf
(2)  825/     4BC : B7                  		or	a
(2)  826/     4BD : C8                  		ret	z
(2)  827/     4BE : 37                  		scf
(2)  828/     4BF : C9                  		ret
(2)  829/     4C0 :                     
(2)  830/     4C0 :                     ; ---------------------------------------------
(2)  831/     4C0 :                     ; These routines only update the channel
(2)  832/     4C0 :                     ; buffer
(2)  833/     4C0 :                     ; ---------------------------------------------
(2)  834/     4C0 :                     
(2)  835/     4C0 :                     ; -----------------------------------
(2)  836/     4C0 :                     ; Set volume
(2)  837/     4C0 :                     ; 
(2)  838/     4C0 :                     ; FM note: call this AFTER 
(2)  839/     4C0 :                     ; updating the instrument data regs
(2)  840/     4C0 :                     ; 
(2)  841/     4C0 :                     ; b - chnl_Vol
(2)  842/     4C0 :                     ; -----------------------------------
(2)  843/     4C0 :                     
(2)  844/     4C0 :                     .set_volume:
(2)  845/     4C0 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2)  846/     4C3 : B7                  		or	a
(2)  847/     4C4 : FA CA 04            		jp	m,.vol_ispsg
(2)  848/     4C7 : C3 62 09            		jp	.set_fm_vol
(2)  849/     4CA :                     .vol_ispsg:
(2)  850/     4CA : 78                  		ld	a,b
(2)  851/     4CB : C3 35 0A            		jp	.set_psg_vol
(2)  852/     4CE :                     
(2)  853/     4CE :                     ; ------------------------------------
(2)  854/     4CE :                     ; Set channel frequency
(2)  855/     4CE :                     ; ------------------------------------
(2)  856/     4CE :                     
(2)  857/     4CE :                     .set_frequency:
(2)  858/     4CE : DD 46 0B            		ld	b,(ix+chnl_InsType)
(2)  859/     4D1 : DD 4E 00            		ld	c,(ix+chnl_Chip)
(2)  860/     4D4 : 78                  		ld	a,b
(2)  861/     4D5 : B7                  		or	a			; Type 080h/0E0h?
(2)  862/     4D6 : F2 DE 04            		jp	p,.notype3
(2)  863/     4D9 : CB 79               		bit 	7,c			; PSG channel?
(2)  864/     4DB : C2 67 05            		jp	nz,.setfreq_psg
(2)  865/     4DE :                     .notype3:
(2)  866/     4DE : 78                  		ld	a,b
(2)  867/     4DF : FE 02               		cp	2			; Type 2?
(2)  868/     4E1 : C2 EA 04            		jp	nz,.fm_normalchnl
(2)  869/     4E4 : 79                  		ld	a,c			; Channel 6?
(2)  870/     4E5 : FE 06               		cp	6
(2)  871/     4E7 : CA 42 05            		jp	z,.setfm_sample
(2)  872/     4EA :                     
(2)  873/     4EA :                     ; -------------------------------------
(2)  874/     4EA :                     ; FM frequency
(2)  875/     4EA :                     ; -------------------------------------
(2)  876/     4EA :                     
(2)  877/     4EA :                     .fm_normalchnl:
(2)  878/     4EA : DD 7E 02            		ld	a,(ix+chnl_Note)
(2)  879/     4ED : FE F6               		cp	-10
(2)  880/     4EF : CA 12 05            		jp	z,.unlock_chnl
(2)  881/     4F2 : FE FE               		cp	-2
(2)  882/     4F4 : CA 8F 07            		jp	z,.fm_turnoff
(2)  883/     4F7 : FE FF               		cp	-1
(2)  884/     4F9 : CA 83 07            		jp	z,.fm_keysoff
(2)  885/     4FC :                     
(2)  886/     4FC : 21 68 0C            		ld	hl,fmFreq_List
(2)  887/     4FF : 11 00 00            		ld	de,0
(2)  888/     502 : DD 86 0C            		add 	a,(ix+chnl_InsOpt)
(2)  889/     505 : 87                  		add	a,a
(2)  890/     506 : 5F                  		ld	e,a
(2)  891/     507 : 19                  		add	hl,de
(2)  892/     508 : 7E                  		ld	a,(hl)
(2)  893/     509 : DD 77 09            		ld	(ix+chnl_Freq),a
(2)  894/     50C : 23                  		inc	hl
(2)  895/     50D : 7E                  		ld	a,(hl)
(2)  896/     50E : DD 77 0A            		ld	(ix+(chnl_Freq+1)),a
(2)  897/     511 : C9                  		ret
(2)  898/     512 :                     
(2)  899/     512 :                     ; -------------------------------------
(2)  900/     512 :                     ; Unlock current channel
(2)  901/     512 :                     ; -------------------------------------
(2)  902/     512 :                     
(2)  903/     512 :                     .unlock_chnl:
(2)  904/     512 : 21 0A 12            		ld	hl,SndBuff_UsedChnls
(2)  905/     515 : FD 7E 10            		ld	a,(iy+trck_Priority)
(2)  906/     518 : B7                  		or	a
(2)  907/     519 : CA 1F 05            		jp	z,.lowunlkset
(2)  908/     51C : 21 14 12            		ld	hl,SndBuff_UsedChnls_2
(2)  909/     51F :                     .lowunlkset:	
(2)  910/     51F : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2)  911/     522 : B7                  		or	a
(2)  912/     523 : F2 30 05            		jp	p,.uplusfm
(2)  913/     526 : 07                  		rlca
(2)  914/     527 : 07                  		rlca
(2)  915/     528 : 07                  		rlca
(2)  916/     529 : E6 03               		and	00000011b
(2)  917/     52B : C6 06               		add 	a,6
(2)  918/     52D : C3 36 05            		jp	.uleftfm
(2)  919/     530 :                     .uplusfm:
(2)  920/     530 : CB 57               		bit 	2,a
(2)  921/     532 : CA 36 05            		jp	z,.uleftfm
(2)  922/     535 : 3D                  		dec	a
(2)  923/     536 :                     .uleftfm:
(2)  924/     536 : 11 00 00            		ld	de,0
(2)  925/     539 : 5F                  		ld	e,a
(2)  926/     53A : 19                  		add 	hl,de
(2)  927/     53B : 36 00               		ld	(hl),0
(2)  928/     53D : DD 36 01 00         		ld	(ix+chnl_Type),0
(2)  929/     541 : C9                  		ret
(2)  930/     542 :                     		
(2)  931/     542 :                     ; -------------------------------------
(2)  932/     542 :                     ; Set FM6 sample
(2)  933/     542 :                     ; -------------------------------------
(2)  934/     542 :                     
(2)  935/     542 :                     .setfm_sample:
(2)  936/     542 : DD 7E 02            		ld	a,(ix+chnl_Note)
(2)  937/     545 : FE F6               		cp	-10
(2)  938/     547 : CA 12 05            		jp	z,.unlock_chnl
(2)  939/     54A : FE FE               		cp	-2
(2)  940/     54C : C8                  		ret	z
(2)  941/     54D : FE FF               		cp	-1
(2)  942/     54F : C8                  		ret	z
(2)  943/     550 : DD 86 0C            		add 	a,(ix+chnl_InsOpt)
(2)  944/     553 : 87                  		add 	a,a
(2)  945/     554 : 11 00 00            		ld	de,0
(2)  946/     557 : 5F                  		ld	e,a
(2)  947/     558 : 21 1A 0E            		ld	hl,wavFreq_List
(2)  948/     55B : 19                  		add 	hl,de
(2)  949/     55C : 7E                  		ld	a,(hl)
(2)  950/     55D : 23                  		inc 	hl
(2)  951/     55E : DD 77 09            		ld	(ix+chnl_Freq),a
(2)  952/     561 : 7E                  		ld	a,(hl)
(2)  953/     562 : 23                  		inc 	hl
(2)  954/     563 : DD 77 0A            		ld	(ix+(chnl_Freq+1)),a
(2)  955/     566 : C9                  		ret
(2)  956/     567 :                     		
(2)  957/     567 :                     ; -------------------------------------
(2)  958/     567 :                     ; PSG frequency
(2)  959/     567 :                     ; -------------------------------------
(2)  960/     567 :                     
(2)  961/     567 :                     .setfreq_psg:
(2)  962/     567 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2)  963/     56A : 47                  		ld	b,a
(2)  964/     56B : F6 1F               		or	01Fh
(2)  965/     56D : DD 7E 02            		ld	a,(ix+chnl_Note)
(2)  966/     570 : FE F6               		cp	-10
(2)  967/     572 : CA 12 05            		jp	z,.unlock_chnl
(2)  968/     575 : FE FE               		cp	-2
(2)  969/     577 : C8                  		ret	z
(2)  970/     578 : FE FF               		cp	-1
(2)  971/     57A : C8                  		ret	z
(2)  972/     57B :                     
(2)  973/     57B : 21 00 00            		ld	hl,0
(2)  974/     57E : 87                  		add 	a,a
(2)  975/     57F : 11 00 00            		ld	de,0
(2)  976/     582 : 5F                  		ld	e,a
(2)  977/     583 : 19                  		add 	hl,de
(2)  978/     584 : DD 7E 0C            		ld	a,(ix+chnl_InsOpt)
(2)  979/     587 : 87                  		add	a,a
(2)  980/     588 : 11 00 00            		ld	de,0
(2)  981/     58B : 5F                  		ld	e,a
(2)  982/     58C : 19                  		add 	hl,de
(2)  983/     58D : 54                  		ld	d,h
(2)  984/     58E : 5D                  		ld	e,l	
(2)  985/     58F : 21 28 0D            		ld	hl,psgFreq_List
(2)  986/     592 : 19                  		add	hl,de
(2)  987/     593 : 7E                  		ld	a,(hl)
(2)  988/     594 : DD 77 09            		ld	(ix+chnl_Freq),a
(2)  989/     597 : 23                  		inc 	hl
(2)  990/     598 : 7E                  		ld	a,(hl)
(2)  991/     599 : DD 77 0A            		ld	(ix+(chnl_Freq+1)),a
(2)  992/     59C : DD 36 13 00         		ld	(ix+chnl_PsgIndx),0
(2)  993/     5A0 : C9                  		ret
(2)  994/     5A1 :                     		
(2)  995/     5A1 :                     ; -------------------------------------
(2)  996/     5A1 :                     ; Set effects
(2)  997/     5A1 :                     ; updates to buffer only
(2)  998/     5A1 :                     ; 
(2)  999/     5A1 :                     ; b - Current chip
(2) 1000/     5A1 :                     ; c - Effect argument
(2) 1001/     5A1 :                     ; -------------------------------------
(2) 1002/     5A1 :                     
(2) 1003/     5A1 :                     .set_effect:
(2) 1004/     5A1 : 11 00 00            		ld	de,0
(2) 1005/     5A4 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(2) 1006/     5A7 : 87                  		add 	a,a
(2) 1007/     5A8 : E6 FE               		and	11111110b
(2) 1008/     5AA : 5F                  		ld	e,a
(2) 1009/     5AB : 21 BB 05            		ld	hl,.eff_list
(2) 1010/     5AE : 19                  		add	hl,de
(2) 1011/     5AF : DD 46 00            		ld	b,(ix+chnl_Chip)
(2) 1012/     5B2 : DD 4E 06            		ld	c,(ix+chnl_EffArg)
(2) 1013/     5B5 : 7E                  		ld	a,(hl)
(2) 1014/     5B6 : 23                  		inc	hl
(2) 1015/     5B7 : 66                  		ld	h,(hl)
(2) 1016/     5B8 : 6F                  		ld	l,a
(2) 1017/     5B9 : E9                  		jp	(hl)
(2) 1018/     5BA :                     .eff_null:
(2) 1019/     5BA : C9                  		ret
(2) 1020/     5BB :                     .eff_list:
(2) 1021/     5BB : BA 05               		dw .eff_null
(2) 1022/     5BD : F1 05               		dw .eff_A	; A | Set ticks
(2) 1023/     5BF : F9 05               		dw .eff_B	; B | Jump to block (SET MANUALLY)
(2) 1024/     5C1 : 09 06               		dw .eff_C	; C | Break to row (unsupported)
(2) 1025/     5C3 : 17 06               		dw .eff_D	; D | Volume slide
(2) 1026/     5C5 : 31 06               		dw .eff_E	; E | Portametro down
(2) 1027/     5C7 : 71 06               		dw .eff_F	; F | Portametro up
(2) 1028/     5C9 : BA 05               		dw .eff_null	; G
(2) 1029/     5CB : BA 05               		dw .eff_null	; H
(2) 1030/     5CD : BA 05               		dw .eff_null	; I
(2) 1031/     5CF : BA 05               		dw .eff_null	; J	
(2) 1032/     5D1 : BA 05               		dw .eff_null	; K
(2) 1033/     5D3 : BA 05               		dw .eff_null	; L
(2) 1034/     5D5 : BA 05               		dw .eff_null	; M
(2) 1035/     5D7 : BA 05               		dw .eff_null	; N
(2) 1036/     5D9 : BA 05               		dw .eff_null	; O
(2) 1037/     5DB : BA 05               		dw .eff_null	; P
(2) 1038/     5DD : BA 05               		dw .eff_null	; Q
(2) 1039/     5DF : BA 05               		dw .eff_null	; R
(2) 1040/     5E1 : BA 05               		dw .eff_null	; S
(2) 1041/     5E3 : BA 05               		dw .eff_null	; T
(2) 1042/     5E5 : BA 05               		dw .eff_null	; U
(2) 1043/     5E7 : BA 05               		dw .eff_null	; V
(2) 1044/     5E9 : BA 05               		dw .eff_null	; W
(2) 1045/     5EB : AA 06               		dw .eff_X	; X
(2) 1046/     5ED : BA 05               		dw .eff_null	; Y
(2) 1047/     5EF : BA 05               		dw .eff_null	; Z
(2) 1048/     5F1 :                     
(2) 1049/     5F1 :                     ; -------------------------------------
(2) 1050/     5F1 :                     ; Effect A - Set ticks
(2) 1051/     5F1 :                     ; -------------------------------------
(2) 1052/     5F1 :                     
(2) 1053/     5F1 :                     .eff_A:
(2) 1054/     5F1 : 0D                  		dec 	c
(2) 1055/     5F2 : FD 71 1F            		ld	(iy+trck_TicksCurr),c
(2) 1056/     5F5 : FD 71 0D            		ld	(iy+trck_TicksRead),c
(2) 1057/     5F8 : C9                  		ret
(2) 1058/     5F9 :                     
(2) 1059/     5F9 :                     ; -------------------------------------
(2) 1060/     5F9 :                     ; Effect B - Set block
(2) 1061/     5F9 :                     ; -------------------------------------
(2) 1062/     5F9 :                     
(2) 1063/     5F9 :                     .eff_B:
(2) 1064/     5F9 : FD 71 0E            		ld	(iy+trck_BlockCurr),c
(2) 1065/     5FC : 11 01 00            		ld	de,1			; Finish row
(2) 1066/     5FF : FD 73 1A            		ld	(iy+trck_RowSteps),e
(2) 1067/     602 : FD 72 1B            		ld	(iy+(trck_RowSteps+1)),d
(2) 1068/     605 : FD 77 1E            		ld	(iy+trck_RowWait),a
(2) 1069/     608 : C9                  		ret
(2) 1070/     609 :                     
(2) 1071/     609 :                     ; -------------------------------------
(2) 1072/     609 :                     ; Effect C - Pattern "return"
(2) 1073/     609 :                     ; (CUSTOM)
(2) 1074/     609 :                     ; -------------------------------------
(2) 1075/     609 :                     
(2) 1076/     609 :                     .eff_C:
(2) 1077/     609 : FD 36 11 00         		ld	(iy+trck_Active),0
(2) 1078/     60D : 11 01 00            		ld	de,1			; Finish row
(2) 1079/     610 : FD 73 1A            		ld	(iy+trck_RowSteps),e
(2) 1080/     613 : FD 72 1B            		ld	(iy+(trck_RowSteps+1)),d
(2) 1081/     616 : C9                  		ret
(2) 1082/     617 :                     		
(2) 1083/     617 :                     ; -------------------------------------
(2) 1084/     617 :                     ; Effect D - Volume slide
(2) 1085/     617 :                     ; -------------------------------------
(2) 1086/     617 :                     
(2) 1087/     617 :                     .eff_D:
(2) 1088/     617 : 79                  		ld	a,c
(2) 1089/     618 : E6 F0               		and	11110000b		; X0h - slide up
(2) 1090/     61A : C2 27 06            		jp	nz,.go_up
(2) 1091/     61D : 79                  		ld	a,c
(2) 1092/     61E : E6 0F               		and	00001111b		; 0Xh - slide down
(2) 1093/     620 : C8                  		ret	z			; 00h - slide continue
(2) 1094/     621 :                     .go_down:
(2) 1095/     621 : 2F                  		cpl
(2) 1096/     622 : 3C                  		inc	a
(2) 1097/     623 : DD 77 15            		ld	(ix+chnl_EfVolSlide),a
(2) 1098/     626 : C9                  		ret
(2) 1099/     627 :                     .go_up:
(2) 1100/     627 : 0F                  		rrca
(2) 1101/     628 : 0F                  		rrca
(2) 1102/     629 : 0F                  		rrca
(2) 1103/     62A : 0F                  		rrca
(2) 1104/     62B : E6 0F               		and	00001111b
(2) 1105/     62D : DD 77 15            		ld	(ix+chnl_EfVolSlide),a
(2) 1106/     630 : C9                  		ret
(2) 1107/     631 :                     
(2) 1108/     631 :                     ; -------------------------------------
(2) 1109/     631 :                     ; Effect E - Portametro down
(2) 1110/     631 :                     ; 
(2) 1111/     631 :                     ; NOTE: not accurate
(2) 1112/     631 :                     ; -------------------------------------
(2) 1113/     631 :                     
(2) 1114/     631 :                     .eff_E:
(2) 1115/     631 : 79                  		ld	a,c
(2) 1116/     632 : B7                  		or	a
(2) 1117/     633 : CA 70 06            		jp	z,.prtdwn_cont
(2) 1118/     636 : E6 F0               		and	11110000b
(2) 1119/     638 : FE E0               		cp	0E0h
(2) 1120/     63A : CA 4F 06            		jp	z,.dwn_exfine
(2) 1121/     63D : FE F0               		cp	0F0h
(2) 1122/     63F : CA 5F 06            		jp	z,.dwn_fine
(2) 1123/     642 :                     		
(2) 1124/     642 :                     ; Normal
(2) 1125/     642 : 79                  		ld	a,c
(2) 1126/     643 : E6 1F               		and	00011111b
(2) 1127/     645 : 87                  		add	a,a
(2) 1128/     646 : 2F                  		cpl
(2) 1129/     647 : 3C                  		inc	a
(2) 1130/     648 : 11 FF FF            		ld	de,-1
(2) 1131/     64B : 5F                  		ld	e,a
(2) 1132/     64C : C3 6A 06            		jp	.set_portam
(2) 1133/     64F :                     .dwn_exfine:
(2) 1134/     64F : 11 FF FF            		ld	de,-1
(2) 1135/     652 : 79                  		ld	a,c
(2) 1136/     653 : E6 0F               		and	00001111b
(2) 1137/     655 : 2F                  		cpl
(2) 1138/     656 : 3C                  		inc	a
(2) 1139/     657 : CB 2F               		sra	a
(2) 1140/     659 : CB 2F               		sra	a
(2) 1141/     65B : 5F                  		ld	e,a
(2) 1142/     65C : C3 6A 06            		jp	.set_portam
(2) 1143/     65F :                     .dwn_fine:
(2) 1144/     65F : 11 FF FF            		ld	de,-1
(2) 1145/     662 : 79                  		ld	a,c
(2) 1146/     663 : E6 0F               		and	00001111b
(2) 1147/     665 : 2F                  		cpl
(2) 1148/     666 : 3C                  		inc	a
(2) 1149/     667 : CB 2F               		sra	a
(2) 1150/     669 : 5F                  		ld	e,a
(2) 1151/     66A :                     
(2) 1152/     66A :                     ; shared with effects E and F
(2) 1153/     66A :                     .set_portam:
(2) 1154/     66A : DD 72 18            		ld	(ix+(chnl_EfPortam+1)),d
(2) 1155/     66D : DD 73 17            		ld	(ix+chnl_EfPortam),e
(2) 1156/     670 :                     
(2) 1157/     670 :                     .prtdwn_cont:
(2) 1158/     670 : C9                  		ret
(2) 1159/     671 :                     
(2) 1160/     671 :                     ; -------------------------------------
(2) 1161/     671 :                     ; Effect F - Portametro up
(2) 1162/     671 :                     ; 
(2) 1163/     671 :                     ; NOTE: not accurate
(2) 1164/     671 :                     ; -------------------------------------
(2) 1165/     671 :                     
(2) 1166/     671 :                     .eff_F:
(2) 1167/     671 : 79                  		ld	a,c
(2) 1168/     672 : B7                  		or	a
(2) 1169/     673 : CA A9 06            		jp	z,.prtup_cont
(2) 1170/     676 : E6 F0               		and	11110000b
(2) 1171/     678 : FE E0               		cp	0E0h
(2) 1172/     67A : CA 92 06            		jp	z,.up_exfine
(2) 1173/     67D : FE F0               		cp	0F0h
(2) 1174/     67F : CA 9E 06            		jp	z,.up_fine
(2) 1175/     682 :                     		
(2) 1176/     682 :                     ; Normal
(2) 1177/     682 : 79                  		ld	a,c
(2) 1178/     683 : E6 1F               		and	00011111b
(2) 1179/     685 : 57                  		ld	d,a
(2) 1180/     686 : 87                  		add	a,a
(2) 1181/     687 : 87                  		add	a,a
(2) 1182/     688 : 5F                  		ld	e,a
(2) 1183/     689 : 7A                  		ld	a,d
(2) 1184/     68A : 07                  		rlca
(2) 1185/     68B : 07                  		rlca	
(2) 1186/     68C : E6 03               		and	00000011b
(2) 1187/     68E : 57                  		ld	d,a
(2) 1188/     68F : C3 6A 06            		jp	.set_portam
(2) 1189/     692 :                     .up_exfine:
(2) 1190/     692 : 11 00 00            		ld	de,0
(2) 1191/     695 : 79                  		ld	a,c
(2) 1192/     696 : E6 0F               		and	00001111b
(2) 1193/     698 : CB 2F               		sra	a
(2) 1194/     69A : 5F                  		ld	e,a
(2) 1195/     69B : C3 6A 06            		jp	.set_portam
(2) 1196/     69E :                     .up_fine:
(2) 1197/     69E : 11 00 00            		ld	de,0
(2) 1198/     6A1 : 79                  		ld	a,c
(2) 1199/     6A2 : E6 0F               		and	00001111b
(2) 1200/     6A4 : 87                  		add	a,a
(2) 1201/     6A5 : 5F                  		ld	e,a
(2) 1202/     6A6 : C3 6A 06            		jp	.set_portam
(2) 1203/     6A9 :                     .prtup_cont:
(2) 1204/     6A9 : C9                  		ret
(2) 1205/     6AA :                     		
(2) 1206/     6AA :                     ; -------------------------------------
(2) 1207/     6AA :                     ; Effect X - Set panning (FM ONLY)
(2) 1208/     6AA :                     ; -------------------------------------
(2) 1209/     6AA :                     
(2) 1210/     6AA :                     .eff_X:
(2) 1211/     6AA : 79                  		ld	a,c
(2) 1212/     6AB : 07                  		rlca
(2) 1213/     6AC : 07                  		rlca
(2) 1214/     6AD : E6 03               		and	00000011b
(2) 1215/     6AF : 11 B9 06            		ld	de,.fmpan_list
(2) 1216/     6B2 : 83                  		add 	a,e
(2) 1217/     6B3 : 5F                  		ld	e,a
(2) 1218/     6B4 : 1A                  		ld	a,(de)
(2) 1219/     6B5 : DD 77 0D            		ld	(ix+chnl_FmPan),a
(2) 1220/     6B8 : C9                  		ret
(2) 1221/     6B9 :                     .fmpan_list:
(2) 1222/     6B9 : 80                  		db 080h		; 000h
(2) 1223/     6BA : 80                  		db 080h		; 040h
(2) 1224/     6BB : C0                  		db 0C0h		; 080h
(2) 1225/     6BC : 40                  		db 040h		; 0C0h
(2) 1226/     6BD :                     
(2) 1227/     6BD :                     ; ---------------------------------------------
(2) 1228/     6BD :                     ; Grab instrument from slot
(2) 1229/     6BD :                     ; 
(2) 1230/     6BD :                     ; Output
(2) 1231/     6BD :                     ; hl - current instrument
(2) 1232/     6BD :                     ; ---------------------------------------------
(2) 1233/     6BD :                     
(2) 1234/     6BD :                     .grab_instslot:
(2) 1235/     6BD : FD 6E 16            		ld	l,(iy+trck_Instr)
(2) 1236/     6C0 : FD 66 17            		ld	h,(iy+(trck_Instr+1))
(2) 1237/     6C3 : DD 7E 03            		ld	a,(ix+chnl_Ins)
(2) 1238/     6C6 : 3D                  		dec 	a
(2) 1239/     6C7 : 47                  		ld	b,a
(2) 1240/     6C8 : 87                  		add 	a,a
(2) 1241/     6C9 : 87                  		add 	a,a
(2) 1242/     6CA : 4F                  		ld	c,a
(2) 1243/     6CB : 78                  		ld	a,b
(2) 1244/     6CC : 07                  		rlca
(2) 1245/     6CD : 07                  		rlca
(2) 1246/     6CE : E6 03               		and	3
(2) 1247/     6D0 : 47                  		ld	b,a
(2) 1248/     6D1 : 09                  		add	hl,bc
(2) 1249/     6D2 : C9                  		ret
(2) 1250/     6D3 :                     
(2) 1251/     6D3 :                     ; ---------------------------------------------
(2) 1252/     6D3 :                     ; These routines send the result data from
(2) 1253/     6D3 :                     ; the channel buffer to their respective
(2) 1254/     6D3 :                     ; sound chips
(2) 1255/     6D3 :                     ; ---------------------------------------------
(2) 1256/     6D3 :                     
(2) 1257/     6D3 :                     .run_frequency:
(2) 1258/     6D3 : DD 46 0B            		ld	b,(ix+chnl_InsType)
(2) 1259/     6D6 : DD 4E 00            		ld	c,(ix+chnl_Chip)
(2) 1260/     6D9 : 78                  		ld	a,b
(2) 1261/     6DA : B7                  		or	a			; Type 080h/0E0h?
(2) 1262/     6DB : F2 E3 06            		jp	p,.freqrn_not3
(2) 1263/     6DE : CB 79               		bit 	7,c			; PSG channel?
(2) 1264/     6E0 : C2 5D 07            		jp	nz,.freqrn_psg
(2) 1265/     6E3 :                     .freqrn_not3:
(2) 1266/     6E3 : 78                  		ld	a,b
(2) 1267/     6E4 : FE 02               		cp	2				; Type 2?
(2) 1268/     6E6 : C2 EF 06            		jp	nz,.freqrn_fm
(2) 1269/     6E9 : 79                  		ld	a,c				; Channel 6?
(2) 1270/     6EA : FE 06               		cp	6
(2) 1271/     6EC : CA 1F 07            		jp	z,.freqrn_smpl
(2) 1272/     6EF :                     .freqrn_fm:
(2) 1273/     6EF : DD 5E 00            		ld	e,(ix+chnl_Chip)
(2) 1274/     6F2 : CB 7B               		bit	7,e
(2) 1275/     6F4 : C0                  		ret	nz
(2) 1276/     6F5 : 16 28               		ld	d,28h
(2) 1277/     6F7 : CD 52 0C            		call	SndDrv_FmSet_1			; KEYS OFF
(2) 1278/     6FA : DD 7E 02            		ld	a,(ix+chnl_Note)
(2) 1279/     6FD : FE FE               		cp	-2
(2) 1280/     6FF : C8                  		ret	z
(2) 1281/     700 : FE FF               		cp	-1
(2) 1282/     702 : C8                  		ret	z
(2) 1283/     703 : DD 66 0A            		ld	h,(ix+(chnl_Freq+1))		; Copy freq
(2) 1284/     706 : DD 6E 09            		ld	l,(ix+chnl_Freq)
(2) 1285/     709 : DD 74 1A            		ld	(ix+(chnl_EfNewFreq+1)),h
(2) 1286/     70C : DD 75 19            		ld	(ix+chnl_EfNewFreq),l
(2) 1287/     70F : CD 1F 09            		call	.set_fm_freq
(2) 1288/     712 : DD 5E 10            		ld	e,(ix+chnl_FmRegKeys)		; KEYS ON
(2) 1289/     715 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2) 1290/     718 : B3                  		or	e
(2) 1291/     719 : 5F                  		ld	e,a
(2) 1292/     71A : 16 28               		ld	d,28h
(2) 1293/     71C : C3 52 0C            		jp	SndDrv_FmSet_1
(2) 1294/     71F :                     
(2) 1295/     71F :                     .freqrn_smpl:
(2) 1296/     71F : 1E 40               		ld	e,040h
(2) 1297/     721 : DD 7E 02            		ld	a,(ix+chnl_Note)
(2) 1298/     724 : FE FE               		cp	-2
(2) 1299/     726 : CA 58 07            		jp	z,.set_smpflag
(2) 1300/     729 : FE FF               		cp	-1
(2) 1301/     72B : CA 58 07            		jp	z,.set_smpflag
(2) 1302/     72E : DD 66 08            		ld	h,(ix+(chnl_InsAddr+1))
(2) 1303/     731 : DD 6E 07            		ld	l,(ix+chnl_InsAddr)
(2) 1304/     734 : 7C                  		ld	a,h
(2) 1305/     735 : B5                  		or	l
(2) 1306/     736 : C8                  		ret	z
(2) 1307/     737 :                     		
(2) 1308/     737 :                     	; Play SAMPLE
(2) 1309/     737 : 11 06 28            		ld	de,2806h
(2) 1310/     73A : CD 52 0C            		call	SndDrv_FmSet_1
(2) 1311/     73D : DD 66 0A            		ld	h,(ix+(chnl_Freq+1))		; Copy freq
(2) 1312/     740 : DD 6E 09            		ld	l,(ix+chnl_Freq)
(2) 1313/     743 : DD 74 1A            		ld	(ix+(chnl_EfNewFreq+1)),h
(2) 1314/     746 : DD 75 19            		ld	(ix+chnl_EfNewFreq),l
(2) 1315/     749 : 7D                  		ld	a,l
(2) 1316/     74A : 32 2D 00            		ld	(Sample_Speed),a
(2) 1317/     74D : 7C                  		ld	a,h
(2) 1318/     74E : 32 2E 00            		ld	(Sample_Speed+1),a
(2) 1319/     751 : DD 7E 14            		ld	a,(ix+chnl_SmplFlags)
(2) 1320/     754 : 07                  		rlca
(2) 1321/     755 : F6 01               		or	1
(2) 1322/     757 : 5F                  		ld	e,a
(2) 1323/     758 :                     .set_smpflag:
(2) 1324/     758 : 7B                  		ld	a,e
(2) 1325/     759 : 32 1F 00            		ld	(Sample_Flags),a
(2) 1326/     75C : C9                  		ret
(2) 1327/     75D :                     .freqrn_psg:
(2) 1328/     75D : DD 66 0A            		ld	h,(ix+(chnl_Freq+1))		; Copy freq
(2) 1329/     760 : DD 6E 09            		ld	l,(ix+chnl_Freq)
(2) 1330/     763 : DD 74 1A            		ld	(ix+(chnl_EfNewFreq+1)),h
(2) 1331/     766 : DD 75 19            		ld	(ix+chnl_EfNewFreq),l
(2) 1332/     769 : C3 59 0A            		jp	.set_psg_freq
(2) 1333/     76C :                     
(2) 1334/     76C :                     ; ------------------------------------
(2) 1335/     76C :                     ; Turn FM volume regs down
(2) 1336/     76C :                     ; TL = 07Fh
(2) 1337/     76C :                     ; 
(2) 1338/     76C :                     ; ix - current channel
(2) 1339/     76C :                     ; ------------------------------------
(2) 1340/     76C :                     
(2) 1341/     76C :                     .fm_chkdac:
(2) 1342/     76C : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2) 1343/     76F : 4F                  		ld	c,a
(2) 1344/     770 : FE 06               		cp	6
(2) 1345/     772 : C2 82 07            		jp	nz,.not_dac
(2) 1346/     775 : DD 7E 0B            		ld	a,(ix+chnl_InsType)
(2) 1347/     778 : FE 02               		cp	2
(2) 1348/     77A : C2 82 07            		jp	nz,.not_dac
(2) 1349/     77D : 3E 40               		ld	a,40h
(2) 1350/     77F : 32 1F 00            		ld	(Sample_Flags),a
(2) 1351/     782 :                     .not_dac:
(2) 1352/     782 : C9                  		ret
(2) 1353/     783 :                     		
(2) 1354/     783 :                     ; -1 keys off
(2) 1355/     783 :                     .fm_keysoff:
(2) 1356/     783 : CD 6C 07            		call	.fm_chkdac
(2) 1357/     786 : 79                  		ld	a,c
(2) 1358/     787 : B7                  		or	a
(2) 1359/     788 : F8                  		ret	m
(2) 1360/     789 : 5F                  		ld	e,a
(2) 1361/     78A : 16 28               		ld	d,28h
(2) 1362/     78C : C3 52 0C            		jp	SndDrv_FmSet_1
(2) 1363/     78F :                     
(2) 1364/     78F :                     ; -2 note off
(2) 1365/     78F :                     .fm_turnoff:
(2) 1366/     78F : CD 6C 07            		call	.fm_chkdac
(2) 1367/     792 : 79                  		ld	a,c
(2) 1368/     793 : B7                  		or	a
(2) 1369/     794 : F8                  		ret	m
(2) 1370/     795 :                     .fm_settloff:
(2) 1371/     795 : 5F                  		ld	e,a
(2) 1372/     796 : 16 28               		ld	d,28h
(2) 1373/     798 : CD 52 0C            		call	SndDrv_FmSet_1
(2) 1374/     79B : 7B                  		ld	a,e
(2) 1375/     79C : E6 03               		and	11b
(2) 1376/     79E : F6 40               		or	40h
(2) 1377/     7A0 : 1E 7F               		ld	e,7Fh
(2) 1378/     7A2 : 57                  		ld	d,a
(2) 1379/     7A3 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1380/     7A6 : 14                  		inc	d
(2) 1381/     7A7 : 14                  		inc	d
(2) 1382/     7A8 : 14                  		inc	d
(2) 1383/     7A9 : 14                  		inc	d
(2) 1384/     7AA : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1385/     7AD : 14                  		inc	d
(2) 1386/     7AE : 14                  		inc	d
(2) 1387/     7AF : 14                  		inc	d
(2) 1388/     7B0 : 14                  		inc	d
(2) 1389/     7B1 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1390/     7B4 : 14                  		inc	d
(2) 1391/     7B5 : 14                  		inc	d
(2) 1392/     7B6 : 14                  		inc	d
(2) 1393/     7B7 : 14                  		inc	d
(2) 1394/     7B8 : C3 4B 0C            		jp	SndDrv_FmAutoSet
(2) 1395/     7BB :                     
(2) 1396/     7BB :                     ; ------------------------------------
(2) 1397/     7BB :                     ; FM normal registers
(2) 1398/     7BB :                     ; 
(2) 1399/     7BB :                     ; NOTE: call this first BEFORE
(2) 1400/     7BB :                     ; modyfing the volume
(2) 1401/     7BB :                     ; 
(2) 1402/     7BB :                     ; ix - current channel
(2) 1403/     7BB :                     ; ------------------------------------
(2) 1404/     7BB :                     
(2) 1405/     7BB :                     .set_fm_ins:
(2) 1406/     7BB : DD 4E 00            		ld	c,(ix+chnl_Chip)
(2) 1407/     7BE : DD 66 08            		ld	h,(ix+(chnl_InsAddr+1))
(2) 1408/     7C1 : DD 6E 07            		ld	l,(ix+chnl_InsAddr)
(2) 1409/     7C4 : 7C                  		ld	a,h
(2) 1410/     7C5 : B5                  		or	l
(2) 1411/     7C6 : C8                  		ret	z
(2) 1412/     7C7 : 79                  		ld	a,c			; FM6?
(2) 1413/     7C8 : FE 06               		cp	6
(2) 1414/     7CA : C2 DA 07            		jp	nz,.no_chnl6
(2) 1415/     7CD : DD 7E 0B            		ld	a,(ix+chnl_InsType)
(2) 1416/     7D0 : FE 02               		cp	2			; Type 2?
(2) 1417/     7D2 : CA 03 0A            		jp	z,.set_sampl
(2) 1418/     7D5 : 3E 40               		ld	a,40h			; IF type != 2, stop sample to unlock FM6
(2) 1419/     7D7 : 32 1F 00            		ld	(Sample_Flags),a
(2) 1420/     7DA :                     .no_chnl6:
(2) 1421/     7DA : 79                  		ld	a,c
(2) 1422/     7DB : E6 03               		and	11b
(2) 1423/     7DD : F6 30               		or	30h
(2) 1424/     7DF : 57                  		ld	d,a
(2) 1425/     7E0 :                     		
(2) 1426/     7E0 :                     	; 30h registers
(2) 1427/     7E0 : 5E                  		ld	e,(hl)
(2) 1428/     7E1 : 23                  		inc 	hl
(2) 1429/     7E2 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1430/     7E5 : 14                  		inc 	d
(2) 1431/     7E6 : 14                  		inc 	d
(2) 1432/     7E7 : 14                  		inc 	d
(2) 1433/     7E8 : 14                  		inc 	d
(2) 1434/     7E9 : 5E                  		ld	e,(hl)
(2) 1435/     7EA : 23                  		inc 	hl
(2) 1436/     7EB : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1437/     7EE : 14                  		inc 	d
(2) 1438/     7EF : 14                  		inc 	d
(2) 1439/     7F0 : 14                  		inc 	d
(2) 1440/     7F1 : 14                  		inc 	d
(2) 1441/     7F2 : 5E                  		ld	e,(hl)
(2) 1442/     7F3 : 23                  		inc 	hl
(2) 1443/     7F4 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1444/     7F7 : 14                  		inc 	d
(2) 1445/     7F8 : 14                  		inc 	d
(2) 1446/     7F9 : 14                  		inc 	d
(2) 1447/     7FA : 14                  		inc 	d
(2) 1448/     7FB : 5E                  		ld	e,(hl)
(2) 1449/     7FC : 23                  		inc 	hl
(2) 1450/     7FD : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1451/     800 : 14                  		inc 	d
(2) 1452/     801 : 14                  		inc 	d
(2) 1453/     802 : 14                  		inc 	d
(2) 1454/     803 : 14                  		inc 	d
(2) 1455/     804 :                     		
(2) 1456/     804 :                     	; 40h regs, volume checks
(2) 1457/     804 : DD 4E 11            		ld	c,(ix+chnl_ChnVolBase)
(2) 1458/     807 : DD 7E 0E            		ld	a,(ix+chnl_FmRegB0)
(2) 1459/     80A : E6 07               		and	111b
(2) 1460/     80C : 47                  		ld	b,a
(2) 1461/     80D :                     
(2) 1462/     80D :                     	; b - FmRegB0
(2) 1463/     80D :                     	; c - FmVolBase
(2) 1464/     80D : 5E                  		ld	e,(hl)
(2) 1465/     80E : 23                  		inc 	hl
(2) 1466/     80F : 78                  		ld	a,b
(2) 1467/     810 : FE 07               		cp	7
(2) 1468/     812 : C2 1E 08            		jp	nz,.tlv_lv1
(2) 1469/     815 : 7B                  		ld	a,e
(2) 1470/     816 : 81                  		add 	a,c
(2) 1471/     817 : 5F                  		ld	e,a
(2) 1472/     818 : B7                  		or	a
(2) 1473/     819 : F2 1E 08            		jp	p,.tlv_lv1
(2) 1474/     81C : 1E 7F               		ld	e,7Fh
(2) 1475/     81E :                     .tlv_lv1:
(2) 1476/     81E : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1477/     821 : 14                  		inc 	d
(2) 1478/     822 : 14                  		inc 	d
(2) 1479/     823 : 14                  		inc 	d
(2) 1480/     824 : 14                  		inc 	d
(2) 1481/     825 : 5E                  		ld	e,(hl)
(2) 1482/     826 : 78                  		ld	a,b
(2) 1483/     827 : FE 07               		cp	7
(2) 1484/     829 : CA 36 08            		jp	z,.tlv_lv2_ok
(2) 1485/     82C : FE 06               		cp	6
(2) 1486/     82E : CA 36 08            		jp	z,.tlv_lv2_ok
(2) 1487/     831 : FE 05               		cp	5
(2) 1488/     833 : C2 3F 08            		jp	nz,.tlv_lv2
(2) 1489/     836 :                     .tlv_lv2_ok:
(2) 1490/     836 : 7B                  		ld	a,e
(2) 1491/     837 : 81                  		add 	a,c
(2) 1492/     838 : 5F                  		ld	e,a
(2) 1493/     839 : B7                  		or	a
(2) 1494/     83A : F2 3F 08            		jp	p,.tlv_lv2
(2) 1495/     83D : 1E 7F               		ld	e,7Fh
(2) 1496/     83F :                     .tlv_lv2:
(2) 1497/     83F : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1498/     842 : 23                  		inc 	hl
(2) 1499/     843 : 14                  		inc 	d
(2) 1500/     844 : 14                  		inc 	d
(2) 1501/     845 : 14                  		inc 	d
(2) 1502/     846 : 14                  		inc 	d
(2) 1503/     847 : 5E                  		ld	e,(hl)
(2) 1504/     848 : 78                  		ld	a,b
(2) 1505/     849 : E6 04               		and	100b
(2) 1506/     84B : B7                  		or	a
(2) 1507/     84C : CA 58 08            		jp	z,.tlv_lv3
(2) 1508/     84F : 7B                  		ld	a,e
(2) 1509/     850 : 81                  		add 	a,c
(2) 1510/     851 : 5F                  		ld	e,a
(2) 1511/     852 : B7                  		or	a
(2) 1512/     853 : F2 58 08            		jp	p,.tlv_lv3
(2) 1513/     856 : 3E 7F               		ld	a,7Fh
(2) 1514/     858 :                     .tlv_lv3:
(2) 1515/     858 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1516/     85B : 23                  		inc 	hl
(2) 1517/     85C : 14                  		inc 	d
(2) 1518/     85D : 14                  		inc 	d
(2) 1519/     85E : 14                  		inc 	d
(2) 1520/     85F : 14                  		inc 	d
(2) 1521/     860 :                     
(2) 1522/     860 : 7E                  		ld	a,(hl)
(2) 1523/     861 : 81                  		add 	a,c
(2) 1524/     862 : B7                  		or	a
(2) 1525/     863 : F2 68 08            		jp	p,.tlv_lv4
(2) 1526/     866 : 3E 7F               		ld	a,7Fh
(2) 1527/     868 :                     .tlv_lv4:
(2) 1528/     868 : 5F                  		ld	e,a
(2) 1529/     869 : 23                  		inc 	hl
(2) 1530/     86A : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1531/     86D : 14                  		inc 	d
(2) 1532/     86E : 14                  		inc 	d
(2) 1533/     86F : 14                  		inc 	d
(2) 1534/     870 : 14                  		inc 	d
(2) 1535/     871 :                     
(2) 1536/     871 :                     	; 50h - 90h
(2) 1537/     871 : 06 05               		ld	b,14h/4
(2) 1538/     873 :                     .fmfiles:
(2) 1539/     873 : 5E                  		ld	e,(hl)
(2) 1540/     874 : 23                  		inc 	hl
(2) 1541/     875 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1542/     878 : 14                  		inc 	d
(2) 1543/     879 : 14                  		inc 	d
(2) 1544/     87A : 14                  		inc 	d
(2) 1545/     87B : 14                  		inc 	d
(2) 1546/     87C : 5E                  		ld	e,(hl)
(2) 1547/     87D : 23                  		inc 	hl
(2) 1548/     87E : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1549/     881 : 14                  		inc 	d
(2) 1550/     882 : 14                  		inc 	d
(2) 1551/     883 : 14                  		inc 	d
(2) 1552/     884 : 14                  		inc 	d
(2) 1553/     885 : 5E                  		ld	e,(hl)
(2) 1554/     886 : 23                  		inc 	hl
(2) 1555/     887 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1556/     88A : 14                  		inc 	d
(2) 1557/     88B : 14                  		inc 	d
(2) 1558/     88C : 14                  		inc 	d
(2) 1559/     88D : 14                  		inc 	d
(2) 1560/     88E : 5E                  		ld	e,(hl)
(2) 1561/     88F : 23                  		inc 	hl
(2) 1562/     890 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1563/     893 : 14                  		inc 	d
(2) 1564/     894 : 14                  		inc 	d
(2) 1565/     895 : 14                  		inc 	d
(2) 1566/     896 : 14                  		inc 	d
(2) 1567/     897 : 10 DA               		djnz	.fmfiles
(2) 1568/     899 :                     		
(2) 1569/     899 : DD 4E 00            		ld	c,(ix+chnl_Chip)
(2) 1570/     89C : 16 B0               		ld	d,0B0h
(2) 1571/     89E : 79                  		ld	a,c
(2) 1572/     89F : E6 03               		and	11b
(2) 1573/     8A1 : B2                  		or	d
(2) 1574/     8A2 : 57                  		ld	d,a
(2) 1575/     8A3 : 5E                  		ld	e,(hl)			; 0B0h
(2) 1576/     8A4 : DD 73 0E            		ld	(ix+chnl_FmRegB0),e
(2) 1577/     8A7 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1578/     8AA : 23                  		inc 	hl
(2) 1579/     8AB : 5E                  		ld	e,(hl)			; 0B4h
(2) 1580/     8AC : 16 B4               		ld	d,0B4h
(2) 1581/     8AE : 79                  		ld	a,c
(2) 1582/     8AF : E6 03               		and	11b
(2) 1583/     8B1 : B2                  		or	d
(2) 1584/     8B2 : 57                  		ld	d,a
(2) 1585/     8B3 : 7E                  		ld	a,(hl)
(2) 1586/     8B4 : DD 77 0F            		ld	(ix+chnl_FmRegB4),a	
(2) 1587/     8B7 : DD B6 0D            		or	(ix+chnl_FmPan)		; FM panning
(2) 1588/     8BA : 5F                  		ld	e,a
(2) 1589/     8BB : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1590/     8BE : 23                  		inc 	hl
(2) 1591/     8BF : 5E                  		ld	e,(hl)			; FM3 flag
(2) 1592/     8C0 : 23                  		inc 	hl
(2) 1593/     8C1 : 7E                  		ld	a,(hl)			; 028h
(2) 1594/     8C2 : 23                  		inc 	hl
(2) 1595/     8C3 : DD 77 10            		ld	(ix+chnl_FmRegKeys),a
(2) 1596/     8C6 :                     
(2) 1597/     8C6 : 79                  		ld	a,c
(2) 1598/     8C7 : FE 02               		cp	2			; Channel 3?
(2) 1599/     8C9 : C0                  		ret	nz
(2) 1600/     8CA : 1E 00               		ld	e,0
(2) 1601/     8CC : DD 7E 0B            		ld	a,(ix+chnl_InsType)
(2) 1602/     8CF : FE 01               		cp	1			; Type 1?
(2) 1603/     8D1 : C2 1A 09            		jp	nz,.set_fm3reg
(2) 1604/     8D4 : 16 A6               		ld	d,0A6h			; OP1
(2) 1605/     8D6 : 5E                  		ld	e,(hl)
(2) 1606/     8D7 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1607/     8DA : 23                  		inc 	hl
(2) 1608/     8DB : 16 A2               		ld	d,0A2h
(2) 1609/     8DD : 5E                  		ld	e,(hl)
(2) 1610/     8DE : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1611/     8E1 : 23                  		inc 	hl
(2) 1612/     8E2 : 16 AC               		ld	d,0ACh			; OP2
(2) 1613/     8E4 : 5E                  		ld	e,(hl)
(2) 1614/     8E5 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1615/     8E8 : 23                  		inc 	hl
(2) 1616/     8E9 : 16 A8               		ld	d,0A8h
(2) 1617/     8EB : 5E                  		ld	e,(hl)
(2) 1618/     8EC : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1619/     8EF : 23                  		inc 	hl
(2) 1620/     8F0 : 16 AD               		ld	d,0ADh			; OP3
(2) 1621/     8F2 : 5E                  		ld	e,(hl)
(2) 1622/     8F3 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1623/     8F6 : 23                  		inc 	hl
(2) 1624/     8F7 : 16 A9               		ld	d,0A9h
(2) 1625/     8F9 : 5E                  		ld	e,(hl)
(2) 1626/     8FA : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1627/     8FD : 23                  		inc 	hl
(2) 1628/     8FE : 16 AE               		ld	d,0AEh			; OP4
(2) 1629/     900 : 5E                  		ld	e,(hl)
(2) 1630/     901 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1631/     904 : 23                  		inc 	hl
(2) 1632/     905 : 16 AA               		ld	d,0AAh
(2) 1633/     907 : 5E                  		ld	e,(hl)
(2) 1634/     908 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1635/     90B : DD 5E 10            		ld	e,(ix+chnl_FmRegKeys)	; KEYS ON
(2) 1636/     90E : 79                  		ld	a,c
(2) 1637/     90F : E6 07               		and	111b
(2) 1638/     911 : B3                  		or	e
(2) 1639/     912 : 5F                  		ld	e,a
(2) 1640/     913 : 16 28               		ld	d,28h
(2) 1641/     915 : CD 52 0C            		call	SndDrv_FmSet_1
(2) 1642/     918 : 1E 40               		ld	e,40h
(2) 1643/     91A :                     .set_fm3reg:
(2) 1644/     91A : 16 27               		ld	d,27h
(2) 1645/     91C : C3 52 0C            		jp	SndDrv_FmSet_1
(2) 1646/     91F :                      
(2) 1647/     91F :                     ; ------------------------------------
(2) 1648/     91F :                     ; Set FM frequency
(2) 1649/     91F :                     ; 
(2) 1650/     91F :                     ; hl - frequency
(2) 1651/     91F :                     ; ------------------------------------
(2) 1652/     91F :                     
(2) 1653/     91F :                     .set_fm_freq:
(2) 1654/     91F : DD 56 00            		ld	d,(ix+chnl_Chip)
(2) 1655/     922 : DD 5E 0B            		ld	e,(ix+chnl_InsType)
(2) 1656/     925 : 7A                  		ld	a,d
(2) 1657/     926 : FE 06               		cp	6			; Check channel 6
(2) 1658/     928 : C2 2F 09            		jp	nz,.no_chnl6f
(2) 1659/     92B : 7B                  		ld	a,e
(2) 1660/     92C : FE 02               		cp	2
(2) 1661/     92E : C8                  		ret	z
(2) 1662/     92F :                     ; 		jp	z,.play_sampl
(2) 1663/     92F :                     .no_chnl6f:
(2) 1664/     92F : 7A                  		ld	a,d
(2) 1665/     930 : FE 02               		cp	2			; Check channel 3
(2) 1666/     932 : C2 39 09            		jp	nz,.no_chnl3f
(2) 1667/     935 : 7B                  		ld	a,e
(2) 1668/     936 : FE 01               		cp	1			; CH3 OP regs are already
(2) 1669/     938 : C8                  		ret	z			; set from the instrument data
(2) 1670/     939 :                     .no_chnl3f:
(2) 1671/     939 :                     
(2) 1672/     939 : 5A                  		ld	e,d
(2) 1673/     93A : DD 7E 02            		ld	a,(ix+chnl_Note)
(2) 1674/     93D : FE F6               		cp	-10
(2) 1675/     93F : CA 4A 09            		jp	z,.set_keycut
(2) 1676/     942 : FE FF               		cp	-1
(2) 1677/     944 : C8                  		ret	z
(2) 1678/     945 : FE FE               		cp	-2
(2) 1679/     947 : C2 4E 09            		jp	nz,.no_keycut
(2) 1680/     94A :                     .set_keycut:
(2) 1681/     94A : 7A                  		ld	a,d
(2) 1682/     94B : C3 95 07            		jp	.fm_settloff
(2) 1683/     94E :                     .no_keycut:
(2) 1684/     94E : 7B                  		ld	a,e
(2) 1685/     94F : E6 03               		and	11b
(2) 1686/     951 : 47                  		ld	b,a
(2) 1687/     952 : 3E A4               		ld	a,0A4h
(2) 1688/     954 : B0                  		or	b
(2) 1689/     955 : 57                  		ld	d,a
(2) 1690/     956 : 5C                  		ld	e,h
(2) 1691/     957 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1692/     95A : 15                  		dec 	d
(2) 1693/     95B : 15                  		dec 	d
(2) 1694/     95C : 15                  		dec	d
(2) 1695/     95D : 15                  		dec 	d
(2) 1696/     95E : 5D                  		ld	e,l
(2) 1697/     95F : C3 4B 0C            		jp	SndDrv_FmAutoSet
(2) 1698/     962 :                     
(2) 1699/     962 :                     ; ------------------------------------
(2) 1700/     962 :                     ; Set FM Volume
(2) 1701/     962 :                     ; 
(2) 1702/     962 :                     ; This one might blow your mind
(2) 1703/     962 :                     ; ------------------------------------
(2) 1704/     962 :                     
(2) 1705/     962 :                     .set_fm_vol:
(2) 1706/     962 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2) 1707/     965 : 5F                  		ld	e,a
(2) 1708/     966 : FE 06               		cp	6
(2) 1709/     968 : C2 71 09            		jp	nz,.notdac
(2) 1710/     96B : DD 7E 0B            		ld	a,(ix+chnl_InsType)
(2) 1711/     96E : FE 02               		cp	2
(2) 1712/     970 : C8                  		ret	z
(2) 1713/     971 :                     .notdac:
(2) 1714/     971 : DD 66 08            		ld	h,(ix+(chnl_InsAddr+1))
(2) 1715/     974 : DD 6E 07            		ld	l,(ix+chnl_InsAddr)
(2) 1716/     977 : 7C                  		ld	a,h
(2) 1717/     978 : B5                  		or	l
(2) 1718/     979 : C8                  		ret	z
(2) 1719/     97A : 23                  		inc 	hl			; Skip 30h
(2) 1720/     97B : 23                  		inc 	hl
(2) 1721/     97C : 23                  		inc 	hl
(2) 1722/     97D : 23                  		inc 	hl
(2) 1723/     97E : 78                  		ld	a,b
(2) 1724/     97F : FD 86 20            		add	a,(iy+trck_Volume)
(2) 1725/     982 : FE 40               		cp	40h
(2) 1726/     984 : DA 89 09            		jp	c,.too_much
(2) 1727/     987 : 3E 40               		ld	a,40h
(2) 1728/     989 :                     .too_much:
(2) 1729/     989 : B7                  		or	a
(2) 1730/     98A : F2 8E 09            		jp	p,.too_low
(2) 1731/     98D : AF                  		xor	a
(2) 1732/     98E :                     .too_low:
(2) 1733/     98E : D6 40               		sub 	a,40h
(2) 1734/     990 : 2F                  		cpl
(2) 1735/     991 : 3C                  		inc 	a
(2) 1736/     992 : DD 77 11            		ld	(ix+chnl_ChnVolBase),a
(2) 1737/     995 : DD 4E 11            		ld	c,(ix+chnl_ChnVolBase)
(2) 1738/     998 : 16 40               		ld	d,40h			; 40h
(2) 1739/     99A : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2) 1740/     99D : E6 03               		and	11b
(2) 1741/     99F : B2                  		or	d
(2) 1742/     9A0 : 57                  		ld	d,a
(2) 1743/     9A1 : DD 7E 0E            		ld	a,(ix+chnl_FmRegB0)
(2) 1744/     9A4 : E6 07               		and	111b
(2) 1745/     9A6 : 47                  		ld	b,a
(2) 1746/     9A7 : FE 07               		cp	7
(2) 1747/     9A9 : C2 B8 09            		jp	nz,.tl_lv1
(2) 1748/     9AC : 7E                  		ld	a,(hl)
(2) 1749/     9AD : 81                  		add 	a,c
(2) 1750/     9AE : B7                  		or	a
(2) 1751/     9AF : F2 B4 09            		jp	p,.tl_lv1_tm
(2) 1752/     9B2 : 3E 7F               		ld	a,7Fh
(2) 1753/     9B4 :                     .tl_lv1_tm:
(2) 1754/     9B4 : 5F                  		ld	e,a
(2) 1755/     9B5 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1756/     9B8 :                     .tl_lv1:
(2) 1757/     9B8 : 23                  		inc 	hl
(2) 1758/     9B9 : 14                  		inc 	d
(2) 1759/     9BA : 14                  		inc 	d
(2) 1760/     9BB : 14                  		inc 	d
(2) 1761/     9BC : 14                  		inc 	d
(2) 1762/     9BD : 78                  		ld	a,b
(2) 1763/     9BE : FE 07               		cp	7
(2) 1764/     9C0 : CA CD 09            		jp	z,.tl_lv2_ok
(2) 1765/     9C3 : FE 06               		cp	6
(2) 1766/     9C5 : CA CD 09            		jp	z,.tl_lv2_ok
(2) 1767/     9C8 : FE 05               		cp	5
(2) 1768/     9CA : C2 D9 09            		jp	nz,.tl_lv2
(2) 1769/     9CD :                     .tl_lv2_ok:
(2) 1770/     9CD : 7E                  		ld	a,(hl)
(2) 1771/     9CE : 81                  		add 	a,c
(2) 1772/     9CF : B7                  		or	a
(2) 1773/     9D0 : F2 D5 09            		jp	p,.tl_lv2_tm
(2) 1774/     9D3 : 3E 7F               		ld	a,7Fh
(2) 1775/     9D5 :                     .tl_lv2_tm:
(2) 1776/     9D5 : 5F                  		ld	e,a
(2) 1777/     9D6 : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1778/     9D9 :                     .tl_lv2:
(2) 1779/     9D9 : 23                  		inc 	hl
(2) 1780/     9DA : 14                  		inc 	d
(2) 1781/     9DB : 14                  		inc 	d
(2) 1782/     9DC : 14                  		inc 	d
(2) 1783/     9DD : 14                  		inc 	d
(2) 1784/     9DE : 78                  		ld	a,b
(2) 1785/     9DF : E6 04               		and	100b
(2) 1786/     9E1 : B7                  		or	a
(2) 1787/     9E2 : CA F1 09            		jp	z,.tl_lv3
(2) 1788/     9E5 : 7E                  		ld	a,(hl)
(2) 1789/     9E6 : 81                  		add 	a,c
(2) 1790/     9E7 : B7                  		or	a
(2) 1791/     9E8 : F2 ED 09            		jp	p,.tl_lv3_tm
(2) 1792/     9EB : 3E 7F               		ld	a,7Fh
(2) 1793/     9ED :                     .tl_lv3_tm:
(2) 1794/     9ED : 5F                  		ld	e,a
(2) 1795/     9EE : CD 4B 0C            		call	SndDrv_FmAutoSet
(2) 1796/     9F1 :                     .tl_lv3:
(2) 1797/     9F1 : 23                  		inc 	hl
(2) 1798/     9F2 : 14                  		inc 	d
(2) 1799/     9F3 : 14                  		inc 	d
(2) 1800/     9F4 : 14                  		inc 	d
(2) 1801/     9F5 : 14                  		inc 	d
(2) 1802/     9F6 : 7E                  		ld	a,(hl)
(2) 1803/     9F7 : 81                  		add 	a,c
(2) 1804/     9F8 : B7                  		or	a
(2) 1805/     9F9 : F2 FE 09            		jp	p,.tl_lv4_tm
(2) 1806/     9FC : 3E 7F               		ld	a,7Fh
(2) 1807/     9FE :                     .tl_lv4_tm:
(2) 1808/     9FE : 5F                  		ld	e,a
(2) 1809/     9FF : 23                  		inc 	hl
(2) 1810/     A00 : C3 4B 0C            		jp	SndDrv_FmAutoSet
(2) 1811/     A03 :                     
(2) 1812/     A03 :                     ; ------------------------------------
(2) 1813/     A03 :                     
(2) 1814/     A03 :                     .set_sampl:
(2) 1815/     A03 : DD 66 08            		ld	h,(ix+(chnl_InsAddr+1))
(2) 1816/     A06 : DD 6E 07            		ld	l,(ix+chnl_InsAddr)
(2) 1817/     A09 :                     
(2) 1818/     A09 : 5E                  		ld	e,(hl)
(2) 1819/     A0A : 23                  		inc 	hl
(2) 1820/     A0B : 56                  		ld	d,(hl)
(2) 1821/     A0C : 23                  		inc 	hl
(2) 1822/     A0D : 7E                  		ld	a,(hl)
(2) 1823/     A0E : 23                  		inc 	hl
(2) 1824/     A0F : ED 53 24 00         		ld	(Sample_Start),de
(2) 1825/     A13 : 32 26 00            		ld	(Sample_Start+2),a
(2) 1826/     A16 :                     
(2) 1827/     A16 : 5E                  		ld	e,(hl)
(2) 1828/     A17 : 23                  		inc 	hl
(2) 1829/     A18 : 56                  		ld	d,(hl)
(2) 1830/     A19 : 23                  		inc 	hl
(2) 1831/     A1A : 7E                  		ld	a,(hl)
(2) 1832/     A1B : 23                  		inc 	hl
(2) 1833/     A1C : ED 53 27 00         		ld	(Sample_End),de
(2) 1834/     A20 : 32 29 00            		ld	(Sample_End+2),a
(2) 1835/     A23 :                     		
(2) 1836/     A23 : 5E                  		ld	e,(hl)
(2) 1837/     A24 : 23                  		inc 	hl
(2) 1838/     A25 : 56                  		ld	d,(hl)
(2) 1839/     A26 : 23                  		inc 	hl
(2) 1840/     A27 : 7E                  		ld	a,(hl)
(2) 1841/     A28 : 23                  		inc 	hl
(2) 1842/     A29 : ED 53 2A 00         		ld	(Sample_Loop),de
(2) 1843/     A2D : 32 2C 00            		ld	(Sample_Loop+2),a
(2) 1844/     A30 :                     		
(2) 1845/     A30 : 7E                  		ld	a,(hl)
(2) 1846/     A31 : DD 77 14            		ld	(ix+chnl_SmplFlags),a
(2) 1847/     A34 : C9                  		ret
(2) 1848/     A35 :                     		
(2) 1849/     A35 :                     ; --------------------------------------------
(2) 1850/     A35 :                     ; Set PSG Volume
(2) 1851/     A35 :                     ; --------------------------------------------
(2) 1852/     A35 :                     
(2) 1853/     A35 :                     .set_psg_vol:
(2) 1854/     A35 : FD 86 20            		add	a,(iy+trck_Volume)
(2) 1855/     A38 : 1E 00               		ld	e,0
(2) 1856/     A3A : FE 40               		cp	40h
(2) 1857/     A3C : DA 41 0A            		jp	c,.pntoo_much
(2) 1858/     A3F : 3E 40               		ld	a,40h
(2) 1859/     A41 :                     .pntoo_much:
(2) 1860/     A41 : B7                  		or	a
(2) 1861/     A42 : F2 46 0A            		jp	p,.pntoo_low
(2) 1862/     A45 : AF                  		xor	a
(2) 1863/     A46 :                     .pntoo_low:
(2) 1864/     A46 : FE 40               		cp	40h
(2) 1865/     A48 : CA 52 0A            		jp	z,.pntoppsgv
(2) 1866/     A4B : 3D                  		dec 	a
(2) 1867/     A4C : 0F                  		rrca
(2) 1868/     A4D : 0F                  		rrca
(2) 1869/     A4E : 2F                  		cpl
(2) 1870/     A4F : E6 0F               		and	00001111b
(2) 1871/     A51 : 5F                  		ld	e,a
(2) 1872/     A52 :                     .pntoppsgv:
(2) 1873/     A52 : 7B                  		ld	a,e
(2) 1874/     A53 : E6 0F               		and	00001111b
(2) 1875/     A55 : DD 77 11            		ld	(ix+chnl_ChnVolBase),a
(2) 1876/     A58 : C9                  		ret
(2) 1877/     A59 :                     
(2) 1878/     A59 :                     ; --------------------------------------------
(2) 1879/     A59 :                     ; Set PSG Frequency
(2) 1880/     A59 :                     ; 
(2) 1881/     A59 :                     ; hl - frequency
(2) 1882/     A59 :                     ; --------------------------------------------
(2) 1883/     A59 :                     
(2) 1884/     A59 :                     .set_psg_freq:
(2) 1885/     A59 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2) 1886/     A5C : E6 E0               		and	11100000b
(2) 1887/     A5E : 47                  		ld	b,a
(2) 1888/     A5F : FE C0               		cp	0C0h
(2) 1889/     A61 : C2 6C 0A            		jp	nz,.not_nse3
(2) 1890/     A64 : FD 7E 0C            		ld	a,(iy+trck_PsgNoise)
(2) 1891/     A67 : E6 03               		and	3
(2) 1892/     A69 : FE 03               		cp	3
(2) 1893/     A6B : C8                  		ret	z
(2) 1894/     A6C :                     .not_nse3:
(2) 1895/     A6C : 78                  		ld	a,b
(2) 1896/     A6D : FE E0               		cp	0E0h
(2) 1897/     A6F : C2 7C 0A            		jp	nz,.not_nse
(2) 1898/     A72 : DD 7E 0B            		ld	a,(ix+chnl_InsType)
(2) 1899/     A75 : E6 03               		and	011b
(2) 1900/     A77 : FE 03               		cp	3
(2) 1901/     A79 : C0                  		ret	nz
(2) 1902/     A7A : 06 C0               		ld	b,0C0h
(2) 1903/     A7C :                     .not_nse:
(2) 1904/     A7C : 7C                  		ld	a,h
(2) 1905/     A7D : B5                  		or	l
(2) 1906/     A7E : C8                  		ret	z
(2) 1907/     A7F :                     		
(2) 1908/     A7F : 7D                  		ld	a,l
(2) 1909/     A80 : 57                  		ld	d,a
(2) 1910/     A81 : E6 0F               		and 	00001111b
(2) 1911/     A83 : B0                  		or	b
(2) 1912/     A84 : 5F                  		ld	e,a
(2) 1913/     A85 : 7D                  		ld	a,l
(2) 1914/     A86 : 0F                  		rrca
(2) 1915/     A87 : 0F                  		rrca
(2) 1916/     A88 : 0F                  		rrca
(2) 1917/     A89 : 0F                  		rrca
(2) 1918/     A8A : E6 0F               		and	00001111b
(2) 1919/     A8C : 57                  		ld	d,a
(2) 1920/     A8D : 7C                  		ld	a,h
(2) 1921/     A8E : 0F                  		rrca
(2) 1922/     A8F : 0F                  		rrca
(2) 1923/     A90 : 0F                  		rrca
(2) 1924/     A91 : 0F                  		rrca
(2) 1925/     A92 : E6 30               		and	00110000b
(2) 1926/     A94 : B2                  		or	d
(2) 1927/     A95 : DD 77 1C            		ld	(ix+(chnl_PsgOutFreq+1)),a
(2) 1928/     A98 : DD 73 1B            		ld	(ix+chnl_PsgOutFreq),e
(2) 1929/     A9B : C9                  		ret
(2) 1930/     A9C :                     
(2) 1931/     A9C :                     ; --------------------------------
(2) 1932/     A9C :                     ; Run effects
(2) 1933/     A9C :                     ; 
(2) 1934/     A9C :                     ; apply effects on the channels
(2) 1935/     A9C :                     ; if unlocked
(2) 1936/     A9C :                     ; --------------------------------
(2) 1937/     A9C :                     
(2) 1938/     A9C :                     .run_effect:
(2) 1939/     A9C : 11 00 00            		ld	de,0
(2) 1940/     A9F : DD 7E 05            		ld	a,(ix+chnl_EffId)
(2) 1941/     AA2 : 87                  		add 	a,a
(2) 1942/     AA3 : E6 FE               		and	11111110b
(2) 1943/     AA5 : 5F                  		ld	e,a
(2) 1944/     AA6 : 21 B5 0A            		ld	hl,.list_doeff
(2) 1945/     AA9 : 19                  		add	hl,de
(2) 1946/     AAA : DD 46 00            		ld	b,(ix+chnl_Chip)
(2) 1947/     AAD : DD 4E 06            		ld	c,(ix+chnl_EffArg)
(2) 1948/     AB0 : 7E                  		ld	a,(hl)
(2) 1949/     AB1 : 23                  		inc	hl
(2) 1950/     AB2 : 66                  		ld	h,(hl)
(2) 1951/     AB3 : 6F                  		ld	l,a
(2) 1952/     AB4 : E9                  		jp	(hl)
(2) 1953/     AB5 :                     .list_doeff:
(2) 1954/     AB5 : BA 05               		dw .eff_null
(2) 1955/     AB7 : BA 05               		dw .eff_null	; A | Set ticks
(2) 1956/     AB9 : BA 05               		dw .eff_null	; B | Jump to block
(2) 1957/     ABB : BA 05               		dw .eff_null	; C | Break to row (not possible here)
(2) 1958/     ABD : EB 0A               		dw .set_D	; D | Volume slide
(2) 1959/     ABF : 05 0B               		dw .set_E_F	; E
(2) 1960/     AC1 : 05 0B               		dw .set_E_F	; F
(2) 1961/     AC3 : BA 05               		dw .eff_null	; G
(2) 1962/     AC5 : BA 05               		dw .eff_null	; H
(2) 1963/     AC7 : BA 05               		dw .eff_null	; I
(2) 1964/     AC9 : BA 05               		dw .eff_null	; J	
(2) 1965/     ACB : BA 05               		dw .eff_null	; K
(2) 1966/     ACD : BA 05               		dw .eff_null	; L
(2) 1967/     ACF : BA 05               		dw .eff_null	; M
(2) 1968/     AD1 : BA 05               		dw .eff_null	; N
(2) 1969/     AD3 : BA 05               		dw .eff_null	; O
(2) 1970/     AD5 : BA 05               		dw .eff_null	; P
(2) 1971/     AD7 : BA 05               		dw .eff_null	; Q
(2) 1972/     AD9 : BA 05               		dw .eff_null	; R
(2) 1973/     ADB : BA 05               		dw .eff_null	; S
(2) 1974/     ADD : BA 05               		dw .eff_null	; T
(2) 1975/     ADF : BA 05               		dw .eff_null	; U
(2) 1976/     AE1 : BA 05               		dw .eff_null	; V
(2) 1977/     AE3 : BA 05               		dw .eff_null	; W
(2) 1978/     AE5 : 40 0B               		dw .set_X	; X
(2) 1979/     AE7 : BA 05               		dw .eff_null	; Y
(2) 1980/     AE9 : BA 05               		dw .eff_null	; Z
(2) 1981/     AEB :                     
(2) 1982/     AEB :                     ; ------------------------------------
(2) 1983/     AEB :                     ; Effect D - Volume slide
(2) 1984/     AEB :                     ; ------------------------------------
(2) 1985/     AEB :                     
(2) 1986/     AEB :                     .set_D:
(2) 1987/     AEB : DD 7E 16            		ld	a,(ix+chnl_EfNewVol)
(2) 1988/     AEE : DD 86 15            		add 	a,(ix+chnl_EfVolSlide)
(2) 1989/     AF1 : DD 77 16            		ld	(ix+chnl_EfNewVol),a
(2) 1990/     AF4 : CB 78               		bit	7,b
(2) 1991/     AF6 : C2 FF 0A            		jp	nz,.setpsg_vol
(2) 1992/     AF9 : DD 46 16            		ld	b,(ix+chnl_EfNewVol)
(2) 1993/     AFC : C3 62 09            		jp	.set_fm_vol
(2) 1994/     AFF :                     .setpsg_vol:
(2) 1995/     AFF : DD 7E 16            		ld	a,(ix+chnl_EfNewVol)
(2) 1996/     B02 : C3 35 0A            		jp	.set_psg_vol
(2) 1997/     B05 :                     
(2) 1998/     B05 :                     ; ------------------------------------
(2) 1999/     B05 :                     ; Effect E - Portametro down
(2) 2000/     B05 :                     ; ------------------------------------
(2) 2001/     B05 :                     
(2) 2002/     B05 :                     .set_E_F:
(2) 2003/     B05 : DD CB 00 7E         		bit	7,(ix+chnl_Chip)
(2) 2004/     B09 : C2 22 0B            		jp	nz,.psg_EF
(2) 2005/     B0C :                     		
(2) 2006/     B0C : DD 56 18            		ld	d,(ix+(chnl_EfPortam+1))
(2) 2007/     B0F : DD 5E 17            		ld	e,(ix+chnl_EfPortam)
(2) 2008/     B12 : DD 66 1A            		ld	h,(ix+(chnl_EfNewFreq+1))
(2) 2009/     B15 : DD 6E 19            		ld	l,(ix+chnl_EfNewFreq)
(2) 2010/     B18 : 19                  		add 	hl,de
(2) 2011/     B19 : DD 74 1A            		ld	(ix+(chnl_EfNewFreq+1)),h
(2) 2012/     B1C : DD 75 19            		ld	(ix+chnl_EfNewFreq),l
(2) 2013/     B1F : C3 1F 09            		jp	.set_fm_freq
(2) 2014/     B22 :                     
(2) 2015/     B22 :                     .psg_EF:
(2) 2016/     B22 : DD 56 18            		ld	d,(ix+(chnl_EfPortam+1))
(2) 2017/     B25 : DD 5E 17            		ld	e,(ix+chnl_EfPortam)
(2) 2018/     B28 : DD 66 1A            		ld	h,(ix+(chnl_EfNewFreq+1))
(2) 2019/     B2B : DD 6E 19            		ld	l,(ix+chnl_EfNewFreq)
(2) 2020/     B2E : 37                  		scf
(2) 2021/     B2F : ED 52               		sbc 	hl,de
(2) 2022/     B31 : F2 37 0B            		jp	p,.toolow
(2) 2023/     B34 : 21 00 00            		ld	hl,0
(2) 2024/     B37 :                     .toolow:
(2) 2025/     B37 : DD 74 1A            		ld	(ix+(chnl_EfNewFreq+1)),h
(2) 2026/     B3A : DD 75 19            		ld	(ix+chnl_EfNewFreq),l
(2) 2027/     B3D : C3 59 0A            		jp	.set_psg_freq
(2) 2028/     B40 :                     		
(2) 2029/     B40 :                     ; ------------------------------------
(2) 2030/     B40 :                     ; Effect X - Set panning (FM ONLY)
(2) 2031/     B40 :                     ; ------------------------------------
(2) 2032/     B40 :                     
(2) 2033/     B40 :                     .set_X:
(2) 2034/     B40 : 16 B4               		ld	d,0B4h
(2) 2035/     B42 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2) 2036/     B45 : E6 03               		and	11b
(2) 2037/     B47 : B2                  		or	d
(2) 2038/     B48 : 57                  		ld	d,a
(2) 2039/     B49 : DD 7E 0F            		ld	a,(ix+chnl_FmRegB4)
(2) 2040/     B4C : DD B6 0D            		or	(ix+chnl_FmPan)
(2) 2041/     B4F : 5F                  		ld	e,a
(2) 2042/     B50 : C3 4B 0C            		jp	SndDrv_FmAutoSet
(2) 2043/     B53 :                     
(2) 2044/     B53 :                     ; ===================================================================
(2) 2045/     B53 :                     ; ----------------------------------------------------
(2) 2046/     B53 :                     ; Subs
(2) 2047/     B53 :                     ; ----------------------------------------------------
(2) 2048/     B53 :                     
(2) 2049/     B53 :                     ; ------------------------------------
(2) 2050/     B53 :                     ; Track request
(2) 2051/     B53 :                     ; ------------------------------------
(2) 2052/     B53 :                     
(2) 2053/     B53 :                     SndDrv_ReqTrack:
(2) 2054/     B53 : FD 7E 0A            		ld	a,(iy+trck_ReqFlag)
(2) 2055/     B56 : FD 36 0A 00         		ld	(iy+trck_ReqFlag),0
(2) 2056/     B5A : FD 36 0C E0         		ld	(iy+trck_PsgNoise),0E0h
(2) 2057/     B5E : 07                  		rlca
(2) 2058/     B5F : E6 FE               		and	11111110b
(2) 2059/     B61 : 11 00 00            		ld	de,0
(2) 2060/     B64 : 5F                  		ld	e,a
(2) 2061/     B65 : 21 6E 0B            		ld	hl,.req_list
(2) 2062/     B68 : 19                  		add	hl,de
(2) 2063/     B69 : 7E                  		ld	a,(hl)
(2) 2064/     B6A : 23                  		inc	hl
(2) 2065/     B6B : 66                  		ld	h,(hl)
(2) 2066/     B6C : 6F                  		ld	l,a
(2) 2067/     B6D : E9                  		jp	(hl)
(2) 2068/     B6E :                     .req_list:
(2) 2069/     B6E : 00 00               		dw 0
(2) 2070/     B70 : 74 0B               		dw .req01
(2) 2071/     B72 : CD 0B               		dw .req02
(2) 2072/     B74 :                     
(2) 2073/     B74 :                     ; ------------------------------------
(2) 2074/     B74 :                     ; Flag 01h
(2) 2075/     B74 :                     ; ------------------------------------
(2) 2076/     B74 :                     
(2) 2077/     B74 :                     .req01:
(2) 2078/     B74 : FD 46 00            		ld	b,(iy+trck_ReqBlk)		; Copy addresses
(2) 2079/     B77 : FD 4E 01            		ld	c,(iy+(trck_ReqBlk+1))
(2) 2080/     B7A : FD 56 02            		ld	d,(iy+trck_ReqPatt)
(2) 2081/     B7D : FD 5E 03            		ld	e,(iy+(trck_ReqPatt+1))
(2) 2082/     B80 : FD 66 04            		ld	h,(iy+trck_ReqIns)
(2) 2083/     B83 : FD 6E 05            		ld	l,(iy+(trck_ReqIns+1))
(2) 2084/     B86 : FD 70 12            		ld	(iy+trck_Blocks),b
(2) 2085/     B89 : FD 71 13            		ld	(iy+(trck_Blocks+1)),c
(2) 2086/     B8C : FD 72 14            		ld	(iy+trck_PattBase),d
(2) 2087/     B8F : FD 73 15            		ld	(iy+(trck_PattBase+1)),e
(2) 2088/     B92 : FD 72 18            		ld	(iy+trck_PattRead),d
(2) 2089/     B95 : FD 73 19            		ld	(iy+(trck_PattRead+1)),e
(2) 2090/     B98 : FD 74 16            		ld	(iy+trck_Instr),h
(2) 2091/     B9B : FD 75 17            		ld	(iy+(trck_Instr+1)),l
(2) 2092/     B9E : FD 56 06            		ld	d,(iy+trck_ReqTicks)		; Tempo and ticks
(2) 2093/     BA1 : FD 4E 07            		ld	c,(iy+trck_ReqTempo)
(2) 2094/     BA4 : FD 46 08            		ld	b,(iy+trck_ReqCurrBlk)
(2) 2095/     BA7 : FD 7E 09            		ld	a,(iy+trck_ReqSndBnk)
(2) 2096/     BAA : FD 72 1F            		ld	(iy+trck_TicksCurr),d
(2) 2097/     BAD : FD 72 1C            		ld	(iy+trck_TicksMain),d
(2) 2098/     BB0 : FD 72 0D            		ld	(iy+trck_TicksRead),d
(2) 2099/     BB3 : FD 71 1D            		ld	(iy+trck_TempoBits),c
(2) 2100/     BB6 : FD 70 0E            		ld	(iy+trck_BlockCurr),b
(2) 2101/     BB9 : 32 32 00            		ld	(curr_SndBank),a
(2) 2102/     BBC : AF                  		xor	a
(2) 2103/     BBD : FD 77 1A            		ld	(iy+trck_RowSteps),a
(2) 2104/     BC0 : FD 77 1B            		ld	(iy+(trck_RowSteps+1)),a		
(2) 2105/     BC3 : FD 77 1E            		ld	(iy+trck_RowWait),a
(2) 2106/     BC6 : 3C                  		inc 	a
(2) 2107/     BC7 : FD 77 11            		ld	(iy+trck_Active),a
(2) 2108/     BCA : C3 D1 0B            		jp	SndDrv_ResetChan
(2) 2109/     BCD :                     		
(2) 2110/     BCD :                     ; ------------------------------------
(2) 2111/     BCD :                     ; Flag 02h
(2) 2112/     BCD :                     ; ------------------------------------
(2) 2113/     BCD :                     
(2) 2114/     BCD :                     .req02:
(2) 2115/     BCD : AF                  		xor	a
(2) 2116/     BCE : FD 77 11            		ld	(iy+trck_Active),a
(2) 2117/     BD1 :                     
(2) 2118/     BD1 :                     ; ------------------------------------
(2) 2119/     BD1 :                     ; Reset channels and silence them
(2) 2120/     BD1 :                     ; ------------------------------------
(2) 2121/     BD1 :                     
(2) 2122/     BD1 :                     SndDrv_ResetChan:
(2) 2123/     BD1 : 21 0A 12            		ld	hl,SndBuff_UsedChnls
(2) 2124/     BD4 : FD 7E 10            		ld	a,(iy+trck_Priority)
(2) 2125/     BD7 : B7                  		or	a
(2) 2126/     BD8 : CA DE 0B            		jp	z,.lowprio
(2) 2127/     BDB : 21 14 12            		ld	hl,SndBuff_UsedChnls_2
(2) 2128/     BDE :                     .lowprio:
(2) 2129/     BDE : 06 0A               		ld	b,MAX_CHNLS
(2) 2130/     BE0 : AF                  		xor	a
(2) 2131/     BE1 :                     .nexttype:
(2) 2132/     BE1 : 77                  		ld	(hl),a
(2) 2133/     BE2 : 23                  		inc 	hl
(2) 2134/     BE3 : 10 FC               		djnz	.nexttype
(2) 2135/     BE5 : DD E5               		push	ix
(2) 2136/     BE7 : 06 0A               		ld	b,MAX_CHNLS
(2) 2137/     BE9 : AF                  		xor	a
(2) 2138/     BEA : 11 20 00            		ld	de,20h
(2) 2139/     BED :                     .initchnls:
(2) 2140/     BED : DD 77 01            		ld	(ix+chnl_Type),a		; Note request
(2) 2141/     BF0 : DD 36 02 FE         		ld	(ix+chnl_Note),-2		; Set Note off
(2) 2142/     BF4 : DD 36 04 40         		ld	(ix+chnl_Vol),64		; Max volume
(2) 2143/     BF8 : DD 36 16 40         		ld	(ix+chnl_EfNewVol),64
(2) 2144/     BFC : DD 36 0D C0         		ld	(ix+chnl_FmPan),0C0h
(2) 2145/     C00 : DD 77 0B            		ld	(ix+chnl_InsType),a
(2) 2146/     C03 : DD 77 0C            		ld	(ix+chnl_InsOpt),a
(2) 2147/     C06 : DD 77 15            		ld	(ix+chnl_EfVolSlide),a
(2) 2148/     C09 : DD 77 12            		ld	(ix+chnl_PsgVolEnv),a
(2) 2149/     C0C : DD 77 13            		ld	(ix+chnl_PsgIndx),a
(2) 2150/     C0F : DD 19               		add 	ix,de
(2) 2151/     C11 : 10 DA               		djnz	.initchnls
(2) 2152/     C13 : DD E1               		pop	ix
(2) 2153/     C15 :                     		
(2) 2154/     C15 :                     ; ------------------------------------
(2) 2155/     C15 :                     
(2) 2156/     C15 : DD E5               		push	ix
(2) 2157/     C17 : 11 14 12            		ld	de,SndBuff_UsedChnls_2
(2) 2158/     C1A : 21 0A 12            		ld	hl,SndBuff_UsedChnls
(2) 2159/     C1D : 06 0A               		ld	b,MAX_CHNLS			; FM channels
(2) 2160/     C1F :                     .nxtfmchnl:
(2) 2161/     C1F : C5                  		push	bc
(2) 2162/     C20 : 1A                  		ld	a,(de)
(2) 2163/     C21 : 4E                  		ld	c,(hl)
(2) 2164/     C22 : B1                  		or	c
(2) 2165/     C23 : B7                  		or	a
(2) 2166/     C24 : C2 3E 0C            		jp	nz,.dontvolfm
(2) 2167/     C27 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2) 2168/     C2A : B7                  		or	a
(2) 2169/     C2B : F2 36 0C            		jp	p,.fm_shut
(2) 2170/     C2E : F6 1F               		or	01Fh
(2) 2171/     C30 : 32 11 7F            		ld	(zpsg_ctrl),a
(2) 2172/     C33 : C3 3E 0C            		jp	.dontvolfm
(2) 2173/     C36 :                     .fm_shut:
(2) 2174/     C36 : D5                  		push 	de
(2) 2175/     C37 : 16 28               		ld	d,28h
(2) 2176/     C39 : 5F                  		ld	e,a
(2) 2177/     C3A : CD 52 0C            		call	SndDrv_FmSet_1
(2) 2178/     C3D : D1                  		pop	de
(2) 2179/     C3E :                     .dontvolfm:
(2) 2180/     C3E : 23                  		inc 	hl
(2) 2181/     C3F : 13                  		inc 	de
(2) 2182/     C40 : 01 20 00            		ld	bc,20h
(2) 2183/     C43 : DD 09               		add 	ix,bc
(2) 2184/     C45 : C1                  		pop	bc
(2) 2185/     C46 : 10 D7               		djnz	.nxtfmchnl
(2) 2186/     C48 : DD E1               		pop	ix
(2) 2187/     C4A : C9                  		ret
(2) 2188/     C4B :                     
(2) 2189/     C4B :                     ; ---------------------------------------------
(2) 2190/     C4B :                     ; FM send registers
(2) 2191/     C4B :                     ; 
(2) 2192/     C4B :                     ; Input:
(2) 2193/     C4B :                     ; d - ctrl
(2) 2194/     C4B :                     ; e - data
(2) 2195/     C4B :                     ; c - channel
(2) 2196/     C4B :                     ; ---------------------------------------------
(2) 2197/     C4B :                     
(2) 2198/     C4B :                     SndDrv_FmAutoSet:
(2) 2199/     C4B : DD CB 00 56         		bit 	2,(ix+chnl_Chip)
(2) 2200/     C4F : C2 5D 0C            		jp	nz,SndDrv_FmSet_2
(2) 2201/     C52 :                     		
(2) 2202/     C52 :                     SndDrv_FmSet_1:
(2) 2203/     C52 : 7A                  		ld	a,d
(2) 2204/     C53 : 32 00 40            		ld	(Zym_ctrl_1),a
(2) 2205/     C56 : 00                  		nop
(2) 2206/     C57 : 7B                  		ld	a,e
(2) 2207/     C58 : 32 01 40            		ld	(Zym_data_1),a
(2) 2208/     C5B : 00                  		nop
(2) 2209/     C5C : C9                  		ret
(2) 2210/     C5D :                     
(2) 2211/     C5D :                     SndDrv_FmSet_2:
(2) 2212/     C5D : 7A                  		ld	a,d
(2) 2213/     C5E : 32 02 40            		ld	(Zym_ctrl_2),a
(2) 2214/     C61 : 00                  		nop
(2) 2215/     C62 : 7B                  		ld	a,e
(2) 2216/     C63 : 32 03 40            		ld	(Zym_data_2),a
(2) 2217/     C66 : 00                  		nop
(2) 2218/     C67 : C9                  		ret
(2) 2219/     C68 :                     
(2) 2220/     C68 :                     ; ====================================================================
(2) 2221/     C68 : 84 02               fmFreq_List:	dw 644			; C-0
(2) 2222/     C6A : A9 02               		dw 681
(2) 2223/     C6C : D2 02               		dw 722
(2) 2224/     C6E : FD 02               		dw 765
(2) 2225/     C70 : 2A 03               		dw 810
(2) 2226/     C72 : 5A 03               		dw 858
(2) 2227/     C74 : 8E 03               		dw 910
(2) 2228/     C76 : C4 03               		dw 964
(2) 2229/     C78 : FD 03               		dw 1021
(2) 2230/     C7A : 39 04               		dw 1081
(2) 2231/     C7C : 7A 04               		dw 1146
(2) 2232/     C7E : BE 04               		dw 1214
(2) 2233/     C80 : 84 0A               		dw 644|800h		; C-1
(2) 2234/     C82 : A9 0A               		dw 681|800h
(2) 2235/     C84 : D2 0A               		dw 722|800h
(2) 2236/     C86 : FD 0A               		dw 765|800h
(2) 2237/     C88 : 2A 0B               		dw 810|800h
(2) 2238/     C8A : 5A 0B               		dw 858|800h
(2) 2239/     C8C : 8E 0B               		dw 910|800h
(2) 2240/     C8E : C4 0B               		dw 964|800h
(2) 2241/     C90 : FD 0B               		dw 1021|800h
(2) 2242/     C92 : 39 0C               		dw 1081|800h
(2) 2243/     C94 : 7A 0C               		dw 1146|800h
(2) 2244/     C96 : BE 0C               		dw 1214|800h
(2) 2245/     C98 : 84 12               		dw 644|1000h		; C-2
(2) 2246/     C9A : A9 12               		dw 681|1000h
(2) 2247/     C9C : D2 12               		dw 722|1000h
(2) 2248/     C9E : FD 12               		dw 765|1000h
(2) 2249/     CA0 : 2A 13               		dw 810|1000h
(2) 2250/     CA2 : 5A 13               		dw 858|1000h
(2) 2251/     CA4 : 8E 13               		dw 910|1000h
(2) 2252/     CA6 : C4 13               		dw 964|1000h
(2) 2253/     CA8 : FD 13               		dw 1021|1000h
(2) 2254/     CAA : 39 14               		dw 1081|1000h
(2) 2255/     CAC : 7A 14               		dw 1146|1000h
(2) 2256/     CAE : BE 14               		dw 1214|1000h
(2) 2257/     CB0 : 84 1A               		dw 644|1800h		; C-3
(2) 2258/     CB2 : A9 1A               		dw 681|1800h
(2) 2259/     CB4 : D2 1A               		dw 722|1800h
(2) 2260/     CB6 : FD 1A               		dw 765|1800h
(2) 2261/     CB8 : 2A 1B               		dw 810|1800h
(2) 2262/     CBA : 5A 1B               		dw 858|1800h
(2) 2263/     CBC : 8E 1B               		dw 910|1800h
(2) 2264/     CBE : C4 1B               		dw 964|1800h
(2) 2265/     CC0 : FD 1B               		dw 1021|1800h
(2) 2266/     CC2 : 39 1C               		dw 1081|1800h
(2) 2267/     CC4 : 7A 1C               		dw 1146|1800h
(2) 2268/     CC6 : BE 1C               		dw 1214|1800h
(2) 2269/     CC8 : 84 22               		dw 644|2000h		; C-4
(2) 2270/     CCA : A9 22               		dw 681|2000h
(2) 2271/     CCC : D2 22               		dw 722|2000h
(2) 2272/     CCE : FD 22               		dw 765|2000h
(2) 2273/     CD0 : 2A 23               		dw 810|2000h
(2) 2274/     CD2 : 5A 23               		dw 858|2000h
(2) 2275/     CD4 : 8E 23               		dw 910|2000h
(2) 2276/     CD6 : C4 23               		dw 964|2000h
(2) 2277/     CD8 : FD 23               		dw 1021|2000h
(2) 2278/     CDA : 39 24               		dw 1081|2000h
(2) 2279/     CDC : 7A 24               		dw 1146|2000h
(2) 2280/     CDE : BE 24               		dw 1214|2000h
(2) 2281/     CE0 : 84 2A               		dw 644|2800h		; C-5
(2) 2282/     CE2 : A9 2A               		dw 681|2800h
(2) 2283/     CE4 : D2 2A               		dw 722|2800h
(2) 2284/     CE6 : FD 2A               		dw 765|2800h
(2) 2285/     CE8 : 2A 2B               		dw 810|2800h
(2) 2286/     CEA : 5A 2B               		dw 858|2800h
(2) 2287/     CEC : 8E 2B               		dw 910|2800h
(2) 2288/     CEE : C4 2B               		dw 964|2800h
(2) 2289/     CF0 : FD 2B               		dw 1021|2800h
(2) 2290/     CF2 : 39 2C               		dw 1081|2800h
(2) 2291/     CF4 : 7A 2C               		dw 1146|2800h
(2) 2292/     CF6 : BE 2C               		dw 1214|2800h		
(2) 2293/     CF8 : 84 32               		dw 644|3000h		; C-6
(2) 2294/     CFA : A9 32               		dw 681|3000h
(2) 2295/     CFC : D2 32               		dw 722|3000h
(2) 2296/     CFE : FD 32               		dw 765|3000h
(2) 2297/     D00 : 2A 33               		dw 810|3000h
(2) 2298/     D02 : 5A 33               		dw 858|3000h
(2) 2299/     D04 : 8E 33               		dw 910|3000h
(2) 2300/     D06 : C4 33               		dw 964|3000h
(2) 2301/     D08 : FD 33               		dw 1021|3000h
(2) 2302/     D0A : 39 34               		dw 1081|3000h
(2) 2303/     D0C : 7A 34               		dw 1146|3000h
(2) 2304/     D0E : BE 34               		dw 1214|3000h
(2) 2305/     D10 : 84 3A               		dw 644|3800h		; C-7
(2) 2306/     D12 : A9 3A               		dw 681|3800h
(2) 2307/     D14 : D2 3A               		dw 722|3800h
(2) 2308/     D16 : FD 3A               		dw 765|3800h
(2) 2309/     D18 : 2A 3B               		dw 810|3800h
(2) 2310/     D1A : 5A 3B               		dw 858|3800h
(2) 2311/     D1C : 8E 3B               		dw 910|3800h
(2) 2312/     D1E : C4 3B               		dw 964|3800h
(2) 2313/     D20 : FD 3B               		dw 1021|3800h
(2) 2314/     D22 : 39 3C               		dw 1081|3800h
(2) 2315/     D24 : 7A 3C               		dw 1146|3800h
(2) 2316/     D26 : BE 3C               		dw 1214|3800h
(2) 2317/     D28 :                     
(2) 2318/     D28 :                     psgFreq_List:
(2) 2319/     D28 : FF FF               		dw -1		; C-0 $0
(2) 2320/     D2A : FF FF               		dw -1
(2) 2321/     D2C : FF FF               		dw -1
(2) 2322/     D2E : FF FF               		dw -1
(2) 2323/     D30 : FF FF               		dw -1
(2) 2324/     D32 : FF FF               		dw -1
(2) 2325/     D34 : FF FF               		dw -1
(2) 2326/     D36 : FF FF               		dw -1
(2) 2327/     D38 : FF FF               		dw -1
(2) 2328/     D3A : FF FF               		dw -1
(2) 2329/     D3C : FF FF               		dw -1
(2) 2330/     D3E : FF FF               		dw -1
(2) 2331/     D40 : FF FF               		dw -1		; C-1 $C
(2) 2332/     D42 : FF FF               		dw -1
(2) 2333/     D44 : FF FF               		dw -1
(2) 2334/     D46 : FF FF               		dw -1
(2) 2335/     D48 : FF FF               		dw -1
(2) 2336/     D4A : FF FF               		dw -1
(2) 2337/     D4C : FF FF               		dw -1
(2) 2338/     D4E : FF FF               		dw -1
(2) 2339/     D50 : FF FF               		dw -1
(2) 2340/     D52 : FF FF               		dw -1
(2) 2341/     D54 : FF FF               		dw -1
(2) 2342/     D56 : FF FF               		dw -1
(2) 2343/     D58 : FF FF               		dw -1		; C-2 $18
(2) 2344/     D5A : FF FF               		dw -1
(2) 2345/     D5C : FF FF               		dw -1
(2) 2346/     D5E : FF FF               		dw -1
(2) 2347/     D60 : FF FF               		dw -1
(2) 2348/     D62 : FF FF               		dw -1
(2) 2349/     D64 : FF FF               		dw -1
(2) 2350/     D66 : FF FF               		dw -1
(2) 2351/     D68 : FF FF               		dw -1
(2) 2352/     D6A : FF FF               		dw -1
(2) 2353/     D6C : FF FF               		dw -1
(2) 2354/     D6E : FF FF               		dw -1
(2) 2355/     D70 : FF FF               		dw -1		; C-3 $24
(2) 2356/     D72 : FF FF               		dw -1
(2) 2357/     D74 : FF FF               		dw -1
(2) 2358/     D76 : FF FF               		dw -1
(2) 2359/     D78 : FF FF               		dw -1
(2) 2360/     D7A : FF FF               		dw -1
(2) 2361/     D7C : FF FF               		dw -1
(2) 2362/     D7E : FF FF               		dw -1
(2) 2363/     D80 : FF FF               		dw -1
(2) 2364/     D82 : F8 03               		dw 3F8h
(2) 2365/     D84 : BF 03               		dw 3BFh
(2) 2366/     D86 : 89 03               		dw 389h
(2) 2367/     D88 : 56 03               		dw 356h		;C-4 30
(2) 2368/     D8A : 26 03               		dw 326h
(2) 2369/     D8C : F9 02               		dw 2F9h
(2) 2370/     D8E : CE 02               		dw 2CEh
(2) 2371/     D90 : A5 02               		dw 2A5h
(2) 2372/     D92 : 80 02               		dw 280h
(2) 2373/     D94 : 5C 02               		dw 25Ch
(2) 2374/     D96 : 3A 02               		dw 23Ah
(2) 2375/     D98 : 1A 02               		dw 21Ah
(2) 2376/     D9A : FB 01               		dw 1FBh
(2) 2377/     D9C : DF 01               		dw 1DFh
(2) 2378/     D9E : C4 01               		dw 1C4h
(2) 2379/     DA0 : AB 01               		dw 1ABh		;C-5 3C
(2) 2380/     DA2 : 93 01               		dw 193h
(2) 2381/     DA4 : 7D 01               		dw 17Dh
(2) 2382/     DA6 : 67 01               		dw 167h
(2) 2383/     DA8 : 53 01               		dw 153h
(2) 2384/     DAA : 40 01               		dw 140h
(2) 2385/     DAC : 2E 01               		dw 12Eh
(2) 2386/     DAE : 1D 01               		dw 11Dh
(2) 2387/     DB0 : 0D 01               		dw 10Dh
(2) 2388/     DB2 : FE 00               		dw 0FEh
(2) 2389/     DB4 : EF 00               		dw 0EFh
(2) 2390/     DB6 : E2 00               		dw 0E2h
(2) 2391/     DB8 : D6 00               		dw 0D6h		;C-6 48
(2) 2392/     DBA : C9 00               		dw 0C9h
(2) 2393/     DBC : BE 00               		dw 0BEh
(2) 2394/     DBE : B4 00               		dw 0B4h
(2) 2395/     DC0 : A9 00               		dw 0A9h
(2) 2396/     DC2 : A0 00               		dw 0A0h
(2) 2397/     DC4 : 97 00               		dw 97h
(2) 2398/     DC6 : 8F 00               		dw 8Fh
(2) 2399/     DC8 : 87 00               		dw 87h
(2) 2400/     DCA : 7F 00               		dw 7Fh
(2) 2401/     DCC : 78 00               		dw 78h
(2) 2402/     DCE : 71 00               		dw 71h
(2) 2403/     DD0 : 6B 00               		dw 6Bh		; C-7 54
(2) 2404/     DD2 : 65 00               		dw 65h
(2) 2405/     DD4 : 5F 00               		dw 5Fh
(2) 2406/     DD6 : 5A 00               		dw 5Ah
(2) 2407/     DD8 : 55 00               		dw 55h
(2) 2408/     DDA : 50 00               		dw 50h
(2) 2409/     DDC : 4B 00               		dw 4Bh
(2) 2410/     DDE : 47 00               		dw 47h
(2) 2411/     DE0 : 43 00               		dw 43h
(2) 2412/     DE2 : 40 00               		dw 40h
(2) 2413/     DE4 : 3C 00               		dw 3Ch
(2) 2414/     DE6 : 39 00               		dw 39h
(2) 2415/     DE8 : 36 00               		dw 36h		; C-8 $60
(2) 2416/     DEA : 33 00               		dw 33h
(2) 2417/     DEC : 30 00               		dw 30h
(2) 2418/     DEE : 2D 00               		dw 2Dh
(2) 2419/     DF0 : 2B 00               		dw 2Bh
(2) 2420/     DF2 : 28 00               		dw 28h
(2) 2421/     DF4 : 26 00               		dw 26h
(2) 2422/     DF6 : 24 00               		dw 24h
(2) 2423/     DF8 : 22 00               		dw 22h
(2) 2424/     DFA : 20 00               		dw 20h
(2) 2425/     DFC : 1F 00               		dw 1Fh
(2) 2426/     DFE : 1D 00               		dw 1Dh
(2) 2427/     E00 : 1B 00               		dw 1Bh		; C-9 $6C
(2) 2428/     E02 : 1A 00               		dw 1Ah
(2) 2429/     E04 : 18 00               		dw 18h
(2) 2430/     E06 : 17 00               		dw 17h
(2) 2431/     E08 : 16 00               		dw 16h
(2) 2432/     E0A : 15 00               		dw 15h
(2) 2433/     E0C : 13 00               		dw 13h
(2) 2434/     E0E : 12 00               		dw 12h
(2) 2435/     E10 : 11 00               		dw 11h
(2) 2436/     E12 : 10 00                		dw 10h
(2) 2437/     E14 : 09 00                		dw 9h
(2) 2438/     E16 : 08 00                		dw 8h
(2) 2439/     E18 : 00 00               		dw 0		; use +60 if using C-5 for tone 3 noise
(2) 2440/     E1A :                     		
(2) 2441/     E1A : 00 01               wavFreq_List:	dw 100h		; C-0
(2) 2442/     E1C : 00 01               		dw 100h
(2) 2443/     E1E : 00 01               		dw 100h
(2) 2444/     E20 : 00 01               		dw 100h
(2) 2445/     E22 : 00 01               		dw 100h
(2) 2446/     E24 : 00 01               		dw 100h
(2) 2447/     E26 : 00 01               		dw 100h	
(2) 2448/     E28 : 00 01               		dw 100h
(2) 2449/     E2A : 00 01               		dw 100h
(2) 2450/     E2C : 00 01               		dw 100h
(2) 2451/     E2E : 00 01               		dw 100h
(2) 2452/     E30 : 00 01               		dw 100h
(2) 2453/     E32 : 00 01               		dw 100h		; C-1
(2) 2454/     E34 : 00 01               		dw 100h
(2) 2455/     E36 : 00 01               		dw 100h
(2) 2456/     E38 : 00 01               		dw 100h
(2) 2457/     E3A : 00 01               		dw 100h
(2) 2458/     E3C : 00 01               		dw 100h
(2) 2459/     E3E : 00 01               		dw 100h	
(2) 2460/     E40 : 00 01               		dw 100h
(2) 2461/     E42 : 00 01               		dw 100h
(2) 2462/     E44 : 00 01               		dw 100h
(2) 2463/     E46 : 00 01               		dw 100h
(2) 2464/     E48 : 00 01               		dw 100h
(2) 2465/     E4A : 00 01               		dw 100h		; C-2
(2) 2466/     E4C : 00 01               		dw 100h
(2) 2467/     E4E : 00 01               		dw 100h
(2) 2468/     E50 : 00 01               		dw 100h
(2) 2469/     E52 : 00 01               		dw 100h
(2) 2470/     E54 : 00 01               		dw 100h
(2) 2471/     E56 : 00 01               		dw 100h
(2) 2472/     E58 : 00 01               		dw 100h
(2) 2473/     E5A : 00 01               		dw 100h
(2) 2474/     E5C : 00 01               		dw 100h
(2) 2475/     E5E : 00 01               		dw 100h
(2) 2476/     E60 : 3B 00               		dw 03Bh
(2) 2477/     E62 : 3E 00               		dw 03Eh		; C-3 5512
(2) 2478/     E64 : 43 00               		dw 043h		; C#3
(2) 2479/     E66 : 46 00               		dw 046h		; D-3
(2) 2480/     E68 : 49 00               		dw 049h		; D#3
(2) 2481/     E6A : 4E 00               		dw 04Eh		; E-3
(2) 2482/     E6C : 54 00               		dw 054h		; F-3
(2) 2483/     E6E : 58 00               		dw 058h		; F#3
(2) 2484/     E70 : 5E 00               		dw 05Eh		; G-3 8363 -17
(2) 2485/     E72 : 63 00               		dw 063h		; G#3
(2) 2486/     E74 : 68 00               		dw 068h		; A-3
(2) 2487/     E76 : 70 00               		dw 070h		; A#3
(2) 2488/     E78 : 75 00               		dw 075h		; B-3
(2) 2489/     E7A : 7F 00               		dw 07Fh		; C-4 11025 -12
(2) 2490/     E7C : 88 00               		dw 088h		; C#4
(2) 2491/     E7E : 8F 00               		dw 08Fh		; D-4
(2) 2492/     E80 : 97 00               		dw 097h		; D#4
(2) 2493/     E82 : A0 00               		dw 0A0h		; E-4
(2) 2494/     E84 : AD 00               		dw 0ADh		; F-4
(2) 2495/     E86 : B5 00               		dw 0B5h		; F#4 16000
(2) 2496/     E88 : C0 00               		dw 0C0h		; G-4
(2) 2497/     E8A : CC 00               		dw 0CCh		; G#4
(2) 2498/     E8C : D7 00               		dw 0D7h		; A-4
(2) 2499/     E8E : E7 00               		dw 0E7h		; A#4
(2) 2500/     E90 : F0 00               		dw 0F0h		; B-4
(2) 2501/     E92 : 00 01               		dw 100h		; C-5 22050
(2) 2502/     E94 : 10 01               		dw 110h		; C#5
(2) 2503/     E96 : 20 01               		dw 120h		; D-5
(2) 2504/     E98 : 2C 01               		dw 12Ch		; D#5
(2) 2505/     E9A : 42 01               		dw 142h		; E-5
(2) 2506/     E9C : 58 01               		dw 158h		; F-5
(2) 2507/     E9E : 6A 01               		dw 16Ah		; F#5 32000 +6
(2) 2508/     EA0 : 7E 01               		dw 17Eh		; G-5
(2) 2509/     EA2 : 90 01               		dw 190h		; G#5
(2) 2510/     EA4 : AC 01               		dw 1ACh		; A-5
(2) 2511/     EA6 : C2 01               		dw 1C2h		; A#5
(2) 2512/     EA8 : E0 01               		dw 1E0h		; B-5
(2) 2513/     EAA : F8 01               		dw 1F8h		; C-6 44100 +12
(2) 2514/     EAC : 10 02               		dw 210h		; C#6
(2) 2515/     EAE : 40 02               		dw 240h		; D-6
(2) 2516/     EB0 : 60 02               		dw 260h		; D#6
(2) 2517/     EB2 : 80 02               		dw 280h		; E-6
(2) 2518/     EB4 : A0 02               		dw 2A0h		; F-6
(2) 2519/     EB6 : D0 02               		dw 2D0h		; F#6
(2) 2520/     EB8 : F8 02               		dw 2F8h		; G-6
(2) 2521/     EBA : 20 03               		dw 320h		; G#6
(2) 2522/     EBC : 50 03               		dw 350h		; A-6
(2) 2523/     EBE : 80 03               		dw 380h		; A#6
(2) 2524/     EC0 : C0 03               		dw 3C0h		; B-6
(2) 2525/     EC2 : 00 04               		dw 400h		; C-7 88200
(2) 2526/     EC4 : 00 01               		dw 100h
(2) 2527/     EC6 : 00 01               		dw 100h
(2) 2528/     EC8 : 00 01               		dw 100h
(2) 2529/     ECA : 00 01               		dw 100h
(2) 2530/     ECC : 00 01               		dw 100h
(2) 2531/     ECE : 00 01               		dw 100h	
(2) 2532/     ED0 : 00 01               		dw 100h
(2) 2533/     ED2 : 00 01               		dw 100h
(2) 2534/     ED4 : 00 01               		dw 100h
(2) 2535/     ED6 : 00 01               		dw 100h
(2) 2536/     ED8 : 00 01               		dw 100h	
(2) 2537/     EDA : 00 01               		dw 100h		; C-8
(2) 2538/     EDC : 00 01               		dw 100h
(2) 2539/     EDE : 00 01               		dw 100h
(2) 2540/     EE0 : 00 01               		dw 100h
(2) 2541/     EE2 : 00 01               		dw 100h
(2) 2542/     EE4 : 00 01               		dw 100h
(2) 2543/     EE6 : 00 01               		dw 100h	
(2) 2544/     EE8 : 00 01               		dw 100h
(2) 2545/     EEA : 00 01               		dw 100h
(2) 2546/     EEC : 00 01               		dw 100h
(2) 2547/     EEE : 00 01               		dw 100h
(2) 2548/     EF0 : 00 01               		dw 100h	
(2) 2549/     EF2 : 00 01               		dw 100h		; C-9
(2) 2550/     EF4 : 00 01               		dw 100h
(2) 2551/     EF6 : 00 01               		dw 100h
(2) 2552/     EF8 : 00 01               		dw 100h
(2) 2553/     EFA : 00 01               		dw 100h
(2) 2554/     EFC : 00 01               		dw 100h
(2) 2555/     EFE : 00 01               		dw 100h	
(2) 2556/     F00 : 00 01               		dw 100h
(2) 2557/     F02 : 00 01               		dw 100h
(2) 2558/     F04 : 00 01               		dw 100h
(2) 2559/     F06 : 00 01               		dw 100h
(2) 2560/     F08 : 00 01               		dw 100h
(2) 2561/     F0A :                     		
(2) 2562/     F0A :                     ; ====================================================================
(2) 2563/     F0A :                     ; ----------------------------------------------------------------
(2) 2564/     F0A :                     ; Z80 RAM
(2) 2565/     F0A :                     ; ----------------------------------------------------------------
(2) 2566/     F0A :                     
(2) 2567/     F0A :                     ; ----------------------------------------------------
(2) 2568/     F0A :                     ; Tracker data buffer
(2) 2569/     F0A :                     ; ----------------------------------------------------
(2) 2570/     F0A :                     
(2) 2571/     F0A : =0H                 trck_ReqBlk	equ 00h		; word
(2) 2572/     F0A : =2H                 trck_ReqPatt	equ 02h		; word
(2) 2573/     F0A : =4H                 trck_ReqIns	equ 04h		; word
(2) 2574/     F0A : =6H                 trck_ReqTicks	equ 06h
(2) 2575/     F0A : =7H                 trck_ReqTempo	equ 07h
(2) 2576/     F0A : =8H                 trck_ReqCurrBlk	equ 08h
(2) 2577/     F0A : =9H                 trck_ReqSndBnk	equ 09h
(2) 2578/     F0A : =AH                 trck_ReqFlag	equ 0Ah
(2) 2579/     F0A : =BH                 trck_ReqChnls	equ 0Bh
(2) 2580/     F0A : =CH                 trck_PsgNoise	equ 0Ch
(2) 2581/     F0A : =DH                 trck_TicksRead	equ 0Dh
(2) 2582/     F0A : =EH                 trck_BlockCurr	equ 0Eh
(2) 2583/     F0A : =FH                 trck_MasterVol	equ 0Fh
(2) 2584/     F0A : =10H                trck_Priority	equ 10h
(2) 2585/     F0A : =11H                trck_Active	equ 11h
(2) 2586/     F0A : =12H                trck_Blocks	equ 12h		; word
(2) 2587/     F0A : =14H                trck_PattBase	equ 14h		; word
(2) 2588/     F0A : =16H                trck_Instr	equ 16h		; word
(2) 2589/     F0A : =18H                trck_PattRead	equ 18h		; word
(2) 2590/     F0A : =1AH                trck_RowSteps	equ 1Ah		; word
(2) 2591/     F0A : =1CH                trck_TicksMain 	equ 1Ch
(2) 2592/     F0A : =1DH                trck_TempoBits	equ 1Dh
(2) 2593/     F0A : =1EH                trck_RowWait	equ 1Eh
(2) 2594/     F0A : =1FH                trck_TicksCurr	equ 1Fh
(2) 2595/     F0A : =20H                trck_Volume	equ 20h
(2) 2596/     F0A :                     
(2) 2597/     F0A :                     ; ----------------------------------------------------
(2) 2598/     F0A :                     ; Track buffer
(2) 2599/     F0A :                     ; ----------------------------------------------------
(2) 2600/     F0A :                     
(2) 2601/     F0A :                     SndBuff_Track_1:
(2) 2602/     F0A :                     		ds 40h		; Request list
(2) 2603/     F4A :                     SndBuff_Track_2:
(2) 2604/     F4A :                     		ds 40h
(2) 2605/     F8A :                     
(2) 2606/     F8A :                     ; ----------------------------------------------------
(2) 2607/     F8A :                     ; Tracker note buffers
(2) 2608/     F8A :                     ; ----------------------------------------------------
(2) 2609/     F8A :                     
(2) 2610/     F8A : =0H                 chnl_Chip	equ 0
(2) 2611/     F8A : =1H                 chnl_Type	equ 1
(2) 2612/     F8A : =2H                 chnl_Note	equ 2
(2) 2613/     F8A : =3H                 chnl_Ins	equ 3
(2) 2614/     F8A : =4H                 chnl_Vol	equ 4
(2) 2615/     F8A : =5H                 chnl_EffId	equ 5
(2) 2616/     F8A : =6H                 chnl_EffArg	equ 6
(2) 2617/     F8A : =7H                 chnl_InsAddr	equ 7		; word
(2) 2618/     F8A : =9H                 chnl_Freq	equ 09h		; word
(2) 2619/     F8A : =BH                 chnl_InsType	equ 0Bh
(2) 2620/     F8A : =CH                 chnl_InsOpt	equ 0Ch
(2) 2621/     F8A : =DH                 chnl_FmPan	equ 0Dh
(2) 2622/     F8A : =EH                 chnl_FmRegB0	equ 0Eh
(2) 2623/     F8A : =FH                 chnl_FmRegB4	equ 0Fh
(2) 2624/     F8A : =10H                chnl_FmRegKeys	equ 10h
(2) 2625/     F8A : =11H                chnl_ChnVolBase	equ 11h
(2) 2626/     F8A : =12H                chnl_PsgVolEnv	equ 12h
(2) 2627/     F8A : =13H                chnl_PsgIndx	equ 13h
(2) 2628/     F8A : =14H                chnl_SmplFlags	equ 14h
(2) 2629/     F8A : =15H                chnl_EfVolSlide	equ 15h
(2) 2630/     F8A : =16H                chnl_EfNewVol	equ 16h
(2) 2631/     F8A : =17H                chnl_EfPortam	equ 17h		; word
(2) 2632/     F8A : =19H                chnl_EfNewFreq	equ 19h		; word
(2) 2633/     F8A : =1BH                chnl_PsgOutFreq	equ 1Bh		; word
(2) 2634/     F8A :                     
(2) 2635/     F8A :                     SndBuff_ChnlBuff_1:
(2) 2636/     F8A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2637/     F92 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2638/     F9A : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2639/     FA2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2640/     FAA :                     		
(2) 2641/     FAA : 01 00 00 00 00 00   		db 01h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2642/     FB2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2643/     FBA : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2644/     FC2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2645/     FCA :                     
(2) 2646/     FCA : 04 00 00 00 00 00   		db 04h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2647/     FD2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2648/     FDA : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2649/     FE2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2650/     FEA :                     
(2) 2651/     FEA : 05 00 00 00 00 00   		db 05h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2652/     FF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2653/     FFA : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2654/    1002 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2655/    100A :                     		
(2) 2656/    100A : 02 00 00 00 00 00   		db 02h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2657/    1012 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2658/    101A : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2659/    1022 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2660/    102A :                     
(2) 2661/    102A : 06 00 00 00 00 00   		db 06h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2662/    1032 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2663/    103A : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2664/    1042 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2665/    104A :                     
(2) 2666/    104A :                     ; SndBuff_ChnlPsg_1:
(2) 2667/    104A : 80 00 00 00 00 00   		db 80h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2668/    1052 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2669/    105A : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2670/    1062 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2671/    106A :                     
(2) 2672/    106A : A0 00 00 00 00 00   		db 0A0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2673/    1072 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2674/    107A : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2675/    1082 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2676/    108A :                     
(2) 2677/    108A : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2678/    1092 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2679/    109A : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2680/    10A2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2681/    10AA :                     
(2) 2682/    10AA : E0 00 00 00 00 00   		db 0E0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2683/    10B2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2684/    10BA : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2685/    10C2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2686/    10CA :                     
(2) 2687/    10CA :                     		
(2) 2688/    10CA :                     SndBuff_ChnlBuff_2:
(2) 2689/    10CA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2690/    10D2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2691/    10DA : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2692/    10E2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2693/    10EA :                     		
(2) 2694/    10EA : 01 00 00 00 00 00   		db 01h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2695/    10F2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2696/    10FA : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2697/    1102 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2698/    110A :                     
(2) 2699/    110A : 04 00 00 00 00 00   		db 04h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2700/    1112 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2701/    111A : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2702/    1122 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2703/    112A :                     
(2) 2704/    112A : 05 00 00 00 00 00   		db 05h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2705/    1132 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2706/    113A : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2707/    1142 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2708/    114A :                     		
(2) 2709/    114A : 02 00 00 00 00 00   		db 02h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2710/    1152 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2711/    115A : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2712/    1162 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2713/    116A :                     
(2) 2714/    116A : 06 00 00 00 00 00   		db 06h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2715/    1172 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2716/    117A : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2717/    1182 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2718/    118A :                     
(2) 2719/    118A :                     ; SndBuff_ChnlPsg_2:
(2) 2720/    118A : 80 00 00 00 00 00   		db 80h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2721/    1192 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2722/    119A : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2723/    11A2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2724/    11AA :                     
(2) 2725/    11AA : A0 00 00 00 00 00   		db 0A0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2726/    11B2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2727/    11BA : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2728/    11C2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2729/    11CA :                     
(2) 2730/    11CA : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2731/    11D2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2732/    11DA : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2733/    11E2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2734/    11EA :                     
(2) 2735/    11EA : E0 00 00 00 00 00   		db 0E0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2736/    11F2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2737/    11FA : C0 00 00 00 00 00   		db 0C0h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2738/    1202 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 2739/    120A :                     
(2) 2740/    120A :                     SndBuff_UsedChnls:
(2) 2741/    120A :                     		ds MAX_CHNLS
(2) 2742/    1214 :                     SndBuff_UsedChnls_2:
(2) 2743/    1214 :                     		ds MAX_CHNLS
(2) 2744/    121E :                     SndBuff_StrmRom:
(2) 2745/    121E :                     		ds 100h
(2) 2746/    131E :                     		
(2) 2747/    131E :                     ; ====================================================================
(2) 2748/    131E :                     ; ----------------------------------------------------------------
(2) 2749/    131E :                     ; MUSIC DATA
(2) 2750/    131E :                     ; ----------------------------------------------------------------
(2) 2751/    131E :                     
(2) 2752/    131E :                     SfxData_Blk:
(2) 2753/    131E :                     		binclude "game/sound/music/sfxdata_blk.bin"		; BLOCKS data
(2) 2754/    1324 :                     SfxData_Pat:
(2) 2755/    1324 :                     		binclude "game/sound/music/sfxdata_patt.bin"		; PATTERN data
(2) 2756/    1425 :                     SfxData_Ins:
(2) 2757/    1425 : 00 00               		db 0,0
(2) 2758/    1427 : 70 14               		dw FmInsSfx_Punch
(2) 2759/    1429 : 00 00               		db 0,0
(2) 2760/    142B : 90 14               		dw FmInsSfx_Smash
(2) 2761/    142D : 00 00               		db 0,0
(2) 2762/    142F : B0 14               		dw FmInsSfx_BellWave
(2) 2763/    1431 : 80 00               		db 80h,0
(2) 2764/    1433 : 37 14               		dw PsgIns_01
(2) 2765/    1435 :                     
(2) 2766/    1435 :                     ; ----------------------------------------------------
(2) 2767/    1435 :                     ; PSG Instruments
(2) 2768/    1435 :                     ; ----------------------------------------------------
(2) 2769/    1435 :                     
(2) 2770/    1435 : 00                  PsgIns_00:	db 0
(2) 2771/    1436 : FF                  		db -1
(2) 2772/    1437 : 00 02 04 05 06      PsgIns_01:	db 0,2,4,5,6
(2) 2773/    143C : FF                  		db -1
(2) 2774/    143D : 00 00 01 01 02 02   PsgIns_02:	db 0,0,1,1,2,2,3,3,3,3,4,4,4,6,6,6,8,8,15
                    03 03 03 03 04 04 
                    04 06 06 06 08 08 
                    0F 
(2) 2775/    1450 : FF                  		db -1
(2) 2776/    1451 : 00 00 01 01 02 02   PsgIns_03:	db 0,0,1,1,2,2,3,4,6,10,15
                    03 04 06 0A 0F 
(2) 2777/    145C : FF                  		db -1
(2) 2778/    145D : 00 00 00 04 04 04   PsgIns_04:	db 0,0,0,4,4,4,6,6,6,4,4,4,2,2,2,0
                    06 06 06 04 04 04 
                    02 02 02 00 
(2) 2779/    146D : FE 0F               		db -2,15
(2) 2780/    146F :                     		align 4
(2) 2781/    1470 :                     		
(2) 2782/    1470 :                     ; ----------------------------------------------------
(2) 2783/    1470 :                     ; FM Instruments
(2) 2784/    1470 :                     ; ----------------------------------------------------
(2) 2785/    1470 :                     
(2) 2786/    1470 :                     ; .gsx instruments; filename,$2478,$20 ($28 for FM3 instruments)
(2) 2787/    1470 :                     ; FmIns_Fm3_OpenHat:
(2) 2788/    1470 :                     ; 		binclude "game/sound/instr/fm/fm3_openhat.gsx",2478h,28h
(2) 2789/    1470 :                     ; FmIns_Fm3_ClosedHat:
(2) 2790/    1470 :                     ; 		binclude "game/sound/instr/fm/fm3_closedhat.gsx",2478h,28h
(2) 2791/    1470 :                     ; FmIns_DrumKick:
(2) 2792/    1470 :                     ; 		binclude "game/sound/instr/fm/drum_kick.gsx",2478h,20h		; Pitch: -36
(2) 2793/    1470 :                     ; FmIns_DrumSnare:
(2) 2794/    1470 :                     ; 		binclude "game/sound/instr/fm/drum_snare.gsx",2478h,20h		; Pitch: -54
(2) 2795/    1470 :                     ; FmIns_DrumCloseHat:
(2) 2796/    1470 :                     ; 		binclude "game/sound/instr/fm/drum_closehat.gsx",2478h,20h
(2) 2797/    1470 :                     ; FmIns_Piano_m1:
(2) 2798/    1470 :                     ; 		binclude "game/sound/instr/fm/piano_m1.gsx",2478h,20h
(2) 2799/    1470 :                     ; FmIns_Bass_gum:
(2) 2800/    1470 :                     ; 		binclude "game/sound/instr/fm/bass_gum.gsx",2478h,20h
(2) 2801/    1470 :                     ; FmIns_Bass_calm:
(2) 2802/    1470 :                     ; 		binclude "game/sound/instr/fm/bass_calm.gsx",2478h,20h
(2) 2803/    1470 :                     ; FmIns_Bass_heavy:
(2) 2804/    1470 :                     ; 		binclude "game/sound/instr/fm/bass_heavy.gsx",2478h,20h
(2) 2805/    1470 :                     ; FmIns_Bass_ambient:
(2) 2806/    1470 :                     ; 		binclude "game/sound/instr/fm/bass_ambient.gsx",2478h,20h
(2) 2807/    1470 :                     ; FmIns_Brass_gummy:
(2) 2808/    1470 :                     ; 		binclude "game/sound/instr/fm/brass_gummy.gsx",2478h,20h
(2) 2809/    1470 :                     ; FmIns_Flaute_1:
(2) 2810/    1470 :                     ; 		binclude "game/sound/instr/fm/flaute_1.gsx",2478h,20h
(2) 2811/    1470 :                     ; FmIns_Bass_2:
(2) 2812/    1470 :                     ; 		binclude "game/sound/instr/fm/bass_2.gsx",2478h,20h
(2) 2813/    1470 :                     ; FmIns_Bass_3:
(2) 2814/    1470 :                     ; 		binclude "game/sound/instr/fm/bass_3.gsx",2478h,20h
(2) 2815/    1470 :                     ; FmIns_Bass_5:
(2) 2816/    1470 :                     ; 		binclude "game/sound/instr/fm/bass_5.gsx",2478h,20h
(2) 2817/    1470 :                     ; FmIns_Bass_synth:
(2) 2818/    1470 :                     ; 		binclude "game/sound/instr/fm/bass_synth_1.gsx",2478h,20h
(2) 2819/    1470 :                     ; FmIns_Guitar_1:
(2) 2820/    1470 :                     ; 		binclude "game/sound/instr/fm/guitar_1.gsx",2478h,20h
(2) 2821/    1470 :                     ; FmIns_Horn_1:
(2) 2822/    1470 :                     ; 		binclude "game/sound/instr/fm/horn_1.gsx",2478h,20h
(2) 2823/    1470 :                     ; FmIns_Organ_M1:
(2) 2824/    1470 :                     ; 		binclude "game/sound/instr/fm/organ_m1.gsx",2478h,20h
(2) 2825/    1470 :                     ; FmIns_Bass_Beach:
(2) 2826/    1470 :                     ; 		binclude "game/sound/instr/fm/bass_beach.gsx",2478h,20h
(2) 2827/    1470 :                     ; FmIns_Bass_Beach_2:
(2) 2828/    1470 :                     ; 		binclude "game/sound/instr/fm/bass_beach_2.gsx",2478h,20h
(2) 2829/    1470 :                     ; FmIns_Brass_Cave:
(2) 2830/    1470 :                     ; 		binclude "game/sound/instr/fm/brass_cave.gsx",2478h,20h
(2) 2831/    1470 :                     ; FmIns_Piano_Small:
(2) 2832/    1470 :                     ; 		binclude "game/sound/instr/fm/piano_small.gsx",2478h,20h
(2) 2833/    1470 :                     ; FmIns_Trumpet_2:
(2) 2834/    1470 :                     ; 		binclude "game/sound/instr/fm/trumpet_2.gsx",2478h,20h
(2) 2835/    1470 :                     ; FmIns_Bell_Glass:
(2) 2836/    1470 :                     ; 		binclude "game/sound/instr/fm/bell_glass.gsx",2478h,20h
(2) 2837/    1470 :                     ; FmIns_Marimba_1:
(2) 2838/    1470 :                     ; 		binclude "game/sound/instr/fm/marimba_1.gsx",2478h,20h
(2) 2839/    1470 :                     ; FmIns_Ambient_dark:
(2) 2840/    1470 :                     ; 		binclude "game/sound/instr/fm/ambient_dark.gsx",2478h,20h
(2) 2841/    1470 :                     ; FmIns_Ambient_spook:
(2) 2842/    1470 :                     ; 		binclude "game/sound/instr/fm/ambient_spook.gsx",2478h,20h
(2) 2843/    1470 :                     ; FmIns_Ding_toy:
(2) 2844/    1470 :                     ; 		binclude "game/sound/instr/fm/ding_toy.gsx",2478h,20h
(2) 2845/    1470 :                     
(2) 2846/    1470 :                     FmInsSfx_Punch:
(2) 2847/    1470 :                     		binclude "game/sound/instr/fm/fminssfx_punch.gsx",2478h,20h
(2) 2848/    1490 :                     FmInsSfx_Smash:
(2) 2849/    1490 :                     		binclude "game/sound/instr/fm/fminssfx_smash.gsx",2478h,20h
(2) 2850/    14B0 :                     FmInsSfx_BellWave:
(2) 2851/    14B0 :                     		binclude "game/sound/instr/fm/fmins_bellwave.gsx",2478h,20h
(2) 2852/    14D0 :                     
(1)  202/    14D0 :                     		
(1)  203/    14D0 :                     ; ====================================================================
(1)  204/    14D0 :                     
(1)  205/    14D0 :                     		cpu 68000
(1)  206/    14D0 :                     		padding off
(1)  207/    18D0 :                     		phase Z80_CODE+*
(1)  208/    18D0 :                     Z80_CODE_END:
(1)  209/    18D0 :                     		align 2
(1)  210/    18D0 :                     
(1)  211/    18D0 :                     ; ====================================================================
(1)  212/    18D0 :                     ; ----------------------------------------------------------------
(1)  213/    18D0 :                     ; Sound data goes here
(1)  214/    18D0 :                     ; ----------------------------------------------------------------
(1)  215/    18D0 :                     
      41/    18D0 :                     		include "system/md/video.asm"		; Video
(1)    1/    18D0 :                     ; ====================================================================
(1)    2/    18D0 :                     ; ----------------------------------------------------------------
(1)    3/    18D0 :                     ; MD Video
(1)    4/    18D0 :                     ; ----------------------------------------------------------------
(1)    5/    18D0 :                     
(1)    6/    18D0 :                     ; --------------------------------------------------------
(1)    7/    18D0 :                     ; Init Video
(1)    8/    18D0 :                     ; 
(1)    9/    18D0 :                     ; Uses:
(1)   10/    18D0 :                     ; a0-a2,d0-d1
(1)   11/    18D0 :                     ; --------------------------------------------------------
(1)   12/    18D0 :                     
(1)   13/    18D0 :                     Video_Init:
(1)   14/    18D0 : 41FA 076A           		lea	list_vdpregs(pc),a0	; a0 - Input data for default register data
(1)   15/    18D4 : 43F8 A87C           		lea	(RAM_VdpCache),a1	; a1 - Ouptut register bytes for fast access
(1)   16/    18D8 : 45F9 00C0 0004      		lea	(vdp_ctrl),a2		; a2 - VDP control port
(1)   17/    18DE : 303C 8000           		move.w	#$8000,d0		; d0 - $8000, start at first register
(1)   18/    18E2 : 7212                		moveq	#19-1,d1		; d1 - 19 registers, minus 1
(1)   19/    18E4 :                     .loop:
(1)   20/    18E4 : 1018                		move.b	(a0)+,d0		; Grab BYTE from the list, d0 = $8?xx, increment
(1)   21/    18E6 : 12C0                		move.b	d0,(a1)+		; Write BYTE $00xx to RAM, increment
(1)   22/    18E8 : 3480                		move.w	d0,(a2)			; Write WORD $xxxx register to control port
(1)   23/    18EA : D07C 0100           		add.w	#$100,d0		; next register, d0 += 0x0100
(1)   24/    18EE : 51C9 FFF4           		dbf	d1,.loop		; loop until d1 == 0
(1)   25/    18F2 : 3012                .wait:		move.w	(a2),d0
(1)   26/    18F4 : 0800 0003           		btst	#bitVBlnk,d0
(1)   27/    18F8 : 67F8                		beq.s	.wait
(1)   28/    18FA : 43F9 00C0 0000      		lea	(vdp_data),a1
(1)   29/    1900 : 24BC C000 0000      		move.l	#$C0000000,(a2)
(1)   30/    1906 : 7000                		moveq	#0,d0
(1)   31/    1908 : 323C 001F           		move.w	#(64/2)-1,d1
(1)   32/    190C :                     .write:
(1)   33/    190C : 2280                		move.l	d0,(a1)
(1)   34/    190E : 51C9 FFFC           		dbf	d1,.write
(1)   35/    1912 : 303C 0000           		move.w	#0,d0			; Clear almost all of VRAM
(1)   36/    1916 : 323C FFE0           		move.w	#$7FF*$20,d1
(1)   37/    191A : 343C 0001           		move.w	#1,d2
(1)   38/    191E : 6000 058E           		bra	Video_Fill
(1)   39/    1922 :                     		
(1)   40/    1922 :                     ; --------------------------------------------------------
(1)   41/    1922 :                     ; Video_InitPrint
(1)   42/    1922 :                     ; 
(1)   43/    1922 :                     ; Call this before using any on-screen text print
(1)   44/    1922 :                     ; 
(1)   45/    1922 :                     ; Graphics will be located at $5A0
(1)   46/    1922 :                     ; (ASCII starts at $580)
(1)   47/    1922 :                     ; Uses palette line 4
(1)   48/    1922 :                     ; 
(1)   49/    1922 :                     ; Uses:
(1)   50/    1922 :                     ; a0-a2,d0-d1
(1)   51/    1922 :                     ; --------------------------------------------------------
(1)   52/    1922 :                     
(1)   53/    1922 :                     Video_InitPrint:
(1)   54/    1922 : 31FC 6580 A87A      		move.w	#$580|$6000,(RAM_VidPrntVram).w	; VRAM | Palette 4
(1)   55/    1928 :                     ; 		move.w	#0,(RAM_VidPrntVram).w		; VRAM | Palette 4
(1)   56/    1928 : 203C 0000 2050      		move.l	#Art_PrintFont,d0
(1)   57/    192E : 323C 0C00           		move.w	#(Art_PrintFont_e-Art_PrintFont),d1
(1)   58/    1932 : 343C 05A0           		move.w	#$580+$20,d2
(1)   59/    1936 : 6100 0670           		bsr	Video_LoadArt
(1)   60/    193A : 41FA 1314           		lea	Pal_PrintFont(pc),a0
(1)   61/    193E : 7030                		moveq	#$30,d0
(1)   62/    1940 : 323C 0004           		move.w	#4,d1
(1)   63/    1944 : 6000 00DA           		bra	Video_LoadPal
(1)   64/    1948 :                     		
(1)   65/    1948 :                     ; ====================================================================
(1)   66/    1948 :                     ; ----------------------------------------------------------------
(1)   67/    1948 :                     ; Video subroutines
(1)   68/    1948 :                     ; ----------------------------------------------------------------
(1)   69/    1948 :                     
(1)   70/    1948 :                     ; ---------------------------------
(1)   71/    1948 :                     ; Video_Update
(1)   72/    1948 :                     ; 
(1)   73/    1948 :                     ; Update registers from cache
(1)   74/    1948 :                     ; to VDP
(1)   75/    1948 :                     ; 
(1)   76/    1948 :                     ; Uses:
(1)   77/    1948 :                     ; d4-d5,a4-a5
(1)   78/    1948 :                     ; ---------------------------------
(1)   79/    1948 :                     
(1)   80/    1948 :                     Video_Update:
(1)   81/    1948 : 49F8 A87C           		lea	(RAM_VdpCache).w,a4
(1)   82/    194C : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)   83/    1952 : 383C 8000           		move.w	#$8000,d4
(1)   84/    1956 : 3A3C 0010           		move.w	#17-1,d5
(1)   85/    195A :                     .loop:
(1)   86/    195A : 181C                		move.b	(a4)+,d4
(1)   87/    195C : 3A84                		move.w	d4,(a5)
(1)   88/    195E : D87C 0100           		add.w	#$100,d4
(1)   89/    1962 : 51CD FFF6           		dbf	d5,.loop
(1)   90/    1966 :                     .exit:
(1)   91/    1966 : 4E75                		rts
(1)   92/    1968 :                     
(1)   93/    1968 :                     ; --------------------------------------------------------
(1)   94/    1968 :                     ; Video_Clear
(1)   95/    1968 :                     ; 
(1)   96/    1968 :                     ; Clear background layers
(1)   97/    1968 :                     ; --------------------------------------------------------
(1)   98/    1968 :                     
(1)   99/    1968 :                     Video_Clear:
(1)  100/    1968 : 7C00                		moveq	#0,d6
(1)  101/    196A : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  102/    1970 : 1C38 A889           		move.b	(RAM_VdpCache+$0D).w,d6
(1)  103/    1974 : CC7C 003F           		and.w	#$3F,d6
(1)  104/    1978 : 3A06                		move.w	d6,d5
(1)  105/    197A : E14D                		lsl.w	#8,d5
(1)  106/    197C : E54D                		lsl.w	#2,d5
(1)  107/    197E : CA7C 3FFF           		and.w	#$3FFF,d5
(1)  108/    1982 : 8A7C 4000           		or.w	#$4000,d5
(1)  109/    1986 : 4845                		swap	d5
(1)  110/    1988 : E84E                		lsr.w	#4,d6
(1)  111/    198A : 8C85                		or.l	d5,d6
(1)  112/    198C : 7A00                		moveq	#0,d5
(1)  113/    198E : 2D46 0004           		move.l	d6,4(a6)
(1)  114/    1992 : 3A3C 0037           		move.w	#(224/4)-1,d5
(1)  115/    1996 :                     .xloop:
(1)  116/    1996 : 2CBC 0000 0000      		move.l	#0,(a6)
(1)  117/    199C : 51CD FFF8           		dbf	d5,.xloop
(1)  118/    19A0 : 3A3C 0013           		move.w	#(320/16)-1,d5
(1)  119/    19A4 : 2D7C 4000 0010 0004 		move.l	#$40000010,4(a6)
(1)  120/    19AC :                     .yloop:
(1)  121/    19AC : 2CBC 0000 0000      		move.l	#0,(a6)				; Y scroll value(s)
(1)  122/    19B2 : 51CD FFF8           		dbf	d5,.yloop
(1)  123/    19B6 :                     
(1)  124/    19B6 : 7000                		moveq	#0,d0
(1)  125/    19B8 : 323C 07FF           		move.w	#$7FF,d1
(1)  126/    19BC : 1439 FFFF A881      		move.b	(RAM_VdpCache+5).l,d2		; Sprites
(1)  127/    19C2 : 0242 007F           		andi.w	#%1111111,d2
(1)  128/    19C6 : E14A                		lsl.w	#8,d2
(1)  129/    19C8 : E34A                		lsl.w	#1,d2
(1)  130/    19CA : 6100 04E2           		bsr	Video_Fill
(1)  131/    19CE :                     		
(1)  132/    19CE : 6100 04A2           		bsr	vid_PickSize
(1)  133/    19D2 : 3204                		move.w	d4,d1
(1)  134/    19D4 : D241                		add.w	d1,d1
(1)  135/    19D6 : 1439 FFFF A87E      		move.b	(RAM_VdpCache+2).l,d2		; FG
(1)  136/    19DC : 0242 0038           		andi.w	#%111000,d2
(1)  137/    19E0 : E14A                		lsl.w	#8,d2
(1)  138/    19E2 : E54A                		lsl.w	#2,d2
(1)  139/    19E4 : 6100 04C8           		bsr	Video_Fill
(1)  140/    19E8 : 1439 FFFF A880      		move.b	(RAM_VdpCache+4).l,d2		; BG
(1)  141/    19EE : 0242 0007           		andi.w	#%000111,d2
(1)  142/    19F2 : E14A                		lsl.w	#8,d2
(1)  143/    19F4 : EB4A                		lsl.w	#5,d2
(1)  144/    19F6 : 6100 04B6           		bsr	Video_Fill
(1)  145/    19FA : 323C 07FF           		move.w	#$7FF,d1			; WD Size
(1)  146/    19FE : 1439 FFFF A888      		move.b	(RAM_VdpCache+$C).l,d2
(1)  147/    1A04 : C47C 0081           		and.w	#%10000001,d2
(1)  148/    1A08 : 6704                		beq.s	.smlwdw
(1)  149/    1A0A : 323C 0FFF           		move.w	#$FFF,d1
(1)  150/    1A0E :                     .smlwdw:
(1)  151/    1A0E : 1439 FFFF A87F      		move.b	(RAM_VdpCache+3).l,d2		; Window
(1)  152/    1A14 : 0242 003E           		andi.w	#%111110,d2
(1)  153/    1A18 : E14A                		lsl.w	#8,d2
(1)  154/    1A1A : E54A                		lsl.w	#2,d2
(1)  155/    1A1C : 6000 0490           		bra	Video_Fill
(1)  156/    1A20 :                     
(1)  157/    1A20 :                     ; --------------------------------------------------------
(1)  158/    1A20 :                     ; Video_LoadPal
(1)  159/    1A20 :                     ; 
(1)  160/    1A20 :                     ; Load palette to VDP
(1)  161/    1A20 :                     ; 
(1)  162/    1A20 :                     ; NOTE: Color dots will be shown on screen
(1)  163/    1A20 :                     ; 
(1)  164/    1A20 :                     ; Input:
(1)  165/    1A20 :                     ; a0 - Palette data
(1)  166/    1A20 :                     ; d0 - Start position
(1)  167/    1A20 :                     ; d1 - Number of colors - 1
(1)  168/    1A20 :                     ; 
(1)  169/    1A20 :                     ; Uses:
(1)  170/    1A20 :                     ; a4,d4
(1)  171/    1A20 :                     ; --------------------------------------------------------
(1)  172/    1A20 :                     
(1)  173/    1A20 :                     Video_LoadPal:
(1)  174/    1A20 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  175/    1A26 : 7800                		moveq	#0,d4
(1)  176/    1A28 : 3800                		move.w	d0,d4
(1)  177/    1A2A : D844                		add.w	d4,d4
(1)  178/    1A2C : 0044 C000           		ori.w	#$C000,d4
(1)  179/    1A30 : 4844                		swap	d4
(1)  180/    1A32 : 2944 0004           		move.l	d4,4(a4)
(1)  181/    1A36 : 3801                		move.w	d1,d4
(1)  182/    1A38 :                     .loop:
(1)  183/    1A38 : 3898                		move.w	(a0)+,(a4)
(1)  184/    1A3A : 51CC FFFC           		dbf	d4,.loop
(1)  185/    1A3E : 4E75                		rts
(1)  186/    1A40 :                     
(1)  187/    1A40 :                     ; --------------------------------------------------------
(1)  188/    1A40 :                     ; Video_LoadPal_Fade
(1)  189/    1A40 :                     ; 
(1)  190/    1A40 :                     ; Load palette to cache fadein/fadeout
(1)  191/    1A40 :                     ; 
(1)  192/    1A40 :                     ; Input:
(1)  193/    1A40 :                     ; a0 - Palette data
(1)  194/    1A40 :                     ; d0 - Start position
(1)  195/    1A40 :                     ; d1 - Number of colors - 1
(1)  196/    1A40 :                     ; 
(1)  197/    1A40 :                     ; Uses:
(1)  198/    1A40 :                     ; a4,d4
(1)  199/    1A40 :                     ; --------------------------------------------------------
(1)  200/    1A40 :                     
(1)  201/    1A40 :                     Video_LoadPal_Fade:
(1)  202/    1A40 : 49F8 A71A           		lea	(RAM_FadeBuff),a4
(1)  203/    1A44 : 7800                		moveq	#0,d4
(1)  204/    1A46 : 3800                		move.w	d0,d4
(1)  205/    1A48 : D844                		add.w	d4,d4
(1)  206/    1A4A : D8C4                		adda	d4,a4
(1)  207/    1A4C : 3801                		move.w	d1,d4
(1)  208/    1A4E :                     .loop:
(1)  209/    1A4E : 38D8                		move.w	(a0)+,(a4)+
(1)  210/    1A50 : 51CC FFFC           		dbf	d4,.loop
(1)  211/    1A54 : 4E75                		rts
(1)  212/    1A56 :                     
(1)  213/    1A56 :                     ; --------------------------------------------------------
(1)  214/    1A56 :                     ; Video_FadePal_In
(1)  215/    1A56 :                     ; Fade in palette from target palette
(1)  216/    1A56 :                     ; 
(1)  217/    1A56 :                     ; NOTE: Color dots will be shown on screen
(1)  218/    1A56 :                     ; 
(1)  219/    1A56 :                     ; Input:
(1)  220/    1A56 :                     ; d0 - Start from
(1)  221/    1A56 :                     ; d1 - Length
(1)  222/    1A56 :                     ; d2 - Delay
(1)  223/    1A56 :                     ;
(1)  224/    1A56 :                     ; Output:
(1)  225/    1A56 :                     ; d4 - Finish flag
(1)  226/    1A56 :                     ;
(1)  227/    1A56 :                     ; Uses:
(1)  228/    1A56 :                     ; a4-a5,d4
(1)  229/    1A56 :                     ; 
(1)  230/    1A56 :                     ; NOTES:
(1)  231/    1A56 :                     ; Use DMA externally to transfer the output
(1)  232/    1A56 :                     ; result:
(1)  233/    1A56 :                     ; 	lea	(vdp_ctrl),a6
(1)  234/    1A56 :                     ; 	move.l	#$94009340,(a6)
(1)  235/    1A56 :                     ; 	move.l	#$96009500|(RAM_FadeTarget<<7&$FF0000)+(RAM_FadeTarget>>1&$FF),(a6)
(1)  236/    1A56 :                     ; 	move.w	#$9700|(RAM_FadeTarget>>17&$7F),(a6)
(1)  237/    1A56 :                     ; 	move.w	#$C000,(a6)
(1)  238/    1A56 :                     ; 	move.w	#$0000|$80,-(sp)
(1)  239/    1A56 :                     ; 	move.w	(sp)+,(a6)
(1)  240/    1A56 :                     ; --------------------------------------------------------
(1)  241/    1A56 :                     
(1)  242/    1A56 :                     Video_PalFade_In:
(1)  243/    1A56 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  244/    1A5C : 610E                		bsr.s	.do_it
(1)  245/    1A5E : 3A16                .wait:		move.w	(a6),d5
(1)  246/    1A60 : 0805 0003           		btst	#bitVBlnk,d5
(1)  247/    1A64 : 67F8                		beq.s	.wait
(1)  248/    1A66 : 4A44                		tst.w	d4
(1)  249/    1A68 : 66EC                		bne.s	Video_PalFade_In
(1)  250/    1A6A : 4E75                		rts
(1)  251/    1A6C :                     .do_it:
(1)  252/    1A6C : 383C FFFF           		move.w	#-1,d4
(1)  253/    1A70 : 0478 0001 A718      		sub.w	#1,(RAM_FadeTimer).w
(1)  254/    1A76 : 6A6E                		bpl	.timer
(1)  255/    1A78 : 31C2 A718           		move.w	d2,(RAM_FadeTimer).w
(1)  256/    1A7C : 49F8 A71A           		lea	(RAM_FadeBuff),a4
(1)  257/    1A80 : 4BF8 A79A           		lea	(RAM_FadeTarget),a5
(1)  258/    1A84 : 7A00                		moveq	#0,d5
(1)  259/    1A86 : 3A00                		move.w	d0,d5
(1)  260/    1A88 : 3E01                		move.w	d1,d7
(1)  261/    1A8A : 3807                		move.w	d7,d4
(1)  262/    1A8C : 9E7C 0001           		sub.w	#1,d7
(1)  263/    1A90 :                     .loop:
(1)  264/    1A90 : 3A14                		move.w	(a4),d5
(1)  265/    1A92 : 3C15                		move.w	(a5),d6
(1)  266/    1A94 : BC45                		cmp.w	d5,d6
(1)  267/    1A96 : 6606                		bne.s	.exct
(1)  268/    1A98 : 987C 0001           		sub.w	#1,d4
(1)  269/    1A9C : 6038                		bra.s	.lwr_grn
(1)  270/    1A9E :                     .exct:
(1)  271/    1A9E : CA7C 000E           		and.w	#$00E,d5
(1)  272/    1AA2 : CC7C 000E           		and.w	#$00E,d6
(1)  273/    1AA6 : BA46                		cmp.w	d6,d5
(1)  274/    1AA8 : 6704                		beq.s	.lwr_red
(1)  275/    1AAA : 0655 0002           		add.w	#$002,(a5)
(1)  276/    1AAE :                     .lwr_red:
(1)  277/    1AAE : 3A14                		move.w	(a4),d5
(1)  278/    1AB0 : 3C15                		move.w	(a5),d6
(1)  279/    1AB2 : CA7C 00E0           		and.w	#$0E0,d5
(1)  280/    1AB6 : CC7C 00E0           		and.w	#$0E0,d6
(1)  281/    1ABA : BA46                		cmp.w	d6,d5
(1)  282/    1ABC : 6704                		beq.s	.lwr_blu
(1)  283/    1ABE : 0655 0020           		add.w	#$020,(a5)
(1)  284/    1AC2 :                     .lwr_blu:
(1)  285/    1AC2 : 3A14                		move.w	(a4),d5
(1)  286/    1AC4 : 3C15                		move.w	(a5),d6
(1)  287/    1AC6 : CA7C 0E00           		and.w	#$E00,d5
(1)  288/    1ACA : CC7C 0E00           		and.w	#$E00,d6
(1)  289/    1ACE : BA46                		cmp.w	d6,d5
(1)  290/    1AD0 : 6704                		beq.s	.lwr_grn
(1)  291/    1AD2 : 0655 0200           		add.w	#$200,(a5)
(1)  292/    1AD6 :                     .lwr_grn:
(1)  293/    1AD6 : 0255 0EEE           		and.w	#$EEE,(a5)
(1)  294/    1ADA : D8FC 0002           		adda	#2,a4
(1)  295/    1ADE : DAFC 0002           		adda	#2,a5
(1)  296/    1AE2 : 51CF FFAC           		dbf	d7,.loop
(1)  297/    1AE6 :                     .timer:
(1)  298/    1AE6 : 4E75                		rts
(1)  299/    1AE8 :                     
(1)  300/    1AE8 :                     ; --------------------------------------------------------
(1)  301/    1AE8 :                     ; Video_FadePal_In
(1)  302/    1AE8 :                     ; Fade out palette to black
(1)  303/    1AE8 :                     ; 
(1)  304/    1AE8 :                     ; NOTE: Color dots will be shown on screen
(1)  305/    1AE8 :                     ; 
(1)  306/    1AE8 :                     ; Input:
(1)  307/    1AE8 :                     ; d0 - Start from
(1)  308/    1AE8 :                     ; d1 - Length
(1)  309/    1AE8 :                     ; d2 - Delay
(1)  310/    1AE8 :                     ;
(1)  311/    1AE8 :                     ; Output:
(1)  312/    1AE8 :                     ; d4 - Finish flag
(1)  313/    1AE8 :                     ;
(1)  314/    1AE8 :                     ; Uses:
(1)  315/    1AE8 :                     ; a4-a5,d4
(1)  316/    1AE8 :                     ; --------------------------------------------------------
(1)  317/    1AE8 :                     
(1)  318/    1AE8 :                     Video_PalFade_Out:
(1)  319/    1AE8 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  320/    1AEE : 6146                		bsr.s	.do_it
(1)  321/    1AF0 : 3A16                .wait:		move.w	(a6),d5
(1)  322/    1AF2 : 0805 0003           		btst	#bitVBlnk,d5
(1)  323/    1AF6 : 67F8                		beq.s	.wait
(1)  324/    1AF8 : B478 A718           		cmp.w	(RAM_FadeTimer).w,d2
(1)  325/    1AFC : 6632                		bne.s	.lowr
(1)  326/    1AFE : 3A3C 8100           		move.w	#$8100,d5
(1)  327/    1B02 : 1A38 A87D           		move.b	(RAM_VdpCache+1).w,d5
(1)  328/    1B06 : 08C5 0004           		bset	#4,d5
(1)  329/    1B0A : 3C85                		move.w	d5,(a6)
(1)  330/    1B0C : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  331/    1B12 : 2CBC 96D3 95CD      		move.l	#$96009500|(RAM_FadeTarget<<7&$FF0000)+(RAM_FadeTarget>>1&$FF),(a6)
(1)  332/    1B18 : 3CBC 977F           		move.w	#$9700|(RAM_FadeTarget>>17&$7F),(a6)
(1)  333/    1B1C : 3CBC C000           		move.w	#$C000,(a6)
(1)  334/    1B20 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  335/    1B24 : 3C9F                		move.w	(sp)+,(a6)
(1)  336/    1B26 : 3A3C 8100           		move.w	#$8100,d5
(1)  337/    1B2A : 1A38 A87D           		move.b	(RAM_VdpCache+1).w,d5
(1)  338/    1B2E : 3C85                		move.w	d5,(a6)
(1)  339/    1B30 :                     .lowr:
(1)  340/    1B30 : 4A44                		tst.w	d4
(1)  341/    1B32 : 66B4                		bne.s	Video_PalFade_Out
(1)  342/    1B34 : 4E75                		rts
(1)  343/    1B36 :                     .do_it:
(1)  344/    1B36 : 383C FFFF           		move.w	#-1,d4
(1)  345/    1B3A : 0478 0001 A718      		sub.w	#1,(RAM_FadeTimer).w
(1)  346/    1B40 : 6A50                		bpl	.timer
(1)  347/    1B42 : 31C2 A718           		move.w	d2,(RAM_FadeTimer).w
(1)  348/    1B46 : 4BF8 A79A           		lea	(RAM_FadeTarget),a5
(1)  349/    1B4A : 7A00                		moveq	#0,d5
(1)  350/    1B4C : 3A00                		move.w	d0,d5
(1)  351/    1B4E : 3E01                		move.w	d1,d7
(1)  352/    1B50 : 3807                		move.w	d7,d4
(1)  353/    1B52 : 9E7C 0001           		sub.w	#1,d7
(1)  354/    1B56 :                     .loop:
(1)  355/    1B56 : 3C15                		move.w	(a5),d6
(1)  356/    1B58 : 6606                		bne.s	.exct
(1)  357/    1B5A : 987C 0001           		sub.w	#1,d4
(1)  358/    1B5E : 6022                		bra.s	.lwr_grn
(1)  359/    1B60 :                     .exct:
(1)  360/    1B60 : CC7C 000E           		and.w	#$00E,d6
(1)  361/    1B64 : 6704                		beq.s	.lwr_red
(1)  362/    1B66 : 0455 0002           		sub.w	#$002,(a5)
(1)  363/    1B6A :                     .lwr_red:
(1)  364/    1B6A : 3C15                		move.w	(a5),d6
(1)  365/    1B6C : CC7C 00E0           		and.w	#$0E0,d6
(1)  366/    1B70 : 6704                		beq.s	.lwr_blu
(1)  367/    1B72 : 0455 0020           		sub.w	#$020,(a5)
(1)  368/    1B76 :                     .lwr_blu:
(1)  369/    1B76 : 3C15                		move.w	(a5),d6
(1)  370/    1B78 : CC7C 0E00           		and.w	#$E00,d6
(1)  371/    1B7C : 6704                		beq.s	.lwr_grn
(1)  372/    1B7E : 0455 0200           		sub.w	#$200,(a5)
(1)  373/    1B82 :                     .lwr_grn:
(1)  374/    1B82 : 0255 0EEE           		and.w	#$EEE,(a5)
(1)  375/    1B86 : D8FC 0002           		adda	#2,a4
(1)  376/    1B8A : DAFC 0002           		adda	#2,a5
(1)  377/    1B8E : 51CF FFC6           		dbf	d7,.loop
(1)  378/    1B92 :                     .timer:
(1)  379/    1B92 : 4E75                		rts
(1)  380/    1B94 :                     
(1)  381/    1B94 :                     ; --------------------------------------------------------
(1)  382/    1B94 :                     ; Video_LoadMap
(1)  383/    1B94 :                     ; 
(1)  384/    1B94 :                     ; Load map data, Horizontal order
(1)  385/    1B94 :                     ; 
(1)  386/    1B94 :                     ; a0 - Map data
(1)  387/    1B94 :                     ; d0 | LONG - 00|Layer|X|Y, locate(lyr,x,y)
(1)  388/    1B94 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  389/    1B94 :                     ; d2 | WORD - VRAM
(1)  390/    1B94 :                     
(1)  391/    1B94 :                     ; Uses:
(1)  392/    1B94 :                     ; a4-a5,d4-d7
(1)  393/    1B94 :                     ; --------------------------------------------------------
(1)  394/    1B94 :                     
(1)  395/    1B94 :                     Video_LoadMap:
(1)  396/    1B94 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  397/    1B9A : 6100 023A           		bsr	vid_PickLayer
(1)  398/    1B9E :                     
(1)  399/    1B9E :                     ; d4 - VDP position result
(1)  400/    1B9E :                     ; d6 - next line
(1)  401/    1B9E :                     Video_LoadMap_Custom:
(1)  402/    1B9E : 3A01                		move.w	d1,d5
(1)  403/    1BA0 :                     .yloop:
(1)  404/    1BA0 : 4845                		swap	d5
(1)  405/    1BA2 : 2944 0004           		move.l	d4,4(a4)
(1)  406/    1BA6 : 2E01                		move.l	d1,d7
(1)  407/    1BA8 : 4847                		swap	d7
(1)  408/    1BAA :                     .xloop:
(1)  409/    1BAA : 3A18                		move.w	(a0)+,d5
(1)  410/    1BAC : BA7C FFFF           		cmp.w	#-1,d5
(1)  411/    1BB0 : 6606                		bne.s	.nonull
(1)  412/    1BB2 : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  413/    1BB6 : 6002                		bra.s	.cont
(1)  414/    1BB8 :                     .nonull:
(1)  415/    1BB8 : DA42                		add.w	d2,d5
(1)  416/    1BBA :                     .cont:
(1)  417/    1BBA :                     ; 		swap	d7
(1)  418/    1BBA :                     ; 		move.b	(RAM_VdpCache+$C).l,d7
(1)  419/    1BBA :                     ; 		and.w	#%110,d7
(1)  420/    1BBA :                     ; 		cmp.w	#%110,d7
(1)  421/    1BBA :                     ; 		bne.s	.nodble
(1)  422/    1BBA :                     ; 		move.w	d5,d7
(1)  423/    1BBA :                     ; 		lsr.w	#1,d7
(1)  424/    1BBA :                     ; 		and.w	#$7FF,d7
(1)  425/    1BBA :                     ; 		and.w	#$F800,d5
(1)  426/    1BBA :                     ; 		or.w	d7,d5
(1)  427/    1BBA :                     ; .nodble:
(1)  428/    1BBA :                     ; 		swap	d7
(1)  429/    1BBA : 3885                		move.w	d5,(a4)
(1)  430/    1BBC : 51CF FFEC           		dbf	d7,.xloop
(1)  431/    1BC0 : D886                		add.l	d6,d4
(1)  432/    1BC2 : 4845                		swap	d5
(1)  433/    1BC4 : 51CD FFDA           		dbf	d5,.yloop
(1)  434/    1BC8 : 4E75                		rts
(1)  435/    1BCA :                     
(1)  436/    1BCA :                     ; --------------------------------------------------------
(1)  437/    1BCA :                     ; Video_LoadMap_Vert
(1)  438/    1BCA :                     ; 
(1)  439/    1BCA :                     ; Load map data, Vertical order
(1)  440/    1BCA :                     ; 
(1)  441/    1BCA :                     ; a0 - Map data
(1)  442/    1BCA :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  443/    1BCA :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  444/    1BCA :                     ; d2 | WORD - VRAM
(1)  445/    1BCA :                     
(1)  446/    1BCA :                     ; Uses:
(1)  447/    1BCA :                     ; a4-a5,d4-d7
(1)  448/    1BCA :                     ; --------------------------------------------------------
(1)  449/    1BCA :                     
(1)  450/    1BCA :                     Video_LoadMap_Vert:
(1)  451/    1BCA : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  452/    1BD0 : 6100 0204           		bsr	vid_PickLayer
(1)  453/    1BD4 :                     		
(1)  454/    1BD4 :                     	; Start here
(1)  455/    1BD4 : 2A01                		move.l	d1,d5
(1)  456/    1BD6 : 4845                		swap	d5
(1)  457/    1BD8 :                     .xloop:
(1)  458/    1BD8 : 4845                		swap	d5
(1)  459/    1BDA : 2F04                		move.l	d4,-(sp)
(1)  460/    1BDC : 3E01                		move.w	d1,d7
(1)  461/    1BDE : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1)  462/    1BE6 : 6702                		beq.s	.yloop
(1)  463/    1BE8 : E24F                		lsr.w	#1,d7
(1)  464/    1BEA :                     .yloop:
(1)  465/    1BEA : 2944 0004           		move.l	d4,4(a4)
(1)  466/    1BEE : 3A10                		move.w	(a0),d5
(1)  467/    1BF0 : BA7C FFFF           		cmp.w	#-1,d5
(1)  468/    1BF4 : 661A                		bne.s	.nonull
(1)  469/    1BF6 : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  470/    1BFA : D0FC 0002           		adda	#2,a0
(1)  471/    1BFE : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1)  472/    1C06 : 672E                		beq.s	.contnull
(1)  473/    1C08 : E24D                		lsr.w	#1,d5
(1)  474/    1C0A : D0FC 0002           		adda	#2,a0
(1)  475/    1C0E : 6026                		bra.s	.contnull
(1)  476/    1C10 :                     .nonull:
(1)  477/    1C10 : DA42                		add.w	d2,d5
(1)  478/    1C12 : 4847                		swap	d7
(1)  479/    1C14 : D0FC 0002           		adda	#2,a0
(1)  480/    1C18 : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1)  481/    1C20 : 6712                		beq.s	.nodble
(1)  482/    1C22 : D0FC 0002           		adda	#2,a0
(1)  483/    1C26 : 3E05                		move.w	d5,d7
(1)  484/    1C28 : E24F                		lsr.w	#1,d7
(1)  485/    1C2A : CE7C 07FF           		and.w	#$7FF,d7
(1)  486/    1C2E : CA7C F800           		and.w	#$F800,d5
(1)  487/    1C32 : 8A47                		or.w	d7,d5
(1)  488/    1C34 :                     .nodble:
(1)  489/    1C34 : 4847                		swap	d7
(1)  490/    1C36 :                     .contnull:
(1)  491/    1C36 : 3885                		move.w	d5,(a4)
(1)  492/    1C38 : D886                		add.l	d6,d4
(1)  493/    1C3A : 51CF FFAE           		dbf	d7,.yloop
(1)  494/    1C3E :                     .outdbl:
(1)  495/    1C3E : 281F                		move.l	(sp)+,d4
(1)  496/    1C40 : D8BC 0002 0000      		add.l	#$20000,d4
(1)  497/    1C46 : 4845                		swap	d5
(1)  498/    1C48 : 51CD FF8E           		dbf	d5,.xloop
(1)  499/    1C4C : 4E75                		rts
(1)  500/    1C4E :                     		
(1)  501/    1C4E :                     ; --------------------------------------------------------
(1)  502/    1C4E :                     ; Video_AutoMap_Vert
(1)  503/    1C4E :                     ; 
(1)  504/    1C4E :                     ; Make automatic map, Vertical order
(1)  505/    1C4E :                     ; 
(1)  506/    1C4E :                     ; MCD: Use this to make a virtual screen
(1)  507/    1C4E :                     ; for Stamps
(1)  508/    1C4E :                     ; 
(1)  509/    1C4E :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  510/    1C4E :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  511/    1C4E :                     ; d2 | WORD - VRAM
(1)  512/    1C4E :                     
(1)  513/    1C4E :                     ; Uses:
(1)  514/    1C4E :                     ; a4-a5,d4-d7
(1)  515/    1C4E :                     ; --------------------------------------------------------
(1)  516/    1C4E :                     
(1)  517/    1C4E :                     ; TODO: support for double interlace
(1)  518/    1C4E :                     
(1)  519/    1C4E :                     Video_AutoMap_Vert:
(1)  520/    1C4E : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  521/    1C54 : 6100 0180           		bsr	vid_PickLayer
(1)  522/    1C58 :                     		
(1)  523/    1C58 :                     	; Start here
(1)  524/    1C58 : 3E02                		move.w	d2,d7
(1)  525/    1C5A : 2A01                		move.l	d1,d5
(1)  526/    1C5C : 4845                		swap	d5
(1)  527/    1C5E :                     .xloop:
(1)  528/    1C5E : 4845                		swap	d5
(1)  529/    1C60 : 2F04                		move.l	d4,-(sp)
(1)  530/    1C62 : 3A01                		move.w	d1,d5
(1)  531/    1C64 : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1)  532/    1C6C : 6702                		beq.s	.yloop
(1)  533/    1C6E : E24D                		lsr.w	#1,d5
(1)  534/    1C70 :                     .yloop:
(1)  535/    1C70 : 2944 0004           		move.l	d4,4(a4)
(1)  536/    1C74 : 3887                		move.w	d7,(a4)
(1)  537/    1C76 : DE7C 0001           		add.w	#1,d7
(1)  538/    1C7A : D886                		add.l	d6,d4
(1)  539/    1C7C : 51CD FFF2           		dbf	d5,.yloop
(1)  540/    1C80 :                     
(1)  541/    1C80 : 281F                		move.l	(sp)+,d4
(1)  542/    1C82 : D8BC 0002 0000      		add.l	#$20000,d4
(1)  543/    1C88 : 4845                		swap	d5
(1)  544/    1C8A : 51CD FFD2           		dbf	d5,.xloop
(1)  545/    1C8E : 4E75                		rts
(1)  546/    1C90 :                     		
(1)  547/    1C90 :                     ; --------------------------------------------------------
(1)  548/    1C90 :                     ; Video_Print
(1)  549/    1C90 :                     ; 
(1)  550/    1C90 :                     ; Prints string to layer
(1)  551/    1C90 :                     ; requires ASCII font
(1)  552/    1C90 :                     ; 
(1)  553/    1C90 :                     ; a0 - string data
(1)  554/    1C90 :                     ; d0 | LONG - 00|Lyr|X|Y, locate(lyr,x,y)
(1)  555/    1C90 :                     ; d1 | VRAM
(1)  556/    1C90 :                     ;
(1)  557/    1C90 :                     ; Notes:
(1)  558/    1C90 :                     ; "//b" - Show BYTE value
(1)  559/    1C90 :                     ; "//w" - Show WORD value
(1)  560/    1C90 :                     ; "//l" - Show LONG value
(1)  561/    1C90 :                     ;   $0A - Next line
(1)  562/    1C90 :                     ;   $00 - End of line
(1)  563/    1C90 :                     ; 
(1)  564/    1C90 :                     ; Uses:
(1)  565/    1C90 :                     ; a4-a6,d4-d7
(1)  566/    1C90 :                     ; --------------------------------------------------------
(1)  567/    1C90 :                     
(1)  568/    1C90 :                     Video_Print:
(1)  569/    1C90 : 48E7 1F00           		movem.l	d3-d7,-(sp)
(1)  570/    1C94 : 48E7 000E           		movem.l	a4-a6,-(sp)
(1)  571/    1C98 :                     
(1)  572/    1C98 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  573/    1C9E : 6100 0136           		bsr	vid_PickLayer
(1)  574/    1CA2 : 4BF8 A81A           		lea	(RAM_VidPrntList),a5
(1)  575/    1CA6 :                     .newjump:
(1)  576/    1CA6 : 2D44 0004           		move.l	d4,4(a6)
(1)  577/    1CAA : 2A04                		move.l	d4,d5
(1)  578/    1CAC :                     .loop:
(1)  579/    1CAC : 1E18                		move.b	(a0)+,d7
(1)  580/    1CAE : 6770                		beq	.exit
(1)  581/    1CB0 : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  582/    1CB4 : 6716                		beq.s	.next
(1)  583/    1CB6 : 0C07 005C           		cmpi.b	#$5C,d7			; $57 ("\") special?
(1)  584/    1CBA : 6714                		beq.s	.special
(1)  585/    1CBC : 0247 00FF           		andi.w	#$FF,d7
(1)  586/    1CC0 :                     .puttext:
(1)  587/    1CC0 :                     ; 		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  588/    1CC0 : DE41                		add.w	d1,d7
(1)  589/    1CC2 : 3C87                		move.w	d7,(a6)
(1)  590/    1CC4 : DABC 0002 0000      		add.l	#$20000,d5
(1)  591/    1CCA : 60E0                		bra.s	.loop
(1)  592/    1CCC :                     ; Next line
(1)  593/    1CCC :                     .next:
(1)  594/    1CCC : D886                		add.l	d6,d4
(1)  595/    1CCE : 60D6                		bra.s	.newjump
(1)  596/    1CD0 :                     
(1)  597/    1CD0 :                     ; Specials
(1)  598/    1CD0 :                     .special:
(1)  599/    1CD0 : 1E18                		move.b	(a0)+,d7
(1)  600/    1CD2 : 0C07 0062           		cmpi.b	#"b",d7
(1)  601/    1CD6 : 6712                		beq.s	.isbyte
(1)  602/    1CD8 : 0C07 0077           		cmpi.b	#"w",d7
(1)  603/    1CDC : 671E                		beq.s	.isword
(1)  604/    1CDE : 0C07 006C           		cmpi.b	#"l",d7
(1)  605/    1CE2 : 672A                		beq.s	.islong
(1)  606/    1CE4 : 3E3C 005C           		move.w	#"\\",d7			; nothing to do
(1)  607/    1CE8 : 60D6                		bra.s	.puttext
(1)  608/    1CEA :                     		
(1)  609/    1CEA :                     	; TEMPORAL VALUES
(1)  610/    1CEA :                     .isbyte:
(1)  611/    1CEA : 2AC5                		move.l	d5,(a5)+
(1)  612/    1CEC : 3AFC 0001           		move.w	#1,(a5)+
(1)  613/    1CF0 : DABC 0004 0000      		add.l	#$40000,d5
(1)  614/    1CF6 : 2D45 0004           		move.l	d5,4(a6)
(1)  615/    1CFA : 60B0                		bra	.loop
(1)  616/    1CFC :                     .isword:
(1)  617/    1CFC : 2AC5                		move.l	d5,(a5)+
(1)  618/    1CFE : 3AFC 0002           		move.w	#2,(a5)+
(1)  619/    1D02 : DABC 0008 0000      		add.l	#$80000,d5
(1)  620/    1D08 : 2D45 0004           		move.l	d5,4(a6)
(1)  621/    1D0C : 609E                		bra	.loop
(1)  622/    1D0E :                     .islong:
(1)  623/    1D0E : 2AC5                		move.l	d5,(a5)+
(1)  624/    1D10 : 3AFC 0003           		move.w	#3,(a5)+
(1)  625/    1D14 : DABC 0010 0000      		add.l	#$100000,d5
(1)  626/    1D1A : 2D45 0004           		move.l	d5,4(a6)
(1)  627/    1D1E : 608C                		bra	.loop
(1)  628/    1D20 :                     .exit:
(1)  629/    1D20 :                     
(1)  630/    1D20 :                     ; --------------------------------------------------------
(1)  631/    1D20 :                     ; Print values
(1)  632/    1D20 :                     ; check MAX_PRNTLIST for maximum values
(1)  633/    1D20 :                     ; 
(1)  634/    1D20 :                     ; vvvv vvvv tttt
(1)  635/    1D20 :                     ; v - vdp pos
(1)  636/    1D20 :                     ; t - value type
(1)  637/    1D20 :                     ; --------------------------------------------------------
(1)  638/    1D20 :                     
(1)  639/    1D20 : 7800                		moveq	#0,d4
(1)  640/    1D22 : 7A00                		moveq	#0,d5
(1)  641/    1D24 : 7C00                		moveq	#0,d6
(1)  642/    1D26 : 4BF8 A81A           		lea	(RAM_VidPrntList),a5
(1)  643/    1D2A :                     .nextv:
(1)  644/    1D2A : 4A95                		tst.l	(a5)
(1)  645/    1D2C : 6700 009E           		beq	.nothing
(1)  646/    1D30 :                     
(1)  647/    1D30 :                     	; grab value
(1)  648/    1D30 : 7800                		moveq	#0,d4
(1)  649/    1D32 : 1818                		move.b	(a0)+,d4
(1)  650/    1D34 : E19C                		rol.l	#8,d4
(1)  651/    1D36 : 1818                		move.b	(a0)+,d4
(1)  652/    1D38 : E19C                		rol.l	#8,d4
(1)  653/    1D3A : 1818                		move.b	(a0)+,d4
(1)  654/    1D3C : E19C                		rol.l	#8,d4
(1)  655/    1D3E : 1818                		move.b	(a0)+,d4
(1)  656/    1D40 : 2844                		movea.l	d4,a4
(1)  657/    1D42 : 7800                		moveq	#0,d4
(1)  658/    1D44 :                     
(1)  659/    1D44 :                     	; get value
(1)  660/    1D44 : 3C2D 0004           		move.w	4(a5),d6
(1)  661/    1D48 :                     		
(1)  662/    1D48 : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  663/    1D4C : 660E                		bne.s	.vbyte
(1)  664/    1D4E : 1814                		move.b	(a4),d4
(1)  665/    1D50 : 2D55 0004           		move.l	(a5),4(a6)
(1)  666/    1D54 : E91C                		rol.b	#4,d4
(1)  667/    1D56 : 6158                		bsr.s	.donibl
(1)  668/    1D58 : E91C                		rol.b	#4,d4
(1)  669/    1D5A : 6154                		bsr.s	.donibl
(1)  670/    1D5C :                     .vbyte:
(1)  671/    1D5C : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  672/    1D60 : 661C                		bne.s	.vword
(1)  673/    1D62 : 1814                		move.b	(a4),d4
(1)  674/    1D64 : E15C                		rol.w	#8,d4
(1)  675/    1D66 : 182C 0001           		move.b	1(a4),d4
(1)  676/    1D6A : 2D55 0004           		move.l	(a5),4(a6)
(1)  677/    1D6E : E95C                		rol.w	#4,d4
(1)  678/    1D70 : 613E                		bsr.s	.donibl
(1)  679/    1D72 : E95C                		rol.w	#4,d4
(1)  680/    1D74 : 613A                		bsr.s	.donibl
(1)  681/    1D76 : E95C                		rol.w	#4,d4
(1)  682/    1D78 : 6136                		bsr.s	.donibl
(1)  683/    1D7A : E95C                		rol.w	#4,d4
(1)  684/    1D7C : 6132                		bsr.s	.donibl
(1)  685/    1D7E :                     .vword:
(1)  686/    1D7E : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  687/    1D82 : 6624                		bne.s	.vlong
(1)  688/    1D84 : 1814                		move.b	(a4),d4
(1)  689/    1D86 : E19C                		rol.l	#8,d4
(1)  690/    1D88 : 182C 0001           		move.b	1(a4),d4
(1)  691/    1D8C : E19C                		rol.l	#8,d4
(1)  692/    1D8E : 182C 0002           		move.b	2(a4),d4
(1)  693/    1D92 : E19C                		rol.l	#8,d4
(1)  694/    1D94 : 182C 0003           		move.b	3(a4),d4
(1)  695/    1D98 : 2D55 0004           		move.l	(a5),4(a6)
(1)  696/    1D9C : 3C3C 0007           		move.w	#7,d6
(1)  697/    1DA0 : E99C                .lngloop:	rol.l	#4,d4
(1)  698/    1DA2 : 610C                		bsr.s	.donibl
(1)  699/    1DA4 : 51CE FFFA           		dbf	d6,.lngloop
(1)  700/    1DA8 :                     .vlong:
(1)  701/    1DA8 : 429D                		clr.l	(a5)+
(1)  702/    1DAA : 425D                		clr.w	(a5)+
(1)  703/    1DAC : 6000 FF7C           		bra	.nextv
(1)  704/    1DB0 :                     
(1)  705/    1DB0 :                     ; make nibble byte
(1)  706/    1DB0 :                     .donibl:
(1)  707/    1DB0 : 3A04                		move.w	d4,d5
(1)  708/    1DB2 : 0245 000F           		andi.w	#%1111,d5
(1)  709/    1DB6 : BA3C 000A           		cmp.b	#$A,d5
(1)  710/    1DBA : 6D04                		blt.s	.lowr
(1)  711/    1DBC : DA3C 0007           		add.b	#7,d5
(1)  712/    1DC0 :                     .lowr:
(1)  713/    1DC0 : DA7C 0030           		add.w	#"0",d5
(1)  714/    1DC4 : DA78 A87A           		add.w	(RAM_VidPrntVram),d5
(1)  715/    1DC8 : 3C85                		move.w	d5,(a6)
(1)  716/    1DCA : 4E75                		rts
(1)  717/    1DCC :                     ; exit
(1)  718/    1DCC :                     .nothing:
(1)  719/    1DCC : 4CDF 7000           		movem.l	(sp)+,a4-a6
(1)  720/    1DD0 : 4CDF 00F8           		movem.l	(sp)+,d3-d7
(1)  721/    1DD4 : 4E75                		rts
(1)  722/    1DD6 :                     
(1)  723/    1DD6 :                     ; --------------------------------------------------------
(1)  724/    1DD6 :                     ; Shared: pick layer / x pos / y pos from d0 and
(1)  725/    1DD6 :                     ; set next-line size
(1)  726/    1DD6 :                     ; 
(1)  727/    1DD6 :                     ; d0 - locate(layer,x,y)
(1)  728/    1DD6 :                     ; 
(1)  729/    1DD6 :                     ; d4 - VDP position result
(1)  730/    1DD6 :                     ; d6 - next line
(1)  731/    1DD6 :                     ; --------------------------------------------------------
(1)  732/    1DD6 :                     
(1)  733/    1DD6 :                     vid_PickLayer:
(1)  734/    1DD6 :                     	; Pick layer
(1)  735/    1DD6 : 2C00                		move.l	d0,d6
(1)  736/    1DD8 : 4846                		swap	d6
(1)  737/    1DDA : 0806 0000           		btst	#0,d6
(1)  738/    1DDE : 671E                		beq.s	.plawnd
(1)  739/    1DE0 : 1839 FFFF A880      		move.b	(RAM_VdpCache+4).l,d4	; BG
(1)  740/    1DE6 : 3A04                		move.w	d4,d5
(1)  741/    1DE8 : E24D                		lsr.w	#1,d5
(1)  742/    1DEA : 0245 0003           		andi.w	#%11,d5
(1)  743/    1DEE : 4844                		swap	d4
(1)  744/    1DF0 : 3805                		move.w	d5,d4
(1)  745/    1DF2 : 4844                		swap	d4
(1)  746/    1DF4 : 0244 0001           		andi.w	#1,d4
(1)  747/    1DF8 : E14C                		lsl.w	#8,d4
(1)  748/    1DFA : EB4C                		lsl.w	#5,d4
(1)  749/    1DFC : 6028                		bra.s	.golyr
(1)  750/    1DFE :                     .plawnd:
(1)  751/    1DFE : 1839 FFFF A87E      		move.b	(RAM_VdpCache+2).l,d4	; FG
(1)  752/    1E04 : 0806 0001           		btst	#1,d6
(1)  753/    1E08 : 6706                		beq.s	.nowd
(1)  754/    1E0A : 1839 FFFF A87F      		move.b	(RAM_VdpCache+3).l,d4	; WINDOW
(1)  755/    1E10 :                     .nowd:		
(1)  756/    1E10 : 3A04                		move.w	d4,d5
(1)  757/    1E12 : E84D                		lsr.w	#4,d5
(1)  758/    1E14 : 0245 0003           		andi.w	#%11,d5
(1)  759/    1E18 : 4844                		swap	d4
(1)  760/    1E1A : 3805                		move.w	d5,d4
(1)  761/    1E1C : 4844                		swap	d4
(1)  762/    1E1E : 0244 000E           		andi.w	#%00001110,d4
(1)  763/    1E22 : E14C                		lsl.w	#8,d4
(1)  764/    1E24 : E54C                		lsl.w	#2,d4
(1)  765/    1E26 :                     .golyr:
(1)  766/    1E26 : 0044 4000           		ori.w	#$4000,d4
(1)  767/    1E2A : 3A00                		move.w	d0,d5			; Y start pos
(1)  768/    1E2C : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  769/    1E30 : ED4D                		lsl.w	#6,d5			
(1)  770/    1E32 : 1C38 A88C           		move.b	(RAM_VdpCache+$10).w,d6
(1)  771/    1E36 : 0246 0003           		andi.w	#%11,d6
(1)  772/    1E3A : 670A                		beq.s	.thissz
(1)  773/    1E3C : DA45                		add.w	d5,d5			; H64
(1)  774/    1E3E : 0246 0002           		andi.w	#%10,d6
(1)  775/    1E42 : 6702                		beq.s	.thissz
(1)  776/    1E44 : DA45                		add.w	d5,d5			; H128		
(1)  777/    1E46 :                     .thissz:
(1)  778/    1E46 : D845                		add.w	d5,d4
(1)  779/    1E48 : 3A00                		move.w	d0,d5
(1)  780/    1E4A : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  781/    1E4E : EE4D                		lsr.w	#7,d5
(1)  782/    1E50 : D845                		add.w	d5,d4			; X add
(1)  783/    1E52 : 4844                		swap	d4
(1)  784/    1E54 : 7C00                		moveq	#0,d6
(1)  785/    1E56 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  786/    1E5A : 1A38 A88C           		move.b	(RAM_VdpCache+$10).w,d5
(1)  787/    1E5E : 0245 0003           		andi.w	#%11,d5
(1)  788/    1E62 : 670A                		beq.s	.thisszj
(1)  789/    1E64 : DC46                		add.w	d6,d6			; H64
(1)  790/    1E66 : 0245 0002           		andi.w	#%10,d5
(1)  791/    1E6A : 6702                		beq.s	.thisszj
(1)  792/    1E6C : DC46                		add.w	d6,d6			; H128		
(1)  793/    1E6E :                     .thisszj:
(1)  794/    1E6E : 4846                		swap	d6
(1)  795/    1E70 : 4E75                		rts
(1)  796/    1E72 :                     
(1)  797/    1E72 :                     ; --------------------------------------------------------
(1)  798/    1E72 :                     ; Shared: set layer size
(1)  799/    1E72 :                     ; --------------------------------------------------------
(1)  800/    1E72 :                     
(1)  801/    1E72 :                     vid_PickSize:
(1)  802/    1E72 : 1839 FFFF A88C      		move.b	(RAM_VdpCache+$10).l,d4
(1)  803/    1E78 : 3A04                		move.w	d4,d5
(1)  804/    1E7A : C87C 0003           		and.w	#%000011,d4
(1)  805/    1E7E : CA7C 0030           		and.w	#%110000,d5
(1)  806/    1E82 : E44D                		lsr.w	#2,d5
(1)  807/    1E84 : 8845                		or.w	d5,d4
(1)  808/    1E86 : D844                		add.w	d4,d4
(1)  809/    1E88 : 383B 4004           		move.w	.sizelist(pc,d4.w),d4
(1)  810/    1E8C : 4E75                		rts
(1)  811/    1E8E :                     
(1)  812/    1E8E : 07FF                .sizelist:	dc.w $7FF 	;  V32  H32
(1)  813/    1E90 : 0FFF                		dc.w $FFF	;  V32  H64
(1)  814/    1E92 : 0FFF                		dc.w $FFF	;  V32 ----
(1)  815/    1E94 : 1FFF                		dc.w $1FFF	;  V32 H128
(1)  816/    1E96 : 0FFF                		dc.w $FFF 	;  V64  H32
(1)  817/    1E98 : 1FFF                		dc.w $1FFF	;  V64  H64
(1)  818/    1E9A : 1FFF                		dc.w $1FFF	;  V64 ----
(1)  819/    1E9C : 3FFF                		dc.w $3FFF	;  V64 H128
(1)  820/    1E9E : 07FF                		dc.w $7FF 	; ----  H32
(1)  821/    1EA0 : 0FFF                		dc.w $FFF	; ----  H64
(1)  822/    1EA2 : 0FFF                		dc.w $FFF	; ---- ----
(1)  823/    1EA4 : 1FFF                		dc.w $1FFF	; ---- H128
(1)  824/    1EA6 : 1FFF                		dc.w $1FFF 	; V128  H32
(1)  825/    1EA8 : 3FFF                		dc.w $3FFF	; V128  H64
(1)  826/    1EAA : 3FFF                		dc.w $3FFF	; V128 ----
(1)  827/    1EAC : 7FFF                		dc.w $7FFF	; V128 H128
(1)  828/    1EAE :                     		align 2
(1)  829/    1EAE :                     		
(1)  830/    1EAE :                     ; ====================================================================
(1)  831/    1EAE :                     ; --------------------------------------------------------
(1)  832/    1EAE :                     ; DMA VDP Fill and VDP Copy
(1)  833/    1EAE :                     ; --------------------------------------------------------
(1)  834/    1EAE :                     
(1)  835/    1EAE :                     ; --------------------------------------------------------
(1)  836/    1EAE :                     ; Video_Fill
(1)  837/    1EAE :                     ; 
(1)  838/    1EAE :                     ; Fill data to VRAM
(1)  839/    1EAE :                     ;
(1)  840/    1EAE :                     ; d0 | WORD - Fill data
(1)  841/    1EAE :                     ; d1 | WORD - Size
(1)  842/    1EAE :                     ; d2 | WORD - VRAM
(1)  843/    1EAE :                     ; --------------------------------------------------------
(1)  844/    1EAE :                     
(1)  845/    1EAE :                     Video_Fill:
(1)  846/    1EAE : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  847/    1EB4 :                     		
(1)  848/    1EB4 : 383C 8100           		move.w	#$8100,d4
(1)  849/    1EB8 : 1838 A87D           		move.b	(RAM_VdpCache+1),d4
(1)  850/    1EBC : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  851/    1EC0 : 3884                		move.w	d4,(a4)
(1)  852/    1EC2 : 3814                .dmaw:		move.w	(a4),d4
(1)  853/    1EC4 : 0804 0001           		btst	#bitDma,d4
(1)  854/    1EC8 : 66F8                		bne.s	.dmaw
(1)  855/    1ECA : 38BC 8F01           		move.w	#$8F01,(a4)		; Increment $01
(1)  856/    1ECE :                     
(1)  857/    1ECE :                     	; SIZE
(1)  858/    1ECE : 3801                		move.w	d1,d4
(1)  859/    1ED0 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  860/    1ED6 : E24C                		lsr.w	#1,d4
(1)  861/    1ED8 : 1A04                		move.b	d4,d5
(1)  862/    1EDA : 4845                		swap	d5
(1)  863/    1EDC : E04C                		lsr.w	#8,d4
(1)  864/    1EDE : 1A04                		move.b	d4,d5
(1)  865/    1EE0 : 4845                		swap	d5
(1)  866/    1EE2 : 2885                		move.l	d5,(a4)
(1)  867/    1EE4 : 38BC 9780           		move.w	#$9780,(a4)		; DMA Fill bit
(1)  868/    1EE8 :                     
(1)  869/    1EE8 :                     	; DESTINATION
(1)  870/    1EE8 : 3802                		move.w	d2,d4
(1)  871/    1EEA :                     ; 		lsl.w	#5,d4
(1)  872/    1EEA : 3A04                		move.w	d4,d5
(1)  873/    1EEC : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  874/    1EF0 : 0045 4000           		ori.w	#$4000,d5
(1)  875/    1EF4 : 4845                		swap	d5
(1)  876/    1EF6 : 3A04                		move.w	d4,d5
(1)  877/    1EF8 : E04D                		lsr.w	#8,d5
(1)  878/    1EFA : EC4D                		lsr.w	#6,d5
(1)  879/    1EFC : 0245 0003           		andi.w	#%11,d5
(1)  880/    1F00 : 0045 0080           		ori.w	#$80,d5
(1)  881/    1F04 : 2885                		move.l	d5,(a4)
(1)  882/    1F06 : 3940 FFFC           		move.w	d0,-4(a4)
(1)  883/    1F0A : 3814                .dmawe:		move.w	(a4),d4
(1)  884/    1F0C : 0804 0001           		btst	#bitDma,d4
(1)  885/    1F10 : 66F8                		bne.s	.dmawe
(1)  886/    1F12 :                     
(1)  887/    1F12 : 38BC 8F02           		move.w	#$8F02,(a4)		; Increment $02
(1)  888/    1F16 : 383C 8100           		move.w	#$8100,d4
(1)  889/    1F1A : 1838 A87D           		move.b	(RAM_VdpCache+1),d4
(1)  890/    1F1E : 3884                		move.w	d4,(a4)
(1)  891/    1F20 : 4E75                		rts
(1)  892/    1F22 :                     
(1)  893/    1F22 :                     ; --------------------------------------------------------
(1)  894/    1F22 :                     ; Video_Copy
(1)  895/    1F22 :                     ; 
(1)  896/    1F22 :                     ; Copy VRAM data to another location
(1)  897/    1F22 :                     ;
(1)  898/    1F22 :                     ; d0 | WORD - VRAM Source
(1)  899/    1F22 :                     ; d1 | WORD - Size
(1)  900/    1F22 :                     ; d2 | WORD - VRAM Destination
(1)  901/    1F22 :                     ; --------------------------------------------------------
(1)  902/    1F22 :                     
(1)  903/    1F22 :                     Video_Copy:
(1)  904/    1F22 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  905/    1F28 :                     		
(1)  906/    1F28 : 383C 8100           		move.w	#$8100,d4
(1)  907/    1F2C : 1838 A87D           		move.b	(RAM_VdpCache+1),d4
(1)  908/    1F30 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  909/    1F34 : 3884                		move.w	d4,(a4)
(1)  910/    1F36 : 3814                .dmaw:		move.w	(a4),d4
(1)  911/    1F38 : 0804 0001           		btst	#bitDma,d4
(1)  912/    1F3C : 66F8                		bne.s	.dmaw
(1)  913/    1F3E : 38BC 8F01           		move.w	#$8F01,(a4)		; Increment $01
(1)  914/    1F42 :                     
(1)  915/    1F42 :                     	; SIZE
(1)  916/    1F42 : 3801                		move.w	d1,d4
(1)  917/    1F44 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  918/    1F4A : E24C                		lsr.w	#1,d4
(1)  919/    1F4C : 1A04                		move.b	d4,d5
(1)  920/    1F4E : 4845                		swap	d5
(1)  921/    1F50 : E04C                		lsr.w	#8,d4
(1)  922/    1F52 : 1A04                		move.b	d4,d5
(1)  923/    1F54 : 4845                		swap	d5
(1)  924/    1F56 : 2885                		move.l	d5,(a4)
(1)  925/    1F58 :                     	
(1)  926/    1F58 :                     	; SOURCE
(1)  927/    1F58 : 2A3C 9600 9500      		move.l	#$96009500,d5
(1)  928/    1F5E : 3800                		move.w	d0,d4
(1)  929/    1F60 : 1A04                		move.b	d4,d5
(1)  930/    1F62 : 4845                		swap	d5
(1)  931/    1F64 : E04C                		lsr.w	#8,d4
(1)  932/    1F66 : 1A04                		move.b	d4,d5
(1)  933/    1F68 : 2885                		move.l	d5,(a4)
(1)  934/    1F6A : 38BC 97C0           		move.w	#$97C0,(a4)		; DMA Fill bit
(1)  935/    1F6E :                     		
(1)  936/    1F6E :                     	; DESTINATION
(1)  937/    1F6E : 2802                		move.l	d2,d4
(1)  938/    1F70 :                     ; 		lsl.w	#5,d4
(1)  939/    1F70 : 3A04                		move.w	d4,d5
(1)  940/    1F72 : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  941/    1F76 : 0045 4000           		ori.w	#$4000,d5
(1)  942/    1F7A : 4845                		swap	d5
(1)  943/    1F7C : 3A04                		move.w	d4,d5
(1)  944/    1F7E : E04D                		lsr.w	#8,d5
(1)  945/    1F80 : EC4D                		lsr.w	#6,d5
(1)  946/    1F82 : 0245 0003           		andi.w	#%11,d5
(1)  947/    1F86 : 0045 00C0           		ori.w	#$C0,d5
(1)  948/    1F8A : 2885                		move.l	d5,(a4)
(1)  949/    1F8C : 3940 FFFC           		move.w	d0,-4(a4)
(1)  950/    1F90 : 3814                .dmawe:		move.w	(a4),d4
(1)  951/    1F92 : 0804 0001           		btst	#bitDma,d4
(1)  952/    1F96 : 66F8                		bne.s	.dmawe
(1)  953/    1F98 :                     
(1)  954/    1F98 : 38BC 8F02           		move.w	#$8F02,(a4)		; Increment $02
(1)  955/    1F9C : 383C 8100           		move.w	#$8100,d4
(1)  956/    1FA0 : 1838 A87D           		move.b	(RAM_VdpCache+1),d4
(1)  957/    1FA4 : 3884                		move.w	d4,(a4)
(1)  958/    1FA6 : 4E75                		rts
(1)  959/    1FA8 :                     
(1)  960/    1FA8 :                     ; ====================================================================
(1)  961/    1FA8 :                     ; --------------------------------------------------------
(1)  962/    1FA8 :                     ; DMA ROM to VDP Transfers
(1)  963/    1FA8 :                     ; 
(1)  964/    1FA8 :                     ; If porting to 32X: you need to move these
(1)  965/    1FA8 :                     ; routines to RAM
(1)  966/    1FA8 :                     ; --------------------------------------------------------
(1)  967/    1FA8 :                     		
(1)  968/    1FA8 :                     ; --------------------------------------------------------
(1)  969/    1FA8 :                     ; Video_LoadArt
(1)  970/    1FA8 :                     ; 
(1)  971/    1FA8 :                     ; Load art using DMA
(1)  972/    1FA8 :                     ;
(1)  973/    1FA8 :                     ; d0 | LONG - Art data
(1)  974/    1FA8 :                     ; d1 | WORD - Size
(1)  975/    1FA8 :                     ; d2 | WORD - VRAM (cell)
(1)  976/    1FA8 :                     ; 
(1)  977/    1FA8 :                     ; Uses:
(1)  978/    1FA8 :                     ; d4-d5,a4
(1)  979/    1FA8 :                     ; 
(1)  980/    1FA8 :                     ; *HARDWARE NOTES*
(1)  981/    1FA8 :                     ; MCD: WORDRAM source data must be incremented by 2 bytes,
(1)  982/    1FA8 :                     ;      also the first WORD write might get lost
(1)  983/    1FA8 :                     ; 
(1)  984/    1FA8 :                     ; 32X: The routine must be at RAM since we need
(1)  985/    1FA8 :                     ;      to set RV=1 so DMA can read from MD's
(1)  986/    1FA8 :                     ;      original ROM Map, also locks access to ROM on
(1)  987/    1FA8 :                     ;      the SH2 Side
(1)  988/    1FA8 :                     ; --------------------------------------------------------
(1)  989/    1FA8 :                     
(1)  990/    1FA8 :                     Video_LoadArt:
(1)  991/    1FA8 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  992/    1FAE : 383C 8100           		move.w	#$8100,d4
(1)  993/    1FB2 : 1838 A87D           		move.b	(RAM_VdpCache+1),d4
(1)  994/    1FB6 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  995/    1FBA : 3884                		move.w	d4,(a4)			; Turn ON DMA
(1)  996/    1FBC :                     
(1)  997/    1FBC :                     	; SIZE
(1)  998/    1FBC : 3801                		move.w	d1,d4
(1)  999/    1FBE : 2A3C 9400 9300      		move.l	#$94009300,d5
(1) 1000/    1FC4 : E24C                		lsr.w	#1,d4
(1) 1001/    1FC6 : 1A04                		move.b	d4,d5
(1) 1002/    1FC8 : 4845                		swap	d5
(1) 1003/    1FCA : E04C                		lsr.w	#8,d4
(1) 1004/    1FCC : 1A04                		move.b	d4,d5
(1) 1005/    1FCE : 4845                		swap	d5
(1) 1006/    1FD0 : 2885                		move.l	d5,(a4)
(1) 1007/    1FD2 :                     
(1) 1008/    1FD2 :                     	; SOURCE
(1) 1009/    1FD2 : 2800                		move.l	d0,d4
(1) 1010/    1FD4 : E28C                  		lsr.l	#1,d4
(1) 1011/    1FD6 : 2A3C 9600 9500       		move.l	#$96009500,d5
(1) 1012/    1FDC : 1A04                 		move.b	d4,d5
(1) 1013/    1FDE : E08C                 		lsr.l	#8,d4
(1) 1014/    1FE0 : 4845                 		swap	d5
(1) 1015/    1FE2 : 1A04                 		move.b	d4,d5
(1) 1016/    1FE4 : 2885                 		move.l	d5,(a4)
(1) 1017/    1FE6 : 3A3C 9700            		move.w	#$9700,d5
(1) 1018/    1FEA : E08C                 		lsr.l	#8,d4
(1) 1019/    1FEC : 1A04                 		move.b	d4,d5
(1) 1020/    1FEE : 3885                 		move.w	d5,(a4)
(1) 1021/    1FF0 :                      		
(1) 1022/    1FF0 :                     	; DESTINATION
(1) 1023/    1FF0 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80 request
(1) 1024/    1FF8 : 3802                		move.w	d2,d4
(1) 1025/    1FFA : C87C 07FF           		and.w	#$7FF,d4
(1) 1026/    1FFE : EB4C                		lsl.w	#5,d4
(1) 1027/    2000 : 3A04                		move.w	d4,d5
(1) 1028/    2002 : C8BC 0000 3FE0      		and.l	#$3FE0,d4
(1) 1029/    2008 : 0044 4000           		ori.w	#$4000,d4
(1) 1030/    200C : 3884                		move.w	d4,(a4)			; First write
(1) 1031/    200E : E04D                		lsr.w	#8,d5
(1) 1032/    2010 : EC4D                		lsr.w	#6,d5
(1) 1033/    2012 : 0245 0003           		andi.w	#%11,d5
(1) 1034/    2016 : 0045 0080           		ori.w	#$80,d5
(1) 1035/    201A :                     .wait:
(1) 1036/    201A : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for Z80
(1) 1037/    2022 : 66F6                		bne.s	.wait
(1) 1038/    2024 : 3F05                 		move.w	d5,-(sp)		; Second write must be from RAM
(1) 1039/    2026 : 389F                		move.w	(sp)+,(a4)
(1) 1040/    2028 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; Start Z80
(1) 1041/    2030 :                     	
(1) 1042/    2030 : 383C 8100           		move.w	#$8100,d4		; Turn OFF DMA
(1) 1043/    2034 : 1838 A87D           		move.b	(RAM_VdpCache+1),d4
(1) 1044/    2038 : 3884                		move.w	d4,(a4)
(1) 1045/    203A : 4E75                		rts
(1) 1046/    203C :                     
(1) 1047/    203C :                     ; ====================================================================
(1) 1048/    203C :                     ; --------------------------------------------------------
(1) 1049/    203C :                     ; Video data
(1) 1050/    203C :                     ; --------------------------------------------------------
(1) 1051/    203C :                     
(1) 1052/    203C :                     list_vdpregs:
(1) 1053/    203C : 04                  		dc.b $04			; HBlank int off, HV Counter on
(1) 1054/    203D : 44                  		dc.b $44			; Display ON, VBlank int off
(1) 1055/    203E : 30                  		dc.b (($C000)>>10)		; ForeGrd at VRAM $C000 (%00xxx000)
(1) 1056/    203F : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1) 1057/    2040 : 07                  		dc.b (($E000)>>13)		; BackGrd at VRAM $E000 (%00000xxx)
(1) 1058/    2041 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1) 1059/    2042 : 00                  		dc.b $00			; Nothing
(1) 1060/    2043 : 00                  		dc.b $00			; Background color: 0
(1) 1061/    2044 : 00                  		dc.b $00			; Nothing
(1) 1062/    2045 : 00                  		dc.b $00			; Nothing
(1) 1063/    2046 : 00                  		dc.b $00			; HInt value
(1) 1064/    2047 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1) 1065/    2048 : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1) 1066/    2049 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1) 1067/    204A : 00                  		dc.b $00			; Nothing
(1) 1068/    204B : 02                  		dc.b $02			; VDP Auto increment by $02
(1) 1069/    204C : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1) 1070/    204D : 00                  		dc.b $00			; Window layer Top/Bottom disabled
(1) 1071/    204E : 00                  		dc.b $00			; Window layer Left/Right disabled
(1) 1072/    204F :                     		align 2				; Align by 2
(1) 1073/    2050 :                     
(1) 1074/    2050 :                     Art_PrintFont:	binclude "system/md/data/art_prntfont.bin"
(1) 1075/    2C50 :                     Art_PrintFont_e:
(1) 1076/    2C50 :                     		align 2
(1) 1077/    2C50 :                     
(1) 1078/    2C50 :                     Pal_PrintFont:	binclude "system/md/data/pal_prntfont.bin"
(1) 1079/    2C5C :                     		align 2	
(1) 1080/    2C5C :                     
      42/    2C5C :                     		include "system/md/system.asm"		; System
(1)    1/    2C5C :                     ; ====================================================================
(1)    2/    2C5C :                     ; ----------------------------------------------------------------
(1)    3/    2C5C :                     ; System
(1)    4/    2C5C :                     ; ----------------------------------------------------------------
(1)    5/    2C5C :                     
(1)    6/    2C5C :                     ; ASSEMBLER FLAGS USED:
(1)    7/    2C5C :                     ; MCD  - Mega CD
(1)    8/    2C5C :                     ; MARS - 32X
(1)    9/    2C5C :                     
(1)   10/    2C5C :                     ; --------------------------------------------------------
(1)   11/    2C5C :                     ; Init System
(1)   12/    2C5C :                     ; 
(1)   13/    2C5C :                     ; Uses:
(1)   14/    2C5C :                     ; a0-a2,d0-d1
(1)   15/    2C5C :                     ; --------------------------------------------------------
(1)   16/    2C5C :                     
(1)   17/    2C5C :                     System_Init:
(1)   18/    2C5C : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; $0100 - Stop Z80
(1)   19/    2C64 :                     .wait:
(1)   20/    2C64 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Z80 stopped?
(1)   21/    2C6C : 66F6                		bne.s	.wait			; If not, wait
(1)   22/    2C6E : 7040                		moveq	#%01000000,d0		; d0 = (TH=1), Init input ports
(1)   23/    2C70 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Port 1 = d0
(1)   24/    2C76 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Port 2 = d0
(1)   25/    2C7C : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem  = d0
(1)   26/    2C82 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; $0000 - Start Z80
(1)   27/    2C8A :                     		
(1)   28/    2C8A : 33FC 4EF9 FFFF A6F0 		move.w	#$4EF9,(RAM_GoToHBlnk).l
(1)   29/    2C92 : 23FC 0000 30B6 FFFF 		move.l	#MD_HBlank,(RAM_GoToHBlnk+2).l
                    A6F2                
(1)   30/    2C9C : 33FC 4EF9 FFFF A6F6 		move.w	#$4EF9,(RAM_GoToVBlnk).l
(1)   31/    2CA4 : 23FC 0000 30B4 FFFF 		move.l	#MD_VBlank,(RAM_GoToVBlnk+2).l
                    A6F8                
(1)   32/    2CAE : 4E75                		rts
(1)   33/    2CB0 :                     		
(1)   34/    2CB0 :                     ; ====================================================================
(1)   35/    2CB0 :                     ; ----------------------------------------------------------------
(1)   36/    2CB0 :                     ; System subroutines
(1)   37/    2CB0 :                     ; ----------------------------------------------------------------
(1)   38/    2CB0 :                     
(1)   39/    2CB0 :                     ; --------------------------------------------------------
(1)   40/    2CB0 :                     ; System_VSync
(1)   41/    2CB0 :                     ; 
(1)   42/    2CB0 :                     ; Waits for VBlank
(1)   43/    2CB0 :                     ; 
(1)   44/    2CB0 :                     ; Uses:
(1)   45/    2CB0 :                     ; d4
(1)   46/    2CB0 :                     ; --------------------------------------------------------
(1)   47/    2CB0 :                     
(1)   48/    2CB0 :                     System_VSync:
(1)   49/    2CB0 : 3839 00C0 0004      		move.w	(vdp_ctrl),d4			; Read VDP Control to d4
(1)   50/    2CB6 : 0804 0003           		btst	#bitVBlnk,d4			; Test VBlank bit
(1)   51/    2CBA : 67F4                		beq.s	System_VSync			; If FALSE (not inside VBlank), try again
(1)   52/    2CBC : 6100 02CC           		bsr	System_Input			; Read user input data
(1)   53/    2CC0 : 3839 00C0 0004      .wait:		move.w	(vdp_ctrl),d4			; d4 - Read VDP Control
(1)   54/    2CC6 : 0804 0003           		btst	#bitVBlnk,d4			; Test VBlank bit
(1)   55/    2CCA : 66F4                		bne.s	.wait				; If TRUE (inside VBlank), wait for exit
(1)   56/    2CCC : 4E75                		rts
(1)   57/    2CCE :                     
(1)   58/    2CCE :                     ; --------------------------------------------------------
(1)   59/    2CCE :                     ; System_Random
(1)   60/    2CCE :                     ; 
(1)   61/    2CCE :                     ; Random number generator
(1)   62/    2CCE :                     ; 
(1)   63/    2CCE :                     ; Uses:
(1)   64/    2CCE :                     ; d4-d6,a6
(1)   65/    2CCE :                     ; --------------------------------------------------------
(1)   66/    2CCE :                     
(1)   67/    2CCE :                     System_Random:
(1)   68/    2CCE : 2A38 86E2           		move.l	(RAM_GlblRndSeeds).w,d5
(1)   69/    2CD2 : 6606                		bne.s	.blank
(1)   70/    2CD4 : 2A3C 5A6A 26D3      		move.l	#$5A6A26D3,d5
(1)   71/    2CDA :                     .blank:
(1)   72/    2CDA : 2805                		move.l	d5,d4
(1)   73/    2CDC : E785                		asl.l	#3,d5
(1)   74/    2CDE : DA84                		add.l	d4,d5
(1)   75/    2CE0 : E585                		asl.l	#2,d5
(1)   76/    2CE2 : DA84                		add.l	d4,d5
(1)   77/    2CE4 : 3805                		move.w	d5,d4
(1)   78/    2CE6 : 4845                		swap	d5
(1)   79/    2CE8 : D845                		add.w	d5,d4
(1)   80/    2CEA : 3A04                		move.w	d4,d5
(1)   81/    2CEC : 21C5 86E2           		move.l	d5,(RAM_GlblRndSeeds).w
(1)   82/    2CF0 : 4E75                		rts
(1)   83/    2CF2 :                     
(1)   84/    2CF2 :                     ; --------------------------------------------------------
(1)   85/    2CF2 :                     ; System_SineWave
(1)   86/    2CF2 :                     ; 
(1)   87/    2CF2 :                     ; Uses:
(1)   88/    2CF2 :                     ; d4-d6,a4-a5
(1)   89/    2CF2 :                     ; --------------------------------------------------------
(1)   90/    2CF2 :                     
(1)   91/    2CF2 :                     System_SineWave:
(1)   92/    2CF2 : 0240 00FF           		andi.w	#$FF,d0
(1)   93/    2CF6 : D040                		add.w	d0,d0
(1)   94/    2CF8 : 0640 0080           		addi.w	#$80,d0
(1)   95/    2CFC : 323B 000C           		move.w	.sine_data(pc,d0.w),d1
(1)   96/    2D00 : 0440 0080           		subi.w	#$80,d0
(1)   97/    2D04 : 303B 0004           		move.w	.sine_data(pc,d0.w),d0
(1)   98/    2D08 : 4E75                		rts
(1)   99/    2D0A :                     .sine_data:
(1)  100/    2D0A :                     		binclude "system/md/data/sinewave.bin"
(1)  101/    2F8A :                     		align 2
(1)  102/    2F8A :                     
(1)  103/    2F8A :                     ; --------------------------------------------------------
(1)  104/    2F8A :                     ; System_Input
(1)  105/    2F8A :                     ; 
(1)  106/    2F8A :                     ; WARNING: Don't call this outside of VBLANK
(1)  107/    2F8A :                     ; (call System_VSync first)
(1)  108/    2F8A :                     ; 
(1)  109/    2F8A :                     ; Uses:
(1)  110/    2F8A :                     ; d4-d6,a4-a5
(1)  111/    2F8A :                     ; --------------------------------------------------------
(1)  112/    2F8A :                     
(1)  113/    2F8A :                     System_Input:
(1)  114/    2F8A :                     ; 		move.w	#$0100,(z80_bus).l	; $0100 - Stop Z80
(1)  115/    2F8A :                     ; .wait:
(1)  116/    2F8A :                     ; 		btst	#0,(z80_bus).l		; Z80 stopped?
(1)  117/    2F8A :                     ; 		bne.s	.wait			; If not, wait
(1)  118/    2F8A : 49F9 00A1 0003      		lea	(sys_data_1),a4		; a4 - Port 1 input data from system
(1)  119/    2F90 : 4BF8 A6FC           		lea	(RAM_InputData),a5	; a5 - Output data for reading
(1)  120/    2F94 : 610C                		bsr	.this_one		; read this input
(1)  121/    2F96 : D8FC 0002           		adda	#2,a4			; next port [$A10005]
(1)  122/    2F9A : DAFC 0006           		adda	#sizeof_input,a5	; next output slot
(1)  123/    2F9E : 6102                		bsr	.this_one		; read this input
(1)  124/    2FA0 :                     ; 		move.w	#0,(z80_bus).l		; $0000 - Start Z80
(1)  125/    2FA0 : 4E75                		rts
(1)  126/    2FA2 :                     
(1)  127/    2FA2 :                     ; --------------------------------------------------------	
(1)  128/    2FA2 :                     ; do port
(1)  129/    2FA2 :                     ; 
(1)  130/    2FA2 :                     ; a4 - Current port
(1)  131/    2FA2 :                     ; a5 - Output data
(1)  132/    2FA2 :                     ; --------------------------------------------------------
(1)  133/    2FA2 :                     
(1)  134/    2FA2 :                     .this_one:
(1)  135/    2FA2 : 6100 00E0           		bsr	.find_id			; Grab ID, returns at d4
(1)  136/    2FA6 : 1A84                		move.b	d4,pad_id(a5)			; Save ID to output
(1)  137/    2FA8 : B87C 000F           		cmp.w	#$F,d4				; Disconnected?
(1)  138/    2FAC : 670E                		beq.s	.exit				; If yes, exit this
(1)  139/    2FAE : C87C 000F           		and.w	#$F,d4				; Clear other bits, keep right 4 bits
(1)  140/    2FB2 : D844                		add.w	d4,d4				; multiply by 2 for this list
(1)  141/    2FB4 : 3A3B 400C           		move.w	.list(pc,d4.w),d5		; d5 = list+(inputid*2)
(1)  142/    2FB8 : 4EFB 5008           		jmp	.list(pc,d5.w)			; jump to list+jumpresult
(1)  143/    2FBC :                     
(1)  144/    2FBC :                     ; ------------------------------------------------
(1)  145/    2FBC :                     
(1)  146/    2FBC :                     .exit:
(1)  147/    2FBC : 422D 0001           		clr.b	pad_ver(a5)			; Clear output pad version
(1)  148/    2FC0 : 4E75                		rts
(1)  149/    2FC2 :                     
(1)  150/    2FC2 :                     ; --------------------------------------------------------
(1)  151/    2FC2 :                     ; Grab ID
(1)  152/    2FC2 :                     ; --------------------------------------------------------
(1)  153/    2FC2 :                     
(1)  154/    2FC2 : FFFA                .list:		dc.w .exit-.list	; $00
(1)  155/    2FC4 : FFFA                		dc.w .exit-.list
(1)  156/    2FC6 : FFFA                		dc.w .exit-.list
(1)  157/    2FC8 : FFFA                		dc.w .exit-.list
(1)  158/    2FCA : FFFA                		dc.w .exit-.list	; $04
(1)  159/    2FCC : FFFA                		dc.w .exit-.list
(1)  160/    2FCE : FFFA                		dc.w .exit-.list
(1)  161/    2FD0 : 0020                		dc.w .id_07-.list
(1)  162/    2FD2 : FFFA                		dc.w .exit-.list	; $08
(1)  163/    2FD4 : FFFA                		dc.w .exit-.list
(1)  164/    2FD6 : FFFA                		dc.w .exit-.list
(1)  165/    2FD8 : FFFA                		dc.w .exit-.list
(1)  166/    2FDA : FFFA                		dc.w .exit-.list	; $0C
(1)  167/    2FDC : 002C                		dc.w .id_0D-.list
(1)  168/    2FDE : FFFA                		dc.w .exit-.list
(1)  169/    2FE0 : FFFA                		dc.w .exit-.list
(1)  170/    2FE2 :                     
(1)  171/    2FE2 :                     ; --------------------------------------------------------
(1)  172/    2FE2 :                     ; ID $07
(1)  173/    2FE2 :                     ; 
(1)  174/    2FE2 :                     ; SEGA Multitap
(1)  175/    2FE2 :                     ; --------------------------------------------------------
(1)  176/    2FE2 :                     
(1)  177/    2FE2 :                     .id_07:
(1)  178/    2FE2 : 197C 0060 0006      		move.b	#$60,6(a4)	; CTRL
(1)  179/    2FE8 : 18BC 0060           		move.b	#$60,(a4)	; DATA
(1)  180/    2FEC :                         
(1)  181/    2FEC : 60FE                		bra.s	*
(1)  182/    2FEE :                     
(1)  183/    2FEE :                     ; --------------------------------------------------------
(1)  184/    2FEE :                     ; ID $0D
(1)  185/    2FEE :                     ; 
(1)  186/    2FEE :                     ; Normal controller, Old or New
(1)  187/    2FEE :                     ; --------------------------------------------------------
(1)  188/    2FEE :                     
(1)  189/    2FEE :                     .id_0D:
(1)  190/    2FEE : 18BC 0040           		move.b	#$40,(a4)	; Show CB|RLDU
(1)  191/    2FF2 : 4E71                		nop
(1)  192/    2FF4 : 4E71                		nop
(1)  193/    2FF6 : 18BC 0000           		move.b	#$00,(a4)	; Show SA|RLDU
(1)  194/    2FFA : 4E71                		nop
(1)  195/    2FFC : 4E71                		nop
(1)  196/    2FFE : 18BC 0040           		move.b	#$40,(a4)	; Show CB|RLDU
(1)  197/    3002 : 4E71                		nop
(1)  198/    3004 : 4E71                		nop
(1)  199/    3006 : 18BC 0000           		move.b	#$00,(a4)	; Show SA|RLDU
(1)  200/    300A : 4E71                		nop
(1)  201/    300C : 4E71                		nop
(1)  202/    300E : 18BC 0040           		move.b	#$40,(a4)	; 6 button responds
(1)  203/    3012 : 4E71                		nop
(1)  204/    3014 : 4E71                		nop
(1)  205/    3016 : 1814                		move.b	(a4),d4		; Grab ??|MXYZ
(1)  206/    3018 : 18BC 0000            		move.b	#$00,(a4)
(1)  207/    301C : 4E71                  		nop
(1)  208/    301E : 4E71                  		nop
(1)  209/    3020 : 1C14                 		move.b	(a4),d6		; Type: $03 old, $0F new
(1)  210/    3022 : 18BC 0040            		move.b	#$40,(a4)
(1)  211/    3026 :                     ;  		nop
(1)  212/    3026 :                     ;  		nop
(1)  213/    3026 : 422D 0001           		clr.b	pad_ver(a5)
(1)  214/    302A : CC7C 000F           		and.w	#$F,d6
(1)  215/    302E : E44E                		lsr.w	#2,d6
(1)  216/    3030 : CC7C 0001           		and.w	#1,d6
(1)  217/    3034 : 6716                		beq.s	.oldpad
(1)  218/    3036 : 4604                		not.b	d4
(1)  219/    3038 : C87C 000F            		and.w	#%1111,d4
(1)  220/    303C : 1A2D 0002           		move.b	on_hold(a5),d5
(1)  221/    3040 : B905                		eor.b	d4,d5
(1)  222/    3042 : 1B44 0002           		move.b	d4,on_hold(a5)
(1)  223/    3046 : CA04                		and.b	d4,d5
(1)  224/    3048 : 1B45 0004           		move.b	d5,on_press(a5)
(1)  225/    304C :                     .oldpad:
(1)  226/    304C : 1B46 0001           		move.b	d6,pad_ver(a5)
(1)  227/    3050 :                     		
(1)  228/    3050 : 18BC 0000           		move.b	#$00,(a4)	; Show SA??|RLDU
(1)  229/    3054 : 4E71                		nop
(1)  230/    3056 : 4E71                		nop
(1)  231/    3058 : 1814                		move.b	(a4),d4
(1)  232/    305A : E50C                		lsl.b	#2,d4
(1)  233/    305C : C83C 00C0           		and.b	#%11000000,d4
(1)  234/    3060 : 18BC 0040           		move.b	#$40,(a4)	; Show ??CB|RLDU
(1)  235/    3064 : 4E71                		nop
(1)  236/    3066 : 4E71                		nop
(1)  237/    3068 : 1A14                		move.b	(a4),d5
(1)  238/    306A : CA3C 003F           		and.b	#%00111111,d5
(1)  239/    306E : 8805                		or.b	d5,d4
(1)  240/    3070 : 4604                		not.b	d4
(1)  241/    3072 : 1A2D 0003           		move.b	on_hold+1(a5),d5
(1)  242/    3076 : B905                		eor.b	d4,d5
(1)  243/    3078 : 1B44 0003           		move.b	d4,on_hold+1(a5)
(1)  244/    307C : CA04                		and.b	d4,d5
(1)  245/    307E : 1B45 0005           		move.b	d5,on_press+1(a5)
(1)  246/    3082 : 4E75                		rts
(1)  247/    3084 :                     		
(1)  248/    3084 :                     ; --------------------------------------------------------
(1)  249/    3084 :                     ; Grab ID
(1)  250/    3084 :                     ; --------------------------------------------------------
(1)  251/    3084 :                     
(1)  252/    3084 :                     .find_id:
(1)  253/    3084 : 7800                		moveq	#0,d4
(1)  254/    3086 : 18BC 0070           		move.b	#%01110000,(a4)	; TH=1,TR=1,TL=1
(1)  255/    308A : 4E71                		nop
(1)  256/    308C : 4E71                		nop
(1)  257/    308E : 610A                		bsr.s	.get_id
(1)  258/    3090 : 18BC 0030           		move.b	#%00110000,(a4)	; TH=0,TR=1,TL=1
(1)  259/    3094 : 4E71                		nop
(1)  260/    3096 : 4E71                		nop
(1)  261/    3098 : D844                		add.w	d4,d4
(1)  262/    309A :                     .get_id:
(1)  263/    309A : 1A14                		move.b	(a4),d5
(1)  264/    309C : 1C05                		move.b	d5,d6
(1)  265/    309E : CC3C 000C           		and.b	#$C,d6
(1)  266/    30A2 : 6702                		beq.s	.step_1
(1)  267/    30A4 : 5244                		addq.w	#1,d4
(1)  268/    30A6 :                     .step_1:
(1)  269/    30A6 : D844                		add.w	d4,d4
(1)  270/    30A8 : 1C05                		move.b	d5,d6
(1)  271/    30AA : CC7C 0003           		and.w	#3,d6
(1)  272/    30AE : 6702                		beq.s	.step_2
(1)  273/    30B0 : 5244                		addq.w	#1,d4
(1)  274/    30B2 :                     .step_2:
(1)  275/    30B2 : 4E75                		rts
(1)  276/    30B4 :                     ; ====================================================================
(1)  277/    30B4 :                     ; ----------------------------------------------------------------
(1)  278/    30B4 :                     ; Default VBlank
(1)  279/    30B4 :                     ; ----------------------------------------------------------------
(1)  280/    30B4 :                     
(1)  281/    30B4 :                     MD_VBlank:
(1)  282/    30B4 : 4E73                		rte
(1)  283/    30B6 :                     
(1)  284/    30B6 :                     ; ====================================================================
(1)  285/    30B6 :                     ; ----------------------------------------------------------------
(1)  286/    30B6 :                     ; System data
(1)  287/    30B6 :                     ; ----------------------------------------------------------------
(1)  288/    30B6 :                     
      43/    30B6 :                     
      44/    30B6 :                     ; ====================================================================
      45/    30B6 :                     ; ----------------------------------------------------------------
      46/    30B6 :                     ; HBlank
      47/    30B6 :                     ; ----------------------------------------------------------------
      48/    30B6 :                     
      49/    30B6 :                     MD_HBlank:
      50/    30B6 : 4E73                		rte				; Return from Exception
      51/    30B8 :                     
      52/    30B8 :                     ; ====================================================================
      53/    30B8 :                     ; ----------------------------------------------------------------
      54/    30B8 :                     ; Main
      55/    30B8 :                     ; ----------------------------------------------------------------
      56/    30B8 :                     
      57/    30B8 :                     MD_Main:
      58/    30B8 : 6100 D1A0           		bsr	Sound_Init		; Init Sound (and the Z80)
      59/    30BC : 6100 E812           		bsr	Video_Init		; Init Video (default VDP setup)
      60/    30C0 : 6100 FB9A           		bsr	System_Init		; Init System (user input)
      61/    30C4 :                     
      62/    30C4 :                     ; ================================================================
      63/    30C4 :                     ; ------------------------------------------------------------
      64/    30C4 :                     ; Your 68000 code starts here
      65/    30C4 :                     ; ------------------------------------------------------------
      66/    30C4 :                     
      67/    30C4 :                     CodeBank:
      68/    30C4 :                     		include	"game/code/title.asm"		
(1)    1/    30C4 :                     ; ================================================================
(1)    2/    30C4 :                     ; ------------------------------------------------------------
(1)    3/    30C4 :                     ; Your game code starts here
(1)    4/    30C4 :                     ; 
(1)    5/    30C4 :                     ; No restrictions unless porting to Sega CD or 32X
(1)    6/    30C4 :                     ; ------------------------------------------------------------
(1)    7/    30C4 :                     
(1)    8/    30C4 :                     ; ====================================================================
(1)    9/    30C4 :                     ; ----------------------------------------------------------------
(1)   10/    30C4 :                     ; Variables
(1)   11/    30C4 :                     ; ----------------------------------------------------------------
(1)   12/    30C4 :                     
(1)   13/    30C4 : =$7B                SET_MENUTOPLINE		equ 123
(1)   14/    30C4 : =$3                 MAX_TITLOPT		equ 3
(1)   15/    30C4 :                     
(1)   16/    30C4 : =$2                 VRAMTTL_PUZTITLE	equ $0002
(1)   17/    30C4 : =$E0                VRAMTTL_PUZFONT		equ $00E0
(1)   18/    30C4 : =$200               VRAMTTL_PUZBG		equ $0200
(1)   19/    30C4 : =$780               VRAMTTL_CELLHIDE	equ $0780
(1)   20/    30C4 :                     
(1)   21/    30C4 :                     ; ====================================================================
(1)   22/    30C4 :                     ; ----------------------------------------------------------------
(1)   23/    30C4 :                     ; RAM
(1)   24/    30C4 :                     ; ----------------------------------------------------------------
(1)   25/    30C4 :                     
(1)   26/    30C4 : (MACRO)             			struct RAM_Local
(1)   26/    30C4 : =$30C4              GLBL_LASTPC     set *
(1)   26/    30C4 : =$30C4              GLBL_LASTORG    set *
(1)   26/    30C4 :                                     dephase
(1)   26/FFFFFFFFFFFF86F0 :                                     phase RAM_LOCAL
(1)   27/FFFFFFFFFFFF86F0 :                     RAM_Ttle_SpriteData	ds.w 4*70
(1)   28/FFFFFFFFFFFF8920 :                     RAM_Ttle_HorVal		ds.l 1
(1)   29/FFFFFFFFFFFF8924 :                     RAM_Ttle_VerVal		ds.l 1
(1)   30/FFFFFFFFFFFF8928 :                     RAM_Tite_VerBot		ds.l 1			; 0000.0000
(1)   31/FFFFFFFFFFFF892C :                     RAM_Tite_VerBgMenu	ds.w 1
(1)   32/FFFFFFFFFFFF892E :                     RAM_Ttle_VerBg		ds.w 1
(1)   33/FFFFFFFFFFFF8930 :                     RAM_Ttle_HorBg  	ds.w 1
(1)   34/FFFFFFFFFFFF8932 :                     RAM_Titl_UsrOpt		ds.w 1			; 0-2
(1)   35/FFFFFFFFFFFF8934 : (MACRO)             			finish
(1)   35/FFFFFFFFFFFF86F0 :                                     !org GLBL_LASTORG
(1)   35/    30C4 :                                     phase GLBL_LASTPC
(1)   36/    30C4 :                     
(1)   37/    30C4 :                     ; ====================================================================
(1)   38/    30C4 :                     ; ----------------------------------------------------------------
(1)   39/    30C4 :                     ; Init
(1)   40/    30C4 :                     ; ----------------------------------------------------------------
(1)   41/    30C4 :                     
(1)   42/    30C4 :                     TitleScreen_Init:
(1)   43/    30C4 : 46FC 2700           		move.w	#$2700,sr
(1)   44/    30C8 : 41F8 A79A           		lea	(RAM_FadeTarget),a0
(1)   45/    30CC : 303C 003F           		move.w	#64-1,d0
(1)   46/    30D0 :                     .clrpal:
(1)   47/    30D0 : 4258                		clr.w	(a0)+
(1)   48/    30D2 : 51C8 FFFC           		dbf	d0,.clrpal
(1)   49/    30D6 : 41F8 8000           		lea	(RAM_HorScroll),a0
(1)   50/    30DA : 303C 0037           		move.w	#(224/4)-1,d0
(1)   51/    30DE :                     .clrhor:
(1)   52/    30DE : 4298                		clr.l	(a0)+
(1)   53/    30E0 : 4298                		clr.l	(a0)+
(1)   54/    30E2 : 4298                		clr.l	(a0)+
(1)   55/    30E4 : 4298                		clr.l	(a0)+
(1)   56/    30E6 : 51C8 FFF6           		dbf	d0,.clrhor
(1)   57/    30EA :                     		
(1)   58/    30EA : 7000                		moveq	#0,d0				; Clear FG
(1)   59/    30EC : 323C 3FFF           		move.w	#((512*256)/8)-1,d1
(1)   60/    30F0 : 343C C000           		move.w	#$C000,d2
(1)   61/    30F4 : 6100 EDB8           		bsr	Video_Fill
(1)   62/    30F8 : 343C E000           		move.w	#$E000,d2			; Clear BG
(1)   63/    30FC : 6100 EDB0           		bsr	Video_Fill
(1)   64/    3100 : 7000                		moveq	#0,d0				; Clear Horizontal scroll
(1)   65/    3102 : 323C 00DF           		move.w	#(224)-1,d1
(1)   66/    3106 : 343C FC00           		move.w	#$FC00,d2
(1)   67/    310A : 6100 EDA2           		bsr	Video_Fill
(1)   68/    310E : 303C 1111           		move.w	#$1111,d0			; 2cell border
(1)   69/    3112 : 323C 03FF           		move.w	#(16*$40)-1,d1
(1)   70/    3116 : 343C F000           		move.w	#VRAMTTL_CELLHIDE*$20,d2
(1)   71/    311A : 6100 ED92           		bsr	Video_Fill
(1)   72/    311E : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)   73/    3124 : 2D7C 4000 0010 0004 		move.l	#$40000010,4(a6)		; Clear Vertical scroll
(1)   74/    312C : 2CBC 0000 0000      		move.l	#0,(a6)
(1)   75/    3132 : 41F8 86F0           		lea	(RAM_Local),a0
(1)   76/    3136 : 323C 07FF           		move.w	#(MAX_LOCRAM/4)-1,d1
(1)   77/    313A : 7000                		moveq	#0,d0
(1)   78/    313C :                     .clrme:
(1)   79/    313C : 20C0                		move.l	d0,(a0)+
(1)   80/    313E : 51C9 FFFC           		dbf	d1,.clrme
(1)   81/    3142 : 11FC 0014 A87C      		move.b	#%00010100,(RAM_VdpCache).w
(1)   82/    3148 : 11FC 0064 A87D      		move.b	#%01100100,(RAM_VdpCache+1).w
(1)   83/    314E : 11FC 0030 A883      		move.b	#$30,(RAM_VdpCache+7).w
(1)   84/    3154 : 11FC 007B A886      		move.b	#SET_MENUTOPLINE,(RAM_VdpCache+$A).w	; Hint line
(1)   85/    315A : 11FC 0007 A887      		move.b	#%00000111,(RAM_VdpCache+$B).w	; Scroll: Hor FULL Vert FULL
(1)   86/    3160 : 11FC 0081 A888      		move.b	#%10000001,(RAM_VdpCache+$C).w	; H40
(1)   87/    3166 : 21FC 0000 3678 A6F8 		move.l	#Title_VBlank,(RAM_GoToVBlnk+2).w
(1)   88/    316E : 21FC 0000 3528 A6F2 		move.l	#Title_HBlank,(RAM_GoToHBlnk+2).w
(1)   89/    3176 : 23FC 9100 9200 00C0 		move.l	#$91009200,(vdp_ctrl).l
                    0004                
(1)   90/    3180 : 23FC 4000 0010 00C0 		move.l	#$40000010,(vdp_ctrl).l
                    0004                
(1)   91/    318A : 23FC 0000 0000 00C0 		move.l	#0,(vdp_data).l
                    0000                
(1)   92/    3194 : 4278 8932           		clr.w	(RAM_Titl_UsrOpt).w
(1)   93/    3198 :                     		
(1)   94/    3198 : 203C 0001 1F20      		move.l	#Art_MenuFont,d0
(1)   95/    319E : 323C 1140           		move.w	#(Art_MenuFont_e-Art_MenuFont),d1
(1)   96/    31A2 : 343C 00E0           		move.w	#VRAMTTL_PUZFONT,d2
(1)   97/    31A6 : 6100 EE00           		bsr	Video_LoadArt
(1)   98/    31AA : 203C 0001 1C60      		move.l	#Art_Title_BG,d0
(1)   99/    31B0 : 323C 02C0           		move.w	#(Art_Title_BG_e-Art_Title_BG),d1
(1)  100/    31B4 : 343C 0200           		move.w	#VRAMTTL_PUZBG,d2
(1)  101/    31B8 : 6100 EDEE           		bsr	Video_LoadArt
(1)  102/    31BC : 41FA 0866           		lea	Map_Title_BG(pc),a0
(1)  103/    31C0 : 203C 0001 0000      		move.l	#locate(1,0,0),d0
(1)  104/    31C6 : 223C 0027 001F      		move.l	#mapsize(320,256),d1
(1)  105/    31CC : 343C 6200           		move.w	#VRAMTTL_PUZBG|$6000,d2
(1)  106/    31D0 : 6100 E9C2           		bsr	Video_LoadMap
(1)  107/    31D4 : 203C 0001 0240      		move.l	#Art_Title_FG,d0
(1)  108/    31DA : 323C 1A20           		move.w	#(Art_Title_FG_e-Art_Title_FG),d1
(1)  109/    31DE : 343C 0002           		move.w	#VRAMTTL_PUZTITLE,d2
(1)  110/    31E2 : 6100 EDC4           		bsr	Video_LoadArt
(1)  111/    31E6 :                     
(1)  112/    31E6 :                     	; Copyright on WINDOW Layer
(1)  113/    31E6 :                     ; 		lea	str_Copyinfo(pc),a0
(1)  114/    31E6 :                     ; 		move.l	#locate(2,23,26),d0
(1)  115/    31E6 :                     ; 		move.w	#$6000|(VRAMTTL_PUZFONT-$20),d1
(1)  116/    31E6 :                     ; 		bsr	ShowStr_custom
(1)  117/    31E6 :                     ; 		move.w	#$9298,(vdp_ctrl).l
(1)  118/    31E6 :                     ; 		lea	Map_MenuText(pc),a0		; CUSTOM map load
(1)  119/    31E6 :                     ; 		move.l	#$60000002,d4
(1)  120/    31E6 :                     ; 		move.l	#$800000,d6
(1)  121/    31E6 :                     ; 		move.l	#mapsize(320,256),d1
(1)  122/    31E6 :                     ; 		move.w	#VRAMTTL_PUZFONT,d2
(1)  123/    31E6 :                     ; 		bsr	Video_LoadMap_Custom
(1)  124/    31E6 : 41FA 10FC           		lea	Map_MenuText(pc),a0
(1)  125/    31EA : 203C 0000 0000      		move.l	#locate(0,0,0),d0
(1)  126/    31F0 : 223C 0027 001F      		move.l	#mapsize(320,256),d1
(1)  127/    31F6 : 343C 00E0           		move.w	#VRAMTTL_PUZFONT,d2
(1)  128/    31FA : 6100 E998           		bsr	Video_LoadMap
(1)  129/    31FE : 41FA 059C           		lea	Map_Title_FG(pc),a0
(1)  130/    3202 : 203C 0000 0A01      		move.l	#locate(0,10,1),d0
(1)  131/    3208 : 223C 0015 000D      		move.l	#mapsize(176,112),d1
(1)  132/    320E : 343C 0002           		move.w	#VRAMTTL_PUZTITLE,d2
(1)  133/    3212 : 6100 E980           		bsr	Video_LoadMap
(1)  134/    3216 :                     
(1)  135/    3216 :                     ; 		moveq	#1,d3				; 	Hide the broken 2cell
(1)  136/    3216 :                     ; 		lea	(RAM_Ttle_SpriteData),a4
(1)  137/    3216 :                     ; 		move.w	#$80,d0
(1)  138/    3216 :                     ; 		move.w	#$80,d1
(1)  139/    3216 :                     ; 		move.w	#VRAMTTL_CELLHIDE|$8000+$6000,d2
(1)  140/    3216 :                     ; 		move.w	#(224/32)-1,d5
(1)  141/    3216 :                     ; 		move.w	#$0700,d4
(1)  142/    3216 :                     ; 		or.w	d3,d4
(1)  143/    3216 :                     ; .nxtone:
(1)  144/    3216 :                     ; 		move.w	d0,(a4)+
(1)  145/    3216 :                     ; 		move.w	d4,(a4)+
(1)  146/    3216 :                     ; 		move.w	d2,(a4)+
(1)  147/    3216 :                     ; 		move.w	d1,(a4)+
(1)  148/    3216 :                     ; 		add.w	#1,d3
(1)  149/    3216 :                     ; 		add.w	#1,d4
(1)  150/    3216 :                     ; 		add.w	#$20,d0
(1)  151/    3216 :                     ; 		dbf	d5,.nxtone
(1)  152/    3216 :                     
(1)  153/    3216 : 6100 E730           		bsr	Video_Update
(1)  154/    321A : 6100 0236           		bsr	Title_AnimateFg_Init
(1)  155/    321E : 46FC 2000           		move.w	#$2000,sr
(1)  156/    3222 : 41FA 0518           		lea	Pal_Title_FG(pc),a0
(1)  157/    3226 : 7000                		moveq	#0,d0
(1)  158/    3228 : 323C 002F           		move.w	#48-1,d1
(1)  159/    322C : 6100 E812           		bsr	Video_LoadPal_Fade
(1)  160/    3230 : 41FA 07D2           		lea	Pal_Title_BG(pc),a0
(1)  161/    3234 : 7030                		moveq	#$30,d0
(1)  162/    3236 : 323C 000F           		move.w	#16-1,d1
(1)  163/    323A : 6100 E804           		bsr	Video_LoadPal_Fade
(1)  164/    323E : 7000                		moveq	#0,d0
(1)  165/    3240 : 323C 0040           		move.w	#64,d1
(1)  166/    3244 : 343C 0080           		move.w	#$80,d2
(1)  167/    3248 : 6100 E80C           		bsr	Video_PalFade_In
(1)  168/    324C :                     		
(1)  169/    324C :                     ; 		move.l	#(SfxData_Blk<<16)|SfxData_Pat,d0
(1)  170/    324C :                     ; 		move.l	#($0000<<16)|SfxData_Ins,d1
(1)  171/    324C :                     ; 		move.l	#$00020002,d2
(1)  172/    324C :                     ; 		moveq	#0,d3
(1)  173/    324C :                     ; 		bsr	Sound_SetTrack
(1)  174/    324C :                     ; 		move.l	#Wav_Beibe,d0
(1)  175/    324C :                     ; 		move.l	#Wav_Beibe_e,d1
(1)  176/    324C :                     ; 		move.l	d0,d2
(1)  177/    324C :                     ; 		move.w	#$100,d3
(1)  178/    324C :                     ; 		bsr	Sound_PlayWav
(1)  179/    324C :                     		
(1)  180/    324C :                     ; ====================================================================
(1)  181/    324C :                     ; ----------------------------------------------------------------
(1)  182/    324C :                     ; Loop
(1)  183/    324C :                     ; ----------------------------------------------------------------
(1)  184/    324C :                     		
(1)  185/    324C :                     Title_Loop:
(1)  186/    324C : 3839 00C0 0004      		move.w	(vdp_ctrl),d4
(1)  187/    3252 : 0804 0003           		btst	#bitVBlnk,d4
(1)  188/    3256 : 67F4                		beq.s	Title_Loop
(1)  189/    3258 : 6100 01F8           		bsr	Title_AnimateFg
(1)  190/    325C : 6100 FD2C           		bsr	System_Input
(1)  191/    3260 : 6100 FA6C           		bsr	System_Random
(1)  192/    3264 : 06B8 0000 0001 86EA 		add.l	#1,(RAM_GlblFrameCnt).w		; Frame counter
(1)  193/    326C :                     	
(1)  194/    326C : 3839 FFFF A700      		move.w	(Controller_1+on_press).l,d4
(1)  195/    3272 : C87C 0001           		and.w	#JoyUp,d4
(1)  196/    3276 : 6712                		beq.s	.no_up
(1)  197/    3278 : 4A78 8932           		tst.w	(RAM_Titl_UsrOpt).w
(1)  198/    327C : 670C                		beq.s	.no_up
(1)  199/    327E : 0678 0010 8928      		add.w	#$10,(RAM_Tite_VerBot).w
(1)  200/    3284 : 0478 0001 8932      		sub.w	#1,(RAM_Titl_UsrOpt).w
(1)  201/    328A :                     .no_up:
(1)  202/    328A : 3839 FFFF A700      		move.w	(Controller_1+on_press).l,d4
(1)  203/    3290 : C87C 0002           		and.w	#JoyDown,d4
(1)  204/    3294 : 6714                		beq.s	.no_down
(1)  205/    3296 : 0C78 0003 8932      		cmp.w	#MAX_TITLOPT,(RAM_Titl_UsrOpt).w
(1)  206/    329C : 670C                		beq.s	.no_down
(1)  207/    329E : 0478 0010 8928      		sub.w	#$10,(RAM_Tite_VerBot).w
(1)  208/    32A4 : 0678 0001 8932      		add.w	#1,(RAM_Titl_UsrOpt).w
(1)  209/    32AA :                     .no_down:
(1)  210/    32AA :                     ; 		tst.l	(RAM_Tite_VerBotAdd).w
(1)  211/    32AA :                     ; 		beq.s	.vaddover2
(1)  212/    32AA :                     ; 		move.l	(RAM_Tite_VerBotAdd).w,d4
(1)  213/    32AA :                     ; 		add.l	d4,(RAM_Tite_VerBot).l
(1)  214/    32AA :                     ; 		sub.l	#$1000,d4
(1)  215/    32AA :                     ; ; 		bpl.s	.vaddover
(1)  216/    32AA :                     ; ; 		clr.l	d4
(1)  217/    32AA :                     ; ; .vaddover:
(1)  218/    32AA :                     ; 		move.l	d4,(RAM_Tite_VerBotAdd).w
(1)  219/    32AA :                     ; .vaddover2:
(1)  220/    32AA :                     
(1)  221/    32AA :                     	; Check START
(1)  222/    32AA : 3839 FFFF A700      		move.w	(Controller_1+on_press).l,d4
(1)  223/    32B0 : C87C 0080           		and.w	#JoyStart,d4
(1)  224/    32B4 : 6710                		beq.s	.no_start
(1)  225/    32B6 : 7000                		moveq	#0,d0
(1)  226/    32B8 : 323C 0040           		move.w	#64,d1
(1)  227/    32BC : 343C 0140           		move.w	#$140,d2
(1)  228/    32C0 : 6100 E826           		bsr	Video_PalFade_Out
(1)  229/    32C4 : 6002                		bra	TitleScr_StartGame
(1)  230/    32C6 :                     .no_start:
(1)  231/    32C6 : 6084                		bra	Title_Loop
(1)  232/    32C8 :                     		
(1)  233/    32C8 :                     ; ----------------------------------------------------------------
(1)  234/    32C8 :                     ; Game start
(1)  235/    32C8 :                     ; ----------------------------------------------------------------
(1)  236/    32C8 :                     
(1)  237/    32C8 :                     TitleScr_StartGame:
(1)  238/    32C8 : 4DF8 8424           		lea	(RAM_Glbl_PzlBoxes),a6
(1)  239/    32CC : 7000                		moveq	#0,d0
(1)  240/    32CE : 323C 00A3           		move.w	#((sizeof_Box*MAX_BOXES)/2)-1,d1
(1)  241/    32D2 :                     .clrboxes:
(1)  242/    32D2 : 3CC0                		move.w	d0,(a6)+
(1)  243/    32D4 : 51C9 FFFC           		dbf	d1,.clrboxes
(1)  244/    32D8 : 4DF8 856C           		lea	(RAM_Glbl_PzlCursors),a6
(1)  245/    32DC : 7000                		moveq	#0,d0
(1)  246/    32DE : 323C 00B7           		move.w	#((sizeof_Cursor*MAX_BOXES)/2)-1,d1
(1)  247/    32E2 :                     .clrcursors:
(1)  248/    32E2 : 3CC0                		move.w	d0,(a6)+
(1)  249/    32E4 : 51C9 FFFC           		dbf	d1,.clrcursors
(1)  250/    32E8 :                     
(1)  251/    32E8 :                     	; Make SCORE boxes
(1)  252/    32E8 : 4DF8 83D4           		lea	(RAM_Glbl_PzlScores),a6			; Box buffer
(1)  253/    32EC : 4BFA 00AA           		lea	.score_boxes(pc),a5
(1)  254/    32F0 : 3E38 8932           		move.w	(RAM_Titl_UsrOpt).w,d7			; Menu option
(1)  255/    32F4 : DE47                		add.w	d7,d7
(1)  256/    32F6 : 3E35 7000           		move.w	(a5,d7.w),d7
(1)  257/    32FA : DAC7                		adda	d7,a5
(1)  258/    32FC : 3E1D                		move.w	(a5)+,d7
(1)  259/    32FE :                     .make_score:
(1)  260/    32FE : 08EE 0007 0004      		bset	#bitScorSt_Active,scorBox_Status(a6)
(1)  261/    3304 : 2C9D                		move.l	(a5)+,scorBox_BoxAddr(a6)
(1)  262/    3306 : 3D5D 0006           		move.w	(a5)+,scorBox_X(a6)
(1)  263/    330A : 3D5D 0008           		move.w	(a5)+,scorBox_Y(a6)		
(1)  264/    330E : 3D5D 000E           		move.w	(a5)+,scorBox_Type(a6)
(1)  265/    3312 : DCFC 0010           		adda	#sizeof_ScorBox,a6
(1)  266/    3316 : 51CF FFE6           		dbf	d7,.make_score
(1)  267/    331A :                     	
(1)  268/    331A :                     	; Make USERBLOCK boxes
(1)  269/    331A : 3E1D                		move.w	(a5)+,d7
(1)  270/    331C :                     .do_box:
(1)  271/    331C : 2C5D                		move.l	(a5)+,a6
(1)  272/    331E : 2C9D                		move.l	(a5)+,box_BlockTrsh(a6)
(1)  273/    3320 : 2D5D 0004           		move.l	(a5)+,box_BlockTrsh+4(a6)
(1)  274/    3324 : 2D5D 0008           		move.l	(a5)+,box_BlockTrsh+8(a6)
(1)  275/    3328 : 3D5D 0026           		move.w	(a5)+,box_BoardX(a6)			; Board X pos
(1)  276/    332C : 3D5D 0028           		move.w	(a5)+,box_BoardY(a6)			; Board Y pos
(1)  277/    3330 : 3D5D 002A           		move.w	(a5)+,box_Width(a6)			; Box width
(1)  278/    3334 : 3D5D 002C           		move.w	(a5)+,box_Height(a6)			; Box Height (always $D)
(1)  279/    3338 : 3D5D 0048           		move.w	(a5)+,box_UserBorder(a6)		; USER border color
(1)  280/    333C : 2D7C 0000 1400 0018 		move.l	#$1400,box_YSpd(a6)			; Start Y Speed
(1)  281/    3344 : 3D7C 0006 004C      		move.w	#6,box_UserMaxIds(a6)			; Max blocks to use
(1)  282/    334A : 3D7C 0004 004A      		move.w	#4,box_UserLevel(a6)			; Max block level to start
(1)  283/    3350 : 426E 0024           		clr.w	box_Status(a6)
(1)  284/    3354 : 08EE 0007 0024      		bset	#bitPlySt_Active,box_Status(a6)		; Mark this box as active
(1)  285/    335A : 51CF FFC0           		dbf	d7,.do_box
(1)  286/    335E :                     
(1)  287/    335E :                     	; MAKE Cursors
(1)  288/    335E : 4DF8 856C           		lea	(RAM_Glbl_PzlCursors),a6		; Cursor buffer
(1)  289/    3362 : 3E1D                		move.w	(a5)+,d7
(1)  290/    3364 :                     .mkcursor:
(1)  291/    3364 : 281D                		move.l	(a5)+,d4
(1)  292/    3366 : 2A1D                		move.l	(a5)+,d5
(1)  293/    3368 : 2D44 0004           		move.l	d4,cursor_Box(a6)
(1)  294/    336C : 2C85                		move.l	d5,cursor_Control(a6)
(1)  295/    336E : 08EE 0007 0058      		bset	#bitCurSt_Active,cursor_Status(a6)
(1)  296/    3374 : 426E 004E           		clr.w	cursor_Type(a6)
(1)  297/    3378 : 0838 0000 8933      		btst	#0,(RAM_Titl_UsrOpt+1).w
(1)  298/    337E : 6706                		beq.s	.3pad
(1)  299/    3380 : 3D7C 0001 004E      		move.w	#1,cursor_Type(a6)
(1)  300/    3386 :                     .3pad:
(1)  301/    3386 : DCFC 005C           		adda	#sizeof_Cursor,a6
(1)  302/    338A : 51CF FFD8           		dbf	d7,.mkcursor
(1)  303/    338E : 381D                		move.w	(a5)+,d4
(1)  304/    3390 : 11C4 86E0           		move.b	d4,(RAM_Glbl_GameMtchFlags).w
(1)  305/    3394 : 6000 194E           		bra	MainGame_Init
(1)  306/    3398 :                     
(1)  307/    3398 :                     ; ----------------------------------------------------------------
(1)  308/    3398 :                     ; SETUP LIST FOR MENU ENTRIES
(1)  309/    3398 :                     
(1)  310/    3398 :                     	; Types: 0 - SCORE
(1)  311/    3398 :                     	;        1 - TIME (global)
(1)  312/    3398 :                     	;        2 - CHAINS
(1)  313/    3398 :                     	
(1)  314/    3398 :                     ; hardcoded if %01
(1)  315/    3398 :                     .score_boxes:
(1)  316/    3398 : 0008                		dc.w .1p_timed-.score_boxes
(1)  317/    339A : 0008                		dc.w .1p_timed-.score_boxes
(1)  318/    339C : 0050                		dc.w .vs_3pad-.score_boxes		
(1)  319/    339E : 0050                		dc.w .vs_3pad-.score_boxes
(1)  320/    33A0 :                     .1p_timed:
(1)  321/    33A0 :                     	; SCORE BOXES
(1)  322/    33A0 : 0002                		dc.w 2				; numof scoreboxes
(1)  323/    33A2 : FFFF 8424           		dc.l RAM_Glbl_PzlBoxes
(1)  324/    33A6 : 001C 0002 0000      		dc.w 28, 2, 0			; SCORE
(1)  325/    33AC : FFFF 8424           		dc.l RAM_Glbl_PzlBoxes
(1)  326/    33B0 : 001C 0004 0001      		dc.w 28, 4, 1			; TIME
(1)  327/    33B6 : FFFF 8424           		dc.l RAM_Glbl_PzlBoxes
(1)  328/    33BA : 001C 0006 0002      		dc.w 28, 6, 2			; CHAINS
(1)  329/    33C0 :                     	; USER BOXES
(1)  330/    33C0 : 0000                		dc.w 0				; numof plyrboxes
(1)  331/    33C2 : FFFF 8424           		dc.l RAM_Glbl_PzlBoxes		; BASE buffer
(1)  332/    33C6 : 0000 0000           		dc.l 0				; TARGET trash buffer(s)
(1)  333/    33CA : 0000 0000           		dc.l 0
(1)  334/    33CE : 0000 0000           		dc.l 0
(1)  335/    33D2 : 0007 0001 0006 000D 		dc.w $07,$01,$06,$0D		; Xpos, Ypos, Width, Height (ALWAYS $0D)
(1)  336/    33DA : 0000                		dc.w 0				; BORDER color (0-3)
(1)  337/    33DC :                     	; CURSORS
(1)  338/    33DC : 0000                		dc.w 0
(1)  339/    33DE : FFFF 8424           		dc.l RAM_Glbl_PzlBoxes		; CURSOR uses this box
(1)  340/    33E2 : FFFF A6FC           		dc.l Controller_1		; Controller for this cursor
(1)  341/    33E6 :                     	; MATCH SETTINGS
(1)  342/    33E6 : 0004                		dc.w MtchFlg_ComboSpdUp
(1)  343/    33E8 :                     		
(1)  344/    33E8 :                     
(1)  345/    33E8 :                     .vs_3pad:
(1)  346/    33E8 :                     	; SCORE BOXES
(1)  347/    33E8 : 0002                		dc.w 3-1
(1)  348/    33EA : FFFF 8424           		dc.l RAM_Glbl_PzlBoxes
(1)  349/    33EE : 0010 0002 0002      		dc.w $10,$02, 2				; CHAINS (left)
(1)  350/    33F4 : FFFF 8476           		dc.l RAM_Glbl_PzlBoxes+sizeof_Box
(1)  351/    33F8 : 0013 0004 0002      		dc.w $13,$04, 2				; CHAINS (right)
(1)  352/    33FE : 0000 0000           		dc.l 0
(1)  353/    3402 : 0011 0007 0001      		dc.w $11,$07, 1				; TIME
(1)  354/    3408 :                     	; USER BOXES
(1)  355/    3408 : 0001                		dc.w 2-1				; numof plyrboxes
(1)  356/    340A : FFFF 8424           		dc.l RAM_Glbl_PzlBoxes			; BASE buffer
(1)  357/    340E : FFFF 8476           		dc.l RAM_Glbl_PzlBoxes+sizeof_Box	; TARGET trash buffer(s)
(1)  358/    3412 : 0000 0000           		dc.l 0
(1)  359/    3416 : 0000 0000           		dc.l 0
(1)  360/    341A : 0001 0001 0006 000D 		dc.w $01,$01,$06,$0D			; Xpos, Ypos, Width, Height (ALWAYS $0D)
(1)  361/    3422 : 0000                		dc.w 0					; BORDER color (0-3)
(1)  362/    3424 : FFFF 8476           		dc.l RAM_Glbl_PzlBoxes+sizeof_Box	; BASE buffer
(1)  363/    3428 : FFFF 8424           		dc.l RAM_Glbl_PzlBoxes			; TARGET trash buffer(s)
(1)  364/    342C : 0000 0000           		dc.l 0
(1)  365/    3430 : 0000 0000           		dc.l 0
(1)  366/    3434 : 000D 0001 0006 000D 		dc.w $0D,$01,$06,$0D			; Xpos, Ypos, Width, Height (ALWAYS $0D)
(1)  367/    343C : 0000                		dc.w 0					; BORDER color (0-3)
(1)  368/    343E :                     	; CURSORS
(1)  369/    343E : 0001                		dc.w 2-1
(1)  370/    3440 : FFFF 8424           		dc.l RAM_Glbl_PzlBoxes			; CURSOR uses this box
(1)  371/    3444 : FFFF A6FC           		dc.l Controller_1			; Controller for this cursor
(1)  372/    3448 : FFFF 8476           		dc.l RAM_Glbl_PzlBoxes+sizeof_Box	; CURSOR uses this box
(1)  373/    344C : FFFF A702           		dc.l Controller_2			; Controller for this cursor
(1)  374/    3450 :                     	; MATCH SETTINGS
(1)  375/    3450 : 0006                		dc.w MtchFlg_ComboSpdUp|MtchFlg_TrashEnbl
(1)  376/    3452 :                     		
(1)  377/    3452 :                     ; 		lea	(RAM_Glbl_PzlBoxes),a6			; Box buffer
(1)  378/    3452 :                     ; 		lea	(RAM_Glbl_PzlCursors),a5		; Cursor buffer
(1)  379/    3452 :                     ; 		lea	(RAM_Glbl_PzlScores),a4
(1)  380/    3452 :                     ; 		lea	(Controller_1),a3			; First controller data
(1)  381/    3452 :                     ; 		move.l	a6,box_BlockTrsh(a6)			; Box target(s) to get trash (this user)
(1)  382/    3452 :                     ; 		move.w	#6,box_Width(a6)			; Box width
(1)  383/    3452 :                     ; 		move.w	#$D,box_Height(a6)			; Box Height (always $D)
(1)  384/    3452 :                     ; 		move.w	#7,box_BoardX(a6)			; Board X pos
(1)  385/    3452 :                     ; 		move.w	#1,box_BoardY(a6)			; Board Y pos
(1)  386/    3452 :                     ; 		move.l	#$1400,box_YSpd(a6)			; Start Y Speed
(1)  387/    3452 :                     ; 		move.w	#6,box_UserMaxIds(a6)			; Max blocks to use
(1)  388/    3452 :                     ; 		move.w	#4,box_UserLevel(a6)			; Max block level to start
(1)  389/    3452 :                     ; 		move.w	#0,box_UserBorder(a6)			; USER border color
(1)  390/    3452 :                     ; 		clr.w	box_Status(a6)
(1)  391/    3452 :                     ; 		bset	#bitPlySt_Active,box_Status(a6)		; Mark this box as active
(1)  392/    3452 :                     ; 		move.l	a6,cursor_Box(a5)
(1)  393/    3452 :                     ; 		move.l	a3,cursor_Control(a5)
(1)  394/    3452 :                     ; 		clr.w	cursor_X(a5)
(1)  395/    3452 :                     ; 		clr.w	cursor_Y(a5)
(1)  396/    3452 :                     ; 		bset	#bitCurSt_Active,cursor_Status(a5)
(1)  397/    3452 :                     ; ; 		move.l	#$030000,(RAM_PGame_GlblTimer).w
(1)  398/    3452 :                     ; ; 		bset	#bitMtch_TimerDir,(RAM_Glbl_GameMtchFlags).w
(1)  399/    3452 :                     ; 		bset	#bitMtch_ComboSpdUp,(RAM_Glbl_GameMtchFlags).w
(1)  400/    3452 :                     ; ; 		bset	#bitMtch_TrashEnbl,(RAM_Glbl_GameMtchFlags).w
(1)  401/    3452 :                     
(1)  402/    3452 :                     ; ====================================================================
(1)  403/    3452 :                     ; ----------------------------------------------------------------
(1)  404/    3452 :                     ; Subs
(1)  405/    3452 :                     ; ----------------------------------------------------------------
(1)  406/    3452 :                     
(1)  407/    3452 :                     ; ------------------------------------------------
(1)  408/    3452 :                     ; Animate title
(1)  409/    3452 :                     ; ------------------------------------------------
(1)  410/    3452 :                     
(1)  411/    3452 :                     Title_AnimateFg_Init:
(1)  412/    3452 :                     ; 		lea	(RAM_HorScroll+(SET_MENUTOPLINE*4)),a5
(1)  413/    3452 :                     ; 		move.w	#8-1,d7
(1)  414/    3452 :                     ; 		move.w	#0,d4
(1)  415/    3452 :                     ; .hnext:
(1)  416/    3452 :                     ; 		move.w	d4,d0
(1)  417/    3452 :                     ; 		bsr	System_SineWave
(1)  418/    3452 :                     ; 		asr.l	#2,d0
(1)  419/    3452 :                     ; 		sub.w	#$90,d0
(1)  420/    3452 :                     ; 		move.w	d0,(a5)
(1)  421/    3452 :                     ; ; 		neg.w	d0
(1)  422/    3452 :                     ; ; 		move.w	d0,4(a5)		
(1)  423/    3452 :                     ; 		add.w	#8,d4
(1)  424/    3452 :                     ; 		adda	#4,a5
(1)  425/    3452 :                     ; 		dbf	d7,.hnext
(1)  426/    3452 :                     ; 		lea	(RAM_HorScroll+((SET_MENUTOPLINE+65)*4)),a5
(1)  427/    3452 :                     ; 		move.w	#16-1,d7
(1)  428/    3452 :                     ; 		move.w	#$40,d4
(1)  429/    3452 :                     ; .hnext2:
(1)  430/    3452 :                     ; 		move.w	d4,d0
(1)  431/    3452 :                     ; 		bsr	System_SineWave
(1)  432/    3452 :                     ; 		asr.l	#3,d0
(1)  433/    3452 :                     ; 		sub.w	#$20,d0
(1)  434/    3452 :                     ; 		move.w	d0,(a5)
(1)  435/    3452 :                     ; 		add.w	#4,d4
(1)  436/    3452 :                     ; 		adda	#4,a5
(1)  437/    3452 :                     ; 		dbf	d7,.hnext2
(1)  438/    3452 :                     
(1)  439/    3452 :                     ; 		lea	(RAM_HorScroll+(SET_MENUTOPLINE*4)),a5
(1)  440/    3452 :                     ; 		move.w	#16-1,d7
(1)  441/    3452 :                     ; 		move.w	#0,d4
(1)  442/    3452 :                     ; .hnext:
(1)  443/    3452 :                     ; 		move.w	d4,d0
(1)  444/    3452 :                     ; 		bsr	System_SineWave
(1)  445/    3452 :                     ; 		asr.l	#3,d0
(1)  446/    3452 :                     ; 		sub.w	#$20,d0
(1)  447/    3452 :                     ; 		move.w	d0,(a5)
(1)  448/    3452 :                     ; 		add.w	#4,d4
(1)  449/    3452 :                     ; 		adda	#4,a5
(1)  450/    3452 :                     ; 		dbf	d7,.hnext
(1)  451/    3452 :                     ; 		lea	(RAM_HorScroll+((SET_MENUTOPLINE+65)*4)),a5
(1)  452/    3452 :                     ; 		move.w	#16-1,d7
(1)  453/    3452 :                     ; 		move.w	#$40,d4
(1)  454/    3452 :                     ; .hnext2:
(1)  455/    3452 :                     ; 		move.w	d4,d0
(1)  456/    3452 :                     ; 		bsr	System_SineWave
(1)  457/    3452 :                     ; 		asr.l	#3,d0
(1)  458/    3452 :                     ; 		sub.w	#$20,d0
(1)  459/    3452 :                     ; 		move.w	d0,(a5)
(1)  460/    3452 :                     ; 		add.w	#4,d4
(1)  461/    3452 :                     ; 		adda	#4,a5
(1)  462/    3452 :                     ; 		dbf	d7,.hnext2
(1)  463/    3452 :                     		
(1)  464/    3452 :                     Title_AnimateFg:
(1)  465/    3452 :                     
(1)  466/    3452 :                     	; Later...
(1)  467/    3452 :                     ; 		lea	(RAM_HorScroll+(SET_MENUTOPLINE*4)),a5
(1)  468/    3452 :                     ; 		move.w	#64,d7
(1)  469/    3452 :                     ; 		move.l	(RAM_Tite_HorBot),d4
(1)  470/    3452 :                     ; 		swap	d4
(1)  471/    3452 :                     ; .hnextmn:
(1)  472/    3452 :                     ; 		move.w	d4,(a5)
(1)  473/    3452 :                     ; 		adda	#4,a5
(1)  474/    3452 :                     ; 		dbf	d7,.hnextmn
(1)  475/    3452 :                     
(1)  476/    3452 : 4BF8 8000           		lea	(RAM_HorScroll),a5
(1)  477/    3456 : 3E3C 00DF           		move.w	#224-1,d7
(1)  478/    345A : 3838 8930           		move.w	(RAM_Ttle_HorBg).w,d4
(1)  479/    345E : E44C                		lsr.w	#2,d4
(1)  480/    3460 : 4444                		neg.w	d4
(1)  481/    3462 :                     .hnextfg:
(1)  482/    3462 : 3B44 0002           		move.w	d4,2(a5)
(1)  483/    3466 : DAFC 0004           		adda	#4,a5
(1)  484/    346A : 51CF FFF6           		dbf	d7,.hnextfg
(1)  485/    346E :                     
(1)  486/    346E : 4BF8 8000           		lea	(RAM_HorScroll),a5
(1)  487/    3472 : 3E3C 007A           		move.w	#SET_MENUTOPLINE-1,d7
(1)  488/    3476 : 3838 8920           		move.w	(RAM_Ttle_HorVal).w,d4
(1)  489/    347A :                     .hnext:
(1)  490/    347A : 3004                		move.w	d4,d0
(1)  491/    347C : 6100 F874           		bsr	System_SineWave
(1)  492/    3480 : EC80                		asr.l	#6,d0
(1)  493/    3482 : 3A80                		move.w	d0,(a5)
(1)  494/    3484 : DAFC 0004           		adda	#4,a5
(1)  495/    3488 : D87C 0003           		add.w	#3,d4
(1)  496/    348C : 51CF FFEC           		dbf	d7,.hnext
(1)  497/    3490 :                     		
(1)  498/    3490 : 4BF8 8380           		lea	(RAM_VerScroll),a5
(1)  499/    3494 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  500/    3498 : 3638 892E           		move.w	(RAM_Ttle_VerBg).w,d3
(1)  501/    349C : E44B                		lsr.w	#2,d3
(1)  502/    349E : 31C3 892C           		move.w	d3,(RAM_Tite_VerBgMenu).w
(1)  503/    34A2 : 3838 8924           		move.w	(RAM_Ttle_VerVal).w,d4
(1)  504/    34A6 :                     .vnext:
(1)  505/    34A6 : 3004                		move.w	d4,d0
(1)  506/    34A8 : 6100 F848           		bsr	System_SineWave
(1)  507/    34AC : EC80                		asr.l	#6,d0
(1)  508/    34AE : 4440                		neg.w	d0
(1)  509/    34B0 : 3A80                		move.w	d0,(a5)
(1)  510/    34B2 : 3B43 0002           		move.w	d3,2(a5)
(1)  511/    34B6 : DAFC 0004           		adda	#4,a5
(1)  512/    34BA : D87C 0003           		add.w	#3,d4
(1)  513/    34BE : 51CF FFE6           		dbf	d7,.vnext
(1)  514/    34C2 :                     
(1)  515/    34C2 :                     ; 		add.w	#1,(RAM_Ttle_HorBg).w
(1)  516/    34C2 :                     ; 		add.w	#1,(RAM_Ttle_VerBg).w
(1)  517/    34C2 :                     		
(1)  518/    34C2 : 0678 0002 8920      		add.w	#2,(RAM_Ttle_HorVal).w
(1)  519/    34C8 : 0678 0002 8924      		add.w	#2,(RAM_Ttle_VerVal).w
(1)  520/    34CE : 4E75                		rts
(1)  521/    34D0 :                     
(1)  522/    34D0 :                     ; ------------------------------------------------
(1)  523/    34D0 :                     
(1)  524/    34D0 :                     ShowStr_custom:
(1)  525/    34D0 : 6100 E904           		bsr	vid_PickLayer
(1)  526/    34D4 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  527/    34DA :                     .renew:
(1)  528/    34DA : 2D44 0004           		move.l	d4,4(a6)
(1)  529/    34DE :                     .loop:
(1)  530/    34DE : 7A00                		moveq	#0,d5
(1)  531/    34E0 : 1A18                		move.b	(a0)+,d5
(1)  532/    34E2 : 4A05                		tst.b	d5
(1)  533/    34E4 : 6710                		beq.s	.exit
(1)  534/    34E6 : BA3C 000A           		cmp.b	#$A,d5
(1)  535/    34EA : 6706                		beq.s	.line
(1)  536/    34EC : DA41                		add.w	d1,d5
(1)  537/    34EE : 3C85                		move.w	d5,(a6)
(1)  538/    34F0 : 60EC                		bra.s	.loop
(1)  539/    34F2 :                     .line:
(1)  540/    34F2 : D886                		add.l	d6,d4
(1)  541/    34F4 : 60E4                		bra.s	.renew
(1)  542/    34F6 :                     		
(1)  543/    34F6 :                     .exit:
(1)  544/    34F6 : 4E75                		rts
(1)  545/    34F8 :                     
(1)  546/    34F8 :                     ShowVal_custom:
(1)  547/    34F8 : 6100 E8DC           		bsr	vid_PickLayer
(1)  548/    34FC : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  549/    3502 : 2D44 0004           		move.l	d4,4(a6)
(1)  550/    3506 :                     
(1)  551/    3506 : 3A02                		move.w	d2,d5
(1)  552/    3508 : 3C3C 0003           		move.w	#3,d6
(1)  553/    350C :                     .lupn:
(1)  554/    350C : E95D                		rol.w	#4,d5
(1)  555/    350E : 3805                		move.w	d5,d4
(1)  556/    3510 : C87C 000F           		and.w	#%1111,d4
(1)  557/    3514 : B87C 000A           		cmp.w	#10,d4
(1)  558/    3518 : 6504                		bcs.s	.lowa
(1)  559/    351A : D87C 0007           		add.w	#7,d4
(1)  560/    351E :                     .lowa:
(1)  561/    351E : D841                		add.w	d1,d4
(1)  562/    3520 : 3C84                		move.w	d4,(a6)
(1)  563/    3522 : 51CE FFE8           		dbf	d6,.lupn
(1)  564/    3526 : 4E75                		rts
(1)  565/    3528 :                     
(1)  566/    3528 :                     ; SndTest_PlaySound:
(1)  567/    3528 :                     ; 		lea	list_TrackData(pc),a0
(1)  568/    3528 :                     ; 		move.l	(a0)+,d0
(1)  569/    3528 :                     ; 		move.l	(a0)+,d1
(1)  570/    3528 :                     ; 		move.l	(a0)+,d2
(1)  571/    3528 :                     ; 		moveq	#0,d3
(1)  572/    3528 :                     ; 		bra	Sound_SetTrack
(1)  573/    3528 :                     
(1)  574/    3528 :                     ; ====================================================================
(1)  575/    3528 :                     ; ----------------------------------------------------------------
(1)  576/    3528 :                     ; Interrupts
(1)  577/    3528 :                     ; ----------------------------------------------------------------
(1)  578/    3528 :                     
(1)  579/    3528 :                     Title_HBlank:
(1)  580/    3528 : 46FC 2700           		move.w	#$2700,sr
(1)  581/    352C :                     ; 		move.w	#$8228,(vdp_ctrl).l
(1)  582/    352C : 23FC 4000 0010 00C0 		move.l	#$40000010,(vdp_ctrl).l
                    0004                
(1)  583/    3536 :                     		
(1)  584/    3536 :                     	; Third 2cell is cursor
(1)  585/    3536 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  586/    353E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  587/    3546 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  588/    354E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  589/    3556 : 33F8 8928 00C0 0000 		move.w	(RAM_Tite_VerBot),(vdp_data).l
(1)  590/    355E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l		
(1)  591/    3566 :                     	rept (320/16)-3
(1)  592/    3566 :                     		move.w	#0,(vdp_data).l
(1)  593/    3566 :                     		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  594/    3566 :                     	endm
(1)  592/    3566 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    356E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    3576 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    357E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    3586 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    358E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    3596 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    359E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    35A6 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    35AE : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    35B6 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    35BE : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    35C6 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    35CE : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    35D6 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    35DE : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    35E6 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    35EE : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    35F6 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    35FE : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    3606 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    360E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    3616 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    361E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    3626 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    362E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    3636 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    363E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    3646 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    364E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    3656 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    365E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  592/    3666 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  593/    366E : 33F8 892C 00C0 0000 		move.w	(RAM_Tite_VerBgMenu),(vdp_data).l
(1)  595/    3676 : 4E73                		rte
(1)  596/    3678 :                     		
(1)  597/    3678 :                     Title_VBlank:
(1)  598/    3678 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  599/    367C : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  600/    3682 : 2CBC 8B07 8234      		move.l	#$8B078234,(a6)
(1)  601/    3688 : 3C3C 8100           		move.w	#$8100,d6
(1)  602/    368C : 1A38 A87D           		move.b	(RAM_VdpCache+1),d5
(1)  603/    3690 : 08C5 0004           		bset	#4,d5
(1)  604/    3694 : 8C05                		or.b	d5,d6
(1)  605/    3696 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)  606/    369E : 3C86                		move.w	d6,(a6)
(1)  607/    36A0 :                     
(1)  608/    36A0 : 2CBC 9401 9318      		move.l	#$94019318,(a6)			; Size $118
(1)  609/    36A6 : 2CBC 96C3 9578      		move.l	#$96009500+((RAM_Ttle_SpriteData<<7)&$FF0000)|((RAM_Ttle_SpriteData>>1)&$FF),(a6)
(1)  610/    36AC : 3CBC 977F           		move.w	#$9700|((RAM_Ttle_SpriteData>>17)&$7F),(a6)
(1)  611/    36B0 : 3CBC 7800           		move.w	#$7800,(a6)
(1)  612/    36B4 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  613/    36B8 : 0839 0000 00A1 1100 .wait:		btst	#0,(z80_bus).l
(1)  614/    36C0 : 66F6                		bne.s	.wait
(1)  615/    36C2 : 3C9F                		move.w	(sp)+,(a6)
(1)  616/    36C4 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  617/    36CA : 2CBC 96C1 95C0      		move.l	#$96009500+((RAM_VerScroll<<7)&$FF0000)|((RAM_VerScroll>>1)&$FF),(a6)
(1)  618/    36D0 : 3CBC 977F           		move.w	#$9700|((RAM_VerScroll>>17)&$7F),(a6)
(1)  619/    36D4 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  620/    36D8 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  621/    36DC : 3C9F                		move.w	(sp)+,(a6)
(1)  622/    36DE : 2CBC 9401 93C0      		move.l	#$940193C0,(a6)
(1)  623/    36E4 : 2CBC 96C0 9500      		move.l	#$96009500+((RAM_HorScroll<<7)&$FF0000)|((RAM_HorScroll>>1)&$FF),(a6)
(1)  624/    36EA : 3CBC 977F           		move.w	#$9700|((RAM_HorScroll>>17)&$7F),(a6)
(1)  625/    36EE : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  626/    36F2 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  627/    36F6 : 3C9F                		move.w	(sp)+,(a6)
(1)  628/    36F8 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  629/    36FE : 2CBC 96D3 95CD      		move.l	#$96009500|(RAM_FadeTarget<<7&$FF0000)+(RAM_FadeTarget>>1&$FF),(a6)
(1)  630/    3704 : 3CBC 977F           		move.w	#$9700|(RAM_FadeTarget>>17&$7F),(a6)
(1)  631/    3708 : 3CBC C000           		move.w	#$C000,(a6)
(1)  632/    370C : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  633/    3710 : 3C9F                		move.w	(sp)+,(a6)
(1)  634/    3712 :                     
(1)  635/    3712 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  636/    371A : 3C3C 8100           		move.w	#$8100,d6
(1)  637/    371E : 8C38 A87D           		or.b	(RAM_VdpCache+1),d6
(1)  638/    3722 : 3C86                		move.w	d6,(a6)
(1)  639/    3724 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  640/    3728 : 4E73                		rte
(1)  641/    372A :                     
(1)  642/    372A :                     ; ====================================================================
(1)  643/    372A :                     ; ----------------------------------------------------------------
(1)  644/    372A :                     ; Small data
(1)  645/    372A :                     ; ----------------------------------------------------------------
(1)  646/    372A :                     
(1)  647/    372A : 3230 3230 2047 4636 str_Copyinfo:	dc.b "2020 GF64/@_gf64",0
                    342F 405F 6766 3634 
                    00                  
(1)  648/    373B :                     		align 2
(1)  649/    373C :                     
(1)  650/    373C :                     Pal_Title_FG:
(1)  651/    373C :                     		binclude "game/graphics/title/title_pal.bin"
(1)  652/    379C :                     		align 2
(1)  653/    379C :                     Map_Title_FG:
(1)  654/    379C :                     		binclude "game/graphics/title/title_map.bin"
(1)  655/    3A04 :                     		align 2
(1)  656/    3A04 :                     Pal_Title_BG:
(1)  657/    3A04 :                     		binclude "game/graphics/title/bg_pal.bin"
(1)  658/    3A24 :                     		align 2
(1)  659/    3A24 :                     Map_Title_BG:
(1)  660/    3A24 :                     		binclude "game/graphics/title/bg_map.bin"
(1)  661/    42E4 :                     		align 2
(1)  662/    42E4 :                     Map_MenuText:
(1)  663/    42E4 :                     		binclude "game/graphics/title/menu_map.bin"
(1)  664/    4CE4 :                     		align 2
(1)  665/    4CE4 :                     		
(1)  666/    4CE4 :                     ; list_TrackData:
(1)  667/    4CE4 :                     ; 		dc.w MusicBlk_Tronik&$FFFF
(1)  668/    4CE4 :                     ; 		dc.w MusicPat_Tronik&$FFFF
(1)  669/    4CE4 :                     ; 		dc.w MusicIns_Tronik&$FFFF
(1)  670/    4CE4 :                     ; 		dc.w (ZSnd_MusicBank>>15)
(1)  671/    4CE4 :                     ; 		dc.b 0,0,0,1
(1)  672/    4CE4 :                     ; 		dc.l 0
(1)  673/    4CE4 :                     
      69/    4CE4 :                     		include	"game/code/maingame.asm"		
(1)    1/    4CE4 :                     ; ================================================================
(1)    2/    4CE4 :                     ; ------------------------------------------------------------
(1)    3/    4CE4 :                     ; MAIN PUZZLE GAME MODE
(1)    4/    4CE4 :                     ; 
(1)    5/    4CE4 :                     ; some variables/structs are located at global.asm
(1)    6/    4CE4 :                     ; ------------------------------------------------------------
(1)    7/    4CE4 :                     
(1)    8/    4CE4 :                     ; NOTES:
(1)    9/    4CE4 :                     ; Window layer positions/registers
(1)   10/    4CE4 :                     ; Single screen:
(1)   11/    4CE4 :                     ; 9202
(1)   12/    4CE4 :                     ; 929A
(1)   13/    4CE4 :                     ; Split screen:
(1)   14/    4CE4 :                     ; 9201
(1)   15/    4CE4 :                     ; 928D
(1)   16/    4CE4 :                     ; 922F
(1)   17/    4CE4 :                     ; 929B
(1)   18/    4CE4 :                     
(1)   19/    4CE4 :                     ; ====================================================================
(1)   20/    4CE4 :                     ; ----------------------------------------------------------------
(1)   21/    4CE4 :                     ; Settings
(1)   22/    4CE4 :                     ; ----------------------------------------------------------------
(1)   23/    4CE4 :                     
(1)   24/    4CE4 : =$1                 PZMODE_MARATHON		equ 1
(1)   25/    4CE4 : =$2                 PZMODE_BATTLE		equ 2
(1)   26/    4CE4 :                     
(1)   27/    4CE4 : =$3                 SET_MAXBLKMTCH		equ 3			; MAX matching blocks (Vert/Horz)
(1)   28/    4CE4 : =$8                 SET_MAXUSERBLKS		equ 8			; MAX blocks to check for matching (starting from 1)
(1)   29/    4CE4 : =$D                 SET_STRTTRSHIDS		equ $0D			; Trash blocks start from this ID
(1)   30/    4CE4 : =$12C               SET_MAXTIMEOUT		equ 60*5		; 5 seconds
(1)   31/    4CE4 :                     
(1)   32/    4CE4 : =$200               VRAMSET_CURSOR		equ $200
(1)   33/    4CE4 : =$2A0               VRAMSET_BLOCKS		equ $2A0
(1)   34/    4CE4 : =$400               VRAMSET_BOXBORDER	equ $400
(1)   35/    4CE4 : =$780               VRAMSET_CELLHIDE	equ $780
(1)   36/    4CE4 : =$790               VRAMSET_SPRSHDW		equ $790		; OR(|) $6000 in the sprite
(1)   37/    4CE4 : =$7A0               VRAMSET_SPRHIGH		equ $7A0		; OR(|) $6000 in the sprite
(1)   38/    4CE4 :                     
(1)   39/    4CE4 :                     ; ***HARDCODED***
(1)   40/    4CE4 : =$20                MAX_BOXWIDTH		equ 16*2		; value*2, blocks are WORD sized
(1)   41/    4CE4 : =$40                MAX_BOXHEIGHT		equ 32*2		; Divided by BLOCKS and TRASH
(1)   42/    4CE4 :                     
(1)   43/    4CE4 : =$3E00              BLKDEL_MIDANIM		equ $3E00		; midanimation
(1)   44/    4CE4 : =$5000              BLKDEL_TIMEOUT		equ $5000		; END
(1)   45/    4CE4 :                     
(1)   46/    4CE4 : =$5100              BLKROLL_STAY		equ $5100		; START
(1)   47/    4CE4 : =$7000              BLKROLL_FALL		equ $7000		; END
(1)   48/    4CE4 :                     
(1)   49/    4CE4 :                     ; ====================================================================
(1)   50/    4CE4 :                     ; ----------------------------------------------------------------
(1)   51/    4CE4 :                     ; Structs
(1)   52/    4CE4 :                     ; ----------------------------------------------------------------
(1)   53/    4CE4 :                     
(1)   54/    4CE4 :                     ; moved to global.asm
(1)   55/    4CE4 :                     			
(1)   56/    4CE4 :                     ; ====================================================================
(1)   57/    4CE4 :                     ; ----------------------------------------------------------------
(1)   58/    4CE4 :                     ; Variables
(1)   59/    4CE4 :                     ; ----------------------------------------------------------------
(1)   60/    4CE4 :                     
(1)   61/    4CE4 : =$8000              blkflg_Draw		equ $8000		; Don't change
(1)   62/    4CE4 : =$40                blkflg_Fall		equ $0040		; full value of bitBlkFlg_Match
(1)   63/    4CE4 :                     
(1)   64/    4CE4 : =$7                 bitBlkFlg_Match		equ 7			; $80
(1)   65/    4CE4 : =$6                 bitBlkFlg_Fall		equ 6			; $40
(1)   66/    4CE4 : =$5                 bitBlkFlg_Chain		equ 5			; $20
(1)   67/    4CE4 :                     
(1)   68/    4CE4 :                     ; ====================================================================
(1)   69/    4CE4 :                     ; ----------------------------------------------------------------
(1)   70/    4CE4 :                     ; RAM
(1)   71/    4CE4 :                     ; ----------------------------------------------------------------
(1)   72/    4CE4 :                     
(1)   73/    4CE4 : (MACRO)             			struct $FF0000
(1)   73/    4CE4 : =$4CE4              GLBL_LASTPC     set *
(1)   73/    4CE4 : =$4CE4              GLBL_LASTORG    set *
(1)   73/    4CE4 :                                     dephase
(1)   73/  FF0000 :                                     phase $FF0000
(1)   74/  FF0000 :                     RAM_PGame_BlockData	ds.w (MAX_BOXWIDTH*MAX_BOXHEIGHT)*MAX_BOXES
(1)   75/  FF4000 : (MACRO)             			finish
(1)   75/  FF0000 :                                     !org GLBL_LASTORG
(1)   75/    4CE4 :                                     phase GLBL_LASTPC
(1)   76/    4CE4 :                     
(1)   77/    4CE4 :                     			
(1)   78/    4CE4 : (MACRO)             			struct RAM_Local
(1)   78/    4CE4 : =$4CE4              GLBL_LASTPC     set *
(1)   78/    4CE4 : =$4CE4              GLBL_LASTORG    set *
(1)   78/    4CE4 :                                     dephase
(1)   78/FFFFFFFFFFFF86F0 :                                     phase RAM_LOCAL
(1)   79/FFFFFFFFFFFF86F0 :                     RAM_PGame_YScrl_Main	ds.l 336/16
(1)   80/FFFFFFFFFFFF8744 :                     RAM_PGame_Yscrl_Sub	ds.l 336/16
(1)   81/FFFFFFFFFFFF8798 :                     RAM_PGame_XAnimBuff	ds.l 224
(1)   82/FFFFFFFFFFFF8B18 :                     RAM_PGame_YAnimBuff	ds.l 336/16
(1)   83/FFFFFFFFFFFF8B6C :                     RAM_PGame_GlblTimer	ds.l 1
(1)   84/FFFFFFFFFFFF8B70 :                     RAM_PGame_BgScrlX	ds.w 1			; XXXX
(1)   85/FFFFFFFFFFFF8B72 :                     RAM_PGame_BgScrlY	ds.w 1			; XXXX
(1)   86/FFFFFFFFFFFF8B74 :                     RAM_PGame_SpriteData	ds.w 4*70
(1)   87/FFFFFFFFFFFF8DA4 :                     RAM_PGame_HintCount	ds.w 1
(1)   88/FFFFFFFFFFFF8DA6 :                     RAM_PGame_SplitMode	ds.w 1
(1)   89/FFFFFFFFFFFF8DA8 :                     RAM_PGame_StartCount	ds.w 1			; Countdown before starting
(1)   90/FFFFFFFFFFFF8DAA :                     RAM_PGame_CursorFrame	ds.w 1			; 0 or 1
(1)   91/FFFFFFFFFFFF8DAC :                     RAM_PGame_CursorTimer	ds.w 1
(1)   92/FFFFFFFFFFFF8DAE :                     RAM_PGame_DbgColor	ds.w 1
(1)   93/FFFFFFFFFFFF8DB0 :                     RAM_PGame_VInt		ds.w 1
(1)   94/FFFFFFFFFFFF8DB2 :                     RAM_PGame_PlyrsOn	ds.w 1			; NUM of active players
(1)   95/FFFFFFFFFFFF8DB4 :                     RAM_PGame_MatchStrtTime	ds.w 1			; Timer before starting
(1)   96/FFFFFFFFFFFF8DB6 :                     RAM_PGame_GameMode	ds.w 1
(1)   97/FFFFFFFFFFFF8DB8 :                     RAM_PGame_Sound		ds.w 1
(1)   98/FFFFFFFFFFFF8DBA :                     sizeof_PGame		ds.l 0
(1)   99/FFFFFFFFFFFF8DBC : (MACRO)             			finish
(1)   99/FFFFFFFFFFFF86F0 :                                     !org GLBL_LASTORG
(1)   99/    4CE4 :                                     phase GLBL_LASTPC
(1)  100/    4CE4 :                     
(1)  101/    4CE4 :                     ; 	if MOMPASS=1
(1)  102/    4CE4 :                     ; 	message "MainGame Screen uses: \{((sizeof_PGame-RAM_Local)&$FFFFFF)}"
(1)  103/    4CE4 :                     ; 	endif
(1)  104/    4CE4 :                     	
(1)  105/    4CE4 :                     ; ====================================================================
(1)  106/    4CE4 :                     ; ----------------------------------------------------------------
(1)  107/    4CE4 :                     ; Init
(1)  108/    4CE4 :                     ; ----------------------------------------------------------------
(1)  109/    4CE4 :                     
(1)  110/    4CE4 :                     MainGame_Init:
(1)  111/    4CE4 : 46FC 2700           		move.w	#$2700,sr
(1)  112/    4CE8 : 6100 CC7E           		bsr	Video_Clear		; Clear ALL VRAM
(1)  113/    4CEC :                     
(1)  114/    4CEC : 303C 1111           		move.w	#$1111,d0			; 2cell border
(1)  115/    4CF0 : 323C 03FF           		move.w	#(16*$40)-1,d1
(1)  116/    4CF4 : 343C F000           		move.w	#VRAMSET_CELLHIDE*$20,d2
(1)  117/    4CF8 : 6100 D1B4           		bsr	Video_Fill
(1)  118/    4CFC : 303C EEEE           		move.w	#$EEEE,d0			; Shadow sprite tiles	
(1)  119/    4D00 : 323C 03FF           		move.w	#(16*$40)-1,d1
(1)  120/    4D04 : 343C F400           		move.w	#VRAMSET_SPRHIGH*$20,d2
(1)  121/    4D08 : 6100 D1A4           		bsr	Video_Fill
(1)  122/    4D0C : 303C FFFF           		move.w	#$FFFF,d0			; Highlight sprite tiles	
(1)  123/    4D10 : 323C 03FF           		move.w	#(16*$40)-1,d1
(1)  124/    4D14 : 343C F200           		move.w	#VRAMSET_SPRSHDW*$20,d2
(1)  125/    4D18 : 6100 D194           		bsr	Video_Fill
(1)  126/    4D1C : 7000                		moveq	#0,d0
(1)  127/    4D1E : 6100 D0B6           		bsr	vid_PickLayer
(1)  128/    4D22 : 4DF9 00C0 0000      		lea	(vdp_data),a6			; Fill HiPrio bit to all the FG layer
(1)  129/    4D28 : 2D44 0004           		move.l	d4,4(a6)
(1)  130/    4D2C : 243C 8000 8000      		move.l	#$80008000,d2
(1)  131/    4D32 : 323C 03FF           		move.w	#$7FF/2,d1
(1)  132/    4D36 :                     .hiprio:
(1)  133/    4D36 : 2C82                		move.l	d2,(a6)
(1)  134/    4D38 : 51C9 FFFC           		dbf	d1,.hiprio
(1)  135/    4D3C : 203C 0002 0000      		move.l	#locate(2,0,0),d0		; Now to BG layer
(1)  136/    4D42 : 6100 D092           		bsr	vid_PickLayer
(1)  137/    4D46 : 2D44 0004           		move.l	d4,4(a6)
(1)  138/    4D4A : 323C 03FF           		move.w	#$7FF/2,d1
(1)  139/    4D4E :                     .hiprio2:
(1)  140/    4D4E : 2C82                		move.l	d2,(a6)
(1)  141/    4D50 : 51C9 FFFC           		dbf	d1,.hiprio2
(1)  142/    4D54 : 2D7C 6000 0002 0004 		move.l	#$60000002,4(a6)		; HiPrio to splitscreen layer at $A000
(1)  143/    4D5C : 323C 03FF           		move.w	#$7FF/2,d1
(1)  144/    4D60 :                     .hiprio3:
(1)  145/    4D60 : 2C82                		move.l	d2,(a6)
(1)  146/    4D62 : 51C9 FFFC           		dbf	d1,.hiprio3
(1)  147/    4D66 : 42B9 FFFF 8B74      		clr.l	(RAM_PGame_SpriteData).l
(1)  148/    4D6C : 42B9 FFFF 8B78      		clr.l	(RAM_PGame_SpriteData+4).l
(1)  149/    4D72 :                     		
(1)  150/    4D72 : 42B9 FFFF 8B70      		clr.l	(RAM_PGame_BgScrlX).l
(1)  151/    4D78 : 42B9 FFFF 8B72      		clr.l	(RAM_PGame_BgScrlY).l
(1)  152/    4D7E : 11FC 0089 A888      		move.b	#%10001001,(RAM_VdpCache+$C).w		; H40 + shadow mode
(1)  153/    4D84 : 11FC 006F A886      		move.b	#$6F,(RAM_VdpCache+$A).w		; Hint value 1/2 screen
(1)  154/    4D8A : 21FC 0000 71F2 A6F2 		move.l	#MainGame_HBlank,(RAM_GoToHBlnk+2).w
(1)  155/    4D92 : 4A78 8DA6           		tst.w	(RAM_PGame_SplitMode).w
(1)  156/    4D96 : 6714                		beq.s	.plyrloop
(1)  157/    4D98 : 0038 0006 A888      		or.b	#%00000110,(RAM_VdpCache+$C).w
(1)  158/    4D9E : 11FC 0037 A886      		move.b	#$37,(RAM_VdpCache+$A).w		; Hint value 1/4 screen
(1)  159/    4DA4 : 21FC 0000 720E A6F2 		move.l	#MainGame_HBlank_2P,(RAM_GoToHBlnk+2).w
(1)  160/    4DAC :                     .plyrloop:
(1)  161/    4DAC : 21FC 0000 4E70 A6F8 		move.l	#MainGame_VBlank,(RAM_GoToVBlnk+2).w
(1)  162/    4DB4 : 0038 0010 A87C      		or.b	#%00010000,(RAM_VdpCache).w		; Enable HBlank interrupt
(1)  163/    4DBA : 0038 0020 A87D      		or.b	#%00100000,(RAM_VdpCache+1).w		; Enable VBlank interrupt
(1)  164/    4DC0 : 11FC 0000 A883      		move.b	#$00,(RAM_VdpCache+7).w			; BG color $30
(1)  165/    4DC6 : 11FC 0007 A887      		move.b	#%111,(RAM_VdpCache+$B).w		; Scroll type: Horz LINE, Vert 2CELL
(1)  166/    4DCC :                     
(1)  167/    4DCC : 203C 0000 9400      		move.l	#Art_BlockPzes,d0
(1)  168/    4DD2 : 323C 2000           		move.w	#(Art_BlockPzes_e-Art_BlockPzes),d1
(1)  169/    4DD6 : 343C 02A0           		move.w	#VRAMSET_BLOCKS,d2
(1)  170/    4DDA : 6100 D1CC           		bsr	Video_LoadArt
(1)  171/    4DDE : 203C 0000 B400      		move.l	#Art_PlyrBorders,d0
(1)  172/    4DE4 : 323C 1800           		move.w	#(Art_PlyrBorders_e-Art_PlyrBorders),d1
(1)  173/    4DE8 : 343C 0400           		move.w	#VRAMSET_BOXBORDER,d2
(1)  174/    4DEC : 6100 D1BA           		bsr	Video_LoadArt
(1)  175/    4DF0 : 203C 0000 8000      		move.l	#Art_PlyrCursor,d0
(1)  176/    4DF6 : 323C 1400           		move.w	#(Art_PlyrCursor_e-Art_PlyrCursor),d1
(1)  177/    4DFA : 343C 0200           		move.w	#VRAMSET_CURSOR,d2
(1)  178/    4DFE : 6100 D1A8           		bsr	Video_LoadArt
(1)  179/    4E02 : 6100 01A2           		bsr	PzlGame_InitCursors
(1)  180/    4E06 : 6100 01BE           		bsr	PzlGame_MakeBoxes
(1)  181/    4E0A : 6100 06CA           		bsr	PzlGame_LoadScores
(1)  182/    4E0E : 6100 22A4           		bsr	PzlGame_AnimateBg_Init
(1)  183/    4E12 : 6100 0806           		bsr	PzlGame_LoadBackgrnd
(1)  184/    4E16 : 31FC 0100 8DB4      		move.w	#$100,(RAM_PGame_MatchStrtTime).w
(1)  185/    4E1C :                     
(1)  186/    4E1C : 41FA 2476           		lea	Pal_BlockPzes(pc),a0
(1)  187/    4E20 : 7010                		moveq	#$10,d0
(1)  188/    4E22 : 323C 002F           		move.w	#47,d1
(1)  189/    4E26 : 6100 CC18           		bsr	Video_LoadPal_Fade
(1)  190/    4E2A : 6100 CB1C           		bsr	Video_Update				; Update VDP registers
(1)  191/    4E2E : 46FC 2000           		move.w	#$2000,sr
(1)  192/    4E32 : 7000                		moveq	#0,d0
(1)  193/    4E34 : 323C 0040           		move.w	#64,d1
(1)  194/    4E38 : 343C 0010           		move.w	#$10,d2
(1)  195/    4E3C : 6100 CC18           		bsr	Video_PalFade_In
(1)  196/    4E40 :                     
(1)  197/    4E40 :                     ; ====================================================================
(1)  198/    4E40 :                     ; ----------------------------------------------------------------
(1)  199/    4E40 :                     ; Loop
(1)  200/    4E40 :                     ; ----------------------------------------------------------------
(1)  201/    4E40 :                     
(1)  202/    4E40 :                     ; ------------------------------------------------
(1)  203/    4E40 :                     
(1)  204/    4E40 :                     MainGame_Loop:
(1)  205/    4E40 : 31FC 0001 8DB0      		move.w	#1,(RAM_PGame_VInt).w
(1)  206/    4E46 : 6100 DE86           		bsr	System_Random
(1)  207/    4E4A : 6100 228C           		bsr	PzlGame_AnimateBg
(1)  208/    4E4E : 4A78 8DB0           .loop:		tst.w	(RAM_PGame_Vint).w
(1)  209/    4E52 : 66FA                		bne.s	.loop
(1)  210/    4E54 : 4A78 8DB4           		tst.w	(RAM_PGame_MatchStrtTime).w
(1)  211/    4E58 : 6708                		beq.s	.canrendr
(1)  212/    4E5A : 0478 0001 8DB4      		sub.w	#1,(RAM_PGame_MatchStrtTime).w
(1)  213/    4E60 : 66DE                		bne.s	MainGame_Loop
(1)  214/    4E62 :                     .canrendr:
(1)  215/    4E62 : 6100 1800           		bsr	PzlGame_PlayerInputs
(1)  216/    4E66 :                     
(1)  217/    4E66 :                     ; ------------------------------------------------
(1)  218/    4E66 :                     ; While rendering
(1)  219/    4E66 :                     ; ------------------------------------------------
(1)  220/    4E66 :                     
(1)  221/    4E66 : 6100 0E24           		bsr	PzlGame_UpdateBoxes
(1)  222/    4E6A : 6100 1C1C           		bsr	PzlGame_MkSwapAndSpr
(1)  223/    4E6E : 60D0                		bra	MainGame_Loop
(1)  224/    4E70 :                     
(1)  225/    4E70 :                     ; ====================================================================
(1)  226/    4E70 :                     ; ----------------------------------------------------------------
(1)  227/    4E70 :                     ; VBlank
(1)  228/    4E70 :                     ; ----------------------------------------------------------------
(1)  229/    4E70 :                     
(1)  230/    4E70 :                     ; ------------------------------------------------
(1)  231/    4E70 :                     ; Inside VBlank
(1)  232/    4E70 :                     ; ------------------------------------------------
(1)  233/    4E70 :                     
(1)  234/    4E70 :                     MainGame_VBlank:
(1)  235/    4E70 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  236/    4E74 : 46FC 2700           		move.w	#$2700,sr
(1)  237/    4E78 : 616A                		bsr	PzlGame_DefVBlank
(1)  238/    4E7A :                     ; 		move.l	#$C0000000,(a6)
(1)  239/    4E7A :                     ; 		move.w	#$080,(a5)
(1)  240/    4E7A :                     
(1)  241/    4E7A :                     ; ------------------------------------
(1)  242/    4E7A :                     ; Draw requests
(1)  243/    4E7A :                     ; ------------------------------------
(1)  244/    4E7A :                     
(1)  245/    4E7A : 4A78 8DB4           		tst.w	(RAM_PGame_MatchStrtTime).w
(1)  246/    4E7E : 6604                		bne.s	.wait_match
(1)  247/    4E80 : 6100 2190           		bsr	PzlGame_BcdTimer_Up
(1)  248/    4E84 :                     .wait_match:
(1)  249/    4E84 : 4DF8 8424           		lea	(RAM_Glbl_PzlBoxes),a6			; *** Draw players blocks ***
(1)  250/    4E88 : 47FA 2486           		lea	vramList_MainBlocks(pc),a3
(1)  251/    4E8C : 6100 07E8           		bsr	PzlVint_PlyrDrwTasks
(1)  252/    4E90 : DCFC 0052           		adda 	#sizeof_Box,a6
(1)  253/    4E94 : 6100 07E0           		bsr	PzlVint_PlyrDrwTasks
(1)  254/    4E98 : DCFC 0052           		adda 	#sizeof_Box,a6
(1)  255/    4E9C : 6100 07D8           		bsr	PzlVint_PlyrDrwTasks
(1)  256/    4EA0 : DCFC 0052           		adda 	#sizeof_Box,a6
(1)  257/    4EA4 : 6100 07D0           		bsr	PzlVint_PlyrDrwTasks
(1)  258/    4EA8 : 4DF8 83D4           		lea	(RAM_Glbl_PzlScores),a6
(1)  259/    4EAC : 6100 0C4E           		bsr	PzlGame_UpdScores
(1)  260/    4EB0 : DCFC 0010           		adda	#sizeof_ScorBox,a6
(1)  261/    4EB4 : 6100 0C46           		bsr	PzlGame_UpdScores
(1)  262/    4EB8 : DCFC 0010           		adda	#sizeof_ScorBox,a6
(1)  263/    4EBC : 6100 0C3E           		bsr	PzlGame_UpdScores
(1)  264/    4EC0 : DCFC 0010           		adda	#sizeof_ScorBox,a6
(1)  265/    4EC4 : 6100 0C36           		bsr	PzlGame_UpdScores
(1)  266/    4EC8 :                     
(1)  267/    4EC8 : 06B8 0000 0001 86EA 		add.l	#1,(RAM_GlblFrameCnt).w		; Frame counter
(1)  268/    4ED0 : 4278 8DA4           		clr.w	(RAM_PGame_HintCount).w
(1)  269/    4ED4 : 31FC 0000 8DB0      		move.w	#0,(RAM_PGame_VInt).w
(1)  270/    4EDA : 46FC 2000           		move.w	#$2000,sr
(1)  271/    4EDE : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  272/    4EE2 : 4E73                		rte
(1)  273/    4EE4 :                     
(1)  274/    4EE4 :                     ; ------------------------------------
(1)  275/    4EE4 :                     ; MAIN Game modes
(1)  276/    4EE4 :                     ; ------------------------------------
(1)  277/    4EE4 :                     
(1)  278/    4EE4 :                     ; ------------------------------------
(1)  279/    4EE4 :                     ; Default visual tasks
(1)  280/    4EE4 :                     ; 
(1)  281/    4EE4 :                     ; a6 - vdp_ctrl
(1)  282/    4EE4 :                     ; a5 - vdp_data
(1)  283/    4EE4 :                     ; ------------------------------------
(1)  284/    4EE4 :                     
(1)  285/    4EE4 :                     PzlGame_DefVBlank:
(1)  286/    4EE4 : 6100 E0A4           		bsr	System_Input			; Read input
(1)  287/    4EE8 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  288/    4EEE : 4BF9 00C0 0000      		lea	(vdp_data),a5
(1)  289/    4EF4 : 383C 9201           		move.w	#$9201,d4			; Return TOP Window
(1)  290/    4EF8 : 4A78 8DA6           		tst.w	(RAM_PGame_SplitMode).w
(1)  291/    4EFC : 6604                		bne.s	.nowndwtop
(1)  292/    4EFE : D87C 0001           		add.w	#1,d4				; $9202
(1)  293/    4F02 :                     .nowndwtop:
(1)  294/    4F02 : 3C84                		move.w	d4,(a6)
(1)  295/    4F04 : 3CBC 8230           		move.w	#$8230,(a6)			; VDP: Return PLANEA to $C000
(1)  296/    4F08 : 3C3C 8100           		move.w	#$8100,d6
(1)  297/    4F0C : 1A38 A87D           		move.b	(RAM_VdpCache+1),d5
(1)  298/    4F10 : 08C5 0004           		bset	#4,d5
(1)  299/    4F14 : 8C05                		or.b	d5,d6
(1)  300/    4F16 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)  301/    4F1E : 3C86                		move.w	d6,(a6)
(1)  302/    4F20 : 2CBC 9401 9318      		move.l	#$94019318,(a6)			; Size $118
(1)  303/    4F26 : 2CBC 96C5 95BA      		move.l	#$96009500+((RAM_PGame_SpriteData<<7)&$FF0000)|((RAM_PGame_SpriteData>>1)&$FF),(a6)
(1)  304/    4F2C : 3CBC 977F           		move.w	#$9700|((RAM_PGame_SpriteData>>17)&$7F),(a6)
(1)  305/    4F30 : 3CBC 7800           		move.w	#$7800,(a6)
(1)  306/    4F34 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  307/    4F38 : 0839 0000 00A1 1100 .wait:		btst	#0,(z80_bus).l
(1)  308/    4F40 : 66F6                		bne.s	.wait
(1)  309/    4F42 : 3C9F                		move.w	(sp)+,(a6)
(1)  310/    4F44 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  311/    4F4A : 2CBC 96C3 9578      		move.l	#$96009500+((RAM_PGame_YScrl_Main<<7)&$FF0000)|((RAM_PGame_YScrl_Main>>1)&$FF),(a6)
(1)  312/    4F50 : 3CBC 977F           		move.w	#$9700|((RAM_PGame_YScrl_Main>>17)&$7F),(a6)
(1)  313/    4F54 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  314/    4F58 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  315/    4F5C : 3C9F                		move.w	(sp)+,(a6)
(1)  316/    4F5E : 2CBC 9401 93C0      		move.l	#$940193C0,(a6)
(1)  317/    4F64 : 2CBC 96C0 9500      		move.l	#$96009500+((RAM_HorScroll<<7)&$FF0000)|((RAM_HorScroll>>1)&$FF),(a6)
(1)  318/    4F6A : 3CBC 977F           		move.w	#$9700|((RAM_HorScroll>>17)&$7F),(a6)
(1)  319/    4F6E : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  320/    4F72 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  321/    4F76 : 3C9F                		move.w	(sp)+,(a6)
(1)  322/    4F78 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  323/    4F7E : 2CBC 96D3 95CD      		move.l	#$96009500|(RAM_FadeTarget<<7&$FF0000)+(RAM_FadeTarget>>1&$FF),(a6)
(1)  324/    4F84 : 3CBC 977F           		move.w	#$9700|(RAM_FadeTarget>>17&$7F),(a6)
(1)  325/    4F88 : 3CBC C000           		move.w	#$C000,(a6)
(1)  326/    4F8C : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  327/    4F90 : 3C9F                		move.w	(sp)+,(a6)
(1)  328/    4F92 :                     		
(1)  329/    4F92 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  330/    4F9A : 3C3C 8100           		move.w	#$8100,d6
(1)  331/    4F9E : 8C38 A87D           		or.b	(RAM_VdpCache+1),d6
(1)  332/    4FA2 : 3C86                		move.w	d6,(a6)
(1)  333/    4FA4 : 4E75                		rts
(1)  334/    4FA6 :                     
(1)  335/    4FA6 :                     ; ====================================================================
(1)  336/    4FA6 :                     ; ----------------------------------------------------------------
(1)  337/    4FA6 :                     ; Subs
(1)  338/    4FA6 :                     ; ----------------------------------------------------------------
(1)  339/    4FA6 :                     
(1)  340/    4FA6 :                     ; --------------------------------------------------------
(1)  341/    4FA6 :                     ; Init player cursors
(1)  342/    4FA6 :                     ; --------------------------------------------------------
(1)  343/    4FA6 :                     
(1)  344/    4FA6 :                     PzlGame_InitCursors:
(1)  345/    4FA6 : 4DF8 856C           		lea	(RAM_Glbl_PzlCursors),a6
(1)  346/    4FAA : 7000                		moveq	#0,d0
(1)  347/    4FAC : 3E3C 0003           		move.w	#MAX_BOXES-1,d7
(1)  348/    4FB0 :                     .clrcursors:
(1)  349/    4FB0 : 426E 0052           		clr.w	cursor_X(a6)
(1)  350/    4FB4 : 426E 0054           		clr.w	cursor_Y(a6)
(1)  351/    4FB8 : 426E 004C           		clr.w	cursor_SwapMode(a6)
(1)  352/    4FBC : DCFC 005C           		adda	#sizeof_Cursor,a6
(1)  353/    4FC0 : 51CF FFEE           		dbf	d7,.clrcursors
(1)  354/    4FC4 : 4E75                		rts
(1)  355/    4FC6 :                     
(1)  356/    4FC6 :                     ; --------------------------------------------------------
(1)  357/    4FC6 :                     ; Init block boxes
(1)  358/    4FC6 :                     ; --------------------------------------------------------
(1)  359/    4FC6 :                     
(1)  360/    4FC6 :                     PzlGame_MakeBoxes:
(1)  361/    4FC6 : 7000                		moveq	#0,d0
(1)  362/    4FC8 : 41F8 86F0           		lea	(RAM_PGame_YScrl_Main),a0
(1)  363/    4FCC : 43F8 8744           		lea	(RAM_PGame_Yscrl_Sub),a1
(1)  364/    4FD0 : 45F8 8B18           		lea	(RAM_PGame_YAnimBuff),a2
(1)  365/    4FD4 : 323C 0014           		move.w	#(336/16)-1,d1
(1)  366/    4FD8 :                     .yloop:
(1)  367/    4FD8 : 20C0                		move.l	d0,(a0)+
(1)  368/    4FDA : 22C0                		move.l	d0,(a1)+
(1)  369/    4FDC : 24C0                		move.l	d0,(a2)+
(1)  370/    4FDE : 51C9 FFF8           		dbf	d1,.yloop
(1)  371/    4FE2 : 41F8 8798           		lea	(RAM_PGame_XAnimBuff),a0
(1)  372/    4FE6 : 43F8 8000           		lea	(RAM_HorScroll),a1
(1)  373/    4FEA : 323C 00DF           		move.w	#(224)-1,d1
(1)  374/    4FEE :                     .xloop:
(1)  375/    4FEE : 20C0                		move.l	d0,(a0)+
(1)  376/    4FF0 : 22C0                		move.l	d0,(a1)+
(1)  377/    4FF2 : 51C9 FFFA           		dbf	d1,.xloop
(1)  378/    4FF6 :                     
(1)  379/    4FF6 : 41F8 8424           		lea	(RAM_Glbl_PzlBoxes),a0			; Draw box borders
(1)  380/    4FFA : 47F9 00C0 0000      		lea	(vdp_data),a3
(1)  381/    5000 : 363C 0003           		move.w	#MAX_BOXES-1,d3
(1)  382/    5004 :                     .plyrloop:
(1)  383/    5004 : 0828 0007 0024      		btst	#bitPlySt_Active,box_Status(a0)
(1)  384/    500A : 6700 02CC           		beq	.no_exupdwn
(1)  385/    500E : 7000                		moveq	#0,d0
(1)  386/    5010 : 2140 0010           		move.l	d0,box_YScrl(a0)
(1)  387/    5014 : 2140 0014           		move.l	d0,box_YScrl_old(a0)
(1)  388/    5018 : 3140 003A           		move.w	d0,box_YShake(a0)
(1)  389/    501C : 08A8 0002 0024      		bclr	#bitPlySt_GameOver,box_Status(a0)
(1)  390/    5022 : 08A8 0000 0024      		bclr	#bitPlySt_MidSwapStop,box_Status(a0)
(1)  391/    5028 : 42A8 0010           		clr.l	box_YScrl(a0)
(1)  392/    502C : 4268 0034           		clr.w	box_NumMtchBlk(a0)
(1)  393/    5030 : 4268 0030           		clr.w	box_NumMtchAdd(a0)
(1)  394/    5034 : 4268 003E           		clr.w	box_TrshReq(a0)
(1)  395/    5038 : 4268 0038           		clr.w	box_ComboCntShow(a0)
(1)  396/    503C : 42A8 0010           		clr.l	box_YScrl(a0)
(1)  397/    5040 : 42A8 0014           		clr.l	box_YScrl_old(a0)
(1)  398/    5044 : 4268 003A           		clr.w	box_YShake(a0)
(1)  399/    5048 : 0678 0001 8DB2      		add.w	#1,(RAM_PGame_PlyrsOn).w
(1)  400/    504E :                     		
(1)  401/    504E :                     	; BIG routine to draw
(1)  402/    504E :                     	; player borders
(1)  403/    504E : 49FA 2380           		lea	Map_PlyrBrdr(pc),a4
(1)  404/    5052 : 0C68 000F 0028      		cmp.w	#15,box_BoardY(a0)
(1)  405/    5058 : 6C00 014E           		bge	.do_double_res
(1)  406/    505C :                     .single_only:							; Single resolution mode
(1)  407/    505C : 203C 0002 0000      		move.l	#locate(2,0,0),d0
(1)  408/    5062 : 3828 0028           		move.w	box_BoardY(a0),d4
(1)  409/    5066 : 987C 0001           		sub.w	#1,d4
(1)  410/    506A : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1)  411/    5072 : 6602                		bne.s	.nodbleytp
(1)  412/    5074 : D844                		add.w	d4,d4
(1)  413/    5076 :                     .nodbleytp:
(1)  414/    5076 : C8BC 0000 00FF      		and.l	#$FF,d4
(1)  415/    507C : 8084                		or.l	d4,d0
(1)  416/    507E : 3828 0026           		move.w	box_BoardX(a0),d4
(1)  417/    5082 : 987C 0001           		sub.w	#1,d4
(1)  418/    5086 : D844                		add.w	d4,d4
(1)  419/    5088 : E14C                		lsl.w	#8,d4
(1)  420/    508A : C8BC 0000 FF00      		and.l	#$00FF00,d4
(1)  421/    5090 : 8084                		or.l	d4,d0
(1)  422/    5092 : 6100 CD42           		bsr	vid_PickLayer
(1)  423/    5096 : 6100 0386           		bsr	.brdr_dotopbotm
(1)  424/    509A : 203C 0002 0000      		move.l	#locate(2,0,0),d0
(1)  425/    50A0 : 3828 0028           		move.w	box_BoardY(a0),d4
(1)  426/    50A4 : D868 002C           		add.w	box_Height(a0),d4
(1)  427/    50A8 : 987C 0001           		sub.w	#1,d4
(1)  428/    50AC : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1)  429/    50B4 : 6602                		bne.s	.nodbleybt
(1)  430/    50B6 : D844                		add.w	d4,d4
(1)  431/    50B8 :                     .nodbleybt:
(1)  432/    50B8 : C8BC 0000 00FF      		and.l	#$FF,d4
(1)  433/    50BE : 8084                		or.l	d4,d0
(1)  434/    50C0 : 3828 0026           		move.w	box_BoardX(a0),d4
(1)  435/    50C4 : 987C 0001           		sub.w	#1,d4
(1)  436/    50C8 : D844                		add.w	d4,d4
(1)  437/    50CA : E14C                		lsl.w	#8,d4
(1)  438/    50CC : C8BC 0000 FF00      		and.l	#$00FF00,d4
(1)  439/    50D2 : 8084                		or.l	d4,d0
(1)  440/    50D4 : 6100 CD00           		bsr	vid_PickLayer
(1)  441/    50D8 : 6100 0344           		bsr	.brdr_dotopbotm
(1)  442/    50DC :                     
(1)  443/    50DC : 7000                		moveq	#locate(0,0,0),d0		; Make LEFT/RIGHT borders
(1)  444/    50DE : 3828 0028           		move.w	box_BoardY(a0),d4
(1)  445/    50E2 : 3428 002C           		move.w	box_Height(a0),d2
(1)  446/    50E6 : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1)  447/    50EE : 6602                		bne.s	.nodbley
(1)  448/    50F0 : D844                		add.w	d4,d4
(1)  449/    50F2 :                     .nodbley:
(1)  450/    50F2 : 947C 0001           		sub.w	#1,d2
(1)  451/    50F6 : C8BC 0000 00FF      		and.l	#$FF,d4
(1)  452/    50FC : 8084                		or.l	d4,d0
(1)  453/    50FE : 3828 0026           		move.w	box_BoardX(a0),d4
(1)  454/    5102 : 987C 0001           		sub.w	#1,d4
(1)  455/    5106 : D844                		add.w	d4,d4
(1)  456/    5108 : E14C                		lsl.w	#8,d4
(1)  457/    510A : C8BC 0000 FF00      		and.l	#$00FF00,d4
(1)  458/    5110 : 8084                		or.l	d4,d0
(1)  459/    5112 : 6100 CCC2           		bsr	vid_PickLayer
(1)  460/    5116 : 201C                		move.l	(a4)+,d0			; Top LEFT BOMB
(1)  461/    5118 : 221C                		move.l	(a4)+,d1
(1)  462/    511A : 3428 002C           		move.w	box_Height(a0),d2
(1)  463/    511E : 4843                		swap	d3
(1)  464/    5120 : 947C 0002           		sub.w	#2,d2
(1)  465/    5124 : 3602                		move.w	d2,d3
(1)  466/    5126 : 967C 0001           		sub.w	#1,d3
(1)  467/    512A : 2E3C 0080 0000      		move.l	#$800000,d7
(1)  468/    5130 : 0838 0002 A888      		btst	#2,(RAM_VdpCache+$C).w
(1)  469/    5136 : 6602                		bne.s	.lftloop
(1)  470/    5138 : DE87                		add.l	d7,d7
(1)  471/    513A :                     .lftloop:
(1)  472/    513A :                     ; 		cmp.w	d3,d2
(1)  473/    513A :                     ; 		bne.s	.lft_topbomb
(1)  474/    513A :                     ; 		move.l	(a4)+,d0			; Top LEFT Middle
(1)  475/    513A :                     ; 		move.l	(a4)+,d1
(1)  476/    513A :                     ; .lft_topbomb
(1)  477/    513A :                     ; 		tst.w	d2
(1)  478/    513A :                     ; 		bne.s	.lft_botbomb
(1)  479/    513A :                     ; 		move.l	(a4)+,d0			; Top LEFT BOMB
(1)  480/    513A :                     ; 		move.l	(a4)+,d1		
(1)  481/    513A :                     ; .lft_botbomb:
(1)  482/    513A : 6100 0314           		bsr	.brdr_piece
(1)  483/    513E : D887                		add.l	d7,d4				; Manual SIZE
(1)  484/    5140 : 51CA FFF8           		dbf	d2,.lftloop
(1)  485/    5144 :                     
(1)  486/    5144 : 7000                		moveq	#locate(0,0,0),d0		; Make LEFT/RIGHT borders
(1)  487/    5146 : 3828 0028           		move.w	box_BoardY(a0),d4
(1)  488/    514A : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1)  489/    5152 : 6602                		bne.s	.nodbley2
(1)  490/    5154 : D844                		add.w	d4,d4
(1)  491/    5156 :                     .nodbley2:
(1)  492/    5156 : C8BC 0000 00FF      		and.l	#$FF,d4
(1)  493/    515C : 8084                		or.l	d4,d0
(1)  494/    515E : 3828 0026           		move.w	box_BoardX(a0),d4
(1)  495/    5162 : D868 002A           		add.w	box_Width(a0),d4
(1)  496/    5166 : D844                		add.w	d4,d4
(1)  497/    5168 : E14C                		lsl.w	#8,d4
(1)  498/    516A : C8BC 0000 FF00      		and.l	#$00FF00,d4
(1)  499/    5170 : 8084                		or.l	d4,d0
(1)  500/    5172 : 6100 CC62           		bsr	vid_PickLayer
(1)  501/    5176 : 201C                		move.l	(a4)+,d0			; Top LEFT
(1)  502/    5178 : 221C                		move.l	(a4)+,d1
(1)  503/    517A : 3428 002C           		move.w	box_Height(a0),d2
(1)  504/    517E : 947C 0002           		sub.w	#2,d2
(1)  505/    5182 : 3602                		move.w	d2,d3
(1)  506/    5184 : 967C 0001           		sub.w	#1,d3
(1)  507/    5188 : 2E3C 0080 0000      		move.l	#$800000,d7
(1)  508/    518E : 0838 0002 A888      		btst	#2,(RAM_VdpCache+$C).w
(1)  509/    5194 : 6602                		bne.s	.rghtloop
(1)  510/    5196 : DE87                		add.l	d7,d7
(1)  511/    5198 :                     .rghtloop:
(1)  512/    5198 :                     ; 		cmp.w	d3,d2
(1)  513/    5198 :                     ; 		bne.s	.rght_topbomb
(1)  514/    5198 :                     ; 		move.l	(a4)+,d0			; Top LEFT Middle
(1)  515/    5198 :                     ; 		move.l	(a4)+,d1
(1)  516/    5198 :                     ; .rght_topbomb
(1)  517/    5198 :                     ; 		tst.w	d2
(1)  518/    5198 :                     ; 		bne.s	.rght_botbomb
(1)  519/    5198 :                     ; 		move.l	(a4)+,d0			; Top LEFT BOMB
(1)  520/    5198 :                     ; 		move.l	(a4)+,d1		
(1)  521/    5198 :                     ; .rght_botbomb:
(1)  522/    5198 : 6100 02B6           		bsr	.brdr_piece
(1)  523/    519C : D887                		add.l	d7,d4				; Manual SIZE
(1)  524/    519E : 51CA FFF8           		dbf	d2,.rghtloop
(1)  525/    51A2 : 4843                		swap	d3
(1)  526/    51A4 : 6000 0132           		bra	.no_exupdwn
(1)  527/    51A8 :                     ; Double resolution mode
(1)  528/    51A8 :                     .do_double_res:						; Double resolution mode
(1)  529/    51A8 : 203C 0002 0000      		move.l	#locate(2,0,0),d0		; Window TOP/BOTTOM
(1)  530/    51AE : 3828 0028           		move.w	box_BoardY(a0),d4
(1)  531/    51B2 : 987C 0001           		sub.w	#1,d4
(1)  532/    51B6 : C8BC 0000 00FF      		and.l	#$FF,d4
(1)  533/    51BC : 8084                		or.l	d4,d0
(1)  534/    51BE : 3828 0026           		move.w	box_BoardX(a0),d4
(1)  535/    51C2 : 987C 0001           		sub.w	#1,d4
(1)  536/    51C6 : D844                		add.w	d4,d4
(1)  537/    51C8 : E14C                		lsl.w	#8,d4
(1)  538/    51CA : C8BC 0000 FF00      		and.l	#$00FF00,d4
(1)  539/    51D0 : 8084                		or.l	d4,d0
(1)  540/    51D2 : 6100 CC02           		bsr	vid_PickLayer
(1)  541/    51D6 : 6100 0246           		bsr	.brdr_dotopbotm
(1)  542/    51DA : 203C 0002 0000      		move.l	#locate(2,0,0),d0
(1)  543/    51E0 : 3828 0028           		move.w	box_BoardY(a0),d4
(1)  544/    51E4 : D868 002C           		add.w	box_Height(a0),d4
(1)  545/    51E8 : 987C 0001           		sub.w	#1,d4
(1)  546/    51EC : C8BC 0000 00FF      		and.l	#$FF,d4
(1)  547/    51F2 : 8084                		or.l	d4,d0
(1)  548/    51F4 : 3828 0026           		move.w	box_BoardX(a0),d4
(1)  549/    51F8 : 987C 0001           		sub.w	#1,d4
(1)  550/    51FC : D844                		add.w	d4,d4
(1)  551/    51FE : E14C                		lsl.w	#8,d4
(1)  552/    5200 : C8BC 0000 FF00      		and.l	#$00FF00,d4
(1)  553/    5206 : 8084                		or.l	d4,d0
(1)  554/    5208 : 6100 CBCC           		bsr	vid_PickLayer
(1)  555/    520C : 6100 0210           		bsr	.brdr_dotopbotm
(1)  556/    5210 : 7000                		moveq	#locate(0,0,0),d0		; LEFT/RIGHT borders
(1)  557/    5212 : 3828 0028           		move.w	box_BoardY(a0),d4
(1)  558/    5216 : 3428 002C           		move.w	box_Height(a0),d2
(1)  559/    521A : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1)  560/    5222 : 6602                		bne.s	.nodbleydb
(1)  561/    5224 : D844                		add.w	d4,d4
(1)  562/    5226 :                     .nodbleydb:
(1)  563/    5226 : 947C 0001           		sub.w	#1,d2
(1)  564/    522A : C8BC 0000 00FF      		and.l	#$FF,d4
(1)  565/    5230 : 8084                		or.l	d4,d0
(1)  566/    5232 : 3828 0026           		move.w	box_BoardX(a0),d4
(1)  567/    5236 : 987C 0001           		sub.w	#1,d4
(1)  568/    523A : D844                		add.w	d4,d4
(1)  569/    523C : E14C                		lsl.w	#8,d4
(1)  570/    523E : C8BC 0000 FF00      		and.l	#$00FF00,d4
(1)  571/    5244 : 8084                		or.l	d4,d0
(1)  572/    5246 : 6100 036C           		bsr	puzlBotScr_SetPos
(1)  573/    524A : 4843                		swap	d3
(1)  574/    524C : 201C                		move.l	(a4)+,d0			; Top LEFT
(1)  575/    524E : 221C                		move.l	(a4)+,d1
(1)  576/    5250 : 3428 002C           		move.w	box_Height(a0),d2
(1)  577/    5254 : 947C 0002           		sub.w	#2,d2
(1)  578/    5258 : 3602                		move.w	d2,d3
(1)  579/    525A : 967C 0001           		sub.w	#1,d3
(1)  580/    525E :                     
(1)  581/    525E : 2E3C 0080 0000      		move.l	#$800000,d7
(1)  582/    5264 : 0838 0002 A888      		btst	#2,(RAM_VdpCache+$C).w
(1)  583/    526A : 6602                		bne.s	.lftloopdb
(1)  584/    526C : DE87                		add.l	d7,d7
(1)  585/    526E :                     .lftloopdb:
(1)  586/    526E :                     ; 		cmp.w	d3,d2
(1)  587/    526E :                     ; 		bne.s	.lftl_topbomb
(1)  588/    526E :                     ; 		move.l	(a4)+,d0			; Top LEFT Middle
(1)  589/    526E :                     ; 		move.l	(a4)+,d1
(1)  590/    526E :                     ; .lftl_topbomb:
(1)  591/    526E :                     ; 		tst.w	d2
(1)  592/    526E :                     ; 		bne.s	.lftl_botbomb
(1)  593/    526E :                     ; 		move.l	(a4)+,d0			; Top LEFT BOMB
(1)  594/    526E :                     ; 		move.l	(a4)+,d1		
(1)  595/    526E :                     ; .lftl_botbomb:
(1)  596/    526E : 6100 01E0           		bsr	.brdr_piece
(1)  597/    5272 : D887                		add.l	d7,d4				; Manual SIZE
(1)  598/    5274 : 51CA FFF8           		dbf	d2,.lftloopdb
(1)  599/    5278 : 7000                		moveq	#locate(0,0,0),d0		; Make LEFT/RIGHT borders
(1)  600/    527A : 3828 0028           		move.w	box_BoardY(a0),d4
(1)  601/    527E : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1)  602/    5286 : 6602                		bne.s	.nodbley2db
(1)  603/    5288 : D844                		add.w	d4,d4
(1)  604/    528A :                     .nodbley2db:
(1)  605/    528A : C8BC 0000 00FF      		and.l	#$FF,d4
(1)  606/    5290 : 8084                		or.l	d4,d0
(1)  607/    5292 : 3828 0026           		move.w	box_BoardX(a0),d4
(1)  608/    5296 : D868 002A           		add.w	box_Width(a0),d4
(1)  609/    529A : D844                		add.w	d4,d4
(1)  610/    529C : E14C                		lsl.w	#8,d4
(1)  611/    529E : C8BC 0000 FF00      		and.l	#$00FF00,d4
(1)  612/    52A4 : 8084                		or.l	d4,d0
(1)  613/    52A6 : 6100 030C           		bsr	puzlBotScr_SetPos
(1)  614/    52AA : 201C                		move.l	(a4)+,d0			; Top LEFT
(1)  615/    52AC : 221C                		move.l	(a4)+,d1
(1)  616/    52AE : 3428 002C           		move.w	box_Height(a0),d2
(1)  617/    52B2 : 947C 0002           		sub.w	#2,d2
(1)  618/    52B6 : 3602                		move.w	d2,d3
(1)  619/    52B8 : 967C 0001           		sub.w	#1,d3
(1)  620/    52BC : 2E3C 0080 0000      		move.l	#$800000,d7
(1)  621/    52C2 : 0838 0002 A888      		btst	#2,(RAM_VdpCache+$C).w
(1)  622/    52C8 : 6602                		bne.s	.rghtloopdb
(1)  623/    52CA : DE87                		add.l	d7,d7
(1)  624/    52CC :                     .rghtloopdb:
(1)  625/    52CC :                     ; 		cmp.w	d3,d2
(1)  626/    52CC :                     ; 		bne.s	.rghtl_topbomb
(1)  627/    52CC :                     ; 		move.l	(a4)+,d0			; Top LEFT Middle
(1)  628/    52CC :                     ; 		move.l	(a4)+,d1
(1)  629/    52CC :                     ; .rghtl_topbomb:
(1)  630/    52CC :                     ; 		tst.w	d2
(1)  631/    52CC :                     ; 		bne.s	.rghtl_botbomb
(1)  632/    52CC :                     ; 		move.l	(a4)+,d0			; Top LEFT BOMB
(1)  633/    52CC :                     ; 		move.l	(a4)+,d1		
(1)  634/    52CC :                     ; .rghtl_botbomb:
(1)  635/    52CC : 6100 0182           		bsr	.brdr_piece
(1)  636/    52D0 : D887                		add.l	d7,d4				; Manual SIZE
(1)  637/    52D2 : 51CA FFF8           		dbf	d2,.rghtloopdb
(1)  638/    52D6 : 4843                		swap	d3
(1)  639/    52D8 :                     .no_exupdwn:
(1)  640/    52D8 : D0FC 0052           		adda 	#sizeof_Box,a0
(1)  641/    52DC : 51CB FD26           		dbf	d3,.plyrloop
(1)  642/    52E0 :                     
(1)  643/    52E0 :                     	; --------------------------------
(1)  644/    52E0 :                     	; Clear ALL buffer
(1)  645/    52E0 :                     	; --------------------------------
(1)  646/    52E0 : 4DF8 8424           		lea	(RAM_Glbl_PzlBoxes),a6
(1)  647/    52E4 : 49F9 00FF 0000      		lea	(RAM_PGame_BlockData).l,a4
(1)  648/    52EA : 383C 0000           		move.w	#0,d4					; BLANK
(1)  649/    52EE : 3A3C 0800           		move.w	#(MAX_BOXWIDTH*MAX_BOXHEIGHT),d5
(1)  650/    52F2 : 3C3C 0003           		move.w	#MAX_BOXES-1,d6
(1)  651/    52F6 :                     .grbg_player2:
(1)  652/    52F6 : 082E 0007 0024      		btst	#bitPlySt_Active,box_Status(a6)
(1)  653/    52FC : 6714                		beq.s	.nobox_grbg2
(1)  654/    52FE : 2D4C 000C           		move.l	a4,box_BlockData(a6)
(1)  655/    5302 : 244C                		move.l	a4,a2
(1)  656/    5304 : 3605                		move.w	d5,d3
(1)  657/    5306 : 967C 0001           		sub.w	#1,d3
(1)  658/    530A :                     .clrall:
(1)  659/    530A : 34C4                		move.w	d4,(a2)+
(1)  660/    530C : 51CB FFFC           		dbf	d3,.clrall
(1)  661/    5310 : D8C5                		adda	d5,a4
(1)  662/    5312 :                     .nobox_grbg2:
(1)  663/    5312 : DCFC 0052           		adda 	#sizeof_Box,a6
(1)  664/    5316 : 51CE FFDE           		dbf	d6,.grbg_player2
(1)  665/    531A :                     
(1)  666/    531A :                     	; --------------------------------
(1)  667/    531A : 2438 86E2           		move.l	(RAM_GlblRndSeeds).w,d2		; INIT trash blocks
(1)  668/    531E : 4DF8 8424           		lea	(RAM_Glbl_PzlBoxes),a6
(1)  669/    5322 : 3E3C 0003           		move.w	#MAX_BOXES-1,d7
(1)  670/    5326 :                     .grbg_player:
(1)  671/    5326 : 082E 0007 0024      		btst	#bitPlySt_Active,box_Status(a6)
(1)  672/    532C : 6700 00E6           		beq	.nobox_grbg
(1)  673/    5330 : 4847                		swap	d7
(1)  674/    5332 :                     		
(1)  675/    5332 :                     	; --------------------------------
(1)  676/    5332 :                     	; Fill shadow BG
(1)  677/    5332 :                     	; --------------------------------
(1)  678/    5332 : 286E 000C           		move.l	box_BlockData(a6),a4
(1)  679/    5336 : D8FC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a4
(1)  680/    533A : 3A3C 8000           		move.w	#blkflg_Draw,d5
(1)  681/    533E : 3E2E 002C           		move.w	box_Height(a6),d7
(1)  682/    5342 : 9E7C 0001           		sub.w	#1,d7
(1)  683/    5346 :                     .zerheight:
(1)  684/    5346 : 3C2E 002A           		move.w	box_Width(a6),d6
(1)  685/    534A : 9C7C 0001           		sub.w	#1,d6
(1)  686/    534E : 264C                		movea.l	a4,a3
(1)  687/    5350 :                     .zerwidth:
(1)  688/    5350 : 36C5                		move.w	d5,(a3)+
(1)  689/    5352 : 51CE FFFC           		dbf	d6,.zerwidth
(1)  690/    5356 : D8FC 0020           		adda	#MAX_BOXWIDTH,a4
(1)  691/    535A : 51CF FFEA           		dbf	d7,.zerheight
(1)  692/    535E :                     
(1)  693/    535E :                     	; --------------------------------
(1)  694/    535E :                     	; Make First TRASH blocks
(1)  695/    535E :                     	; --------------------------------
(1)  696/    535E : 286E 000C           		move.l	box_BlockData(a6),a4
(1)  697/    5362 : D8FC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a4
(1)  698/    5366 : 382E 002C           		move.w	box_Height(a6),d4
(1)  699/    536A : 987C 0001           		sub.w	#1,d4
(1)  700/    536E : EB4C                		lsl.w	#5,d4
(1)  701/    5370 : D8C4                		adda	d4,a4
(1)  702/    5372 : 2A4C                		move.l	a4,a5				; a5 - TOP check
(1)  703/    5374 : 264C                		move.l	a4,a3				; *** Make FIRST row ***
(1)  704/    5376 : 2802                		move.l	d2,d4
(1)  705/    5378 : 3E2E 002A           		move.w	box_Width(a6),d7
(1)  706/    537C : 9E7C 0001           		sub.w	#1,d7
(1)  707/    5380 : 7A00                		moveq	#0,d5
(1)  708/    5382 : 7200                		moveq	#0,d1
(1)  709/    5384 :                     .clmn_first:
(1)  710/    5384 : 6100 1B9C           		bsr	box_GuessBlk
(1)  711/    5388 :                     ; 		ror.l	d2,d4
(1)  712/    5388 : B005                		cmp.b	d5,d0
(1)  713/    538A : 67F8                		beq.s	.clmn_first
(1)  714/    538C : B03C 0008           		cmp.b	#SET_MAXUSERBLKS,d0
(1)  715/    5390 : 6CF2                		bge.s	.clmn_first
(1)  716/    5392 :                     ; 		cmp.b	#7,d0				; RED bomb?
(1)  717/    5392 :                     ; 		beq.s	.clmn_first		
(1)  718/    5392 :                     ; 		cmp.b	#8,d0				; BLUE bomb?
(1)  719/    5392 :                     ; 		beq.s	.clmn_first
(1)  720/    5392 : B06E 004C           		cmp.w	box_UserMaxIds(a6),d0		; MAX usable blocks (dificulty)
(1)  721/    5396 : 6EEC                		bgt.s	.clmn_first
(1)  722/    5398 : 1A00                		move.b	d0,d5
(1)  723/    539A : 3200                		move.w	d0,d1
(1)  724/    539C : 827C 8000           		or.w	#blkflg_Draw,d1
(1)  725/    53A0 : 36C1                		move.w	d1,(a3)+
(1)  726/    53A2 : 51CF FFE0           		dbf	d7,.clmn_first
(1)  727/    53A6 :                     
(1)  728/    53A6 :                     	; Now the rest
(1)  729/    53A6 :                     	; of the lines
(1)  730/    53A6 : 7200                		moveq	#0,d1
(1)  731/    53A8 : 98FC 0020           		suba	#MAX_BOXWIDTH,a4
(1)  732/    53AC : 3C2E 004A           		move.w	box_UserLevel(a6),d6
(1)  733/    53B0 : 9C7C 0001           		sub.w	#1,d6
(1)  734/    53B4 : 244C                		move.l	a4,a2
(1)  735/    53B6 : 264D                		move.l	a5,a3
(1)  736/    53B8 :                     .clmn_loop:
(1)  737/    53B8 : 3E2E 002A           		move.w	box_Width(a6),d7
(1)  738/    53BC : 9E7C 0001           		sub.w	#1,d7
(1)  739/    53C0 :                     .clmn_next:
(1)  740/    53C0 : 6100 1B60           		bsr	box_GuessBlk
(1)  741/    53C4 : E4BC                		ror.l	d2,d4
(1)  742/    53C6 : B005                		cmp.b	d5,d0
(1)  743/    53C8 : 67F6                		beq.s	.clmn_next
(1)  744/    53CA : 3615                		move.w	(a5),d3
(1)  745/    53CC : C67C 00FF           		and.w	#$FF,d3
(1)  746/    53D0 : B043                		cmp.w	d3,d0
(1)  747/    53D2 : 67EC                		beq.s	.clmn_next
(1)  748/    53D4 : B03C 0008           		cmp.b	#SET_MAXUSERBLKS,d0
(1)  749/    53D8 : 6CE6                		bge.s	.clmn_next
(1)  750/    53DA :                     ; 		cmp.b	#7,d0				; RED bomb?
(1)  751/    53DA :                     ; 		beq.s	.clmn_next	
(1)  752/    53DA :                     ; 		cmp.b	#8,d0				; BLUE bomb?
(1)  753/    53DA :                     ; 		beq.s	.clmn_next
(1)  754/    53DA : B06E 004C           		cmp.w	box_UserMaxIds(a6),d0		; MAX usable blocks (dificulty)
(1)  755/    53DE : 6EE0                		bgt.s	.clmn_next
(1)  756/    53E0 : 1A00                		move.b	d0,d5
(1)  757/    53E2 : 3200                		move.w	d0,d1
(1)  758/    53E4 : 827C 8000           		or.w	#blkflg_Draw,d1
(1)  759/    53E8 : 3881                		move.w	d1,(a4)
(1)  760/    53EA : D8FC 0002           		adda 	#2,a4
(1)  761/    53EE : DAFC 0002           		adda 	#2,a5
(1)  762/    53F2 : 51CF FFCC           		dbf	d7,.clmn_next
(1)  763/    53F6 : 94FC 0020           		suba	#MAX_BOXWIDTH,a2
(1)  764/    53FA : 96FC 0020           		suba	#MAX_BOXWIDTH,a3
(1)  765/    53FE : 284A                		move.l	a2,a4
(1)  766/    5400 : 2A4B                		move.l	a3,a5
(1)  767/    5402 : 51CE FFB4           		dbf	d6,.clmn_loop
(1)  768/    5406 : 4847                		swap	d7
(1)  769/    5408 : 08EE 0005 0024      		bset	#bitPlySt_DrwAll,box_Status(a6)
(1)  770/    540E : 08EE 0004 0024      		bset	#bitPlySt_DrwLine,box_Status(a6)
(1)  771/    5414 :                     .nobox_grbg:
(1)  772/    5414 : DCFC 0052           		adda 	#sizeof_Box,a6
(1)  773/    5418 : 51CF FF0C           		dbf	d7,.grbg_player
(1)  774/    541C : 4E75                		rts
(1)  775/    541E :                     
(1)  776/    541E :                     ; ----------------------------------------
(1)  777/    541E :                     ; make border piece
(1)  778/    541E :                     ; ----------------------------------------
(1)  779/    541E :                     
(1)  780/    541E :                     .brdr_dotopbotm:
(1)  781/    541E : 201C                		move.l	(a4)+,d0			; Top LEFT
(1)  782/    5420 : 221C                		move.l	(a4)+,d1
(1)  783/    5422 : 612C                		bsr	.brdr_piece
(1)  784/    5424 : D8BC 0004 0000      		add.l	#$40000,d4
(1)  785/    542A : 201C                		move.l	(a4)+,d0			; Top MID
(1)  786/    542C : 221C                		move.l	(a4)+,d1
(1)  787/    542E : 3428 002A           		move.w	box_Width(a0),d2
(1)  788/    5432 : 947C 0001           		sub.w	#1,d2
(1)  789/    5436 :                     .topmid:
(1)  790/    5436 : 6118                		bsr	.brdr_piece
(1)  791/    5438 : D8BC 0004 0000      		add.l	#$40000,d4
(1)  792/    543E : 51CA FFF6           		dbf	d2,.topmid
(1)  793/    5442 : 201C                		move.l	(a4)+,d0			; Top BOT
(1)  794/    5444 : 221C                		move.l	(a4)+,d1
(1)  795/    5446 : 6108                		bsr	.brdr_piece
(1)  796/    5448 : D8BC 0004 0000      		add.l	#$40000,d4
(1)  797/    544E : 4E75                		rts
(1)  798/    5450 :                     .brdr_piece:
(1)  799/    5450 : 2A04                		move.l	d4,d5
(1)  800/    5452 : 2C00                		move.l	d0,d6
(1)  801/    5454 : 3E28 0048           		move.w	box_UserBorder(a0),d7
(1)  802/    5458 : CE7C 0003           		and.w	#%11,d7
(1)  803/    545C : EB4F                		lsl.w	#5,d7
(1)  804/    545E : DC7C E400           		add.w	#VRAMSET_BOXBORDER+$E000,d6
(1)  805/    5462 : DC47                		add.w	d7,d6
(1)  806/    5464 : 4846                		swap	d6
(1)  807/    5466 : DC7C E400           		add.w	#VRAMSET_BOXBORDER+$E000,d6
(1)  808/    546A : DC47                		add.w	d7,d6
(1)  809/    546C : 4846                		swap	d6
(1)  810/    546E :                     
(1)  811/    546E : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1)  812/    5476 : 6712                		beq.s	.brdrdbl1
(1)  813/    5478 : 2A06                		move.l	d6,d5
(1)  814/    547A : E28D                		lsr.l	#1,d5
(1)  815/    547C : CABC 07FF 07FF      		and.l	#$07FF07FF,d5
(1)  816/    5482 : CCBC F800 F800      		and.l	#$F800F800,d6
(1)  817/    5488 : 8C85                		or.l	d5,d6
(1)  818/    548A :                     .brdrdbl1:
(1)  819/    548A : 2744 0004           		move.l	d4,4(a3)
(1)  820/    548E : 2686                		move.l	d6,(a3)
(1)  821/    5490 : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1)  822/    5498 : 662A                		bne.s	.brdrdbl2
(1)  823/    549A : 2A04                		move.l	d4,d5
(1)  824/    549C : DABC 0080 0000      		add.l	#$800000,d5
(1)  825/    54A2 : 2C01                		move.l	d1,d6
(1)  826/    54A4 : 3E28 0048           		move.w	box_UserBorder(a0),d7
(1)  827/    54A8 : CE7C 0003           		and.w	#%11,d7
(1)  828/    54AC : EB4F                		lsl.w	#5,d7
(1)  829/    54AE : DC7C E400           		add.w	#VRAMSET_BOXBORDER+$E000,d6
(1)  830/    54B2 : DC47                		add.w	d7,d6
(1)  831/    54B4 : 4846                		swap	d6
(1)  832/    54B6 : DC7C E400           		add.w	#VRAMSET_BOXBORDER+$E000,d6
(1)  833/    54BA : DC47                		add.w	d7,d6
(1)  834/    54BC : 4846                		swap	d6
(1)  835/    54BE :                     
(1)  836/    54BE : 2745 0004           		move.l	d5,4(a3)
(1)  837/    54C2 : 2686                		move.l	d6,(a3)
(1)  838/    54C4 :                     .brdrdbl2:
(1)  839/    54C4 : 4E75                		rts
(1)  840/    54C6 :                     
(1)  841/    54C6 :                     .boxbrdrlist:
(1)  842/    54C6 : E400 E400           		dc.l (VRAMSET_BOXBORDER+$00|$E000)<<16|VRAMSET_BOXBORDER+$00|$E000
(1)  843/    54CA : E420 E420           		dc.l (VRAMSET_BOXBORDER+$20|$E000)<<16|VRAMSET_BOXBORDER+$20|$E000
(1)  844/    54CE : E440 E440           		dc.l (VRAMSET_BOXBORDER+$40|$E000)<<16|VRAMSET_BOXBORDER+$40|$E000
(1)  845/    54D2 : E460 E460           		dc.l (VRAMSET_BOXBORDER+$60|$E000)<<16|VRAMSET_BOXBORDER+$60|$E000
(1)  846/    54D6 :                     		
(1)  847/    54D6 :                     ; --------------------------------------------------------
(1)  848/    54D6 :                     ; Init score boxes
(1)  849/    54D6 :                     ; --------------------------------------------------------
(1)  850/    54D6 :                     
(1)  851/    54D6 :                     ; TODO: fix this for doubleres
(1)  852/    54D6 :                     
(1)  853/    54D6 :                     PzlGame_LoadScores:
(1)  854/    54D6 : 4DF8 83D4           		lea	(RAM_Glbl_PzlScores),a6		; Draw box borders
(1)  855/    54DA : 43F9 00C0 0000      		lea	(vdp_data),a1
(1)  856/    54E0 : 3E3C 0004           		move.w	#MAX_SCORBOX-1,d7
(1)  857/    54E4 :                     .plyrloop:
(1)  858/    54E4 : 082E 0007 0004      		btst	#bitScorSt_Active,scorBox_Status(a6)
(1)  859/    54EA : 6716                		beq	.no_exupdwn
(1)  860/    54EC : 2A56                		movea.l	scorBox_BoxAddr(a6),a5
(1)  861/    54EE :                     
(1)  862/    54EE : 202D 0040           		move.l	box_UserScore(a5),d0
(1)  863/    54F2 : 7200                		moveq	#0,d1
(1)  864/    54F4 : 4A6E 000E           		tst.w	scorBox_Type(a6)
(1)  865/    54F8 : 6706                		beq.s	.doit
(1)  866/    54FA : 2038 8B6C           		move.l	(RAM_PGame_GlblTimer),d0
(1)  867/    54FE : 7200                		moveq	#0,d1
(1)  868/    5500 :                     .doit:
(1)  869/    5500 : 610A                		bsr	.drwscor_label
(1)  870/    5502 :                     
(1)  871/    5502 :                     .no_exupdwn:
(1)  872/    5502 : DCFC 0010           		adda 	#sizeof_ScorBox,a6
(1)  873/    5506 : 51CF FFDC           		dbf	d7,.plyrloop
(1)  874/    550A : 4E75                		rts
(1)  875/    550C :                     		
(1)  876/    550C :                     ; Draw label and value
(1)  877/    550C :                     .drwscor_label:
(1)  878/    550C : 49FA 1F02           		lea	Map_ScoreInfo(pc),a4
(1)  879/    5510 : 342E 000E           		move.w	scorBox_Type(a6),d2		; * $20
(1)  880/    5514 : EB4A                		lsl.w	#5,d2
(1)  881/    5516 : D8C2                		adda	d2,a4
(1)  882/    5518 :                     		
(1)  883/    5518 : 2801                		move.l	d1,d4
(1)  884/    551A : 7A00                		moveq	#0,d5
(1)  885/    551C : 3A2E 0008           		move.w	scorBox_Y(a6),d5
(1)  886/    5520 : 4844                		swap	d4
(1)  887/    5522 : EF4D                		lsl.w	#7,d5
(1)  888/    5524 : DA45                		add.w	d5,d5
(1)  889/    5526 : 3C2E 0006           		move.w	scorBox_X(a6),d6
(1)  890/    552A : DC44                		add.w	d4,d6
(1)  891/    552C : DC46                		add.w	d6,d6
(1)  892/    552E : DA46                		add.w	d6,d5
(1)  893/    5530 : 4845                		swap	d5
(1)  894/    5532 : 8ABC 4000 0003      		or.l	#$40000003,d5
(1)  895/    5538 : 2C05                		move.l	d5,d6
(1)  896/    553A : DCBC 0080 0000      		add.l	#$800000,d6
(1)  897/    5540 : 2605                		move.l	d5,d3
(1)  898/    5542 : 2345 0004           		move.l	d5,4(a1)
(1)  899/    5546 : 281C                		move.l	(a4)+,d4
(1)  900/    5548 : D8BC E4A0 E4A0      		add.l	#((VRAMSET_BOXBORDER+$A0)<<16)|VRAMSET_BOXBORDER+$A0|$80008000+$60006000,d4
(1)  901/    554E : 2284                		move.l	d4,(a1)
(1)  902/    5550 : 2346 0004           		move.l	d6,4(a1)
(1)  903/    5554 : 281C                		move.l	(a4)+,d4
(1)  904/    5556 : D8BC E4A0 E4A0      		add.l	#((VRAMSET_BOXBORDER+$A0)<<16)|VRAMSET_BOXBORDER+$A0|$80008000+$60006000,d4
(1)  905/    555C : 2284                		move.l	d4,(a1)
(1)  906/    555E : DABC 0004 0000      		add.l	#$40000,d5
(1)  907/    5564 : DCBC 0004 0000      		add.l	#$40000,d6
(1)  908/    556A : 2345 0004           		move.l	d5,4(a1)
(1)  909/    556E : 281C                		move.l	(a4)+,d4
(1)  910/    5570 : D8BC E4A0 E4A0      		add.l	#((VRAMSET_BOXBORDER+$A0)<<16)|VRAMSET_BOXBORDER+$A0|$80008000+$60006000,d4
(1)  911/    5576 : 2284                		move.l	d4,(a1)
(1)  912/    5578 : 2346 0004           		move.l	d6,4(a1)
(1)  913/    557C : 281C                		move.l	(a4)+,d4
(1)  914/    557E : D8BC E4A0 E4A0      		add.l	#((VRAMSET_BOXBORDER+$A0)<<16)|VRAMSET_BOXBORDER+$A0|$80008000+$60006000,d4
(1)  915/    5584 : 2284                		move.l	d4,(a1)
(1)  916/    5586 : DABC 0004 0000      		add.l	#$40000,d5
(1)  917/    558C : DCBC 0004 0000      		add.l	#$40000,d6
(1)  918/    5592 : 2345 0004           		move.l	d5,4(a1)
(1)  919/    5596 : 381C                		move.w	(a4)+,d4
(1)  920/    5598 : D8FC 0002           		adda	#2,a4
(1)  921/    559C : D87C E4A0           		add.w	#VRAMSET_BOXBORDER+$A0|$8000+$6000,d4
(1)  922/    55A0 : 3284                		move.w	d4,(a1)
(1)  923/    55A2 : 2346 0004           		move.l	d6,4(a1)
(1)  924/    55A6 : 381C                		move.w	(a4)+,d4
(1)  925/    55A8 : D8FC 0002           		adda	#2,a4
(1)  926/    55AC : D87C E4A0           		add.w	#VRAMSET_BOXBORDER+$A0|$8000+$6000,d4
(1)  927/    55B0 : 3284                		move.w	d4,(a1)
(1)  928/    55B2 :                     
(1)  929/    55B2 :                     ; 		move.l	d5,4(a1)
(1)  930/    55B2 :                     ; 		move.l	(a4)+,d4
(1)  931/    55B2 :                     ; 		add.w	#VRAMSET_BOXBORDER+$A0|$8000+$6000,d4
(1)  932/    55B2 :                     ; 		move.w	d4,(a1)
(1)  933/    55B2 :                     ; 		move.l	d6,4(a1)
(1)  934/    55B2 :                     ; 		move.w	(a4)+,d4
(1)  935/    55B2 :                     ; 		add.w	#VRAMSET_BOXBORDER+$A0|$8000+$6000,d4
(1)  936/    55B2 :                     ; 		move.w	d4,(a1)
(1)  937/    55B2 :                     
(1)  938/    55B2 :                     ; 	; print numbers
(1)  939/    55B2 :                     ; 		move.l	d3,d5
(1)  940/    55B2 :                     ; 		add.l	#$1000000,d5
(1)  941/    55B2 :                     ; 		move.l	d5,d6
(1)  942/    55B2 :                     ; 		add.l	#$800000,d6
(1)  943/    55B2 :                     ; 		tst.w	scorBox_Type(a6)
(1)  944/    55B2 :                     ; 		bne.s	.show_time
(1)  945/    55B2 :                     ; 		move.l	d0,d4
(1)  946/    55B2 :                     ; 		rol.l	#8,d4
(1)  947/    55B2 :                     ; 		move.w	#6-1,d2
(1)  948/    55B2 :                     ; .nxtnmbr:
(1)  949/    55B2 :                     ; 		rol.l	#4,d4
(1)  950/    55B2 :                     ; 		move.b	d4,d0
(1)  951/    55B2 :                     ; 		and.w	#$F,d0
(1)  952/    55B2 :                     ; 		add.w	d0,d0
(1)  953/    55B2 :                     ; 		add.w	#VRAMSET_BOXBORDER+$80|$8000+$6000,d0
(1)  954/    55B2 :                     ; 		move.l	d5,4(a1)
(1)  955/    55B2 :                     ; 		move.w	d0,(a1)
(1)  956/    55B2 :                     ; 		add.w	#1,d0
(1)  957/    55B2 :                     ; 		move.l	d6,4(a1)
(1)  958/    55B2 :                     ; 		move.w	d0,(a1)		
(1)  959/    55B2 :                     ; 		add.l	#$20000,d5
(1)  960/    55B2 :                     ; 		add.l	#$20000,d6
(1)  961/    55B2 :                     ; 		dbf	d2,.nxtnmbr
(1)  962/    55B2 :                     ; 		rts
(1)  963/    55B2 :                     
(1)  964/    55B2 :                     .show_time:
(1)  965/    55B2 : 4E75                		rts
(1)  966/    55B4 :                     
(1)  967/    55B4 :                     ; --------------------------------------------------------
(1)  968/    55B4 :                     ; custom version of vid_PickLayer but for setting coords
(1)  969/    55B4 :                     ; at the bottom section of doubleres mode
(1)  970/    55B4 :                     ; 
(1)  971/    55B4 :                     ; d0 - locate(0,x,y)
(1)  972/    55B4 :                     ; 
(1)  973/    55B4 :                     ; d4 - VDP position result
(1)  974/    55B4 :                     ; d6 - next line
(1)  975/    55B4 :                     ; --------------------------------------------------------
(1)  976/    55B4 :                     
(1)  977/    55B4 :                     ; vid_PickLayer:
(1)  978/    55B4 :                     puzlBotScr_SetPos:
(1)  979/    55B4 : 183C 0028           		move.b	#$28,d4			; FG	
(1)  980/    55B8 : 3A04                		move.w	d4,d5
(1)  981/    55BA : E84D                		lsr.w	#4,d5
(1)  982/    55BC : 0245 0003           		andi.w	#%11,d5
(1)  983/    55C0 : 4844                		swap	d4
(1)  984/    55C2 : 3805                		move.w	d5,d4
(1)  985/    55C4 : 4844                		swap	d4
(1)  986/    55C6 : 0244 000E           		andi.w	#%00001110,d4
(1)  987/    55CA : E14C                		lsl.w	#8,d4
(1)  988/    55CC : E54C                		lsl.w	#2,d4
(1)  989/    55CE : 0044 4000           		ori.w	#$4000,d4
(1)  990/    55D2 : 3A00                		move.w	d0,d5			; Y start pos
(1)  991/    55D4 : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  992/    55D8 : ED4D                		lsl.w	#6,d5			
(1)  993/    55DA : 1C38 A88C           		move.b	(RAM_VdpCache+$10).w,d6
(1)  994/    55DE : 0246 0003           		andi.w	#%11,d6
(1)  995/    55E2 : 670A                		beq.s	.thissz
(1)  996/    55E4 : DA45                		add.w	d5,d5			; H64
(1)  997/    55E6 : 0246 0002           		andi.w	#%10,d6
(1)  998/    55EA : 6702                		beq.s	.thissz
(1)  999/    55EC : DA45                		add.w	d5,d5			; H128		
(1) 1000/    55EE :                     .thissz:
(1) 1001/    55EE : D845                		add.w	d5,d4
(1) 1002/    55F0 : 3A00                		move.w	d0,d5
(1) 1003/    55F2 : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1) 1004/    55F6 : EE4D                		lsr.w	#7,d5
(1) 1005/    55F8 : D845                		add.w	d5,d4			; X add
(1) 1006/    55FA : 4844                		swap	d4
(1) 1007/    55FC : 7C00                		moveq	#0,d6
(1) 1008/    55FE : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1) 1009/    5602 : 1A38 A88C           		move.b	(RAM_VdpCache+$10).w,d5
(1) 1010/    5606 : 0245 0003           		andi.w	#%11,d5
(1) 1011/    560A : 670A                		beq.s	.thisszj
(1) 1012/    560C : DC46                		add.w	d6,d6			; H64
(1) 1013/    560E : 0245 0002           		andi.w	#%10,d5
(1) 1014/    5612 : 6702                		beq.s	.thisszj
(1) 1015/    5614 : DC46                		add.w	d6,d6			; H128		
(1) 1016/    5616 :                     .thisszj:
(1) 1017/    5616 : 4846                		swap	d6
(1) 1018/    5618 :                     ; 		bra.s	*
(1) 1019/    5618 : 4E75                		rts
(1) 1020/    561A :                     
(1) 1021/    561A :                     ; --------------------------------------------------------
(1) 1022/    561A :                     ; Load background
(1) 1023/    561A :                     ; --------------------------------------------------------
(1) 1024/    561A :                     
(1) 1025/    561A :                     PzlGame_LoadBackgrnd:
(1) 1026/    561A : 203C 0000 CC00      		move.l	#Art_Backgrd00,d0
(1) 1027/    5620 : 323C 3640           		move.w	#(Art_Backgrd00_e-Art_Backgrd00),d1
(1) 1028/    5624 : 343C 0002           		move.w	#2,d2
(1) 1029/    5628 : 6100 C97E           		bsr	Video_LoadArt
(1) 1030/    562C :                     
(1) 1031/    562C : 41FA 1E42           		lea	Map_Backgrd00(pc),a0
(1) 1032/    5630 : 203C 0001 0000      		move.l	#locate(1,0,0),d0
(1) 1033/    5636 : 223C 0027 001F      		move.l	#mapsize(320,256),d1
(1) 1034/    563C : 343C 0002           		move.w	#$0002,d2
(1) 1035/    5640 : 6100 C588           		bsr	Video_LoadMap_Vert
(1) 1036/    5644 : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1) 1037/    564C : 6718                		beq.s	.isdble
(1) 1038/    564E : 41FA 1E20           		lea	Map_Backgrd00(pc),a0
(1) 1039/    5652 : 203C 0001 0010      		move.l	#locate(1,0,16),d0
(1) 1040/    5658 : 223C 0027 001F      		move.l	#mapsize(320,256),d1
(1) 1041/    565E : 343C 0002           		move.w	#$0002,d2
(1) 1042/    5662 : 6100 C566           		bsr	Video_LoadMap_Vert
(1) 1043/    5666 :                     .isdble:
(1) 1044/    5666 : 41FA 1C8C           		lea	Pal_Backgrd00(pc),a0
(1) 1045/    566A : 7000                		moveq	#0,d0
(1) 1046/    566C : 323C 000F           		move.w	#15,d1
(1) 1047/    5670 : 6000 C3CE           		bra	Video_LoadPal_Fade
(1) 1048/    5674 : 4E75                		rts
(1) 1049/    5676 :                     		
(1) 1050/    5676 :                     ; --------------------------------------------
(1) 1051/    5676 :                     ; Draw ALL blocks request
(1) 1052/    5676 :                     ; 
(1) 1053/    5676 :                     ; VBLANK ONLY, CPU HEAVY
(1) 1054/    5676 :                     ; --------------------------------------------
(1) 1055/    5676 :                     
(1) 1056/    5676 :                     PzlVint_PlyrDrwTasks:
(1) 1057/    5676 : 082E 0007 0024      		btst	#bitPlySt_Active,box_Status(a6)
(1) 1058/    567C : 6716                		beq	.no_plyr
(1) 1059/    567E : 08AE 0005 0024      		bclr	#bitPlySt_DrwAll,box_Status(a6)
(1) 1060/    5684 : 6702                		beq	.no_drwall
(1) 1061/    5686 : 610E                		bsr	.drw_all
(1) 1062/    5688 :                     .no_drwall:
(1) 1063/    5688 : 08AE 0004 0024      		bclr	#bitPlySt_DrwLine,box_Status(a6)
(1) 1064/    568E : 6704                		beq	.no_plyr
(1) 1065/    5690 : 6100 02A8           		bsr	PzlVint_PlyrDrwLine
(1) 1066/    5694 :                     .no_plyr:
(1) 1067/    5694 : 4E75                		rts
(1) 1068/    5696 :                     	
(1) 1069/    5696 :                     ; --------------------------------------
(1) 1070/    5696 :                     
(1) 1071/    5696 :                     .drw_all:
(1) 1072/    5696 : 7A00                		moveq	#0,d5
(1) 1073/    5698 : 7C00                		moveq	#0,d6
(1) 1074/    569A : 286E 000C           		movea.l	box_BlockData(a6),a4
(1) 1075/    569E : D8FC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a4
(1) 1076/    56A2 : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1) 1077/    56AA : 6600 0144           		bne	.dblemode
(1) 1078/    56AE :                     		
(1) 1079/    56AE :                     ; --------------------------------------
(1) 1080/    56AE :                     ; Normal res
(1) 1081/    56AE :                     ; --------------------------------------
(1) 1082/    56AE :                     
(1) 1083/    56AE : 3C2E 0028           		move.w	box_BoardY(a6),d6
(1) 1084/    56B2 : EF4E                		lsl.w	#7,d6
(1) 1085/    56B4 : 342E 0010           		move.w	box_YScrl(a6),d2
(1) 1086/    56B8 : C47C 00F0           		and.w	#$F0,d2
(1) 1087/    56BC : E74A                		lsl.w	#3,d2
(1) 1088/    56BE : DC42                		add.w	d2,d6
(1) 1089/    56C0 : DC46                		add.w	d6,d6
(1) 1090/    56C2 : 283C 4000 0003      		move.l	#$40000003,d4
(1) 1091/    56C8 : 342E 0026           		move.w	box_BoardX(a6),d2
(1) 1092/    56CC : E54A                		lsl.w	#2,d2
(1) 1093/    56CE : DC42                		add.w	d2,d6
(1) 1094/    56D0 : CC7C 0FFF           		and.w	#$0FFF,d6
(1) 1095/    56D4 : 4846                		swap	d6
(1) 1096/    56D6 : 8C84                		or.l	d4,d6
(1) 1097/    56D8 : 3E2E 002C           		move.w	box_Height(a6),d7
(1) 1098/    56DC : 9E7C 0002           		sub.w	#1+1,d7
(1) 1099/    56E0 :                     .nxt_row:
(1) 1100/    56E0 : 4847                		swap	d7
(1) 1101/    56E2 : 244C                		move.l	a4,a2
(1) 1102/    56E4 : 3A2E 002A           		move.w	box_Width(a6),d5
(1) 1103/    56E8 : 9A7C 0001           		sub.w	#1,d5
(1) 1104/    56EC : 2606                		move.l	d6,d3
(1) 1105/    56EE :                     .nxt_clmn:
(1) 1106/    56EE : 4845                		swap	d5
(1) 1107/    56F0 : 7200                		moveq	#0,d1
(1) 1108/    56F2 : 7400                		moveq	#0,d2
(1) 1109/    56F4 : 3012                		move.w	(a2),d0
(1) 1110/    56F6 : 082E 0002 0024      		btst	#bitPlySt_GameOver,box_Status(a6)
(1) 1111/    56FC : 660E                		bne	.force_drw
(1) 1112/    56FE : 4A40                		tst.w	d0
(1) 1113/    5700 : 6A00 00BE           		bpl	.no_drwflg
(1) 1114/    5704 : 3A00                		move.w	d0,d5
(1) 1115/    5706 : C07C 7FFF           		and.w	#$7FFF,d0
(1) 1116/    570A : 3480                		move.w	d0,(a2)
(1) 1117/    570C :                     .force_drw:
(1) 1118/    570C : C07C 001F           		and.w	#$1F,d0
(1) 1119/    5710 : 6700 009A           		beq	.writeblk
(1) 1120/    5714 : 3800                		move.w	d0,d4
(1) 1121/    5716 : 907C 0001           		sub.w	#1,d0
(1) 1122/    571A : E748                		lsl.w	#3,d0
(1) 1123/    571C : 2233 0000           		move.l	(a3,d0.w),d1
(1) 1124/    5720 : 2433 0004           		move.l	4(a3,d0.w),d2
(1) 1125/    5724 : D2BC 22A0 22A0      		add.l	#((VRAMSET_BLOCKS+$2000)<<16)|VRAMSET_BLOCKS+$2000,d1
(1) 1126/    572A : D4BC 22A0 22A0      		add.l	#((VRAMSET_BLOCKS+$2000)<<16)|VRAMSET_BLOCKS+$2000,d2
(1) 1127/    5730 : 082E 0002 0024      		btst	#bitPlySt_GameOver,box_Status(a6)
(1) 1128/    5736 : 6674                		bne	.writeblk
(1) 1129/    5738 : CA7C 7F00           		and.w	#$7F00,d5
(1) 1130/    573C : BA7C 5100           		cmp.w	#BLKROLL_STAY,d5
(1) 1131/    5740 : 6C58                		bge.s	.blkbrght
(1) 1132/    5742 : 4A45                		tst.w	d5
(1) 1133/    5744 : 6754                		beq.s	.blkbrght
(1) 1134/    5746 : B87C 000D           		cmp.w	#SET_STRTTRSHIDS,d4
(1) 1135/    574A : 6C3C                		bge.s	.trshblk
(1) 1136/    574C : BA7C 3E00           		cmp.w	#BLKDEL_MIDANIM,d5
(1) 1137/    5750 : 6D42                		blt.s	.flashme
(1) 1138/    5752 : 3E05                		move.w	d5,d7
(1) 1139/    5754 : 9E7C 3E00           		sub.w	#BLKDEL_MIDANIM,d7
(1) 1140/    5758 : E84F                		lsr.w	#4,d7
(1) 1141/    575A : CE7C 03E0           		and.w	#$3E0,d7
(1) 1142/    575E : BE7C 0080           		cmp.w	#$20*4,d7
(1) 1143/    5762 : 6C44                		bge.s	.shdwzero
(1) 1144/    5764 : D2BC 0080 0080      		add.l	#(($80)<<16)|$80,d1
(1) 1145/    576A : D4BC 0080 0080      		add.l	#(($80)<<16)|$80,d2
(1) 1146/    5770 : D247                		add.w	d7,d1
(1) 1147/    5772 : D447                		add.w	d7,d2
(1) 1148/    5774 : 4841                		swap	d1		
(1) 1149/    5776 : 4842                		swap	d2
(1) 1150/    5778 : D247                		add.w	d7,d1
(1) 1151/    577A : D447                		add.w	d7,d2
(1) 1152/    577C : 4841                		swap	d1		
(1) 1153/    577E : 4842                		swap	d2
(1) 1154/    5780 : 6018                		bra.s	.blkbrght
(1) 1155/    5782 :                     .blnkme:
(1) 1156/    5782 : 7200                		moveq	#0,d1
(1) 1157/    5784 : 7400                		moveq	#0,d2
(1) 1158/    5786 : 6024                		bra.s	.writeblk
(1) 1159/    5788 :                     .trshblk:
(1) 1160/    5788 : 223C 62CC 62CE      		move.l	#(((VRAMSET_BLOCKS+$2C)|$6000)<<16)|((VRAMSET_BLOCKS+$2E)|$6000),d1
(1) 1161/    578E : 243C 62CD 62CF      		move.l	#(((VRAMSET_BLOCKS+$2D)|$6000)<<16)|((VRAMSET_BLOCKS+$2F)|$6000),d2
(1) 1162/    5794 :                     
(1) 1163/    5794 :                     .flashme:
(1) 1164/    5794 : CA7C 0100           		and.w	#$100,d5
(1) 1165/    5798 : 6612                		bne.s	.writeblk
(1) 1166/    579A :                     .blkbrght:
(1) 1167/    579A : D2BC 8000 8000      		add.l	#$80008000,d1
(1) 1168/    57A0 : D4BC 8000 8000      		add.l	#$80008000,d2
(1) 1169/    57A6 : 6604                		bne.s	.writeblk		
(1) 1170/    57A8 :                     .shdwzero:		
(1) 1171/    57A8 : 7200                		moveq	#0,d1
(1) 1172/    57AA : 7400                		moveq	#0,d2		
(1) 1173/    57AC :                     .writeblk:
(1) 1174/    57AC : 2806                		move.l	d6,d4
(1) 1175/    57AE : D8BC 0080 0000      		add.l	#$800000,d4
(1) 1176/    57B4 : 2B46 0004           		move.l	d6,4(a5)
(1) 1177/    57B8 : 2A81                		move.l	d1,(a5)
(1) 1178/    57BA : 2B44 0004           		move.l	d4,4(a5)
(1) 1179/    57BE : 2A82                		move.l	d2,(a5)
(1) 1180/    57C0 :                     .no_drwflg:
(1) 1181/    57C0 : D4FC 0002           		adda	#2,a2
(1) 1182/    57C4 : DCBC 0004 0000      		add.l	#$40000,d6
(1) 1183/    57CA : 4845                		swap	d5
(1) 1184/    57CC : 51CD FF20           		dbf	d5,.nxt_clmn
(1) 1185/    57D0 : 2C03                		move.l	d3,d6
(1) 1186/    57D2 : DCBC 0100 0000      		add.l	#$1000000,d6
(1) 1187/    57D8 : CCBC 0FFF 0000      		and.l	#$0FFF0000,d6
(1) 1188/    57DE : 8CBC 4000 0003      		or.l	#$40000003,d6
(1) 1189/    57E4 : D8FC 0020           		adda	#MAX_BOXWIDTH,a4
(1) 1190/    57E8 : 4847                		swap	d7
(1) 1191/    57EA : 51CF FEF4           		dbf	d7,.nxt_row
(1) 1192/    57EE :                     .no_plyr_drwall:
(1) 1193/    57EE : 4E75                		rts
(1) 1194/    57F0 :                     
(1) 1195/    57F0 :                     ; --------------------------------------
(1) 1196/    57F0 :                     ; Double res
(1) 1197/    57F0 :                     ; --------------------------------------
(1) 1198/    57F0 :                     
(1) 1199/    57F0 :                     .dblemode:
(1) 1200/    57F0 : 3C2E 0028           		move.w	box_BoardY(a6),d6
(1) 1201/    57F4 : EF4E                		lsl.w	#7,d6
(1) 1202/    57F6 : 342E 0010           		move.w	box_YScrl(a6),d2
(1) 1203/    57FA : C47C 01F0           		and.w	#$1F0,d2
(1) 1204/    57FE : E74A                		lsl.w	#3,d2
(1) 1205/    5800 : DC42                		add.w	d2,d6
(1) 1206/    5802 : 283C 4000 0003      		move.l	#$40000003,d4
(1) 1207/    5808 : 0C6E 000F 0028      		cmp.w	#15,box_BoardY(a6)
(1) 1208/    580E : 6D06                		blt.s	.top_half
(1) 1209/    5810 : 283C 6000 0002      		move.l	#$60000002,d4
(1) 1210/    5816 :                     .top_half:
(1) 1211/    5816 : 263C 0100 0000      		move.l	#$1000000,d3
(1) 1212/    581C : 342E 0026           		move.w	box_BoardX(a6),d2
(1) 1213/    5820 : E54A                		lsl.w	#2,d2
(1) 1214/    5822 : DC42                		add.w	d2,d6
(1) 1215/    5824 : CC7C 0FFF           		and.w	#$0FFF,d6
(1) 1216/    5828 : 4846                		swap	d6
(1) 1217/    582A : 8C84                		or.l	d4,d6
(1) 1218/    582C : 3E2E 002C           		move.w	box_Height(a6),d7
(1) 1219/    5830 : 9E7C 0002           		sub.w	#1+1,d7
(1) 1220/    5834 :                     .nxt_row_dbl:
(1) 1221/    5834 : 4847                		swap	d7
(1) 1222/    5836 : 2606                		move.l	d6,d3
(1) 1223/    5838 : 244C                		move.l	a4,a2
(1) 1224/    583A : 3A2E 002A           		move.w	box_Width(a6),d5
(1) 1225/    583E : 9A7C 0001           		sub.w	#1,d5
(1) 1226/    5842 :                     .nxt_clmn_dbl:
(1) 1227/    5842 : 4845                		swap	d5
(1) 1228/    5844 : 7400                		moveq	#0,d2
(1) 1229/    5846 : 3014                		move.w	(a4),d0
(1) 1230/    5848 : 082E 0002 0024      		btst	#bitPlySt_GameOver,box_Status(a6)
(1) 1231/    584E : 660E                		bne	.force_drw_dbl
(1) 1232/    5850 : 4A40                		tst.w	d0
(1) 1233/    5852 : 6A00 00B8           		bpl	.skip_write_dbl
(1) 1234/    5856 : 3A00                		move.w	d0,d5
(1) 1235/    5858 : C07C 7FFF           		and.w	#$7FFF,d0
(1) 1236/    585C : 3880                		move.w	d0,(a4)
(1) 1237/    585E :                     .force_drw_dbl:
(1) 1238/    585E : C07C 001F           		and.w	#$1F,d0
(1) 1239/    5862 :                     ; 		tst.b	d0
(1) 1240/    5862 : 6700 00A2           		beq	.writeblk_dble
(1) 1241/    5866 : 3200                		move.w	d0,d1
(1) 1242/    5868 : 4841                		swap	d1
(1) 1243/    586A : 907C 0001           		sub.w	#1,d0
(1) 1244/    586E : E748                		lsl.w	#3,d0
(1) 1245/    5870 : 3433 0000           		move.w	(a3,d0.w),d2
(1) 1246/    5874 : 3202                		move.w	d2,d1
(1) 1247/    5876 : C27C F800           		and.w	#$F800,d1
(1) 1248/    587A : E24A                		lsr.w	#1,d2
(1) 1249/    587C : C47C 07FF           		and.w	#$7FF,d2
(1) 1250/    5880 : 8441                		or.w	d1,d2
(1) 1251/    5882 : D47C 2150           		add.w	#((VRAMSET_BLOCKS)/2)+$2000,d2
(1) 1252/    5886 : 4842                		swap	d2
(1) 1253/    5888 : 3433 0002           		move.w	2(a3,d0.w),d2
(1) 1254/    588C : 3202                		move.w	d2,d1
(1) 1255/    588E : C27C F800           		and.w	#$F800,d1
(1) 1256/    5892 : E24A                		lsr.w	#1,d2
(1) 1257/    5894 : C47C 07FF           		and.w	#$7FF,d2
(1) 1258/    5898 : 8441                		or.w	d1,d2
(1) 1259/    589A : 4841                		swap	d1
(1) 1260/    589C : D47C 2150           		add.w	#((VRAMSET_BLOCKS)/2)+$2000,d2
(1) 1261/    58A0 : 082E 0002 0024      		btst	#bitPlySt_GameOver,box_Status(a6)
(1) 1262/    58A6 : 665E                		bne	.writeblk_dble
(1) 1263/    58A8 : CA7C 7F00           		and.w	#$7F00,d5
(1) 1264/    58AC : BA7C 5100           		cmp.w	#BLKROLL_STAY,d5
(1) 1265/    58B0 : 674A                		beq.s	.blkbrght_dble
(1) 1266/    58B2 : 4A45                		tst.w	d5
(1) 1267/    58B4 : 6746                		beq.s	.blkbrght_dble
(1) 1268/    58B6 :                     		
(1) 1269/    58B6 : BA7C 4000           		cmp.w	#$4000,d5
(1) 1270/    58BA : 6D3A                		blt.s	.flashme_dble
(1) 1271/    58BC : BA7C 5000           		cmp.w	#BLKDEL_TIMEOUT,d5
(1) 1272/    58C0 : 6730                		beq.s	.blnkme_dble
(1) 1273/    58C2 : BA7C 3E00           		cmp.w	#BLKDEL_MIDANIM,d5
(1) 1274/    58C6 : 6D2E                		blt.s	.flashme_dble
(1) 1275/    58C8 : B27C 000D           		cmp.w	#SET_STRTTRSHIDS,d1
(1) 1276/    58CC : 6C38                		bge.s	.writeblk_dble
(1) 1277/    58CE : 3E05                		move.w	d5,d7
(1) 1278/    58D0 : 9E7C 3E00           		sub.w	#BLKDEL_MIDANIM,d7
(1) 1279/    58D4 : E84F                		lsr.w	#4,d7
(1) 1280/    58D6 : CE7C 03E0           		and.w	#$3E0,d7
(1) 1281/    58DA : BE7C 0080           		cmp.w	#$20*4,d7
(1) 1282/    58DE : 6C24                		bge.s	.shdwzero_dble
(1) 1283/    58E0 : E24F                		lsr.w	#1,d7
(1) 1284/    58E2 : D4BC 0030 0030      		add.l	#(($30)<<16)|$30,d2
(1) 1285/    58E8 : D447                		add.w	d7,d2		
(1) 1286/    58EA : 4842                		swap	d2
(1) 1287/    58EC : D447                		add.w	d7,d2		
(1) 1288/    58EE : 4842                		swap	d2
(1) 1289/    58F0 : 600A                		bra.s	.blkbrght_dble
(1) 1290/    58F2 :                     .blnkme_dble:
(1) 1291/    58F2 : 7400                		moveq	#0,d2
(1) 1292/    58F4 : 6010                		bra.s	.writeblk_dble
(1) 1293/    58F6 :                     .flashme_dble:
(1) 1294/    58F6 : CA7C 0100           		and.w	#$100,d5
(1) 1295/    58FA : 660A                		bne.s	.writeblk_dble
(1) 1296/    58FC :                     .blkbrght_dble:
(1) 1297/    58FC : D4BC 8000 8000      		add.l	#$80008000,d2
(1) 1298/    5902 : 6002                		bra.s	.writeblk_dble
(1) 1299/    5904 :                     .shdwzero_dble:
(1) 1300/    5904 : 7400                		moveq	#0,d2
(1) 1301/    5906 :                     .writeblk_dble:
(1) 1302/    5906 : 2B46 0004           		move.l	d6,4(a5)
(1) 1303/    590A : 2A82                		move.l	d2,(a5)
(1) 1304/    590C :                     .skip_write_dbl:
(1) 1305/    590C : D8FC 0002           		adda	#2,a4
(1) 1306/    5910 : DCBC 0004 0000      		add.l	#$40000,d6
(1) 1307/    5916 : 4845                		swap	d5
(1) 1308/    5918 : 51CD FF28           		dbf	d5,.nxt_clmn_dbl
(1) 1309/    591C : 2C03                		move.l	d3,d6
(1) 1310/    591E : DCBC 0080 0000      		add.l	#$800000,d6
(1) 1311/    5924 : CCBC 0FFF 0000      		and.l	#$0FFF0000,d6
(1) 1312/    592A : 8C84                		or.l	d4,d6
(1) 1313/    592C : 284A                		move.l	a2,a4
(1) 1314/    592E : D8FC 0020           		adda	#MAX_BOXWIDTH,a4
(1) 1315/    5932 : 4847                		swap	d7
(1) 1316/    5934 : 51CF FEFE           		dbf	d7,.nxt_row_dbl
(1) 1317/    5938 : 4E75                		rts
(1) 1318/    593A :                     
(1) 1319/    593A :                     ; --------------------------------------------
(1) 1320/    593A :                     ; Draw single line from the BOTTOM
(1) 1321/    593A :                     ; --------------------------------------------
(1) 1322/    593A :                     
(1) 1323/    593A :                     PzlVint_PlyrDrwLine:
(1) 1324/    593A : 7A00                		moveq	#0,d5
(1) 1325/    593C : 7C00                		moveq	#0,d6
(1) 1326/    593E : 286E 000C           		movea.l	box_BlockData(a6),a4
(1) 1327/    5942 : D8FC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a4
(1) 1328/    5946 : 3A2E 002C           		move.w	box_Height(a6),d5
(1) 1329/    594A : 9A7C 0001           		sub.w	#1,d5
(1) 1330/    594E : 3C05                		move.w	d5,d6
(1) 1331/    5950 : EB4E                		lsl.w	#5,d6
(1) 1332/    5952 : D8C6                		adda	d6,a4
(1) 1333/    5954 : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1) 1334/    595C : 6600 00D2           		bne	.dblemode
(1) 1335/    5960 :                     		
(1) 1336/    5960 :                     ; --------------------------------------
(1) 1337/    5960 :                     ; Normal res
(1) 1338/    5960 :                     ; --------------------------------------
(1) 1339/    5960 :                     
(1) 1340/    5960 : 3C2E 0028           		move.w	box_BoardY(a6),d6
(1) 1341/    5964 : DC45                		add.w	d5,d6
(1) 1342/    5966 : EF4E                		lsl.w	#7,d6
(1) 1343/    5968 : 3A2E 0010           		move.w	box_YScrl(a6),d5
(1) 1344/    596C : CA7C 00F0           		and.w	#$F0,d5
(1) 1345/    5970 : E74D                		lsl.w	#3,d5
(1) 1346/    5972 : DC45                		add.w	d5,d6
(1) 1347/    5974 : DC46                		add.w	d6,d6
(1) 1348/    5976 : 283C 4000 0003      		move.l	#$40000003,d4
(1) 1349/    597C : 8886                		or.l	d6,d4
(1) 1350/    597E :                     
(1) 1351/    597E : 263C 0100 0000      		move.l	#$1000000,d3
(1) 1352/    5984 : 342E 0026           		move.w	box_BoardX(a6),d2
(1) 1353/    5988 : E54A                		lsl.w	#2,d2
(1) 1354/    598A : DC42                		add.w	d2,d6
(1) 1355/    598C : 3A06                		move.w	d6,d5
(1) 1356/    598E : 9A7C 0100           		sub.w	#$0100,d5
(1) 1357/    5992 : CA7C 0FFF           		and.w	#$0FFF,d5
(1) 1358/    5996 : CC7C 0FFF           		and.w	#$0FFF,d6
(1) 1359/    599A : 4846                		swap	d6
(1) 1360/    599C : 4845                		swap	d5
(1) 1361/    599E : 8C84                		or.l	d4,d6
(1) 1362/    59A0 : 8A84                		or.l	d4,d5
(1) 1363/    59A2 : 3E2E 002A           		move.w	box_Width(a6),d7
(1) 1364/    59A6 : 9E7C 0001           		sub.w	#1,d7
(1) 1365/    59AA :                     .nxt_one:
(1) 1366/    59AA : 3014                		move.w	(a4),d0
(1) 1367/    59AC : 907C 0001           		sub.w	#1,d0
(1) 1368/    59B0 : C07C 000F           		and.w	#%1111,d0
(1) 1369/    59B4 : E748                		lsl.w	#3,d0
(1) 1370/    59B6 : 2433 0000           		move.l	(a3,d0.w),d2
(1) 1371/    59BA : D4BC 22A0 22A0      		add.l	#(((VRAMSET_BLOCKS+$2000))<<16)|(VRAMSET_BLOCKS+$2000),d2
(1) 1372/    59C0 : 2233 0004           		move.l	4(a3,d0.w),d1
(1) 1373/    59C4 : D2BC 22A0 22A0      		add.l	#(((VRAMSET_BLOCKS+$2000))<<16)|(VRAMSET_BLOCKS+$2000),d1
(1) 1374/    59CA : 2806                		move.l	d6,d4
(1) 1375/    59CC : D8BC 0080 0000      		add.l	#$800000,d4
(1) 1376/    59D2 : 2B46 0004           		move.l	d6,4(a5)
(1) 1377/    59D6 : 2A82                		move.l	d2,(a5)
(1) 1378/    59D8 : 2B44 0004           		move.l	d4,4(a5)
(1) 1379/    59DC : 2A81                		move.l	d1,(a5)
(1) 1380/    59DE :                     
(1) 1381/    59DE : 2805                		move.l	d5,d4
(1) 1382/    59E0 : D8BC 0080 0000      		add.l	#$800000,d4		; Unshadow next one
(1) 1383/    59E6 : 2405                		move.l	d5,d2
(1) 1384/    59E8 : 2204                		move.l	d4,d1
(1) 1385/    59EA : C4BC 3FFF 000F      		and.l	#$3FFF000F,d2
(1) 1386/    59F0 : C2BC 3FFF 000F      		and.l	#$3FFF000F,d1
(1) 1387/    59F6 : 2B42 0004           		move.l	d2,4(a5)		
(1) 1388/    59FA : 2015                		move.l	(a5),d0
(1) 1389/    59FC : 80BC 8000 8000      		or.l	#$80008000,d0
(1) 1390/    5A02 : 2B45 0004           		move.l	d5,4(a5)
(1) 1391/    5A06 : 2A80                		move.l	d0,(a5)
(1) 1392/    5A08 : 2B41 0004           		move.l	d1,4(a5)		
(1) 1393/    5A0C : 2015                		move.l	(a5),d0
(1) 1394/    5A0E : 80BC 8000 8000      		or.l	#$80008000,d0
(1) 1395/    5A14 : 2B44 0004           		move.l	d4,4(a5)
(1) 1396/    5A18 : 2A80                		move.l	d0,(a5)
(1) 1397/    5A1A :                     		
(1) 1398/    5A1A : DCBC 0004 0000      		add.l	#$40000,d6
(1) 1399/    5A20 : DABC 0004 0000      		add.l	#$40000,d5
(1) 1400/    5A26 : D8FC 0002           		adda	#2,a4
(1) 1401/    5A2A : 51CF FF7E           		dbf	d7,.nxt_one
(1) 1402/    5A2E :                     .no_plyr_drwl:
(1) 1403/    5A2E : 4E75                		rts
(1) 1404/    5A30 :                     
(1) 1405/    5A30 :                     ; --------------------------------------
(1) 1406/    5A30 :                     ; Double res
(1) 1407/    5A30 :                     ; --------------------------------------
(1) 1408/    5A30 :                     
(1) 1409/    5A30 :                     .dblemode:
(1) 1410/    5A30 : 3C2E 002C           		move.w	box_Height(a6),d6
(1) 1411/    5A34 : 9C7C 0001           		sub.w	#1,d6
(1) 1412/    5A38 : DC6E 0028           		add.w	box_BoardY(a6),d6
(1) 1413/    5A3C : EF4E                		lsl.w	#7,d6
(1) 1414/    5A3E : 342E 0010           		move.w	box_YScrl(a6),d2
(1) 1415/    5A42 : C47C 01F0           		and.w	#$1F0,d2
(1) 1416/    5A46 : E74A                		lsl.w	#3,d2
(1) 1417/    5A48 : DC42                		add.w	d2,d6
(1) 1418/    5A4A : 283C 4000 0003      		move.l	#$40000003,d4
(1) 1419/    5A50 : 0C6E 000F 0028      		cmp.w	#15,box_BoardY(a6)
(1) 1420/    5A56 : 6D06                		blt.s	.top_half
(1) 1421/    5A58 : 283C 6000 0002      		move.l	#$60000002,d4
(1) 1422/    5A5E :                     .top_half:
(1) 1423/    5A5E : 263C 0100 0000      		move.l	#$1000000,d3
(1) 1424/    5A64 : 342E 0026           		move.w	box_BoardX(a6),d2
(1) 1425/    5A68 : E54A                		lsl.w	#2,d2
(1) 1426/    5A6A : DC42                		add.w	d2,d6
(1) 1427/    5A6C : 3A06                		move.w	d6,d5
(1) 1428/    5A6E : 9A7C 0080           		sub.w	#$0080,d5
(1) 1429/    5A72 : CA7C 0FFF           		and.w	#$0FFF,d5
(1) 1430/    5A76 : CC7C 0FFF           		and.w	#$0FFF,d6
(1) 1431/    5A7A : 4846                		swap	d6
(1) 1432/    5A7C : 4845                		swap	d5
(1) 1433/    5A7E : 8C84                		or.l	d4,d6
(1) 1434/    5A80 : 8A84                		or.l	d4,d5
(1) 1435/    5A82 : 3E2E 002A           		move.w	box_Width(a6),d7
(1) 1436/    5A86 : 9E7C 0001           		sub.w	#1,d7
(1) 1437/    5A8A :                     .nxt_one_d:
(1) 1438/    5A8A : 3014                		move.w	(a4),d0
(1) 1439/    5A8C : 907C 0001           		sub.w	#1,d0
(1) 1440/    5A90 : C07C 000F           		and.w	#%1111,d0
(1) 1441/    5A94 : E748                		lsl.w	#3,d0
(1) 1442/    5A96 : 3433 0000           		move.w	(a3,d0.w),d2
(1) 1443/    5A9A : 3202                		move.w	d2,d1
(1) 1444/    5A9C : C27C F800           		and.w	#$F800,d1
(1) 1445/    5AA0 : E24A                		lsr.w	#1,d2
(1) 1446/    5AA2 : C47C 07FF           		and.w	#$7FF,d2
(1) 1447/    5AA6 : 8441                		or.w	d1,d2
(1) 1448/    5AA8 : D47C 2150           		add.w	#((VRAMSET_BLOCKS)/2)+$2000,d2
(1) 1449/    5AAC : 4842                		swap	d2
(1) 1450/    5AAE : 3433 0002           		move.w	2(a3,d0.w),d2
(1) 1451/    5AB2 : 3202                		move.w	d2,d1
(1) 1452/    5AB4 : C27C F800           		and.w	#$F800,d1
(1) 1453/    5AB8 : E24A                		lsr.w	#1,d2
(1) 1454/    5ABA : C47C 07FF           		and.w	#$7FF,d2
(1) 1455/    5ABE : 8441                		or.w	d1,d2
(1) 1456/    5AC0 : D47C 2150           		add.w	#((VRAMSET_BLOCKS)/2)+$2000,d2
(1) 1457/    5AC4 : 2805                		move.l	d5,d4
(1) 1458/    5AC6 : 2605                		move.l	d5,d3
(1) 1459/    5AC8 : C6BC 3FFF 0003      		and.l	#$3FFF0003,d3
(1) 1460/    5ACE : 2B46 0004           		move.l	d6,4(a5)
(1) 1461/    5AD2 : 2A82                		move.l	d2,(a5)
(1) 1462/    5AD4 : 2B43 0004           		move.l	d3,4(a5)
(1) 1463/    5AD8 : 2015                		move.l	(a5),d0
(1) 1464/    5ADA : 80BC 8000 8000      		or.l	#$80008000,d0
(1) 1465/    5AE0 : 2B45 0004           		move.l	d5,4(a5)
(1) 1466/    5AE4 : 2A80                		move.l	d0,(a5)
(1) 1467/    5AE6 : DCBC 0004 0000      		add.l	#$40000,d6
(1) 1468/    5AEC : DABC 0004 0000      		add.l	#$40000,d5
(1) 1469/    5AF2 : D8FC 0002           		adda	#2,a4
(1) 1470/    5AF6 : 51CF FF92           		dbf	d7,.nxt_one_d
(1) 1471/    5AFA : 4E75                		rts
(1) 1472/    5AFC :                     
(1) 1473/    5AFC :                     ; --------------------------------------------------------
(1) 1474/    5AFC :                     ; Update scores
(1) 1475/    5AFC :                     ; 
(1) 1476/    5AFC :                     ; VBLANK ONLY
(1) 1477/    5AFC :                     ; --------------------------------------------------------
(1) 1478/    5AFC :                     
(1) 1479/    5AFC :                     PzlGame_UpdScores:
(1) 1480/    5AFC : 082E 0007 0004      		btst	#bitScorSt_Active,scorBox_Status(a6)
(1) 1481/    5B02 : 6700 0112           		beq	.no_plyr
(1) 1482/    5B06 :                     ; 		movea.l	scorBox_BoxAddr(a6),a3
(1) 1483/    5B06 :                     ; 		move.l	box_UserScore(a3),d0
(1) 1484/    5B06 :                     ; 		tst.w	scorBox_Type(a6)
(1) 1485/    5B06 :                     ; 		beq.s	.doit
(1) 1486/    5B06 :                     ; 		move.l	(RAM_PGame_GlblTimer),d0
(1) 1487/    5B06 :                     ; ; 		moveq	#0,d1
(1) 1488/    5B06 :                     ; .doit:
(1) 1489/    5B06 :                     ; 		bsr	.drwscor_label
(1) 1490/    5B06 :                     
(1) 1491/    5B06 :                     
(1) 1492/    5B06 :                     ; ------------------------------------------------
(1) 1493/    5B06 :                     
(1) 1494/    5B06 :                     .drwscor_label:
(1) 1495/    5B06 : 2656                		movea.l	scorBox_BoxAddr(a6),a3
(1) 1496/    5B08 : 7200                		moveq	#0,d1
(1) 1497/    5B0A : 2801                		move.l	d1,d4
(1) 1498/    5B0C : 7A00                		moveq	#0,d5
(1) 1499/    5B0E : 3A2E 0008           		move.w	scorBox_Y(a6),d5
(1) 1500/    5B12 : DA44                		add.w	d4,d5
(1) 1501/    5B14 : 4844                		swap	d4
(1) 1502/    5B16 : EF4D                		lsl.w	#7,d5
(1) 1503/    5B18 : DA45                		add.w	d5,d5
(1) 1504/    5B1A : 3C2E 0006           		move.w	scorBox_X(a6),d6
(1) 1505/    5B1E : DC44                		add.w	d4,d6
(1) 1506/    5B20 : DC46                		add.w	d6,d6
(1) 1507/    5B22 : DA46                		add.w	d6,d5
(1) 1508/    5B24 : 4845                		swap	d5
(1) 1509/    5B26 : 8ABC 4000 0003      		or.l	#$40000003,d5
(1) 1510/    5B2C : 2C05                		move.l	d5,d6
(1) 1511/    5B2E : DCBC 0080 0000      		add.l	#$800000,d6
(1) 1512/    5B34 :                     
(1) 1513/    5B34 : DABC 0100 0000      		add.l	#$1000000,d5
(1) 1514/    5B3A : 2C05                		move.l	d5,d6
(1) 1515/    5B3C : DCBC 0080 0000      		add.l	#$800000,d6
(1) 1516/    5B42 :                     		
(1) 1517/    5B42 : 342E 000E           		move.w	scorBox_Type(a6),d2
(1) 1518/    5B46 : 6700 00D0           		beq	.show_score
(1) 1519/    5B4A : B47C 0002           		cmp.w	#2,d2
(1) 1520/    5B4E : 6700 0102           		beq	.show_combo
(1) 1521/    5B52 :                     		
(1) 1522/    5B52 :                     .show_time:
(1) 1523/    5B52 : 2038 8B6C           		move.l	(RAM_PGame_GlblTimer),d0
(1) 1524/    5B56 : 2800                		move.l	d0,d4
(1) 1525/    5B58 : E19C                		rol.l	#8,d4
(1) 1526/    5B5A :                     
(1) 1527/    5B5A : E99C                		rol.l	#4,d4
(1) 1528/    5B5C : 1004                		move.b	d4,d0
(1) 1529/    5B5E : C07C 000F           		and.w	#$F,d0
(1) 1530/    5B62 : D040                		add.w	d0,d0
(1) 1531/    5B64 : D07C E480           		add.w	#VRAMSET_BOXBORDER+$80|$8000+$6000,d0		; VRAM Points to numbers
(1) 1532/    5B68 : 2B45 0004           		move.l	d5,4(a5)
(1) 1533/    5B6C : 3A80                		move.w	d0,(a5)
(1) 1534/    5B6E : D07C 0001           		add.w	#1,d0
(1) 1535/    5B72 : 2B46 0004           		move.l	d6,4(a5)
(1) 1536/    5B76 : 3A80                		move.w	d0,(a5)		
(1) 1537/    5B78 : DABC 0002 0000      		add.l	#$20000,d5
(1) 1538/    5B7E : DCBC 0002 0000      		add.l	#$20000,d6
(1) 1539/    5B84 : E99C                		rol.l	#4,d4
(1) 1540/    5B86 : 1004                		move.b	d4,d0
(1) 1541/    5B88 : C07C 000F           		and.w	#$F,d0
(1) 1542/    5B8C : D040                		add.w	d0,d0
(1) 1543/    5B8E : D07C E480           		add.w	#VRAMSET_BOXBORDER+$80|$8000+$6000,d0		; VRAM Points to numbers
(1) 1544/    5B92 : 2B45 0004           		move.l	d5,4(a5)
(1) 1545/    5B96 : 3A80                		move.w	d0,(a5)
(1) 1546/    5B98 : D07C 0001           		add.w	#1,d0
(1) 1547/    5B9C : 2B46 0004           		move.l	d6,4(a5)
(1) 1548/    5BA0 : 3A80                		move.w	d0,(a5)
(1) 1549/    5BA2 : DABC 0002 0000      		add.l	#$20000,d5
(1) 1550/    5BA8 : DCBC 0002 0000      		add.l	#$20000,d6
(1) 1551/    5BAE :                     		
(1) 1552/    5BAE :                     	; :
(1) 1553/    5BAE : 2B45 0004           		move.l	d5,4(a5)
(1) 1554/    5BB2 : 303C E494           		move.w	#VRAMSET_BOXBORDER+$94|$8000+$6000,d0		; VRAM Points to " : "
(1) 1555/    5BB6 : 3A80                		move.w	d0,(a5)
(1) 1556/    5BB8 : D07C 0001           		add.w	#1,d0
(1) 1557/    5BBC : 2B46 0004           		move.l	d6,4(a5)
(1) 1558/    5BC0 : 3A80                		move.w	d0,(a5)	
(1) 1559/    5BC2 : DABC 0002 0000      		add.l	#$20000,d5
(1) 1560/    5BC8 : DCBC 0002 0000      		add.l	#$20000,d6
(1) 1561/    5BCE :                     
(1) 1562/    5BCE : E99C                		rol.l	#4,d4
(1) 1563/    5BD0 : 1004                		move.b	d4,d0
(1) 1564/    5BD2 : C07C 000F           		and.w	#$F,d0
(1) 1565/    5BD6 : D040                		add.w	d0,d0
(1) 1566/    5BD8 : D07C E480           		add.w	#VRAMSET_BOXBORDER+$80|$8000+$6000,d0		; VRAM Points to numbers
(1) 1567/    5BDC : 2B45 0004           		move.l	d5,4(a5)
(1) 1568/    5BE0 : 3A80                		move.w	d0,(a5)
(1) 1569/    5BE2 : D07C 0001           		add.w	#1,d0
(1) 1570/    5BE6 : 2B46 0004           		move.l	d6,4(a5)
(1) 1571/    5BEA : 3A80                		move.w	d0,(a5)		
(1) 1572/    5BEC : DABC 0002 0000      		add.l	#$20000,d5
(1) 1573/    5BF2 : DCBC 0002 0000      		add.l	#$20000,d6
(1) 1574/    5BF8 : E99C                		rol.l	#4,d4
(1) 1575/    5BFA : 1004                		move.b	d4,d0
(1) 1576/    5BFC : C07C 000F           		and.w	#$F,d0
(1) 1577/    5C00 : D040                		add.w	d0,d0
(1) 1578/    5C02 : D07C E480           		add.w	#VRAMSET_BOXBORDER+$80|$8000+$6000,d0		; VRAM Points to numbers
(1) 1579/    5C06 : 2B45 0004           		move.l	d5,4(a5)
(1) 1580/    5C0A : 3A80                		move.w	d0,(a5)
(1) 1581/    5C0C : D07C 0001           		add.w	#1,d0
(1) 1582/    5C10 : 2B46 0004           		move.l	d6,4(a5)
(1) 1583/    5C14 : 3A80                		move.w	d0,(a5)
(1) 1584/    5C16 :                     .no_plyr:
(1) 1585/    5C16 : 4E75                		rts
(1) 1586/    5C18 :                     
(1) 1587/    5C18 :                     ; ----------------------------------------
(1) 1588/    5C18 :                     
(1) 1589/    5C18 :                     .show_score:
(1) 1590/    5C18 : 282B 0040           		move.l	box_UserScore(a3),d4
(1) 1591/    5C1C :                     ; 		bra.s	*
(1) 1592/    5C1C : E19C                		rol.l	#8,d4
(1) 1593/    5C1E : 343C 0005           		move.w	#6-1,d2
(1) 1594/    5C22 :                     .nxtnmbr:
(1) 1595/    5C22 : E99C                		rol.l	#4,d4
(1) 1596/    5C24 : 1004                		move.b	d4,d0
(1) 1597/    5C26 : C07C 000F           		and.w	#$F,d0
(1) 1598/    5C2A : D040                		add.w	d0,d0
(1) 1599/    5C2C : D07C E480           		add.w	#VRAMSET_BOXBORDER+$80|$8000+$6000,d0		; VRAM Points to numbers
(1) 1600/    5C30 : 2B45 0004           		move.l	d5,4(a5)
(1) 1601/    5C34 : 3A80                		move.w	d0,(a5)
(1) 1602/    5C36 : D07C 0001           		add.w	#1,d0
(1) 1603/    5C3A : 2B46 0004           		move.l	d6,4(a5)
(1) 1604/    5C3E : 3A80                		move.w	d0,(a5)		
(1) 1605/    5C40 : DABC 0002 0000      		add.l	#$20000,d5
(1) 1606/    5C46 : DCBC 0002 0000      		add.l	#$20000,d6
(1) 1607/    5C4C : 51CA FFD4           		dbf	d2,.nxtnmbr
(1) 1608/    5C50 : 4E75                		rts
(1) 1609/    5C52 :                     
(1) 1610/    5C52 :                     ; ----------------------------------------
(1) 1611/    5C52 :                     
(1) 1612/    5C52 :                     .show_combo:
(1) 1613/    5C52 : 382B 0038           		move.w	box_ComboCntShow(a3),d4
(1) 1614/    5C56 : E19C                		rol.l	#8,d4
(1) 1615/    5C58 : 343C 0001           		move.w	#2-1,d2
(1) 1616/    5C5C :                     .nxtnmbr2:
(1) 1617/    5C5C : E95C                		rol.w	#4,d4
(1) 1618/    5C5E : 1004                		move.b	d4,d0
(1) 1619/    5C60 : C07C 000F           		and.w	#$F,d0
(1) 1620/    5C64 : D040                		add.w	d0,d0
(1) 1621/    5C66 : D07C E480           		add.w	#VRAMSET_BOXBORDER+$80|$8000+$6000,d0		; VRAM Points to numbers
(1) 1622/    5C6A : 2B45 0004           		move.l	d5,4(a5)
(1) 1623/    5C6E : 3A80                		move.w	d0,(a5)
(1) 1624/    5C70 : D07C 0001           		add.w	#1,d0
(1) 1625/    5C74 : 2B46 0004           		move.l	d6,4(a5)
(1) 1626/    5C78 : 3A80                		move.w	d0,(a5)		
(1) 1627/    5C7A : DABC 0002 0000      		add.l	#$20000,d5
(1) 1628/    5C80 : DCBC 0002 0000      		add.l	#$20000,d6
(1) 1629/    5C86 : 51CA FFD4           		dbf	d2,.nxtnmbr2
(1) 1630/    5C8A : 4E75                		rts
(1) 1631/    5C8C :                     
(1) 1632/    5C8C :                     ; --------------------------------------------------------
(1) 1633/    5C8C :                     ; Move players
(1) 1634/    5C8C :                     ; --------------------------------------------------------
(1) 1635/    5C8C :                     
(1) 1636/    5C8C :                     PzlGame_UpdateBoxes:
(1) 1637/    5C8C : 0838 0007 86E0      		btst	#bitMtch_Pause,(RAM_Glbl_GameMtchFlags).w
(1) 1638/    5C92 : 6600 09A8           		bne	.box_paused
(1) 1639/    5C96 : 4DF8 8424           		lea	(RAM_Glbl_PzlBoxes),a6
(1) 1640/    5C9A : 3E3C 0003           		move.w	#MAX_BOXES-1,d7
(1) 1641/    5C9E : 2438 86E2           		move.l	(RAM_GlblRndSeeds).w,d2
(1) 1642/    5CA2 :                     .this_plyr:
(1) 1643/    5CA2 : 4847                		swap	d7
(1) 1644/    5CA4 : 082E 0007 0024      		btst	#bitPlySt_Active,box_Status(a6)
(1) 1645/    5CAA : 6700 0982           		beq	.no_plyr
(1) 1646/    5CAE :                     ; 		btst	#bitPlySt_Pause,box_Status(a6)
(1) 1647/    5CAE :                     ; 		bne	.no_plyr
(1) 1648/    5CAE :                     
(1) 1649/    5CAE :                     	; --------------------------------------
(1) 1650/    5CAE :                     
(1) 1651/    5CAE :                     	; TODO: checking this way, 1P looses first if not moving at all
(1) 1652/    5CAE : 0838 0006 86E0      		btst	#bitMtch_MatchOver,(RAM_Glbl_GameMtchFlags).w
(1) 1653/    5CB4 : 6600 08E0           		bne	.upd_vscrl
(1) 1654/    5CB8 : 082E 0002 0024      		btst	#bitPlySt_GameOver,box_Status(a6)
(1) 1655/    5CBE : 6600 08D6           		bne	.upd_vscrl
(1) 1656/    5CC2 : 082E 0000 0024      		btst	#bitPlySt_MidSwapStop,box_Status(a6)
(1) 1657/    5CC8 : 6600 08CC           		bne	.upd_vscrl
(1) 1658/    5CCC : 08AE 0003 0024      		bclr	#bitPlySt_ChkMatch,box_Status(a6)
(1) 1659/    5CD2 : 6700 01D8           		beq	.no_mtchchk
(1) 1660/    5CD6 :                     
(1) 1661/    5CD6 :                     	; --------------------------------------
(1) 1662/    5CD6 :                     	; Horizontal match
(1) 1663/    5CD6 :                     	; --------------------------------------
(1) 1664/    5CD6 : 286E 000C           		movea.l	box_BlockData(a6),a4
(1) 1665/    5CDA : D8FC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a4
(1) 1666/    5CDE : 264C                		move.l	a4,a3
(1) 1667/    5CE0 : 3C2E 002C           		move.w	box_Height(a6),d6
(1) 1668/    5CE4 : 9C7C 0002           		sub.w	#1+1,d6
(1) 1669/    5CE8 :                     .horz_clmn:
(1) 1670/    5CE8 : 4846                		swap	d6
(1) 1671/    5CEA : 3C2E 002A           		move.w	box_Width(a6),d6
(1) 1672/    5CEE : 9C7C 0001           		sub.w	#1,d6
(1) 1673/    5CF2 : 244C                		move.l	a4,a2
(1) 1674/    5CF4 :                     .horz_new:
(1) 1675/    5CF4 : 7601                		moveq	#1,d3
(1) 1676/    5CF6 : 7200                		moveq	#0,d1
(1) 1677/    5CF8 :                     .horz_row:
(1) 1678/    5CF8 : 3012                 		move.w	(a2),d0
(1) 1679/    5CFA : 3A00                 		move.w	d0,d5
(1) 1680/    5CFC : C07C 001F           		and.w	#$1F,d0
(1) 1681/    5D00 : 672C                		beq.s	.hz_check
(1) 1682/    5D02 : B03C 0008           		cmp.b	#SET_MAXUSERBLKS,d0
(1) 1683/    5D06 : 6E0E                		bgt.s	.hz_next4
(1) 1684/    5D08 : 3E05                		move.w	d5,d7
(1) 1685/    5D0A : CE7C 7F00           		and.w	#$7F00,d7
(1) 1686/    5D0E : 670C                		beq.s	.hz_next2
(1) 1687/    5D10 :                     .hz_next3:
(1) 1688/    5D10 : B67C 0003           		cmp.w	#SET_MAXBLKMTCH,d3
(1) 1689/    5D14 : 6C06                		bge.s	.hz_next2
(1) 1690/    5D16 :                     .hz_next4:
(1) 1691/    5D16 : 7601                		moveq	#1,d3
(1) 1692/    5D18 : 7200                		moveq	#0,d1
(1) 1693/    5D1A : 6020                		bra.s	.hz_next
(1) 1694/    5D1C :                     .hz_next2:
(1) 1695/    5D1C : B001                		cmp.b	d1,d0
(1) 1696/    5D1E : 660E                		bne.s	.hz_check
(1) 1697/    5D20 :                     ; 		btst	#bitBlkFlg_Fall,d5		; HZ only
(1) 1698/    5D20 :                     ; 		beq.s	.hz_check2
(1) 1699/    5D20 :                     ; 		btst	#bitBlkFlg_Match,d5
(1) 1700/    5D20 :                     ; 		beq.s	.hz_check		
(1) 1701/    5D20 :                     .hz_check2:
(1) 1702/    5D20 : 3E05                		move.w	d5,d7
(1) 1703/    5D22 : CE7C 7F00           		and.w	#$7F00,d7
(1) 1704/    5D26 : 6606                		bne.s	.hz_check
(1) 1705/    5D28 : D67C 0001           		add.w	#1,d3
(1) 1706/    5D2C : 600E                		bra.s	.hz_next
(1) 1707/    5D2E :                     .hz_check:
(1) 1708/    5D2E : 3803                		move.w	d3,d4
(1) 1709/    5D30 : 7601                		moveq	#1,d3
(1) 1710/    5D32 : B87C 0003           		cmp.w	#SET_MAXBLKMTCH,d4
(1) 1711/    5D36 : 6D02                		blt.s	.hz_save
(1) 1712/    5D38 : 6120                		bsr	.hz_delblocks
(1) 1713/    5D3A :                     .hz_save:
(1) 1714/    5D3A : 1200                		move.b	d0,d1
(1) 1715/    5D3C :                     .hz_next:
(1) 1716/    5D3C : D4FC 0002           		adda	#2,a2
(1) 1717/    5D40 : 51CE FFB6           		dbf	d6,.horz_row
(1) 1718/    5D44 : 3803                		move.w	d3,d4
(1) 1719/    5D46 : B67C 0003           		cmp.w	#SET_MAXBLKMTCH,d3
(1) 1720/    5D4A : 6D02                		blt.s	.hz_last
(1) 1721/    5D4C : 610C                		bsr	.hz_delblocks
(1) 1722/    5D4E :                     .hz_last:
(1) 1723/    5D4E : D8FC 0020           		adda	#MAX_BOXWIDTH,a4
(1) 1724/    5D52 : 4846                		swap	d6
(1) 1725/    5D54 : 51CE FF92           		dbf	d6,.horz_clmn
(1) 1726/    5D58 : 6060                		bra.s	.hz_exit
(1) 1727/    5D5A :                     .hz_delblocks:
(1) 1728/    5D5A : 4841                		swap	d1
(1) 1729/    5D5C : 4840                		swap	d0
(1) 1730/    5D5E : 4240                		clr.w	d0
(1) 1731/    5D60 : 3204                		move.w	d4,d1
(1) 1732/    5D62 : 927C 0001           		sub.w	#1,d1
(1) 1733/    5D66 : 224A                		move.l	a2,a1
(1) 1734/    5D68 :                     .hz_delloop:
(1) 1735/    5D68 : 3821                		move.w	-(a1),d4
(1) 1736/    5D6A : 8044                		or.w	d4,d0
(1) 1737/    5D6C : C87C 001F           		and.w	#$1F,d4
(1) 1738/    5D70 : 08C4 0007           		bset	#bitBlkFlg_Match,d4
(1) 1739/    5D74 : 3284                		move.w	d4,(a1)
(1) 1740/    5D76 : 51C9 FFF0           		dbf	d1,.hz_delloop
(1) 1741/    5D7A : 3800                		move.w	d0,d4
(1) 1742/    5D7C : 4841                		swap	d1
(1) 1743/    5D7E : 4840                		swap	d0
(1) 1744/    5D80 : 066E 0001 002E      		add.w	#1,box_MatchCount(a6)
(1) 1745/    5D86 : 42AE 001C           		clr.l	box_BoardTimeOut(a6)
(1) 1746/    5D8A : 0804 0005           		btst	#bitBlkFlg_Chain,d4
(1) 1747/    5D8E : 6718                		beq.s	.hz_nocomb
(1) 1748/    5D90 :                     		
(1) 1749/    5D90 : 7800                		moveq	#0,d4
(1) 1750/    5D92 : 382E 0038           		move.w	box_ComboCntShow(a6),d4
(1) 1751/    5D96 : 323C 0001           		move.w	#1,d1
(1) 1752/    5D9A : C901                 		abcd	d1,d4
(1) 1753/    5D9C : 3D44 0038            		move.w	d4,box_ComboCntShow(a6)
(1) 1754/    5DA0 : 066E 0001 0036      		add.w	#1,box_ComboCount(a6)
(1) 1755/    5DA6 : 6004                		bra.s	.hz_settrsh
(1) 1756/    5DA8 :                     .hz_nocomb:
(1) 1757/    5DA8 :                     ; 		clr.w	box_ComboCount(a6)
(1) 1758/    5DA8 : 426E 0038           		clr.w	box_ComboCntShow(a6)
(1) 1759/    5DAC :                     .hz_settrsh:
(1) 1760/    5DAC : 4A6E 0036           		tst.w	box_ComboCount(a6)
(1) 1761/    5DB0 : 6706                		beq.s	.hz_noreq
(1) 1762/    5DB2 : 08EE 0000 003E      		bset	#0,box_TrshReq(a6)
(1) 1763/    5DB8 :                     .hz_noreq:
(1) 1764/    5DB8 : 4E75                		rts
(1) 1765/    5DBA :                     
(1) 1766/    5DBA :                     .hz_exit:
(1) 1767/    5DBA :                     
(1) 1768/    5DBA :                     	; --------------------------------------
(1) 1769/    5DBA :                     	; Vertical match
(1) 1770/    5DBA :                     	; --------------------------------------
(1) 1771/    5DBA : 284B                		move.l	a3,a4
(1) 1772/    5DBC : 3C2E 002A           		move.w	box_Width(a6),d6
(1) 1773/    5DC0 : 9C7C 0001           		sub.w	#1,d6
(1) 1774/    5DC4 :                     .vert_clmn:
(1) 1775/    5DC4 : 4846                		swap	d6
(1) 1776/    5DC6 : 3C2E 002C           		move.w	box_Height(a6),d6
(1) 1777/    5DCA : 9C7C 0002           		sub.w	#1+1,d6
(1) 1778/    5DCE : 244C                		move.l	a4,a2
(1) 1779/    5DD0 :                     .vert_new:
(1) 1780/    5DD0 : 7601                		moveq	#1,d3
(1) 1781/    5DD2 : 7200                		moveq	#0,d1
(1) 1782/    5DD4 :                     .vert_row:
(1) 1783/    5DD4 : 3012                 		move.w	(a2),d0
(1) 1784/    5DD6 : 3A00                 		move.w	d0,d5
(1) 1785/    5DD8 : C07C 001F           		and.w	#$1F,d0
(1) 1786/    5DDC : 672C                		beq.s	.vt_check
(1) 1787/    5DDE : B03C 0008           		cmp.b	#SET_MAXUSERBLKS,d0
(1) 1788/    5DE2 : 6E0E                		bgt.s	.vt_next4
(1) 1789/    5DE4 : 3E05                		move.w	d5,d7
(1) 1790/    5DE6 : CE7C 7F00           		and.w	#$7F00,d7
(1) 1791/    5DEA : 670C                		beq.s	.vt_next2
(1) 1792/    5DEC : B67C 0003           		cmp.w	#SET_MAXBLKMTCH,d3
(1) 1793/    5DF0 : 6C06                		bge.s	.vt_next2
(1) 1794/    5DF2 :                     .vt_next4:
(1) 1795/    5DF2 : 7601                		moveq	#1,d3
(1) 1796/    5DF4 : 7200                		moveq	#0,d1
(1) 1797/    5DF6 : 6022                		bra.s	.vt_next
(1) 1798/    5DF8 :                     .vt_next2:
(1) 1799/    5DF8 : B001                		cmp.b	d1,d0
(1) 1800/    5DFA : 660E                		bne.s	.vt_check
(1) 1801/    5DFC : 3E05                		move.w	d5,d7
(1) 1802/    5DFE : CE7C 7F00           		and.w	#$7F00,d7
(1) 1803/    5E02 : 6606                		bne.s	.vt_check
(1) 1804/    5E04 : D67C 0001           		add.w	#1,d3
(1) 1805/    5E08 : 6010                		bra.s	.vt_next
(1) 1806/    5E0A :                     .vt_check:
(1) 1807/    5E0A : 3803                		move.w	d3,d4
(1) 1808/    5E0C : 7601                		moveq	#1,d3
(1) 1809/    5E0E : B87C 0003           		cmp.w	#SET_MAXBLKMTCH,d4
(1) 1810/    5E12 : 6D04                		blt.s	.vt_save
(1) 1811/    5E14 : 6122                		bsr	.vt_delblocks
(1) 1812/    5E16 : 60B8                		bra.s	.vert_new
(1) 1813/    5E18 :                     .vt_save:
(1) 1814/    5E18 : 1200                		move.b	d0,d1
(1) 1815/    5E1A :                     .vt_next:
(1) 1816/    5E1A : D4FC 0020           		adda	#MAX_BOXWIDTH,a2
(1) 1817/    5E1E : 51CE FFB4           		dbf	d6,.vert_row
(1) 1818/    5E22 : 3803                		move.w	d3,d4
(1) 1819/    5E24 : B67C 0003           		cmp.w	#SET_MAXBLKMTCH,d3
(1) 1820/    5E28 : 6D02                		blt.s	.vt_last
(1) 1821/    5E2A : 610C                		bsr	.vt_delblocks
(1) 1822/    5E2C :                     .vt_last:
(1) 1823/    5E2C : D8FC 0002           		adda	#2,a4
(1) 1824/    5E30 : 4846                		swap	d6
(1) 1825/    5E32 : 51CE FF90           		dbf	d6,.vert_clmn
(1) 1826/    5E36 : 606E                		bra.s	.vt_exit
(1) 1827/    5E38 :                     .vt_delblocks:
(1) 1828/    5E38 : 4841                		swap	d1
(1) 1829/    5E3A : 4840                		swap	d0
(1) 1830/    5E3C : 4240                		clr.w	d0
(1) 1831/    5E3E : 3204                		move.w	d4,d1
(1) 1832/    5E40 : 927C 0001           		sub.w	#1,d1
(1) 1833/    5E44 : 224A                		move.l	a2,a1
(1) 1834/    5E46 : 92FC 0020           		suba	#MAX_BOXWIDTH,a1
(1) 1835/    5E4A :                     .vt_delloop:
(1) 1836/    5E4A : 3811                		move.w	(a1),d4
(1) 1837/    5E4C : 8044                		or.w	d4,d0
(1) 1838/    5E4E : C87C 001F           		and.w	#$1F,d4
(1) 1839/    5E52 : 08C4 0007           		bset	#bitBlkFlg_Match,d4
(1) 1840/    5E56 : 3284                		move.w	d4,(a1)
(1) 1841/    5E58 : 92FC 0020           		suba	#MAX_BOXWIDTH,a1
(1) 1842/    5E5C : 51C9 FFEC           		dbf	d1,.vt_delloop
(1) 1843/    5E60 : 3800                		move.w	d0,d4
(1) 1844/    5E62 : 4841                		swap	d1
(1) 1845/    5E64 : 4840                		swap	d0
(1) 1846/    5E66 : 0804 0007           		btst	#bitBlkFlg_Match,d4
(1) 1847/    5E6A : 6628                		bne.s	.vt_nocomb
(1) 1848/    5E6C : 0804 0005           		btst	#bitBlkFlg_Chain,d4
(1) 1849/    5E70 : 6718                		beq.s	.vt_onlymtch
(1) 1850/    5E72 : 7800                		moveq	#0,d4
(1) 1851/    5E74 : 382E 0038           		move.w	box_ComboCntShow(a6),d4
(1) 1852/    5E78 : 323C 0001           		move.w	#1,d1
(1) 1853/    5E7C : C901                 		abcd	d1,d4
(1) 1854/    5E7E : 3D44 0038            		move.w	d4,box_ComboCntShow(a6)
(1) 1855/    5E82 : 066E 0001 0036      		add.w	#1,box_ComboCount(a6)
(1) 1856/    5E88 : 600E                		bra.s	.vt_settrsh
(1) 1857/    5E8A :                     .vt_onlymtch:
(1) 1858/    5E8A : 066E 0001 002E      		add.w	#1,box_MatchCount(a6)
(1) 1859/    5E90 : 42AE 001C           		clr.l	box_BoardTimeOut(a6)
(1) 1860/    5E94 :                     .vt_nocomb:
(1) 1861/    5E94 :                     ; 		clr.w	box_ComboCount(a6)
(1) 1862/    5E94 : 426E 0038           		clr.w	box_ComboCntShow(a6)
(1) 1863/    5E98 :                     .vt_settrsh:
(1) 1864/    5E98 : 4A6E 0036           		tst.w	box_ComboCount(a6)
(1) 1865/    5E9C : 6706                		beq.s	.vz_noreq
(1) 1866/    5E9E : 08EE 0000 003E      		bset	#0,box_TrshReq(a6)
(1) 1867/    5EA4 :                     .vz_noreq:
(1) 1868/    5EA4 : 4E75                		rts
(1) 1869/    5EA6 :                     .vt_exit:
(1) 1870/    5EA6 :                     
(1) 1871/    5EA6 :                     	; exit
(1) 1872/    5EA6 : 08AE 0001 0024      		bclr	#bitPlySt_SpdUp,box_Status(a6)
(1) 1873/    5EAC :                     .no_mtchchk:
(1) 1874/    5EAC : 0838 0005 86E0      		btst	#bitMtch_Timeout,(RAM_Glbl_GameMtchFlags).w
(1) 1875/    5EB2 : 6600 056E           		bne	.force_gameover
(1) 1876/    5EB6 :                     		
(1) 1877/    5EB6 :                     	; --------------------------------------
(1) 1878/    5EB6 :                     	; MAIN BLOCK CHECK ROUTINE
(1) 1879/    5EB6 :                     	; CPU HEAVY
(1) 1880/    5EB6 :                     	; 
(1) 1881/    5EB6 :                     	; Fall blocks, check matches, fall
(1) 1882/    5EB6 :                     	; trash blocks, etc.
(1) 1883/    5EB6 :                     	; 
(1) 1884/    5EB6 :                     	; Right to left, bottom to top
(1) 1885/    5EB6 :                     	; --------------------------------------
(1) 1886/    5EB6 : 4247                		clr.w	d7
(1) 1887/    5EB8 : 2A6E 000C           		movea.l	box_BlockData(a6),a5
(1) 1888/    5EBC : DAFC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a5
(1) 1889/    5EC0 : 284D                		move.l	a5,a4
(1) 1890/    5EC2 : 3C2E 002C           		move.w	box_Height(a6),d6
(1) 1891/    5EC6 : 3A2E 002A           		move.w	box_Width(a6),d5
(1) 1892/    5ECA : 9A7C 0001           		sub.w	#1,d5
(1) 1893/    5ECE : 3806                		move.w	d6,d4
(1) 1894/    5ED0 : 987C 0001           		sub.w	#1,d4
(1) 1895/    5ED4 : EB4C                		lsl.w	#5,d4
(1) 1896/    5ED6 : 3605                		move.w	d5,d3
(1) 1897/    5ED8 : D643                		add.w	d3,d3
(1) 1898/    5EDA : D843                		add.w	d3,d4
(1) 1899/    5EDC : D8C4                		adda	d4,a4
(1) 1900/    5EDE : 264C                		move.l	a4,a3
(1) 1901/    5EE0 : 96FC 0020           		suba	#MAX_BOXWIDTH,a3
(1) 1902/    5EE4 : 7000                		moveq	#0,d0
(1) 1903/    5EE6 : 7200                		moveq	#0,d1
(1) 1904/    5EE8 :                     
(1) 1905/    5EE8 :                     	; d0 - freeblock counter | block flags
(1) 1906/    5EE8 :                     	; d1 - reroll lastblock  | trash counter
(1) 1907/    5EE8 :                     	; 
(1) 1908/    5EE8 :                     	; d0 bits:
(1) 1909/    5EE8 :                     	; 0 - PAUSE      | force scroll stop
(1) 1910/    5EE8 :                     	; 1 - TRSHSTOP   | stop current trashblock
(1) 1911/    5EE8 :                     	; 2 - TRSHMTCH   | merge matches to trashblock
(1) 1912/    5EE8 :                     	; 3 - TRSHSHAKE  | screenshake request
(1) 1913/    5EE8 :                     	; 4 - TRSHGEN    | generate random block to current trshblock
(1) 1914/    5EE8 :                     	; 5 - TRSHADD    | extra Trash checking mode (bypass box_Height-1)
(1) 1915/    5EE8 :                     	; 7 - TRSHFREE   | set if a entire line is free
(1) 1916/    5EE8 :                     	
(1) 1917/    5EE8 :                     .blkfll_row:
(1) 1918/    5EE8 : 0880 0005           		bclr	#5,d0
(1) 1919/    5EEC : 0880 0001           		bclr	#1,d0			; TRSHSTOP reset
(1) 1920/    5EF0 : 0880 0002           		bclr	#2,d0			; TRSHMTCH reset
(1) 1921/    5EF4 : 244C                		move.l	a4,a2
(1) 1922/    5EF6 : 224B                		move.l	a3,a1
(1) 1923/    5EF8 : 4846                		swap	d6
(1) 1924/    5EFA : 3C05                		move.w	d5,d6
(1) 1925/    5EFC : 4845                		swap	d5
(1) 1926/    5EFE :                     .blkfll_clmn:
(1) 1927/    5EFE : 3611                		move.w	(a1),d3			; TOP block
(1) 1928/    5F00 : 3812                		move.w	(a2),d4			; BOT block
(1) 1929/    5F02 :                     
(1) 1930/    5F02 :                     	; --------------------------------------
(1) 1931/    5F02 :                     	; Check if BOT == 0
(1) 1932/    5F02 :                     	;          BOT == blkflg_Fall
(1) 1933/    5F02 :                     	;          BOT == BLKDEL_TIMEOUT
(1) 1934/    5F02 :                     	; --------------------------------------
(1) 1935/    5F02 : 3E04                		move.w	d4,d7
(1) 1936/    5F04 : 3A04                		move.w	d4,d5
(1) 1937/    5F06 : CA7C 7F00           		and.w	#$7F00,d5			; get TIMER and ID bits
(1) 1938/    5F0A : BA7C 5000           		cmp.w	#BLKDEL_TIMEOUT,d5		; Timerdone block?
(1) 1939/    5F0E : 6712                		beq.s	.blkfll_ovrwrt			; Overwrite on fall
(1) 1940/    5F10 : 3E04                		move.w	d4,d7
(1) 1941/    5F12 : CE7C 007F           		and.w	#$007F,d7
(1) 1942/    5F16 : BE7C 0040           		cmp.w	#blkflg_Fall,d7			; If BOT == zero + fallbit
(1) 1943/    5F1A : 6706                		beq.s	.blkfll_ovrwrt
(1) 1944/    5F1C : 4A47                		tst.w	d7				; If BOT != 0?
(1) 1945/    5F1E : 6600 01EC           		bne	.blkfll_botactv
(1) 1946/    5F22 :                     
(1) 1947/    5F22 :                     	; --------------------------------------
(1) 1948/    5F22 :                     	; BOT == $0000
(1) 1949/    5F22 :                     	; BOT == blank|fall ($0040)
(1) 1950/    5F22 :                     	; BOT == BLKDEL_TIMEOUT
(1) 1951/    5F22 :                     	; --------------------------------------
(1) 1952/    5F22 :                     .blkfll_ovrwrt:
(1) 1953/    5F22 : 4840                		swap	d0
(1) 1954/    5F24 : D07C 0001           		add.w	#1,d0
(1) 1955/    5F28 : 4840                		swap	d0
(1) 1956/    5F2A : 0803 0006           		btst	#bitBlkFlg_Fall,d3		; TOP has fall request
(1) 1957/    5F2E : 6600 0134           		bne	.blkfll_canfall
(1) 1958/    5F32 : 3E03                		move.w	d3,d7
(1) 1959/    5F34 : CE7C 7F00           		and.w	#$7F00,d7
(1) 1960/    5F38 : 662C                		bne	.blkfll_next2
(1) 1961/    5F3A : 3E03                		move.w	d3,d7
(1) 1962/    5F3C : CE7C 001F           		and.w	#$1F,d7
(1) 1963/    5F40 : 6700 00D2           		beq	.blkfll_topblnk
(1) 1964/    5F44 : BE7C 000D           		cmp.w	#SET_STRTTRSHIDS,d7
(1) 1965/    5F48 : 6C68                		bge	.blkfll_trshchn
(1) 1966/    5F4A :                     
(1) 1967/    5F4A : 3E04                		move.w	d4,d7
(1) 1968/    5F4C : 3A04                		move.w	d4,d5
(1) 1969/    5F4E : CE7C 7F00           		and.w	#$7F00,d7
(1) 1970/    5F52 : BE7C 5000           		cmp.w	#BLKDEL_TIMEOUT,d7
(1) 1971/    5F56 : 4E71                		beq	.blkfll_setfll
(1) 1972/    5F58 :                     ; 		cmp.w	#blkflg_Fall,d5			; TODO: ignoring this
(1) 1973/    5F58 :                     ; 		bne	.blkfll_next
(1) 1974/    5F58 :                     .blkfll_setfll:
(1) 1975/    5F58 : 08C3 0006           		bset	#bitBlkFlg_Fall,d3
(1) 1976/    5F5C : 08C3 0005           		bset	#bitBlkFlg_Chain,d3
(1) 1977/    5F60 : 3283                		move.w	d3,(a1)
(1) 1978/    5F62 : 6000 03E0           		bra	.blkfll_next
(1) 1979/    5F66 :                     		
(1) 1980/    5F66 :                     .blkfll_next2:
(1) 1981/    5F66 : 3A03                		move.w	d3,d5
(1) 1982/    5F68 : 3E03                		move.w	d3,d7
(1) 1983/    5F6A : CE7C 001F           		and.w	#$1F,d7
(1) 1984/    5F6E : CA7C 7F00           		and.w	#$7F00,d5
(1) 1985/    5F72 : BA7C 7000           		cmp.w	#BLKROLL_FALL,d5
(1) 1986/    5F76 : 660E                		bne.s	.blkfll_nottrsh2
(1) 1987/    5F78 : C67C 001F           		and.w	#$1F,d3
(1) 1988/    5F7C : 867C 8040           		or.w	#blkflg_Draw|blkflg_Fall,d3
(1) 1989/    5F80 : 3283                		move.w	d3,(a1)
(1) 1990/    5F82 : 6000 03C0           		bra	.blkfll_next
(1) 1991/    5F86 :                     .blkfll_nottrsh2:
(1) 1992/    5F86 : BE7C 000D           		cmp.w	#SET_STRTTRSHIDS,d7
(1) 1993/    5F8A : 6D00 03B8           		blt	.blkfll_next
(1) 1994/    5F8E : BA7C 3E00           		cmp.w	#BLKDEL_MIDANIM,d5
(1) 1995/    5F92 : 6D00 03B0           		blt	.blkfll_next
(1) 1996/    5F96 : 9E7C 000D           		sub.w	#SET_STRTTRSHIDS,d7
(1) 1997/    5F9A : CE7C 0003           		and.w	#%11,d7
(1) 1998/    5F9E : 6708                		beq.s	.blkfll_canset2
(1) 1999/    5FA0 : BE7C 0001           		cmp.w	#%01,d7
(1) 2000/    5FA4 : 6600 039E           		bne	.blkfll_next
(1) 2001/    5FA8 :                     .blkfll_canset2:
(1) 2002/    5FA8 : 08C3 0007           		bset	#bitBlkFlg_Match,d3
(1) 2003/    5FAC : 3283                		move.w	d3,(a1)
(1) 2004/    5FAE : 6000 0394           		bra	.blkfll_next
(1) 2005/    5FB2 :                     
(1) 2006/    5FB2 :                     	; Trashchain fall manual check 1
(1) 2007/    5FB2 :                     	; if trashblock was stopped
(1) 2008/    5FB2 :                     .blkfll_trshchn:
(1) 2009/    5FB2 : 9E7C 000D           		sub.w	#SET_STRTTRSHIDS,d7
(1) 2010/    5FB6 : 3A07                		move.w	d7,d5
(1) 2011/    5FB8 : CA7C 0003           		and.w	#%11,d5
(1) 2012/    5FBC : BA7C 0002           		cmp.w	#2,d5
(1) 2013/    5FC0 : 6704                		beq.s	.blkfll_next4
(1) 2014/    5FC2 : 08C0 0005           		bset	#5,d0
(1) 2015/    5FC6 :                     .blkfll_next4:
(1) 2016/    5FC6 :                     
(1) 2017/    5FC6 : 0807 0003           		btst	#3,d7				; MID?
(1) 2018/    5FCA : 6644                		bne	.blkfll_trshmcnt
(1) 2019/    5FCC : 0807 0002           		btst	#2,d7				; TL?
(1) 2020/    5FD0 : 670C                		beq	.blkfll_trshtr
(1) 2021/    5FD2 : 4241                		clr.w	d1
(1) 2022/    5FD4 : 0880 0001           		bclr	#1,d0				; TRSHSTOP reset
(1) 2023/    5FD8 : 0880 0002           		bclr	#2,d0				; TRSHMTCH reset
(1) 2024/    5FDC : 6032                		bra.s	.blkfll_trshmcnt
(1) 2025/    5FDE :                     .blkfll_trshtr:
(1) 2026/    5FDE : 4245                		clr.w	d5
(1) 2027/    5FE0 : 0800 0001           		btst	#1,d0
(1) 2028/    5FE4 : 6604                		bne.s	.blkfll_nofllbt			; No change
(1) 2029/    5FE6 : 08C5 0006           		bset	#bitBlkFlg_Fall,d5
(1) 2030/    5FEA :                     .blkfll_nofllbt:
(1) 2031/    5FEA : 2049                		move.l	a1,a0
(1) 2032/    5FEC : 0800 0002           		btst	#2,d0
(1) 2033/    5FF0 : 6704                		beq.s	.trshidl_set
(1) 2034/    5FF2 : 08C5 0007           		bset	#bitBlkFlg_Match,d5
(1) 2035/    5FF6 :                     .trshidl_set:
(1) 2036/    5FF6 : 3E10                		move.w	(a0),d7
(1) 2037/    5FF8 : 8E45                		or.w	d5,d7
(1) 2038/    5FFA : 3087                		move.w	d7,(a0)
(1) 2039/    5FFC : D0FC 0002           		adda	#2,a0
(1) 2040/    6000 : 51C9 FFF4           		dbf	d1,.trshidl_set
(1) 2041/    6004 : 4241                		clr.w	d1
(1) 2042/    6006 : 0880 0002           		bclr	#2,d0
(1) 2043/    600A : 0880 0001           		bclr	#1,d0
(1) 2044/    600E : 6004                		bra	.blkfll_topblnk
(1) 2045/    6010 :                     .blkfll_trshmcnt:
(1) 2046/    6010 : D27C 0001           		add.w	#1,d1				; Incrmnt fall length
(1) 2047/    6014 :                     
(1) 2048/    6014 :                     .blkfll_topblnk:
(1) 2049/    6014 : B87C 0040           		cmp.w	#blkflg_Fall,d4
(1) 2050/    6018 : 660A                		bne.s	.blkfll_decmonly
(1) 2051/    601A : 34BC 8000           		move.w	#blkflg_Draw,(a2)
(1) 2052/    601E : 08EE 0005 0024      		bset	#bitPlySt_DrwAll,box_Status(a6)
(1) 2053/    6024 :                     		
(1) 2054/    6024 :                     .blkfll_decmonly:
(1) 2055/    6024 : 3E04                		move.w	d4,d7
(1) 2056/    6026 : CE7C 7F00           		and.w	#$7F00,d7
(1) 2057/    602A : BE7C 5000           		cmp.w	#BLKDEL_TIMEOUT,d7
(1) 2058/    602E : 6600 0314           		bne	.blkfll_next
(1) 2059/    6032 : 6108                		bsr	.blkfll_dectmout
(1) 2060/    6034 : 34BC 0000           		move.w	#0,(a2)
(1) 2061/    6038 : 6000 030A           		bra	.blkfll_next
(1) 2062/    603C :                     
(1) 2063/    603C :                     .blkfll_dectmout:
(1) 2064/    603C : 3E04                		move.w	d4,d7				; copy BOT to d7
(1) 2065/    603E : CE7C 7F00           		and.w	#$7F00,d7
(1) 2066/    6042 : BE7C 5000           		cmp.w	#BLKDEL_TIMEOUT,d7		; TIMERDONE block?
(1) 2067/    6046 : 661A                		bne.s	.blkfll_timedel
(1) 2068/    6048 : 046E 0001 0034      		sub.w	#1,box_NumMtchBlk(a6)		; Decrement active blocks
(1) 2069/    604E : 6612                		bne.s	.blkfll_timedel
(1) 2070/    6050 : 0838 0001 86E0      		btst	#bitMtch_TrashEnbl,(RAM_Glbl_GameMtchFlags).w
(1) 2071/    6056 : 6706                		beq.s	.no_trshreq
(1) 2072/    6058 :                     ; 		btst	#0,box_TrshReq(a6)
(1) 2073/    6058 :                     ; 		bne.s	.no_trshreq
(1) 2074/    6058 : 08EE 0001 003E      		bset	#1,box_TrshReq(a6)
(1) 2075/    605E :                     .no_trshreq:
(1) 2076/    605E : 426E 002E           		clr.w	box_MatchCount(a6)
(1) 2077/    6062 :                     .blkfll_timedel:
(1) 2078/    6062 : 4E75                		rts
(1) 2079/    6064 :                     
(1) 2080/    6064 :                     	; --------------------------------------
(1) 2081/    6064 :                     	; TOP has falling request
(1) 2082/    6064 :                     	; --------------------------------------
(1) 2083/    6064 :                     .blkfll_canfall:
(1) 2084/    6064 : 61D6                		bsr.s	.blkfll_dectmout
(1) 2085/    6066 : 3E03                		move.w	d3,d7
(1) 2086/    6068 : CE7C 001F           		and.w	#$1F,d7
(1) 2087/    606C : 6700 02D6           		beq	.blkfll_next
(1) 2088/    6070 : BE7C 000D           		cmp.w	#SET_STRTTRSHIDS,d7
(1) 2089/    6074 : 6D78                		blt.s	.blkfll_normlblock
(1) 2090/    6076 :                     		
(1) 2091/    6076 :                     	; trashchain fall manual check 2
(1) 2092/    6076 :                     	; 
(1) 2093/    6076 :                     	; if the fallbits are set BUT the
(1) 2094/    6076 :                     	; TRSHSTOP flag is set
(1) 2095/    6076 : 9E7C 000D           		sub.w	#SET_STRTTRSHIDS,d7
(1) 2096/    607A : 3A07                		move.w	d7,d5
(1) 2097/    607C : CA7C 0003           		and.w	#%11,d5
(1) 2098/    6080 : BA7C 0002           		cmp.w	#2,d5
(1) 2099/    6084 : 6704                		beq.s	.blkfll_next5
(1) 2100/    6086 : 08C0 0005           		bset	#5,d0
(1) 2101/    608A :                     .blkfll_next5:
(1) 2102/    608A :                     
(1) 2103/    608A : 0807 0003           		btst	#3,d7			; MIDL?
(1) 2104/    608E : 6656                		bne.s	.blkfll_trshincr
(1) 2105/    6090 : 0807 0002           		btst	#2,d7			; TR?
(1) 2106/    6094 : 6646                		bne.s	.blkfll_resincrm
(1) 2107/    6096 : 0800 0001           		btst	#1,d0
(1) 2108/    609A : 662E                		bne	.blkfll_clrinstd
(1) 2109/    609C :                     		
(1) 2110/    609C : 204A                		move.l	a2,a0
(1) 2111/    609E : 3E3C 8000           		move.w	#blkflg_Draw,d7
(1) 2112/    60A2 :                     .trshexfall:
(1) 2113/    60A2 : 3811                		move.w	(a1),d4
(1) 2114/    60A4 : 8847                		or.w	d7,d4
(1) 2115/    60A6 : 3484                		move.w	d4,(a2)
(1) 2116/    60A8 : 3287                		move.w	d7,(a1)
(1) 2117/    60AA : D4FC 0002           		adda	#2,a2
(1) 2118/    60AE : D2FC 0002           		adda	#2,a1
(1) 2119/    60B2 : 51C9 FFEE           		dbf	d1,.trshexfall
(1) 2120/    60B6 : 2448                		move.l	a0,a2
(1) 2121/    60B8 : 2248                		move.l	a0,a1
(1) 2122/    60BA : 92FC 0020           		suba	#MAX_BOXWIDTH,a1
(1) 2123/    60BE : 08C0 0000           		bset	#0,d0				; FLAG: Pause scroll
(1) 2124/    60C2 : 08EE 0005 0024      		bset	#bitPlySt_DrwAll,box_Status(a6)
(1) 2125/    60C8 : 6012                		bra	.blkfll_resincrm
(1) 2126/    60CA :                     		
(1) 2127/    60CA :                     ; clear fall bits instead
(1) 2128/    60CA :                     .blkfll_clrinstd:
(1) 2129/    60CA : 2049                		move.l	a1,a0
(1) 2130/    60CC :                     .trshidl_clrlp:
(1) 2131/    60CC : 3E10                		move.w	(a0),d7
(1) 2132/    60CE : 0887 0006           		bclr	#bitBlkFlg_Fall,d7
(1) 2133/    60D2 : 3087                		move.w	d7,(a0)
(1) 2134/    60D4 : D0FC 0002           		adda	#2,a0
(1) 2135/    60D8 : 51C9 FFF2           		dbf	d1,.trshidl_clrlp
(1) 2136/    60DC :                     .blkfll_resincrm:
(1) 2137/    60DC : 4241                		clr.w	d1
(1) 2138/    60DE : 0880 0001           		bclr	#1,d0
(1) 2139/    60E2 : 0880 0002           		bclr	#2,d0				; TODO: QUITAR si sale algo mal
(1) 2140/    60E6 :                     .blkfll_trshincr:
(1) 2141/    60E6 : D27C 0001           		add.w	#1,d1				; Incrmt fall lenght
(1) 2142/    60EA : 6000 0258           		bra	.blkfll_next
(1) 2143/    60EE :                     		
(1) 2144/    60EE :                     	; normal fall
(1) 2145/    60EE :                     .blkfll_normlblock:
(1) 2146/    60EE : 3803                		move.w	d3,d4				; move TOP block to BOT
(1) 2147/    60F0 : 3E3C 8000           		move.w	#blkflg_Draw,d7			; TODO: checarlo si sale algo mal
(1) 2148/    60F4 : 8847                		or.w	d7,d4				; Set Draw flag on TOP
(1) 2149/    60F6 : 08C4 0006           		bset	#bitBlkFlg_Fall,d4		; set as falling
(1) 2150/    60FA :                     
(1) 2151/    60FA :                     .blkfll_fromtrsh:
(1) 2152/    60FA : 3484                		move.w	d4,(a2)
(1) 2153/    60FC : 3287                		move.w	d7,(a1)
(1) 2154/    60FE : 08C0 0000           		bset	#0,d0				; FLAG: Pause scroll
(1) 2155/    6102 : 08EE 0005 0024      		bset	#bitPlySt_DrwAll,box_Status(a6)
(1) 2156/    6108 : 6000 023A           		bra	.blkfll_next
(1) 2157/    610C :                     
(1) 2158/    610C :                     	; --------------------------------------
(1) 2159/    610C :                     	; BOT != $0000
(1) 2160/    610C :                     	; BOT != $0040 (zero + fallbit)
(1) 2161/    610C :                     	; BOT != BLKDEL_TIMEOUT
(1) 2162/    610C :                     	; --------------------------------------
(1) 2163/    610C :                     .blkfll_botactv:
(1) 2164/    610C : 4840                		swap	d0
(1) 2165/    610E : 4240                		clr.w	d0
(1) 2166/    6110 : 4840                		swap	d0
(1) 2167/    6112 :                     
(1) 2168/    6112 :                     	; Check for block matches
(1) 2169/    6112 : 3E04                		move.w	d4,d7
(1) 2170/    6114 : 3A04                		move.w	d4,d5
(1) 2171/    6116 : CE7C 7F00           		and.w	#$7F00,d7
(1) 2172/    611A : 6670                		bne	.blkfll_cntup
(1) 2173/    611C : 0804 0007           		btst	#bitBlkFlg_Match,d4
(1) 2174/    6120 : 6700 00D8           		beq	.blkfll_notimer
(1) 2175/    6124 : CA7C 001F           		and.w	#$1F,d5
(1) 2176/    6128 : BA7C 000D           		cmp.w	#SET_STRTTRSHIDS,d5
(1) 2177/    612C : 6C2C                		bge.s	.blkfll_skipscore
(1) 2178/    612E : 066E 0001 0030      		add.w	#1,box_NumMtchAdd(a6)
(1) 2179/    6134 : 48E7 C000           		movem.l	d0-d1,-(sp)
(1) 2180/    6138 : 202E 0040           		move.l	box_UserScore(a6),d0
(1) 2181/    613C : 223C 0000 0010      		move.l	#$10,d1			; Points per block
(1) 2182/    6142 : 4A6E 0036           		tst.w	box_ComboCount(a6)
(1) 2183/    6146 : 6706                		beq.s	.blkfllsc_noex
(1) 2184/    6148 : D2BC 0000 0080      		add.l	#$80,d1
(1) 2185/    614E :                     .blkfllsc_noex:
(1) 2186/    614E : 6100 0EA8           		bsr	PzlGame_BcdScore_Add
(1) 2187/    6152 : 2D40 0040           		move.l	d0,box_UserScore(a6)
(1) 2188/    6156 : 4CDF 0003           		movem.l	(sp)+,d0-d1
(1) 2189/    615A :                     .blkfll_skipscore:
(1) 2190/    615A : C87C 001F           		and.w	#$001F,d4
(1) 2191/    615E : 3E03                		move.w	d3,d7
(1) 2192/    6160 : CE7C 001F           		and.w	#$1F,d7
(1) 2193/    6164 : BE7C 000D           		cmp.w	#SET_STRTTRSHIDS,d7
(1) 2194/    6168 : 6D22                		blt.s	.blkfll_cntup
(1) 2195/    616A : 08C0 0002           		bset	#2,d0
(1) 2196/    616E : 3E04                		move.w	d4,d7
(1) 2197/    6170 : BE7C 000D           		cmp.w	#SET_STRTTRSHIDS,d7
(1) 2198/    6174 : 6D16                		blt.s	.blkfll_cntup
(1) 2199/    6176 : 9E7C 000D           		sub.w	#SET_STRTTRSHIDS,d7
(1) 2200/    617A : CE7C 0007           		and.w	#%111,d7
(1) 2201/    617E : BE7C 0002           		cmp.w	#2,d7
(1) 2202/    6182 : 6704                		beq.s	.blkfll_mrgeskip
(1) 2203/    6184 : 4A47                		tst.w	d7
(1) 2204/    6186 : 6604                		bne.s	.blkfll_cntup
(1) 2205/    6188 :                     .blkfll_mrgeskip:
(1) 2206/    6188 : 0880 0002           		bclr	#2,d0
(1) 2207/    618C :                     .blkfll_cntup:
(1) 2208/    618C : 3E04                		move.w	d4,d7
(1) 2209/    618E : 3A04                		move.w	d4,d5
(1) 2210/    6190 : CE7C 001F           		and.w	#$1F,d7
(1) 2211/    6194 : CA7C 7F00           		and.w	#$7F00,d5
(1) 2212/    6198 :                     		
(1) 2213/    6198 : BE7C 000D           		cmp.w	#SET_STRTTRSHIDS,d7
(1) 2214/    619C : 6D46                		blt.s	.blkfll_nrmlincrm
(1) 2215/    619E : BA7C 3E00           		cmp.w	#BLKDEL_MIDANIM,d5
(1) 2216/    61A2 : 6D40                		blt.s	.blkfll_nrmlincrm
(1) 2217/    61A4 : 0804 0007           		btst	#bitBlkFlg_Match,d4			; BIT alternate mode
(1) 2218/    61A8 : 660C                		bne.s	.blkfll_exroll
(1) 2219/    61AA : C87C 001F           		and.w	#$1F,d4
(1) 2220/    61AE : 887C 8000           		or.w	#blkflg_Draw,d4
(1) 2221/    61B2 : 3484                		move.w	d4,(a2)
(1) 2222/    61B4 : 6044                		bra.s	.blkfll_notimer
(1) 2223/    61B6 :                     .blkfll_exroll:
(1) 2224/    61B6 : 6100 00B8           		bsr	.blkfll_guessblk
(1) 2225/    61BA : E59A                		rol.l	#2,d2
(1) 2226/    61BC : 3E03                		move.w	d3,d7
(1) 2227/    61BE : CE7C 001F           		and.w	#$1F,d7
(1) 2228/    61C2 : BE7C 000D           		cmp.w	#SET_STRTTRSHIDS,d7
(1) 2229/    61C6 : 6D14                		blt.s	.blkfll_dontrestr
(1) 2230/    61C8 : 3A07                		move.w	d7,d5
(1) 2231/    61CA : 9A7C 000D           		sub.w	#SET_STRTTRSHIDS,d5
(1) 2232/    61CE : CA7C 0003           		and.w	#%11,d5
(1) 2233/    61D2 : 9E7C 0002           		sub.w	#2,d7
(1) 2234/    61D6 : 8E7C 8000           		or.w	#blkflg_Draw,d7
(1) 2235/    61DA : 3287                		move.w	d7,(a1)
(1) 2236/    61DC :                     .blkfll_dontrestr:
(1) 2237/    61DC : 08EE 0005 0024      		bset	#bitPlySt_DrwAll,box_Status(a6)	
(1) 2238/    61E2 : 6016                		bra.s	.blkfll_notimer
(1) 2239/    61E4 :                     
(1) 2240/    61E4 :                     ; Normal increment + rolltimer check
(1) 2241/    61E4 :                     .blkfll_nrmlincrm:
(1) 2242/    61E4 : BA7C 7000           		cmp.w	#BLKROLL_FALL,d5
(1) 2243/    61E8 : 6C10                		bge.s	.blkfll_notimer
(1) 2244/    61EA : D87C 0100           		add.w	#$100,d4
(1) 2245/    61EE :                     .blkfll_setnow:
(1) 2246/    61EE : 887C 8000           		or.w	#blkflg_Draw,d4
(1) 2247/    61F2 : 3484                		move.w	d4,(a2)
(1) 2248/    61F4 : 08EE 0005 0024      		bset	#bitPlySt_DrwAll,box_Status(a6)
(1) 2249/    61FA :                     .blkfll_notimer:
(1) 2250/    61FA :                     
(1) 2251/    61FA : 3E03                		move.w	d3,d7
(1) 2252/    61FC : CE7C 001F           		and.w	#$1F,d7
(1) 2253/    6200 : BE7C 000D           		cmp.w	#SET_STRTTRSHIDS,d7
(1) 2254/    6204 : 6D12                		blt	.blkfll_next3
(1) 2255/    6206 : 9E7C 000D           		sub.w	#SET_STRTTRSHIDS,d7
(1) 2256/    620A : CE7C 0003           		and.w	#%11,d7
(1) 2257/    620E : BE7C 0002           		cmp.w	#2,d7
(1) 2258/    6212 : 6704                		beq.s	.blkfll_next3
(1) 2259/    6214 : 08C0 0005           		bset	#5,d0
(1) 2260/    6218 :                     .blkfll_next3:
(1) 2261/    6218 : 3E03                		move.w	d3,d7					; TOP has timers?
(1) 2262/    621A : CE7C 7F00           		and.w	#$7F00,d7
(1) 2263/    621E : 667C                		bne	.blkfll_trshcntfall
(1) 2264/    6220 :                     		
(1) 2265/    6220 : 0804 0006           		btst	#bitBlkFlg_Fall,d4			; BOT is falling?
(1) 2266/    6224 : 6600 00FC           		bne	.blkfll_settopfll
(1) 2267/    6228 : 0803 0006           		btst	#bitBlkFlg_Fall,d3			; TOP is falling?
(1) 2268/    622C : 6768                		beq	.blkfll_break
(1) 2269/    622E : 3E03                		move.w	d3,d7
(1) 2270/    6230 : CE7C 001F           		and.w	#$1F,d7
(1) 2271/    6234 : 6766                		beq	.blkfll_trshcntfall
(1) 2272/    6236 : BE7C 000D           		cmp.w	#SET_STRTTRSHIDS,d7
(1) 2273/    623A : 6D16                		blt.s	.blkfll_notrshshk
(1) 2274/    623C : 0800 0003           		btst	#3,d0
(1) 2275/    6240 : 6610                		bne.s	.blkfll_notrshshk
(1) 2276/    6242 : 3D7C 0100 003A      		move.w	#$100,box_YShake(a6)
(1) 2277/    6248 : 08C0 0003           		bset	#3,d0					; TRSHSHAKE
(1) 2278/    624C : 31FC 0002 8DB8      		move.w	#2,(RAM_PGame_Sound).w			; SFX: heavy fall
(1) 2279/    6252 :                     
(1) 2280/    6252 :                     .blkfll_notrshshk:
(1) 2281/    6252 : C67C 003F           		and.w	#$001F|$0020,d3				; Allow ID + Chain bit
(1) 2282/    6256 : 3283                		move.w	d3,(a1)
(1) 2283/    6258 : 08EE 0003 0024      		bset	#bitPlySt_ChkMatch,box_Status(a6)
(1) 2284/    625E : 08C0 0000           		bset	#0,d0					; FLAG: Pause scroll
(1) 2285/    6262 :                     		
(1) 2286/    6262 :                     	; SFX normal punch
(1) 2287/    6262 : 0800 0003           		btst	#3,d0
(1) 2288/    6266 : 6634                		bne.s	.blkfll_trshcntfall
(1) 2289/    6268 : 31FC 0001 8DB8      		move.w	#1,(RAM_PGame_Sound).w			; SFX: normal fall
(1) 2290/    626E : 602C                		bra.s	.blkfll_trshcntfall
(1) 2291/    6270 :                     
(1) 2292/    6270 :                     .blkfll_guessblk:
(1) 2293/    6270 : 2802                		move.l	d2,d4		
(1) 2294/    6272 : 48E7 9800           		movem.l	d0/d3-d4,-(sp)
(1) 2295/    6276 : 4841                		swap	d1
(1) 2296/    6278 :                     .blkfll_reroll:
(1) 2297/    6278 : 6100 0CA8           		bsr	box_GuessBlk
(1) 2298/    627C : B06E 004C           		cmp.w	box_UserMaxIds(a6),d0
(1) 2299/    6280 : 6EF6                		bgt.s	.blkfll_reroll
(1) 2300/    6282 : B041                		cmp.w	d1,d0
(1) 2301/    6284 : 67F2                		beq.s	.blkfll_reroll
(1) 2302/    6286 :                     ; 		cmp.w	d5,d0
(1) 2303/    6286 :                     ; 		beq.s	.blkfll_reroll
(1) 2304/    6286 : 3200                		move.w	d0,d1
(1) 2305/    6288 : 807C D100           		or.w	#blkflg_Draw|BLKROLL_STAY,d0
(1) 2306/    628C : 3480                		move.w	d0,(a2)
(1) 2307/    628E : 4841                		swap	d1
(1) 2308/    6290 : 4CDF 0019           		movem.l	(sp)+,d0/d3-d4
(1) 2309/    6294 : 4E75                		rts
(1) 2310/    6296 :                     
(1) 2311/    6296 :                     ; break chain
(1) 2312/    6296 :                     .blkfll_break:
(1) 2313/    6296 : 0883 0005           		bclr	#bitBlkFlg_Chain,d3		; Break chain
(1) 2314/    629A : 3283                		move.w	d3,(a1)
(1) 2315/    629C :                     .blkfll_trshcntfall:
(1) 2316/    629C : 3E03                		move.w	d3,d7
(1) 2317/    629E : 3A03                		move.w	d3,d5
(1) 2318/    62A0 : CA7C 7F00           		and.w	#$7F00,d5
(1) 2319/    62A4 : BA7C 7000           		cmp.w	#BLKROLL_FALL,d5
(1) 2320/    62A8 : 660E                		bne.s	.blkfll_nottrsh
(1) 2321/    62AA : C67C 001F           		and.w	#$1F,d3
(1) 2322/    62AE : 867C 8000           		or.w	#blkflg_Draw,d3
(1) 2323/    62B2 : 3283                		move.w	d3,(a1)
(1) 2324/    62B4 : 6000 008E           		bra	.blkfll_next
(1) 2325/    62B8 :                     .blkfll_nottrsh:
(1) 2326/    62B8 : CE7C 001F           		and.w	#$1F,d7
(1) 2327/    62BC : BE7C 000D           		cmp.w	#SET_STRTTRSHIDS,d7
(1) 2328/    62C0 : 6D00 0082           		blt	.blkfll_next
(1) 2329/    62C4 :                     .blkfll_canchk:
(1) 2330/    62C4 : BA7C 3E00           		cmp.w	#BLKDEL_MIDANIM,d5
(1) 2331/    62C8 : 6D18                		blt.s	.blkfll_noguess
(1) 2332/    62CA : 9E7C 000D           		sub.w	#SET_STRTTRSHIDS,d7
(1) 2333/    62CE : CE7C 0003           		and.w	#%11,d7
(1) 2334/    62D2 : 6706                		beq.s	.blkfll_canset
(1) 2335/    62D4 : BE7C 0001           		cmp.w	#%01,d7
(1) 2336/    62D8 : 666A                		bne.s	.blkfll_next
(1) 2337/    62DA :                     .blkfll_canset:
(1) 2338/    62DA : 08C3 0007           		bset	#bitBlkFlg_Match,d3
(1) 2339/    62DE : 3283                		move.w	d3,(a1)
(1) 2340/    62E0 : 6062                		bra	.blkfll_next
(1) 2341/    62E2 :                     
(1) 2342/    62E2 :                     .blkfll_noguess:
(1) 2343/    62E2 : 9E7C 000D           		sub.w	#SET_STRTTRSHIDS,d7
(1) 2344/    62E6 : 0807 0003           		btst	#3,d7
(1) 2345/    62EA : 662C                		bne.s	.blkfll_trshmid		; MID
(1) 2346/    62EC : 0807 0002           		btst	#2,d7
(1) 2347/    62F0 : 6624                		bne.s	.blkfll_trshcnttr	; TR
(1) 2348/    62F2 : 2049                		move.l	a1,a0
(1) 2349/    62F4 : 4245                		clr.w	d5
(1) 2350/    62F6 : 0800 0002           		btst	#2,d0
(1) 2351/    62FA : 6704                		beq.s	.blkfll_cpymtch		; TRSHMTCH enabled?
(1) 2352/    62FC : 08C5 0007           		bset	#bitBlkFlg_Match,d5
(1) 2353/    6300 :                     .blkfll_cpymtch:
(1) 2354/    6300 : 3E10                		move.w	(a0),d7
(1) 2355/    6302 : CE7C FF1F           		and.w	#$FF1F,d7
(1) 2356/    6306 : 8E45                		or.w	d5,d7
(1) 2357/    6308 : 3087                		move.w	d7,(a0)
(1) 2358/    630A : D0FC 0002           		adda	#2,a0
(1) 2359/    630E : 51C9 FFF0           		dbf	d1,.blkfll_cpymtch
(1) 2360/    6312 : 0880 0002           		bclr	#2,d0			; TRSHMTCH reset
(1) 2361/    6316 :                     .blkfll_trshcnttr:
(1) 2362/    6316 : 4241                		clr.w	d1
(1) 2363/    6318 :                     .blkfll_trshmid:
(1) 2364/    6318 : D27C 0001           		add.w	#1,d1
(1) 2365/    631C : 08C0 0001           		bset	#1,d0			; TRSHSTOP flag
(1) 2366/    6320 :                     .blkfll_mtchexit:
(1) 2367/    6320 : 6022                		bra.s	.blkfll_next
(1) 2368/    6322 :                     
(1) 2369/    6322 :                     ; Chainfall columns
(1) 2370/    6322 :                     .blkfll_settopfll:
(1) 2371/    6322 : 0883 0006           		bclr	#bitBlkFlg_Fall,d3
(1) 2372/    6326 : 3E03                		move.w	d3,d7
(1) 2373/    6328 : CE7C 001F           		and.w	#$1F,d7
(1) 2374/    632C : 6714                		beq.s	.blkfll_mrgefall
(1) 2375/    632E : C87C 001F           		and.w	#$1F,d4
(1) 2376/    6332 : B87C 000D           		cmp.w	#SET_STRTTRSHIDS,d4
(1) 2377/    6336 : 6C06                		bge.s	.blkfll_forcefall
(1) 2378/    6338 : BE7C 000D           		cmp.w	#SET_STRTTRSHIDS,d7
(1) 2379/    633C : 6C04                		bge.s	.blkfll_mrgefall
(1) 2380/    633E :                     .blkfll_forcefall:
(1) 2381/    633E : 08C3 0006           		bset	#bitBlkFlg_Fall,d3
(1) 2382/    6342 :                     .blkfll_mrgefall:
(1) 2383/    6342 : 3283                		move.w	d3,(a1)
(1) 2384/    6344 :                     
(1) 2385/    6344 :                     .blkfll_next:
(1) 2386/    6344 : 94FC 0002           		suba	#2,a2
(1) 2387/    6348 : 92FC 0002           		suba	#2,a1
(1) 2388/    634C : 51CE FBB0           		dbf	d6,.blkfll_clmn
(1) 2389/    6350 : 98FC 0020           		suba	#MAX_BOXWIDTH,a4
(1) 2390/    6354 : 96FC 0020           		suba	#MAX_BOXWIDTH,a3
(1) 2391/    6358 : 4845                		swap	d5
(1) 2392/    635A : 4846                		swap	d6
(1) 2393/    635C : 4A46                		tst.w	d6
(1) 2394/    635E : 660A                		bne.s	.blkfll_finish
(1) 2395/    6360 : 0800 0005           		btst	#5,d0
(1) 2396/    6364 : 6704                		beq	.blkfll_finish
(1) 2397/    6366 : DC7C 0001           		add.w	#1,d6
(1) 2398/    636A :                     .blkfll_finish:		
(1) 2399/    636A : 51CE FB7C           		dbf	d6,.blkfll_row
(1) 2400/    636E :                     
(1) 2401/    636E :                     	; Punishes for 4+ blocks
(1) 2402/    636E :                     	; Speedup and/or TrashFall
(1) 2403/    636E : 4A6E 0030           		tst.w	box_NumMtchAdd(a6)	; Add NEW matching blocks
(1) 2404/    6372 : 6778                		beq.s	.blkfll_exadd
(1) 2405/    6374 : 382E 0030           		move.w	box_NumMtchAdd(a6),d4
(1) 2406/    6378 : B87C 0003           		cmp.w	#SET_MAXBLKMTCH,d4
(1) 2407/    637C : 6F62                		ble.s	.mtch_trshadd
(1) 2408/    637E : 0838 0002 86E0      		btst	#bitMtch_ComboSpdUp,(RAM_Glbl_GameMtchFlags).w
(1) 2409/    6384 : 670C                		beq.s	.mtch_trshspdup
(1) 2410/    6386 : 7A00                		moveq	#0,d5
(1) 2411/    6388 : 3A2E 0030           		move.w	box_NumMtchAdd(a6),d5
(1) 2412/    638C : E98D                		lsl.l	#4,d5
(1) 2413/    638E : DBAE 0018           		add.l	d5,box_YSpd(a6)
(1) 2414/    6392 :                     .mtch_trshspdup:
(1) 2415/    6392 : 0838 0001 86E0      		btst	#bitMtch_TrashEnbl,(RAM_Glbl_GameMtchFlags).w
(1) 2416/    6398 : 6746                		beq	.mtch_trshadd
(1) 2417/    639A : 48E7 F800           		movem.l	d0-d4,-(sp)
(1) 2418/    639E : 2802                		move.l	d2,d4				; Random seed
(1) 2419/    63A0 : 3E2E 0030           		move.w	box_NumMtchAdd(a6),d7
(1) 2420/    63A4 : 9E7C 0003           		sub.w	#SET_MAXBLKMTCH,d7
(1) 2421/    63A8 : 3A2E 002A           		move.w	box_Width(a6),d5
(1) 2422/    63AC : BE45                		cmp.w	d5,d7
(1) 2423/    63AE : 6D0A                		blt.s	.mtchtrsh_roll
(1) 2424/    63B0 : 4240                		clr.w	d0
(1) 2425/    63B2 : 3205                		move.w	d5,d1
(1) 2426/    63B4 : 927C 0001           		sub.w	#1,d1
(1) 2427/    63B8 : 601A                		bra.s	.mtchtrsh_full
(1) 2428/    63BA :                     .mtchtrsh_roll:	
(1) 2429/    63BA : 6100 0B66           		bsr	box_GuessBlk
(1) 2430/    63BE : EB9C                		rol.l	#5,d4
(1) 2431/    63C0 : E65C                		ror.w	#3,d4
(1) 2432/    63C2 : 907C 0001           		sub.w	#1,d0
(1) 2433/    63C6 : 6BF2                		bmi.s	.mtchtrsh_roll
(1) 2434/    63C8 : B045                		cmp.w	d5,d0
(1) 2435/    63CA : 6CEE                		bge.s	.mtchtrsh_roll
(1) 2436/    63CC : 3200                		move.w	d0,d1
(1) 2437/    63CE : D247                		add.w	d7,d1
(1) 2438/    63D0 : B245                		cmp.w	d5,d1
(1) 2439/    63D2 : 6CE6                		bge.s	.mtchtrsh_roll
(1) 2440/    63D4 :                     .mtchtrsh_full:
(1) 2441/    63D4 : 3D40 0020           		move.w	d0,box_TrshSmlReq(a6)
(1) 2442/    63D8 : 3D41 0022           		move.w	d1,box_TrshSmlReq+2(a6)
(1) 2443/    63DC : 4CDF 001F           		movem.l	(sp)+,d0-d4
(1) 2444/    63E0 :                     .mtch_trshadd:
(1) 2445/    63E0 : 3D44 0032           		move.w	d4,box_NumMtchLast(a6)
(1) 2446/    63E4 : D96E 0034           		add.w	d4,box_NumMtchBlk(a6)
(1) 2447/    63E8 : 426E 0030           		clr.w	box_NumMtchAdd(a6)
(1) 2448/    63EC :                     
(1) 2449/    63EC :                     .blkfll_exadd:
(1) 2450/    63EC :                     
(1) 2451/    63EC :                     	; --------------------------------------
(1) 2452/    63EC :                     	; Scroll
(1) 2453/    63EC :                     	; --------------------------------------
(1) 2454/    63EC :                     		
(1) 2455/    63EC : 2A6E 000C           		movea.l	box_BlockData(a6),a5
(1) 2456/    63F0 : DAFC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a5
(1) 2457/    63F4 : 6100 0B46           		bsr	box_CheckLine				; Get boxfull flag (returns d3)
(1) 2458/    63F8 : 0800 0000           		btst	#0,d0					; Pause request from Blockfalling section?
(1) 2459/    63FC : 6600 0198           		bne	.upd_vscrl
(1) 2460/    6400 : 4A6E 0034           		tst.w	box_NumMtchBlk(a6)			; Block matches != 0?
(1) 2461/    6404 : 6600 0190           		bne	.upd_vscrl
(1) 2462/    6408 :                     	; Box timeout
(1) 2463/    6408 : 4A43                		tst.w	d3					; Boxfull flag?
(1) 2464/    640A : 6736                		beq	.incrmt_tout
(1) 2465/    640C : C8BC FFF0 0000      		and.l	#$FFF00000,d4
(1) 2466/    6412 : 282E 0018           		move.l	box_YSpd(a6),d4
(1) 2467/    6416 : D9AE 001C           		add.l	d4,box_BoardTimeOut(a6)
(1) 2468/    641A : 0C6E 0010 001C      		cmp.w	#$10,box_BoardTimeOut(a6)		; MAX time for full box
(1) 2469/    6420 : 6D2A                		blt.s	.count_tmout
(1) 2470/    6422 :                     .force_gameover:
(1) 2471/    6422 : 3D7C 0200 003A      		move.w	#$200,box_YShake(a6)
(1) 2472/    6428 :                     		
(1) 2473/    6428 : 08F8 0006 86E0      		bset	#bitMtch_MatchOver,(RAM_Glbl_GameMtchFlags).w
(1) 2474/    642E : 08EE 0002 0024      		bset	#bitPlySt_GameOver,box_Status(a6)
(1) 2475/    6434 : 08EE 0005 0024      		bset	#bitPlySt_DrwAll,box_Status(a6)
(1) 2476/    643A :                     
(1) 2477/    643A : 31FC 0003 8DB8      		move.w	#3,(RAM_PGame_Sound).w			; SFX: box full
(1) 2478/    6440 :                     ; 		movem.l	d0-d4,-(sp)
(1) 2479/    6440 :                     ; 		move.l	#(SfxData_Blk<<16)|SfxData_Pat,d0
(1) 2480/    6440 :                     ; 		move.l	#($0000<<16)|SfxData_Ins,d1
(1) 2481/    6440 :                     ; 		move.l	#$00020002,d2
(1) 2482/    6440 :                     ; 		moveq	#0,d3
(1) 2483/    6440 :                     ; 		bsr	Sound_SetTrack
(1) 2484/    6440 :                     ; 		movem.l	(sp)+,d0-d4
(1) 2485/    6440 :                     		
(1) 2486/    6440 :                     	; *** TEMPORAL, FOR THE DEMO ****
(1) 2487/    6440 :                     
(1) 2488/    6440 :                     ; 		sub.w	#1,(RAM_PGame_PlyrsOn).w
(1) 2489/    6440 :                     ; 		bne.s	.count_tmout
(1) 2490/    6440 :                     ; 		clr.w	(RAM_PGame_PlyrsOn).w
(1) 2491/    6440 : 600A                		bra.s	.count_tmout
(1) 2492/    6442 :                     .incrmt_tout:
(1) 2493/    6442 : 4A6E 001C           		tst.w	box_BoardTimeOut(a6)
(1) 2494/    6446 : 6704                		beq.s	.count_tmout
(1) 2495/    6448 : 426E 001C           		clr.w	box_BoardTimeOut(a6)
(1) 2496/    644C :                     .count_tmout:
(1) 2497/    644C : 4A6E 003A           		tst.w	box_YShake(a6)
(1) 2498/    6450 : 6600 0144           		bne	.upd_vscrl
(1) 2499/    6454 : 282E 0010           		move.l	box_YScrl(a6),d4		; YScrl + YSpd
(1) 2500/    6458 : 2A04                		move.l	d4,d5
(1) 2501/    645A : C8BC FFF0 0000      		and.l	#$FFF00000,d4
(1) 2502/    6460 : 4A43                		tst.w	d3
(1) 2503/    6462 : 660E                		bne	.keep_rise2
(1) 2504/    6464 :                     .keep_rise3:
(1) 2505/    6464 : 262E 0018           		move.l	box_YSpd(a6),d3
(1) 2506/    6468 : 08AE 0001 0024      		bclr	#bitPlySt_SpdUp,box_Status(a6)
(1) 2507/    646E : 6702                		beq.s	.keep_rise2
(1) 2508/    6470 : E98B                		lsl.l	#4,d3
(1) 2509/    6472 :                     .keep_rise2:
(1) 2510/    6472 : DA83                		add.l	d3,d5
(1) 2511/    6474 : 2805                		move.l	d5,d4
(1) 2512/    6476 :                     .keep_rise:
(1) 2513/    6476 :                     
(1) 2514/    6476 :                     	; TRASH request checks
(1) 2515/    6476 : 0838 0001 86E0      		btst	#bitMtch_TrashEnbl,(RAM_Glbl_GameMtchFlags).w
(1) 2516/    647C : 6756                		beq.s	.no_combochng
(1) 2517/    647E : 08AE 0001 003E      		bclr	#1,box_TrshReq(a6)
(1) 2518/    6484 : 6722                		beq.s	.no_smltrsh
(1) 2519/    6486 : 4AAE 0020           		tst.l	box_TrshSmlReq(a6)
(1) 2520/    648A : 671C                		beq.s	.no_smltrsh
(1) 2521/    648C : 48E7 FE70           		movem.l	a1-a3/d0-d6,-(sp)
(1) 2522/    6490 : 302E 0020           		move.w	box_TrshSmlReq(a6),d0
(1) 2523/    6494 : 322E 0022           		move.w	box_TrshSmlReq+2(a6),d1
(1) 2524/    6498 : 343C 0000           		move.w	#0,d2
(1) 2525/    649C : 6100 0ABC           		bsr	box_SendTrash
(1) 2526/    64A0 : 42AE 0020           		clr.l	box_TrshSmlReq(a6)
(1) 2527/    64A4 : 4CDF 0E7F           		movem.l	(sp)+,a1-a3/d0-d6
(1) 2528/    64A8 :                     .no_smltrsh:
(1) 2529/    64A8 : 08AE 0000 003E      		bclr	#0,box_TrshReq(a6)
(1) 2530/    64AE : 6724                		beq.s	.no_combochng
(1) 2531/    64B0 : 342E 0036           		move.w	box_ComboCount(a6),d2
(1) 2532/    64B4 : 947C 0001           		sub.w	#1,d2
(1) 2533/    64B8 : 6B1A                		bmi.s	.no_combochng
(1) 2534/    64BA : 303C 0000           		move.w	#0,d0			; X start
(1) 2535/    64BE : 322E 002A           		move.w	box_Width(a6),d1	; X end
(1) 2536/    64C2 : 927C 0001           		sub.w	#1,d1
(1) 2537/    64C6 : 48E7 0C00           		movem.l	d4-d5,-(sp)
(1) 2538/    64CA : 6100 0A8E           		bsr	box_SendTrash
(1) 2539/    64CE : 4CDF 0030           		movem.l	(sp)+,d4-d5
(1) 2540/    64D2 : 6022                		bra.s	.alrdyclr
(1) 2541/    64D4 :                     .no_combochng:
(1) 2542/    64D4 : 4A6E 0036           		tst.w	box_ComboCount(a6)
(1) 2543/    64D8 : 671C                		beq.s	.alrdyclr
(1) 2544/    64DA : 0838 0002 86E0      		btst	#bitMtch_ComboSpdUp,(RAM_Glbl_GameMtchFlags).w
(1) 2545/    64E0 : 670E                		beq.s	.no_combospdup
(1) 2546/    64E2 : 7A00                		moveq	#0,d5
(1) 2547/    64E4 : 3A2E 0036           		move.w	box_ComboCount(a6),d5
(1) 2548/    64E8 : E18D                		lsl.l	#8,d5
(1) 2549/    64EA : E38D                		lsl.l	#1,d5
(1) 2550/    64EC : DBAE 0018           		add.l	d5,box_YSpd(a6)
(1) 2551/    64F0 :                     .no_combospdup:
(1) 2552/    64F0 : 08EE 0000 003E      		bset	#0,box_TrshReq(a6)
(1) 2553/    64F6 :                     		
(1) 2554/    64F6 :                     .alrdyclr:
(1) 2555/    64F6 : 426E 0038           		clr.w	box_ComboCntShow(a6)
(1) 2556/    64FA : 426E 0036           		clr.w	box_ComboCount(a6)
(1) 2557/    64FE :                     		
(1) 2558/    64FE :                     	; Yscroll set
(1) 2559/    64FE : 2D44 0010           		move.l	d4,box_YScrl(a6)
(1) 2560/    6502 : C8BC FFF0 0000      		and.l	#$FFF00000,d4			; Check for new row
(1) 2561/    6508 : B8AE 0014           		cmp.l	box_YScrl_old(a6),d4
(1) 2562/    650C : 6700 0088           		beq	.upd_vscrl
(1) 2563/    6510 : 2D44 0014           		move.l	d4,box_YScrl_old(a6)
(1) 2564/    6514 :                     
(1) 2565/    6514 :                     	; --------------------------------------
(1) 2566/    6514 :                     	; Make NEW blocks from bottom
(1) 2567/    6514 :                     	; --------------------------------------	
(1) 2568/    6514 : 3C2E 002A           		move.w	box_Width(a6),d6		; Move UP blocks
(1) 2569/    6518 : 9C7C 0001           		sub.w	#1,d6
(1) 2570/    651C : 6B3C                		bmi.s	.ranout_wdth
(1) 2571/    651E : 2A6E 000C           		movea.l	box_BlockData(a6),a5
(1) 2572/    6522 : DAFC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a5
(1) 2573/    6526 : 3A2E 002A           		move.w	box_Width(a6),d5
(1) 2574/    652A : DA45                		add.w	d5,d5
(1) 2575/    652C : DAC5                		adda	d5,a5
(1) 2576/    652E : 284D                		move.l	a5,a4
(1) 2577/    6530 : D8FC 0020           		adda	#MAX_BOXWIDTH,a4
(1) 2578/    6534 : 3C2E 002C           		move.w	box_Height(a6),d6
(1) 2579/    6538 : 9C7C 0001           		sub.w	#1,d6
(1) 2580/    653C :                     .nxt_clmn:
(1) 2581/    653C : 264D                		move.l	a5,a3
(1) 2582/    653E : 244C                		move.l	a4,a2
(1) 2583/    6540 : 3A2E 002A           		move.w	box_Width(a6),d5
(1) 2584/    6544 : 9A7C 0001           		sub.w	#1,d5
(1) 2585/    6548 :                     .mv_blk:
(1) 2586/    6548 : 3722                		move.w	-(a2),-(a3)
(1) 2587/    654A : 51CD FFFC           		dbf	d5,.mv_blk
(1) 2588/    654E : DAFC 0020           		adda	#MAX_BOXWIDTH,a5
(1) 2589/    6552 : D8FC 0020           		adda	#MAX_BOXWIDTH,a4
(1) 2590/    6556 : 51CE FFE4           		dbf	d6,.nxt_clmn
(1) 2591/    655A :                     .ranout_wdth:
(1) 2592/    655A : 244B                		move.l	a3,a2
(1) 2593/    655C : 94FC 0020           		suba	#MAX_BOXWIDTH,a2
(1) 2594/    6560 : 3C2E 002A           		move.w	box_Width(a6),d6
(1) 2595/    6564 : 9C7C 0001           		sub.w	#1,d6
(1) 2596/    6568 : 7A00                		moveq	#0,d5
(1) 2597/    656A : 2802                		move.l	d2,d4				; d2 - BASE random value
(1) 2598/    656C :                     .mk_rndm:
(1) 2599/    656C : 6100 09B4           		bsr	box_GuessBlk
(1) 2600/    6570 : B052                		cmp.w	(a2),d0
(1) 2601/    6572 : 67F8                		beq.s	.mk_rndm
(1) 2602/    6574 : B005                		cmp.b	d5,d0
(1) 2603/    6576 : 67F4                		beq.s	.mk_rndm
(1) 2604/    6578 : B06E 004C           		cmp.w	box_UserMaxIds(a6),d0		; MAX usable blocks (dificulty)
(1) 2605/    657C : 6EEE                		bgt.s	.mk_rndm
(1) 2606/    657E :                     .mk_allow:
(1) 2607/    657E : 1A00                		move.b	d0,d5
(1) 2608/    6580 : 36C0                		move.w	d0,(a3)+
(1) 2609/    6582 : D4FC 0002           		adda	#2,a2
(1) 2610/    6586 : 51CE FFE4           		dbf	d6,.mk_rndm
(1) 2611/    658A :                     
(1) 2612/    658A : 08EE 0004 0024      		bset	#bitPlySt_DrwLine,box_Status(a6)
(1) 2613/    6590 : 08EE 0003 0024      		bset	#bitPlySt_ChkMatch,box_Status(a6)
(1) 2614/    6596 :                     ; 		sub.w	#1,box_BlkBombBotCntr(a6)
(1) 2615/    6596 :                     ; 		bpl.s	.upd_vscrl
(1) 2616/    6596 :                     ; 		move.w	box_BlkBombBotSet(a6),box_BlkBombBotCntr(a6)
(1) 2617/    6596 :                     		
(1) 2618/    6596 :                     	; --------------------------------------
(1) 2619/    6596 :                     	; Set VScroll values
(1) 2620/    6596 :                     	; --------------------------------------
(1) 2621/    6596 :                     .upd_vscrl:
(1) 2622/    6596 : 4BF8 86F0           		lea	(RAM_PGame_YScrl_Main),a5
(1) 2623/    659A : 0C6E 000F 0028      		cmp.w	#15,box_BoardY(a6)
(1) 2624/    65A0 : 6D04                		blt.s	.toplwr
(1) 2625/    65A2 : 4BF8 8744           		lea	(RAM_PGame_Yscrl_Sub),a5
(1) 2626/    65A6 :                     .toplwr:
(1) 2627/    65A6 : 382E 0010           		move.w	box_YScrl(a6),d4
(1) 2628/    65AA : 082E 0001 003D      		btst	#1,box_FrameTimer+1(a6)
(1) 2629/    65B0 : 6710                		beq.s	.dontshake
(1) 2630/    65B2 : 3A2E 003A           		move.w	box_YShake(a6),d5
(1) 2631/    65B6 : 670A                		beq.s	.dontshake
(1) 2632/    65B8 : EC4D                		lsr.w	#6,d5
(1) 2633/    65BA : D845                		add.w	d5,d4
(1) 2634/    65BC : 046E 0010 003A      		sub.w	#$10,box_YShake(a6)
(1) 2635/    65C2 :                     .dontshake:
(1) 2636/    65C2 : 3A2E 0026           		move.w	box_BoardX(a6),d5
(1) 2637/    65C6 : E54D                		lsl.w	#2,d5
(1) 2638/    65C8 : DAC5                		adda 	d5,a5
(1) 2639/    65CA : 3A2E 002A           		move.w	box_Width(a6),d5
(1) 2640/    65CE : 9A7C 0001           		sub.w	#1,d5
(1) 2641/    65D2 : 6B0A                		bmi.s	.badv
(1) 2642/    65D4 :                     .vloop:
(1) 2643/    65D4 : 3A84                		move.w	d4,(a5)
(1) 2644/    65D6 : DAFC 0004           		adda	#4,a5
(1) 2645/    65DA : 51CD FFF8           		dbf	d5,.vloop
(1) 2646/    65DE :                     .badv:
(1) 2647/    65DE : 066E 0001 003C      		add.w	#1,box_FrameTimer(a6)
(1) 2648/    65E4 :                     
(1) 2649/    65E4 :                     	; --------------------------------------
(1) 2650/    65E4 :                     	; Current player status
(1) 2651/    65E4 :                     	; --------------------------------------
(1) 2652/    65E4 : 082D 0002 0024      		btst	#bitPlySt_GameOver,box_Status(a5)
(1) 2653/    65EA : 6642                		bne	.no_plyr
(1) 2654/    65EC : 282E 0044           		move.l	box_UserTime(a6),d4
(1) 2655/    65F0 : B8BC 0099 9900       		cmp.l	#$999900,d4
(1) 2656/    65F6 : 6732                 		beq.s	.nel2t
(1) 2657/    65F8 : 2A3C 0000 0001      		move.l	#1,d5
(1) 2658/    65FE : C905                 		abcd	d5,d4
(1) 2659/    6600 : B83C 0060           		cmp.b	#$60,d4
(1) 2660/    6604 : 6D24                		blt.s	.nel2t
(1) 2661/    6606 : 4204                		clr.b	d4
(1) 2662/    6608 : E09C                		ror.l	#8,d4
(1) 2663/    660A : C905                 		abcd	d5,d4
(1) 2664/    660C : B83C 0060           		cmp.b	#$60,d4
(1) 2665/    6610 : 6D16                 		blt.s	.nel3t
(1) 2666/    6612 : 4204                		clr.b	d4
(1) 2667/    6614 : E09C                 		ror.l	#8,d4		
(1) 2668/    6616 : C905                 		abcd	d5,d4
(1) 2669/    6618 : B83C 0060           		cmp.b	#$60,d4
(1) 2670/    661C : 6D08                 		blt.s	.nel4t
(1) 2671/    661E : 283C 0099 9900       		move.l	#$999900,d4
(1) 2672/    6624 : 6004                 		bra.s	.nel2t
(1) 2673/    6626 :                     .nel4t:
(1) 2674/    6626 : E19C                 		rol.l	#8,d4
(1) 2675/    6628 :                     .nel3t:
(1) 2676/    6628 : E19C                 		rol.l	#8,d4
(1) 2677/    662A :                     .nel2t:
(1) 2678/    662A : 2D44 0044           		move.l	d4,box_UserTime(a6)
(1) 2679/    662E :                     		
(1) 2680/    662E :                     	; --------------------------------------
(1) 2681/    662E :                     
(1) 2682/    662E :                     .no_plyr:
(1) 2683/    662E : E782                		asl.l	#3,d2
(1) 2684/    6630 : E85A                		ror.w	#4,d2
(1) 2685/    6632 : DCFC 0052           		adda 	#sizeof_Box,a6
(1) 2686/    6636 : 4847                		swap	d7
(1) 2687/    6638 : 51CF F668           		dbf	d7,.this_plyr
(1) 2688/    663C :                     .box_paused:
(1) 2689/    663C :                     
(1) 2690/    663C : 3438 8DB8           		move.w	(RAM_PGame_Sound).w,d2
(1) 2691/    6640 : 6720                		beq.s	.no_sound
(1) 2692/    6642 : 947C 0001           		sub.w	#1,d2
(1) 2693/    6646 : 4842                		swap	d2
(1) 2694/    6648 : 203C 131E 1324      		move.l	#(SfxData_Blk<<16)|SfxData_Pat,d0
(1) 2695/    664E : 223C 0000 1425      		move.l	#($0000<<16)|SfxData_Ins,d1
(1) 2696/    6654 : 343C 0002           		move.w	#$0002,d2
(1) 2697/    6658 : 7600                		moveq	#0,d3
(1) 2698/    665A : 6100 9C58           		bsr	Sound_SetTrack
(1) 2699/    665E : 4278 8DB8           		clr.w	(RAM_PGame_Sound).w
(1) 2700/    6662 :                     .no_sound:
(1) 2701/    6662 : 4E75                		rts
(1) 2702/    6664 :                     
(1) 2703/    6664 :                     ; --------------------------------------------------------
(1) 2704/    6664 :                     ; Player inputs and Trash events
(1) 2705/    6664 :                     ; --------------------------------------------------------
(1) 2706/    6664 :                     
(1) 2707/    6664 :                     PzlGame_PlayerInputs:
(1) 2708/    6664 : 0838 0007 86E0      		btst	#bitMtch_Pause,(RAM_Glbl_GameMtchFlags).w
(1) 2709/    666A : 661E                		bne.s	.tmroff
(1) 2710/    666C : 0478 0001 8DAC      		sub.w	#1,(RAM_PGame_CursorTimer).w
(1) 2711/    6672 : 6A16                		bpl.s	.tmroff
(1) 2712/    6674 : 31FC 0010 8DAC      		move.w	#$10,(RAM_PGame_CursorTimer).w		; MAX TIMER for cursor animation
(1) 2713/    667A : 3838 8DAA           		move.w	(RAM_PGame_CursorFrame).w,d4
(1) 2714/    667E : D87C 0001           		add.w	#1,d4
(1) 2715/    6682 : C87C 0001           		and.w	#1,d4
(1) 2716/    6686 : 31C4 8DAA           		move.w	d4,(RAM_PGame_CursorFrame).w
(1) 2717/    668A :                     .tmroff:
(1) 2718/    668A :                     
(1) 2719/    668A : 4DF8 856C           		lea	(RAM_Glbl_PzlCursors),a6
(1) 2720/    668E : 3E3C 0003           		move.w	#MAX_BOXES-1,d7
(1) 2721/    6692 :                     .this_plyr:
(1) 2722/    6692 : 4847                		swap	d7
(1) 2723/    6694 : 082E 0007 0058      		btst	#bitCurSt_Active,cursor_Status(a6)
(1) 2724/    669A : 6700 0226           		beq	.box_off
(1) 2725/    669E : 082E 0006 0058      		btst	#bitCurSt_MidSwapLock,cursor_Status(a6)
(1) 2726/    66A4 : 6600 021C           		bne	.box_off
(1) 2727/    66A8 :                     
(1) 2728/    66A8 :                     	; User input
(1) 2729/    66A8 : 2A6E 0004           		movea.l	cursor_Box(a6),a5
(1) 2730/    66AC : 2856                		movea.l	cursor_Control(a6),a4
(1) 2731/    66AE :                     	
(1) 2732/    66AE :                     ; 	; Pause menu
(1) 2733/    66AE :                     ; 		move.w	on_hold(a4),d6
(1) 2734/    66AE :                     ; 		and.w	#JoyStart+JoyA+JoyB+JoyC,d6
(1) 2735/    66AE :                     ; 		cmp.w	#JoyStart+JoyA+JoyB+JoyC,d6
(1) 2736/    66AE :                     ; 		bne.s	.not_out
(1) 2737/    66AE :                     ; 		moveq	#0,d0
(1) 2738/    66AE :                     ; 		move.w	#64,d1
(1) 2739/    66AE :                     ; 		move.w	#4,d2
(1) 2740/    66AE :                     ; 		bsr	Video_PalFade_Out
(1) 2741/    66AE :                     ; 		bra	TitleScreen_Init
(1) 2742/    66AE :                     ; .not_out:
(1) 2743/    66AE :                     
(1) 2744/    66AE : 0838 0006 86E0      		btst	#bitMtch_MatchOver,(RAM_Glbl_GameMtchFlags).w
(1) 2745/    66B4 : 671A                		beq	.normal_pause
(1) 2746/    66B6 : 3C2C 0004           		move.w	on_press(a4),d6
(1) 2747/    66BA : 3A06                		move.w	d6,d5
(1) 2748/    66BC : CC7C 0010           		and.w	#JoyB,d6
(1) 2749/    66C0 : 6600 022E           		bne	.return_menu
(1) 2750/    66C4 : CA7C 0020           		and.w	#JoyC,d5
(1) 2751/    66C8 : 6600 0204           		bne	.restart_game
(1) 2752/    66CC : 6000 01F4           		bra	.box_off
(1) 2753/    66D0 :                     .normal_pause:
(1) 2754/    66D0 : 3C2C 0004           		move.w	on_press(a4),d6
(1) 2755/    66D4 : BC7C 0080           		cmp.w	#JoyStart,d6
(1) 2756/    66D8 : 6620                		bne.s	.not_out2
(1) 2757/    66DA : 082D 0002 0024      		btst	#bitPlySt_GameOver,box_Status(a5)
(1) 2758/    66E0 : 6600 020E           		bne	.return_menu
(1) 2759/    66E4 : 0878 0007 86E0      		bchg	#bitMtch_Pause,(RAM_Glbl_GameMtchFlags).w
(1) 2760/    66EA : 670E                		beq.s	.not_out2
(1) 2761/    66EC : 3C2C 0002           		move.w	on_hold(a4),d6
(1) 2762/    66F0 : 3A06                		move.w	d6,d5
(1) 2763/    66F2 : CC7C 0070           		and.w	#JoyA+JoyB+JoyC,d6
(1) 2764/    66F6 : 6600 01F8           		bne	.return_menu
(1) 2765/    66FA :                     .not_out2:
(1) 2766/    66FA : 0838 0007 86E0      		btst	#bitMtch_Pause,(RAM_Glbl_GameMtchFlags).w
(1) 2767/    6700 : 6600 01C0           		bne	.box_off
(1) 2768/    6704 :                     
(1) 2769/    6704 : 082D 0007 0024      		btst	#bitCurSt_Active,box_Status(a5)
(1) 2770/    670A : 6700 01B6           		beq	.box_off
(1) 2771/    670E :                     ; 		btst	#bitPlySt_Pause,box_Status(a5)		; leftover
(1) 2772/    670E :                     ; 		bne	.box_off
(1) 2773/    670E : 082D 0002 0024      		btst	#bitPlySt_GameOver,box_Status(a5)
(1) 2774/    6714 : 6600 01AC           		bne	.box_off
(1) 2775/    6718 :                     
(1) 2776/    6718 :                     	; OLD AUTODETECTION, SET THIS MANUALLY
(1) 2777/    6718 :                     ; 		moveq	#0,d4
(1) 2778/    6718 :                     ; 		move.b	pad_ver(a4),d4
(1) 2779/    6718 :                     ; 		move.w	d4,cursor_Type(a6)
(1) 2780/    6718 :                     ; 		cmp.w	cursor_TypeOld(a6),d4
(1) 2781/    6718 :                     ; 		beq.s	.no_lrge	
(1) 2782/    6718 :                     ; 		tst.w	d4
(1) 2783/    6718 :                     ; 		beq.s	.no_lrge
(1) 2784/    6718 :                     ; 		move.w	cursor_Y(a6),d5
(1) 2785/    6718 :                     ; 		move.w	box_Height(a5),d6
(1) 2786/    6718 :                     ; 		sub.w	#1,d6
(1) 2787/    6718 :                     ; 		cmp.w	d6,d5
(1) 2788/    6718 :                     ; 		blt.s	.no_lrge
(1) 2789/    6718 :                     ; 		sub.w	#1,cursor_Y(a6)
(1) 2790/    6718 :                     ; 		move.w	cursor_Type(a6),cursor_TypeOld(a6)
(1) 2791/    6718 :                     ; .no_lrge:
(1) 2792/    6718 :                     
(1) 2793/    6718 : 3A2E 005A           		move.w	cursor_SpdUpTmr(a6),d5
(1) 2794/    671C : 3C2C 0004           		move.w	on_press(a4),d6
(1) 2795/    6720 : 4244                		clr.w	d4
(1) 2796/    6722 : 342C 0002           		move.w	on_hold(a4),d2
(1) 2797/    6726 : 6712                		beq.s	.press_once
(1) 2798/    6728 : DA7C 0001           		add.w	#1,d5
(1) 2799/    672C : BA7C 0010           		cmp.w	#$10,d5
(1) 2800/    6730 : 6D06                		blt.s	.keep_count
(1) 2801/    6732 : 3A3C 0010           		move.w	#$10,d5
(1) 2802/    6736 : 3C02                		move.w	d2,d6
(1) 2803/    6738 :                     .keep_count:
(1) 2804/    6738 : 3805                		move.w	d5,d4
(1) 2805/    673A :                     .press_once:
(1) 2806/    673A : 3D44 005A           		move.w	d4,cursor_SpdUpTmr(a6)
(1) 2807/    673E :                     
(1) 2808/    673E : 363C 0000           		move.w	#0,d3
(1) 2809/    6742 : 3006                		move.w	d6,d0
(1) 2810/    6744 : C07C 0008           		and.w	#JoyRight,d0
(1) 2811/    6748 : 6722                		beq.s	.not_right
(1) 2812/    674A : 3A2D 002A           		move.w	box_Width(a5),d5
(1) 2813/    674E : 9A7C 0003           		sub.w	#3,d5
(1) 2814/    6752 : 382E 0052           		move.w	cursor_X(a6),d4
(1) 2815/    6756 : B845                		cmp.w	d5,d4
(1) 2816/    6758 : 6C12                		bge.s	.not_right
(1) 2817/    675A : 066E 0001 0052      		add.w	#1,cursor_X(a6)
(1) 2818/    6760 : 426E 004C           		clr.w	cursor_SwapMode(a6)
(1) 2819/    6764 : 363C 0001           		move.w	#1,d3
(1) 2820/    6768 : 363C 0001           		move.w	#1,d3
(1) 2821/    676C :                     .not_right:
(1) 2822/    676C : 3006                		move.w	d6,d0
(1) 2823/    676E : C07C 0004           		and.w	#JoyLeft,d0
(1) 2824/    6772 : 6714                		beq.s	.not_left
(1) 2825/    6774 : 4A6E 0052           		tst.w	cursor_X(a6)
(1) 2826/    6778 : 670E                		beq.s	.not_left
(1) 2827/    677A : 046E 0001 0052      		sub.w	#1,cursor_X(a6)
(1) 2828/    6780 : 426E 004C           		clr.w	cursor_SwapMode(a6)
(1) 2829/    6784 : 363C 0001           		move.w	#1,d3
(1) 2830/    6788 :                     .not_left:
(1) 2831/    6788 : 3006                		move.w	d6,d0
(1) 2832/    678A : C07C 0002           		and.w	#JoyDown,d0
(1) 2833/    678E : 672C                		beq.s	.not_down
(1) 2834/    6790 : 3A2D 002C           		move.w	box_Height(a5),d5
(1) 2835/    6794 : 9A7C 0002           		sub.w	#1+1,d5
(1) 2836/    6798 : 4A6E 004E           		tst.w	cursor_Type(a6)
(1) 2837/    679C : 6708                		beq.s	.type3
(1) 2838/    679E : 9A7C 0001           		sub.w	#1,d5
(1) 2839/    67A2 : 363C 0001           		move.w	#1,d3
(1) 2840/    67A6 :                     .type3:
(1) 2841/    67A6 : 382E 0054           		move.w	cursor_Y(a6),d4
(1) 2842/    67AA : B845                		cmp.w	d5,d4
(1) 2843/    67AC : 6C0E                		bge.s	.not_down
(1) 2844/    67AE : 066E 0001 0054      		add.w	#1,cursor_Y(a6)
(1) 2845/    67B4 : 426E 004C           		clr.w	cursor_SwapMode(a6)
(1) 2846/    67B8 : 363C 0001           		move.w	#1,d3
(1) 2847/    67BC :                     .not_down:
(1) 2848/    67BC : 3006                		move.w	d6,d0
(1) 2849/    67BE : C07C 0001           		and.w	#JoyUp,d0
(1) 2850/    67C2 : 6714                		beq.s	.not_up
(1) 2851/    67C4 : 4A6E 0054           		tst.w	cursor_Y(a6)
(1) 2852/    67C8 : 670E                		beq.s	.not_up
(1) 2853/    67CA : 046E 0001 0054      		sub.w	#1,cursor_Y(a6)
(1) 2854/    67D0 : 426E 004C           		clr.w	cursor_SwapMode(a6)
(1) 2855/    67D4 : 363C 0001           		move.w	#1,d3
(1) 2856/    67D8 :                     .not_up:
(1) 2857/    67D8 :                     
(1) 2858/    67D8 : 4A43                		tst.w	d3
(1) 2859/    67DA : 6706                		beq.s	.nah
(1) 2860/    67DC :                     ; 		tst.w	box_TrshReq(a5)
(1) 2861/    67DC :                     ; 		bne.s	.nah
(1) 2862/    67DC : 31FC 0004 8DB8      		move.w	#4,(RAM_PGame_Sound).w
(1) 2863/    67E2 :                     ; 		movem.l	d0-d4/a4,-(sp)
(1) 2864/    67E2 :                     ; 		move.l	#(SfxData_Blk<<16)|SfxData_Pat,d0
(1) 2865/    67E2 :                     ; 		move.l	#($0000<<16)|SfxData_Ins,d1
(1) 2866/    67E2 :                     ; 		move.l	#$00030001,d2
(1) 2867/    67E2 :                     ; 		moveq	#0,d3
(1) 2868/    67E2 :                     ; 		bsr	Sound_SetTrack
(1) 2869/    67E2 :                     ; 		movem.l	(sp)+,d0-d4/a4
(1) 2870/    67E2 :                     .nah:
(1) 2871/    67E2 :                     
(1) 2872/    67E2 :                     ; ----------------------------------------
(1) 2873/    67E2 :                     ; ABCXYZ mechanics
(1) 2874/    67E2 :                     ; ----------------------------------------
(1) 2875/    67E2 :                     
(1) 2876/    67E2 :                     ; 		tst.w	(RAM_Glbl_GameMtchFlags).w
(1) 2877/    67E2 :                     ; 		bne	.no_spdup
(1) 2878/    67E2 : 4A6E 004C           		tst.w	cursor_SwapMode(a6)
(1) 2879/    67E6 : 6744                		beq.s	.no_prelock
(1) 2880/    67E8 : 082D 0003 0024      		btst	#bitPlySt_ChkMatch,box_Status(a5)
(1) 2881/    67EE : 6600 00D2           		bne	.box_off
(1) 2882/    67F2 : 3A2E 000A           		move.w	cursor_SwapSrcPos+2(a6),d5
(1) 2883/    67F6 : 382E 0008           		move.w	cursor_SwapSrcPos(a6),d4
(1) 2884/    67FA : D844                		add.w	d4,d4
(1) 2885/    67FC : EB4D                		lsl.w	#5,d5
(1) 2886/    67FE : D845                		add.w	d5,d4
(1) 2887/    6800 : 266D 000C           		movea.l	box_BlockData(a5),a3
(1) 2888/    6804 : D6FC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a3
(1) 2889/    6808 : D6C4                		adda	d4,a3
(1) 2890/    680A : 3813                		move.w	(a3),d4
(1) 2891/    680C : B86E 0018           		cmp.w	cursor_SwapSrcId(a6),d4
(1) 2892/    6810 : 671A                		beq.s	.no_prelock
(1) 2893/    6812 : 3A04                		move.w	d4,d5
(1) 2894/    6814 : CA7C 7FC0           		and.w	#$7FC0,d5
(1) 2895/    6818 : 660A                		bne.s	.clr_zero
(1) 2896/    681A : 4A04                		tst.b	d4
(1) 2897/    681C : 6706                		beq.s	.clr_zero
(1) 2898/    681E : 0804 0006           		btst	#bitBlkFlg_Fall,d4
(1) 2899/    6822 : 6704                		beq.s	.no_fallpr
(1) 2900/    6824 :                     .clr_zero:
(1) 2901/    6824 : 426E 004C           		clr.w	cursor_SwapMode(a6)
(1) 2902/    6828 :                     .no_fallpr:
(1) 2903/    6828 : 3D44 0018           		move.w	d4,cursor_SwapSrcId(a6)
(1) 2904/    682C :                     .no_prelock:
(1) 2905/    682C : 3C2C 0004           		move.w	on_press(a4),d6
(1) 2906/    6830 : 6100 00D0           		bsr	.chktrggr_pos
(1) 2907/    6834 : 6704                		beq.s	.no_pick
(1) 2908/    6836 : 6100 0136           		bsr	.pick_block
(1) 2909/    683A :                     .no_pick:
(1) 2910/    683A :                     		
(1) 2911/    683A :                     ; ----------------------------------------
(1) 2912/    683A :                     ; Speed up board using free space
(1) 2913/    683A :                     ; ----------------------------------------
(1) 2914/    683A :                     
(1) 2915/    683A : 2856                		movea.l	cursor_Control(a6),a4
(1) 2916/    683C : 3C2C 0002           		move.w	on_hold(a4),d6
(1) 2917/    6840 : 3A06                		move.w	d6,d5
(1) 2918/    6842 : 343C 0070           		move.w	#JoyA+JoyB+JoyC,d2
(1) 2919/    6846 : 4A6E 004E           		tst.w	cursor_Type(a6)
(1) 2920/    684A : 6704                		beq.s	.oldtrggr
(1) 2921/    684C : 343C 0700           		move.w	#JoyX+JoyY+JoyZ,d2
(1) 2922/    6850 :                     .oldtrggr:
(1) 2923/    6850 : CA42                		and.w	d2,d5
(1) 2924/    6852 : 672C                		beq.s	.lastchk
(1) 2925/    6854 : 3A2E 0054           		move.w	cursor_Y(a6),d5
(1) 2926/    6858 : 382E 0052           		move.w	cursor_X(a6),d4
(1) 2927/    685C : D844                		add.w	d4,d4
(1) 2928/    685E : EB4D                		lsl.w	#5,d5
(1) 2929/    6860 : D845                		add.w	d5,d4
(1) 2930/    6862 : 226D 000C           		movea.l	box_BlockData(a5),a1
(1) 2931/    6866 : D2FC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a1
(1) 2932/    686A : D2C4                		adda	d4,a1
(1) 2933/    686C : 3819                		move.w	(a1)+,d4
(1) 2934/    686E : 4A04                		tst.b	d4
(1) 2935/    6870 : 6650                		bne	.no_spdup
(1) 2936/    6872 : 3819                		move.w	(a1)+,d4
(1) 2937/    6874 : 4A04                		tst.b	d4
(1) 2938/    6876 : 664A                		bne	.no_spdup		
(1) 2939/    6878 : 3819                		move.w	(a1)+,d4
(1) 2940/    687A : 4A04                		tst.b	d4
(1) 2941/    687C : 6644                		bne	.no_spdup
(1) 2942/    687E : 603C                		bra.s	.type0_spdup
(1) 2943/    6880 :                     .lastchk:
(1) 2944/    6880 : 4A6E 004E           		tst.w	cursor_Type(a6)
(1) 2945/    6884 : 673C                		beq.s	.no_spdup
(1) 2946/    6886 : 3A06                		move.w	d6,d5
(1) 2947/    6888 : CA7C 0070           		and.w	#JoyA+JoyB+JoyC,d5
(1) 2948/    688C : 6734                		beq	.no_spdup
(1) 2949/    688E : 3A2E 0054           		move.w	cursor_Y(a6),d5
(1) 2950/    6892 : 382E 0052           		move.w	cursor_X(a6),d4
(1) 2951/    6896 : DA7C 0001           		add.w	#1,d5
(1) 2952/    689A : D844                		add.w	d4,d4
(1) 2953/    689C : EB4D                		lsl.w	#5,d5
(1) 2954/    689E : D845                		add.w	d5,d4
(1) 2955/    68A0 : 226D 000C           		movea.l	box_BlockData(a5),a1
(1) 2956/    68A4 : D2FC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a1
(1) 2957/    68A8 : D2C4                		adda	d4,a1
(1) 2958/    68AA : 3819                		move.w	(a1)+,d4
(1) 2959/    68AC : 4A04                		tst.b	d4
(1) 2960/    68AE : 6612                		bne	.no_spdup
(1) 2961/    68B0 : 3819                		move.w	(a1)+,d4
(1) 2962/    68B2 : 4A04                		tst.b	d4
(1) 2963/    68B4 : 660C                		bne	.no_spdup
(1) 2964/    68B6 : 3819                		move.w	(a1)+,d4
(1) 2965/    68B8 : 4A04                		tst.b	d4
(1) 2966/    68BA : 6606                		bne	.no_spdup
(1) 2967/    68BC :                     .type0_spdup:
(1) 2968/    68BC : 08ED 0001 0024      		bset	#bitPlySt_SpdUp,box_Status(a5)
(1) 2969/    68C2 :                     .no_spdup:
(1) 2970/    68C2 :                     
(1) 2971/    68C2 :                     ; ----------------------------------------
(1) 2972/    68C2 :                     
(1) 2973/    68C2 :                     .box_off:
(1) 2974/    68C2 : DCFC 005C           		adda	#sizeof_Cursor,a6
(1) 2975/    68C6 : 4847                		swap	d7
(1) 2976/    68C8 : 51CF FDC8           		dbf	d7,.this_plyr
(1) 2977/    68CC :                     .no_res:
(1) 2978/    68CC : 4E75                		rts
(1) 2979/    68CE :                     
(1) 2980/    68CE :                     ; ----------------------------------------
(1) 2981/    68CE :                     
(1) 2982/    68CE :                     .restart_game:
(1) 2983/    68CE : 7000                		moveq	#0,d0
(1) 2984/    68D0 : 323C 0040           		move.w	#64,d1
(1) 2985/    68D4 : 343C 0080           		move.w	#$80,d2
(1) 2986/    68D8 : 6100 B20E           		bsr	Video_PalFade_Out
(1) 2987/    68DC : 08B8 0006 86E0      		bclr	#bitMtch_MatchOver,(RAM_Glbl_GameMtchFlags).w
(1) 2988/    68E2 : 08B8 0005 86E0      		bclr	#bitMtch_Timeout,(RAM_Glbl_GameMtchFlags).w
(1) 2989/    68E8 : 42B8 8B6C           		clr.l	(RAM_PGame_GlblTimer).w
(1) 2990/    68EC : 6000 E3F6           		bra	MainGame_Init
(1) 2991/    68F0 :                     		
(1) 2992/    68F0 :                     .return_menu:
(1) 2993/    68F0 : 7000                		moveq	#0,d0
(1) 2994/    68F2 : 323C 0040           		move.w	#64,d1
(1) 2995/    68F6 : 343C 0004           		move.w	#4,d2
(1) 2996/    68FA : 6100 B1EC           		bsr	Video_PalFade_Out
(1) 2997/    68FE : 6000 C7C4           		bra	TitleScreen_Init
(1) 2998/    6902 :                     		
(1) 2999/    6902 :                     ; ----------------------------------------
(1) 3000/    6902 :                     
(1) 3001/    6902 :                     .chktrggr_pos:
(1) 3002/    6902 :                     	; X Y Z check
(1) 3003/    6902 : 4245                		clr.w	d5
(1) 3004/    6904 : 7200                		moveq	#0,d1
(1) 3005/    6906 : 7400                		moveq	#0,d2
(1) 3006/    6908 : 4A6E 004E           		tst.w	cursor_Type(a6)
(1) 3007/    690C : 6734                		beq.s	.abconly
(1) 3008/    690E :                     .type0:
(1) 3009/    690E : 3006                		move.w	d6,d0
(1) 3010/    6910 : C07C 0400           		and.w	#JoyX,d0
(1) 3011/    6914 : 6708                		beq.s	.not_x
(1) 3012/    6916 : 3A3C 0001           		move.w	#1,d5
(1) 3013/    691A : 7200                		moveq	#0,d1
(1) 3014/    691C : 604C                		bra.s	.not_c
(1) 3015/    691E :                     .not_x:
(1) 3016/    691E : 3006                		move.w	d6,d0
(1) 3017/    6920 : C07C 0200           		and.w	#JoyY,d0
(1) 3018/    6924 : 6708                		beq.s	.not_y
(1) 3019/    6926 : 3A3C 0001           		move.w	#1,d5
(1) 3020/    692A : 7201                		moveq	#1,d1
(1) 3021/    692C : 603C                		bra.s	.not_c
(1) 3022/    692E :                     .not_y:
(1) 3023/    692E : 3006                		move.w	d6,d0
(1) 3024/    6930 : C07C 0100           		and.w	#JoyZ,d0
(1) 3025/    6934 : 6708                		beq.s	.not_z
(1) 3026/    6936 : 3A3C 0001           		move.w	#1,d5
(1) 3027/    693A : 7202                		moveq	#2,d1
(1) 3028/    693C : 602C                		bra.s	.not_c
(1) 3029/    693E :                     .not_z:
(1) 3030/    693E : D47C 0001           		add.w	#1,d2
(1) 3031/    6942 :                     
(1) 3032/    6942 :                     .abconly:
(1) 3033/    6942 :                     	; A B C check
(1) 3034/    6942 : 3C2C 0004           		move.w	on_press(a4),d6
(1) 3035/    6946 : 3006                		move.w	d6,d0
(1) 3036/    6948 : C07C 0040           		and.w	#JoyA,d0
(1) 3037/    694C : 6704                		beq.s	.not_a
(1) 3038/    694E : 7A01                		moveq	#1,d5
(1) 3039/    6950 : 7200                		moveq	#0,d1
(1) 3040/    6952 :                     .not_a:
(1) 3041/    6952 : 3006                		move.w	d6,d0
(1) 3042/    6954 : C07C 0010           		and.w	#JoyB,d0
(1) 3043/    6958 : 6704                		beq.s	.not_b
(1) 3044/    695A : 7A01                		moveq	#1,d5
(1) 3045/    695C : 7201                		moveq	#1,d1
(1) 3046/    695E :                     .not_b:
(1) 3047/    695E : 3006                		move.w	d6,d0
(1) 3048/    6960 : C07C 0020           		and.w	#JoyC,d0
(1) 3049/    6964 : 6704                		beq.s	.not_c
(1) 3050/    6966 : 7A01                		moveq	#1,d5
(1) 3051/    6968 : 7202                		moveq	#2,d1
(1) 3052/    696A :                     .not_c:
(1) 3053/    696A : 4A45                		tst.w	d5
(1) 3054/    696C : 4E75                		rts
(1) 3055/    696E :                     		
(1) 3056/    696E :                     ; ----------------------------------------
(1) 3057/    696E :                     ; Pick / Swap block
(1) 3058/    696E :                     ; 
(1) 3059/    696E :                     ; d1 - X pos
(1) 3060/    696E :                     ; d2 - Y pos
(1) 3061/    696E :                     ; ----------------------------------------
(1) 3062/    696E :                     
(1) 3063/    696E :                     .pick_block:
(1) 3064/    696E : 082E 0006 0058      		btst	#bitCurSt_MidSwapLock,cursor_Status(a6)
(1) 3065/    6974 : 6600 0110           		bne	.ignore
(1) 3066/    6978 : 4A6E 004C           		tst.w	cursor_SwapMode(a6)
(1) 3067/    697C : 667A                		bne	.mode_1
(1) 3068/    697E :                     .mode_0:
(1) 3069/    697E : 382E 0052           		move.w	cursor_X(a6),d4
(1) 3070/    6982 : D841                		add.w	d1,d4
(1) 3071/    6984 : D844                		add.w	d4,d4
(1) 3072/    6986 : 3A2E 0054           		move.w	cursor_Y(a6),d5
(1) 3073/    698A : DA42                		add.w	d2,d5
(1) 3074/    698C : EB4D                		lsl.w	#5,d5
(1) 3075/    698E : D845                		add.w	d5,d4
(1) 3076/    6990 : 226D 000C           		movea.l	box_BlockData(a5),a1
(1) 3077/    6994 : D2FC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a1
(1) 3078/    6998 : D2C4                		adda	d4,a1
(1) 3079/    699A : 3811                		move.w	(a1),d4
(1) 3080/    699C : 6700 00E8           		beq	.ignore
(1) 3081/    69A0 : 3A04                		move.w	d4,d5
(1) 3082/    69A2 : CA7C 00E0           		and.w	#%11100000,d5
(1) 3083/    69A6 : 6600 00DE           		bne	.ignore
(1) 3084/    69AA : 3A04                		move.w	d4,d5
(1) 3085/    69AC : CA7C 7F00           		and.w	#$7F00,d5
(1) 3086/    69B0 : 6600 00D4           		bne	.ignore
(1) 3087/    69B4 : B87C 000D           		cmp.w	#SET_STRTTRSHIDS,d4
(1) 3088/    69B8 : 6C00 00CC           		bge	.ignore
(1) 3089/    69BC :                     
(1) 3090/    69BC : 066E 0001 004C      		add.w	#1,cursor_SwapMode(a6)
(1) 3091/    69C2 : 3D44 0018           		move.w	d4,cursor_SwapSrcId(a6)
(1) 3092/    69C6 : 382E 0052           		move.w	cursor_X(a6),d4
(1) 3093/    69CA : D841                		add.w	d1,d4
(1) 3094/    69CC : 3D44 0008           		move.w	d4,cursor_SwapSrcPos(a6)
(1) 3095/    69D0 : D86D 0026           		add.w	box_BoardX(a5),d4
(1) 3096/    69D4 : E94C                		lsl.w	#4,d4
(1) 3097/    69D6 : 3D44 001C           		move.w	d4,cursor_SwapSrcSpr(a6)
(1) 3098/    69DA : 3D44 0010           		move.w	d4,cursor_SwapSrcShdw(a6)
(1) 3099/    69DE : 382E 0054           		move.w	cursor_Y(a6),d4
(1) 3100/    69E2 : D842                		add.w	d2,d4
(1) 3101/    69E4 : 3D44 000A           		move.w	d4,cursor_SwapSrcPos+2(a6)
(1) 3102/    69E8 : D86D 0028           		add.w	box_BoardY(a5),d4
(1) 3103/    69EC : E94C                		lsl.w	#4,d4
(1) 3104/    69EE : 3D44 0020           		move.w	d4,cursor_SwapSrcSpr+4(a6)
(1) 3105/    69F2 : 3D44 0012           		move.w	d4,cursor_SwapSrcShdw+2(a6)
(1) 3106/    69F6 : 4E75                		rts
(1) 3107/    69F8 :                     
(1) 3108/    69F8 :                     ; Grab DST
(1) 3109/    69F8 :                     .mode_1:
(1) 3110/    69F8 : 2A2E 0008           		move.l	cursor_SwapSrcPos(a6),d5
(1) 3111/    69FC : 382E 0052           		move.w	cursor_X(a6),d4
(1) 3112/    6A00 : D841                		add.w	d1,d4
(1) 3113/    6A02 : 4844                		swap	d4
(1) 3114/    6A04 : 382E 0054           		move.w	cursor_Y(a6),d4
(1) 3115/    6A08 : D842                		add.w	d2,d4
(1) 3116/    6A0A : B885                		cmp.l	d5,d4
(1) 3117/    6A0C : 6606                		bne.s	.new_block
(1) 3118/    6A0E : 426E 004C           		clr.w	cursor_SwapMode(a6)
(1) 3119/    6A12 : 4E75                		rts
(1) 3120/    6A14 :                     		
(1) 3121/    6A14 :                     ; Set DESTINATION and swap blocks
(1) 3122/    6A14 :                     ; TODO: SRC check if the block changed
(1) 3123/    6A14 :                     .new_block:
(1) 3124/    6A14 : 382E 0052           		move.w	cursor_X(a6),d4
(1) 3125/    6A18 : D841                		add.w	d1,d4
(1) 3126/    6A1A : D844                		add.w	d4,d4
(1) 3127/    6A1C : 3A2E 0054           		move.w	cursor_Y(a6),d5
(1) 3128/    6A20 : DA42                		add.w	d2,d5
(1) 3129/    6A22 :                     ; 		tst.w	cursor_Type(a6)
(1) 3130/    6A22 :                     ; 		beq.s	.normlcurs
(1) 3131/    6A22 :                     ; 		tst.w	d5
(1) 3132/    6A22 :                     ; 		beq.s	.ignore
(1) 3133/    6A22 :                     ; .normlcurs:
(1) 3134/    6A22 : EB4D                		lsl.w	#5,d5
(1) 3135/    6A24 : D845                		add.w	d5,d4
(1) 3136/    6A26 : 226D 000C           		movea.l	box_BlockData(a5),a1
(1) 3137/    6A2A : D2FC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a1
(1) 3138/    6A2E : D2C4                		adda	d4,a1
(1) 3139/    6A30 :                     		
(1) 3140/    6A30 : 3811                		move.w	(a1),d4
(1) 3141/    6A32 : 3A04                		move.w	d4,d5
(1) 3142/    6A34 :                     ; 		and.w	#BLKDEL_MIDSWAP,d5
(1) 3143/    6A34 :                     ; 		cmp.w	#BLKDEL_MIDSWAP,d5
(1) 3144/    6A34 :                     ; 		bge.s	.allowit
(1) 3145/    6A34 : 3A04                		move.w	d4,d5
(1) 3146/    6A36 : CA7C 7F00           		and.w	#$7F00,d5
(1) 3147/    6A3A : 664A                		bne	.ignore
(1) 3148/    6A3C : 3A04                		move.w	d4,d5
(1) 3149/    6A3E : CA7C 00E0           		and.w	#%11100000,d5
(1) 3150/    6A42 : 6642                		bne	.ignore
(1) 3151/    6A44 : B87C 000D           		cmp.w	#SET_STRTTRSHIDS,d4
(1) 3152/    6A48 : 6C3C                		bge.s	.ignore
(1) 3153/    6A4A :                     .allowit:
(1) 3154/    6A4A :                     
(1) 3155/    6A4A : 066E 0001 004C      		add.w	#1,cursor_SwapMode(a6)
(1) 3156/    6A50 :                     ; 		and.w	#%1111,d4
(1) 3157/    6A50 : 3D44 001A           		move.w	d4,cursor_SwapDstId(a6)
(1) 3158/    6A54 : 382E 0052           		move.w	cursor_X(a6),d4
(1) 3159/    6A58 : D841                		add.w	d1,d4
(1) 3160/    6A5A : 3D44 000C           		move.w	d4,cursor_SwapDstPos(a6)
(1) 3161/    6A5E : D86D 0026           		add.w	box_BoardX(a5),d4
(1) 3162/    6A62 : E94C                		lsl.w	#4,d4
(1) 3163/    6A64 : 3D44 0034           		move.w	d4,cursor_SwapDstSpr(a6)
(1) 3164/    6A68 : 3D44 0014           		move.w	d4,cursor_SwapDstShdw(a6)
(1) 3165/    6A6C : 382E 0054           		move.w	cursor_Y(a6),d4
(1) 3166/    6A70 : D842                		add.w	d2,d4
(1) 3167/    6A72 : 3D44 000E           		move.w	d4,cursor_SwapDstPos+2(a6)
(1) 3168/    6A76 : D86D 0028           		add.w	box_BoardY(a5),d4
(1) 3169/    6A7A : E94C                		lsl.w	#4,d4
(1) 3170/    6A7C : 3D44 0038           		move.w	d4,cursor_SwapDstSpr+4(a6)
(1) 3171/    6A80 : 3D44 0016           		move.w	d4,cursor_SwapDstShdw+2(a6)
(1) 3172/    6A84 : 4E75                		rts
(1) 3173/    6A86 :                     .ignore:
(1) 3174/    6A86 : 4E75                		rts
(1) 3175/    6A88 :                     
(1) 3176/    6A88 :                     ; --------------------------------------------------------
(1) 3177/    6A88 :                     ; Make SPRITES here before rendering them
(1) 3178/    6A88 :                     ; 
(1) 3179/    6A88 :                     ; d3 - Current LINK
(1) 3180/    6A88 :                     ; --------------------------------------------------------
(1) 3181/    6A88 :                     
(1) 3182/    6A88 :                     PzlGame_MkSwapAndSpr:
(1) 3183/    6A88 : 49F8 8B74           		lea	(RAM_PGame_SpriteData),a4
(1) 3184/    6A8C : 7601                		moveq	#1,d3
(1) 3185/    6A8E :                     
(1) 3186/    6A8E :                     ; ----------------------------------------
(1) 3187/    6A8E :                     
(1) 3188/    6A8E : 4DF8 856C           		lea	(RAM_Glbl_PzlCursors),a6
(1) 3189/    6A92 : 3E3C 0003           		move.w	#MAX_BOXES-1,d7
(1) 3190/    6A96 :                     .next:
(1) 3191/    6A96 : 082E 0007 0058      		btst	#bitCurSt_Active,cursor_Status(a6)
(1) 3192/    6A9C : 6700 00C2           		beq	.no_box
(1) 3193/    6AA0 : 202E 0004           		move.l	cursor_Box(a6),d0
(1) 3194/    6AA4 : 6700 00BA           		beq	.no_box
(1) 3195/    6AA8 : 2A40                		movea.l	d0,a5
(1) 3196/    6AAA : 082D 0002 0024      		btst	#bitPlySt_GameOver,box_Status(a5)
(1) 3197/    6AB0 : 6600 00AE           		bne	.no_box
(1) 3198/    6AB4 :                     
(1) 3199/    6AB4 : 082D 0004 0024      		btst	#bitPlySt_DrwLine,box_Status(a5)
(1) 3200/    6ABA : 673E                		beq.s	.dont_decr
(1) 3201/    6ABC : 04AE 0000 0001 0008 		sub.l	#1,cursor_SwapSrcPos(a6)
(1) 3202/    6AC4 : 04AE 0000 0001 000C 		sub.l	#1,cursor_SwapDstPos(a6)
(1) 3203/    6ACC : 04AE 0010 0000 0020 		sub.l	#$100000,cursor_SwapSrcSpr+4(a6)
(1) 3204/    6AD4 : 04AE 0010 0000 0038 		sub.l	#$100000,cursor_SwapDstSpr+4(a6)
(1) 3205/    6ADC : 046E 0010 0012      		sub.w	#$10,cursor_SwapSrcShdw+2(a6)
(1) 3206/    6AE2 : 046E 0010 0016      		sub.w	#$10,cursor_SwapDstShdw+2(a6)
(1) 3207/    6AE8 : 4A6E 0054           		tst.w	cursor_Y(a6)
(1) 3208/    6AEC : 6708                		beq.s	.fix_cursor
(1) 3209/    6AEE : 046E 0001 0054      		sub.w	#1,cursor_Y(a6)
(1) 3210/    6AF4 : 6004                		bra.s	.dont_decr
(1) 3211/    6AF6 :                     .fix_cursor:
(1) 3212/    6AF6 : 426E 004C           		clr.w	cursor_SwapMode(a6)
(1) 3213/    6AFA :                     .dont_decr:
(1) 3214/    6AFA : 4A6E 004C           		tst.w	cursor_SwapMode(a6)
(1) 3215/    6AFE : 6716                		beq	.boxoff_blk
(1) 3216/    6B00 : 3C2E 004C           		move.w	cursor_SwapMode(a6),d6
(1) 3217/    6B04 : 9C7C 0001           		sub.w	#1,d6
(1) 3218/    6B08 : DC46                		add.w	d6,d6
(1) 3219/    6B0A : 41FA 010C           		lea	.swapmode_script(pc),a0
(1) 3220/    6B0E : 3C30 6000           		move.w	(a0,d6.w),d6
(1) 3221/    6B12 : 4EB0 6000           		jsr	(a0,d6.w)
(1) 3222/    6B16 :                     .boxoff_blk:
(1) 3223/    6B16 :                     
(1) 3224/    6B16 :                     	; Make cursor
(1) 3225/    6B16 : 302D 0028           		move.w	box_BoardY(a5),d0
(1) 3226/    6B1A : D06E 0054           		add.w	cursor_Y(a6),d0
(1) 3227/    6B1E : E948                		lsl.w	#4,d0
(1) 3228/    6B20 : 3A2D 0010           		move.w	box_YScrl(a5),d5
(1) 3229/    6B24 : CA7C 000F           		and.w	#$F,d5
(1) 3230/    6B28 : 9045                		sub.w	d5,d0
(1) 3231/    6B2A : 322D 0026           		move.w	box_BoardX(a5),d1
(1) 3232/    6B2E : D26E 0052           		add.w	cursor_X(a6),d1
(1) 3233/    6B32 : E949                		lsl.w	#4,d1
(1) 3234/    6B34 : D07C 0078           		add.w	#$80-8,d0
(1) 3235/    6B38 : D27C 0078           		add.w	#$80-8,d1
(1) 3236/    6B3C : 1A39 FFFF A888      		move.b	(RAM_VdpCache+$C).l,d5
(1) 3237/    6B42 : CA7C 0004           		and.w	#%100,d5
(1) 3238/    6B46 : E24D                		lsr.w	#1,d5
(1) 3239/    6B48 : 382E 004E           		move.w	cursor_Type(a6),d4
(1) 3240/    6B4C : C87C 0001           		and.w	#1,d4
(1) 3241/    6B50 : D845                		add.w	d5,d4
(1) 3242/    6B52 : D844                		add.w	d4,d4
(1) 3243/    6B54 : 41FA 02B8           		lea	.sprcursor_list(pc),a0
(1) 3244/    6B58 : 3830 4000           		move.w	(a0,d4.w),d4
(1) 3245/    6B5C : 4EB0 4000           		jsr	(a0,d4.w)
(1) 3246/    6B60 :                     .no_box:
(1) 3247/    6B60 :                     
(1) 3248/    6B60 :                     	; Shadow blocks
(1) 3249/    6B60 : 4A6E 004C           		tst.w	cursor_SwapMode(a6)
(1) 3250/    6B64 : 6700 0096           		beq	.boxoff_shd
(1) 3251/    6B68 : 343C 0790           		move.w	#VRAMSET_SPRSHDW,d2
(1) 3252/    6B6C : 2C3C 0000 0500      		move.l	#$00000500,d6
(1) 3253/    6B72 : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1) 3254/    6B7A : 6708                		beq.s	.norml
(1) 3255/    6B7C : E24A                		lsr.w	#1,d2
(1) 3256/    6B7E : 2C3C 0080 0400      		move.l	#$00800400,d6
(1) 3257/    6B84 :                     .norml:
(1) 3258/    6B84 : 847C E000           		or.w	#$6000|$8000,d2
(1) 3259/    6B88 : 382E 0010           		move.w	cursor_SwapSrcShdw(a6),d4
(1) 3260/    6B8C : 3A2E 0012           		move.w	cursor_SwapSrcShdw+2(a6),d5
(1) 3261/    6B90 : 4846                		swap	d6
(1) 3262/    6B92 : 303C 0080           		move.w	#$80,d0
(1) 3263/    6B96 : D046                		add.w	d6,d0
(1) 3264/    6B98 : 323C 0080           		move.w	#$80,d1
(1) 3265/    6B9C : D244                		add.w	d4,d1
(1) 3266/    6B9E : D045                		add.w	d5,d0
(1) 3267/    6BA0 : 3A2D 0010           		move.w	box_YScrl(a5),d5
(1) 3268/    6BA4 : CA7C 000F           		and.w	#$F,d5
(1) 3269/    6BA8 : 9045                		sub.w	d5,d0
(1) 3270/    6BAA : 4846                		swap	d6
(1) 3271/    6BAC : 3806                		move.w	d6,d4
(1) 3272/    6BAE : 8843                		or.w	d3,d4
(1) 3273/    6BB0 :                     	; TODO: sprite oob check
(1) 3274/    6BB0 : 38C0                		move.w	d0,(a4)+
(1) 3275/    6BB2 : 38C4                		move.w	d4,(a4)+
(1) 3276/    6BB4 : 38C2                		move.w	d2,(a4)+
(1) 3277/    6BB6 : 38C1                		move.w	d1,(a4)+
(1) 3278/    6BB8 : D67C 0001           		add.w	#1,d3
(1) 3279/    6BBC : 0C6E 0002 004C      		cmp.w	#2,cursor_SwapMode(a6)
(1) 3280/    6BC2 : 6F38                		ble.s	.boxoff_shd
(1) 3281/    6BC4 : 382E 0014           		move.w	cursor_SwapDstShdw(a6),d4
(1) 3282/    6BC8 : 3A2E 0016           		move.w	cursor_SwapDstShdw+2(a6),d5
(1) 3283/    6BCC : 4846                		swap	d6
(1) 3284/    6BCE : 303C 0080           		move.w	#$80,d0
(1) 3285/    6BD2 : D046                		add.w	d6,d0
(1) 3286/    6BD4 : 323C 0080           		move.w	#$80,d1
(1) 3287/    6BD8 : D244                		add.w	d4,d1
(1) 3288/    6BDA : D045                		add.w	d5,d0
(1) 3289/    6BDC : 3A2D 0010           		move.w	box_YScrl(a5),d5
(1) 3290/    6BE0 : CA7C 000F           		and.w	#$F,d5
(1) 3291/    6BE4 : 9045                		sub.w	d5,d0
(1) 3292/    6BE6 : 847C E000           		or.w	#$6000|$8000,d2
(1) 3293/    6BEA : 4846                		swap	d6
(1) 3294/    6BEC : 3806                		move.w	d6,d4
(1) 3295/    6BEE : 8843                		or.w	d3,d4
(1) 3296/    6BF0 :                     	; TODO: sprite oob check
(1) 3297/    6BF0 : 38C0                		move.w	d0,(a4)+
(1) 3298/    6BF2 : 38C4                		move.w	d4,(a4)+
(1) 3299/    6BF4 : 38C2                		move.w	d2,(a4)+
(1) 3300/    6BF6 : 38C1                		move.w	d1,(a4)+
(1) 3301/    6BF8 : D67C 0001           		add.w	#1,d3
(1) 3302/    6BFC :                     .boxoff_shd:
(1) 3303/    6BFC :                     
(1) 3304/    6BFC : DCFC 005C           		adda	#sizeof_Cursor,a6
(1) 3305/    6C00 : 51CF FE94           		dbf	d7,.next
(1) 3306/    6C04 :                     		
(1) 3307/    6C04 :                     ; ; ----------------------------------------
(1) 3308/    6C04 :                     ; ; Hide the broken 2cell
(1) 3309/    6C04 :                     ; ; ----------------------------------------
(1) 3310/    6C04 :                     ; 
(1) 3311/    6C04 :                     ; 		btst	#2,(RAM_VdpCache+$C).w
(1) 3312/    6C04 :                     ; 		bne.s	.hidedble
(1) 3313/    6C04 :                     ; 		move.w	#$80,d0
(1) 3314/    6C04 :                     ; 		move.w	#$80,d1
(1) 3315/    6C04 :                     ; 		move.w	#VRAMSET_CELLHIDE|$8000+$6000,d2
(1) 3316/    6C04 :                     ; 		move.w	#(224/32)-1,d5
(1) 3317/    6C04 :                     ; 		move.w	#$0700,d4
(1) 3318/    6C04 :                     ; 		or.w	d3,d4
(1) 3319/    6C04 :                     ; .nxtone:
(1) 3320/    6C04 :                     ; 	; TODO: sprite oob check
(1) 3321/    6C04 :                     ; 		move.w	d0,(a4)+
(1) 3322/    6C04 :                     ; 		move.w	d4,(a4)+
(1) 3323/    6C04 :                     ; 		move.w	d2,(a4)+
(1) 3324/    6C04 :                     ; 		move.w	d1,(a4)+
(1) 3325/    6C04 :                     ; 		add.w	#1,d3
(1) 3326/    6C04 :                     ; 		add.w	#1,d4
(1) 3327/    6C04 :                     ; 		add.w	#$20,d0
(1) 3328/    6C04 :                     ; 		dbf	d5,.nxtone
(1) 3329/    6C04 :                     ; 		bra.s	.hidecont
(1) 3330/    6C04 :                     ; .hidedble:
(1) 3331/    6C04 :                     ; 		move.w	#$100,d0
(1) 3332/    6C04 :                     ; 		move.w	#$80,d1
(1) 3333/    6C04 :                     ; 		move.w	#VRAMSET_CELLHIDE>>1|$8000+$6000,d2
(1) 3334/    6C04 :                     ; 		move.w	#(448/32)-1,d5
(1) 3335/    6C04 :                     ; 		move.w	#$0500,d4
(1) 3336/    6C04 :                     ; 		or.w	d3,d4
(1) 3337/    6C04 :                     ; .nxtone2:
(1) 3338/    6C04 :                     ; 	; TODO: sprite oob check
(1) 3339/    6C04 :                     ; 		move.w	d0,(a4)+
(1) 3340/    6C04 :                     ; 		move.w	d4,(a4)+
(1) 3341/    6C04 :                     ; 		move.w	d2,(a4)+
(1) 3342/    6C04 :                     ; 		move.w	d1,(a4)+
(1) 3343/    6C04 :                     ; 		add.w	#1,d3
(1) 3344/    6C04 :                     ; 		add.w	#1,d4
(1) 3345/    6C04 :                     ; 		add.w	#$20,d0
(1) 3346/    6C04 :                     ; 		dbf	d5,.nxtone2
(1) 3347/    6C04 :                     ; .hidecont:
(1) 3348/    6C04 :                     
(1) 3349/    6C04 :                     ; ----------------------------------------
(1) 3350/    6C04 :                     
(1) 3351/    6C04 : B63C 0046           		cmp.b	#70,d3
(1) 3352/    6C08 : 6C0C                		bge.s	.finishspr
(1) 3353/    6C0A : 28FC 0000 0000      		move.l	#0,(a4)+
(1) 3354/    6C10 : 28FC 0000 0000      		move.l	#0,(a4)+
(1) 3355/    6C16 :                     .finishspr:
(1) 3356/    6C16 : 4E75                		rts
(1) 3357/    6C18 :                     
(1) 3358/    6C18 :                     ; ------------------------------------------------
(1) 3359/    6C18 :                     ; Animation scripts for blocks on cursors
(1) 3360/    6C18 :                     ; ------------------------------------------------
(1) 3361/    6C18 :                     
(1) 3362/    6C18 :                     .swapmode_script:
(1) 3363/    6C18 : 0008                		dc.w	.script_1-.swapmode_script
(1) 3364/    6C1A : 0018                		dc.w	.script_2-.swapmode_script
(1) 3365/    6C1C : 007E                		dc.w	.script_3-.swapmode_script
(1) 3366/    6C1E : 0110                		dc.w	.script_4-.swapmode_script
(1) 3367/    6C20 :                     .script_1:
(1) 3368/    6C20 : 342E 0018           		move.w	cursor_SwapSrcId(a6),d2
(1) 3369/    6C24 : 282E 001C           		move.l	cursor_SwapSrcSpr(a6),d4
(1) 3370/    6C28 : 2A2E 0020           		move.l	cursor_SwapSrcSpr+4(a6),d5
(1) 3371/    6C2C : 6000 017E           		bra	.showblk_cursor
(1) 3372/    6C30 :                     .script_2:
(1) 3373/    6C30 : 2D6E 001C 0024      		move.l	cursor_SwapSrcSpr(a6),cursor_SwapSrcSprOld(a6)
(1) 3374/    6C36 : 2D6E 0020 0028      		move.l	cursor_SwapSrcSpr+4(a6),cursor_SwapSrcSprOld+4(a6)
(1) 3375/    6C3C : 2D6E 0034 003C      		move.l	cursor_SwapDstSpr(a6),cursor_SwapDstSprOld(a6)
(1) 3376/    6C42 : 2D6E 0038 0040      		move.l	cursor_SwapDstSpr+4(a6),cursor_SwapDstSprOld+4(a6)
(1) 3377/    6C48 :                     
(1) 3378/    6C48 : 3A3C 0002           		move.w	#2,d5				; ASR this much
(1) 3379/    6C4C : 282E 0034           		move.l	cursor_SwapDstSpr(a6),d4	; X SRC spd calc
(1) 3380/    6C50 : 98AE 001C           		sub.l	cursor_SwapSrcSpr(a6),d4
(1) 3381/    6C54 : EAA4                		asr.l	d5,d4
(1) 3382/    6C56 : 2D44 002C           		move.l	d4,cursor_SwapSrcSprSpd(a6)
(1) 3383/    6C5A : 282E 001C           		move.l	cursor_SwapSrcSpr(a6),d4
(1) 3384/    6C5E : 98AE 0034           		sub.l	cursor_SwapDstSpr(a6),d4
(1) 3385/    6C62 : EAA4                		asr.l	d5,d4
(1) 3386/    6C64 : 2D44 0044           		move.l	d4,cursor_SwapDstSprSpd(a6)
(1) 3387/    6C68 : 282E 0038           		move.l	cursor_SwapDstSpr+4(a6),d4	; Y SRC spd calc
(1) 3388/    6C6C : 98AE 0020           		sub.l	cursor_SwapSrcSpr+4(a6),d4
(1) 3389/    6C70 : EAA4                		asr.l	d5,d4
(1) 3390/    6C72 : 2D44 0030           		move.l	d4,cursor_SwapSrcSprSpd+4(a6)
(1) 3391/    6C76 : 282E 0020           		move.l	cursor_SwapSrcSpr+4(a6),d4
(1) 3392/    6C7A : 98AE 0038           		sub.l	cursor_SwapDstSpr+4(a6),d4
(1) 3393/    6C7E : EAA4                		asr.l	d5,d4
(1) 3394/    6C80 : 2D44 0048           		move.l	d4,cursor_SwapDstSprSpd+4(a6)		
(1) 3395/    6C84 : 066E 0001 004C      		add.w	#1,cursor_SwapMode(a6)
(1) 3396/    6C8A : 08EE 0006 0058      		bset	#bitCurSt_MidSwapLock,cursor_Status(a6)
(1) 3397/    6C90 : 08ED 0000 0024      		bset	#bitPlySt_MidSwapStop,box_Status(a5)
(1) 3398/    6C96 :                     
(1) 3399/    6C96 :                     .script_3:
(1) 3400/    6C96 : 342E 0018           		move.w	cursor_SwapSrcId(a6),d2
(1) 3401/    6C9A : 282E 001C           		move.l	cursor_SwapSrcSpr(a6),d4
(1) 3402/    6C9E : 2A2E 0020           		move.l	cursor_SwapSrcSpr+4(a6),d5
(1) 3403/    6CA2 : 6100 0108           		bsr	.showblk_cursor
(1) 3404/    6CA6 : 342E 001A           		move.w	cursor_SwapDstId(a6),d2
(1) 3405/    6CAA : 670E                		beq.s	.zerdest
(1) 3406/    6CAC : 3802                		move.w	d2,d4
(1) 3407/    6CAE :                     ; 		and.w	#BLKDEL_MIDSWAP,d4
(1) 3408/    6CAE :                     ; 		cmp.w	#BLKDEL_MIDSWAP,d4
(1) 3409/    6CAE :                     ; 		bge.s	.zerdest
(1) 3410/    6CAE : 282E 0034           		move.l	cursor_SwapDstSpr(a6),d4
(1) 3411/    6CB2 : 2A2E 0038           		move.l	cursor_SwapDstSpr+4(a6),d5
(1) 3412/    6CB6 : 6100 00F4           		bsr	.showblk_cursor
(1) 3413/    6CBA :                     .zerdest:
(1) 3414/    6CBA :                     
(1) 3415/    6CBA : 7200                		moveq	#0,d1
(1) 3416/    6CBC :                     	; SRC X/Y
(1) 3417/    6CBC : 242E 001C           		move.l	cursor_SwapSrcSpr(a6),d2
(1) 3418/    6CC0 : 2C2E 002C           		move.l	cursor_SwapSrcSprSpd(a6),d6
(1) 3419/    6CC4 : 282E 003C           		move.l	cursor_SwapDstSprOld(a6),d4
(1) 3420/    6CC8 : 2A2E 001C           		move.l	cursor_SwapSrcSpr(a6),d5
(1) 3421/    6CCC : 6100 00C6           		bsr	.animate_coord
(1) 3422/    6CD0 : 2D42 001C           		move.l	d2,cursor_SwapSrcSpr(a6)
(1) 3423/    6CD4 : 242E 0020           		move.l	cursor_SwapSrcSpr+4(a6),d2
(1) 3424/    6CD8 : 2C2E 0030           		move.l	cursor_SwapSrcSprSpd+4(a6),d6
(1) 3425/    6CDC : 282E 0040           		move.l	cursor_SwapDstSprOld+4(a6),d4
(1) 3426/    6CE0 : 2A2E 0020           		move.l	cursor_SwapSrcSpr+4(a6),d5
(1) 3427/    6CE4 : 6100 00AE           		bsr	.animate_coord
(1) 3428/    6CE8 : 2D42 0020           		move.l	d2,cursor_SwapSrcSpr+4(a6)
(1) 3429/    6CEC :                     	; DST X/Y
(1) 3430/    6CEC : 242E 0034           		move.l	cursor_SwapDstSpr(a6),d2
(1) 3431/    6CF0 : 2C2E 0044           		move.l	cursor_SwapDstSprSpd(a6),d6
(1) 3432/    6CF4 : 282E 0024           		move.l	cursor_SwapSrcSprOld(a6),d4
(1) 3433/    6CF8 : 2A2E 0034           		move.l	cursor_SwapDstSpr(a6),d5
(1) 3434/    6CFC : 6100 0096           		bsr	.animate_coord
(1) 3435/    6D00 : 2D42 0034           		move.l	d2,cursor_SwapDstSpr(a6)
(1) 3436/    6D04 : 242E 0038           		move.l	cursor_SwapDstSpr+4(a6),d2
(1) 3437/    6D08 : 2C2E 0048           		move.l	cursor_SwapDstSprSpd+4(a6),d6
(1) 3438/    6D0C : 282E 0028           		move.l	cursor_SwapSrcSprOld+4(a6),d4
(1) 3439/    6D10 : 2A2E 0038           		move.l	cursor_SwapDstSpr+4(a6),d5
(1) 3440/    6D14 : 617E                		bsr	.animate_coord
(1) 3441/    6D16 : 2D42 0038           		move.l	d2,cursor_SwapDstSpr+4(a6)
(1) 3442/    6D1A : B27C 0004           		cmp.w	#4,d1
(1) 3443/    6D1E : 6D06                		blt.s	.boxoff_blk2
(1) 3444/    6D20 : 066E 0001 004C      		add.w	#1,cursor_SwapMode(a6)
(1) 3445/    6D26 :                     .boxoff_blk2:
(1) 3446/    6D26 : 4E75                		rts
(1) 3447/    6D28 :                     		
(1) 3448/    6D28 :                     .script_4:
(1) 3449/    6D28 :                     
(1) 3450/    6D28 : 226D 000C           		movea.l	box_BlockData(a5),a1
(1) 3451/    6D2C : D2FC 0400           		adda	#MAX_BOXWIDTH*(MAX_BOXHEIGHT/2),a1
(1) 3452/    6D30 : 2449                		movea.l	a1,a2
(1) 3453/    6D32 : 382E 0008           		move.w	cursor_SwapSrcPos(a6),d4
(1) 3454/    6D36 : D844                		add.w	d4,d4
(1) 3455/    6D38 : 3A2E 000A           		move.w	cursor_SwapSrcPos+2(a6),d5
(1) 3456/    6D3C : EB4D                		lsl.w	#5,d5
(1) 3457/    6D3E : D845                		add.w	d5,d4
(1) 3458/    6D40 : D2C4                		adda	d4,a1
(1) 3459/    6D42 : 382E 000C           		move.w	cursor_SwapDstPos(a6),d4
(1) 3460/    6D46 : D844                		add.w	d4,d4
(1) 3461/    6D48 : 3A2E 000E           		move.w	cursor_SwapDstPos+2(a6),d5
(1) 3462/    6D4C : EB4D                		lsl.w	#5,d5
(1) 3463/    6D4E : D845                		add.w	d5,d4
(1) 3464/    6D50 : D4C4                		adda	d4,a2
(1) 3465/    6D52 :                     	; a1 - src
(1) 3466/    6D52 :                     	; a2 - dest 
(1) 3467/    6D52 : 3011                		move.w	(a1),d0
(1) 3468/    6D54 : 3212                		move.w	(a2),d1
(1) 3469/    6D56 :                     ; 		move.w	d1,d4
(1) 3470/    6D56 :                     ; 		and.w	#$7F00,d4
(1) 3471/    6D56 :                     ; 		cmp.w	#BLKDEL_MIDSWAP,d4
(1) 3472/    6D56 :                     ; 		blt.s	.dstismtch
(1) 3473/    6D56 :                     ; 		clr.w	d1
(1) 3474/    6D56 :                     ; 		sub.w	#1,box_NumMtchBlk(a5)
(1) 3475/    6D56 :                     ; 		bpl.s	.dstismtch
(1) 3476/    6D56 :                     ; 		bra.s	*				; TODO: SI LLEGO AQUI algo esta mal
(1) 3477/    6D56 :                     ; 		clr.w	box_NumMtchBlk(a5)
(1) 3478/    6D56 :                     ; .dstismtch:
(1) 3479/    6D56 : C07C 001F           		and.w	#$1F,d0
(1) 3480/    6D5A : C27C 001F           		and.w	#$1F,d1
(1) 3481/    6D5E :                     ; 		bset	#bitBlkFlg_Fall,d1
(1) 3482/    6D5E :                     ; 		bset	#bitBlkFlg_Fall,d0
(1) 3483/    6D5E : 807C 8000           		or.w	#blkflg_Draw,d0
(1) 3484/    6D62 : 827C 8000           		or.w	#blkflg_Draw,d1
(1) 3485/    6D66 : 3480                		move.w	d0,(a2)
(1) 3486/    6D68 : 3281                		move.w	d1,(a1)
(1) 3487/    6D6A : 3D7C 0000 0018      		move.w	#0,cursor_SwapSrcId(a6)
(1) 3488/    6D70 : 3D7C 0000 001A      		move.w	#0,cursor_SwapDstId(a6)
(1) 3489/    6D76 : 08ED 0005 0024      		bset	#bitPlySt_DrwAll,box_Status(a5)
(1) 3490/    6D7C : 08ED 0003 0024      		bset	#bitPlySt_ChkMatch,box_Status(a5)
(1) 3491/    6D82 : 08AD 0000 0024      		bclr	#bitPlySt_MidSwapStop,box_Status(a5)
(1) 3492/    6D88 : 08AE 0006 0058      		bclr	#bitCurSt_MidSwapLock,cursor_Status(a6)
(1) 3493/    6D8E : 426E 004C           		clr.w	cursor_SwapMode(a6)
(1) 3494/    6D92 : 4E75                		rts
(1) 3495/    6D94 :                     
(1) 3496/    6D94 :                     ; ------------------------------------------------
(1) 3497/    6D94 :                     ; Animate points
(1) 3498/    6D94 :                     ; d1 - fini
(1) 3499/    6D94 :                     ; d2 - base
(1) 3500/    6D94 :                     ; d4 - X or Y start
(1) 3501/    6D94 :                     ; d5 - X or Y target
(1) 3502/    6D94 :                     ; d6 - X or Y speed
(1) 3503/    6D94 :                     ; ------------------------------------------------
(1) 3504/    6D94 :                     
(1) 3505/    6D94 :                     .animate_coord:
(1) 3506/    6D94 : 4A86                		tst.l	d6
(1) 3507/    6D96 : 6B06                		bmi.s	.srcxmvleft
(1) 3508/    6D98 : BA84                		cmp.l	d4,d5
(1) 3509/    6D9A : 6C0A                		bge.s	.srcxlowr
(1) 3510/    6D9C : 6004                		bra.s	.setxsrcspd
(1) 3511/    6D9E :                     .srcxmvleft:
(1) 3512/    6D9E : BA84                		cmp.l	d4,d5
(1) 3513/    6DA0 : 6F04                		ble.s	.srcxlowr	
(1) 3514/    6DA2 :                     .setxsrcspd:
(1) 3515/    6DA2 : D486                		add.l	d6,d2
(1) 3516/    6DA4 : 4E75                		rts
(1) 3517/    6DA6 :                     .srcxlowr:
(1) 3518/    6DA6 : D27C 0001           		add.w	#1,d1
(1) 3519/    6DAA : 4E75                		rts
(1) 3520/    6DAC :                     
(1) 3521/    6DAC :                     ; d2 - ID
(1) 3522/    6DAC :                     ; d4 - Xpos.0000
(1) 3523/    6DAC :                     ; d5 - Ypos.0000
(1) 3524/    6DAC :                     .showblk_cursor:
(1) 3525/    6DAC : 45FA 0562           		lea	vramList_MainBlocks(pc),a2
(1) 3526/    6DB0 : C47C 001F           		and.w	#$1F,d2
(1) 3527/    6DB4 : 947C 0001           		sub.w	#1,d2
(1) 3528/    6DB8 : E74A                		lsl.w	#3,d2
(1) 3529/    6DBA : 3432 2000           		move.w	(a2,d2.w),d2
(1) 3530/    6DBE : D47C A2A0           		add.w	#VRAMSET_BLOCKS+$2000|$8000,d2
(1) 3531/    6DC2 : 303C 007C           		move.w	#$80-4,d0
(1) 3532/    6DC6 : 323C 007C           		move.w	#$80-4,d1
(1) 3533/    6DCA : 4844                		swap	d4
(1) 3534/    6DCC : 4845                		swap	d5
(1) 3535/    6DCE : D244                		add.w	d4,d1
(1) 3536/    6DD0 : D045                		add.w	d5,d0
(1) 3537/    6DD2 : 3A2D 0010           		move.w	box_YScrl(a5),d5
(1) 3538/    6DD6 : CA7C 000F           		and.w	#$F,d5
(1) 3539/    6DDA : 9045                		sub.w	d5,d0
(1) 3540/    6DDC :                     
(1) 3541/    6DDC : 383C 0500           		move.w	#$0500,d4
(1) 3542/    6DE0 : 0838 0002 A888      		btst	#2,(RAM_VdpCache+$C).w
(1) 3543/    6DE6 : 6716                		beq.s	.nodble
(1) 3544/    6DE8 : 3802                		move.w	d2,d4
(1) 3545/    6DEA : C47C F800           		and.w	#$F800,d2
(1) 3546/    6DEE : E24C                		lsr.w	#1,d4
(1) 3547/    6DF0 : C87C 07FF           		and.w	#$7FF,d4
(1) 3548/    6DF4 : D444                		add.w	d4,d2
(1) 3549/    6DF6 : D07C 0080           		add.w	#$80,d0
(1) 3550/    6DFA : 383C 0400           		move.w	#$0400,d4
(1) 3551/    6DFE :                     .nodble:
(1) 3552/    6DFE : 8843                		or.w	d3,d4
(1) 3553/    6E00 :                     	; TODO: sprite oob check
(1) 3554/    6E00 : 38C0                		move.w	d0,(a4)+
(1) 3555/    6E02 : 38C4                		move.w	d4,(a4)+
(1) 3556/    6E04 : 38C2                		move.w	d2,(a4)+
(1) 3557/    6E06 : 38C1                		move.w	d1,(a4)+
(1) 3558/    6E08 : D67C 0001           		add.w	#1,d3
(1) 3559/    6E0C : 4E75                		rts
(1) 3560/    6E0E :                     
(1) 3561/    6E0E :                     ; d0 - Y pos
(1) 3562/    6E0E :                     ; d1 - X pos
(1) 3563/    6E0E :                     ; d2 - VRAM top
(1) 3564/    6E0E :                     ; d3 - Current LINK
(1) 3565/    6E0E :                     .sprcursor_list:
(1) 3566/    6E0E : 0008                		dc.w .cursor0-.sprcursor_list
(1) 3567/    6E10 : 004E                		dc.w .cursor1-.sprcursor_list
(1) 3568/    6E12 : 0092                		dc.w .cursor2-.sprcursor_list
(1) 3569/    6E14 : 00D2                		dc.w .cursor3-.sprcursor_list
(1) 3570/    6E16 :                     		
(1) 3571/    6E16 :                     ; 3 block cursor
(1) 3572/    6E16 :                     .cursor0:
(1) 3573/    6E16 : 343C A200           		move.w	#VRAMSET_CURSOR|$8000+$2000,d2
(1) 3574/    6E1A : 4A78 8DAA           		tst.w	(RAM_PGame_CursorFrame).w
(1) 3575/    6E1E : 670E                		beq.s	.cursor0_1
(1) 3576/    6E20 : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1) 3577/    6E28 : 6604                		bne.s	.cursor0_1
(1) 3578/    6E2A : D47C 0020           		add.w	#$20,d2
(1) 3579/    6E2E :                     .cursor0_1:
(1) 3580/    6E2E : 3C3C 0F00           		move.w	#$0F00,d6
(1) 3581/    6E32 : 3803                		move.w	d3,d4
(1) 3582/    6E34 : 8846                		or.w	d6,d4
(1) 3583/    6E36 : 38C0                		move.w	d0,(a4)+
(1) 3584/    6E38 : 38C4                		move.w	d4,(a4)+
(1) 3585/    6E3A : 38C2                		move.w	d2,(a4)+
(1) 3586/    6E3C : 38C1                		move.w	d1,(a4)+
(1) 3587/    6E3E : D27C 0020           		add.w	#$20,d1
(1) 3588/    6E42 : D87C 0001           		add.w	#1,d4
(1) 3589/    6E46 : D47C 0010           		add.w	#$10,d2
(1) 3590/    6E4A : 38C0                		move.w	d0,(a4)+
(1) 3591/    6E4C : 38C4                		move.w	d4,(a4)+
(1) 3592/    6E4E : 38C2                		move.w	d2,(a4)+
(1) 3593/    6E50 : 38C1                		move.w	d1,(a4)+
(1) 3594/    6E52 : D47C 0010           		add.w	#$10,d2
(1) 3595/    6E56 : D67C 0002           		add.w	#2,d3
(1) 3596/    6E5A : 4E75                		rts
(1) 3597/    6E5C :                     
(1) 3598/    6E5C :                     ; 6 block cursor
(1) 3599/    6E5C :                     .cursor1:
(1) 3600/    6E5C : 343C A240           		move.w	#VRAMSET_CURSOR+$40|$8000+$2000,d2
(1) 3601/    6E60 : 4A78 8DAA           		tst.w	(RAM_PGame_CursorFrame).w
(1) 3602/    6E64 : 6704                		beq.s	.frame0_6
(1) 3603/    6E66 : D47C 0030           		add.w	#$30,d2
(1) 3604/    6E6A :                     .frame0_6:
(1) 3605/    6E6A : 61C2                		bsr.s	.cursor0_1
(1) 3606/    6E6C : D07C 0020           		add.w	#$20,d0
(1) 3607/    6E70 : 927C 0020           		sub.w	#$20,d1
(1) 3608/    6E74 : 3803                		move.w	d3,d4
(1) 3609/    6E76 : D87C 0D00           		add.w	#$0D00,d4
(1) 3610/    6E7A : 38C0                		move.w	d0,(a4)+
(1) 3611/    6E7C : 38C4                		move.w	d4,(a4)+
(1) 3612/    6E7E : 38C2                		move.w	d2,(a4)+
(1) 3613/    6E80 : 38C1                		move.w	d1,(a4)+
(1) 3614/    6E82 : D47C 0008           		add.w	#8,d2
(1) 3615/    6E86 : D27C 0020           		add.w	#$20,d1
(1) 3616/    6E8A : D87C 0001           		add.w	#1,d4
(1) 3617/    6E8E : 38C0                		move.w	d0,(a4)+
(1) 3618/    6E90 : 38C4                		move.w	d4,(a4)+
(1) 3619/    6E92 : 38C2                		move.w	d2,(a4)+
(1) 3620/    6E94 : 38C1                		move.w	d1,(a4)+
(1) 3621/    6E96 : D67C 0002           		add.w	#2,d3
(1) 3622/    6E9A : D47C 0008           		add.w	#8,d2
(1) 3623/    6E9E : 4E75                		rts
(1) 3624/    6EA0 :                     
(1) 3625/    6EA0 :                     ; 3 block cursor, double res
(1) 3626/    6EA0 :                     .cursor2:
(1) 3627/    6EA0 : 343C A100           		move.w	#(VRAMSET_CURSOR/2)|$8000+$2000,d2
(1) 3628/    6EA4 : 4A78 8DAA           		tst.w	(RAM_PGame_CursorFrame).w
(1) 3629/    6EA8 : 6704                		beq.s	.cursor2_1
(1) 3630/    6EAA : D47C 0010           		add.w	#$10,d2
(1) 3631/    6EAE :                     .cursor2_1:
(1) 3632/    6EAE : D07C 0080           		add.w	#$80,d0
(1) 3633/    6EB2 : 3C3C 0D00           		move.w	#$0D00,d6
(1) 3634/    6EB6 : 3803                		move.w	d3,d4
(1) 3635/    6EB8 : 8846                		or.w	d6,d4		
(1) 3636/    6EBA : 38C0                		move.w	d0,(a4)+
(1) 3637/    6EBC : 38C4                		move.w	d4,(a4)+
(1) 3638/    6EBE : 38C2                		move.w	d2,(a4)+
(1) 3639/    6EC0 : 38C1                		move.w	d1,(a4)+
(1) 3640/    6EC2 : D27C 0020           		add.w	#$20,d1
(1) 3641/    6EC6 : D87C 0001           		add.w	#1,d4
(1) 3642/    6ECA : D47C 0008           		add.w	#8,d2
(1) 3643/    6ECE : 38C0                		move.w	d0,(a4)+
(1) 3644/    6ED0 : 38C4                		move.w	d4,(a4)+
(1) 3645/    6ED2 : 38C2                		move.w	d2,(a4)+
(1) 3646/    6ED4 : 38C1                		move.w	d1,(a4)+
(1) 3647/    6ED6 : D67C 0002           		add.w	#2,d3
(1) 3648/    6EDA : D47C 0008           		add.w	#8,d2
(1) 3649/    6EDE : 4E75                		rts
(1) 3650/    6EE0 :                     		
(1) 3651/    6EE0 :                     ; 6 block cursor, double res
(1) 3652/    6EE0 :                     .cursor3:
(1) 3653/    6EE0 : 343C A120           		move.w	#((VRAMSET_CURSOR+$40)/2)|$8000+$2000,d2
(1) 3654/    6EE4 : 4A78 8DAA           		tst.w	(RAM_PGame_CursorFrame).w
(1) 3655/    6EE8 : 6704                		beq.s	.frame0_6db
(1) 3656/    6EEA : D47C 0018           		add.w	#$18,d2
(1) 3657/    6EEE :                     .frame0_6db:
(1) 3658/    6EEE : 61BE                		bsr.s	.cursor2_1
(1) 3659/    6EF0 : 927C 0020           		sub.w	#$20,d1
(1) 3660/    6EF4 : D07C 0020           		add.w	#$20,d0
(1) 3661/    6EF8 :                     ; 		add.w	#4,d2
(1) 3662/    6EF8 : 3C3C 0C00           		move.w	#$0C00,d6
(1) 3663/    6EFC : 3803                		move.w	d3,d4
(1) 3664/    6EFE : 8846                		or.w	d6,d4
(1) 3665/    6F00 : 38C0                		move.w	d0,(a4)+
(1) 3666/    6F02 : 38C4                		move.w	d4,(a4)+
(1) 3667/    6F04 : 38C2                		move.w	d2,(a4)+
(1) 3668/    6F06 : 38C1                		move.w	d1,(a4)+
(1) 3669/    6F08 : D27C 0020           		add.w	#$20,d1
(1) 3670/    6F0C : D87C 0001           		add.w	#1,d4
(1) 3671/    6F10 : D47C 0004           		add.w	#4,d2
(1) 3672/    6F14 : 38C0                		move.w	d0,(a4)+
(1) 3673/    6F16 : 38C4                		move.w	d4,(a4)+
(1) 3674/    6F18 : 38C2                		move.w	d2,(a4)+
(1) 3675/    6F1A : 38C1                		move.w	d1,(a4)+
(1) 3676/    6F1C : D67C 0002           		add.w	#2,d3
(1) 3677/    6F20 : 4E75                		rts
(1) 3678/    6F22 :                     
(1) 3679/    6F22 :                     ; --------------------------------------------------------
(1) 3680/    6F22 :                     ; Guess next block ID
(1) 3681/    6F22 :                     ; --------------------------------------------------------
(1) 3682/    6F22 :                     
(1) 3683/    6F22 :                     ; d4 - current SEED
(1) 3684/    6F22 :                     ; 
(1) 3685/    6F22 :                     ; d0 - Result
(1) 3686/    6F22 :                     ; 
(1) 3687/    6F22 :                     ; Uses:
(1) 3688/    6F22 :                     ; d3,d4
(1) 3689/    6F22 :                     
(1) 3690/    6F22 :                     box_GuessBlk:
(1) 3691/    6F22 : 2604                		move.l	d4,d3
(1) 3692/    6F24 : E89C                		ror.l	#4,d4
(1) 3693/    6F26 : EB9B                		rol.l	#5,d3
(1) 3694/    6F28 : D883                		add.l	d3,d4
(1) 3695/    6F2A : 4844                		swap	d4
(1) 3696/    6F2C : E65C                		ror.w	#3,d4
(1) 3697/    6F2E : 4844                		swap	d4
(1) 3698/    6F30 : 3004                		move.w	d4,d0
(1) 3699/    6F32 : C07C 000F           		and.w	#%1111,d0
(1) 3700/    6F36 : D07C 0001           		add.w	#1,d0
(1) 3701/    6F3A : 4E75                		rts
(1) 3702/    6F3C :                     
(1) 3703/    6F3C :                     ; --------------------------------------
(1) 3704/    6F3C :                     ; Check FULL line
(1) 3705/    6F3C :                     ; 
(1) 3706/    6F3C :                     ; Input:
(1) 3707/    6F3C :                     ; a6 - box buffer (width)
(1) 3708/    6F3C :                     ; a5 - box block data
(1) 3709/    6F3C :                     
(1) 3710/    6F3C :                     ; Output:
(1) 3711/    6F3C :                     ; d3 - $00 free | $01 full
(1) 3712/    6F3C :                     ; 
(1) 3713/    6F3C :                     ; Uses:
(1) 3714/    6F3C :                     ; d5-d6
(1) 3715/    6F3C :                     ; --------------------------------------
(1) 3716/    6F3C :                     
(1) 3717/    6F3C :                     box_CheckLine:
(1) 3718/    6F3C : 3C2E 002A           		move.w	box_Width(a6),d6
(1) 3719/    6F40 : 9C7C 0001           		sub.w	#1,d6
(1) 3720/    6F44 : 7600                		moveq	#0,d3
(1) 3721/    6F46 :                     .chk_top:
(1) 3722/    6F46 : 3A15                		move.w	(a5),d5
(1) 3723/    6F48 : 4A05                		tst.b	d5
(1) 3724/    6F4A : 6704                		beq.s	.no_blk
(1) 3725/    6F4C : D67C 0001           		add.w	#1,d3
(1) 3726/    6F50 :                     .no_blk:
(1) 3727/    6F50 : DAFC 0002           		adda	#2,a5
(1) 3728/    6F54 : 51CE FFF0           		dbf	d6,.chk_top
(1) 3729/    6F58 : 4E75                		rts
(1) 3730/    6F5A :                     
(1) 3731/    6F5A :                     ; --------------------------------------
(1) 3732/    6F5A :                     ; box_SendTrash
(1) 3733/    6F5A :                     ; 
(1) 3734/    6F5A :                     ; a6 - current Box
(1) 3735/    6F5A :                     ; d0 - X start
(1) 3736/    6F5A :                     ; d1 - X end (MAX: boxwidth-1)
(1) 3737/    6F5A :                     ; d2 - Height
(1) 3738/    6F5A :                     ; 
(1) 3739/    6F5A :                     ; Uses:
(1) 3740/    6F5A :                     ; d4-d6
(1) 3741/    6F5A :                     ; --------------------------------------
(1) 3742/    6F5A :                     
(1) 3743/    6F5A :                     box_SendTrash:
(1) 3744/    6F5A :                     	; TODO: more checks
(1) 3745/    6F5A : 2656                		movea.l	box_BlockTrsh(a6),a3
(1) 3746/    6F5C : 266B 000C           		movea.l	box_BlockData(a3),a3
(1) 3747/    6F60 : D6FC 03E0           		adda	#MAX_BOXWIDTH*((MAX_BOXHEIGHT/2)-1),a3
(1) 3748/    6F64 : 244B                		move.l	a3,a2
(1) 3749/    6F66 : 3800                		move.w	d0,d4		; Set TL
(1) 3750/    6F68 : D844                		add.w	d4,d4
(1) 3751/    6F6A : D6C4                		adda	d4,a3
(1) 3752/    6F6C : 3801                		move.w	d1,d4		; Set TR
(1) 3753/    6F6E : D844                		add.w	d4,d4
(1) 3754/    6F70 : D4C4                		adda	d4,a2
(1) 3755/    6F72 : 3C3C 001F           		move.w	#(MAX_BOXHEIGHT/2)-1,d6
(1) 3756/    6F76 :                     .find_free:
(1) 3757/    6F76 : 3A13                		move.w	(a3),d5
(1) 3758/    6F78 : 8A52                		or.w	(a2),d5
(1) 3759/    6F7A : CA7C 7FFF           		and.w	#$7FFF,d5
(1) 3760/    6F7E : 670E                		beq.s	.use_this
(1) 3761/    6F80 : 96FC 0020           		suba	#MAX_BOXWIDTH,a3
(1) 3762/    6F84 : 94FC 0020           		suba	#MAX_BOXWIDTH,a2
(1) 3763/    6F88 : 51CE FFEC           		dbf	d6,.find_free
(1) 3764/    6F8C : 4E75                		rts
(1) 3765/    6F8E :                     .use_this:
(1) 3766/    6F8E : 2A3C 0051 004D      		move.l	#((SET_STRTTRSHIDS+4)<<16)+SET_STRTTRSHIDS|$00400040,d5
(1) 3767/    6F94 :                     ; 		move.l	#((SET_STRTTRSHIDS+4)<<16)+SET_STRTTRSHIDS,d5
(1) 3768/    6F94 : 4A42                		tst.w	d2
(1) 3769/    6F96 : 6736                		beq.s	.trsh_mkline
(1) 3770/    6F98 : 3806                		move.w	d6,d4
(1) 3771/    6F9A : 9842                		sub.w	d2,d4
(1) 3772/    6F9C : 6B2E                		bmi.s	.trsh_exit
(1) 3773/    6F9E : DABC 0001 0001      		add.l	#$00010001,d5
(1) 3774/    6FA4 : 6128                		bsr	.trsh_mkline
(1) 3775/    6FA6 : B47C 0001           		cmp.w	#1,d2
(1) 3776/    6FAA : 6718                		beq.s	.trsh_mktop
(1) 3777/    6FAC : DABC 0002 0002      		add.l	#$00020002,d5
(1) 3778/    6FB2 : 3C02                		move.w	d2,d6
(1) 3779/    6FB4 : 9C7C 0002           		sub.w	#2,d6
(1) 3780/    6FB8 :                     .trsh_midlp:
(1) 3781/    6FB8 : 6114                		bsr	.trsh_mkline
(1) 3782/    6FBA : 51CE FFFC           		dbf	d6,.trsh_midlp
(1) 3783/    6FBE : 9ABC 0002 0002      		sub.l	#$00020002,d5
(1) 3784/    6FC4 :                     .trsh_mktop:
(1) 3785/    6FC4 : DABC 0001 0001      		add.l	#$00010001,d5
(1) 3786/    6FCA : 6102                		bsr	.trsh_mkline
(1) 3787/    6FCC :                     .trsh_exit:
(1) 3788/    6FCC : 4E75                		rts
(1) 3789/    6FCE :                     
(1) 3790/    6FCE :                     ; d5 - TL | TR
(1) 3791/    6FCE :                     .trsh_mkline:
(1) 3792/    6FCE : 4846                		swap	d6
(1) 3793/    6FD0 : 224B                		move.l	a3,a1
(1) 3794/    6FD2 : 3805                		move.w	d5,d4
(1) 3795/    6FD4 : D87C 0008           		add.w	#8,d4
(1) 3796/    6FD8 : 32C5                		move.w	d5,(a1)+
(1) 3797/    6FDA : 4845                		swap	d5
(1) 3798/    6FDC : 3E01                		move.w	d1,d7
(1) 3799/    6FDE : 9E40                		sub.w	d0,d7
(1) 3800/    6FE0 : 9E7C 0002           		sub.w	#2,d7
(1) 3801/    6FE4 : 6B06                		bmi.s	.wdthzero
(1) 3802/    6FE6 :                     ; 		sub.w	#1,d7
(1) 3803/    6FE6 :                     .wdthadd:
(1) 3804/    6FE6 : 32C4                		move.w	d4,(a1)+
(1) 3805/    6FE8 : 51CF FFFC           		dbf	d7,.wdthadd
(1) 3806/    6FEC :                     .wdthzero:
(1) 3807/    6FEC : 32C5                		move.w	d5,(a1)+
(1) 3808/    6FEE : 4845                		swap	d5
(1) 3809/    6FF0 : 4846                		swap	d6
(1) 3810/    6FF2 : 96FC 0020           		suba	#MAX_BOXWIDTH,a3
(1) 3811/    6FF6 : 4E75                		rts
(1) 3812/    6FF8 :                     
(1) 3813/    6FF8 :                     ; --------------------------------------------------------
(1) 3814/    6FF8 :                     ; Add points to the SCORE (WARNING: not stable)
(1) 3815/    6FF8 :                     ; 
(1) 3816/    6FF8 :                     ; d0 - input
(1) 3817/    6FF8 :                     ; d1 - increment by
(1) 3818/    6FF8 :                     ; --------------------------------------------------------
(1) 3819/    6FF8 :                     
(1) 3820/    6FF8 :                     PzlGame_BcdScore_Add:
(1) 3821/    6FF8 : C101                		abcd	d1,d0
(1) 3822/    6FFA : E098                		ror.l	#8,d0
(1) 3823/    6FFC : E099                		ror.l	#8,d1
(1) 3824/    6FFE :                     		
(1) 3825/    6FFE : C101                		abcd	d1,d0
(1) 3826/    7000 : E098                		ror.l	#8,d0
(1) 3827/    7002 : E099                		ror.l	#8,d1
(1) 3828/    7004 :                     		
(1) 3829/    7004 : C101                		abcd	d1,d0
(1) 3830/    7006 : E098                		ror.l	#8,d0
(1) 3831/    7008 : E099                		ror.l	#8,d1
(1) 3832/    700A :                     		
(1) 3833/    700A : C101                		abcd	d1,d0
(1) 3834/    700C : E098                		ror.l	#8,d0
(1) 3835/    700E : E099                		ror.l	#8,d1
(1) 3836/    7010 :                     
(1) 3837/    7010 :                     
(1) 3838/    7010 :                     ;  		bcc.s	.digt1
(1) 3839/    7010 :                     ;  		bra.s	*
(1) 3840/    7010 :                     ;  		ror.l	#8,d0
(1) 3841/    7010 :                     ; 		ror.l	#8,d1
(1) 3842/    7010 :                     ; 		move.w	d1,d4
(1) 3843/    7010 :                     ; 		and.w	#$FF,d4
(1) 3844/    7010 :                     ; 		abcd	d4,d0
(1) 3845/    7010 :                     ;  		bcc.s	.nel4
(1) 3846/    7010 :                     ;  		move.l	#$999999,d0
(1) 3847/    7010 :                     ;  		bra.s	.nel2
(1) 3848/    7010 :                     ; .nel4:
(1) 3849/    7010 :                     ;  		rol.l	#8,d0
(1) 3850/    7010 :                     ; .digt1:
(1) 3851/    7010 :                     ;  		rol.l	#8,d0
(1) 3852/    7010 :                     .digt0:
(1) 3853/    7010 : 4E75                		rts
(1) 3854/    7012 :                     
(1) 3855/    7012 :                     ; --------------------------------------------------------
(1) 3856/    7012 :                     ; Increment or Decrement timer (BCD)
(1) 3857/    7012 :                     ; 
(1) 3858/    7012 :                     ; d4 - Timer value (LONG)
(1) 3859/    7012 :                     ; --------------------------------------------------------
(1) 3860/    7012 :                     
(1) 3861/    7012 :                     PzlGame_BcdTimer_Up:
(1) 3862/    7012 : 0838 0006 86E0      		btst	#bitMtch_MatchOver,(RAM_Glbl_GameMtchFlags).w
(1) 3863/    7018 : 6600 0098           		bne	.time_done
(1) 3864/    701C : 4A78 8DB2           		tst.w	(RAM_PGame_PlyrsOn).w
(1) 3865/    7020 : 6700 0090           		beq	.time_done
(1) 3866/    7024 : 0838 0007 86E0      		btst	#bitMtch_Pause,(RAM_Glbl_GameMtchFlags).w
(1) 3867/    702A : 6600 0086           		bne	.time_done
(1) 3868/    702E :                     
(1) 3869/    702E : 0838 0000 86E0      		btst	#bitMtch_TimerDown,(RAM_Glbl_GameMtchFlags).w
(1) 3870/    7034 : 673E                		beq.s	.timer_up
(1) 3871/    7036 :                     .timer_down:
(1) 3872/    7036 : 2838 8B6C           		move.l	(RAM_PGame_GlblTimer),d4
(1) 3873/    703A : 6776                		beq.s	.time_done
(1) 3874/    703C : 7A01                		moveq	#1,d5
(1) 3875/    703E : 8905                 		sbcd	d5,d4
(1) 3876/    7040 : 641E                		bcc.s	.nel2d
(1) 3877/    7042 : 7A00                		moveq	#0,d5
(1) 3878/    7044 : 183C 0059           		move.b	#$59,d4
(1) 3879/    7048 : E09C                		ror.l	#8,d4
(1) 3880/    704A : 8905                 		sbcd	d5,d4
(1) 3881/    704C : 6410                 		bcc.s	.nel3d
(1) 3882/    704E : 183C 0059           		move.b	#$59,d4
(1) 3883/    7052 : E09C                 		ror.l	#8,d4		
(1) 3884/    7054 : 8905                 		sbcd	d5,d4
(1) 3885/    7056 : 6604                 		bne.s	.nel4d
(1) 3886/    7058 : 4284                 		clr.l	d4
(1) 3887/    705A : 6004                 		bra.s	.nel2d
(1) 3888/    705C :                     .nel4d:
(1) 3889/    705C : E19C                 		rol.l	#8,d4
(1) 3890/    705E :                     .nel3d:
(1) 3891/    705E : E19C                 		rol.l	#8,d4
(1) 3892/    7060 :                     .nel2d:
(1) 3893/    7060 : 21C4 8B6C           		move.l	d4,(RAM_PGame_GlblTimer)
(1) 3894/    7064 : C8BC 00FF FF00      		and.l	#$00FFFF00,d4
(1) 3895/    706A : 6606                		bne.s	.timer_actv
(1) 3896/    706C : 08F8 0005 86E0      		bset	#bitMtch_Timeout,(RAM_Glbl_GameMtchFlags).w
(1) 3897/    7072 :                     .timer_actv:
(1) 3898/    7072 : 4E75                		rts
(1) 3899/    7074 :                     
(1) 3900/    7074 :                     .timer_up:
(1) 3901/    7074 : 2838 8B6C           		move.l	(RAM_PGame_GlblTimer),d4
(1) 3902/    7078 : B8BC 0099 9900       		cmp.l	#$999900,d4
(1) 3903/    707E : 672E                 		beq.s	.nel2t
(1) 3904/    7080 : 7A01                		moveq	#1,d5
(1) 3905/    7082 : C905                 		abcd	d5,d4
(1) 3906/    7084 : B83C 0060           		cmp.b	#$60,d4
(1) 3907/    7088 : 6D24                		blt.s	.nel2t
(1) 3908/    708A : 4204                		clr.b	d4
(1) 3909/    708C : E09C                		ror.l	#8,d4
(1) 3910/    708E : C905                 		abcd	d5,d4
(1) 3911/    7090 : B83C 0060           		cmp.b	#$60,d4
(1) 3912/    7094 : 6D16                 		blt.s	.nel3t
(1) 3913/    7096 : 4204                		clr.b	d4
(1) 3914/    7098 : E09C                 		ror.l	#8,d4		
(1) 3915/    709A : C905                 		abcd	d5,d4
(1) 3916/    709C : B83C 0060           		cmp.b	#$60,d4
(1) 3917/    70A0 : 6D08                 		blt.s	.nel4t
(1) 3918/    70A2 : 283C 0099 9900       		move.l	#$999900,d4
(1) 3919/    70A8 : 6004                 		bra.s	.nel2t
(1) 3920/    70AA :                     .nel4t:
(1) 3921/    70AA : E19C                 		rol.l	#8,d4
(1) 3922/    70AC :                     .nel3t:
(1) 3923/    70AC : E19C                 		rol.l	#8,d4
(1) 3924/    70AE :                     .nel2t:
(1) 3925/    70AE : 21C4 8B6C           		move.l	d4,(RAM_PGame_GlblTimer)
(1) 3926/    70B2 :                     .time_done:
(1) 3927/    70B2 : 4E75                		rts
(1) 3928/    70B4 :                     
(1) 3929/    70B4 :                     ; --------------------------------------------------------
(1) 3930/    70B4 :                     ; Animate backgrounds
(1) 3931/    70B4 :                     ; 
(1) 3932/    70B4 :                     ; d3 - Current LINK
(1) 3933/    70B4 :                     ; --------------------------------------------------------
(1) 3934/    70B4 :                     
(1) 3935/    70B4 :                     PzlGame_AnimateBg_Init:
(1) 3936/    70B4 : 4BF8 8000           		lea	(RAM_HorScroll),a5
(1) 3937/    70B8 : 3E3C 00DF           		move.w	#224-1,d7
(1) 3938/    70BC : 7800                		moveq	#0,d4
(1) 3939/    70BE :                     .hnext:
(1) 3940/    70BE : 3004                		move.w	d4,d0
(1) 3941/    70C0 : 6100 BC30           		bsr	System_SineWave
(1) 3942/    70C4 : D87C 0002           		add.w	#2,d4
(1) 3943/    70C8 : EC80                		asr.l	#6,d0
(1) 3944/    70CA : 3B40 0002           		move.w	d0,2(a5)
(1) 3945/    70CE : DAFC 0004           		adda	#4,a5
(1) 3946/    70D2 : 51CF FFEA           		dbf	d7,.hnext
(1) 3947/    70D6 : 4E75                		rts
(1) 3948/    70D8 :                     
(1) 3949/    70D8 :                     PzlGame_AnimateBg:
(1) 3950/    70D8 : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1) 3951/    70E0 : 6600 00BA           		bne	.cant_deform
(1) 3952/    70E4 :                     
(1) 3953/    70E4 : 4DF8 8B18           		lea	(RAM_PGame_YAnimBuff),a6
(1) 3954/    70E8 : 4BF8 86F0           		lea	(RAM_PGame_YScrl_Main),a5
(1) 3955/    70EC : 49F8 8744           		lea	(RAM_PGame_YScrl_Sub),a4
(1) 3956/    70F0 : 47FA 00AC           		lea	.animate_incrmt(pc),a3
(1) 3957/    70F4 : 3E3C 0004           		move.w	#((336/16)/4)-1,d7
(1) 3958/    70F8 :                     .next:
(1) 3959/    70F8 :                     	rept 4
(1) 3960/    70F8 :                     		move.l	(a6),d6
(1) 3961/    70F8 :                     		move.l	(a3)+,d5
(1) 3962/    70F8 :                     		btst	#2,(RAM_VdpCache+$C).l
(1) 3963/    70F8 :                     		beq.s	.nodble
(1) 3964/    70F8 :                     		add.l	d5,d5
(1) 3965/    70F8 :                     .nodble:
(1) 3966/    70F8 :                     		add.l	d5,d6
(1) 3967/    70F8 :                     		swap	d6
(1) 3968/    70F8 :                     		move.w	d6,2(a5)
(1) 3969/    70F8 :                     		move.w	d6,2(a4)
(1) 3970/    70F8 :                     		swap	d6
(1) 3971/    70F8 :                     		move.l	d6,(a6)+
(1) 3972/    70F8 :                     		adda	#4,a5
(1) 3973/    70F8 :                     		adda	#4,a4
(1) 3974/    70F8 :                     	endm	
(1) 3960/    70F8 : 2C16                		move.l	(a6),d6
(1) 3961/    70FA : 2A1B                		move.l	(a3)+,d5
(1) 3962/    70FC : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1) 3963/    7104 : 6702                		beq.s	.nodble
(1) 3964/    7106 : DA85                		add.l	d5,d5
(1) 3965/    7108 :                     .nodble:
(1) 3966/    7108 : DC85                		add.l	d5,d6
(1) 3967/    710A : 4846                		swap	d6
(1) 3968/    710C : 3B46 0002           		move.w	d6,2(a5)
(1) 3969/    7110 : 3946 0002           		move.w	d6,2(a4)
(1) 3970/    7114 : 4846                		swap	d6
(1) 3971/    7116 : 2CC6                		move.l	d6,(a6)+
(1) 3972/    7118 : DAFC 0004           		adda	#4,a5
(1) 3973/    711C : D8FC 0004           		adda	#4,a4
(1) 3960/    7120 : 2C16                		move.l	(a6),d6
(1) 3961/    7122 : 2A1B                		move.l	(a3)+,d5
(1) 3962/    7124 : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1) 3963/    712C : 6702                		beq.s	.nodble
(1) 3964/    712E : DA85                		add.l	d5,d5
(1) 3965/    7130 :                     .nodble:
(1) 3966/    7130 : DC85                		add.l	d5,d6
(1) 3967/    7132 : 4846                		swap	d6
(1) 3968/    7134 : 3B46 0002           		move.w	d6,2(a5)
(1) 3969/    7138 : 3946 0002           		move.w	d6,2(a4)
(1) 3970/    713C : 4846                		swap	d6
(1) 3971/    713E : 2CC6                		move.l	d6,(a6)+
(1) 3972/    7140 : DAFC 0004           		adda	#4,a5
(1) 3973/    7144 : D8FC 0004           		adda	#4,a4
(1) 3960/    7148 : 2C16                		move.l	(a6),d6
(1) 3961/    714A : 2A1B                		move.l	(a3)+,d5
(1) 3962/    714C : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1) 3963/    7154 : 6702                		beq.s	.nodble
(1) 3964/    7156 : DA85                		add.l	d5,d5
(1) 3965/    7158 :                     .nodble:
(1) 3966/    7158 : DC85                		add.l	d5,d6
(1) 3967/    715A : 4846                		swap	d6
(1) 3968/    715C : 3B46 0002           		move.w	d6,2(a5)
(1) 3969/    7160 : 3946 0002           		move.w	d6,2(a4)
(1) 3970/    7164 : 4846                		swap	d6
(1) 3971/    7166 : 2CC6                		move.l	d6,(a6)+
(1) 3972/    7168 : DAFC 0004           		adda	#4,a5
(1) 3973/    716C : D8FC 0004           		adda	#4,a4
(1) 3960/    7170 : 2C16                		move.l	(a6),d6
(1) 3961/    7172 : 2A1B                		move.l	(a3)+,d5
(1) 3962/    7174 : 0839 0002 FFFF A888 		btst	#2,(RAM_VdpCache+$C).l
(1) 3963/    717C : 6702                		beq.s	.nodble
(1) 3964/    717E : DA85                		add.l	d5,d5
(1) 3965/    7180 :                     .nodble:
(1) 3966/    7180 : DC85                		add.l	d5,d6
(1) 3967/    7182 : 4846                		swap	d6
(1) 3968/    7184 : 3B46 0002           		move.w	d6,2(a5)
(1) 3969/    7188 : 3946 0002           		move.w	d6,2(a4)
(1) 3970/    718C : 4846                		swap	d6
(1) 3971/    718E : 2CC6                		move.l	d6,(a6)+
(1) 3972/    7190 : DAFC 0004           		adda	#4,a5
(1) 3973/    7194 : D8FC 0004           		adda	#4,a4
(1) 3975/    7198 : 51CF FF5E           		dbf	d7,.next
(1) 3976/    719C :                     .cant_deform:
(1) 3977/    719C : 4E75                		rts
(1) 3978/    719E :                     		
(1) 3979/    719E :                     .animate_incrmt:
(1) 3980/    719E : 0000 3200           		dc.l $3200
(1) 3981/    71A2 : 0000 3200           		dc.l $3200
(1) 3982/    71A6 : 0000 3200           		dc.l $3200
(1) 3983/    71AA : 0000 3200           		dc.l $3200
(1) 3984/    71AE : 0000 3200           		dc.l $3200
(1) 3985/    71B2 :                     		
(1) 3986/    71B2 : 0000 2A00           		dc.l $2A00
(1) 3987/    71B6 : 0000 2A00           		dc.l $2A00
(1) 3988/    71BA : 0000 2A00           		dc.l $2A00
(1) 3989/    71BE : 0000 2A00           		dc.l $2A00
(1) 3990/    71C2 : 0000 2A00           		dc.l $2A00
(1) 3991/    71C6 :                     
(1) 3992/    71C6 : 0000 3800           		dc.l $3800
(1) 3993/    71CA : 0000 3800           		dc.l $3800
(1) 3994/    71CE : 0000 3800           		dc.l $3800
(1) 3995/    71D2 : 0000 3800           		dc.l $3800
(1) 3996/    71D6 : 0000 3800           		dc.l $3800
(1) 3997/    71DA :                     
(1) 3998/    71DA : 0000 2C00           		dc.l $2C00
(1) 3999/    71DE : 0000 2C00           		dc.l $2C00
(1) 4000/    71E2 : 0000 2C00           		dc.l $2C00
(1) 4001/    71E6 : 0000 2C00           		dc.l $2C00
(1) 4002/    71EA : 0000 2C00           		dc.l $2C00
(1) 4003/    71EE : 0000 2C00           		dc.l $2C00
(1) 4004/    71F2 :                     
(1) 4005/    71F2 :                     ; --------------------------------------------------------
(1) 4006/    71F2 :                     ; HBlank
(1) 4007/    71F2 :                     ; --------------------------------------------------------
(1) 4008/    71F2 :                     
(1) 4009/    71F2 :                     MainGame_HBlank:
(1) 4010/    71F2 : 46FC 2700           		move.w	#$2700,sr
(1) 4011/    71F6 : 33FC 929A 00C0 0004 		move.w	#$929A,(vdp_ctrl).l		; Set WINDOW Bottom
(1) 4012/    71FE : 4E73                		rte
(1) 4013/    7200 :                     
(1) 4014/    7200 :                     MainGame_HBlank_Huge:
(1) 4015/    7200 : 46FC 2700           		move.w	#$2700,sr
(1) 4016/    7204 : 33FC 929B 00C0 0004 		move.w	#$929B,(vdp_ctrl).l		; Set WINDOW Bottom
(1) 4017/    720C : 4E73                		rte		
(1) 4018/    720E :                     
(1) 4019/    720E :                     MainGame_HBlank_2P:
(1) 4020/    720E : 48E7 0E0C           		movem.l	d4-d6/a4-a5,-(sp)
(1) 4021/    7212 : 4BF9 00C0 0000      		lea	(vdp_data),a5
(1) 4022/    7218 : 3838 8DA4           		move.w	(RAM_PGame_HintCount).w,d4
(1) 4023/    721C : 987C 0001           		sub.w	#1,d4
(1) 4024/    7220 : 6B1E                		bmi.s	.step1
(1) 4025/    7222 : 987C 0001           		sub.w	#1,d4
(1) 4026/    7226 : 6B28                		bmi.s	.step2
(1) 4027/    7228 : 987C 0001           		sub.w	#1,d4
(1) 4028/    722C : 6B1A                		bmi.s	.step3
(1) 4029/    722E : 4278 8DA4           		clr.w	(RAM_PGame_HintCount).w
(1) 4030/    7232 : 6006                		bra.s	.clr
(1) 4031/    7234 :                     .exit:
(1) 4032/    7234 : 0678 0001 8DA4      		add.w	#1,(RAM_PGame_HintCount).w
(1) 4033/    723A :                     .clr:
(1) 4034/    723A : 4CDF 3070           		movem.l	(sp)+,d4-d6/a4-a5
(1) 4035/    723E : 4E73                		rte
(1) 4036/    7240 :                     ; Half top screen
(1) 4037/    7240 :                     .step1:
(1) 4038/    7240 : 3B7C 928D 0004      		move.w	#$928D,4(a5)		; Set WINDOW position 2
(1) 4039/    7246 : 60EC                		bra.s	.exit
(1) 4040/    7248 :                     ; Lower bottom screen
(1) 4041/    7248 :                     .step3:
(1) 4042/    7248 : 3B7C 929B 0004      		move.w	#$929B,4(a5)		; Set WINDOW position 3
(1) 4043/    724E : 60E4                		bra	.exit
(1) 4044/    7250 :                     ; Middle screen
(1) 4045/    7250 :                     .step2:
(1) 4046/    7250 : 3B7C 922F 0004      		move.w	#$922F,4(a5)		; Set WINDOW position 3
(1) 4047/    7256 : 3B7C 8228 0004      		move.w	#$8228,4(a5)		; VDP MANUAL: PLANEA at $A000
(1) 4048/    725C : 2B7C 4000 0010 0004 		move.l	#$40000010,4(a5)
(1) 4049/    7264 : 49F8 8744           		lea	(RAM_PGame_Yscrl_Sub),a4
(1) 4050/    7268 :                     	rept (336/16)
(1) 4051/    7268 :                     		move.l	(a4)+,(a5)
(1) 4052/    7268 :                     	endm
(1) 4051/    7268 : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    726A : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    726C : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    726E : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    7270 : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    7272 : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    7274 : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    7276 : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    7278 : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    727A : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    727C : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    727E : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    7280 : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    7282 : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    7284 : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    7286 : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    7288 : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    728A : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    728C : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    728E : 2A9C                		move.l	(a4)+,(a5)
(1) 4051/    7290 : 2A9C                		move.l	(a4)+,(a5)
(1) 4053/    7292 : 60A0                		bra	.exit
(1) 4054/    7294 :                     
(1) 4055/    7294 :                     ; ====================================================================
(1) 4056/    7294 :                     ; ----------------------------------------------------------------
(1) 4057/    7294 :                     ; Small data
(1) 4058/    7294 :                     ; ----------------------------------------------------------------
(1) 4059/    7294 :                     
(1) 4060/    7294 :                     Pal_BlockPzes:	binclude "game/graphics/ingame/blocks_pal.bin"
(1) 4061/    72F4 :                     		align 2
(1) 4062/    72F4 :                     Pal_Backgrd00:	binclude "game/graphics/ingame/backg00_pal.bin"
(1) 4063/    7310 :                     		align 2
(1) 4064/    7310 :                     
(1) 4065/    7310 :                     vramList_MainBlocks:
(1) 4066/    7310 : 0000 0002 0001 0003 		dc.w $0000,$0002,$0001,$0003	; $01 red
(1) 4067/    7318 : 0004 0006 0005 0007 		dc.w $0004,$0006,$0005,$0007	; $02 yellow
(1) 4068/    7320 : 0008 000A 0009 000B 		dc.w $0008,$000A,$0009,$000B	; $03 green
(1) 4069/    7328 : 200C 200E 200D 200F 		dc.w $200C,$200E,$200D,$200F	; $04 blue
(1) 4070/    7330 : 2010 2012 2011 2013 		dc.w $2010,$2012,$2011,$2013	; $05 pink
(1) 4071/    7338 : 2014 2016 2015 2017 		dc.w $2014,$2016,$2015,$2017	; $06 cyan
(1) 4072/    7340 : 0018 001A 0019 001B 		dc.w $0018,$001A,$0019,$001B	; $07 RED bomb
(1) 4073/    7348 : 201C 201E 201D 201F 		dc.w $201C,$201E,$201D,$201F	; $08 BLUE bomb	
(1) 4074/    7350 : 4020 4022 4021 4023 		dc.w $4020,$4022,$4021,$4023	; >$09 Trash blocks
(1) 4075/    7358 : 4024 4026 4025 4027 		dc.w $4024,$4026,$4025,$4027	;
(1) 4076/    7360 : 4028 402A 4029 402B 		dc.w $4028,$402A,$4029,$402B	;
(1) 4077/    7368 : 402C 402E 402D 402F 		dc.w $402C,$402E,$402D,$402F	;
(1) 4078/    7370 :                     		
(1) 4079/    7370 : 4030 4032 4031 4033 		dc.w $4030,$4032,$4031,$4033	;
(1) 4080/    7378 : 4034 4036 4035 4037 		dc.w $4034,$4036,$4035,$4037	;
(1) 4081/    7380 : 4038 403A 4039 403B 		dc.w $4038,$403A,$4039,$403B	;
(1) 4082/    7388 : 403C 403E 403D 403F 		dc.w $403C,$403E,$403D,$403F	;
(1) 4083/    7390 :                     
(1) 4084/    7390 : 4040 4042 4041 4043 		dc.w $4040,$4042,$4041,$4043	;
(1) 4085/    7398 : 4044 4046 4045 4047 		dc.w $4044,$4046,$4045,$4047	;
(1) 4086/    73A0 : 4048 404A 4049 404B 		dc.w $4048,$404A,$4049,$404B	;
(1) 4087/    73A8 : 404C 404E 404D 404F 		dc.w $404C,$404E,$404D,$404F	;
(1) 4088/    73B0 :                     		
(1) 4089/    73B0 : 4050 4052 4051 4053 		dc.w $4050,$4052,$4051,$4053	;
(1) 4090/    73B8 : 4054 4056 4055 4057 		dc.w $4054,$4056,$4055,$4057	;
(1) 4091/    73C0 : 4058 405A 4059 405B 		dc.w $4058,$405A,$4059,$405B	;
(1) 4092/    73C8 : 405C 405E 405D 405F 		dc.w $405C,$405E,$405D,$405F	;
(1) 4093/    73D0 :                     		align 2
(1) 4094/    73D0 :                     		
(1) 4095/    73D0 :                     Map_PlyrBrdr:
(1) 4096/    73D0 : 0000 0002 0001 0003 		dc.w $0000,$0002,$0001,$0003
(1) 4097/    73D8 : 0004 0006 0005 0007 		dc.w $0004,$0006,$0005,$0007
(1) 4098/    73E0 : 0008 000A 0009 000B 		dc.w $0008,$000A,$0009,$000B
(1) 4099/    73E8 : 000C 000E 000D 000F 		dc.w $000C,$000E,$000D,$000F
(1) 4100/    73F0 : 0010 0012 0011 0013 		dc.w $0010,$0012,$0011,$0013
(1) 4101/    73F8 : 0014 0016 0015 0017 		dc.w $0014,$0016,$0015,$0017
(1) 4102/    7400 :                     Map_PlyrBrdr_LR:
(1) 4103/    7400 : 0018 001A 0019 001B 		dc.w $0018,$001A,$0019,$001B
(1) 4104/    7408 : 001C 001E 001D 001F 		dc.w $001C,$001E,$001D,$001F
(1) 4105/    7410 :                     		align 2
(1) 4106/    7410 :                     		
(1) 4107/    7410 :                     Map_ScoreInfo:
(1) 4108/    7410 : 0000 0002 0001 0003 		dc.w $0000,$0002,$0001,$0003
(1) 4109/    7418 : 0004 0006 0005 0007 		dc.w $0004,$0006,$0005,$0007
(1) 4110/    7420 : 0008 000A 0009 000B 		dc.w $0008,$000A,$0009,$000B
(1) 4111/    7428 : 0000 0000 0000 0000 		dc.w 0,0,0,0
(1) 4112/    7430 : 000A 000C 000B 000D 		dc.w $000A,$000C,$000B,$000D
(1) 4113/    7438 : 000E 0010 000F 0011 		dc.w $000E,$0010,$000F,$0011
(1) 4114/    7440 : 0012 0014 0013 0015 		dc.w $0012,$0014,$0013,$0015
(1) 4115/    7448 : 0000 0000 0000 0000 		dc.w 0,0,0,0
(1) 4116/    7450 : 0014 0016 0015 0017 		dc.w $0014,$0016,$0015,$0017
(1) 4117/    7458 : 0018 001A 0019 001B 		dc.w $0018,$001A,$0019,$001B
(1) 4118/    7460 : 001C 001E 001D 001F 		dc.w $001C,$001E,$001D,$001F
(1) 4119/    7468 : 0020 0022 0021 0023 		dc.w $0020,$0022,$0021,$0023
(1) 4120/    7470 :                     		align 2
(1) 4121/    7470 :                     
      70/    7470 :                     CodeBank_e:
      71/    7470 :                     
      72/    7470 :                     ; ------------------------------------------------------------
      73/    7470 :                     
      77/    7470 :                     	
      78/    7470 :                     ; ====================================================================
      79/    7470 :                     ; DATA Section (large)
      80/    7470 :                     ; ====================================================================
      81/    7470 :                     
      82/    7470 :                     DataBank:
      83/    7470 :                     		include	"game/data.asm"
(1)    1/    7470 :                     ; ================================================================
(1)    2/    7470 :                     ; ------------------------------------------------------------
(1)    3/    7470 :                     ; DATA SECTION
(1)    4/    7470 :                     ; ------------------------------------------------------------
(1)    5/    7470 :                     
(1)    6/    7470 :                     Map_Backgrd00:	binclude "game/graphics/ingame/backg00_map.bin"
(1)    7/    7E70 :                     		align 2
(1)    8/    7E70 :                     
(1)    9/    7E70 :                     ; ----------------------------------------------------
(1)   10/    7E70 :                     ; Main game data
(1)   11/    7E70 :                     ; ----------------------------------------------------
(1)   12/    7E70 :                     
(1)   13/    7E70 :                     		align $1000
(1)   14/    8000 :                     Art_PlyrCursor:
(1)   15/    8000 :                     		binclude "game/graphics/ingame/cursor_art.bin"
(1)   16/    9400 :                     Art_PlyrCursor_e:
(1)   17/    9400 :                     		align 2
(1)   18/    9400 :                     Art_BlockPzes:	binclude "game/graphics/ingame/blocks_art.bin"
(1)   19/    B400 :                     Art_BlockPzes_e:
(1)   20/    B400 :                     		align 2
(1)   21/    B400 :                     Art_PlyrBorders:
(1)   22/    B400 :                     		binclude "game/graphics/ingame/borders_art.bin"
(1)   23/    CC00 :                     Art_PlyrBorders_e:
(1)   24/    CC00 :                     		align 2
(1)   25/    CC00 :                     Art_Backgrd00:	binclude "game/graphics/ingame/backg00_art.bin"
(1)   26/   10240 :                     Art_Backgrd00_e:
(1)   27/   10240 :                     		align 2
(1)   28/   10240 :                     		
(1)   29/   10240 :                     Art_Title_FG:
(1)   30/   10240 :                     		binclude "game/graphics/title/title_art.bin"
(1)   31/   11C60 :                     Art_Title_FG_e:
(1)   32/   11C60 :                     		align 2
(1)   33/   11C60 :                     Art_Title_BG:
(1)   34/   11C60 :                     		binclude "game/graphics/title/bg_art.bin"
(1)   35/   11F20 :                     Art_Title_BG_e:
(1)   36/   11F20 :                     		align 2
(1)   37/   11F20 :                     Art_MenuFont:
(1)   38/   11F20 :                     		binclude "game/graphics/title/menu_art.bin"
(1)   39/   13060 :                     Art_MenuFont_e:
(1)   40/   13060 :                     		align 2
(1)   41/   13060 :                     		
(1)   42/   13060 :                     ; ----------------------------------------------------
(1)   43/   13060 :                     ; Sound data
(1)   44/   13060 :                     ; ----------------------------------------------------
(1)   45/   13060 :                     
(1)   46/   13060 :                     		include "game/sound/data.asm"
(2)    1/   13060 :                     ; ================================================================
(2)    2/   13060 :                     ; ------------------------------------------------------------
(2)    3/   13060 :                     ; DATA SECTION
(2)    4/   13060 :                     ; 
(2)    5/   13060 :                     ; SOUND
(2)    6/   13060 :                     ; ------------------------------------------------------------
(2)    7/   13060 :                     
(2)    8/   13060 :                     ; TYPES:
(2)    9/   13060 :                     ;  -1 - ignore
(2)   10/   13060 :                     ;   0 - FM normal
(2)   11/   13060 :                     ;   1 - FM special
(2)   12/   13060 :                     ;   2 - FM sample
(2)   13/   13060 :                     ; $80 - PSG
(2)   14/   13060 :                     ; $E0 - PSG noise
(2)   15/   13060 :                     
(2)   16/   13060 : =$0                 insFM		equ 0
(2)   17/   13060 : =$1                 insFM3		equ 1
(2)   18/   13060 : =$2                 insFM6		equ 2
(2)   19/   13060 : =$80                insPSG		equ $80
(2)   20/   13060 : =$E0                insPBass0	equ $E0
(2)   21/   13060 : =$E1                insPBass1	equ $E1
(2)   22/   13060 : =$E2                insPBass2	equ $E2
(2)   23/   13060 : =$E3                insPBass3	equ $E3		; Grabs PSG3 frequency
(2)   24/   13060 : =$E4                insPNoise0	equ $E4
(2)   25/   13060 : =$E5                insPNoise1	equ $E5
(2)   26/   13060 : =$E6                insPNoise2	equ $E6
(2)   27/   13060 : =$E7                insPNoise3	equ $E7		; Grabs PSG3 frequency
(2)   28/   13060 :                     
(2)   29/   13060 :                     instrSlot	macro TYPE,OPT,LABEL
(2)   30/   13060 :                     	if TYPE=-1
(2)   31/   13060 :                     		dc.b -1,-1,-1,-1
(2)   32/   13060 :                     	else
(2)   33/   13060 :                     		dc.b TYPE,OPT
(2)   34/   13060 :                     		dc.b LABEL&$FF,((LABEL>>8)&$FF)
(2)   35/   13060 :                     	endif
(2)   36/   13060 :                     		endm
(2)   37/   13060 :                     
(2)   38/   13060 :                     instrSmpl	macro FLAGS,LABEL1,LABEL2,LABEL3
(2)   39/   13060 :                     		dc.b LABEL1&$FF,LABEL1>>8&$7F|$80,((LABEL1>>15)&$FF)
(2)   40/   13060 :                     		dc.b LABEL2&$FF,LABEL2>>8&$7F|$80,((LABEL2>>15)&$FF)
(2)   41/   13060 :                     		dc.b LABEL3&$FF,LABEL3>>8&$7F|$80,((LABEL3>>15)&$FF)
(2)   42/   13060 :                     		dc.b FLAGS
(2)   43/   13060 :                     		endm
(2)   44/   13060 :                     
(2)   45/   13060 :                     ; ----------------------------------------------------
(2)   46/   13060 :                     ; Sound bank for Z80
(2)   47/   13060 :                     ; ----------------------------------------------------
(2)   48/   13060 :                     		align $8000				; Align to bank
(2)   49/   18000 :                     ZSnd_MusicBank:
(2)   50/    8000 :                     		phase $8000
(2)   51/    8000 : 524F 4D20 4D55 5349 		dc.b "ROM MUSIC DATA"
                    4320 4441 5441      
(2)   52/    800E :                     
(2)   53/    800E :                     
(2)   54/    800E :                     ; MusicBlk_Tronik:
(2)   55/    800E :                     ; 		binclude "game/sound/music/track0_blk.bin"		; BLOCKS data
(2)   56/    800E :                     ; MusicPat_Tronik:
(2)   57/    800E :                     ; 		binclude "game/sound/music/track0_patt.bin"		; PATTERN data
(2)   58/    800E :                     ; MusicIns_Tronik:
(2)   59/    800E :                     ; ; 		instrSlot -1
(2)   60/    800E :                     ; ; 		instrSlot -1
(2)   61/    800E :                     ; 		instrSlot insFM6,0,.smpl0
(2)   62/    800E :                     ; 		instrSlot insFM6,0,.smpl1
(2)   63/    800E :                     ; 		instrSlot insFM,-36,FmIns_DrumKick
(2)   64/    800E :                     ; 		instrSlot insFM,-54,FmIns_DrumSnare
(2)   65/    800E :                     ; 		instrSlot insFM,0,FmIns_Bass_ambient
(2)   66/    800E :                     ; 		instrSlot insFM3,0,FmIns_Fm3_OpenHat
(2)   67/    800E :                     ; 		instrSlot insFM3,0,FmIns_Fm3_ClosedHat
(2)   68/    800E :                     ; 		
(2)   69/    800E :                     ; ; insFM6 pointers
(2)   70/    800E :                     ; .smpl0:		instrSmpl 0,WavIns_adae1,WavIns_adae1_e,0
(2)   71/    800E :                     ; .smpl1:		instrSmpl 0,WavIns_adae2,WavIns_adae2_e,0
(2)   72/    800E :                     
(2)   73/    800E :                     ; ; ------------------------------------
(2)   74/    800E :                     ; ; Track JackRab
(2)   75/    800E :                     ; ; ------------------------------------
(2)   76/    800E :                     ; 
(2)   77/    800E :                     ; MusicBlk_JackRab:
(2)   78/    800E :                     ; 		binclude "game/sound/music/jackrab_blk.bin"		; BLOCKS data
(2)   79/    800E :                     ; MusicPat_JackRab:
(2)   80/    800E :                     ; 		binclude "game/sound/music/jackrab_patt.bin"		; PATTERN data
(2)   81/    800E :                     ; MusicIns_JackRab:
(2)   82/    800E :                     ; 		instrSlot -1
(2)   83/    800E :                     ; 		instrSlot insFM,0,FmIns_Ambient_spook
(2)   84/    800E :                     ; 		instrSlot insFM6,+12,.tom
(2)   85/    800E :                     ; 		instrSlot insFM6,+12,.kick
(2)   86/    800E :                     ; 		instrSlot insPNoise0,0,PsgIns_02
(2)   87/    800E :                     ; 		instrSlot insFM,0,FmIns_bass_synth
(2)   88/    800E :                     ; 		instrSlot insFM6,+6,.cuban
(2)   89/    800E :                     ; 		instrSlot insFM,0,FmIns_piano_m1
(2)   90/    800E :                     ; 		instrSlot insFM6,-17,.middle
(2)   91/    800E :                     ; 		instrSlot insFM,0,FmIns_Bass_3		; 10
(2)   92/    800E :                     ; 		instrSlot insPSG,0,PsgIns_01
(2)   93/    800E :                     ; 		instrSlot insFM,0,FmIns_ambient_dark
(2)   94/    800E :                     ; 		instrSlot insPNoise1,0,PsgIns_00
(2)   95/    800E :                     ; 		instrSlot insFM,0,FmIns_Ding_toy
(2)   96/    800E :                     ; 		instrSlot insPSG,0,PsgIns_01
(2)   97/    800E :                     ; 		instrSlot insFM6,+12,.snare
(2)   98/    800E :                     ; 		instrSlot -1
(2)   99/    800E :                     ; 		instrSlot insFM,0,FmIns_Trumpet_2
(2)  100/    800E :                     ; 		instrSlot insPNoise0,0,PsgIns_00
(2)  101/    800E :                     ; 		instrSlot insPSG,0,PsgIns_00		; 20
(2)  102/    800E :                     ; 		instrSlot -1
(2)  103/    800E :                     ; 		instrSlot -1
(2)  104/    800E :                     ; 		instrSlot -1
(2)  105/    800E :                     ; 		instrSlot -1
(2)  106/    800E :                     ; .kick:		instrSmpl 0,WavIns_CLASIC02,WavIns_CLASIC02_e,WavIns_CLASIC02
(2)  107/    800E :                     ; .snare:		instrSmpl 0,WavIns_SNOWD2,WavIns_SNOWD2_e,WavIns_SNOWD2
(2)  108/    800E :                     ; .tom:		instrSmpl 0,WavIns_AFRICA2,WavIns_AFRICA2_e,WavIns_AFRICA2
(2)  109/    800E :                     ; .cuban:		instrSmpl 0,WavIns_CUBAN,WavIns_CUBAN_e,WavIns_CUBAN
(2)  110/    800E :                     ; .middle		instrSmpl 0,WavIns_MIDDLE,WavIns_MIDDLE_e,WavIns_MIDDLE
(2)  111/    800E :                     
(2)  112/    800E :                     ; ------------------------------------
(2)  113/    800E :                     
(2)  114/   1800E :                     		dephase		; close bank
(2)  115/   1800E :                     		
(2)  116/   1800E :                     ; ----------------------------------------------------
(2)  117/   1800E :                     ; Sample data
(2)  118/   1800E :                     ; 
(2)  119/   1800E :                     ; can be anywhere in ROM
(2)  120/   1800E :                     ; ----------------------------------------------------
(2)  121/   1800E :                     
(2)  122/   1800E :                     		align $8000
(2)  123/   20000 : 5341 4D50 4C45 2044 		dc.b "SAMPLE DATA"
                    4154 41             
(2)  124/   2000B :                     ; WavIns_PumpKick:
(2)  125/   2000B :                     ; 		binclude "game/sound/instr/dac/pump_kick.wav",$2C
(2)  126/   2000B :                     ; WavIns_PumpKick_e:
(2)  127/   2000B :                     ; 
(2)  128/   2000B :                     ; WavIns_PumpClap:
(2)  129/   2000B :                     ; 		binclude "game/sound/instr/dac/pump_clap.wav",$2C
(2)  130/   2000B :                     ; WavIns_PumpClap_e:
(2)  131/   2000B :                     ; WavIns_adae1:
(2)  132/   2000B :                     ; 		binclude "game/sound/instr/dac/adaebeat_1.wav",$2C
(2)  133/   2000B :                     ; WavIns_adae1_e:
(2)  134/   2000B :                     ; 
(2)  135/   2000B :                     ; WavIns_adae2:
(2)  136/   2000B :                     ; 		binclude "game/sound/instr/dac/adaebeat_2.wav",$2C
(2)  137/   2000B :                     ; WavIns_adae2_e:
(2)  138/   2000B :                     
(2)  139/   2000B :                     ; Wav_Beibe: 	binclude "game/sound/beibe.wav",$2C;,$3C0000
(2)  140/   2000B :                     ; Wav_Beibe_e:
(2)  141/   2000B :                     
(1)   47/   2000B :                     
      84/   2000B :                     DataBank_e:
      88/   2000B :                     
      89/   2000B :                     ; ====================================================================
      90/   2000B :                     
      91/   2000B : (MACRO)             ROM_END:	rompad (ROM_END&$FF0000)+$10000
      91/   2000B : =$FFF5              diff := (ROM_END&$FF0000)+$10000 - *
      91/   2000B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2000B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2040B : =$FBF5              diff := diff - 1024
      91/   2040B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2040B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2080B : =$F7F5              diff := diff - 1024
      91/   2080B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2080B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   20C0B : =$F3F5              diff := diff - 1024
      91/   20C0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   20C0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2100B : =$EFF5              diff := diff - 1024
      91/   2100B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2100B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2140B : =$EBF5              diff := diff - 1024
      91/   2140B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2140B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2180B : =$E7F5              diff := diff - 1024
      91/   2180B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2180B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   21C0B : =$E3F5              diff := diff - 1024
      91/   21C0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   21C0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2200B : =$DFF5              diff := diff - 1024
      91/   2200B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2200B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2240B : =$DBF5              diff := diff - 1024
      91/   2240B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2240B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2280B : =$D7F5              diff := diff - 1024
      91/   2280B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2280B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   22C0B : =$D3F5              diff := diff - 1024
      91/   22C0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   22C0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2300B : =$CFF5              diff := diff - 1024
      91/   2300B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2300B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2340B : =$CBF5              diff := diff - 1024
      91/   2340B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2340B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2380B : =$C7F5              diff := diff - 1024
      91/   2380B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2380B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   23C0B : =$C3F5              diff := diff - 1024
      91/   23C0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   23C0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2400B : =$BFF5              diff := diff - 1024
      91/   2400B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2400B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2440B : =$BBF5              diff := diff - 1024
      91/   2440B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2440B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2480B : =$B7F5              diff := diff - 1024
      91/   2480B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2480B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   24C0B : =$B3F5              diff := diff - 1024
      91/   24C0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   24C0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2500B : =$AFF5              diff := diff - 1024
      91/   2500B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2500B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2540B : =$ABF5              diff := diff - 1024
      91/   2540B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2540B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2580B : =$A7F5              diff := diff - 1024
      91/   2580B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2580B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   25C0B : =$A3F5              diff := diff - 1024
      91/   25C0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   25C0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2600B : =$9FF5              diff := diff - 1024
      91/   2600B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2600B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2640B : =$9BF5              diff := diff - 1024
      91/   2640B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2640B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2680B : =$97F5              diff := diff - 1024
      91/   2680B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2680B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   26C0B : =$93F5              diff := diff - 1024
      91/   26C0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   26C0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2700B : =$8FF5              diff := diff - 1024
      91/   2700B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2700B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2740B : =$8BF5              diff := diff - 1024
      91/   2740B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2740B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2780B : =$87F5              diff := diff - 1024
      91/   2780B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2780B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   27C0B : =$83F5              diff := diff - 1024
      91/   27C0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   27C0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2800B : =$7FF5              diff := diff - 1024
      91/   2800B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2800B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2840B : =$7BF5              diff := diff - 1024
      91/   2840B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2840B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2880B : =$77F5              diff := diff - 1024
      91/   2880B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2880B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   28C0B : =$73F5              diff := diff - 1024
      91/   28C0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   28C0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2900B : =$6FF5              diff := diff - 1024
      91/   2900B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2900B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2940B : =$6BF5              diff := diff - 1024
      91/   2940B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2940B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2980B : =$67F5              diff := diff - 1024
      91/   2980B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2980B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   29C0B : =$63F5              diff := diff - 1024
      91/   29C0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   29C0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2A00B : =$5FF5              diff := diff - 1024
      91/   2A00B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2A00B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2A40B : =$5BF5              diff := diff - 1024
      91/   2A40B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2A40B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2A80B : =$57F5              diff := diff - 1024
      91/   2A80B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2A80B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2AC0B : =$53F5              diff := diff - 1024
      91/   2AC0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2AC0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2B00B : =$4FF5              diff := diff - 1024
      91/   2B00B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2B00B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2B40B : =$4BF5              diff := diff - 1024
      91/   2B40B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2B40B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2B80B : =$47F5              diff := diff - 1024
      91/   2B80B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2B80B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2BC0B : =$43F5              diff := diff - 1024
      91/   2BC0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2BC0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2C00B : =$3FF5              diff := diff - 1024
      91/   2C00B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2C00B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2C40B : =$3BF5              diff := diff - 1024
      91/   2C40B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2C40B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2C80B : =$37F5              diff := diff - 1024
      91/   2C80B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2C80B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2CC0B : =$33F5              diff := diff - 1024
      91/   2CC0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2CC0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2D00B : =$2FF5              diff := diff - 1024
      91/   2D00B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2D00B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2D40B : =$2BF5              diff := diff - 1024
      91/   2D40B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2D40B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2D80B : =$27F5              diff := diff - 1024
      91/   2D80B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2D80B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2DC0B : =$23F5              diff := diff - 1024
      91/   2DC0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2DC0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2E00B : =$1FF5              diff := diff - 1024
      91/   2E00B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2E00B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2E40B : =$1BF5              diff := diff - 1024
      91/   2E40B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2E40B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2E80B : =$17F5              diff := diff - 1024
      91/   2E80B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2E80B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2EC0B : =$13F5              diff := diff - 1024
      91/   2EC0B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2EC0B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2F00B : =$FF5               diff := diff - 1024
      91/   2F00B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2F00B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2F40B : =$BF5               diff := diff - 1024
      91/   2F40B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2F40B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2F80B : =$7F5               diff := diff - 1024
      91/   2F80B :                                                     ; AS can only generate 1 kb of code on a single line
      91/   2F80B : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      91/   2FC0B : =$3F5               diff := diff - 1024
      91/   2FC0B :                     
      91/   2FC0B : 0000 0000 0000 0000                         dc.b [diff]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 00        
      92/   30000 :                     
 AS V1.42 Beta [Bld 118] - source file main.asm - page 2 - 9/4/2021 9:21:17


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :                                        x86_64-unknown-linux - |
 ART_BACKGRD00 :               CC00 C |  ART_BACKGRD00_E :            10240 C |
 ART_BLOCKPZES :               9400 C |  ART_BLOCKPZES_E :             B400 C |
 ART_MENUFONT :               11F20 C |  ART_MENUFONT_E :             13060 C |
 ART_PLYRBORDERS :             B400 C |  ART_PLYRBORDERS_E :           CC00 C |
 ART_PLYRCURSOR :              8000 C |  ART_PLYRCURSOR_E :            9400 C |
 ART_PRINTFONT :               2050 C |  ART_PRINTFONT_E :             2C50 C |
 ART_TITLE_BG :               11C60 C |  ART_TITLE_BG_E :             11F20 C |
 ART_TITLE_FG :               10240 C |  ART_TITLE_FG_E :             11C60 C |
*BIGENDIAN :                      0 - |  BITBLKFLG_CHAIN :                5 - |
 BITBLKFLG_FALL :                 6 - |  BITBLKFLG_MATCH :                7 - |
 BITCURST_ACTIVE :                7 - |  BITCURST_MIDSWAPLOCK :           6 - |
*BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITHBLNK :                       2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - | *BITJOYB :                        4 - |
*BITJOYC :                        5 - | *BITJOYDOWN :                     1 - |
*BITJOYLEFT :                     2 - | *BITJOYMODE :                     3 - |
*BITJOYRIGHT :                    3 - | *BITJOYSTART :                    7 - |
*BITJOYUP :                       0 - | *BITJOYX :                        2 - |
*BITJOYY :                        1 - | *BITJOYZ :                        0 - |
 BITMTCH_COMBOSPDUP :             2 - |  BITMTCH_MATCHOVER :              6 - |
 BITMTCH_PAUSE :                  7 - |  BITMTCH_TIMEOUT :                5 - |
 BITMTCH_TIMERDOWN :              0 - |  BITMTCH_TRASHENBL :              1 - |
*BITODD :                         4 - | *BITPAL :                         0 - |
 BITPLYST_ACTIVE :                7 - |  BITPLYST_CHKMATCH :              3 - |
 BITPLYST_DRWALL :                5 - |  BITPLYST_DRWLINE :               4 - |
 BITPLYST_GAMEOVER :              2 - |  BITPLYST_MIDSWAPSTOP :           0 - |
 BITPLYST_SPDUP :                 1 - |  BITSCORST_ACTIVE :               7 - |
*BITSPRCOL :                      5 - | *BITSPROVR :                      6 - |
*BITV30 :                         3 - |  BITVBLNK :                       3 - |
 BITVINT :                        7 - | *BITVINTENBL :                    5 - |
 BLKDEL_MIDANIM :              3E00 - |  BLKDEL_TIMEOUT :              5000 - |
 BLKFLG_DRAW :                 8000 - |  BLKFLG_FALL :                   40 - |
 BLKROLL_FALL :                7000 - |  BLKROLL_STAY :                5100 - |
 BOX_BLOCKDATA :                  C C |  BOX_BLOCKTRSH :                  0 C |
 BOX_BOARDTIMEOUT :              1C C |  BOX_BOARDX :                    26 C |
 BOX_BOARDY :                    28 C |  BOX_CHECKLINE :               6F3C C |
 BOX_CHECKLINE.CHK_TOP :       6F46 C |  BOX_CHECKLINE.NO_BLK :        6F50 C |
 BOX_COMBOCNTSHOW :              38 C |  BOX_COMBOCOUNT :                36 C |
 BOX_FRAMETIMER :                3C C |  BOX_GUESSBLK :                6F22 C |
 BOX_HEIGHT :                    2C C |  BOX_MATCHCOUNT :                2E C |
 BOX_NUMMTCHADD :                30 C |  BOX_NUMMTCHBLK :                34 C |
 BOX_NUMMTCHLAST :               32 C |  BOX_SENDTRASH :               6F5A C |
 BOX_SENDTRASH.FIND_FREE :     6F76 C |  BOX_SENDTRASH.TRSH_EXIT :     6FCC C |
 BOX_SENDTRASH.TRSH_MIDLP :    6FB8 C |  BOX_SENDTRASH.TRSH_MKLINE :   6FCE C |
 BOX_SENDTRASH.TRSH_MKTOP :    6FC4 C |  BOX_SENDTRASH.USE_THIS :      6F8E C |
 BOX_SENDTRASH.WDTHADD :       6FE6 C |  BOX_SENDTRASH.WDTHZERO :      6FEC C |
 BOX_STATUS :                    24 C |  BOX_TRSHREQ :                   3E C |
 BOX_TRSHSMLREQ :                20 C |  BOX_USERBORDER :                48 C |
 BOX_USERLEVEL :                 4A C | *BOX_USERLOSES :                 50 C |
 BOX_USERMAXIDS :                4C C |  BOX_USERSCORE :                 40 C |
 BOX_USERTIME :                  44 C | *BOX_USERWINS :                  4E C |
 BOX_WIDTH :                     2A C |  BOX_YSCRL :                     10 C |
 BOX_YSCRL_OLD :                 14 C |  BOX_YSHAKE :                    3A C |
 BOX_YSPD :                      18 C | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CHNL_CHIP :                      0 - |
 CHNL_CHNVOLBASE :               11 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_EFNEWFREQ :                19 - |
 CHNL_EFNEWVOL :                 16 - |  CHNL_EFPORTAM :                 17 - |
 CHNL_EFVOLSLIDE :               15 - |  CHNL_FMPAN :                     D - |
 CHNL_FMREGB0 :                   E - |  CHNL_FMREGB4 :                   F - |
 CHNL_FMREGKEYS :                10 - |  CHNL_FREQ :                      9 - |
 CHNL_INS :                       3 - |  CHNL_INSADDR :                   7 - |
 CHNL_INSOPT :                    C - |  CHNL_INSTYPE :                   B - |
 CHNL_NOTE :                      2 - |  CHNL_PSGINDX :                  13 - |
 CHNL_PSGOUTFREQ :               1B - |  CHNL_PSGVOLENV :                12 - |
 CHNL_SMPLFLAGS :                14 - |  CHNL_TYPE :                      1 - |
 CHNL_VOL :                       4 - | *CODEBANK :                    30C4 C |
*CODEBANK_E :                  7470 C | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFA6FC - |  CONTROLLER_2 :    FFFFFFFFFFFFA702 - |
*CONTROLLER_3 :    FFFFFFFFFFFFA708 - | *CONTROLLER_4 :    FFFFFFFFFFFFA70E - |
*CURR_JSR :                      2F C |  CURR_NOISEMODE :                33 C |
 CURR_SNDBANK :                  32 C |  CURSOR_BOX :                     4 C |
 CURSOR_CONTROL :                 0 C | *CURSOR_FRAME :                  56 C |
 CURSOR_SPDUPTMR :               5A C |  CURSOR_STATUS :                 58 C |
 CURSOR_SWAPDSTID :              1A C |  CURSOR_SWAPDSTPOS :              C C |
 CURSOR_SWAPDSTSHDW :            14 C |  CURSOR_SWAPDSTSPR :             34 C |
 CURSOR_SWAPDSTSPROLD :          3C C |  CURSOR_SWAPDSTSPRSPD :          44 C |
 CURSOR_SWAPMODE :               4C C |  CURSOR_SWAPSRCID :              18 C |
 CURSOR_SWAPSRCPOS :              8 C |  CURSOR_SWAPSRCSHDW :            10 C |
 CURSOR_SWAPSRCSPR :             1C C |  CURSOR_SWAPSRCSPROLD :          24 C |
 CURSOR_SWAPSRCSPRSPD :          2C C |  CURSOR_TYPE :                   4E C |
*CURSOR_TYPEOLD :                50 C |  CURSOR_X :                      52 C |
 CURSOR_Y :                      54 C | *DATABANK :                    7470 C |
*DATABANK_E :                 2000B C | *DATE :                    9/4/2021 - |
 DIFF :                         3F5 - | *DISPENBL :                      40 - |
*DMAENBL :                       10 - | *FALSE :                          0 - |
 FMFREQ_LIST :                  C68 C |  FMINSSFX_BELLWAVE :           14B0 C |
 FMINSSFX_PUNCH :              1470 C |  FMINSSFX_SMASH :              1490 C |
*FULLPMMU :                       1 - |  GLBL_LASTORG :                4CE4 - |
 GLBL_LASTPC :                 4CE4 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HINTENBL :                      10 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSFM :                          0 - | *INSFM3 :                         1 - |
*INSFM6 :                         2 - | *INSPBASS0 :                     E0 - |
*INSPBASS1 :                     E1 - | *INSPBASS2 :                     E2 - |
*INSPBASS3 :                     E3 - | *INSPNOISE0 :                    E4 - |
*INSPNOISE1 :                    E5 - | *INSPNOISE2 :                    E6 - |
*INSPNOISE3 :                    E7 - | *INSPSG :                        80 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      1 - |
 JOYA :                          40 - |  JOYB :                          10 - |
 JOYC :                          20 - |  JOYDOWN :                        2 - |
 JOYLEFT :                        4 - | *JOYMODE :                      800 - |
 JOYRIGHT :                       8 - |  JOYSTART :                      80 - |
 JOYUP :                          1 - |  JOYX :                         400 - |
 JOYY :                         200 - |  JOYZ :                         100 - |
*LISTON :                         3 - |  LIST_VDPREGS :                203C C |
*MACEXP :                         7 - |  MAINGAME_HBLANK :             71F2 C |
 MAINGAME_HBLANK_2P :          720E C |  MAINGAME_HBLANK_2P.CLR :      723A C |
 MAINGAME_HBLANK_2P.EXIT :     7234 C |  MAINGAME_HBLANK_2P.STEP1 :    7240 C |
 MAINGAME_HBLANK_2P.STEP2 :    7250 C |  MAINGAME_HBLANK_2P.STEP3 :    7248 C |
*MAINGAME_HBLANK_HUGE :        7200 C |  MAINGAME_INIT :               4CE4 C |
 MAINGAME_INIT.HIPRIO :        4D36 C |  MAINGAME_INIT.HIPRIO2 :       4D4E C |
 MAINGAME_INIT.HIPRIO3 :       4D60 C |  MAINGAME_INIT.PLYRLOOP :      4DAC C |
 MAINGAME_LOOP :               4E40 C |  MAINGAME_LOOP.CANRENDR :      4E62 C |
 MAINGAME_LOOP.LOOP :          4E4E C |  MAINGAME_VBLANK :             4E70 C |
 MAINGAME_VBLANK.WAIT_MATCH :  4E84 C |  MAP_BACKGRD00 :               7470 C |
 MAP_MENUTEXT :                42E4 C |  MAP_PLYRBRDR :                73D0 C |
*MAP_PLYRBRDR_LR :             7400 C |  MAP_SCOREINFO :               7410 C |
 MAP_TITLE_BG :                3A24 C |  MAP_TITLE_FG :                379C C |
 MAX_BOXES :                      4 - |  MAX_BOXHEIGHT :                 40 - |
 MAX_BOXWIDTH :                  20 - |  MAX_CHNLS :                      A - |
 MAX_LOCRAM :                  2000 - |  MAX_PRNTLIST :                  10 - |
 MAX_SCORBOX :                    5 - |  MAX_TITLOPT :                    3 - |
*MAX_TRACKS :                     2 - |  MDRAM_START :             FFFF8000 - |
*MD_BANK_SRAM :              A130F1 - |  MD_ENTRY :                     202 C |
 MD_ENTRY.CLRRAM :              248 C |  MD_ENTRY.OLDMD :               21C C |
 MD_ENTRY.WAITFRAME :           228 C |  MD_ERRADDR :                   200 C |
 MD_ERRBUS :                    200 C |  MD_ERRCHK :                    200 C |
 MD_ERRILL :                    200 C |  MD_ERROREX :                   200 C |
 MD_ERRORTRAP :                 200 C |  MD_ERRPRIVL :                  200 C |
 MD_ERRTRAPV :                  200 C |  MD_ERRZDIV :                   200 C |
 MD_HBLANK :                   30B6 C |  MD_LINE1010 :                  200 C |
 MD_LINE1111 :                  200 C |  MD_MAIN :                     30B8 C |
*MD_MARS_ID :                A130EC - |  MD_TRACE :                     200 C |
 MD_VBLANK :                   30B4 C |  MOMCPU :                     68000 - |
*MOMCPUNAME :                 68000 - |  MTCHFLG_COMBOSPDUP :             4 - |
*MTCHFLG_TIMERDOWN :              1 - |  MTCHFLG_TRASHENBL :              2 - |
*NESTMAX :                      100 - |  ON_HOLD :                        2 C |
 ON_PRESS :                       4 C | *PACKING :                        0 - |
*PADDING :                        0 - | *PADDINGSOFAR :                   0 - |
 PAD_ID :                         0 C |  PAD_VER :                        1 C |
 PAL_BACKGRD00 :               72F4 C |  PAL_BLOCKPZES :               7294 C |
 PAL_PRINTFONT :               2C50 C |  PAL_TITLE_BG :                3A04 C |
 PAL_TITLE_FG :                373C C |  PSGFREQ_LIST :                 D28 C |
*PSGINS_00 :                   1435 C |  PSGINS_01 :                   1437 C |
*PSGINS_02 :                   143D C | *PSGINS_03 :                   1451 C |
*PSGINS_04 :                   145D C | *PSG_CTRL :                  C00011 - |
 PUZLBOTSCR_SETPOS :           55B4 C |  PUZLBOTSCR_SETPOS.THISSZ :    55EE C |
 PUZLBOTSCR_SETPOS.THISSZJ :   5616 C |  PZLGAME_ANIMATEBG :           70D8 C |
 PZLGAME_ANIMATEBG.ANIMATE_INCRMT :                                    719E C |
 PZLGAME_ANIMATEBG.CANT_DEFORM :                                       719C C |
 PZLGAME_ANIMATEBG.NEXT :      70F8 C |  PZLGAME_ANIMATEBG_INIT :      70B4 C |
 PZLGAME_ANIMATEBG_INIT.HNEXT :                                        70BE C |
 PZLGAME_BCDSCORE_ADD :        6FF8 C | *PZLGAME_BCDSCORE_ADD.DIGT0 :  7010 C |
 PZLGAME_BCDTIMER_UP :         7012 C |  PZLGAME_BCDTIMER_UP.NEL2D :   7060 C |
 PZLGAME_BCDTIMER_UP.NEL2T :   70AE C |  PZLGAME_BCDTIMER_UP.NEL3D :   705E C |
 PZLGAME_BCDTIMER_UP.NEL3T :   70AC C |  PZLGAME_BCDTIMER_UP.NEL4D :   705C C |
 PZLGAME_BCDTIMER_UP.NEL4T :   70AA C |
 PZLGAME_BCDTIMER_UP.TIMER_ACTV :                                      7072 C |
*PZLGAME_BCDTIMER_UP.TIMER_DOWN :                                      7036 C |
 PZLGAME_BCDTIMER_UP.TIMER_UP :                                        7074 C |
 PZLGAME_BCDTIMER_UP.TIME_DONE :                                       70B2 C |
 PZLGAME_DEFVBLANK :           4EE4 C |  PZLGAME_DEFVBLANK.NOWNDWTOP : 4F02 C |
 PZLGAME_DEFVBLANK.WAIT :      4F38 C |  PZLGAME_INITCURSORS :         4FA6 C |
 PZLGAME_INITCURSORS.CLRCURSORS :                                      4FB0 C |
 PZLGAME_LOADBACKGRND :        561A C |  PZLGAME_LOADBACKGRND.ISDBLE : 5666 C |
 PZLGAME_LOADSCORES :          54D6 C |  PZLGAME_LOADSCORES.DOIT :     5500 C |
 PZLGAME_LOADSCORES.DRWSCOR_LABEL :                                    550C C |
 PZLGAME_LOADSCORES.NO_EXUPDWN :                                       5502 C |
 PZLGAME_LOADSCORES.PLYRLOOP : 54E4 C |
*PZLGAME_LOADSCORES.SHOW_TIME :                                        55B2 C |
 PZLGAME_MAKEBOXES :           4FC6 C |
*PZLGAME_MAKEBOXES.BOXBRDRLIST :                                       54C6 C |
 PZLGAME_MAKEBOXES.BRDRDBL1 :  548A C |  PZLGAME_MAKEBOXES.BRDRDBL2 :  54C4 C |
 PZLGAME_MAKEBOXES.BRDR_DOTOPBOTM :                                    541E C |
 PZLGAME_MAKEBOXES.BRDR_PIECE :                                        5450 C |
 PZLGAME_MAKEBOXES.CLMN_FIRST :                                        5384 C |
 PZLGAME_MAKEBOXES.CLMN_LOOP : 53B8 C |  PZLGAME_MAKEBOXES.CLMN_NEXT : 53C0 C |
 PZLGAME_MAKEBOXES.CLRALL :    530A C |
 PZLGAME_MAKEBOXES.DO_DOUBLE_RES :                                     51A8 C |
 PZLGAME_MAKEBOXES.GRBG_PLAYER :                                       5326 C |
 PZLGAME_MAKEBOXES.GRBG_PLAYER2 :                                      52F6 C |
 PZLGAME_MAKEBOXES.LFTLOOP :   513A C |  PZLGAME_MAKEBOXES.LFTLOOPDB : 526E C |
 PZLGAME_MAKEBOXES.NOBOX_GRBG :                                        5414 C |
 PZLGAME_MAKEBOXES.NOBOX_GRBG2 :                                       5312 C |
 PZLGAME_MAKEBOXES.NODBLEY :   50F2 C |  PZLGAME_MAKEBOXES.NODBLEY2 :  5156 C |
 PZLGAME_MAKEBOXES.NODBLEY2DB :                                        528A C |
 PZLGAME_MAKEBOXES.NODBLEYBT : 50B8 C |  PZLGAME_MAKEBOXES.NODBLEYDB : 5226 C |
 PZLGAME_MAKEBOXES.NODBLEYTP : 5076 C |
 PZLGAME_MAKEBOXES.NO_EXUPDWN :                                        52D8 C |
 PZLGAME_MAKEBOXES.PLYRLOOP :  5004 C |  PZLGAME_MAKEBOXES.RGHTLOOP :  5198 C |
 PZLGAME_MAKEBOXES.RGHTLOOPDB :                                        52CC C |
*PZLGAME_MAKEBOXES.SINGLE_ONLY :                                       505C C |
 PZLGAME_MAKEBOXES.TOPMID :    5436 C |  PZLGAME_MAKEBOXES.XLOOP :     4FEE C |
 PZLGAME_MAKEBOXES.YLOOP :     4FD8 C |  PZLGAME_MAKEBOXES.ZERHEIGHT : 5346 C |
 PZLGAME_MAKEBOXES.ZERWIDTH :  5350 C |  PZLGAME_MKSWAPANDSPR :        6A88 C |
 PZLGAME_MKSWAPANDSPR.ANIMATE_COORD :                                  6D94 C |
 PZLGAME_MKSWAPANDSPR.BOXOFF_BLK :                                     6B16 C |
 PZLGAME_MKSWAPANDSPR.BOXOFF_BLK2 :                                    6D26 C |
 PZLGAME_MKSWAPANDSPR.BOXOFF_SHD :                                     6BFC C |
 PZLGAME_MKSWAPANDSPR.CURSOR0 :                                        6E16 C |
 PZLGAME_MKSWAPANDSPR.CURSOR0_1 :                                      6E2E C |
 PZLGAME_MKSWAPANDSPR.CURSOR1 :                                        6E5C C |
 PZLGAME_MKSWAPANDSPR.CURSOR2 :                                        6EA0 C |
 PZLGAME_MKSWAPANDSPR.CURSOR2_1 :                                      6EAE C |
 PZLGAME_MKSWAPANDSPR.CURSOR3 :                                        6EE0 C |
 PZLGAME_MKSWAPANDSPR.DONT_DECR :                                      6AFA C |
 PZLGAME_MKSWAPANDSPR.FINISHSPR :                                      6C16 C |
 PZLGAME_MKSWAPANDSPR.FIX_CURSOR :                                     6AF6 C |
 PZLGAME_MKSWAPANDSPR.FRAME0_6 :                                       6E6A C |
 PZLGAME_MKSWAPANDSPR.FRAME0_6DB :                                     6EEE C |
 PZLGAME_MKSWAPANDSPR.NEXT :   6A96 C |  PZLGAME_MKSWAPANDSPR.NODBLE : 6DFE C |
 PZLGAME_MKSWAPANDSPR.NORML :  6B84 C |  PZLGAME_MKSWAPANDSPR.NO_BOX : 6B60 C |
 PZLGAME_MKSWAPANDSPR.SCRIPT_1 :                                       6C20 C |
 PZLGAME_MKSWAPANDSPR.SCRIPT_2 :                                       6C30 C |
 PZLGAME_MKSWAPANDSPR.SCRIPT_3 :                                       6C96 C |
 PZLGAME_MKSWAPANDSPR.SCRIPT_4 :                                       6D28 C |
 PZLGAME_MKSWAPANDSPR.SETXSRCSPD :                                     6DA2 C |
 PZLGAME_MKSWAPANDSPR.SHOWBLK_CURSOR :                                 6DAC C |
 PZLGAME_MKSWAPANDSPR.SPRCURSOR_LIST :                                 6E0E C |
 PZLGAME_MKSWAPANDSPR.SRCXLOWR :                                       6DA6 C |
 PZLGAME_MKSWAPANDSPR.SRCXMVLEFT :                                     6D9E C |
 PZLGAME_MKSWAPANDSPR.SWAPMODE_SCRIPT :                                6C18 C |
 PZLGAME_MKSWAPANDSPR.ZERDEST :                                        6CBA C |
 PZLGAME_PLAYERINPUTS :        6664 C |
 PZLGAME_PLAYERINPUTS.ABCONLY :                                        6942 C |
*PZLGAME_PLAYERINPUTS.ALLOWIT :                                        6A4A C |
 PZLGAME_PLAYERINPUTS.BOX_OFF :                                        68C2 C |
 PZLGAME_PLAYERINPUTS.CHKTRGGR_POS :                                   6902 C |
 PZLGAME_PLAYERINPUTS.CLR_ZERO :                                       6824 C |
 PZLGAME_PLAYERINPUTS.IGNORE : 6A86 C |
 PZLGAME_PLAYERINPUTS.KEEP_COUNT :                                     6738 C |
 PZLGAME_PLAYERINPUTS.LASTCHK :                                        6880 C |
*PZLGAME_PLAYERINPUTS.MODE_0 : 697E C |  PZLGAME_PLAYERINPUTS.MODE_1 : 69F8 C |
 PZLGAME_PLAYERINPUTS.NAH :    67E2 C |
 PZLGAME_PLAYERINPUTS.NEW_BLOCK :                                      6A14 C |
 PZLGAME_PLAYERINPUTS.NORMAL_PAUSE :                                   66D0 C |
 PZLGAME_PLAYERINPUTS.NOT_A :  6952 C |  PZLGAME_PLAYERINPUTS.NOT_B :  695E C |
 PZLGAME_PLAYERINPUTS.NOT_C :  696A C |
 PZLGAME_PLAYERINPUTS.NOT_DOWN :                                       67BC C |
 PZLGAME_PLAYERINPUTS.NOT_LEFT :                                       6788 C |
 PZLGAME_PLAYERINPUTS.NOT_OUT2 :                                       66FA C |
 PZLGAME_PLAYERINPUTS.NOT_RIGHT :                                      676C C |
 PZLGAME_PLAYERINPUTS.NOT_UP : 67D8 C |  PZLGAME_PLAYERINPUTS.NOT_X :  691E C |
 PZLGAME_PLAYERINPUTS.NOT_Y :  692E C |  PZLGAME_PLAYERINPUTS.NOT_Z :  693E C |
 PZLGAME_PLAYERINPUTS.NO_FALLPR :                                      6828 C |
 PZLGAME_PLAYERINPUTS.NO_PICK :                                        683A C |
 PZLGAME_PLAYERINPUTS.NO_PRELOCK :                                     682C C |
*PZLGAME_PLAYERINPUTS.NO_RES : 68CC C |
 PZLGAME_PLAYERINPUTS.NO_SPDUP :                                       68C2 C |
 PZLGAME_PLAYERINPUTS.OLDTRGGR :                                       6850 C |
 PZLGAME_PLAYERINPUTS.PICK_BLOCK :                                     696E C |
 PZLGAME_PLAYERINPUTS.PRESS_ONCE :                                     673A C |
 PZLGAME_PLAYERINPUTS.RESTART_GAME :                                   68CE C |
 PZLGAME_PLAYERINPUTS.RETURN_MENU :                                    68F0 C |
 PZLGAME_PLAYERINPUTS.THIS_PLYR :                                      6692 C |
 PZLGAME_PLAYERINPUTS.TMROFF : 668A C | *PZLGAME_PLAYERINPUTS.TYPE0 :  690E C |
 PZLGAME_PLAYERINPUTS.TYPE0_SPDUP :                                    68BC C |
 PZLGAME_PLAYERINPUTS.TYPE3 :  67A6 C |  PZLGAME_UPDATEBOXES :         5C8C C |
 PZLGAME_UPDATEBOXES.ALRDYCLR :                                        64F6 C |
 PZLGAME_UPDATEBOXES.BADV :    65DE C |
 PZLGAME_UPDATEBOXES.BLKFLLSC_NOEX :                                   614E C |
 PZLGAME_UPDATEBOXES.BLKFLL_BOTACTV :                                  610C C |
 PZLGAME_UPDATEBOXES.BLKFLL_BREAK :                                    6296 C |
*PZLGAME_UPDATEBOXES.BLKFLL_CANCHK :                                   62C4 C |
 PZLGAME_UPDATEBOXES.BLKFLL_CANFALL :                                  6064 C |
 PZLGAME_UPDATEBOXES.BLKFLL_CANSET :                                   62DA C |
 PZLGAME_UPDATEBOXES.BLKFLL_CANSET2 :                                  5FA8 C |
 PZLGAME_UPDATEBOXES.BLKFLL_CLMN :                                     5EFE C |
 PZLGAME_UPDATEBOXES.BLKFLL_CLRINSTD :                                 60CA C |
 PZLGAME_UPDATEBOXES.BLKFLL_CNTUP :                                    618C C |
 PZLGAME_UPDATEBOXES.BLKFLL_CPYMTCH :                                  6300 C |
 PZLGAME_UPDATEBOXES.BLKFLL_DECMONLY :                                 6024 C |
 PZLGAME_UPDATEBOXES.BLKFLL_DECTMOUT :                                 603C C |
 PZLGAME_UPDATEBOXES.BLKFLL_DONTRESTR :                                61DC C |
 PZLGAME_UPDATEBOXES.BLKFLL_EXADD :                                    63EC C |
 PZLGAME_UPDATEBOXES.BLKFLL_EXROLL :                                   61B6 C |
 PZLGAME_UPDATEBOXES.BLKFLL_FINISH :                                   636A C |
 PZLGAME_UPDATEBOXES.BLKFLL_FORCEFALL :                                633E C |
*PZLGAME_UPDATEBOXES.BLKFLL_FROMTRSH :                                 60FA C |
 PZLGAME_UPDATEBOXES.BLKFLL_GUESSBLK :                                 6270 C |
 PZLGAME_UPDATEBOXES.BLKFLL_MRGEFALL :                                 6342 C |
 PZLGAME_UPDATEBOXES.BLKFLL_MRGESKIP :                                 6188 C |
*PZLGAME_UPDATEBOXES.BLKFLL_MTCHEXIT :                                 6320 C |
 PZLGAME_UPDATEBOXES.BLKFLL_NEXT :                                     6344 C |
 PZLGAME_UPDATEBOXES.BLKFLL_NEXT2 :                                    5F66 C |
 PZLGAME_UPDATEBOXES.BLKFLL_NEXT3 :                                    6218 C |
 PZLGAME_UPDATEBOXES.BLKFLL_NEXT4 :                                    5FC6 C |
 PZLGAME_UPDATEBOXES.BLKFLL_NEXT5 :                                    608A C |
 PZLGAME_UPDATEBOXES.BLKFLL_NOFLLBT :                                  5FEA C |
 PZLGAME_UPDATEBOXES.BLKFLL_NOGUESS :                                  62E2 C |
 PZLGAME_UPDATEBOXES.BLKFLL_NORMLBLOCK :                               60EE C |
 PZLGAME_UPDATEBOXES.BLKFLL_NOTIMER :                                  61FA C |
 PZLGAME_UPDATEBOXES.BLKFLL_NOTRSHSHK :                                6252 C |
 PZLGAME_UPDATEBOXES.BLKFLL_NOTTRSH :                                  62B8 C |
 PZLGAME_UPDATEBOXES.BLKFLL_NOTTRSH2 :                                 5F86 C |
 PZLGAME_UPDATEBOXES.BLKFLL_NRMLINCRM :                                61E4 C |
 PZLGAME_UPDATEBOXES.BLKFLL_OVRWRT :                                   5F22 C |
 PZLGAME_UPDATEBOXES.BLKFLL_REROLL :                                   6278 C |
 PZLGAME_UPDATEBOXES.BLKFLL_RESINCRM :                                 60DC C |
 PZLGAME_UPDATEBOXES.BLKFLL_ROW :                                      5EE8 C |
 PZLGAME_UPDATEBOXES.BLKFLL_SETFLL :                                   5F58 C |
*PZLGAME_UPDATEBOXES.BLKFLL_SETNOW :                                   61EE C |
 PZLGAME_UPDATEBOXES.BLKFLL_SETTOPFLL :                                6322 C |
 PZLGAME_UPDATEBOXES.BLKFLL_SKIPSCORE :                                615A C |
 PZLGAME_UPDATEBOXES.BLKFLL_TIMEDEL :                                  6062 C |
 PZLGAME_UPDATEBOXES.BLKFLL_TOPBLNK :                                  6014 C |
 PZLGAME_UPDATEBOXES.BLKFLL_TRSHCHN :                                  5FB2 C |
 PZLGAME_UPDATEBOXES.BLKFLL_TRSHCNTFALL :                              629C C |
 PZLGAME_UPDATEBOXES.BLKFLL_TRSHCNTTR :                                6316 C |
 PZLGAME_UPDATEBOXES.BLKFLL_TRSHINCR :                                 60E6 C |
 PZLGAME_UPDATEBOXES.BLKFLL_TRSHMCNT :                                 6010 C |
 PZLGAME_UPDATEBOXES.BLKFLL_TRSHMID :                                  6318 C |
 PZLGAME_UPDATEBOXES.BLKFLL_TRSHTR :                                   5FDE C |
 PZLGAME_UPDATEBOXES.BOX_PAUSED :                                      663C C |
 PZLGAME_UPDATEBOXES.COUNT_TMOUT :                                     644C C |
 PZLGAME_UPDATEBOXES.DONTSHAKE :                                       65C2 C |
 PZLGAME_UPDATEBOXES.FORCE_GAMEOVER :                                  6422 C |
 PZLGAME_UPDATEBOXES.HORZ_CLMN :                                       5CE8 C |
*PZLGAME_UPDATEBOXES.HORZ_NEW :                                        5CF4 C |
 PZLGAME_UPDATEBOXES.HORZ_ROW :                                        5CF8 C |
 PZLGAME_UPDATEBOXES.HZ_CHECK :                                        5D2E C |
*PZLGAME_UPDATEBOXES.HZ_CHECK2 :                                       5D20 C |
 PZLGAME_UPDATEBOXES.HZ_DELBLOCKS :                                    5D5A C |
 PZLGAME_UPDATEBOXES.HZ_DELLOOP :                                      5D68 C |
 PZLGAME_UPDATEBOXES.HZ_EXIT : 5DBA C |  PZLGAME_UPDATEBOXES.HZ_LAST : 5D4E C |
 PZLGAME_UPDATEBOXES.HZ_NEXT : 5D3C C |
 PZLGAME_UPDATEBOXES.HZ_NEXT2 :                                        5D1C C |
*PZLGAME_UPDATEBOXES.HZ_NEXT3 :                                        5D10 C |
 PZLGAME_UPDATEBOXES.HZ_NEXT4 :                                        5D16 C |
 PZLGAME_UPDATEBOXES.HZ_NOCOMB :                                       5DA8 C |
 PZLGAME_UPDATEBOXES.HZ_NOREQ :                                        5DB8 C |
 PZLGAME_UPDATEBOXES.HZ_SAVE : 5D3A C |
 PZLGAME_UPDATEBOXES.HZ_SETTRSH :                                      5DAC C |
 PZLGAME_UPDATEBOXES.INCRMT_TOUT :                                     6442 C |
*PZLGAME_UPDATEBOXES.KEEP_RISE :                                       6476 C |
 PZLGAME_UPDATEBOXES.KEEP_RISE2 :                                      6472 C |
*PZLGAME_UPDATEBOXES.KEEP_RISE3 :                                      6464 C |
*PZLGAME_UPDATEBOXES.MK_ALLOW :                                        657E C |
 PZLGAME_UPDATEBOXES.MK_RNDM : 656C C |
 PZLGAME_UPDATEBOXES.MTCHTRSH_FULL :                                   63D4 C |
 PZLGAME_UPDATEBOXES.MTCHTRSH_ROLL :                                   63BA C |
 PZLGAME_UPDATEBOXES.MTCH_TRSHADD :                                    63E0 C |
 PZLGAME_UPDATEBOXES.MTCH_TRSHSPDUP :                                  6392 C |
 PZLGAME_UPDATEBOXES.MV_BLK :  6548 C |  PZLGAME_UPDATEBOXES.NEL2T :   662A C |
 PZLGAME_UPDATEBOXES.NEL3T :   6628 C |  PZLGAME_UPDATEBOXES.NEL4T :   6626 C |
 PZLGAME_UPDATEBOXES.NO_COMBOCHNG :                                    64D4 C |
 PZLGAME_UPDATEBOXES.NO_COMBOSPDUP :                                   64F0 C |
 PZLGAME_UPDATEBOXES.NO_MTCHCHK :                                      5EAC C |
 PZLGAME_UPDATEBOXES.NO_PLYR : 662E C |
 PZLGAME_UPDATEBOXES.NO_SMLTRSH :                                      64A8 C |
 PZLGAME_UPDATEBOXES.NO_SOUND :                                        6662 C |
 PZLGAME_UPDATEBOXES.NO_TRSHREQ :                                      605E C |
 PZLGAME_UPDATEBOXES.NXT_CLMN :                                        653C C |
 PZLGAME_UPDATEBOXES.RANOUT_WDTH :                                     655A C |
 PZLGAME_UPDATEBOXES.THIS_PLYR :                                       5CA2 C |
 PZLGAME_UPDATEBOXES.TOPLWR :  65A6 C |
 PZLGAME_UPDATEBOXES.TRSHEXFALL :                                      60A2 C |
 PZLGAME_UPDATEBOXES.TRSHIDL_CLRLP :                                   60CC C |
 PZLGAME_UPDATEBOXES.TRSHIDL_SET :                                     5FF6 C |
 PZLGAME_UPDATEBOXES.UPD_VSCRL :                                       6596 C |
 PZLGAME_UPDATEBOXES.VERT_CLMN :                                       5DC4 C |
 PZLGAME_UPDATEBOXES.VERT_NEW :                                        5DD0 C |
 PZLGAME_UPDATEBOXES.VERT_ROW :                                        5DD4 C |
 PZLGAME_UPDATEBOXES.VLOOP :   65D4 C |
 PZLGAME_UPDATEBOXES.VT_CHECK :                                        5E0A C |
 PZLGAME_UPDATEBOXES.VT_DELBLOCKS :                                    5E38 C |
 PZLGAME_UPDATEBOXES.VT_DELLOOP :                                      5E4A C |
 PZLGAME_UPDATEBOXES.VT_EXIT : 5EA6 C |  PZLGAME_UPDATEBOXES.VT_LAST : 5E2C C |
 PZLGAME_UPDATEBOXES.VT_NEXT : 5E1A C |
 PZLGAME_UPDATEBOXES.VT_NEXT2 :                                        5DF8 C |
 PZLGAME_UPDATEBOXES.VT_NEXT4 :                                        5DF2 C |
 PZLGAME_UPDATEBOXES.VT_NOCOMB :                                       5E94 C |
 PZLGAME_UPDATEBOXES.VT_ONLYMTCH :                                     5E8A C |
 PZLGAME_UPDATEBOXES.VT_SAVE : 5E18 C |
 PZLGAME_UPDATEBOXES.VT_SETTRSH :                                      5E98 C |
 PZLGAME_UPDATEBOXES.VZ_NOREQ :                                        5EA4 C |
 PZLGAME_UPDSCORES :           5AFC C |
*PZLGAME_UPDSCORES.DRWSCOR_LABEL :                                     5B06 C |
 PZLGAME_UPDSCORES.NO_PLYR :   5C16 C |  PZLGAME_UPDSCORES.NXTNMBR :   5C22 C |
 PZLGAME_UPDSCORES.NXTNMBR2 :  5C5C C |
 PZLGAME_UPDSCORES.SHOW_COMBO :                                        5C52 C |
 PZLGAME_UPDSCORES.SHOW_SCORE :                                        5C18 C |
*PZLGAME_UPDSCORES.SHOW_TIME : 5B52 C |  PZLVINT_PLYRDRWLINE :         593A C |
 PZLVINT_PLYRDRWLINE.DBLEMODE :                                        5A30 C |
*PZLVINT_PLYRDRWLINE.NO_PLYR_DRWL :                                    5A2E C |
 PZLVINT_PLYRDRWLINE.NXT_ONE : 59AA C |
 PZLVINT_PLYRDRWLINE.NXT_ONE_D :                                       5A8A C |
 PZLVINT_PLYRDRWLINE.TOP_HALF :                                        5A5E C |
 PZLVINT_PLYRDRWTASKS :        5676 C |
 PZLVINT_PLYRDRWTASKS.BLKBRGHT :                                       579A C |
 PZLVINT_PLYRDRWTASKS.BLKBRGHT_DBLE :                                  58FC C |
*PZLVINT_PLYRDRWTASKS.BLNKME : 5782 C |
 PZLVINT_PLYRDRWTASKS.BLNKME_DBLE :                                    58F2 C |
 PZLVINT_PLYRDRWTASKS.DBLEMODE :                                       57F0 C |
 PZLVINT_PLYRDRWTASKS.DRW_ALL :                                        5696 C |
 PZLVINT_PLYRDRWTASKS.FLASHME :                                        5794 C |
 PZLVINT_PLYRDRWTASKS.FLASHME_DBLE :                                   58F6 C |
 PZLVINT_PLYRDRWTASKS.FORCE_DRW :                                      570C C |
 PZLVINT_PLYRDRWTASKS.FORCE_DRW_DBL :                                  585E C |
 PZLVINT_PLYRDRWTASKS.NO_DRWALL :                                      5688 C |
 PZLVINT_PLYRDRWTASKS.NO_DRWFLG :                                      57C0 C |
 PZLVINT_PLYRDRWTASKS.NO_PLYR :                                        5694 C |
*PZLVINT_PLYRDRWTASKS.NO_PLYR_DRWALL :                                 57EE C |
 PZLVINT_PLYRDRWTASKS.NXT_CLMN :                                       56EE C |
 PZLVINT_PLYRDRWTASKS.NXT_CLMN_DBL :                                   5842 C |
 PZLVINT_PLYRDRWTASKS.NXT_ROW :                                        56E0 C |
 PZLVINT_PLYRDRWTASKS.NXT_ROW_DBL :                                    5834 C |
 PZLVINT_PLYRDRWTASKS.SHDWZERO :                                       57A8 C |
 PZLVINT_PLYRDRWTASKS.SHDWZERO_DBLE :                                  5904 C |
 PZLVINT_PLYRDRWTASKS.SKIP_WRITE_DBL :                                 590C C |
 PZLVINT_PLYRDRWTASKS.TOP_HALF :                                       5816 C |
 PZLVINT_PLYRDRWTASKS.TRSHBLK :                                        5788 C |
 PZLVINT_PLYRDRWTASKS.WRITEBLK :                                       57AC C |
 PZLVINT_PLYRDRWTASKS.WRITEBLK_DBLE :                                  5906 C |
*PZMODE_BATTLE :                  2 - | *PZMODE_MARATHON :                1 - |
 RAM_FADEBUFF :    FFFFFFFFFFFFA71A C | *RAM_FADEEND :     FFFFFFFFFFFFA716 C |
*RAM_FADESTART :   FFFFFFFFFFFFA714 C |  RAM_FADETARGET :  FFFFFFFFFFFFA79A C |
 RAM_FADETIMER :   FFFFFFFFFFFFA718 C |
 RAM_GLBLFRAMECNT :                                        FFFFFFFFFFFF86EA C |
 RAM_GLBLRNDSEEDS :                                        FFFFFFFFFFFF86E2 C |
 RAM_GLBL_GAMEMTCHFLAGS :                                  FFFFFFFFFFFF86E0 C |
*RAM_GLBL_NUMBOXES :                                       FFFFFFFFFFFF86DE C |
*RAM_GLBL_NUMPLAYERS :                                     FFFFFFFFFFFF86DC C |
 RAM_GLBL_PZLBOXES :                                       FFFFFFFFFFFF8424 C |
 RAM_GLBL_PZLCURSORS :                                     FFFFFFFFFFFF856C C |
 RAM_GLBL_PZLSCORES :                                      FFFFFFFFFFFF83D4 C |
 RAM_GLOBAL :      FFFFFFFFFFFF8000 C |  RAM_GOTOHBLNK :   FFFFFFFFFFFFA6F0 C |
 RAM_GOTOVBLNK :   FFFFFFFFFFFFA6F6 C |  RAM_HORSCROLL :   FFFFFFFFFFFF8000 C |
 RAM_INPUTDATA :   FFFFFFFFFFFFA6FC C |  RAM_LOCAL :       FFFFFFFFFFFF86F0 C |
 RAM_MDSYSTEM :    FFFFFFFFFFFFA6F0 C |  RAM_MDVIDEO :     FFFFFFFFFFFFA714 C |
 RAM_PGAME_BGSCRLX :                                       FFFFFFFFFFFF8B70 C |
 RAM_PGAME_BGSCRLY :                                       FFFFFFFFFFFF8B72 C |
 RAM_PGAME_BLOCKDATA :       FF0000 C |
 RAM_PGAME_CURSORFRAME :                                   FFFFFFFFFFFF8DAA C |
 RAM_PGAME_CURSORTIMER :                                   FFFFFFFFFFFF8DAC C |
*RAM_PGAME_DBGCOLOR :                                      FFFFFFFFFFFF8DAE C |
*RAM_PGAME_GAMEMODE :                                      FFFFFFFFFFFF8DB6 C |
 RAM_PGAME_GLBLTIMER :                                     FFFFFFFFFFFF8B6C C |
 RAM_PGAME_HINTCOUNT :                                     FFFFFFFFFFFF8DA4 C |
 RAM_PGAME_MATCHSTRTTIME :                                 FFFFFFFFFFFF8DB4 C |
 RAM_PGAME_PLYRSON :                                       FFFFFFFFFFFF8DB2 C |
 RAM_PGAME_SOUND : FFFFFFFFFFFF8DB8 C |
 RAM_PGAME_SPLITMODE :                                     FFFFFFFFFFFF8DA6 C |
 RAM_PGAME_SPRITEDATA :                                    FFFFFFFFFFFF8B74 C |
*RAM_PGAME_STARTCOUNT :                                    FFFFFFFFFFFF8DA8 C |
 RAM_PGAME_VINT :  FFFFFFFFFFFF8DB0 C |
 RAM_PGAME_XANIMBUFF :                                     FFFFFFFFFFFF8798 C |
 RAM_PGAME_YANIMBUFF :                                     FFFFFFFFFFFF8B18 C |
 RAM_PGAME_YSCRL_MAIN :                                    FFFFFFFFFFFF86F0 C |
 RAM_PGAME_YSCRL_SUB :                                     FFFFFFFFFFFF8744 C |
*RAM_PUZLGAMEMODE :                                        FFFFFFFFFFFF86EE C |
 RAM_TITE_VERBGMENU :                                      FFFFFFFFFFFF892C C |
 RAM_TITE_VERBOT : FFFFFFFFFFFF8928 C |  RAM_TITL_USROPT : FFFFFFFFFFFF8932 C |
 RAM_TTLE_HORBG :  FFFFFFFFFFFF8930 C |  RAM_TTLE_HORVAL : FFFFFFFFFFFF8920 C |
 RAM_TTLE_SPRITEDATA :                                     FFFFFFFFFFFF86F0 C |
 RAM_TTLE_VERBG :  FFFFFFFFFFFF892E C |  RAM_TTLE_VERVAL : FFFFFFFFFFFF8924 C |
 RAM_VDPCACHE :    FFFFFFFFFFFFA87C C |  RAM_VERSCROLL :   FFFFFFFFFFFF8380 C |
 RAM_VIDPRNTLIST : FFFFFFFFFFFFA81A C |  RAM_VIDPRNTVRAM : FFFFFFFFFFFFA87A C |
*RELAXED :                        0 - |  ROM_END :                    2000B C |
 SAMPLE_END :                    27 C |  SAMPLE_FLAGS :                  1F C |
 SAMPLE_LOOP :                   2A C |  SAMPLE_READ :                   20 C |
 SAMPLE_SPEED :                  2D C |  SAMPLE_START :                  24 C |
 SCORBOX_BOXADDR :                0 C | *SCORBOX_HEIGHT :                 C C |
 SCORBOX_STATUS :                 4 C |  SCORBOX_TYPE :                   E C |
*SCORBOX_WIDTH :                  A C |  SCORBOX_X :                      6 C |
 SCORBOX_Y :                      8 C |  SET_MAXBLKMTCH :                 3 - |
*SET_MAXTIMEOUT :               12C - |  SET_MAXUSERBLKS :                8 - |
 SET_MENUTOPLINE :               7B - |  SET_STRTTRSHIDS :                D - |
 SFXDATA_BLK :                 131E C |  SFXDATA_INS :                 1425 C |
 SFXDATA_PAT :                 1324 C | *SHOWSTR_CUSTOM :              34D0 C |
 SHOWSTR_CUSTOM.EXIT :         34F6 C |  SHOWSTR_CUSTOM.LINE :         34F2 C |
 SHOWSTR_CUSTOM.LOOP :         34DE C |  SHOWSTR_CUSTOM.RENEW :        34DA C |
*SHOWVAL_CUSTOM :              34F8 C |  SHOWVAL_CUSTOM.LOWA :         351E C |
 SHOWVAL_CUSTOM.LUPN :         350C C |  SIZEOF_BOX :                    52 C |
 SIZEOF_CURSOR :                 5C C |  SIZEOF_GLOBAL :   FFFFFFFFFFFF86F0 C |
 SIZEOF_INPUT :                   6 C | *SIZEOF_MDRAM :    FFFFFFFFFFFFA894 C |
 SIZEOF_MDSYS :    FFFFFFFFFFFFA714 C |  SIZEOF_MDVID :    FFFFFFFFFFFFA894 C |
*SIZEOF_PGAME :    FFFFFFFFFFFF8DBA C |  SIZEOF_SCORBOX :                10 C |
 SNDBUFF_CHNLBUFF_1 :           F8A C |  SNDBUFF_CHNLBUFF_2 :          10CA C |
*SNDBUFF_STRMROM :             121E C |  SNDBUFF_TRACK_1 :              F0A C |
 SNDBUFF_TRACK_2 :              F4A C |  SNDBUFF_USEDCHNLS :           120A C |
 SNDBUFF_USEDCHNLS_2 :         1214 C |  SNDDRV_FMAUTOSET :             C4B C |
 SNDDRV_FMSET_1 :               C52 C |  SNDDRV_FMSET_2 :               C5D C |
 SNDDRV_INIT :                  1A8 C |  SNDDRV_READTRACK :             1F8 C |
 SNDDRV_READTRACK.CHIP_SETUP :  3BD C |
 SNDDRV_READTRACK.DONTUPD_TRCK :                                        27A C |
 SNDDRV_READTRACK.DWN_EXFINE :  64F C |  SNDDRV_READTRACK.DWN_FINE :    65F C |
 SNDDRV_READTRACK.EFF_A :       5F1 C |  SNDDRV_READTRACK.EFF_B :       5F9 C |
 SNDDRV_READTRACK.EFF_C :       609 C |  SNDDRV_READTRACK.EFF_D :       617 C |
 SNDDRV_READTRACK.EFF_E :       631 C |  SNDDRV_READTRACK.EFF_F :       671 C |
 SNDDRV_READTRACK.EFF_LIST :    5BB C |  SNDDRV_READTRACK.EFF_NULL :    5BA C |
 SNDDRV_READTRACK.EFF_X :       6AA C |  SNDDRV_READTRACK.ENVBYTE_EOF : 3A7 C |
 SNDDRV_READTRACK.ENVBYTE_GOTO :                                        3A1 C |
*SNDDRV_READTRACK.EXIT_BUSY :   2F1 C |  SNDDRV_READTRACK.EXIT_NOTES :  2F0 C |
 SNDDRV_READTRACK.FMFILES :     873 C |  SNDDRV_READTRACK.FMPAN_LIST :  6B9 C |
 SNDDRV_READTRACK.FM_CHKDAC :   76C C |  SNDDRV_READTRACK.FM_KEYSOFF :  783 C |
 SNDDRV_READTRACK.FM_NORMALCHNL :                                       4EA C |
 SNDDRV_READTRACK.FM_SETTLOFF : 795 C |  SNDDRV_READTRACK.FM_TURNOFF :  78F C |
 SNDDRV_READTRACK.FORCE_ON :    21C C |  SNDDRV_READTRACK.FREQRN_FM :   6EF C |
 SNDDRV_READTRACK.FREQRN_NOT3 : 6E3 C |  SNDDRV_READTRACK.FREQRN_PSG :  75D C |
 SNDDRV_READTRACK.FREQRN_SMPL : 71F C |  SNDDRV_READTRACK.GOSRCH :      4B2 C |
*SNDDRV_READTRACK.GO_DOWN :     621 C |  SNDDRV_READTRACK.GO_UP :       627 C |
 SNDDRV_READTRACK.GRAB_INSTSLOT :                                       6BD C |
 SNDDRV_READTRACK.KEEP_CTRL :   2A8 C |  SNDDRV_READTRACK.LEFTFM :      48A C |
 SNDDRV_READTRACK.LIST_DOEFF :  AB5 C |  SNDDRV_READTRACK.LOOP_ME :     285 C |
 SNDDRV_READTRACK.LOWPRIOSET :  473 C |  SNDDRV_READTRACK.LOWUNLKSET :  51F C |
*SNDDRV_READTRACK.NEXT_PSG :    3BC C |  SNDDRV_READTRACK.NOTDAC :      971 C |
 SNDDRV_READTRACK.NOTYPE3 :     4DE C |  SNDDRV_READTRACK.NOT_DAC :     782 C |
 SNDDRV_READTRACK.NOT_NOISE :   354 C |  SNDDRV_READTRACK.NOT_NSE :     A7C C |
 SNDDRV_READTRACK.NOT_NSE3 :    A6C C |  SNDDRV_READTRACK.NO_CHNL3F :   939 C |
 SNDDRV_READTRACK.NO_CHNL6 :    7DA C |  SNDDRV_READTRACK.NO_CHNL6F :   92F C |
 SNDDRV_READTRACK.NO_EFF :      2D4 C |  SNDDRV_READTRACK.NO_INST :     2BD C |
 SNDDRV_READTRACK.NO_KEYCUT :   94E C |  SNDDRV_READTRACK.NO_MAX :      3B3 C |
 SNDDRV_READTRACK.NO_NEWEFF :   427 C |  SNDDRV_READTRACK.NO_NEWINST :  40E C |
 SNDDRV_READTRACK.NO_NEWVOL :   466 C |  SNDDRV_READTRACK.NO_NOTE :     2B4 C |
 SNDDRV_READTRACK.NO_NOTEREQ :  44A C |  SNDDRV_READTRACK.NO_UPD_FREQ : 37E C |
 SNDDRV_READTRACK.NO_VOL :      2C6 C |  SNDDRV_READTRACK.PLUSFM :      484 C |
 SNDDRV_READTRACK.PNTOO_LOW :   A46 C |  SNDDRV_READTRACK.PNTOO_MUCH :  A41 C |
 SNDDRV_READTRACK.PNTOPPSGV :   A52 C |  SNDDRV_READTRACK.PRTDWN_CONT : 670 C |
 SNDDRV_READTRACK.PRTUP_CONT :  6A9 C |  SNDDRV_READTRACK.PSG_EF :      B22 C |
 SNDDRV_READTRACK.PSG_ENVLOPE : 331 C |  SNDDRV_READTRACK.PSG_INSTR :   3FB C |
 SNDDRV_READTRACK.ROW_COUNTDWN :                                        2F7 C |
 SNDDRV_READTRACK.RUN_EFFECT :  A9C C |
 SNDDRV_READTRACK.RUN_FREQUENCY :                                       6D3 C |
 SNDDRV_READTRACK.SEARCH_SLOT : 495 C |
 SNDDRV_READTRACK.SETFM_SAMPLE :                                        542 C |
 SNDDRV_READTRACK.SETFREQ_PSG : 567 C |  SNDDRV_READTRACK.SETPSG_VOL :  AFF C |
 SNDDRV_READTRACK.SET_D :       AEB C |  SNDDRV_READTRACK.SET_EFFECT :  5A1 C |
 SNDDRV_READTRACK.SET_E_F :     B05 C |  SNDDRV_READTRACK.SET_FM3REG :  91A C |
 SNDDRV_READTRACK.SET_FM_FREQ : 91F C |  SNDDRV_READTRACK.SET_FM_INS :  7BB C |
 SNDDRV_READTRACK.SET_FM_VOL :  962 C |
 SNDDRV_READTRACK.SET_FREQUENCY :                                       4CE C |
 SNDDRV_READTRACK.SET_KEYCUT :  94A C |  SNDDRV_READTRACK.SET_PORTAM :  66A C |
 SNDDRV_READTRACK.SET_PSG_FREQ :                                        A59 C |
 SNDDRV_READTRACK.SET_PSG_VOL : A35 C |  SNDDRV_READTRACK.SET_SAMPL :   A03 C |
 SNDDRV_READTRACK.SET_SMPFLAG : 758 C |  SNDDRV_READTRACK.SET_TIMER :   2ED C |
 SNDDRV_READTRACK.SET_VOL :     3B8 C |  SNDDRV_READTRACK.SET_VOLUME :  4C0 C |
 SNDDRV_READTRACK.SET_X :       B40 C |  SNDDRV_READTRACK.SKIP_BLOCK :  2E1 C |
 SNDDRV_READTRACK.SRCHFM :      4AC C |  SNDDRV_READTRACK.STOP_TRACK :  2E5 C |
 SNDDRV_READTRACK.TLV_LV1 :     81E C |  SNDDRV_READTRACK.TLV_LV2 :     83F C |
 SNDDRV_READTRACK.TLV_LV2_OK :  836 C |  SNDDRV_READTRACK.TLV_LV3 :     858 C |
 SNDDRV_READTRACK.TLV_LV4 :     868 C |  SNDDRV_READTRACK.TL_LV1 :      9B8 C |
 SNDDRV_READTRACK.TL_LV1_TM :   9B4 C |  SNDDRV_READTRACK.TL_LV2 :      9D9 C |
 SNDDRV_READTRACK.TL_LV2_OK :   9CD C |  SNDDRV_READTRACK.TL_LV2_TM :   9D5 C |
 SNDDRV_READTRACK.TL_LV3 :      9F1 C |  SNDDRV_READTRACK.TL_LV3_TM :   9ED C |
 SNDDRV_READTRACK.TL_LV4_TM :   9FE C |  SNDDRV_READTRACK.TOOLOW :      B37 C |
 SNDDRV_READTRACK.TOO_LOW :     98E C |  SNDDRV_READTRACK.TOO_MUCH :    989 C |
*SNDDRV_READTRACK.TRCK_RESTART :                                        235 C |
 SNDDRV_READTRACK.ULEFTFM :     536 C |  SNDDRV_READTRACK.UNLOCK_CHNL : 512 C |
 SNDDRV_READTRACK.UPLUSFM :     530 C |  SNDDRV_READTRACK.UP_EXFINE :   692 C |
 SNDDRV_READTRACK.UP_FINE :     69E C |  SNDDRV_READTRACK.USE_NEWEFF :  41B C |
 SNDDRV_READTRACK.USE_NEWINST : 3D3 C |  SNDDRV_READTRACK.USE_NEWVOL :  457 C |
 SNDDRV_READTRACK.USE_NOTEREQ : 435 C |  SNDDRV_READTRACK.VOL_ISPSG :   4CA C |
 SNDDRV_REQTRACK :              B53 C |  SNDDRV_REQTRACK.REQ01 :        B74 C |
 SNDDRV_REQTRACK.REQ02 :        BCD C |  SNDDRV_REQTRACK.REQ_LIST :     B6E C |
 SNDDRV_RESETCHAN :             BD1 C |  SNDDRV_RESETCHAN.DONTVOLFM :   C3E C |
 SNDDRV_RESETCHAN.FM_SHUT :     C36 C |  SNDDRV_RESETCHAN.INITCHNLS :   BED C |
 SNDDRV_RESETCHAN.LOWPRIO :     BDE C |  SNDDRV_RESETCHAN.NEXTTYPE :    BE1 C |
 SNDDRV_RESETCHAN.NXTFMCHNL :   C1F C |  SNDDRV_TRCKBUFFERS :           322 C |
 SOUND_INIT :                   25A C |  SOUND_INIT.CLEANUP :           280 C |
 SOUND_INIT.COPY :              296 C |  SOUND_INIT.WAIT :              26A C |
*SOUND_PLAYWAV :                356 C |  SOUND_PLAYWAV.WAIT :           362 C |
 SOUND_SETTRACK :               2B4 C |  SOUND_SETTRACK.WAIT :          2BC C |
*SOUND_STOPTRACK :              32A C |  SOUND_STOPTRACK.WAIT :         332 C |
*STR_COPYINFO :                372A C | *SYSCD_ARGS_M :              A12010 - |
*SYSCD_ARGS_S :              A12020 - | *SYSCD_BUS :                 A12000 - |
*SYSCD_CDCHOST :             A12008 - | *SYSCD_CDCMODE :             A12004 - |
*SYSCD_COMM_M :              A1200E - | *SYSCD_COMM_S :              A1200F - |
*SYSCD_HINT :                A12006 - | *SYSCD_MEMORY :              A12003 - |
*SYSCD_PRGRAM :               20000 - | *SYSCD_STOPWTCH :            A12008 - |
*SYSCD_WORDRAM :             200000 - | *SYSMARS_ID :                A130EC - |
*SYSMARS_REG :               A15100 - |  SYSTEM_INIT :                 2C5C C |
 SYSTEM_INIT.WAIT :            2C64 C |  SYSTEM_INPUT :                2F8A C |
 SYSTEM_INPUT.EXIT :           2FBC C |  SYSTEM_INPUT.FIND_ID :        3084 C |
 SYSTEM_INPUT.GET_ID :         309A C |  SYSTEM_INPUT.ID_07 :          2FE2 C |
 SYSTEM_INPUT.ID_0D :          2FEE C |  SYSTEM_INPUT.LIST :           2FC2 C |
 SYSTEM_INPUT.OLDPAD :         304C C |  SYSTEM_INPUT.STEP_1 :         30A6 C |
 SYSTEM_INPUT.STEP_2 :         30B2 C |  SYSTEM_INPUT.THIS_ONE :       2FA2 C |
 SYSTEM_RANDOM :               2CCE C |  SYSTEM_RANDOM.BLANK :         2CDA C |
 SYSTEM_SINEWAVE :             2CF2 C |  SYSTEM_SINEWAVE.SINE_DATA :   2D0A C |
 SYSTEM_VSYNC :                2CB0 C |  SYSTEM_VSYNC.WAIT :           2CC0 C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - |  SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
*SYS_EXRAM :                 200000 - |  SYS_IO :                    A10001 - |
 SYS_TMSS :                  A14000 - | *TIME :                     9:21:17 - |
 TITLESCREEN_INIT :            30C4 C |  TITLESCREEN_INIT.CLRHOR :     30DE C |
 TITLESCREEN_INIT.CLRME :      313C C |  TITLESCREEN_INIT.CLRPAL :     30D0 C |
 TITLESCR_STARTGAME :          32C8 C |  TITLESCR_STARTGAME.1P_TIMED : 33A0 C |
 TITLESCR_STARTGAME.3PAD :     3386 C |  TITLESCR_STARTGAME.CLRBOXES : 32D2 C |
 TITLESCR_STARTGAME.CLRCURSORS :                                       32E2 C |
 TITLESCR_STARTGAME.DO_BOX :   331C C |
 TITLESCR_STARTGAME.MAKE_SCORE :                                       32FE C |
 TITLESCR_STARTGAME.MKCURSOR : 3364 C |
 TITLESCR_STARTGAME.SCORE_BOXES :                                      3398 C |
 TITLESCR_STARTGAME.VS_3PAD :  33E8 C |  TITLE_ANIMATEFG :             3452 C |
 TITLE_ANIMATEFG.HNEXT :       347A C |  TITLE_ANIMATEFG.HNEXTFG :     3462 C |
 TITLE_ANIMATEFG.VNEXT :       34A6 C |  TITLE_ANIMATEFG_INIT :        3452 C |
 TITLE_HBLANK :                3528 C |  TITLE_LOOP :                  324C C |
 TITLE_LOOP.NO_DOWN :          32AA C |  TITLE_LOOP.NO_START :         32C6 C |
 TITLE_LOOP.NO_UP :            328A C |  TITLE_VBLANK :                3678 C |
 TITLE_VBLANK.WAIT :           36B8 C |  TRCK_ACTIVE :                   11 - |
 TRCK_BLOCKCURR :                 E - |  TRCK_BLOCKS :                   12 - |
 TRCK_INSTR :                    16 - | *TRCK_MASTERVOL :                 F - |
 TRCK_PATTBASE :                 14 - |  TRCK_PATTREAD :                 18 - |
 TRCK_PRIORITY :                 10 - |  TRCK_PSGNOISE :                  C - |
 TRCK_REQBLK :                    0 - | *TRCK_REQCHNLS :                  B - |
 TRCK_REQCURRBLK :                8 - |  TRCK_REQFLAG :                   A - |
 TRCK_REQINS :                    4 - |  TRCK_REQPATT :                   2 - |
 TRCK_REQSNDBNK :                 9 - |  TRCK_REQTEMPO :                  7 - |
 TRCK_REQTICKS :                  6 - |  TRCK_ROWSTEPS :                 1A - |
 TRCK_ROWWAIT :                  1E - |  TRCK_TEMPOBITS :                1D - |
 TRCK_TICKSCURR :                1F - |  TRCK_TICKSMAIN :                1C - |
 TRCK_TICKSREAD :                 D - |  TRCK_VOLUME :                   20 - |
*TRUE :                           1 - |  VARNULLVRAM :                  7FF - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VDP_PALETTE :             C0000000 - | *VDP_VSRAM :               40000010 - |
*VERSION :                     142F - | *VIDEO_AUTOMAP_VERT :          1C4E C |
 VIDEO_AUTOMAP_VERT.XLOOP :    1C5E C |  VIDEO_AUTOMAP_VERT.YLOOP :    1C70 C |
 VIDEO_CLEAR :                 1968 C |  VIDEO_CLEAR.SMLWDW :          1A0E C |
 VIDEO_CLEAR.XLOOP :           1996 C |  VIDEO_CLEAR.YLOOP :           19AC C |
*VIDEO_COPY :                  1F22 C |  VIDEO_COPY.DMAW :             1F36 C |
 VIDEO_COPY.DMAWE :            1F90 C |  VIDEO_FILL :                  1EAE C |
 VIDEO_FILL.DMAW :             1EC2 C |  VIDEO_FILL.DMAWE :            1F0A C |
 VIDEO_INIT :                  18D0 C |  VIDEO_INIT.LOOP :             18E4 C |
 VIDEO_INIT.WAIT :             18F2 C |  VIDEO_INIT.WRITE :            190C C |
*VIDEO_INITPRINT :             1922 C |  VIDEO_LOADART :               1FA8 C |
 VIDEO_LOADART.WAIT :          201A C |  VIDEO_LOADMAP :               1B94 C |
*VIDEO_LOADMAP_CUSTOM :        1B9E C |  VIDEO_LOADMAP_CUSTOM.CONT :   1BBA C |
 VIDEO_LOADMAP_CUSTOM.NONULL : 1BB8 C |  VIDEO_LOADMAP_CUSTOM.XLOOP :  1BAA C |
 VIDEO_LOADMAP_CUSTOM.YLOOP :  1BA0 C |  VIDEO_LOADMAP_VERT :          1BCA C |
 VIDEO_LOADMAP_VERT.CONTNULL : 1C36 C |  VIDEO_LOADMAP_VERT.NODBLE :   1C34 C |
 VIDEO_LOADMAP_VERT.NONULL :   1C10 C | *VIDEO_LOADMAP_VERT.OUTDBL :   1C3E C |
 VIDEO_LOADMAP_VERT.XLOOP :    1BD8 C |  VIDEO_LOADMAP_VERT.YLOOP :    1BEA C |
 VIDEO_LOADPAL :               1A20 C |  VIDEO_LOADPAL.LOOP :          1A38 C |
 VIDEO_LOADPAL_FADE :          1A40 C |  VIDEO_LOADPAL_FADE.LOOP :     1A4E C |
 VIDEO_PALFADE_IN :            1A56 C |  VIDEO_PALFADE_IN.DO_IT :      1A6C C |
 VIDEO_PALFADE_IN.EXCT :       1A9E C |  VIDEO_PALFADE_IN.LOOP :       1A90 C |
 VIDEO_PALFADE_IN.LWR_BLU :    1AC2 C |  VIDEO_PALFADE_IN.LWR_GRN :    1AD6 C |
 VIDEO_PALFADE_IN.LWR_RED :    1AAE C |  VIDEO_PALFADE_IN.TIMER :      1AE6 C |
 VIDEO_PALFADE_IN.WAIT :       1A5E C |  VIDEO_PALFADE_OUT :           1AE8 C |
 VIDEO_PALFADE_OUT.DO_IT :     1B36 C |  VIDEO_PALFADE_OUT.EXCT :      1B60 C |
 VIDEO_PALFADE_OUT.LOOP :      1B56 C |  VIDEO_PALFADE_OUT.LOWR :      1B30 C |
 VIDEO_PALFADE_OUT.LWR_BLU :   1B76 C |  VIDEO_PALFADE_OUT.LWR_GRN :   1B82 C |
 VIDEO_PALFADE_OUT.LWR_RED :   1B6A C |  VIDEO_PALFADE_OUT.TIMER :     1B92 C |
 VIDEO_PALFADE_OUT.WAIT :      1AF0 C | *VIDEO_PRINT :                 1C90 C |
 VIDEO_PRINT.DONIBL :          1DB0 C |  VIDEO_PRINT.EXIT :            1D20 C |
 VIDEO_PRINT.ISBYTE :          1CEA C |  VIDEO_PRINT.ISLONG :          1D0E C |
 VIDEO_PRINT.ISWORD :          1CFC C |  VIDEO_PRINT.LNGLOOP :         1DA0 C |
 VIDEO_PRINT.LOOP :            1CAC C |  VIDEO_PRINT.LOWR :            1DC0 C |
 VIDEO_PRINT.NEWJUMP :         1CA6 C |  VIDEO_PRINT.NEXT :            1CCC C |
 VIDEO_PRINT.NEXTV :           1D2A C |  VIDEO_PRINT.NOTHING :         1DCC C |
 VIDEO_PRINT.PUTTEXT :         1CC0 C |  VIDEO_PRINT.SPECIAL :         1CD0 C |
 VIDEO_PRINT.VBYTE :           1D5C C |  VIDEO_PRINT.VLONG :           1DA8 C |
 VIDEO_PRINT.VWORD :           1D7E C |  VIDEO_UPDATE :                1948 C |
*VIDEO_UPDATE.EXIT :           1966 C |  VIDEO_UPDATE.LOOP :           195A C |
 VID_PICKLAYER :               1DD6 C |  VID_PICKLAYER.GOLYR :         1E26 C |
 VID_PICKLAYER.NOWD :          1E10 C |  VID_PICKLAYER.PLAWND :        1DFE C |
 VID_PICKLAYER.THISSZ :        1E46 C |  VID_PICKLAYER.THISSZJ :       1E6E C |
 VID_PICKSIZE :                1E72 C |  VID_PICKSIZE.SIZELIST :       1E8E C |
*VINTENBL :                      20 - |  VRAMLIST_MAINBLOCKS :         7310 C |
 VRAMSET_BLOCKS :               2A0 - |  VRAMSET_BOXBORDER :            400 - |
 VRAMSET_CELLHIDE :             780 - |  VRAMSET_CURSOR :               200 - |
 VRAMSET_SPRHIGH :              7A0 - |  VRAMSET_SPRSHDW :              790 - |
 VRAMTTL_CELLHIDE :             780 - |  VRAMTTL_PUZBG :                200 - |
 VRAMTTL_PUZFONT :               E0 - |  VRAMTTL_PUZTITLE :               2 - |
 WAVFREQ_LIST :                 E1A C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :                     400 C |  Z80_CODE_END :                18D0 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      3B C |
 Z80_INIT.EXIT :                 A4 C |  Z80_INIT.FULL_STOP :            EA C |
 Z80_INIT.LOOP :                 3F C |  Z80_INIT.NLPFL :               120 C |
 Z80_INIT.PITCH :               15A C |  Z80_INIT.REQUEST :              F6 C |
*Z80_INIT.RESTART :             107 C |  Z80_INIT.TURN_OFF :            16B C |
 Z80_INT :                      17A C | *Z80_INT.NO_TRCKS :             1A4 C |
 Z80_RESET :                 A11200 - |  ZBANK :                       6000 - |
 ZPSG_CTRL :                   7F11 - | *ZSND_MUSICBANK :             18000 C |
*ZVDP_CTRL :                   7F04 - | *ZVDP_DATA :                   7F00 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |

   1086 symbols
    176 unused symbols

 AS V1.42 Beta [Bld 118] - source file main.asm - page 3 - 9/4/2021 9:21:17


  defined macros:
  ---------------

FINISH                                | INSTRSLOT                            
INSTRSMPL                             | ISO_FILE                             
ISO_SETFS                             | ORG                                  
ROMPAD                                | STRUCT                               

      8 macros

 AS V1.42 Beta [Bld 118] - source file main.asm - page 4 - 9/4/2021 9:21:17


  defined functions:
  ------------------

NOTZ80                                | LOCATE                               
MAPSIZE                               | DOUBLEWORD                           

 AS V1.42 Beta [Bld 118] - source file main.asm - page 5 - 9/4/2021 9:21:17


  codepages:
  ----------

STANDARD (0 changed characters)


0.21 seconds assembly time

  10218 lines source file
  10633 lines incl. macro expansions
      7 passes
      0 errors
      0 warnings
