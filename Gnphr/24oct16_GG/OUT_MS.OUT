0000                      ; ====================================================================
0000                      ; -------------------------------------------------
0000                      ; Game Gear / Master System
0000                      ; -------------------------------------------------
0000                      
0000                      		include "incl/macros.asm"
0000                      ; ====================================================================
0000                      ; -------------------------------------------------
0000                      ; MACROS
0000                      ; -------------------------------------------------
0000                      
0000                      ; -------------------------------------------------
0000                      ; Slot 2 bankswitch
0000                      ; -------------------------------------------------
0000                      
0000                      bankdata macro LABEL
0000                      	ld	a,(LABEL>>14)&0FFh
0000                      	ld      (0FFFEh),a
0000                      	endm
0000                      	endm
0000                      		include "ram.asm"
0000                      ; ====================================================================
0000                      ; -------------------------------------------------
0000                      ; Variables
0000                      ; -------------------------------------------------
0000                      
0000 =000000D0            bitFrameWait		equ	0
0000 =000000E5            bitVBlankWait		equ	1
0000 =000000FA            bitHBlankWait		equ	2
0000 =00000111            bitDontWaitHInt		equ	3
0000 =00000124            bitLockPads		equ	4
0000 =00000137            bitHotStart		equ	5
0000 =00000148            bitVerDir		equ	6
0000                      
0000                      ; -------------------------------------------------
0000                      ; RAM
0000                      ; -------------------------------------------------
0000                      
0000                      			rsset 0C000h
0000 =000001E0            ram_modebuffer		rb 800h
0000                      
0000 =000001F5            ram_vintjmpto		rb 1
0000 =00000208            ram_vintaddr		rw 1
0000 =0000021C            ram_hintjmpto		rb 1
0000 =0000022F            ram_hintaddr		rw 1
0000                      
0000 =00000243            ram_vintwait		rb 1
0000 =00000257            ram_vdpregs		rb 0Ah
0000 =0000026E            ram_runfadecol		rb 10h
0000 =00000280            ram_joypads		rb 8
0000 =00000293            ram_gamemode		rb 1
0000                      
0000 =000002B4            ram_vscroll		rw 1			;now a WORD
0000 =000002C6            ram_hscroll		rw 1
0000                      
0000 =000002E1            ram_sounddriver		rb 0200h
0000 =000002F8            ram_palbuffer		rb 32*2
0000 =00000311            ram_palfadebuff		rb 32*2
0000 =00000328            ram_sprbuffer		rb 100h
0000 =0000033F            ram_sprcontrol		rb 10h
0000                      
0000                      
0000 =00000359            ram_tilestovdp		rb 800h
0000                      
0000 =00000369            ram_end			rb 0
0000                       			inform 0,"RAM ENDS AT: %h",ram_end
0000                       			inform 0,"RAM ENDS AT: %h",ram_end
0000                      		
0000                      ; ====================================================================
0000                      ; -------------------------------------------------
0000                      ; Game starts
0000                      ; -------------------------------------------------
0000                      
0000                      		org     0
0000 F3                   		di				; disable interrupts
0001 ED 56                		im      1
0003 31 F8 DF             		ld      sp,0DFF8h
0006 C3 00 00             		jp      Init
0009                      
0009                      ; ====================================================================
0009                      ; -------------------------------------------------
0009                      ; IRQ
0009                      ; -------------------------------------------------
0009                      
0009                      		include "ints.asm"
0009                      ; ====================================================================
0009                      ; -------------------------------------------------
0009                      ; IRQ
0009                      ; 
0009                      ; AF is always saved
0009                      ; -------------------------------------------------
0009                      
0009                      		org     38h		; AT 38h: Interrupts
0038 F3                    		di
0039 F5                   		push	af
003A                      		
003A DB 00                		in      a,(Vcom)
003C E6 80                		and	%10000000
003E 20 00                		jr	nz,@its_vint
0040                      		
0040                      		;Save manually
0040 CD 03 C8             		call	ram_hintjmpto
0043 C3 00 00             		jp	@cont_irq
0046                      @its_vint:
0046 3A 06 C8              		ld	a,(ram_vintwait)
0049 CB 87                 		res	bitFrameWait,a
004B 32 06 C8              		ld	(ram_vintwait),a
004E CD 00 C8             		call	ram_vintjmpto
0051                      @cont_irq:
0051 F1                   		pop     af
0052 FB                   		ei
0053 ED 45                		retn
0055                      
0055                      ; ====================================================================
0055                      ; -------------------------------------------------
0055                      ; SMS PAUSE
0055                      ; -------------------------------------------------
0055                      
0055                      		org     66h		; SMS pause button
0066 ED 45                		retn	
0068                      
0068                      ; ====================================================================
0068                      ; -------------------------------------------------
0068                      ; VBlank
0068                      ; -------------------------------------------------
0068                      
0068                      VBlank_Default:	
0068 C5                   		push	bc
0069 D5                   		push	de
006A E5                   		push	hl
006B DD E5                		push	ix
006D FD E5                		push	iy
006F                      
006F CD 00 00             		call	palfade
0072 CD 00 00             		call	pads_read
0075                      
0075                      ; --------------------
0075                      
0075 21 BE CB             		ld	hl,ram_tilestovdp
0078 AF                   		xor	a
0079 D3 00                  		out 	(Vcom),a
007B 3E 00                  		ld	a,20h|WriteMask
007D D3 00                    		out 	(Vcom),a
007F 0E 00                		ld	c,Vdata
0081 06 D0                		ld	b,0D0h
0083 ED B3                		otir
0085                      
0085                      ; --------------------
0085                      
0085                      ; --------------------
0085                      ; Horizontal scroll
0085                      ; --------------------
0085                      
0085 3A 2C C8             		ld	a,(ram_hscroll)
0088 47                     		ld	b,a
0089 3A 07 C8               		ld	a,(ram_vdpregs)
008C CB 47                  		bit 	bit_HScrlBar,a		;horizontal bar?
008E CA 00 00               		jp	z,@itsfull
0091 78                     		ld	a,b
0092 C6 08                  		add	8
0094 47                     		ld	b,a
0095                      @itsfull:
0095 78                    		ld	a,b
0096 D3 00                		out     (Vcom),a
0098 3E 88                		ld      a,088h
009A D3 00                		out     (Vcom),a
009C                      
009C                      ; --------------------
009C                      ; Vertical scroll
009C                      ; 
009C                      ; WORD
009C                      ; --------------------
009C                      
009C 01 00 00             		ld	bc,0
009F 3A 2A C8             		ld	a,(ram_vscroll)
00A2 CB 3F                		srl	a
00A4 CB 3F                		srl	a
00A6 CB 3F                		srl	a
00A8 4F                   		ld	c,a
00A9 3A 2B C8             		ld	a,(ram_vscroll+1)
00AC E6 07                		and	111b
00AE CB 27                		sla	a
00B0 CB 27                		sla	a
00B2 CB 27                		sla	a
00B4 CB 27                		sla	a
00B6 CB 27                		sla	a
00B8 B1                   		or	c
00B9 4F                   		ld	c,a	
00BA 3A 2B C8              		ld	a,(ram_vscroll+1)
00BD E6 F8                 		and	11111000b
00BF CB 3F                  		srl	a
00C1 CB 3F                  		srl	a
00C3 CB 3F                  		srl	a
00C5 E6 07                  		and 	111b
00C7 57                     		ld	d,a
00C8                       		
00C8 3A 2B C8             		ld	a,(ram_vscroll+1)
00CB CB 7F                		bit 	7,a
00CD CA 00 00             		jp	z,@down
00D0                      		
00D0 0B                    		dec 	bc
00D1 0B                    		dec 	bc
00D2 0B                    		dec 	bc
00D3 0B                    		dec 	bc
00D4                      		
00D4                      @down:
00D4 21 00 00             		ld	hl,ver_table
00D7 09                   		add 	hl,bc
00D8 7E                   		ld	a,(hl)
00D9 4F                   		ld	c,a
00DA                      		
00DA 3A 2A C8             		ld	a,(ram_vscroll)
00DD E6 07                		and 	07h
00DF B1                   		or	c
00E0 D3 00                 		out     (Vcom),a
00E2 3E 89                 		ld      a,089h
00E4 D3 00                 		out     (Vcom),a
00E6                      
00E6                      ; --------------------
00E6                      ; Palette
00E6                      ; --------------------
00E6                       		
00E6 AF                   		xor 	a
00E7 D3 00                 		out     (Vcom),a
00E9 3E 00                 		ld      a,Vcolor
00EB D3 00                 		out     (Vcom),a
00ED                       		
00ED 21 2E CA             		ld	hl,ram_palbuffer
00F0 06 20                		ld	b,32
00F2 0E 00                 		ld 	c,Vdata	
00F4 ED B3                 		otir	
00F6                      
00F6                      ; --------------------
00F6                      
00F6 21 8E CC             		ld	hl,ram_tilestovdp+0D0h
00F9 3E D0                		ld	a,0D0h
00FB D3 00                  		out 	(Vcom),a
00FD 3E 00                  		ld	a,20h|WriteMask
00FF D3 00                    		out 	(Vcom),a
0101 0E 00                		ld	c,Vdata
0103 06 D0                		ld	b,0D0h
0105 ED B3                		otir
0107                      
0107                      ; --------------------
0107                      
0107                      ; --------------------------
0107                      ; Sprites
0107                      ;
0107                      ; Y X Chr
0107                      ; 
0107                      ; MERCURY:
0107                      ; X:
0107                      ; $00-$9F Visible
0107                      ; Y:
0107                      ; $00-$3F Hidden
0107                      ; $40-$CF Visible
0107                      ; 
0107                      ; MASTER SYSTEM:
0107                      ; X:
0107                      ; $00-$FF Visible
0107                      ; (Cannot hide horizontally
0107                      ;  without the border)
0107                      ; Y:
0107                      ; $00-$3F Hidden
0107                      ; $40-$FF Visible
0107                      ; --------------------------
0107                      
0107 11 AE CA             		ld	de,ram_sprbuffer
010A 06 3F                		ld	b,03Fh
010C 0E 00                		ld	c,0
010E                      @next_spr:
010E 79                   		ld	a,c
010F D3 00                		out	(Vcom),a
0111 3E 7F                		ld	a,3Fh|40h
0113 D3 00                		out	(Vcom),a
0115 1A                   		ld      a,(de)
0116 3D                   		dec	a
0117 13                   		inc	de
0118 D6 40                		sub 	40h
011A D3 00                		out     (Vdata),a
011C F5                   		push    af
011D F1                   		pop     af
011E                      		
011E 79                   		ld	a,c
011F CB 27                		sla	a
0121 F6 80                		or	80h
0123 D3 00                		out	(Vcom),a
0125 3E 7F                		ld	a,3Fh|40h
0127 D3 00                		out	(Vcom),a
0129 1A                   		ld      a,(de)
012A 13                   		inc	de
012B D3 00                		out     (Vdata),a
012D F5                   		push    af
012E F1                   		pop     af
012F 1A                   		ld      a,(de)
0130 13                   		inc	de
0131 D3 00                		out     (Vdata),a
0133 F5                   		push    af
0134 F1                   		pop     af
0135                      		
0135 0C                   		inc	c
0136 1A                   		ld	a,(de)
0137 CA 00 00             		jp	z,@stop_spr
013A 10 D2                 		djnz	@next_spr
013C                      @stop_spr:
013C                      
013C                      ; --------------------
013C                      ; VSync done
013C                      ; --------------------
013C                       		
013C CD 00 00              		call	SMEG_Upd
013F                      
013F FD E1                		pop	iy
0141 DD E1                		pop	ix
0143 E1                   		pop	hl
0144 D1                   		pop	de
0145 C1                   		pop	bc
0146 C9                   		ret
0147                      
0147                      ; -------------------------------------------------
0147                      ; HBlank
0147                      ; -------------------------------------------------
0147                      
0147                      HBlank_Default:
0147 C9                    		ret
0148                      		
0148                      ; -------------------------------------------------
0148                      ; Data
0148                      ; -------------------------------------------------
0148                      
0148                      ver_table:
0148                      		incbin "subs/vertbl.bin"
0F48                      		
0F48                      ; ====================================================================
0F48                      ; -------------------------------------------------
0F48                      ; Subs
0F48                      ; -------------------------------------------------
0F48                      
0F48                      		include "subs/vdp.asm"
0F48                      ; ====================================================================
0F48                      ; -------------------------------------------------
0F48                      ; VDP
0F48                      ; -------------------------------------------------
0F48                      
0F48 =000000C9            bit_HscrlBar	equ	5
0F48                      
0F48                      ; Resolutions:
0F48                      ; MS: 256x192
0F48                      ; GG: 160x144 (center)
0F48                      
0F48                      ; GG SPRITES AT TOP SCREEN:
0F48                      ; Y 17h X 30h
0F48                      
0F48 =0000016C            Vcom            equ     0BFh    ; ADDRESS SETUP FOR VDP REGISTERS
0F48 =000001BB            Vdata           equ     0BEh    ; WRITE OR READ DATA ADDRESS FOR VDP REGISTERS
0F48 =000001F5            Writemask       equ     040h    ; SETS VRAM TO WRITE MODE
0F48 =0000023E            Vcolor          equ     0C0h    ; VALUE OF 2nd BYTE FOR COLOR VRAM WRITE
0F48 =0000028C            Vreg            equ     080h    ; STARTING LOCATION OF VDP REGISTERS (0 - 10)
0F48 =000002D6            sprites         equ     2000h   ; START ADDRESS OF SPRITE GENERATOR TABLE
0F48 =00000321            spritevert      equ     3F00h   ; START ADDRESS OF SPRITE ATTRIBUTE TABLE,
0F48                      				; VERTICAL POSITION
0F48 =00000384            spritehori      equ     3F80h   ; START ADDRESS OF SPRITE ATTRIBUTE TABLE,
0F48                      				; HORIZONTAL POSITION
0F48 =000003E9            patterns        equ     0000h   ; START ADDRESS OF PATTERN GENERATOR TABLE
0F48                      
0F48                      ; START ADDRESS OF PATTERN NAME TABLE, | topleft    hl = 38CCh
0F48                      ; OR SCROLL SCREEN
0F48                      
0F48 =00000453            screen		equ     3800h
0F48 =00000468            screen_gg	equ	38CCh	
0F48                      
0F48 =00000484            celllength      equ     32
0F48 =0000049F            numcolors       equ     64
0F48 =000004BC            screenlength    equ     1440
0F48                      
0F48                      ; -------------------------------------------------
0F48                      
0F48                      VDPWrite:
0F48                      ;****************************************************
0F48                      ; Inserts a quantity of a number in VRAM
0F48                      ;        e: holds the number to be written
0F48                      ;       bc: holds the quantity to be written
0F48                      ;       hl: holds the VRAM destination to start at
0F48                      ;****************************************************
0F48                      
0F48                      	; set up an initial address in VRAM to write to
0F48                      
0F48 7D                   	ld      a,l            ;1st 8 bits
0F49 D3 BF                	out     (Vcom),a
0F4B 7C                   	ld      a,h            ; 2nd 8 bits
0F4C F6 40                	or      Writemask      ; set write mode
0F4E D3 BF                	out     (Vcom),a
0F50                      
0F50                      	; insert the number into VRAM a quantity of times
0F50                      
0F50                      VDPWriteLoop:
0F50 7B                   	ld      a,e            ; load data to 3rd byte
0F51 D3 BE                	out     (Vdata),a      ; write to VRAM
0F53 0B                   	dec     bc             ; dec # of times to write by 1
0F54 B1                   	or      c              ; or c with a
0F55 20 F9                	jr      nz,VDPWriteLoop; continue loop if or != 0
0F57                      
0F57 C9                   	ret
0F58                      
0F58                      
0F58                      VDP_Init:
0F58                      ;****************************************************
0F58                      ; initialize the VDP registers and VRAM
0F58                      ;****************************************************
0F58                      
0F58 21 00 00             	ld      hl,VDPregSet    ; address of register initialize table
0F5B 11 07 C8             	ld	de,ram_vdpregs
0F5E 06 0B                	ld      b,11            ; number of registers to initialize
0F60 0E 80                	ld      c,80h           ; register = 0
0F62                      
0F62                      	; read register settings from hl, outputting them to the VDP registers
0F62                      
0F62                      VDPinitLoop:
0F62 7E                   	ld	a,(hl)
0F63 12                   	ld	(de),a
0F64 23                   	inc 	hl
0F65 13                   	inc 	de
0F66 10 FA                	djnz    VDPinitLoop     ; dec b, jump if b != 0
0F68                      
0F68 CD 00 00             	call	VDP_update
0F6B                      
0F6B                      	; set up VDP to clear VRAM
0F6B AF                   	xor     a
0F6C D3 BF                	out     (Vcom),a        ; a is all zeros
0F6E 3E 40                	ld      a,Writemask     ; 0100 0000
0F70 D3 BF                	out     (Vcom),a        ; setting write mode
0F72 01 00 40             	ld      bc,4000h        ; how many times to write to VRAM
0F75                      BlankLoop:
0F75 AF                   	xor     a               ; a = 0
0F76 D3 BE                	out     (Vdata),a       ; data is zero
0F78 0B                   	dec     bc              ; dec bc by 1
0F79 78                   	ld      a,b
0F7A B1                   	or      c               ; or a with c
0F7B 20 F8                	jr      nz,BlankLoop    ; continue blanking until bc = 0
0F7D                      
0F7D C9                   	ret
0F7E                      	
0F7E                      WriteVRAM:
0F7E                      ;****************************************************
0F7E                      ; Write to VRAM
0F7E                      ;       hl: address of source bytes to load in VRAM
0F7E                      ;       de: destination address in VRAM
0F7E                      ;       bc: number of bytes to write
0F7E                      ;****************************************************
0F7E                      
0F7E E5                   	push    hl
0F7F D5                   	push    de              ; save values
0F80 C5                   	push    bc
0F81                      
0F81                      	; let a.b = number of bytes to write
0F81 78                   	ld      a,b
0F82 41                   	ld      b,c
0F83                      
0F83 F5                   	push    af              ; save copy of high byte value for # of bytes
0F84                      				;  to write
0F84                      				;  to write to VRAM
0F84 7B                   	ld      a,e             ; dest address in vram to write to
0F85 D3 BF                	out     (Vcom),a
0F87 7A                   	ld      a,d             ; 2nd byte of dest address
0F88 F6 40                	or      Writemask       ; writemode
0F8A D3 BF                	out     (Vcom),a
0F8C                      
0F8C 0E BE                	ld      c,Vdata         ; data write address in vram, needed for OUTI
0F8E                      
0F8E 78                   	ld      a,b             ; low byte of # of times to write to vram
0F8F A7                   	and     a
0F90 20 00                	jr      nz,WriteLoop    ; jump if a not zero
0F92                      
0F92 F1                   	pop     af              ; high byte of # of times to write to vram
0F93 3D                   	dec     a               ; dec high byte
0F94                      
0F94                      OuterLoop:
0F94 F5                   	push    af              ; save value of high byte
0F95                      
0F95                      	; write values to VRAM until b, reaches zero
0F95                      Writeloop:
0F95 ED A3                	outi                    ; write (hl) to (c), dec b, inc hl
0F97                      
0F97 20 FC                	jr      nz,WriteLoop    ; jump if b != 0
0F99                      
0F99 F1                   	pop     af              ; high byte of # of times to write to vram
0F9A                      
0F9A                      	; go to writeloop until a reaches zero
0F9A 3D                   	dec     a
0F9B F2 94 0F             	jp      p,OuterLoop     ; jump until a = 0
0F9E                      
0F9E C1                   	pop     bc
0F9F D1                   	pop     de              ; restore values
0FA0 E1                   	pop     hl
0FA1 C9                   	ret
0FA2                      
0FA2                      
0FA2                      WriteSprite:
0FA2                      ;****************************************************
0FA2                      ; change the attribute table values for a sprite
0FA2                      ;       b: the sprite number (0-63)
0FA2                      ;       c: the character number in sprite table
0FA2                      ;       d: the sprite's x location on screen
0FA2                      ;       e: the sprite's y location on screen
0FA2                      ;****************************************************
0FA2                      
0FA2 21 00 3F             	ld      hl,spritevert      ; start of sprite attrib. table, vert pos.
0FA5 7D                   	ld      a,l                ; low part of sprite vert. address
0FA6 80                   	add     a,b                ; index into table
0FA7 D3 BF                	out     (Vcom),a           ; 1st byte of Write address
0FA9 7C                   	ld      a,h                ; high part of sprite vert. address
0FAA F6 40                	or      Writemask          ; set write mode
0FAC D3 BF                	out     (Vcom),a           ; 2nd byte of Write address
0FAE                      
0FAE 7B                   	ld      a,e                ; new sprite y, vertical, position
0FAF D3 BE                	out     (Vdata),a          ; write new vertical position
0FB1 F5                   	push    af
0FB2 F1                   	pop     af                 ; delay for vram write
0FB3                      
0FB3 21 80 3F             	ld      hl,spritehori      ; start of sprite attrib. table, horiz pos
0FB6 7D                   	ld      a,l                ; low part of sprite horiz address
0FB7 80                   	add     a,b                ; skip over horizontal data
0FB8 80                   	add     a,b                ; skip over character data
0FB9 D3 BF                	out     (Vcom),a           ; 1st byte of Write address
0FBB 7C                   	ld      a,h                ; high part of sprite horiz address
0FBC F6 40                	or      Writemask          ; writemode
0FBE D3 BF                	out     (Vcom),a           ; 2nd byte of Write address
0FC0                      
0FC0 7A                   	ld      a,d                ; new sprite x, horiz, position
0FC1 D3 BE                	out     (Vdata),a          ; write new horizontal position
0FC3 F5                   	push    af
0FC4 F1                   	pop     af                 ; delay for Vram write
0FC5 79                   	ld      a,c                ; character number
0FC6 D3 BE                	out     (Vdata),a          ; write new char. number
0FC8 F5                   	push    af
0FC9 F1                   	pop     af                 ; delay for Vram write
0FCA                      
0FCA C9                   	ret
0FCB                      
0FCB                      
0FCB                      screenoff:
0FCB                      ;****************************************************
0FCB                      ; De-activates the screen from being drawn
0FCB                      ;****************************************************
0FCB                      
0FCB                      	;set BLANK bit of VDP register 1 to zero
0FCB                      
0FCB 3E A0                	ld      a,0A0h          ; 1010 0000
0FCD D3 BF                	out     (Vcom),a
0FCF 3E 81                	ld      a,Vreg+1        ; register 1
0FD1 D3 BF                	out     (Vcom),a        ; set blank bit to zero
0FD3                      
0FD3 C9                   	ret
0FD4                      
0FD4                      
0FD4                      screenon:
0FD4                      ;****************************************************
0FD4                      ;Re-activates the screen
0FD4                      ;****************************************************
0FD4                      
0FD4 3E E0                	ld      a,0E0h          ; 1110 0000
0FD6 D3 BF                	out     (Vcom),a
0FD8 3E 81                	ld      a,Vreg+1        ; register 1
0FDA D3 BF                	out     (Vcom),a        ; set blank bit to 1, screen on
0FDC                      
0FDC C9                   	ret
0FDD                      	
0FDD                      ; -------------------------------------------------
0FDD                      ; VDP_LoadMaps
0FDD                      ; 
0FDD                      ; normal:
0FDD                      ; bc - X size, Y size
0FDD                      ; ix - mappings
0FDD                      ; hl - vdp address
0FDD                      ; 
0FDD                      ; uses stack
0FDD                      ; -------------------------------------------------
0FDD                      
0FDD                      VDP_LoadMaps:
0FDD 62                   		ld	h,d
0FDE 6B                   		ld	l,e
0FDF C5                   		push	bc
0FE0                      @X_draw:
0FE0 7D                   		ld	a,l		; VDP: address
0FE1 D3 BF                		out	(Vcom),a
0FE3 7C                   		ld	a,h
0FE4 F6 40                		or	Writemask
0FE6 D3 BF                		out	(Vcom),a
0FE8                      		
0FE8 DD 7E 00             		ld	a,(ix)
0FEB D3 BE                		out	(Vdata),a	; VDP: read
0FED DD 23                		inc 	ix
0FEF DD 7E 00             		ld	a,(ix)
0FF2                      ; 		and 	111b
0FF2 D3 BE                		out	(Vdata),a
0FF4 DD 23                		inc 	ix
0FF6                      		
0FF6 23                   		inc	hl
0FF7 23                   		inc	hl
0FF8 10 E6                		djnz	@X_draw
0FFA                      
0FFA 62                   		ld	h,d		;Next line
0FFB 6B                   		ld	l,e
0FFC 01 40 00             		ld	bc,40h		
0FFF 09                   		add 	hl,bc
1000 54                   		ld	d,h
1001 5D                   		ld	e,l
1002                      		
1002 C1                   		pop	bc
1003 0D                   		dec	c
1004 79                   		ld	a,c
1005 C2 DD 0F              		jp	nz,VDP_LoadMaps
1008 C9                   		ret
1009                      		
1009                      ; -------------------------------------------------
1009                      ; VDP_ClearLayer
1009                      ;
1009                      ; uses:
1009                      ; bc,hl
1009                      ; -------------------------------------------------
1009                      
1009                      VDP_ClearLayer:
1009 21 00 38             		ld	hl,screen
100C                      	
100C 0E 1C                		ld	c,1Ch
100E                      @y_loop:
100E 06 20                		ld	b,20h
1010                      @x_loop:		
1010 7D                    		ld	a,l
1011 D3 BF                 		out	(Vcom),a
1013 7C                    		ld	a,h
1014 F6 40                 		or	Writemask
1016 D3 BF                 		out	(Vcom),a
1018                       		
1018 AF                    		xor	a
1019 D3 BE                 		out	(Vdata),a
101B D3 BE                 		out	(Vdata),a
101D                       		
101D 23                    		inc	hl
101E 23                    		inc	hl
101F 10 EF                		djnz	@x_loop
1021                      		
1021 0D                   		dec	c
1022 C2 0E 10             		jp	nz,@y_loop
1025 C9                   		ret
1026                      		
1026                      ; -------------------------------------------------
1026                      ; VDP_LoadPal
1026                      ; 
1026                      ; normal:
1026                      ; b - Num of colors
1026                      ; c - Start from
1026                      ; 
1026                      ; uses:
1026                      ; bc,d,hl
1026                      ; 
1026                      ; uses stack
1026                      ; -------------------------------------------------
1026                      
1026                      VDP_LoadPal:
1026 79                   		ld	a,c
1027 DD 21 2E CA          		ld	ix,ram_palbuffer
102B                      ; 		out     (Vcom),a        ; color ram address
102B                      ; 		ld      a,Vcolor        ; sets required C0h for a color write
102B                      ; 		out     (Vcom),a
102B                      
102B                      @color_loop:
102B                      		
102B 1E 00                		ld	e,0		; GG to SMS colors
102D 7E                   		ld	a,(hl)		; read GGs GREEN+RED
102E CB 2F                		sra	a
1030 CB 2F                		sra	a
1032 E6 03                		and 	00000011b
1034 5F                   		ld	e,a
1035 7E                   		ld	a,(hl)
1036 CB 2F                		sra	a
1038 CB 2F                		sra	a
103A CB 2F                		sra	a
103C CB 2F                		sra	a
103E E6 0C                		and	00001100b
1040 B3                   		or	e
1041 5F                   		ld	e,a
1042 23                   		inc 	hl
1043 7E                    		ld	a,(hl)		; read GGs BLUE
1044 CB 27                 		sla	a
1046 CB 27                 		sla	a
1048 E6 30                 		and	00110000b
104A 57                    		ld	d,a
104B 7B                    		ld	a,e
104C B2                    		or	d
104D E6 3F                 		and	00111111b
104F                      		
104F DD 77 00             		ld	(ix),a
1052 DD 23                		inc	ix
1054 23                   		inc 	hl
1055                      		
1055 F5                    		push    af
1056 F1                    		pop     af		; delay for writing to ram
1057 10 D2                		djnz	@color_loop
1059 C9                   		ret
105A                      	
105A                      ; ; -------------------------------------------------
105A                      ; ; VDP_GrabPal
105A                      ; ; 
105A                      ; ; Copy the palette from RAM to VDP
105A                      ; ; -------------------------------------------------
105A                      ; 
105A                      ; VDP_GrabPal:
105A                      
105A                      ; -------------------------------------------------
105A                      ; VDP_Update
105A                      ; -------------------------------------------------
105A                      
105A                      VDP_update:
105A 21 07 C8             		ld	hl,ram_vdpregs
105D 06 07                		ld	b,7		; 80h-87h
105F 0E 80                		ld	c,80h
1061                      @nextreg:
1061 7E                   		ld      a,(hl)          ; initial  register configs
1062 D3 BF                		out     (Vcom),a        ; data out to 1st byte
1064 23                   		inc     hl              ; next reg in table
1065 79                   		ld      a,c             ; register number
1066 D3 BF                		out     (Vcom),a        ; write data to register
1068 0C                   		inc     c               ; next register
1069 10 F6                		djnz	@nextreg
106B                      		
106B 3A 11 C8             		ld      a,(ram_vdpregs+00Ah) ;08Ah
106E D3 BF                		out     (Vcom),a
1070 3E 8A                		ld      a,08Ah
1072 D3 BF                		out     (Vcom),a
1074 C9                   		ret
1075                      		
1075                      ; -------------------------------------------------
1075                      ; Data
1075                      ; -------------------------------------------------
1075                      
1075                      VDPregSet:
1075 06                   		db      00000110b       ;reg 0 (???H???? HBLANK)
1076 E2                   		db      11100010b       ;1 SPRITES 8x16
1077 FF                   		db      11111111b       ;2
1078 FF                   		db      11111111b       ;3
1079 FF                   		db      11111111b       ;4
107A FF                   		db      11111111b       ;5
107B 04                   		db      00000100b       ;bit 2: Sprite characters $0x00 ($00xx,$01xx)
107C 00                   		db      00000000b       ;7
107D 00                   		db      00000000b       ;8 X
107E 00                   		db      00000000b       ;9 Y
107F 00                   		db      00000000b       ;10 HInt counter
1080                      		
1080                      ; --------------------------------------------
1080                      ; VSync
1080                      ; --------------------------------------------
1080                      
1080                      vsync:
1080 3A 06 C8              		ld	a,(ram_vintwait)
1083 CB C7                 		set	bitFrameWait,a
1085 32 06 C8              		ld	(ram_vintwait),a
1088                      @loop:
1088 3A 06 C8               		ld	a,(ram_vintwait)
108B CB 47                 		bit	bitFrameWait,a
108D C2 88 10              		jp	nz,@loop
1090 C9                   		ret
1091                      		
1091                      		
1091                      		
1091                      		include "subs/misc.asm"
1091                      ;****************************************************
1091                      ; initialize the system
1091                      ;****************************************************
1091                      
1091                      initsys:
1091                      
1091 AF                   		xor     a         	; set a to zero
1092 32 FC FF             		ld      (0FFFCh),a	; set bank control register to all zeros
1095 32 FD FF             		ld      (0FFFDh),a	; set bank reg #0 to all zeros
1098 3C                   		inc	a
1099 32 FE FF             		ld      (0FFFEh),a	; set bank reg #1 to 0001
109C 3C                   		inc	a
109D 32 FF FF             		ld      (0FFFFh),a	; set bank reg #2 to 0010
10A0                      		
10A0 21 00 C0             		ld      hl,0C000h  	; zero system RAM
10A3 11 01 C0             		ld      de,0C001h  	; C000h to DFF0h
10A6 01 F0 1F             		ld      bc,01FF0h  	; number of times to write
10A9 36 00                		ld      (hl),0
10AB ED B0                		ldir               	; load (de) with (hl). inc de, inc hl, dec bc
10AD                      					; continue until bc = 0
10AD                      					
10AD C9                   		ret
10AE                      
10AE                      ;****************************************************
10AE                      ; clear the screen data area
10AE                      ;****************************************************
10AE                      
10AE                      clearscreen:
10AE 21 00 38             		ld      hl,screen  	; start at VRAM address 3800h
10B1 1E 00                		ld      e,0        	; number to place in VRAM
10B3 01 00 06             		ld      bc,768*2   	; number of times to write to VRAM
10B6 C3 48 0F             		jp      VDPWrite
10B9                      
10B9                      ; --------------------------------------------
10B9                      ; HexToBCD
10B9                      ; --------------------------------------------
10B9                      
10B9                      HexToBCD:
10B9 4F                   		ld	c,a		; Original (hex) number
10BA 06 08                		ld	b,8		; How many bits
10BC AF                   		xor	a		; Output (BCD) number, starts at 0
10BD CB 21                @rept:		sla	c		; shift c into carry
10BF 8F                   		adc	a,a
10C0 27                   		daa			; Decimal adjust a, so shift = BCD x2 plus carry
10C1 10 FA                		djnz	@rept		; Repeat for 8 bits
10C3 C9                   		ret
10C4                      		
10C4                      ; --------------------------------------------
10C4                      ; Mode cleanup
10C4                      ; --------------------------------------------
10C4                      		
10C4                      Mode_Cleanup:
10C4 01 00 00             		ld	bc,0
10C7 ED 43 2C C8          		ld	(ram_hscroll),bc
10CB ED 43 2A C8          		ld	(ram_vscroll),bc
10CF C9                   		ret
10D0                      
10D0                      ; ====================================================================
10D0                      ; ---------------------------------------------
10D0                      ; Sprites system
10D0                      ; ---------------------------------------------
10D0                      
10D0                      ; TODO: talvez moverlo
10D0                      
10D0                      		rsreset
10D0 =00000898            sprite_free	rw	1
10D0 =000008A9            sprite_used	rb	1
10D0                      
10D0                      ; ---------------------------------------------
10D0                      ; Sprites_Reset
10D0                      ; ---------------------------------------------
10D0                      
10D0                      Sprites_Reset:
10D0                      ; 		lea	(RAM_SprControl),a6
10D0                      ; 		movea.l	sprite_free(a6),a5
10D0                      ; 		cmpa	#((RAM_SprBuffer)&$FFFF),a5
10D0                      ; 		blt.s	@Full
10D0                      ; @NextEntry:
10D0                      ; ; 		tst.l	(a5)
10D0                      ; ; 		beq.s	@Full
10D0                      ; ; 		tst.l	4(a5)
10D0                      ; ; 		beq.s	@Full
10D0                      ;  		cmpa	#((RAM_SprBuffer+$280)&$FFFF),a5
10D0                      ;  		bgt.s	@Full
10D0                      ;  		clr.l	(a5)+
10D0                      ;   		clr.l	(a5)+
10D0                      ;   		cmpa	#((RAM_SprBuffer+$280)&$FFFF),a5
10D0                      ;   		blt.s	@NextEntry
10D0                      ; @Full:
10D0 01 AE CA             		ld	bc,RAM_SprBuffer
10D3 ED 43 AE CB          		ld	(RAM_SprControl),bc
10D7                      ; 		move.w	#1,sprite_link(a6)
10D7                      ; @Return:
10D7 C9                   		ret
10D8                      	
10D8                      ; ---------------------------------------------
10D8                      ; Sprites_CopyTiles
10D8                      ; 
10D8                      ; since i dont have DMA here
10D8                      ; lets use RAM-to-VDP
10D8                      ; ---------------------------------------------
10D8                      
10D8                      Sprites_CopyTiles:
10D8 21 BE CB             		ld	hl,ram_tilestovdp
10DB                      		
10DB AF                   		xor	a
10DC D3 BF                  		out 	(Vcom),a
10DE 3E 20                  		ld	a,20h
10E0 F6 40                  		or	WriteMask
10E2 D3 BF                    		out 	(Vcom),a
10E4 0E BE                		ld	c,Vdata
10E6                      		
10E6                      ; 		ld	a,(ram_vdpregs+1)
10E6                      ; 		res 	6,a
10E6                      ; 		out 	(Vcom),a
10E6                      ; 		ld	a,81h
10E6                      ; 		out 	(Vcom),a
10E6                      ; 		
10E6 06 00                		ld	b,0
10E8 ED B3                		otir
10EA 06 00                		ld	b,0
10EC ED B3                		otir
10EE 06 00                		ld	b,0
10F0 ED B3                		otir
10F2 06 00                		ld	b,0
10F4 ED B3                		otir
10F6                      		
10F6                      ; 		ld	a,(ram_vdpregs+1)
10F6                      ; 		out 	(Vcom),a
10F6                      ; 		ld	a,81h
10F6                      ; 		out 	(Vcom),a
10F6 C9                   		ret 
10F7                      		
10F7                      		
10F7                      		include "subs/fade.asm"
10F7                      ; ====================================================================
10F7                      ; ---------------------------------------
10F7                      ; Equs
10F7                      ; ---------------------------------------
10F7                      
10F7 =000000B7            ID_FadeOut		equ	01h
10F7 =000000CA            ID_FadeIn		equ	02h
10F7 =000000DE            ID_ToWhite		equ	03h
10F7 =000000F4            ID_FadeWhite		equ	04h
10F7                      
10F7                      ; ---------------------------------------
10F7                      
10F7 =00000134            PalFadeFlags		equ	1
10F7 =00000148            PalFadeStart		equ	2
10F7 =0000015A            PalFadeEnd		equ	3
10F7 =0000016C            PalFadeTmr		equ	4
10F7 =00000181            PalFadeSource		equ	8
10F7                      
10F7                      ; -------------------------------------------------
10F7                      ; FadeIn/FadeOut
10F7                      ; -------------------------------------------------
10F7                      
10F7                      PalFade:
10F7 DD 21 11 C8          		ld	ix,ram_runfadecol
10FB DD 7E 00             		ld	a,(ix)
10FE CB 7F                		bit	7,a
1100 CA 00 00             		jp	z,@run_tasks
1103 DD 7E 05               		ld	a,(ix+(PalFadeTmr+1))
1106 3D                     		dec	a
1107 DD 77 05               		ld	(ix+(PalFadeTmr+1)),a
110A F2 00 00              		jp	p,@Return
110D DD 7E 04             		ld	a,(ix+PalFadeTmr)
1110 DD 77 05             		ld	(ix+(PalFadeTmr+1)),a
1113 AF                   		xor	a
1114 DD 77 00             		ld	(ix),a
1117                      @Return:
1117 C9                   		ret
1118                      		
1118                      @run_tasks:
1118 CB 27                 		sla	a
111A 01 00 00              		ld	bc,0
111D 4F                    		ld	c,a
111E 21 00 00             		ld	hl,@task_list
1121 09                    		add 	hl,bc
1122 E9                   		jp	(hl)
1123                      
1123                      ; -------------------------------------------------
1123                      
1123                      @task_list:
1123 18 F2                		jr	@Return
1125 18 00                		jr	Pal_FadeOut
1127 18 00                		jr	Pal_FadeIn
1129 18 EC                		jr	@Return
112B 18 EA                		jr	@Return
112D                      	
112D                      ; -------------------------------------------------
112D                      ; FADEIN
112D                      ; -------------------------------------------------
112D                      
112D                      Pal_FadeIn:	
112D DD 7E 05             		ld	a,(ix+(PalFadeTmr+1))
1130 3D                   		dec	a
1131 DD 77 05             		ld	(ix+(PalFadeTmr+1)),a
1134 F2 00 00             		jp	p,@wait
1137 DD 7E 04             		ld	a,(ix+(PalFadeTmr))
113A DD 77 05             		ld	(ix+(PalFadeTmr+1)),a
113D                      		
113D FD 21 6E CA           		ld	iy,ram_palfadebuff
1141 21 2E CA             		ld	hl,ram_palbuffer
1144                      		
1144 11 00 00             		ld	de,0
1147 01 00 00             		ld	bc,0
114A DD 46 03             		ld	b,(ix+(PalFadeEnd))
114D 58                   		ld	e,b
114E 04                   		inc 	b
114F                      
114F                      ; --------------------
114F                      ; MERCURY
114F                      ; --------------------
114F                      
114F                      @next_entry:
114F FD 7E 00             		ld	a,(iy)
1152 E6 03                		and	00000011b
1154 4F                   		ld	c,a
1155 7E                   		ld	a,(hl)		;RED
1156 E6 03                		and	00000011b
1158 B9                   		cp	c
1159 7E                   		ld	a,(hl)
115A D2 00 00             		jp	nc,@cont_red
115D 3C                   		inc	a
115E CB C2                		set 	0,d
1160                      @cont_red:
1160 77                     		ld	(hl),a
1161                        		
1161 FD 7E 00             		ld	a,(iy)
1164 E6 0C                		and	00001100b
1166 4F                   		ld	c,a
1167 7E                   		ld	a,(hl)		;GREEN
1168 E6 0C                		and	00001100b
116A B9                   		cp	c
116B 7E                   		ld	a,(hl)
116C D2 00 00             		jp	nc,@cont_green
116F C6 04                		add 	a,4
1171 CB CA                		set 	1,d
1173                      @cont_green:
1173 77                     		ld	(hl),a
1174                        		
1174 FD 7E 00             		ld	a,(iy)
1177 E6 30                		and	00110000b
1179 4F                   		ld	c,a
117A 7E                   		ld	a,(hl)		;BLUE
117B E6 30                		and	00110000b
117D B9                   		cp	c
117E 7E                   		ld	a,(hl)
117F D2 00 00             		jp	nc,@cont_blue
1182 C6 10                		add 	a,10h
1184 CB D2                		set 	2,d
1186                      @cont_blue:
1186 77                     		ld	(hl),a
1187                        		
1187 7A                     		ld	a,d
1188 FE 07                  		cp	00000111b
118A D2 00 00               		jp	nc,@redgreend
118D 1D                    		dec	e
118E                      @redgreend:
118E 23                   		inc	hl
118F FD 23                		inc	iy
1191 10 BC                 		djnz	@next_entry
1193                       		
1193                      ; --------------------
1193                      
1193                       		
1193 7B                   		ld	a,e
1194 F2 00 00             		jp	p,@wait
1197                      		
1197 DD 7E 00             		ld 	a,(ix)
119A CB FF                		set 	7,a
119C DD 77 00             		ld	(ix),a
119F                      @wait:
119F C9                   		ret
11A0                      
11A0                      ; -------------------------------------------------
11A0                      ; FADEOUT
11A0                      ; -------------------------------------------------
11A0                      
11A0                      Pal_FadeOut:	
11A0 DD 7E 05              		ld	a,(ix+(PalFadeTmr+1))
11A3 3D                    		dec	a
11A4 DD 77 05              		ld	(ix+(PalFadeTmr+1)),a
11A7 F2 00 00              		jp	p,@wait
11AA DD 7E 04              		ld	a,(ix+(PalFadeTmr))
11AD DD 77 05              		ld	(ix+(PalFadeTmr+1)),a
11B0                       		
11B0 FD 21 6E CA            		ld	iy,ram_palfadebuff
11B4 21 2E CA              		ld	hl,ram_palbuffer
11B7                       		
11B7 11 00 00              		ld	de,0
11BA 01 00 00              		ld	bc,0
11BD DD 46 03              		ld	b,(ix+(PalFadeEnd))
11C0 58                    		ld	e,b
11C1 04                    		inc 	b
11C2                       		
11C2                      ; --------------------
11C2                      ; MERCURY
11C2                      ; --------------------
11C2                      
11C2                      @next_entry:
11C2 7E                       		ld	a,(hl)
11C3 57                       		ld	d,a
11C4 E6 03                    		and 	00000011b
11C6 FE 00                   		cp	0
11C8 CA 00 00                		jp	z,@red_done
11CB 3D                       		dec	a
11CC E6 03                    		and 	00000011b
11CE 57                       		ld	d,a
11CF                      @red_done:
11CF 7E                   		ld	a,(hl)
11D0 E6 3C                		and	00111100b
11D2 B2                   		or	d
11D3 77                    		ld	(hl),a
11D4                       		
11D4 7E                        		ld	a,(hl)
11D5 57                        		ld	d,a
11D6 E6 0C                     		and	00001100b
11D8 FE 00                     		cp	0
11DA CA 00 00                  		jp	z,@green_done
11DD D6 04                      		sub	a,4
11DF 57                        		ld	d,a
11E0 7E                         		ld	a,(hl)
11E1 E6 33                      		and	00110011b
11E3 4F                         		ld	c,a
11E4 7A                         		ld	a,d
11E5 B1                         		or	c
11E6                      @green_done:
11E6 7E                   		ld	a,(hl)
11E7 E6 33                		and	00110011b
11E9 B2                   		or	d
11EA 77                    		ld	(hl),a
11EB                       	
11EB 7E                        		ld	a,(hl)
11EC 57                        		ld	d,a
11ED E6 30                     		and	00110000b
11EF FE 00                     		cp	0
11F1 CA 00 00                  		jp	z,@blue_done
11F4 D6 10                      		sub	a,10h
11F6 57                        		ld	d,a
11F7 7E                         		ld	a,(hl)
11F8 E6 0F                      		and	00001111b
11FA 4F                         		ld	c,a
11FB 7A                         		ld	a,d
11FC B1                         		or	c
11FD                      @blue_done:
11FD 7E                   		ld	a,(hl)
11FE E6 0F                      		and	00001111b
1200 B2                   		or	d
1201 77                    		ld	(hl),a
1202                       		
1202 7E                    		ld	a,(hl)
1203 FE 00                 		cp	0
1205 C2 00 00              		jp	nz,@not_zero
1208 1D                      		dec	e
1209                      @not_zero:
1209 23                   		inc	hl
120A 10 B6                 		djnz	@next_entry
120C                       		
120C                      ; --------------------
120C                      
120C                       		
120C 7B                    		ld	a,e
120D F2 00 00              		jp	p,@wait
1210                      		
1210 DD 7E 00             		ld 	a,(ix)
1213 CB FF                		set 	7,a
1215 DD 77 00               		ld	(ix),a
1218                      @wait:
1218 C9                   		ret
1219                      		
1219                      ; -------------------------------------------------
1219                      ; PalFade_Set
1219                      ;
1219                      ; b -  Command
1219                      ; de - NumOfColors|Speed
1219                      ; -------------------------------------------------
1219                      
1219                      PalFade_Set:
1219 DD 21 11 C8          		ld	ix,ram_runfadecol
121D 48                   		ld	c,b
121E                      		
121E 41                   		ld	b,c
121F 7A                   		ld	a,d
1220 DD 77 03             		ld	(ix+(PalFadeEnd)),a
1223 7B                   		ld	a,e
1224 3C                   		inc	a	;slow down on MS
1225 3C                   		inc	a
1226 DD 77 04             		ld	(ix+(PalFadeTmr)),a
1229 78                   		ld	a,b
122A DD 70 00             		ld	(ix),b
122D                      		
122D 48                   		ld	c,b
122E C9                   		ret
122F                      		
122F                      ; -------------------------------------------------
122F                      ; PalFade_Load
122F                      ; 
122F                      ; normal:
122F                      ; b - Num of colors
122F                      ; c - Start from
122F                      ; 
122F                      ; uses:
122F                      ; bc,d,hl
122F                      ; 
122F                      ; uses stack
122F                      ; -------------------------------------------------
122F                      
122F                      PalFade_Load:
122F D5                   		push	de
1230 11 00 00             		ld	de,0
1233 58                    		ld	e,b
1234                      ;  		ld	ix,ram_palfadebuff
1234 DD 19                 		add 	ix,de
1236                      		
1236                      ; 		out     (Vcom),a        ; color ram address
1236                      ; 		ld      a,Vcolor        ; sets required C0h for a color write
1236                      ; 		out     (Vcom),a
1236                      
1236                      @color_loop:
1236                      		
1236 1E 00                		ld	e,0		; GG to SMS colors
1238 7E                   		ld	a,(hl)		; read GGs GREEN+RED
1239 CB 2F                		sra	a
123B CB 2F                		sra	a
123D E6 03                		and 	00000011b
123F 5F                   		ld	e,a
1240 7E                   		ld	a,(hl)
1241 CB 2F                		sra	a
1243 CB 2F                		sra	a
1245 CB 2F                		sra	a
1247 CB 2F                		sra	a
1249 E6 0C                		and	00001100b
124B B3                   		or	e
124C 5F                   		ld	e,a
124D 23                   		inc 	hl
124E 7E                    		ld	a,(hl)		; read GGs BLUE
124F CB 27                 		sla	a
1251 CB 27                 		sla	a
1253 E6 30                 		and	00110000b
1255 57                    		ld	d,a
1256 7B                    		ld	a,e
1257 B2                    		or	d
1258 E6 3F                 		and	00111111b
125A                      		
125A DD 77 00             		ld	(ix),a
125D DD 23                		inc	ix
125F 23                   		inc 	hl
1260                      		
1260 0D                   		dec	c
1261 C2 36 12             		jp	nz,@color_loop
1264 D1                   		pop	de
1265 C9                   		ret
1266                      		
1266                      ; -------------------------------------------------
1266                      
1266                      PalFade_Wait:
1266 CD 80 10                		call	VSync
1269                         		
1269 3A 11 C8                  		ld	a,(ram_runfadecol)
126C FE 00                     		cp	0
126E C2 66 12                  		jp	nz,PalFade_Wait
1271 C9                   		ret
1272                      		
1272                      		
1272                      		include "subs/pads.asm"
1272                      ; ====================================================================
1272                      ; -------------------------------------------------
1272                      ; Joypads/GG controller
1272                      ; -------------------------------------------------
1272                      
1272                      ; -------------------------------------------------
1272                      ; Variables
1272                      ; -------------------------------------------------
1272                      
1272 =00000184            pad             equ     0DCh    ; I/O PORT FOR JOYPAD AND FIRE BUTTONS
1272 =000001A8            padright        equ     08h     ; \
1272 =000001F3            padleft         equ     04h     ;  \___ bit values in joypad port register
1272 =00000218            padup           equ     01h     ;  /
1272 =0000023C            paddown         equ     02h     ; /
1272                      
1272 =00000262            bitJoyStart	equ	7	; DONT CHANGE THIS
1272 =00000271            bitJoy1		equ	4
1272 =00000280            bitJoy2		equ	5
1272 =00000292            bitJoyRight	equ	3
1272 =000002A3            bitJoyLeft	equ	2
1272 =000002B4            bitJoyDown	equ	1
1272 =000002C3            bitJoyUp	equ	0
1272                      
1272 =000002D3            on_hold		equ	0
1272 =000002E2            on_press	equ	1
1272                      
1272                      ; -------------------------------------------------
1272                      ; Read
1272                      ; -------------------------------------------------
1272                      
1272                      pads_read:
1272 DD 21 21 C8          		ld	ix,ram_joypads
1276 DB DC                		in      a,(pad)
1278 EE FF                		xor     0FFh
127A 47                   		ld	b,a
127B DD 7E 00              		ld	a,(ix+on_hold)
127E A8                    		xor	b
127F DD 70 00             		ld	(ix+on_hold),b
1282 A0                   		and	b	
1283 DD 77 01             		ld	(ix+on_press),a
1286 C9                   		ret
1287                      		
1287                      		
1287                      		
1287                      ; ====================================================================
1287                      ; -------------------------------------------------
1287                      ; Init
1287                      ; -------------------------------------------------
1287                      
1287                      Init:
1287 CD 91 10             		call    initsys			; init I/O ports and bank registers
128A CD 58 0F             		call    VDP_Init		; init VDP and VRAM
128D CD 00 00             		call	SMEG_Init
1290                      		
1290 3E C3                		ld	a,0C3h			; JMP @here
1292 32 00 C8             		ld	(ram_vintjmpto),a
1295 32 03 C8             		ld	(ram_hintjmpto),a
1298 01 68 00             		ld	bc,VBlank_Default
129B ED 43 01 C8          		ld	(ram_vintaddr),bc
129F 01 47 01             		ld	bc,HBlank_Default
12A2 ED 43 04 C8          		ld	(ram_hintaddr),bc
12A6 FB                   		ei
12A7                      		
12A7                      @MainLoop:
12A7 3A 29 C8             		ld	a,(ram_gamemode)
12AA CB 27                		sla	a
12AC CB 27                		sla	a
12AE CB 27                		sla	a
12B0 01 00 00             		ld	bc,0
12B3 4F                   		ld	c,a
12B4 21 00 00             		ld	hl,@modes_list
12B7 09                    		add 	hl,bc
12B8 E9                   		jp	(hl)
12B9                      	
12B9                      ; -------------------------------------------------
12B9                      
12B9                      @modes_list:
12B9 CD 00 00             		call	segalogo
12BC C3 A7 12             		jp	@MainLoop
12BF 00                   		nop
12C0 00                   		nop
12C1 CD 00 00             		call	Level
12C4 C3 A7 12             		jp	@MainLoop
12C7 00                   		nop
12C8 00                   		nop
12C9                      		
12C9                      ; ====================================================================
12C9                      ; -------------------------------------------------
12C9                      ; Modes
12C9                      ; -------------------------------------------------
12C9                      
12C9                      		include "modes/title/code.asm"
12C9                      ; ====================================================================
12C9                      ; -------------------------------------------------
12C9                      ; Title Screen
12C9                      ; -------------------------------------------------
12C9                      
12C9                      segalogo:
12C9 06 01                 		ld	b,ID_FadeOut
12CB 11 00 1F              		ld	de,1F00h
12CE CD 19 12              		call	PalFade_Set
12D1 CD 66 12              		call	PalFade_Wait
12D4                       		
12D4 F3                   		di
12D5 3E 00 32 FE FF       		bankdata BANK_Title
12DA                      		
12DA CD AE 10             		call	clearscreen
12DD CD C4 10             		call	Mode_Cleanup
12E0 3A 07 C8               		ld	a,(ram_vdpregs)
12E3 CB AF                		res	bit_HscrlBar,a
12E5 CB E7                		set 	4,a
12E7 32 07 C8             		ld	(ram_vdpregs),a
12EA CD 5A 10             		call	Vdp_Update
12ED                      		
12ED 21 00 00             		ld	hl,art_title			;  hl = 0208   where is data at
12F0 11 00 00             		ld	de,0				;  de = 0      where in VRAM to put data
12F3 01 00 00             		ld	bc,art_title_end		;  bc = 0380   how many times to write to vram
12F6 CD 7E 0F             		call	WriteVRAM
12F9 DD 21 00 00          		ld	ix,map_title
12FD 01 12 14             		ld	bc,1412h
1300 11 00 38              		ld	de,screen
1303 CD DD 0F              		call	VDP_LoadMaps
1306                       		
1306 01 68 00             		ld	bc,VBlank_Default
1309 ED 43 01 C8          		ld	(ram_vintaddr),bc
130D 01 47 01             		ld	bc,HBlank_Default
1310 ED 43 04 C8          		ld	(ram_hintaddr),bc
1314                      		
1314 21 00 00             		ld	hl,pal_title
1317 DD 21 6E CA           		ld	ix,ram_palfadebuff
131B 01 10 00             		ld	bc,0010h
131E CD 2F 12              		call	PalFade_Load
1321                       		
1321                      ;     		ld	hl,SmegSong_Test
1321                      ;     		ld	b,2h
1321                      ;      		call	Smeg_LoadSong
1321 FB                   		ei
1322                      		
1322 06 02                 		ld	b,ID_FadeIn
1324 11 00 1F              		ld	de,1F00h
1327 CD 19 12              		call	PalFade_Set
132A CD 66 12              		call	PalFade_Wait
132D                       		
132D                      ;    		di
132D                      ;              	call	PlayPCM
132D                      ;                 ei
132D                            
132D                      ; 		ld	a,01h
132D                      ; 		ld	(ram_modebuffer),a
132D                      		
132D                      ; -------------------------------------------------
132D                      ; Loop
132D                      ; -------------------------------------------------
132D                      
132D                      @loop:
132D CD 80 10             		call	VSync
1330                      		
1330 3A 21 C8             		ld	a,(ram_joypads+on_hold)
1333 CB 6F                		bit 	bitJoy2,a
1335 20 00                		jr      nz,@end_this
1337 C3 2D 13             		jp	@loop
133A                      
133A                      ; -------------------------------------------------
133A                      
133A                      @end_this:
133A 3E 01                		ld	a,1
133C 32 29 C8             		ld	(ram_gamemode),a
133F C9                   		ret
1340                      	
1340                      ; -------------------------------------------------
1340                      ; HBlank
1340                      ; -------------------------------------------------
1340                      		
1340                      ; -------------------------------------------------
1340                      ; VBlank
1340                      ; -------------------------------------------------
1340                      ; -------------------------------------------------
1340                      		include "modes/level/code.asm"		
1340                      ; ====================================================================
1340                      ; -------------------------------------------------
1340                      ; Level
1340                      ; -------------------------------------------------
1340                      
1340                      ; -------------------------------------------------
1340                      ; Include
1340                      ; -------------------------------------------------
1340                      
1340                      		include	"modes/level/subs/object.asm"
1340                      ; =================================================================
1340                      ; Object system
1340                      ; =================================================================
1340                      
1340                      ; =================================================================
1340                      ; ------------------------------------------------
1340                      ; Settings
1340                      ; ------------------------------------------------
1340                      
1340 =0000016C            max_objects	equ	16
1340                      
1340                      ; =================================================================
1340                      ; ------------------------------------------------
1340                      ; Variables
1340                      ; ------------------------------------------------
1340                      	
1340                      		rsreset
1340 =00000245            obj_code	rw 1
1340 =0000026B            obj_size	rb 4			; left/right/up/down
1340 =00000278            obj_x		rw 2
1340 =00000285            obj_y		rw 2
1340 =00000295            obj_x_spd	rw 1
1340 =000002A5            obj_y_spd	rw 1
1340 =000002C5            obj_frame	rw 1			; current/old
1340 =000002D4            obj_indx	rb 1
1340 =000002E8            obj_anim_next	rb 1
1340 =000002FA            obj_anim_id	rb 1
1340 =00000310            obj_anim_id_old	rb 1
1340 =00000323            obj_anim_spd	rb 1
1340 =00000334            obj_status	rb 1
1340 =00000350            obj_col		rb 1			;%LLRRUUDD
1340 =00000361            sizeof_obj	rb 0
1340                      
1340                      ; --------------------------------
1340                      ; obj_status
1340                      ; --------------------------------
1340                      
1340 =000003DD            bitobj_dir	equ	0		; set for Left
1340 =00000402            bitobj_air	equ	1		; set for Jumping
1340 =0000042E            bitobj_solid	equ	2		; set to make it solid
1340                      
1340                      ; =================================================================
1340                      ; ------------------------------------------------
1340                      ; Subs
1340                      ; ------------------------------------------------
1340                      
1340                      objects_init:
1340 3E C3                 		ld	a,0C3h
1342 32 00 00              		ld	(ram_objjmpto),a
1345                       		
1345                       		;TODO: clear objects
1345 C9                      		ret
1346                      
1346                      ; ------------------------------------------------
1346                      
1346                      objects_run:
1346 FD 21 00 00          		ld	iy,ram_objbuffer
134A 06 10                   		ld	b,max_objects
134C                         		
134C                      @next_obj:
134C FD 56 00                		ld	d,(iy+obj_code)
134F FD 5E 01                		ld	e,(iy+(obj_code+1))
1352 7A                      		ld	a,d
1353 B3                      		or	e
1354 CA 00 00                		jp	z,@nothing
1357 7A                      		ld	a,d
1358 32 00 00                		ld	(ram_objjmpto+1),a
135B 7B                      		ld	a,e
135C 32 00 00                		ld	(ram_objjmpto+2),a
135F                         		
135F C5                      		push	bc
1360 CD 00 00                 		call	ram_objjmpto
1363 C1                      		pop	bc
1364                      @nothing:
1364 11 1B 00                		ld	de,sizeof_obj
1367 FD 19                   		add	iy,de
1369 10 E1                   		djnz	@next_obj
136B                      		
136B C9                      		ret
136C                       
136C                      ; =================================================================
136C                      ; ------------------------------------------------
136C                      ; Subs
136C                      ; ---------------------------------------------
136C                      
136C                      ; --------------------------------
136C                      ; object_dplc
136C                      ; 
136C                      ; hl - art data
136C                      ; de - plc data
136C                      ; bc - vram
136C                      ; --------------------------------
136C                      
136C                      object_dplc:
136C E5                   		push	hl
136D C5                   		push	bc
136E 62                   		ld	h,d
136F 6B                   		ld	l,e
1370 79                   		ld	a,c
1371 01 00 00               		ld	bc,0
1374 4F                     		ld	c,a
1375 09                     		add	hl,bc
1376 54                     		ld	d,h
1377 5D                     		ld	e,l
1378 C1                     		pop	bc
1379 E1                     		pop	hl
137A                        		
137A FD CB 19 46             		bit	bitobj_dir,(iy+obj_status)
137E CA 00 00                		jp	z,@right
1381 23                      		inc 	hl
1382 23                      		inc 	hl
1383                      @right:
1383 7E                      		ld	a,(hl)
1384 23                      		inc 	hl
1385 66                      		ld	h,(hl)
1386 6F                      		ld	l,a
1387                         		
1387 1A                     		ld	a,(de)
1388 0F                     		rrca
1389 0F                     		rrca
138A 0F                     		rrca
138B E6 E0                  		and	11100000b
138D 4F                     		ld	c,a
138E 1A                     		ld	a,(de)
138F 0F                     		rrca
1390 0F                     		rrca
1391 0F                     		rrca
1392 E6 1F                  		and	00011111b
1394 47                     		ld	b,a
1395 09                      		add	hl,bc
1396                         		
1396 13                      		inc 	de
1397 1A                     		ld	a,(de)
1398 0F                     		rrca
1399 0F                     		rrca
139A 0F                     		rrca
139B E6 E0                  		and	11100000b
139D 4F                     		ld	c,a
139E 1A                     		ld	a,(de)
139F 0F                     		rrca
13A0 0F                     		rrca
13A1 0F                     		rrca
13A2 E6 1F                  		and	00011111b
13A4 47                      		ld	b,a
13A5                      		
13A5 11 BE CB             		ld	de,ram_tilestovdp
13A8 01 9F 01             		ld	bc,19Fh
13AB ED B0                		ldir
13AD                       		
13AD                      @sameframe:
13AD C9                     		ret
13AE                        		
13AE                      ; 		; Start copying
13AE                      ; 		ld	a,(de)
13AE                      ; 		ld	b,a
13AE                      ; @next:
13AE                      ; 		call	@line
13AE                      ;  		djnz	@next
13AE                      ; 		ret
13AE                      ; 		
13AE                      ; @line:
13AE                      ; 		rept 8
13AE                      ; 		ld	c,(hl)		;this is litearly sonic1s tiledata-to-registers
13AE                      ; 		inc 	hl
13AE                      ; 		ld	d,(hl)
13AE                      ; 		inc 	hl
13AE                      ; 		ld	e,(hl)
13AE                      ; 		inc 	hl
13AE                      ; 		ld	a,c
13AE                      ; 		out     (Vdata),a
13AE                      ; 		ld	a,d
13AE                      ; 		out     (Vdata),a
13AE                      ; 		ld	a,e
13AE                      ; 		out     (Vdata),a
13AE                      ; 		ld	a,(hl)
13AE                      ; 		inc 	hl
13AE                      ; 		out     (Vdata),a
13AE                      ; 		endr
13AE                      ; 		ret
13AE                      		
13AE                      ; --------------------------------
13AE                      ; object_show
13AE                      ; 
13AE                      ; hl - map data
13AE                      ; de - vram | frame
13AE                      ; --------------------------------
13AE                      
13AE                      object_show:
13AE 7B                   		ld	a,e
13AF 87                   		add 	a
13B0 01 00 00             		ld	bc,0
13B3 4F                   		ld	c,a
13B4 09                   		add	hl,bc
13B5                      		
13B5 46                   		ld	b,(hl)
13B6 23                   		inc 	hl
13B7 4E                   		ld	c,(hl)
13B8 61                   		ld	h,c
13B9 68                   		ld	l,b
13BA                      
13BA DD 2A AE CB          		ld	ix,(RAM_SprControl)
13BE 46                   		ld	b,(hl)
13BF 23                   		inc 	hl
13C0                      @next_piece:
13C0 CD 00 00             		call	@dopiece
13C3 10 FB                		djnz	@next_piece
13C5                      		
13C5 AF                   		xor	a
13C6 DD 77 00             		ld	(ix),a
13C9 DD 77 02             		ld	(ix+2),a
13CC DD 77 03             		ld	(ix+3),a
13CF DD 22 AE CB          		ld	(RAM_SprControl),ix
13D3 C9                   		ret
13D4                      
13D4                      ; ---------------
13D4                      
13D4                      @dopiece:
13D4                      
13D4                      ; ---------------
13D4                      ; Y POS
13D4                      ; ---------------
13D4                      
13D4 D5                   		push	de
13D5 7E                    		ld	a,(hl)
13D6 57                   		ld	d,a
13D7 3A 08 C8             		ld	a,(RAM_VdpRegs+1)
13DA CB 47                		bit 	0,a
13DC CA 00 00             		jp	z,@norml_y
13DF CB 22                		sla	d
13E1                      @norml_y:
13E1 7A                   		ld	a,d
13E2 23                    		inc	hl
13E3 E5                    		push	hl
13E4 21 00 00              		ld	hl,0
13E7 CB 7F                 		bit 	7,a
13E9 CA 00 00              		jp	z,@plusy
13EC 21 FF FF              		ld	hl,-1
13EF                      @plusy:
13EF 6F                    		ld	l,a
13F0 FD 56 0B              		ld	d,(iy+(obj_y+1))
13F3 FD 5E 0A              		ld	e,(iy+obj_y)
13F6 13                    		inc 	de
13F7 19                    		add 	hl,de
13F8 11 40 00              		ld	de,40h
13FB 19                    		add 	hl,de
13FC 3A 00 00              		ld	a,(RAM_LevelBuffer+(lvl_y+1))
13FF 57                    		ld	d,a
1400 3A 00 00              		ld	a,(RAM_LevelBuffer+(lvl_y))
1403 5F                    		ld	e,a
1404 37                    		scf
1405 ED 52                 		sbc 	hl,de
1407                       		
1407 7C                     		ld	a,h
1408 FE 00                  		cp 	0
140A CA 00 00               		jp	z,@lower
140D 2E 00                  		ld	l,0
140F                      @lower:
140F 7D                   		ld	a,l
1410 DD 77 00             		ld	(ix),a
1413 DD 23                		inc 	ix
1415 E1                   		pop	hl
1416                      		
1416                      ; ---------------
1416                      ; X POS
1416                      ; ---------------
1416                      
1416 7E                   		ld	a,(hl)
1417 57                   		ld	d,a
1418 3A 08 C8             		ld	a,(RAM_VdpRegs+1)
141B CB 47                		bit 	0,a
141D CA 00 00             		jp	z,@norml_x
1420 CB 22                		sla	d
1422                      @norml_x:
1422 7A                   		ld	a,d
1423 23                    		inc	hl
1424 E5                    		push	hl
1425                       		
1425 FD CB 19 46           		bit	bitobj_dir,(iy+obj_status)
1429 CA 00 00              		jp	z,@right
142C ED 44                 		neg 	a
142E C6 08                 		add 	8
1430                      @right:
1430 21 00 00               		ld	hl,0
1433 CB 7F                  		bit 	7,a
1435 F2 00 00             		jp	p,@plus
1438 21 FF FF               		ld	hl,-1
143B                      @plus:
143B 6F                    		ld	l,a
143C FD 56 07              		ld	d,(iy+(obj_x+1))
143F FD 5E 06              		ld	e,(iy+obj_x)
1442 19                    		add 	hl,de
1443 3A 00 00              		ld	a,(RAM_LevelBuffer+(lvl_x+1))
1446 57                    		ld	d,a
1447 3A 00 00              		ld	a,(RAM_LevelBuffer+(lvl_x))
144A 5F                    		ld	e,a
144B 37                    		scf
144C ED 52                 		sbc 	hl,de
144E                      
144E 7C                     		ld	a,h
144F FE 00                  		cp 	0
1451 CA 00 00               		jp	z,@notsame
1454 2E 00                  		ld	l,0
1456 DD 2B                  		dec 	ix
1458 AF                     		xor	a
1459 DD 77 00               		ld	(ix),a
145C DD 23                  		inc 	ix
145E                      @notsame:
145E                      		
145E 7D                   		ld	a,l
145F DD 77 00             		ld	(ix),a
1462 DD 23                		inc 	ix
1464 E1                      		pop	hl
1465 D1                   		pop	de
1466                      		
1466                      ; ---------------
1466                      ; CHAR
1466                      ; ---------------
1466                      
1466 7E                   		ld	a,(hl)
1467 23                   		inc 	hl
1468 82                   		add	a,d
1469 DD 77 00             		ld	(ix),a
146C DD 23                		inc 	ix
146E                      
146E                      ; ---------------
146E C9                   		ret
146F                      
146F                      
146F                      ; ----------------------------------------------
146F                      ; Object animation
146F                      ; 
146F                      ; Input
146F                      ; hl - Animation data
146F                      ; 
146F                      ; Output
146F                      ; a - Frame
146F                      ; 
146F                      ; Uses:
146F                      ; c/de
146F                      ; ----------------------------------------------
146F                       
146F                      Object_Animate:
146F FD 4E 17             		ld	c,(iy+(obj_anim_id+1))
1472 FD 7E 16             		ld	a,(iy+(obj_anim_id))
1475 B9                   		cp	c
1476 CA 00 00             		jp	z,@SameThing
1479 FD 77 17             		ld	(iy+(obj_anim_id+1)),a
147C AF                   		xor	a
147D FD 77 15             		ld	(iy+(obj_anim_next)),a
1480                      @SameThing:
1480 FD 7E 16             		ld	a,(iy+(obj_anim_id))
1483 FE FF                		cp	-1
1485 CA 00 00             		jp	z,@Return
1488 87                   		add 	a
1489 11 00 00             		ld	de,0
148C 5F                   		ld	e,a
148D 19                   		add 	hl,de
148E                      		
148E 7E                   		ld	a,(hl)
148F 23                   		inc 	hl
1490 66                   		ld	h,(hl)
1491 6F                   		ld	l,a
1492                       
1492 7E                   		ld	a,(hl)
1493 23                   		inc 	hl
1494 47                   		ld	b,a
1495 FD 7E 18             		ld	a,(iy+(obj_anim_spd))
1498 3D                   		dec	a
1499 FD 77 18             		ld	(iy+(obj_anim_spd)),a
149C F2 00 00             		jp	p,@Return
149F FD 70 18             		ld	(iy+(obj_anim_spd)),b
14A2                      			
14A2 11 00 00             		ld	de,0
14A5 FD 7E 15             		ld 	a,(iy+(obj_anim_next))
14A8 5F                   		ld	e,a
14A9 7E                   		ld	a,(hl)
14AA 4F                   		ld	c,a
14AB 19                   		add 	hl,de
14AC                      		
14AC 7E                   		ld	a,(hl)
14AD 23                   		inc 	hl
14AE FE FF                		cp	0FFh
14B0 CA 00 00             		jp	z,@NoAnim
14B3 FE FE                		cp	0FEh
14B5 CA 00 00             		jp	z,@GoToFrame
14B8 FE FD                		cp	0FDh
14BA CA 00 00             		jp	z,@LastFrame
14BD                      
14BD FD 77 12             		ld	(iy+(obj_frame)),a
14C0 FD 34 15             		inc 	(iy+(obj_anim_next))
14C3                      @Return:
14C3 C9                   		ret 
14C4                        
14C4                      @NoAnim:
14C4 3E 01                		ld	a,1
14C6 FD 77 15             		ld	(iy+(obj_anim_next)),a
14C9 79                   		ld	a,c
14CA FD 77 12             		ld	(iy+(obj_frame)),a
14CD C9                   		ret
14CE                      		
14CE                      @LastFrame:
14CE AF                   		xor	a
14CF FD 77 18             		ld	(iy+(obj_anim_spd)),a
14D2 C9                   		ret 
14D3                      		
14D3                      @GoToFrame:
14D3 AF                   		xor	a
14D4 FD 77 15             		ld	(iy+(obj_anim_next)),a
14D7 23                   		inc 	hl
14D8 7E                   		ld	a,(hl)
14D9 FD 77 16             		ld	(iy+(obj_anim_next+1)),a
14DC C9                   		ret
14DD                      		
14DD                      ; ----------------------------------------------
14DD                      ; Object Collision
14DD                      ; ----------------------------------------------
14DD                      
14DD                      ; ************************
14DD                      ; Find floor collision
14DD                      ; CENTER
14DD                      ; 
14DD                      ; Input:
14DD                      ; iy - Object
14DD                      ; ix - RAM_LevelBuffer
14DD                      ; hl - collision data
14DD                      ; 
14DD                      ; Output:
14DD                      ; a - CENTER
14DD                      ; ************************
14DD                      
14DD                      object_FindPrz_Floor:
14DD E5                   		push	hl
14DE DD 21 00 00          		ld	ix,ram_levelbuffer
14E2 21 00 00             		ld	hl,RAM_LevelPrizes
14E5 CD 00 00             		call	objSearchCol_Floor
14E8 E1                   		pop	hl
14E9 C9                   		ret
14EA                      		
14EA                      object_FindCol_Floor:
14EA E5                   		push	hl
14EB DD 21 00 00          		ld	ix,ram_levelbuffer
14EF DD 66 00             		ld	h,(ix+(lvl_collision+1))
14F2 DD 6E 00             		ld	l,(ix+(lvl_collision))
14F5 CD 00 00             		call	objSearchCol_Floor
14F8 E1                   		pop	hl
14F9 C9                   		ret
14FA                      		
14FA                      objSearchCol_Floor:
14FA                      ; 		Y-pos
14FA 01 00 00             		ld	bc,0
14FD FD 7E 0A              		ld	a,(iy+(obj_y))
1500 0F                     		rrca
1501 0F                     		rrca
1502 0F                     		rrca
1503 0F                     		rrca
1504 E6 0F                  		and	0Fh
1506 4F                     		ld	c,a
1507 FD 56 0B              		ld	d,(iy+(obj_y+1))
150A AF                   		xor	a
150B CB 7A                		bit 	7,d
150D C2 00 00             		jp	nz,@no_col
1510 7A                   		ld	a,d
1511 0F                     		rrca
1512 0F                     		rrca
1513 0F                     		rrca
1514 0F                     		rrca
1515 E6 F0                  		and	0F0h
1517 B1                     		or	c
1518 4F                     		ld	c,a
1519                      		
1519 DD 56 00              		ld	d,(ix+(lvl_x_size+1))
151C DD 5E 00             		ld	e,(ix+(lvl_x_size))
151F                      @county:
151F 19                      		add	hl,de
1520 0D                    		dec	c
1521 C2 1F 15              		jp	nz,@county
1524                      		
1524                      ; 		X-pos
1524 AF                   		xor	a
1525 FD 56 07              		ld	d,(iy+(obj_x+1))
1528 CB 7A                  		bit 	7,d
152A C2 00 00               		jp	nz,@no_col
152D FD 7E 06              		ld	a,(iy+(obj_x))
1530 0F                     		rrca
1531 0F                     		rrca
1532 0F                     		rrca
1533 0F                     		rrca
1534 E6 0F                  		and	0Fh
1536 5F                     		ld	e,a
1537 FD 7E 07              		ld	a,(iy+(obj_x+1))
153A 0F                     		rrca
153B 0F                     		rrca
153C 0F                     		rrca
153D 0F                     		rrca
153E E6 F0                  		and	0F0h
1540 B3                     		or	e
1541 5F                     		ld	e,a
1542 FD 7E 07              		ld	a,(iy+(obj_x+1))
1545 0F                     		rrca
1546 0F                     		rrca
1547 0F                     		rrca
1548 0F                     		rrca
1549 E6 0F                  		and	0Fh
154B 57                     		ld	d,a
154C 19                   		add 	hl,de
154D                      		;Return
154D 7E                    		ld	a,(hl)
154E                      @no_col:
154E C9                    		ret 
154F                      
154F                      ; ************************
154F                      ; Find wall collision
154F                      ; CENTER
154F                      ; 
154F                      ; Input:
154F                      ; iy - Object
154F                      ; ix - RAM_LevelBuffer
154F                      ; hl - collision data
154F                      ; 
154F                      ; Output:
154F                      ; a - CENTER
154F                      ; ************************
154F                      
154F                      object_FindPrz_Wall:
154F E5                   		push	hl
1550 DD 21 00 00          		ld	ix,ram_levelbuffer
1554 21 00 00             		ld	hl,RAM_LevelPrizes
1557 CD 00 00             		call	objSearchCol_Wall
155A E1                   		pop	hl
155B C9                   		ret
155C                      		
155C                      object_FindCol_Wall:
155C E5                   		push	hl
155D DD 21 00 00          		ld	ix,ram_levelbuffer
1561 DD 66 00             		ld	h,(ix+(lvl_collision+1))
1564 DD 6E 00             		ld	l,(ix+(lvl_collision))
1567 CD 00 00             		call	objSearchCol_Wall
156A E1                   		pop	hl
156B C9                   		ret
156C                      		
156C                      objSearchCol_Wall:
156C                      ; 		Y-pos
156C 01 00 00             		ld	bc,0
156F FD 56 0B              		ld	d,(iy+(obj_y+1))
1572 FD 5E 0A              		ld	e,(iy+(obj_y))
1575 1B                    		dec	de
1576 3E 01                 		ld	a,1
1578 CB 7A                 		bit 	7,d
157A C2 00 00              		jp	nz,@no_col
157D 7B                    		ld	a,e
157E 0F                     		rrca
157F 0F                     		rrca
1580 0F                     		rrca
1581 0F                     		rrca
1582 E6 0F                  		and	0Fh
1584 4F                     		ld	c,a
1585 7A                   		ld	a,d
1586 0F                     		rrca
1587 0F                     		rrca
1588 0F                     		rrca
1589 0F                     		rrca
158A E6 F0                  		and	0F0h
158C B1                     		or	c
158D 4F                     		ld	c,a
158E                      		
158E DD 56 00              		ld	d,(ix+(lvl_x_size+1))
1591 DD 5E 00             		ld	e,(ix+(lvl_x_size))
1594                      @county:
1594 19                      		add	hl,de
1595 0D                    		dec	c
1596 C2 94 15              		jp	nz,@county
1599                      		
1599                      ; 		X-pos
1599 3E 01                  		ld	a,1
159B FD 56 07              		ld	d,(iy+(obj_x+1))
159E CB 7A                  		bit 	7,d
15A0 C2 00 00               		jp	nz,@no_col
15A3 FD 7E 06              		ld	a,(iy+(obj_x))
15A6 0F                     		rrca
15A7 0F                     		rrca
15A8 0F                     		rrca
15A9 0F                     		rrca
15AA E6 0F                  		and	0Fh
15AC 5F                     		ld	e,a
15AD FD 7E 07              		ld	a,(iy+(obj_x+1))
15B0 0F                     		rrca
15B1 0F                     		rrca
15B2 0F                     		rrca
15B3 0F                     		rrca
15B4 E6 F0                  		and	0F0h
15B6 B3                     		or	e
15B7 5F                     		ld	e,a
15B8 FD 7E 07              		ld	a,(iy+(obj_x+1))
15BB 0F                     		rrca
15BC 0F                     		rrca
15BD 0F                     		rrca
15BE 0F                     		rrca
15BF E6 0F                  		and	0Fh
15C1 57                     		ld	d,a
15C2 19                   		add 	hl,de
15C3                      		;Return
15C3 7E                    		ld	a,(hl)
15C4                      @no_col:
15C4 C9                    		ret 
15C5                       		
15C5                      ; ************************
15C5                      ; Find floor collision
15C5                      ; LEFT/RIGHT
15C5                      ;
15C5                      ; Input:
15C5                      ; iy - Object
15C5                      ; ix - RAM_LevelBuffer
15C5                      ; hl - collision data
15C5                      ; 
15C5                      ; Output:
15C5                      ; b | RIGHT
15C5                      ; c | LEFT
15C5                      ; 
15C5                      ; Uses:
15C5                      ; Stack, EXX
15C5                      ; ************************
15C5                      
15C5                      object_FindPrz_FloorSides:
15C5 E5                   		push	hl
15C6 DD 21 00 00          		ld	ix,ram_levelbuffer
15CA 21 00 00             		ld	hl,RAM_LevelPrizes
15CD CD 00 00             		call	objSearchCol_FloorSides
15D0 E1                   		pop	hl
15D1 C9                   		ret
15D2                      		
15D2                      object_FindCol_FloorSides:
15D2 E5                   		push	hl
15D3 DD 21 00 00          		ld	ix,ram_levelbuffer
15D7 DD 66 00             		ld	h,(ix+(lvl_collision+1))
15DA DD 6E 00             		ld	l,(ix+(lvl_collision))
15DD CD 00 00             		call	objSearchCol_FloorSides
15E0 E1                   		pop	hl
15E1 C9                   		ret
15E2                      		
15E2                      objSearchCol_FloorSides:
15E2                      ; 		Y-pos
15E2 01 00 00             		ld	bc,0
15E5 FD 7E 0A              		ld	a,(iy+(obj_y))
15E8 0F                     		rrca
15E9 0F                     		rrca
15EA 0F                     		rrca
15EB 0F                     		rrca
15EC E6 0F                  		and	0Fh
15EE 4F                     		ld	c,a
15EF FD 56 0B              		ld	d,(iy+(obj_y+1))
15F2 AF                   		xor	a
15F3 CB 7A                		bit 	7,d
15F5 C2 00 00             		jp	nz,@no_col
15F8 7A                   		ld	a,d
15F9 0F                     		rrca
15FA 0F                     		rrca
15FB 0F                     		rrca
15FC 0F                     		rrca
15FD E6 F0                  		and	0F0h
15FF B1                     		or	c
1600 4F                     		ld	c,a
1601                        		
1601 DD 56 00              		ld	d,(ix+(lvl_x_size+1))
1604 DD 5E 00             		ld	e,(ix+(lvl_x_size))
1607                      @county:
1607 19                      		add	hl,de
1608 0D                    		dec	c
1609 C2 07 16              		jp	nz,@county
160C                      		
160C                      ; ------------------------
160C                      ; X check
160C                      ; LEFT
160C                      ; ------------------------
160C                      
160C E5                    		push	hl
160D E5                    		push	hl
160E                       		
160E FD 66 07              		ld	h,(iy+(obj_x+1))
1611 FD 6E 06               		ld	l,(iy+(obj_x))
1614 11 01 00               		ld	de,1
1617 19                     		add	hl,de
1618 FD 7E 02              		ld	a,(iy+(obj_size))
161B 87                    		add 	a
161C 87                    		add 	a
161D 87                    		add 	a
161E 5F                     		ld	e,a
161F 37                     		scf
1620 ED 52                 		sbc	hl,de
1622 CB 7C                 		bit 	7,h
1624 C2 00 00              		jp	nz,@bad_left
1627                       		
1627 54                     		ld	d,h
1628 5D                      		ld	e,l
1629                        		
1629 7B                    		ld	a,e
162A 0F                     		rrca
162B 0F                     		rrca
162C 0F                     		rrca
162D 0F                     		rrca
162E E6 0F                  		and	0Fh
1630 6F                     		ld	l,a
1631 7A                    		ld	a,d
1632 0F                     		rrca
1633 0F                     		rrca
1634 0F                     		rrca
1635 0F                     		rrca
1636 E6 F0                  		and	0F0h
1638 B5                     		or	l
1639 6F                     		ld	l,a
163A 7A                    		ld	a,d
163B 0F                     		rrca
163C 0F                     		rrca
163D 0F                     		rrca
163E 0F                     		rrca
163F E6 0F                  		and	0Fh
1641 67                     		ld	h,a
1642                        		
1642 54                     		ld	d,h
1643 5D                     		ld	e,l
1644 E1                     		pop	hl
1645 19                    		add	hl,de
1646                      		
1646 7E                    		ld	a,(hl)
1647 4F                    		ld	c,a
1648 18 00                 		jr	@good_left
164A                      
164A                      @bad_left:
164A 0E 00                		ld	c,0
164C E1                   		pop	hl
164D                      
164D                      @good_left:
164D                      
164D                      ; ------------------------
164D                      ; X check
164D                      ; RIGHT
164D                      ; ------------------------
164D                        		
164D FD 66 07              		ld	h,(iy+(obj_x+1))
1650 FD 6E 06              		ld	l,(iy+(obj_x))
1653 2B                    		dec	hl
1654 11 00 00              		ld	de,0
1657 FD 7E 03              		ld	a,(iy+(obj_size+1))
165A 87                    		add 	a
165B 87                    		add 	a
165C 87                    		add 	a
165D 5F                     		ld	e,a
165E 19                    		add	hl,de
165F 54                     		ld	d,h
1660 5D                     		ld	e,l
1661 CB 7C                 		bit 	7,h
1663 C2 00 00              		jp	nz,@bad_right
1666                       		
1666 7B                    		ld	a,e
1667 0F                     		rrca
1668 0F                     		rrca
1669 0F                     		rrca
166A 0F                     		rrca
166B E6 0F                  		and	0Fh
166D 6F                     		ld	l,a
166E 7A                    		ld	a,d
166F 0F                     		rrca
1670 0F                     		rrca
1671 0F                     		rrca
1672 0F                     		rrca
1673 E6 F0                  		and	0F0h
1675 B5                     		or	l
1676 6F                     		ld	l,a
1677 7A                    		ld	a,d
1678 0F                     		rrca
1679 0F                     		rrca
167A 0F                     		rrca
167B 0F                     		rrca
167C E6 0F                  		and	0Fh
167E 67                     		ld	h,a
167F                        		
167F 54                     		ld	d,h
1680 5D                     		ld	e,l
1681 E1                     		pop	hl
1682 19                   		add 	hl,de
1683                      		
1683 7E                    		ld	a,(hl)
1684 47                    		ld	b,a
1685 C9                    		ret 
1686                       		
1686                      @bad_right:
1686 06 00                		ld	b,0
1688 E1                     		pop	hl
1689                        		
1689                      ; ------------------------
1689                      
1689                      @no_col:
1689 C9                   		ret
168A                      		
168A                      		
168A                      ; ************************
168A                      ; Find wall collision
168A                      ;
168A                      ; Input:
168A                      ; iy - Object
168A                      ; ix - RAM_LevelBuffer
168A                      ; hl - collision data
168A                      ; 
168A                      ; Output:
168A                      ; b | RIGHT
168A                      ; c | LEFT
168A                      ; 
168A                      ; Uses:
168A                      ; Stack, EXX
168A                      ; ************************
168A                      
168A                      object_FindPrz_WallSides:
168A E5                   		push	hl
168B DD 21 00 00          		ld	ix,ram_levelbuffer
168F 21 00 00             		ld	hl,RAM_LevelPrizes
1692 CD 00 00             		call	objSearchCol_WallSides
1695 E1                   		pop	hl
1696 C9                   		ret
1697                      		
1697                      object_FindCol_WallSides:
1697 E5                   		push	hl
1698 DD 21 00 00          		ld	ix,ram_levelbuffer
169C DD 66 00             		ld	h,(ix+(lvl_collision+1))
169F DD 6E 00             		ld	l,(ix+(lvl_collision))
16A2 CD 00 00             		call	objSearchCol_WallSides
16A5 E1                   		pop	hl
16A6 C9                   		ret
16A7                      		
16A7                      objSearchCol_WallSides:
16A7                      ; 		Y-pos
16A7 01 00 00             		ld	bc,0
16AA FD 7E 0A              		ld	a,(iy+(obj_y))
16AD 0F                     		rrca
16AE 0F                     		rrca
16AF 0F                     		rrca
16B0 0F                     		rrca
16B1 E6 0F                  		and	0Fh
16B3 FD 56 0B              		ld	d,(iy+(obj_y+1))
16B6 CB 7A                		bit 	7,d
16B8 C2 00 00             		jp	nz,@no_col
16BB 4F                     		ld	c,a
16BC 7A                   		ld	a,d
16BD 0F                     		rrca
16BE 0F                     		rrca
16BF 0F                     		rrca
16C0 0F                     		rrca
16C1 E6 F0                  		and	0F0h
16C3 B1                     		or	c
16C4 4F                     		ld	c,a
16C5 0D                     		dec 	c
16C6                        		
16C6 DD 56 00              		ld	d,(ix+(lvl_x_size+1))
16C9 DD 5E 00             		ld	e,(ix+(lvl_x_size))
16CC                      @county:
16CC 19                      		add	hl,de
16CD 0D                    		dec	c
16CE C2 CC 16              		jp	nz,@county
16D1                      		
16D1                      ; ------------------------
16D1                      ; X check
16D1                      ; LEFT
16D1                      ; ------------------------
16D1                      
16D1 E5                    		push	hl
16D2 E5                    		push	hl
16D3                       		
16D3 FD 66 07              		ld	h,(iy+(obj_x+1))
16D6 FD 6E 06               		ld	l,(iy+(obj_x))
16D9 FD 7E 02               		ld	a,(iy+(obj_size))
16DC 87                     		add 	a
16DD 87                     		add 	a
16DE 87                     		add 	a
16DF 2F                     		cpl
16E0 16 FF                  		ld	d,-1
16E2 5F                      		ld	e,a
16E3 13                      		inc 	de
16E4 19                    		add	hl,de
16E5 CB 7C                 		bit 	7,h
16E7 C2 00 00              		jp	nz,@bad_left
16EA 54                     		ld	d,h
16EB 5D                      		ld	e,l
16EC                        		
16EC 7B                    		ld	a,e
16ED 0F                     		rrca
16EE 0F                     		rrca
16EF 0F                     		rrca
16F0 0F                     		rrca
16F1 E6 0F                  		and	0Fh
16F3 6F                     		ld	l,a
16F4 7A                    		ld	a,d
16F5 0F                     		rrca
16F6 0F                     		rrca
16F7 0F                     		rrca
16F8 0F                     		rrca
16F9 E6 F0                  		and	0F0h
16FB B5                     		or	l
16FC 6F                     		ld	l,a
16FD 7A                    		ld	a,d
16FE 0F                     		rrca
16FF 0F                     		rrca
1700 0F                     		rrca
1701 0F                     		rrca
1702 E6 0F                  		and	0Fh
1704 67                     		ld	h,a
1705                        		
1705 54                     		ld	d,h
1706 5D                     		ld	e,l
1707 E1                     		pop	hl
1708 19                    		add	hl,de
1709                      		
1709 7E                    		ld	a,(hl)
170A 4F                    		ld	c,a
170B 18 00                 		jr	@good_left
170D                      
170D                      @bad_left:
170D 0E 01                		ld	c,1
170F E1                   		pop	hl
1710                      
1710                      @good_left:
1710                      
1710                      ; ------------------------
1710                      ; X check
1710                      ; RIGHT
1710                      ; ------------------------
1710                        		
1710 FD 66 07              		ld	h,(iy+(obj_x+1))
1713 FD 6E 06              		ld	l,(iy+(obj_x))
1716 11 00 00              		ld	de,0
1719 FD 7E 03              		ld	a,(iy+(obj_size+1))
171C 87                    		add 	a
171D 87                    		add 	a
171E 87                    		add 	a
171F 5F                     		ld	e,a
1720 19                    		add	hl,de
1721 CB 7C                 		bit 	7,h
1723 C2 00 00              		jp	nz,@bad_right
1726 54                     		ld	d,h
1727 5D                     		ld	e,l
1728                       		
1728 7B                    		ld	a,e
1729 0F                     		rrca
172A 0F                     		rrca
172B 0F                     		rrca
172C 0F                     		rrca
172D E6 0F                  		and	0Fh
172F 6F                     		ld	l,a
1730 7A                    		ld	a,d
1731 0F                     		rrca
1732 0F                     		rrca
1733 0F                     		rrca
1734 0F                     		rrca
1735 E6 F0                  		and	0F0h
1737 B5                     		or	l
1738 6F                     		ld	l,a
1739 7A                    		ld	a,d
173A 0F                     		rrca
173B 0F                     		rrca
173C 0F                     		rrca
173D 0F                     		rrca
173E E6 0F                  		and	0Fh
1740 67                     		ld	h,a
1741                        		
1741 54                     		ld	d,h
1742 5D                     		ld	e,l
1743 E1                     		pop	hl
1744 19                   		add 	hl,de
1745                      		
1745 7E                    		ld	a,(hl)
1746 47                    		ld	b,a
1747 C9                    		ret 
1748                       		
1748                      @bad_right:
1748 06 01                		ld	b,1
174A E1                     		pop	hl
174B                        		
174B                      ; ------------------------
174B                      
174B                      @no_col:
174B C9                   		ret
174C                      		
174C                      ; =================================================================
174C                      ; ------------------------------------------------
174C                      ; Includes
174C                      ; ------------------------------------------------
174C                      
174C                      		include	"modes/level/data/object/player/code.asm"
174C                      ; =================================================================
174C                      ; Player object
174C                      ; =================================================================
174C                      
174C                      ; C2DD
174C                      
174C                      obj_test:
174C FD 7E 14             		ld	a,(iy+obj_indx)
174F CB 27                		sla	a
1751 01 00 00             		ld	bc,0
1754 4F                   		ld	c,a
1755 21 00 00             		ld	hl,@list
1758 09                    		add 	hl,bc
1759 E9                   		jp	(hl)
175A                      ; -------------------------------------------------
175A                      
175A                      @list:
175A 18 00                		jr	@init
175C 18 00                		jr	@main
175E                      	
175E                      ; =================================================================
175E                      ; ------------------------------------------------
175E                      ; Index $00: Main
175E                      ; ------------------------------------------------
175E                      
175E                      @init:
175E AF                   		xor	a
175F FD 77 06             		ld	(iy+obj_x),a
1762 FD 77 0A             		ld	(iy+obj_y),a
1765                      		
1765 11 01 01             		ld	de,0101h
1768 FD 72 02             		ld	(iy+(obj_size)),d
176B FD 73 03             		ld	(iy+(obj_size+1)),e
176E                      		
176E FD 7E 14             		ld	a,(iy+obj_indx)
1771 3C                   		inc	a
1772 FD 77 14             		ld	(iy+obj_indx),a
1775 C3 00 00             		jp	@render
1778                      		
1778                      ; =================================================================
1778                      ; ------------------------------------------------
1778                      ; Index $01: Main
1778                      ; ------------------------------------------------
1778                      
1778                      @main:
1778 3A 21 C8             		ld	a,(ram_joypads+on_hold)
177B CB 67                		bit 	bitJoy1,a
177D C2 00 00             		jp	nz,@debug_mode
1780                      
1780                      ; ----------------------------------
1780                      ; Player
1780                      ; ----------------------------------
1780                      
1780 FD CB 19 4E          		bit	bitobj_air,(iy+obj_status)
1784 CA 00 00             		jp	z,@idleanim
1787                      
1787 FD 66 11             		ld	h,(iy+(obj_y_spd+1))
178A FD 6E 10             		ld	l,(iy+(obj_y_spd))
178D 7C                   		ld	a,h
178E B5                   		or	l
178F CA 00 00             		jp	z,@idleanim
1792 CB 7C                		bit 	7,h
1794 C2 00 00             		jp	nz,@idleanim
1797                      
1797 3E 03                  		ld	a,3
1799 FD 77 16                		ld	(iy+obj_anim_id),a
179C                        		
179C                      @idleanim:
179C                      
179C                      ; ----------------------------------
179C                      ; Player physics
179C                      ; ----------------------------------
179C                      
179C                      ; ***************
179C                      ; X Speed stuff
179C                      ; ***************
179C                      
179C FD 66 0F             		ld	h,(iy+(obj_x_spd+1))
179F FD 6E 0E             		ld	l,(iy+(obj_x_spd))
17A2 CD 00 00             		call	@Player_Friction
17A5 CD 00 00             		call	@Player_Walk
17A8 E5                   		push	hl
17A9 CD 00 00             		call	@update_xspd
17AC D9                   		exx
17AD C1                   		pop	bc
17AE D9                   		exx
17AF CD 00 00             		call	@Collision_Wall
17B2                      ; 		call	@ObjCol_Wall
17B2                      		
17B2                      ; ***************
17B2                      ; Y Speed stuff
17B2                      ; ***************
17B2                      
17B2 FD 66 11             		ld	h,(iy+(obj_y_spd+1))
17B5 FD 6E 10             		ld	l,(iy+(obj_y_spd))
17B8 CD 00 00             		call	@Player_Jump
17BB E5                   		push	hl
17BC CD 00 00             		call	@update_yspd
17BF D9                   		exx
17C0 D1                   		pop	de
17C1 7A                    		ld	a,d
17C2 D9                   		exx
17C3 FA 00 00              		jp	m,@minusy
17C6 CD 00 00              		call	@Collision_Floor
17C9                      ; 		call	@ObjCol_Floor
17C9                      @minusy:
17C9 D9                   		exx
17CA 7A                    		ld	a,d
17CB D9                   		exx
17CC CA 00 00              		jp	z,@zeroy
17CF                      		
17CF CD 00 00                 		call	@Collision_Ceiling
17D2                      ; 		call	@ObjCol_Ceiling
17D2                      @zeroy:
17D2                      
17D2                      ; ***************
17D2                      ; Save them
17D2                      ; ***************
17D2                      
17D2 D9                   		exx
17D3 FD 70 0F             		ld	(iy+(obj_x_spd+1)),b
17D6 FD 71 0E             		ld	(iy+(obj_x_spd)),c
17D9 FD 72 11              		ld	(iy+(obj_y_spd+1)),d
17DC FD 73 10              		ld	(iy+(obj_y_spd)),e
17DF D9                   		exx
17E0                      		
17E0                      ; ------------------------
17E0                      ; Animation ID
17E0                      ; ------------------------
17E0                      
17E0 FD CB 19 4E           		bit	bitobj_air,(iy+obj_status)
17E4 C2 00 00              		jp	nz,@air
17E7 0E 01                 		ld	c,1
17E9 FD 46 0F              		ld	b,(iy+(obj_x_spd+1))
17EC FD 7E 0E              		ld	a,(iy+(obj_x_spd))
17EF B0                    		or	b
17F0 C2 00 00              		jp	nz,@walking
17F3 0E 00                 		ld	c,0
17F5                      @walking:
17F5 79                    		ld	a,c
17F6 FD 77 16              		ld	(iy+obj_anim_id),a
17F9                      @air:
17F9                      
17F9 CD 00 00             		call	@plyr_camera
17FC                      	
17FC C3 00 00             		jp	@render
17FF                      		
17FF                      ; =================================================================
17FF                      ; ------------------------------------------------
17FF                      ; Render
17FF                      ; ------------------------------------------------
17FF                      
17FF                      ; TODO: NO USAR DIRECCIONES ODD AL VRAM
17FF                      ; estamos en 8x16
17FF                      
17FF                      @render:
17FF 21 00 00             		ld	hl,ani_player
1802 CD 6F 14             		call	object_animate
1805                      		
1805 21 00 00             		ld	hl,map_player
1808 16 00                		ld	d,0
180A FD 5E 12             		ld	e,(iy+obj_frame)
180D CD AE 13             		call	object_show
1810                      		
1810 21 00 00             		ld	hl,art_player
1813 11 00 00             		ld	de,plc_player
1816 06 00                		ld	b,0
1818 FD 4E 12               		ld	c,(iy+obj_frame)
181B CD 6C 13             		call	object_dplc
181E C9                   		ret
181F                      		
181F                      ; =================================================================
181F                      ; ------------------------------------------------
181F                      ; Subs
181F                      ; ------------------------------------------------
181F                      
181F                      @update_xspd:
181F 7C                   		ld	a,h
1820 FD 66 07             		ld	h,(iy+(obj_x+1))
1823 FD 6E 06             		ld	l,(iy+obj_x)
1826 11 00 00              		ld	de,0
1829 CB 7F                		bit 	7,a
182B CA 00 00             		jp	z,@plusx
182E                      ; 		cp	0FFh
182E                      ;  		jp	z,@noupdx
182E                      ;  		inc 	a
182E 11 FF FF              		ld	de,-1
1831                      @plusx:	
1831 5F                   		ld	e,a
1832 19                   		add 	hl,de
1833                      @noupdx:
1833 FD 74 07             		ld	(iy+(obj_x+1)),h
1836 FD 75 06             		ld	(iy+obj_x),l
1839 C9                   		ret
183A                      
183A                      ; ---------------------------------
183A                      
183A                      @update_yspd:
183A 7C                   		ld	a,h
183B FD 66 0B             		ld	h,(iy+(obj_y+1))
183E FD 6E 0A             		ld	l,(iy+obj_y)
1841 11 00 00              		ld	de,0
1844 CB 7F                		bit 	7,a
1846 CA 00 00             		jp	z,@plusy
1849                      ; 		cp	0FFh
1849                      ;  		jp	z,@noupdy
1849 11 FF FF              		ld	de,-1
184C                      @plusy:	
184C 5F                   		ld	e,a
184D 19                   		add 	hl,de
184E                      @noupdy:
184E FD 74 0B             		ld	(iy+(obj_y+1)),h
1851 FD 75 0A             		ld	(iy+obj_y),l
1854 C9                   		ret
1855                      	
1855                      ; **********************************
1855                      ; Player Walk
1855                      ; **********************************
1855                      
1855                      @Player_Walk:
1855                      
1855                      ; --------------
1855                      ; RIGHT
1855                      ; --------------
1855                      
1855 3A 21 C8                		ld	a,(ram_joypads+on_hold)
1858 CB 5F                   		bit 	bitJoyRight,a
185A CA 00 00                		jp	z,@not_r
185D 11 50 00             		ld	de,50h
1860 19                   		add	hl,de
1861 7C                   		ld	a,h
1862 FE 03                		cp	3
1864 DA 00 00             		jp	c,@lowxr
1867 26 03                		ld	h,3
1869                      @lowxr:
1869 FD CB 19 86           		res	bitobj_dir,(iy+obj_status)
186D                      @not_r:
186D                      
186D                      ; --------------
186D                      ; LEFT
186D                      ; --------------
186D                      
186D 3A 21 C8                		ld	a,(ram_joypads+on_hold)
1870 CB 57                   		bit 	bitJoyLeft,a
1872 CA 00 00                		jp	z,@not_l
1875 FD 56 07                		ld	d,(iy+(obj_x+1))
1878 FD 7E 06                		ld	a,(iy+(obj_x))
187B B2                      		or	d
187C CA 00 00                		jp	z,@not_l
187F CB 7A                   		bit 	7,d
1881 C2 00 00                		jp	nz,@not_l
1884                         		
1884 11 B0 FF             		ld	de,-50h
1887 19                   		add	hl,de
1888                      
1888 7C                   		ld	a,h
1889 FE FD                		cp	-3
188B D2 00 00             		jp	nc,@lowxl
188E 26 FD                		ld	h,-3
1890                      @lowxl:
1890 FD CB 19 C6           		set	bitobj_dir,(iy+obj_status)
1894 C9                    		ret 
1895                       		
1895                      @not_l:
1895                      ; 		ld	hl,0
1895                      ; 		xor	a
1895                      ;    		ld	(iy+(obj_x+1)),a
1895                      ;    		ld	(iy+(obj_x)),a
1895 C9                   		ret
1896                      		
1896                      ; **********************************
1896                      ; Player friction
1896                      ; **********************************
1896                      
1896                      @Player_Friction:
1896 7D                    		ld	a,l
1897 B4                    		or	h
1898 CA 00 00              		jp	z,@finespeed
189B                      		
189B FD CB 19 46             		bit	bitobj_dir,(iy+obj_status)
189F C2 00 00              		jp	nz,@left
18A2 11 D0 FF              		ld	de,-30h		;original: 20h
18A5 19                    		add 	hl,de
18A6 CB 7C                 		bit 	7,h
18A8 CA 00 00              		jp	z,@finespeed
18AB 21 00 00              		ld	hl,0
18AE C9                   		ret
18AF                      @left:
18AF 11 30 00              		ld	de,30h		;original: 20h
18B2 19                    		add 	hl,de
18B3 CB 7C                 		bit 	7,h
18B5 C2 00 00              		jp	nz,@finespeed
18B8 21 00 00              		ld	hl,0
18BB                      @finespeed:
18BB C9                   		ret
18BC                      		
18BC                      ; **********************************
18BC                      ; Player Jump
18BC                      ; **********************************
18BC                      
18BC                      @Player_Jump:
18BC 3A 22 C8             		ld	a,(ram_joypads+on_press)
18BF CB 6F                		bit	bitJoy2,a
18C1 CA 00 00             		jp	z,@NotJump
18C4                      		
18C4 CD EA 14              		call 	object_FindCol_Floor
18C7 FE 00                 		cp	0
18C9 C2 00 00              		jp	nz,@CanJump
18CC CD D2 15              		call 	object_FindCol_FloorSides
18CF 78                    		ld	a,b
18D0 FE 00                 		cp	0
18D2 C2 00 00              		jp	nz,@CanJump
18D5 79                    		ld	a,c
18D6 FE 00                 		cp	0
18D8 C2 00 00              		jp	nz,@CanJump
18DB                       		
18DB C3 00 00             		jp	@NotJump
18DE                      		
18DE                      @CanJump:
18DE FD CB 19 CE          		set	bitobj_air,(iy+obj_status)
18E2                      		
18E2 3E 02                  		ld	a,2
18E4 FD 77 16                		ld	(iy+obj_anim_id),a
18E7 21 00 FA             		ld	hl,-600h
18EA C9                      		ret
18EB                         		
18EB                      @NotJump:
18EB 11 40 00              		ld	de,40h
18EE 19                    		add 	hl,de
18EF                       		
18EF CB 7C                 		bit 	7,h
18F1 C2 00 00              		jp	nz,@return
18F4 7C                   		ld	a,h
18F5 FE 10                		cp	10h
18F7 DA 00 00             		jp	c,@low_fall
18FA 3E 10                		ld	a,10h
18FC                      @low_fall:
18FC 67                   		ld	h,a
18FD                      @return:
18FD C9                   		ret
18FE                      		
18FE                      ; --------------
18FE                      
18FE                      @OLD:
18FE 21 00 00             		ld	hl,0
1901                      		
1901                      ; --------------
1901                      ; DOWn
1901                      ; --------------
1901                      
1901 3A 21 C8                		ld	a,(ram_joypads+on_hold)
1904 CB 4F                   		bit 	bitJoyDown,a
1906 CA 00 00                		jp	z,@not_d
1909 11 00 01             		ld	de,100h
190C 19                   		add	hl,de
190D                      @not_d:
190D                      
190D                      ; --------------
190D                      ; UP
190D                      ; --------------
190D                      
190D 3A 21 C8                		ld	a,(ram_joypads+on_hold)
1910 CB 47                   		bit 	bitJoyUp,a
1912 CA 00 00                		jp	z,@not_u
1915 FD 56 0B                		ld	d,(iy+(obj_y+1))
1918 FD 7E 0A                		ld	a,(iy+(obj_y))
191B B2                      		or	d
191C CA 00 00                		jp	z,@not_u
191F 11 00 FF             		ld	de,-100h
1922 19                   		add	hl,de
1923                      @not_u:
1923 C9                   		ret
1924                      	
1924                      ; **********************************
1924                      ; Object to Level layout collision
1924                      ; **********************************
1924                      ; ----------------------------------
1924                      ; floor collision
1924                      ; ----------------------------------
1924                      
1924                      @Collision_Floor:
1924 CD EA 14             		call	object_FindCol_Floor
1927 FE 00                		cp	0
1929 C2 00 00             		jp	nz,@found_center
192C                      		
192C CD D2 15              		call	object_FindCol_FloorSides
192F 78                     		ld	a,b
1930 FE 00                  		cp	0
1932 C2 00 00                		jp	nz,@found_sides
1935 79                     		ld	a,c
1936 FE 00                  		cp	0
1938 C2 00 00              		jp	nz,@found_sides
193B C9                   		ret
193C                      		
193C                      ; ----------------------------------
193C                      
193C                      @found_center:
193C FE 01                		cp	1
193E CA 00 00             		jp	z,@floorsolid
1941                       		
1941 FD 5E 11             		ld	e,(iy+(obj_y_spd+1))
1944 CB 7B                		bit 	7,e
1946 C2 00 00             		jp	nz,@no_col
1949                      
1949 11 00 00             		ld	de,0
194C 21 00 00             		ld	hl,col_SlopeData
194F 57                   		ld	d,a
1950 87                   		add 	a
1951 87                   		add 	a
1952 87                   		add 	a
1953 87                   		add 	a
1954 5F                   		ld	e,a
1955 7A                     		ld	a,d
1956 0F                     		rrca
1957 0F                     		rrca
1958 0F                     		rrca
1959 0F                     		rrca
195A E6 0F                  		and 	00Fh
195C 57                     		ld	d,a
195D                        		
195D 19                    		add 	hl,de
195E 11 00 00             		ld	de,0
1961 FD 7E 06             		ld	a,(iy+(obj_x))
1964 E6 0F                		and 	00Fh
1966 5F                   		ld	e,a
1967 19                   		add 	hl,de
1968 7E                   		ld	a,(hl)
1969 E6 0F                		and 	00Fh
196B                      
196B 11 00 00             		ld	de,0
196E 5F                   		ld	e,a
196F FD 7E 0B             		ld	a,(iy+(obj_y+1))
1972 E6 FF                		and	0FFh
1974 67                   		ld	h,a
1975 FD 7E 0A             		ld	a,(iy+(obj_y))
1978 E6 F0                		and	0F0h
197A 6F                   		ld	l,a
197B 19                   		add	hl,de
197C 44                   		ld	b,h
197D 4D                   		ld	c,l
197E                      		
197E                      ; 		btst	#bitobj_air,obj_status(a6)
197E                      ; 		beq.s	@dontchk
197E                      ;   		add.l	d7,d3
197E                      ;   		cmp.l	d1,d3
197E                      ;   		blt.s	@NoCol
197E                      ; @dontchk:	
197E FD 70 0B             		ld	(iy+(obj_y+1)),b
1981 FD 71 0A             		ld	(iy+(obj_y)),c	
1984                      		
1984 FD CB 19 8E          		res	bitobj_air,(iy+obj_status)
1988 D9                   		exx
1989 11 00 00             		ld	de,0
198C 79                   		ld	a,c
198D B0                   		or	b
198E CA 00 00             		jp	z,@nodown
1991 11 00 01             		ld	de,100h
1994                      @nodown:
1994 D9                    		exx
1995                      @NoCol:
1995 C9                   		ret
1996                      		
1996                      ; ----------------------------------
1996                      
1996                      @found_sides:
1996 FE 01                		cp	1
1998 CA 00 00             		jp	z,@floorsolid
199B C9                   		ret		
199C                      
199C                      ; ----------------------------------
199C                      		
199C                      @floorsolid:
199C FD CB 19 8E          		res	bitobj_air,(iy+obj_status)
19A0 FD 7E 0B             		ld	a,(iy+(obj_y+1))
19A3 E6 FF                		and	0FFh
19A5 FD 77 0B             		ld	(iy+(obj_y+1)),a
19A8 FD 7E 0A             		ld	a,(iy+(obj_y))
19AB E6 F0                		and	0F0h
19AD FD 77 0A             		ld	(iy+(obj_y)),a	
19B0                      		
19B0 D9                   		exx
19B1 11 00 00             		ld	de,0
19B4 D9                   		exx
19B5 C9                   		ret
19B6                      		
19B6                      @no_col:
19B6 C9                    		ret
19B7                       		
19B7                      ; **********************************
19B7                      ; ceiling collision
19B7                      ; **********************************
19B7                      
19B7                      @Collision_Ceiling:
19B7 C9                   		ret
19B8                      		
19B8                      ; **********************************
19B8                      ; Wall collision
19B8                      ; **********************************
19B8                      
19B8                      @Collision_Wall:
19B8 CD 5C 15             		call	object_FindCol_Wall
19BB FE 00                		cp	0
19BD C2 00 00             		jp	nz,@wall_center
19C0                      		
19C0 CD 97 16              		call	object_FindCol_WallSides
19C3 78                     		ld	a,b
19C4 FE 00                  		cp	0
19C6 C2 00 00                		jp	nz,@wall_right
19C9 79                     		ld	a,c
19CA FE 00                  		cp	0
19CC C2 00 00              		jp	nz,@wall_left
19CF C9                   		ret		
19D0                      
19D0                      ; ----------------------------------
19D0                      
19D0                      @wall_center:
19D0 FE 01                 		cp	1
19D2 CA 00 00              		jp	z,@wallsolid_slope
19D5                      
19D5 57                    		ld	d,a
19D6 FD 7E 0A              		ld	a,(iy+(obj_y))
19D9 E6 0F                 		and	00Fh
19DB C2 00 00              		jp	nz,@NoCol_LR
19DE                      
19DE 21 00 00             		ld	hl,col_SlopeData
19E1 7A                    		ld	a,d
19E2 87                   		add 	a
19E3 87                   		add 	a
19E4 87                   		add 	a
19E5 87                   		add 	a
19E6 5F                   		ld	e,a
19E7 7A                     		ld	a,d
19E8 0F                     		rrca
19E9 0F                     		rrca
19EA 0F                     		rrca
19EB 0F                     		rrca
19EC E6 0F                  		and 	00Fh
19EE 57                     		ld	d,a
19EF 19                    		add 	hl,de
19F0                       		
19F0 11 00 00             		ld	de,0
19F3 FD 7E 06             		ld	a,(iy+(obj_x))
19F6 E6 0F                		and 	00Fh
19F8 5F                   		ld	e,a
19F9 19                   		add 	hl,de
19FA 11 00 00             		ld	de,0
19FD 7E                   		ld	a,(hl)
19FE E6 0F                		and 	00Fh
1A00 5F                   		ld	e,a
1A01 FD 66 0B             		ld	h,(iy+(obj_y+1))
1A04 FD 7E 0A             		ld	a,(iy+(obj_y))
1A07 E6 F0                		and	0F0h
1A09 6F                   		ld	l,a
1A0A 37                   		scf
1A0B ED 52                		sbc	hl,de
1A0D FD 74 0B             		ld	(iy+(obj_y+1)),h
1A10 FD 75 0A             		ld	(iy+(obj_y)),l
1A13                      		
1A13 D9                   		exx
1A14 79                   		ld	a,c
1A15 B0                   		or	b
1A16 CA 00 00             		jp	z,@ClrYSpd
1A19 CB 7A                		bit	7,d
1A1B C2 00 00             		jp	nz,@return_xvel
1A1E                      @ClrYSpd:
1A1E FD CB 19 8E          		res	bitobj_air,(iy+obj_status)
1A22 11 00 00             		ld	de,0
1A25                      @return_xvel:
1A25 D9                   		exx
1A26                      @NoCol_LR:
1A26 C9                   		ret
1A27                      
1A27                      ; ----------------------------------
1A27                      
1A27                      @wall_right:
1A27 FD CB 19 46           		bit 	bitobj_dir,(iy+obj_status)
1A2B C2 FD 18              		jp	nz,@return
1A2E 78                     		ld	a,b
1A2F FE 02                  		cp	2
1A31 D2 FD 18               		jp	nc,@return
1A34 FE 01                 		cp	1
1A36 CA 00 00              		jp	z,@wallsolid
1A39 C9                    		ret
1A3A                      @wall_left:
1A3A FD CB 19 46           		bit 	bitobj_dir,(iy+obj_status)
1A3E CA FD 18              		jp	z,@return
1A41 79                     		ld	a,c
1A42                        		
1A42 FD 66 07             		ld	h,(iy+(obj_x+1))
1A45 FD 6E 06             		ld	l,(iy+(obj_x))
1A48 FD 7E 02             		ld	a,(iy+(obj_size))
1A4B 87                   		add 	a
1A4C 87                   		add 	a
1A4D 87                   		add 	a
1A4E 16 00                		ld	d,0
1A50 5F                   		ld	e,a
1A51 37                   		scf
1A52 ED 52                		sbc	hl,de
1A54 FA FD 18             		jp	m,@return
1A57                      		
1A57 79                      		ld	a,c
1A58 FE 02                  		cp	2
1A5A D2 FD 18               		jp	nc,@return
1A5D FE 01                		cp	1
1A5F CA 00 00             		jp	z,@wallsolid
1A62 C9                   		ret
1A63                      		
1A63                      @wallsolid:
1A63 D9                   		exx
1A64 01 00 00             		ld	bc,0
1A67 D9                   		exx
1A68                      		
1A68                      @wallsolid_slope:
1A68 FD 7E 07             		ld	a,(iy+(obj_x+1))
1A6B E6 FF                		and	0FFh
1A6D FD 77 07             		ld	(iy+(obj_x+1)),a
1A70 FD 7E 06             		ld	a,(iy+(obj_x))
1A73 E6 F8                		and	0F8h
1A75 FD 77 06             		ld	(iy+(obj_x)),a
1A78                      		
1A78 FD CB 19 46          		bit 	bitobj_dir,(iy+obj_status)
1A7C CA 00 00             		jp	z,@right_w
1A7F FD 66 07             		ld	h,(iy+(obj_x+1))
1A82 FD 6E 06             		ld	l,(iy+(obj_x))
1A85 11 08 00             		ld	de,8
1A88 19                   		add 	hl,de
1A89 FD 74 07             		ld	(iy+(obj_x+1)),h
1A8C FD 75 06             		ld	(iy+(obj_x)),l
1A8F                      		
1A8F                      @right_w:
1A8F FD 7E 07             		ld	a,(iy+(obj_x+1))
1A92 E6 FF                		and	0FFh
1A94 FD 77 07             		ld	(iy+(obj_x+1)),a
1A97 FD 7E 06             		ld	a,(iy+(obj_x))
1A9A E6 F8                		and	0F8h
1A9C FD 77 06             		ld	(iy+(obj_x)),a
1A9F                      		
1A9F C9                   		ret
1AA0                      		
1AA0                      ; 		cmp.w	#1,d0
1AA0                      ;  		beq	@wallsolid_slope
1AA0                      ; 		
1AA0                      ;    		move.l	obj_y(a6),d2
1AA0                      ;     		swap	d2
1AA0                      ;      		and.w	#$F,d2
1AA0                      ;      		bne.s	@NoCol_LR
1AA0                      ;      		
1AA0                      ;     		lea	(col_SlopeData),a3
1AA0                      ;     		and.l	#$FF,d0
1AA0                      ;     		move.w	d0,d3
1AA0                      ;     		lsl.w	#4,d3
1AA0                      ;     		adda	d3,a3
1AA0                      ;     		move.l	obj_x(a6),d0
1AA0                      ;     		swap	d0
1AA0                      ;     		and.w	#$F,d0
1AA0                      ;     		move.b	(a3,d0.w),d0
1AA0                      ;     		and.w	#$F,d0
1AA0                      ;     		and.l	#$FFF00000,obj_y(a6)
1AA0                      ;   		swap	d0
1AA0                      ;   		and.l	#$FFFF0000,d0
1AA0                      ; 
1AA0                      ;  		sub.l	d0,obj_y(a6)
1AA0                      ;   		tst.l	d6
1AA0                      ;   		beq.s	@ClrYSpd
1AA0                      ;   		tst.l	d7
1AA0                      ;   		bmi.s	@NoCol_LR
1AA0                      ; @ClrYSpd:
1AA0                      ;   		bclr	#bitobj_air,obj_status(a6)
1AA0                      ;            	clr.l	d7
1AA0                      ; @NoCol_LR:
1AA0                      ; 		rts
1AA0                      		
1AA0                      ; **********************************
1AA0                      ; Move level camera
1AA0                      ; **********************************
1AA0                      
1AA0                      @plyr_camera:
1AA0 DD 21 00 00           		ld	ix,ram_levelbuffer
1AA4                       		
1AA4                      ; --------------	
1AA4                      ; LEFT/RIGHT
1AA4                      ; --------------
1AA4                      
1AA4 FD 66 00               		ld      h,(iy+(lvl_x_size+1))
1AA7 FD 6E 00               		ld      l,(iy+(lvl_x_size))
1AAA 11 00 F0               		ld	de,-(256<<4)
1AAD 19                     		add 	hl,de
1AAE DA 00 00               		jp	c,@end_x_lvl
1AB1                      		
1AB1 FD 66 07               		ld      h,(iy+(obj_x+1))
1AB4 FD 6E 06               		ld      l,(iy+(obj_x))
1AB7 7C                     		ld	a,h
1AB8 B5                     		or	l
1AB9 CA 00 00               		jp	z,@end_x_lvl
1ABC                        		
1ABC                      
1ABC 11 7D 00               		ld	de,(248/2)+1
1ABF 37                     		scf			;todo: checar si se mueve un pixel delante
1AC0 ED 52                  		sbc	hl,de
1AC2 FA 00 00               		jp	m,@start_x
1AC5 DA 00 00               		jp	c,@start_x
1AC8                        		
1AC8 44                      		ld	b,h
1AC9 4D                      		ld	c,l
1ACA DD 56 00                		ld	d,(ix+(lvl_x_size+1))
1ACD DD 5E 00                		ld	e,(ix+(lvl_x_size))
1AD0 7B                       		ld	a,e
1AD1 0F                       		rrca
1AD2 0F                       		rrca
1AD3 0F                       		rrca
1AD4 0F                       		rrca
1AD5 E6 F0                    		and	0F0h
1AD7 6F                       		ld	l,a
1AD8 7B                      		ld	a,e
1AD9 0F                       		rrca
1ADA 0F                       		rrca
1ADB 0F                       		rrca
1ADC 0F                       		rrca
1ADD E6 0F                    		and	00Fh
1ADF 67                      		ld	h,a
1AE0 7A                      		ld	a,d
1AE1 0F                      		rrca
1AE2 0F                      		rrca
1AE3 0F                      		rrca
1AE4 0F                      		rrca
1AE5 E6 F0                   		and	0F0h
1AE7 67                      		ld	h,a
1AE8                         		
1AE8 21 00 08                		ld	hl,0800h
1AEB 11 07 FF                 		ld	de,-(249)
1AEE 19                       		add 	hl,de
1AEF 78                      		ld	a,b
1AF0 BC                      		cp	h
1AF1 DA 00 00                		jp	c,@nope
1AF4 79                        		ld	a,c
1AF5 BD                        		cp	l
1AF6 DA 00 00                  		jp	c,@nope
1AF9                          		
1AF9 44                       		ld	b,h
1AFA 4D                       		ld	c,l
1AFB                      
1AFB                      @nope:
1AFB 79                     		ld	a,c
1AFC 2F                     		cpl
1AFD 32 2C C8               		ld      (ram_hscroll),a
1B00 DD 70 00              		ld      (ix+(lvl_x+1)),b
1B03 DD 71 00               		ld      (ix+(lvl_x)),c
1B06                        		
1B06 79                     		ld	a,c
1B07 E6 08                  		and	00001000b
1B09 DD 66 00               		ld	h,(ix+(lvl_past_x))
1B0C BC                     		cp	h
1B0D CA 00 00               		jp	z,@end_x_lvl
1B10 DD 77 00               		ld	(ix+(lvl_past_x)),a
1B13                        		
1B13 FD CB 0F 7E            		bit 	7,(iy+(obj_x_spd+1))
1B17 C2 00 00               		jp	nz,@leftscrl	
1B1A FD CB 19 46            		bit 	bitobj_dir,(iy+(obj_status))
1B1E C2 00 00               		jp	nz,@leftscrl
1B21                        		
1B21 DD CB 00 C6            		set 	bit_drw_r,(ix+(lvl_drawdir))
1B25 C3 00 00               		jp	@end_x_lvl
1B28                      @leftscrl:
1B28 DD CB 00 C6            		set 	bit_drw_l,(ix+(lvl_drawdir))
1B2C C3 00 00               		jp	@end_x_lvl
1B2F                        		
1B2F                      @start_x:
1B2F AF                   		xor	a
1B30 DD 77 00              		ld      (ix+(lvl_x+1)),a
1B33 DD 77 00               		ld      (ix+(lvl_x)),a
1B36 32 2C C8               		ld      (ram_hscroll),a
1B39                      @end_x_lvl:
1B39                      
1B39                      ; --------------	
1B39                      ; UP/DOWN
1B39                      ; --------------
1B39                      
1B39 FD 66 0B               		ld      h,(iy+(obj_y+1))
1B3C FD 6E 0A               		ld      l,(iy+(obj_y))
1B3F 7C                     		ld	a,h
1B40 B5                     		or	l
1B41 CA 00 00               		jp	z,@end_y_lvl
1B44                        		
1B44 FD 66 0B               		ld      h,(iy+(obj_y+1))
1B47 FD 6E 0A               		ld      l,(iy+(obj_y))
1B4A 11 68 00               		ld	de,(192/2)+8h
1B4D 37                     		scf
1B4E ED 52                  		sbc	hl,de
1B50 FA 00 00               		jp	m,@start_y
1B53 DA 00 00               		jp	c,@start_y
1B56                      
1B56 44                     		ld	b,h
1B57 4D                     		ld	c,l
1B58                            		
1B58 DD 7E 00                   		ld	a,(ix+(lvl_y_size+1))
1B5B 87                         		add	a
1B5C 87                         		add	a
1B5D 87                         		add	a
1B5E 87                         		add	a
1B5F E6 F0                      		and	0F0h
1B61 67                         		ld	h,a
1B62 DD 7E 00                   		ld	a,(ix+(lvl_y_size))
1B65 0F                         		rrca
1B66 0F                         		rrca
1B67 0F                         		rrca
1B68 0F                         		rrca
1B69 E6 0F                      		and	00Fh
1B6B B4                         		or	h
1B6C 67                         		ld	h,a
1B6D DD 7E 00                   		ld	a,(ix+(lvl_y_size))
1B70 87                         		add	a
1B71 87                         		add	a
1B72 87                         		add	a
1B73 87                         		add	a
1B74 6F                         		ld	l,a
1B75                            		
1B75 11 40 FF                   		ld	de,-0C0h
1B78                      
1B78 19                         		add	hl,de
1B79 78                          		ld	a,b
1B7A BC                          		cp	h
1B7B DA 00 00                   		jp	c,@topok_y      		
1B7E 79                          		ld	a,c
1B7F BD                          		cp	l
1B80 D2 00 00                   		jp	nc,@end_y
1B83                      @topok_y:
1B83                      
1B83 60                     		ld	h,b
1B84 69                     		ld	l,c
1B85 DD 74 00              		ld      (ix+(lvl_y+1)),h
1B88 DD 75 00               		ld      (ix+(lvl_y)),l
1B8B 7C                    		ld      a,h
1B8C 32 2B C8               		ld      (ram_vscroll+1),a
1B8F 7D                     		ld      a,l
1B90 32 2A C8               		ld      (ram_vscroll),a
1B93                        		
1B93 C9                     		ret
1B94                      @start_y:
1B94 AF                   		xor	a
1B95 DD 77 00              		ld      (ix+(lvl_y+1)),a
1B98 DD 77 00               		ld      (ix+(lvl_y)),a
1B9B 32 2B C8               		ld      (ram_vscroll+1),a
1B9E 32 2A C8               		ld      (ram_vscroll),a	
1BA1 C9                     		ret
1BA2                      @end_y:
1BA2 11 00 00             		ld	de,0
1BA5 DD 7E 00             		ld	a,(ix+(lvl_y_size))
1BA8 D6 0C                      		sub 	0Ch
1BAA 87                   		add 	a
1BAB 87                   		add	a
1BAC 87                   		add	a
1BAD 87                   		add	a
1BAE 5F                   		ld	e,a
1BAF                      		
1BAF DD 72 00              		ld      (ix+(lvl_y+1)),d
1BB2 DD 73 00               		ld      (ix+(lvl_y)),e
1BB5                        		
1BB5 7A                   		ld	a,d	
1BB6 32 2B C8                		ld      (ram_vscroll+1),a
1BB9 7B                   		ld	a,e
1BBA 32 2A C8                		ld      (ram_vscroll),a	
1BBD C9                     		ret
1BBE                        		
1BBE                      @end_y_lvl:
1BBE C9                   		ret
1BBF                      	
1BBF                      ; --------------	
1BBF                      ; debug mode
1BBF                      ; --------------
1BBF                      
1BBF                      @debug_mode:
1BBF 01 00 00             		ld	bc,0
1BC2 11 00 00             		ld	de,0
1BC5                      		
1BC5                      ; --------------	
1BC5                      ; RIGHT
1BC5                      ; --------------
1BC5                      
1BC5 3A 21 C8             		ld	a,(ram_joypads+on_hold)
1BC8 CB 5F                		bit 	bitJoyRight,a
1BCA 28 00                		jr      z,@NotRight
1BCC                      		
1BCC 01 00 04             		ld	bc,400h
1BCF FD CB 19 86           		res	bitobj_dir,(iy+obj_status)
1BD3                      @NotRight:
1BD3                      
1BD3                      ; --------------	
1BD3                      ; LEFT
1BD3                      ; --------------
1BD3                      
1BD3 3A 21 C8             		ld	a,(ram_joypads+on_hold)
1BD6 CB 57                		bit 	bitJoyLeft,a
1BD8 28 00                		jr      z,@NotLeft
1BDA                      
1BDA 01 00 FC             		ld	bc,-400h
1BDD FD CB 19 C6           		set	bitobj_dir,(iy+obj_status)
1BE1                      @NotLeft:
1BE1                      
1BE1                      ; --------------	
1BE1                      ; DOWN
1BE1                      ; --------------
1BE1                      
1BE1 3A 21 C8             		ld	a,(ram_joypads+on_hold)
1BE4 CB 4F                		bit 	bitJoyDown,a
1BE6 28 00                		jr      z,@NotDown
1BE8                      
1BE8 11 00 04             		ld	de,400h
1BEB                      @NotDown:
1BEB                      
1BEB                      ; --------------	
1BEB                      ; UP
1BEB                      ; --------------
1BEB                      
1BEB 3A 21 C8             		ld	a,(ram_joypads+on_hold)
1BEE CB 47                		bit 	bitJoyUp,a
1BF0 28 00                		jr      z,@NotUp
1BF2                      		
1BF2 11 00 FC             		ld	de,-400h
1BF5                      		
1BF5                      @NotUp:
1BF5 FD 70 0F             		ld	(iy+(obj_x_spd+1)),b
1BF8 FD 71 0E             		ld	(iy+(obj_x_spd)),c
1BFB FD 72 11             		ld	(iy+(obj_y_spd+1)),d
1BFE FD 73 10             		ld	(iy+(obj_y_spd)),e
1C01                      		
1C01 FD 66 0F             		ld	h,(iy+(obj_x_spd+1))
1C04 CD 1F 18             		call	@update_xspd
1C07 FD 66 11             		ld	h,(iy+(obj_y_spd+1))
1C0A CD 3A 18             		call	@update_yspd
1C0D CD A0 1A             		call	@plyr_camera
1C10 C3 FF 17             		jp 	@Render
1C13                      		
1C13                      ; =================================================================
1C13                      ; ------------------------------------------------
1C13                      ; Data
1C13                      ; ------------------------------------------------
1C13                      		
1C13                      ani_player:
1C13 00 00                		dw @Idle
1C15 00 00                		dw @Walk
1C17 00 00                		dw @Jump_1
1C19 00 00                		dw @Jump_2
1C1B                      @Idle:
1C1B 05                    		db 5
1C1C 00                    		db 0
1C1D FF                   		db 0FFh
1C1E                      @Jump_1:	
1C1E 04                    		db 4
1C1F 07                    		db 7
1C20 FF                   		db 0FFh
1C21                      @Jump_2:	
1C21 04                    		db 4
1C22 08                    		db 8
1C23 FF                   		db 0FFh
1C24                      @Walk:
1C24 03                    		db 3
1C25 01 02 03 04 05 06     		db 1,2,3,4,5,6
1C2B FF                   		db 0FFh
1C2C                      		
1C2C                      ; --------------	
1C2C                      ; LEFT/RIGHT
1C2C                      ; --------------
1C2C                      
1C2C                      ; @movelevel:
1C2C                      ;   		ld	a,(ram_joypads+on_press)
1C2C                      ;   		bit 	bitJoyStart,a
1C2C                      ;   		jp	z,@DontExit
1C2C                      ; 		ld	a,0
1C2C                      ; 		ld	(ram_gamemode),a
1C2C                      ; 		ret
1C2C                      ; @DontExit:
1C2C                      ; 		ld	ix,ram_levelbuffer
1C2C                      ; 
1C2C                      ; ; --------------	
1C2C                      ; ; RIGHT
1C2C                      ; ; --------------
1C2C                      ; 
1C2C                      ; 		ld	a,(ram_joypads+on_hold)
1C2C                      ; 		bit 	bitJoyRight,a
1C2C                      ; 		jr      z,@NotRight
1C2C                      ;  		ld      b,(ix+(lvl_x+1))
1C2C                      ;  		ld      c,(ix+(lvl_x))
1C2C                      ;  		inc	bc
1C2C                      ;  		
1C2C                      ;  		ld	a,(ix+(lvl_x_size))
1C2C                      ;  		srl	a
1C2C                      ;  		srl	a
1C2C                      ;  		srl	a
1C2C                      ;  		srl	a
1C2C                      ;  		ld	h,a
1C2C                      ;   		ld	a,(ix+(lvl_x_size+1))
1C2C                      ;   		and 	0F0h
1C2C                      ;   		ld	l,a
1C2C                      ;   		if MERCURY
1C2C                      ;  		ld	de,(160)-1
1C2C                      ;  		else
1C2C                      ;  		ld	de,(256-8)-1
1C2C                      ;  		endif
1C2C                      ;  		sbc	hl,de
1C2C                      ;    		ld	a,h
1C2C                      ;     		cp	b
1C2C                      ;     		jp	nz,@cont_x_r
1C2C                      ;    		ld	a,l
1C2C                      ;     		cp	c
1C2C                      ;     		jp	nz,@cont_x_r 		
1C2C                      ;     		jr	@NotRight
1C2C                      ; @cont_x_r:
1C2C                      ;  		ld      (ix+(lvl_x+1)),b
1C2C                      ;  		ld      (ix+(lvl_x)),c
1C2C                      ; 
1C2C                      ;  		ld	a,(ix+(lvl_drawdir))	;draw right
1C2C                      ;   		set 	bit_drw_r,a
1C2C                      ;  		ld	(ix+(lvl_drawdir)),a
1C2C                      ; @notdrw_r:
1C2C                      ; 
1C2C                      ; 		ld      a,(ram_hscroll)
1C2C                      ; 		dec     a			; move right
1C2C                      ; 		ld      (ram_hscroll),a 
1C2C                      ; @NotRight:
1C2C                      ; 
1C2C                      ; ; --------------	
1C2C                      ; ; LEFT
1C2C                      ; ; --------------
1C2C                      ; 
1C2C                      ; 		ld	a,(ram_joypads+on_hold)
1C2C                      ; 		bit 	bitJoyLeft,a
1C2C                      ; 		jr      z,@NotLeft
1C2C                      ;  		ld      b,(ix+(lvl_x+1))
1C2C                      ;  		ld      c,(ix+(lvl_x))
1C2C                      ;  		ld	a,c
1C2C                      ;  		or	b
1C2C                      ;  		jp	z,@NotLeft
1C2C                      ;  		dec	bc
1C2C                      ;  		ld      (ix+(lvl_x+1)),b
1C2C                      ;  		ld      (ix+(lvl_x)),c
1C2C                      ;  		ld	a,(ix+(lvl_drawdir))	; draw left
1C2C                      ;   		set 	bit_drw_l,a
1C2C                      ;  		ld	(ix+(lvl_drawdir)),a
1C2C                      ; 		
1C2C                      ; 		ld      a,(ram_hscroll)
1C2C                      ; 		inc     a			; move left
1C2C                      ; 		ld      (ram_hscroll),a 
1C2C                      ; @NotLeft:
1C2C                      ; 
1C2C                      ; ; --------------	
1C2C                      ; ; DOWN
1C2C                      ; ; --------------
1C2C                      ; 
1C2C                      ; 		ld      hl,ram_vscroll
1C2C                      ; 		
1C2C                      ; 		ld	a,(ram_joypads+on_hold)
1C2C                      ; 		bit 	bitJoyDown,a
1C2C                      ; 		jr      z,@NotDown
1C2C                      ;  		ld      b,(ix+(lvl_y+1))
1C2C                      ;  		ld      c,(ix+(lvl_y))
1C2C                      ;  		inc	bc
1C2C                      ;  		
1C2C                      ;    		ld	a,(ix+(lvl_y_size))
1C2C                      ;    		if MERCURY
1C2C                      ;    		sub 	9
1C2C                      ;    		else
1C2C                      ;    		sub 	0Ch
1C2C                      ;    		endif
1C2C                      ;    		sla	a
1C2C                      ;    		sla	a
1C2C                      ;    		sla	a
1C2C                      ;    		sla	a
1C2C                      ;    		cp	c
1C2C                      ;    		jp	c,@NotDown
1C2C                      ;    		
1C2C                      ;  		ld      (ix+(lvl_y+1)),b
1C2C                      ;  		ld      (ix+(lvl_y)),c
1C2C                      ; 		ld	a,(ix+(lvl_drawdir))
1C2C                      ;  		set 	bit_drw_d,a
1C2C                      ; 		ld	(ix+(lvl_drawdir)),a
1C2C                      ; 		
1C2C                      ; 		ld      a,(hl)
1C2C                      ; 		inc     a			; move down
1C2C                      ; 		ld      (hl),a
1C2C                      ;  		ld	a,(ram_vintwait)
1C2C                      ;  		res 	bitVerDir,a
1C2C                      ;  		ld	(ram_vintwait),a
1C2C                      ; @NotDown:
1C2C                      ; 
1C2C                      ; ; --------------	
1C2C                      ; ; UP
1C2C                      ; ; --------------
1C2C                      ; 
1C2C                      ; 		ld	a,(ram_joypads+on_hold)
1C2C                      ; 		bit 	bitJoyUp,a
1C2C                      ; 		jr      z,@NotUp
1C2C                      ;  		ld      b,(ix+(lvl_y+1))
1C2C                      ;  		ld      c,(ix+(lvl_y))
1C2C                      ;  		ld	a,c
1C2C                      ;  		or	b
1C2C                      ;  		jp	z,@NotUp
1C2C                      ;  		dec	bc
1C2C                      ;  		ld      (ix+(lvl_y+1)),b
1C2C                      ;  		ld      (ix+(lvl_y)),c
1C2C                      ; 		ld	a,(ix+(lvl_drawdir))
1C2C                      ;  		set 	bit_drw_u,a
1C2C                      ; 		ld	(ix+(lvl_drawdir)),a
1C2C                      ; 		
1C2C                      ; 		ld      a,(hl)
1C2C                      ; 		dec     a			; move up
1C2C                      ; 		ld      (hl),a
1C2C                      ;  		ld	a,(ram_vintwait)
1C2C                      ;  		set 	bitVerDir,a
1C2C                      ;  		ld	(ram_vintwait),a
1C2C                      ; @NotUp:
1C2C                      ; 		ret
1C2C                      		
1C2C                      		
1C2C                      ; 		call	@movelevel
1C2C                      		
1C2C                      ;  ;LEFT/RIGHT
1C2C                      ; 		ld	b,(iy+obj_x+1)
1C2C                      ; 		ld	c,(iy+obj_x)
1C2C                      ;   		ld	a,(ram_joypads+on_hold)
1C2C                      ;   		bit 	bitJoyRight,a
1C2C                      ;   		jp	z,@not_r
1C2C                      ; 		inc	bc
1C2C                      ; 		res	bitobj_dir,(iy+obj_status)
1C2C                      ; @not_r:
1C2C                      ;   		ld	a,(ram_joypads+on_hold)
1C2C                      ;   		bit 	bitJoyLeft,a
1C2C                      ;   		jp	z,@not_l
1C2C                      ; 		dec	bc
1C2C                      ; 		set	bitobj_dir,(iy+obj_status)
1C2C                      ; @not_l:
1C2C                      ; 		ld	(iy+obj_x+1),b
1C2C                      ; 		ld	(iy+obj_x),c
1C2C                      ; 		
1C2C                      ;  ;UP/DOWN
1C2C                      ; 		ld	b,(iy+obj_y+1)
1C2C                      ; 		ld	c,(iy+obj_y)
1C2C                      ;   		ld	a,(ram_joypads+on_hold)
1C2C                      ;   		bit 	bitJoyDown,a
1C2C                      ;   		jp	z,@not_d
1C2C                      ; 		inc	bc
1C2C                      ; @not_d:
1C2C                      ;   		ld	a,(ram_joypads+on_hold)
1C2C                      ;   		bit 	bitJoyUp,a
1C2C                      ;   		jp	z,@not_u
1C2C                      ; 		dec	bc
1C2C                      ; @not_u:
1C2C                      ; 		ld	(iy+obj_y+1),b
1C2C                      ; 		ld	(iy+obj_y),c
1C2C                      ; 		ld	(iy+obj_y),c
1C2C                      		
1C2C                      		
1C2C                      		include	"modes/level/subs/level.asm"
1C2C                      ; =================================================================
1C2C                      ; Level system
1C2C                      ; =================================================================
1C2C                      
1C2C                      ; ------------------------------------------------
1C2C                      ; Variables
1C2C                      ; ------------------------------------------------
1C2C                      
1C2C =00000128            max_lvlprz	equ	500h
1C2C =0000013B            max_lvlobj	equ	64
1C2C                      
1C2C                      ; -----------------------
1C2C                      
1C2C                      			rsreset
1C2C =00000174            lvl_x			rw	1
1C2C =00000182            lvl_y			rw	1
1C2C =00000194            lvl_x_size		rw	1
1C2C =000001A6            lvl_y_size		rw	1
1C2C =000001B8            lvl_past_x		rb	1
1C2C =000001CA            lvl_past_y		rb	1
1C2C =000001DC            lvl_layout		rw	1
1C2C =000001EE            lvl_blocks		rw	1
1C2C =00000203            lvl_collision		rw	1
1C2C =00000215            lvl_prizes		rw	1
1C2C =00000228            lvl_objects		rw	1
1C2C =0000023B            lvl_drawdir		rb	1
1C2C =0000024B            lvl_prio		rb	1
1C2C =0000025F            sizeof_level		rb	0
1C2C                      
1C2C                      ; -----------------------
1C2C                      
1C2C                      ; lvl_prio
1C2C =0000029C            bit_split		equ	0
1C2C                      
1C2C                      ; -----------------------
1C2C                      
1C2C                      ; lvl_drawdir
1C2C =000002DC            bit_drw_r		equ	0
1C2C =000002EE            bit_drw_l		equ	1
1C2C =00000300            bit_drw_d		equ	2
1C2C =00000312            bit_drw_u		equ	3
1C2C                      ; bit_drw_r_2p		equ	4
1C2C                      ; bit_drw_l_2p		equ	5
1C2C                      ; bit_drw_d_2p		equ	6
1C2C                      ; bit_drw_u_2p		equ	7
1C2C                      
1C2C                      ; ; ------------------------------------------------
1C2C                      ; ; RAM
1C2C                      ; ; ------------------------------------------------
1C2C                      	
1C2C                      ; ram_levelbuffer	rs.b (sizeof_level*2)
1C2C                      
1C2C                      ; =================================================================
1C2C                      ; ------------------------------------------------
1C2C                      ; Subs
1C2C                      ; ------------------------------------------------
1C2C                      
1C2C                      ; ------------------------------------------------
1C2C                      ; Level_load
1C2C                      ;
1C2C                      ; Set a level
1C2C                      ; 
1C2C                      ; Input:
1C2C                      ; 
1C2C                      ; [NORMAL]
1C2C                      ; hl - level data
1C2C                      ;	dw @floor
1C2C                      ;	dw @interblocks
1C2C                      ;	dw @collision
1C2C                      ;	dw @objects
1C2C                      ;	dw x_size
1C2C                      ;	dw y_size
1C2C                      ;	db settings
1C2C                      ;	db 0
1C2C                      ;	db (layout_data)
1C2C                      ; bc - start at X position
1C2C                      ; de - start at Y position
1C2C                      ;
1C2C                      ; [ALTERNATE]
1C2C                      ; (nothing)
1C2C                      ; ------------------------------------------------
1C2C                      
1C2C                      level_load:
1C2C FD 21 00 00          		ld	iy,ram_levelbuffer
1C30                      		
1C30 FD 70 01             		ld	(iy+(lvl_x+1)),b
1C33 FD 71 00             		ld	(iy+(lvl_x)),c
1C36 FD 72 03             		ld	(iy+(lvl_y+1)),d
1C39 FD 73 02             		ld	(iy+(lvl_y)),e
1C3C                      		
1C3C 7E                   		ld	a,(hl)
1C3D 23                   		inc	hl
1C3E FD 77 0C             		ld	(iy+(lvl_blocks)),a
1C41 7E                   		ld	a,(hl)
1C42 23                   		inc	hl
1C43 FD 77 0D             		ld	(iy+(lvl_blocks+1)),a
1C46                      		
1C46 7E                   		ld	a,(hl)
1C47 23                   		inc	hl
1C48 FD 77 0E             		ld	(iy+(lvl_collision)),a
1C4B 7E                   		ld	a,(hl)
1C4C 23                   		inc	hl
1C4D FD 77 0F             		ld	(iy+(lvl_collision+1)),a
1C50                      	
1C50 7E                   		ld	a,(hl)
1C51 23                   		inc	hl
1C52 FD 77 10             		ld	(iy+(lvl_prizes)),a
1C55 7E                   		ld	a,(hl)
1C56 23                   		inc	hl
1C57 FD 77 11             		ld	(iy+(lvl_prizes+1)),a
1C5A                      		
1C5A 7E                   		ld	a,(hl)
1C5B 23                   		inc	hl
1C5C FD 77 12             		ld	(iy+(lvl_objects)),a
1C5F 7E                   		ld	a,(hl)
1C60 23                   		inc	hl
1C61 FD 77 13             		ld	(iy+(lvl_objects+1)),a
1C64                      		
1C64 7E                   		ld	a,(hl)
1C65 23                   		inc	hl
1C66 FD 77 04             		ld	(iy+(lvl_x_size)),a
1C69 7E                   		ld	a,(hl)
1C6A 23                   		inc	hl
1C6B FD 77 05             		ld	(iy+(lvl_x_size+1)),a
1C6E                      		
1C6E 7E                   		ld	a,(hl)
1C6F 23                   		inc	hl
1C70 FD 77 06             		ld	(iy+(lvl_y_size)),a
1C73 7E                   		ld	a,(hl)
1C74 23                   		inc	hl
1C75 FD 77 07             		ld	(iy+(lvl_y_size+1)),a
1C78                      		
1C78 FD 74 0B             		ld	(iy+(lvl_layout+1)),h
1C7B FD 75 0A             		ld	(iy+(lvl_layout)),l	
1C7E C9                   		ret
1C7F                      		
1C7F                      ; ----------------------------------	
1C7F                      ; Redraw the level
1C7F                      ; 
1C7F                      ; Uses:
1C7F                      ; iy
1C7F                      ; ----------------------------------
1C7F                      
1C7F                      level_draw:
1C7F 3A 00 00             		ld	a,(ram_levelbuffer+lvl_x)
1C82 ED 44                		neg	a
1C84 32 2C C8             		ld	(ram_hscroll),a
1C87 3A 00 00             		ld	a,(ram_levelbuffer+lvl_y)
1C8A 32 2A C8             		ld	(ram_vscroll),a
1C8D 3A 06 C8             		ld	a,(ram_vintwait)
1C90 CB B7                		res	bitVerDir,a
1C92 32 06 C8             		ld	(ram_vintwait),a
1C95                      		
1C95                      ; ----------------------------------
1C95                      
1C95 DD 2A 00 00          		ld	ix,(ram_levelbuffer+lvl_layout)
1C99                      		
1C99 D9                   		exx
1C9A 21 00 38             		ld	hl,screen
1C9D 01 00 00             		ld	bc,0
1CA0 3A 00 00             		ld	a,(ram_levelbuffer+lvl_x)
1CA3 CB 27                		sla	a
1CA5 4F                   		ld	c,a
1CA6 09                   		add	hl,bc		;+X
1CA7 01 00 00             		ld	bc,0
1CAA 3A 00 00             		ld	a,(ram_levelbuffer+lvl_y)
1CAD CB 27                		sla	a
1CAF CB 27                		sla	a
1CB1 CB 27                		sla	a
1CB3 CB 27                		sla	a
1CB5 CB 27                		sla	a
1CB7 CB 27                		sla	a
1CB9 4F                   		ld	c,a
1CBA 09                   		add	hl,bc		;+Y
1CBB 01 00 00             		ld	bc,0
1CBE 44                   		ld	b,h
1CBF 4D                   		ld	c,l
1CC0 D9                   		exx
1CC1                      		
1CC1 0E 10                		ld	c,10h
1CC3                      @x_loop:
1CC3 DD E5                		push	ix
1CC5 06 0E                		ld	b,0Eh
1CC7                      @y_loop:
1CC7 FD 2A 00 00           		ld	iy,(ram_levelbuffer+lvl_blocks)
1CCB 11 00 00              		ld	de,0
1CCE DD 7E 00              		ld	a,(ix)
1CD1 E6 E0                 		and	11100000b
1CD3 CB 3F                 		srl	a
1CD5 CB 3F                 		srl	a
1CD7 CB 3F                 		srl	a
1CD9 CB 3F                 		srl	a
1CDB CB 3F                 		srl	a
1CDD 57                    		ld	d,a
1CDE DD 7E 00              		ld	a,(ix)
1CE1 CB 27                 		sla	a
1CE3 CB 27                 		sla	a
1CE5 CB 27                 		sla	a
1CE7 5F                    		ld	e,a
1CE8 FD 19                 		add	iy,de
1CEA                      
1CEA D9                   		exx
1CEB 7D                    		ld	a,l
1CEC D3 BF                  		out	(Vcom),a
1CEE 7C                     		ld	a,h
1CEF F6 40                  		or	Writemask
1CF1 D3 BF                  		out	(Vcom),a
1CF3 11 40 00               		ld	de,40h
1CF6 19                      		add	hl,de
1CF7 D9                   		exx
1CF8 FD 7E 00              		ld	a,(iy)
1CFB FD 23                 		inc	iy
1CFD D3 BE                  		out	(Vdata),a
1CFF FD 7E 00              		ld	a,(iy)
1D02 FD 23                 		inc	iy
1D04 D3 BE                  		out	(Vdata),a
1D06 FD 23                		inc	iy
1D08 FD 23                		inc	iy
1D0A FD 7E 00              		ld	a,(iy)
1D0D FD 23                 		inc	iy
1D0F D3 BE                  		out	(Vdata),a
1D11 FD 7E 00              		ld	a,(iy)
1D14 FD 23                 		inc	iy
1D16 D3 BE                  		out	(Vdata),a
1D18 FD 2B                		dec 	iy
1D1A FD 2B                		dec	iy
1D1C FD 2B                		dec	iy
1D1E FD 2B                		dec	iy
1D20                      		
1D20 D9                   		exx
1D21 7D                    		ld	a,l
1D22 D3 BF                  		out	(Vcom),a
1D24 7C                     		ld	a,h
1D25 F6 40                  		or	Writemask
1D27 D3 BF                  		out	(Vcom),a
1D29 11 40 00               		ld	de,40h
1D2C 19                      		add	hl,de
1D2D D9                   		exx
1D2E FD 7E 00              		ld	a,(iy)
1D31 FD 23                 		inc	iy
1D33 D3 BE                  		out	(Vdata),a
1D35 FD 7E 00              		ld	a,(iy)
1D38 FD 23                 		inc	iy
1D3A D3 BE                  		out	(Vdata),a
1D3C FD 23                		inc	iy
1D3E FD 23                		inc	iy
1D40 FD 7E 00              		ld	a,(iy)
1D43 FD 23                 		inc	iy
1D45 D3 BE                  		out	(Vdata),a
1D47 FD 7E 00              		ld	a,(iy)
1D4A FD 23                 		inc	iy
1D4C D3 BE                  		out	(Vdata),a
1D4E                        		
1D4E ED 5B 00 00            		ld	de,(ram_levelbuffer+lvl_x_size)
1D52 DD 19                  		add	ix,de
1D54                        		
1D54 05                   		dec	b
1D55 C2 C7 1C               		jp	nz,@y_loop
1D58 DD E1                  		pop	ix
1D5A 11 01 00               		ld	de,1
1D5D DD 19                  		add	ix,de
1D5F                        		
1D5F D9                   		exx
1D60 03                   		inc	bc
1D61 03                   		inc	bc
1D62 03                   		inc	bc
1D63 03                   		inc	bc
1D64 60                   		ld	h,b
1D65 69                   		ld	l,c
1D66 D9                   		exx
1D67 0D                   		dec	c
1D68 C2 C3 1C               		jp	nz,@x_loop
1D6B                        		
1D6B                      ; 		ld	ix,(ram_levelbuffer+lvl_layout)
1D6B                      ; 		ld	hl,screen
1D6B                      ; 	
1D6B                      ; 		ld	c,1Ch
1D6B                      ; @y_loop:
1D6B                      ; 		push	hl
1D6B                      ; 		push	ix
1D6B                      ; 		ld	b,20h
1D6B                      ; @x_loop:		
1D6B                      ;  		ld	a,l
1D6B                      ;  		out	(Vcom),a
1D6B                      ;  		ld	a,h
1D6B                      ;  		or	Writemask
1D6B                      ;  		out	(Vcom),a
1D6B                      ;  		
1D6B                      ; 		ld	iy,(ram_levelbuffer+lvl_blocks)
1D6B                      ; 		ld	a,(ix)
1D6B                      ; 		sla	a
1D6B                      ; 		sla	a
1D6B                      ; 		sla	a		;*8
1D6B                      ; 		ld	de,0
1D6B                      ; 		ld	e,a
1D6B                      ; 		add	iy,de
1D6B                      ; 		
1D6B                      ; 		bit 	0,c
1D6B                      ; 		jp	z,@even_y
1D6B                      ; 		inc	iy
1D6B                      ; 		inc	iy
1D6B                      ; @even_y:
1D6B                      ; 
1D6B                      ; 		bit 	0,b
1D6B                      ; 		jp	z,@even_x
1D6B                      ; 		ld	de,4
1D6B                      ; 		add	iy,de
1D6B                      ;  		inc	ix
1D6B                      ; @even_x:
1D6B                      ; 		ld	a,(iy)
1D6B                      ; 		inc	iy
1D6B                      ;  		out	(Vdata),a
1D6B                      ; 		ld	a,(iy)
1D6B                      ; 		inc	iy
1D6B                      ;  		out	(Vdata),a
1D6B                      ;  		
1D6B                      ;  		inc	hl
1D6B                      ;  		inc	hl
1D6B                      ; 		djnz	@x_loop
1D6B                      ; 		
1D6B                      ; 		pop	ix
1D6B                      ;   		pop	hl
1D6B                      ;   		
1D6B                      ;    		bit 	0,c
1D6B                      ;    		jp	z,@odd_y
1D6B                      ;    		ld	de,(ram_levelbuffer+lvl_x_size)
1D6B                      ;    		add	ix,de
1D6B                      ; @odd_y:
1D6B                      ;   		ld	de,40h
1D6B                      ;   		add	hl,de
1D6B                      ;   		
1D6B                      ; 		dec	c
1D6B                      ; 		jp	nz,@y_loop
1D6B                      		
1D6B C9                   		ret
1D6C                      	
1D6C                      ; =================================================================
1D6C                      ; ------------------------------------------------
1D6C                      ; Init
1D6C                      ; ------------------------------------------------
1D6C                      
1D6C                      level_init:
1D6C C9                   		ret
1D6D                      		
1D6D                      ; =================================================================
1D6D                      ; ------------------------------------------------
1D6D                      ; Run
1D6D                      ; ------------------------------------------------
1D6D                      
1D6D                      level_run:
1D6D FD 21 00 00          		ld	iy,ram_levelbuffer
1D71                      		
1D71                      ; ----------------------------------		
1D71                      ; draw right
1D71                      ; ----------------------------------
1D71                      
1D71 FD 7E 14             		ld	a,(iy+(lvl_drawdir))
1D74 CB 47                		bit 	bit_drw_r,a
1D76 CA 00 00             		jp	z,@no_right
1D79 CB 87                		res	bit_drw_r,a
1D7B FD 77 14             		ld	(iy+(lvl_drawdir)),a
1D7E                      		
1D7E FD 7E 01               		ld	a,(iy+(lvl_x+1))
1D81 67                     		ld	h,a
1D82 FD 7E 00               		ld	a,(iy+(lvl_x))
1D85 6F                     		ld	l,a
1D86 11 08 00               		ld	de,8
1D89 19                     		add	hl,de
1D8A 54                     		ld	d,h
1D8B 5D                     		ld	e,l
1D8C                      		
1D8C DD 2A 00 00          		ld	ix,(ram_levelbuffer+lvl_layout)
1D90 01 0F 00              		ld	bc,0Fh
1D93 DD 09                 		add	ix,bc
1D95                       		
1D95 01 00 00              		ld	bc,0
1D98 7A                     		ld	a,d
1D99 CB 3F                  		srl	a
1D9B CB 3F                 		srl	a
1D9D CB 3F                  		srl	a
1D9F CB 3F                  		srl	a
1DA1 47                     		ld	b,a
1DA2 7A                     		ld	a,d
1DA3 E6 0F                  		and	0Fh
1DA5 CB 27                  		sla	a
1DA7 CB 27                  		sla	a
1DA9 CB 27                  		sla	a
1DAB CB 27                  		sla	a
1DAD 4F                     		ld	c,a
1DAE 7B                      		ld	a,e
1DAF CB 3F                  		srl	a
1DB1 CB 3F                  		srl	a
1DB3 CB 3F                  		srl	a
1DB5 CB 3F                  		srl	a
1DB7 B1                      		or	c
1DB8 4F                     		ld	c,a
1DB9 DD 09                  		add	ix,bc
1DBB                      		
1DBB                      		;VDP
1DBB 21 3E 38             		ld	hl,screen+3Eh
1DBE FD 7E 00              		ld	a,(iy+(lvl_x))
1DC1 CB 3F                 		srl	a
1DC3 CB 3F                 		srl	a
1DC5 CB 3F                 		srl	a
1DC7 E6 1F                 		and	1Fh
1DC9 CB 27                 		sla	a
1DCB 01 00 00              		ld	bc,0
1DCE 4F                    		ld	c,a
1DCF 09                    		add	hl,bc
1DD0 7D                    		ld	a,l
1DD1 E6 3F                 		and	3Fh
1DD3 6F                    		ld	l,a
1DD4                       		
1DD4                      		;ix - layout id
1DD4                      
1DD4 06 0E                		ld	b,0Eh
1DD6                      @next_y_r:
1DD6 C5                   		push	bc
1DD7 E5                   		push	hl
1DD8 2A 00 00              		ld	hl,(ram_levelbuffer+lvl_blocks)
1DDB 11 00 00              		ld	de,0
1DDE DD 7E 00              		ld	a,(ix)
1DE1 E6 E0                 		and	11100000b
1DE3 CB 3F                 		srl	a
1DE5 CB 3F                 		srl	a
1DE7 CB 3F                 		srl	a
1DE9 CB 3F                 		srl	a
1DEB CB 3F                 		srl	a
1DED 57                    		ld	d,a
1DEE DD 7E 00              		ld	a,(ix)
1DF1 CB 27                 		sla	a
1DF3 CB 27                 		sla	a
1DF5 CB 27                 		sla	a
1DF7 5F                    		ld	e,a
1DF8 19                    		add	hl,de
1DF9                      
1DF9 3A 00 00             		ld	a,(ram_levelbuffer+(lvl_x))
1DFC CB 5F                		bit 	3,a
1DFE C2 00 00             		jp	nz,@left_r
1E01 11 04 00             		ld	de,4
1E04 19                   		add	hl,de
1E05                      @left_r:
1E05 44                    		ld	b,h
1E06 4D                    		ld	c,l
1E07 E1                    		pop	hl
1E08                       		
1E08                      		rept 2			;two times
1E08                       		ld	a,l
1E08                       		out	(Vcom),a
1E08                       		ld	a,h
1E08                         		or	Writemask
1E08                       		out	(Vcom),a
1E08                        		ld	a,(bc)
1E08                        		inc	bc
1E08                         		out	(Vdata),a
1E08                        		ld	a,(bc)
1E08                        		inc	bc
1E08                         		out	(Vdata),a
1E08                       		ld	de,40h
1E08                       		add	hl,de
1E08 7D D3 BF 7C F6 40 +   		endr
1E30                         		
1E30 ED 5B 00 00             		ld	de,(ram_levelbuffer+lvl_x_size)
1E34 DD 19                   		add	ix,de
1E36                        		
1E36 C1                     		pop	bc
1E37 10 9D                		djnz	@next_y_r
1E39                      		
1E39                      @no_right:
1E39                      
1E39                      ; ----------------------------------		
1E39                      ; draw left
1E39                      ; 
1E39                      ; TODO: this is the old
1E39                      ; render
1E39                      ; ----------------------------------
1E39                      
1E39 3A 00 00             		ld	a,(ram_levelbuffer+(lvl_drawdir))
1E3C CB 4F                		bit 	bit_drw_l,a
1E3E CA 00 00             		jp	z,@no_left
1E41 CB 8F                		res	bit_drw_l,a
1E43 32 00 00             		ld	(ram_levelbuffer+(lvl_drawdir)),a
1E46                      			
1E46                       		; MASTER SYSTEM LEFT SCROLL
1E46 DD 2A 00 00           		ld	ix,(ram_levelbuffer+lvl_layout)
1E4A 01 00 00               		ld	bc,0
1E4D                        		
1E4D 3A 00 00                		ld	a,(ram_levelbuffer+(lvl_x+1))
1E50 CB 3F                   		srl	a
1E52 CB 3F                  		srl	a
1E54 CB 3F                   		srl	a
1E56 CB 3F                   		srl	a
1E58 47                      		ld	b,a 		
1E59 3A 00 00                		ld	a,(ram_levelbuffer+(lvl_x+1))
1E5C E6 0F                   		and	0Fh
1E5E CB 27                   		sla	a
1E60 CB 27                   		sla	a
1E62 CB 27                   		sla	a
1E64 CB 27                   		sla	a
1E66 4F                      		ld	c,a
1E67 3A 00 00                 		ld	a,(ram_levelbuffer+(lvl_x))
1E6A CB 3F                   		srl	a
1E6C CB 3F                   		srl	a
1E6E CB 3F                   		srl	a
1E70 CB 3F                   		srl	a
1E72 B1                       		or	c
1E73 4F                      		ld	c,a
1E74 DD 09                   		add	ix,bc
1E76                       		
1E76                       		;VDP
1E76 21 00 38              		ld	hl,screen;+3Eh
1E79 3A 00 00               		ld	a,(ram_levelbuffer+(lvl_x))
1E7C 3D                     		dec	a
1E7D 0F                     		rrca
1E7E 0F                     		rrca
1E7F 0F                     		rrca
1E80 E6 1F                  		and	1Fh
1E82 CB 27                  		sla	a
1E84 06 00                  		ld	b,0
1E86 4F                     		ld	c,a
1E87 09                     		add	hl,bc
1E88 7D                     		ld	a,l
1E89 E6 3F                  		and	3Fh
1E8B 6F                     		ld	l,a
1E8C                        		
1E8C                       		;ix - layout id
1E8C                       
1E8C FD E5                		push	iy
1E8E 06 0E                 		ld	b,0Eh
1E90                      @next_y_l:
1E90 FD 2A 00 00            		ld	iy,(ram_levelbuffer+lvl_blocks)
1E94 11 00 00               		ld	de,0
1E97 DD 7E 00               		ld	a,(ix)
1E9A E6 E0                  		and	11100000b
1E9C CB 3F                  		srl	a
1E9E CB 3F                  		srl	a
1EA0 CB 3F                  		srl	a
1EA2 CB 3F                  		srl	a
1EA4 CB 3F                  		srl	a
1EA6 57                     		ld	d,a
1EA7 DD 7E 00               		ld	a,(ix)
1EAA CB 27                  		sla	a
1EAC CB 27                  		sla	a
1EAE CB 27                  		sla	a
1EB0 5F                     		ld	e,a
1EB1 FD 19                  		add	iy,de
1EB3                        		
1EB3 3A 00 00              		ld	a,(ram_levelbuffer+(lvl_x))
1EB6 CB 5F                 		bit 	3,a
1EB8 CA 00 00              		jp	z,@left_l
1EBB FD 23                 		inc	iy
1EBD FD 23                 		inc	iy
1EBF FD 23                 		inc	iy
1EC1 FD 23                 		inc	iy
1EC3                      @left_l:
1EC3 7D                    		ld	a,l
1EC4 D3 BF                  		out	(Vcom),a
1EC6 7C                     		ld	a,h
1EC7 F6 40                    		or	Writemask
1EC9 D3 BF                  		out	(Vcom),a
1ECB 11 40 00               		ld	de,40h
1ECE 19                     		add	hl,de
1ECF                        		
1ECF FD 7E 00                		ld	a,(iy)
1ED2 FD 23                   		inc	iy
1ED4 D3 BE                    		out	(Vdata),a
1ED6 FD 7E 00                		ld	a,(iy)
1ED9 FD 23                   		inc	iy
1EDB D3 BE                    		out	(Vdata),a
1EDD                        		
1EDD 7D                     		ld	a,l
1EDE D3 BF                  		out	(Vcom),a
1EE0 7C                     		ld	a,h
1EE1 F6 40                    		or	Writemask
1EE3 D3 BF                  		out	(Vcom),a
1EE5 11 40 00               		ld	de,40h
1EE8 19                     		add	hl,de
1EE9                        		
1EE9 FD 7E 00                		ld	a,(iy)
1EEC FD 23                   		inc	iy
1EEE D3 BE                    		out	(Vdata),a
1EF0 FD 7E 00                		ld	a,(iy)
1EF3 FD 23                   		inc	iy
1EF5 D3 BE                    		out	(Vdata),a
1EF7                          		
1EF7 ED 5B 00 00              		ld	de,(ram_levelbuffer+lvl_x_size)
1EFB DD 19                    		add	ix,de
1EFD                         		
1EFD 10 91                 		djnz	@next_y_l
1EFF FD E1                		pop	iy
1F01                      @no_left:
1F01                      
1F01                      		
1F01                      ; ----------------------------------		
1F01                      ; draw down
1F01                      ; ----------------------------------
1F01                      
1F01 FD 7E 14             		ld	a,(iy+(lvl_drawdir))
1F04 CB 57                		bit 	bit_drw_d,a
1F06 CA 00 00             		jp	z,@no_down
1F09 CB 97                		res	bit_drw_d,a
1F0B FD 77 14             		ld	(iy+(lvl_drawdir)),a
1F0E                      @no_down:
1F0E                      
1F0E                      ; ----------------------------------		
1F0E                      ; draw up
1F0E                      ; ----------------------------------
1F0E                      
1F0E FD 7E 14             		ld	a,(iy+(lvl_drawdir))
1F11 CB 5F                		bit 	bit_drw_u,a
1F13 CA 00 00             		jp	z,@no_up
1F16 CB 9F                		res	bit_drw_u,a
1F18 FD 77 14             		ld	(iy+(lvl_drawdir)),a
1F1B                      @no_up:
1F1B                       		
1F1B                      ; ----------------------------------
1F1B                      
1F1B C9                      		ret
1F1C                         
1F1C                      ; =================================================================
1F1C                      ; ------------------------------------------------
1F1C                      ; Subs
1F1C                      ; ------------------------------------------------
1F1C                           		
1F1C                      ; =================================================================
1F1C                      ; ------------------------------------------------
1F1C                      ; Data
1F1C                      ; ------------------------------------------------
1F1C                      
1F1C                      col_SlopeData:
1F1C 00 00 00 00 00 00 +  		db 000h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
1F2C 00 00 00 00 00 00 +  		db 000h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
1F3C 0F 0E 0D 0C 0B 0A +  		db 00Fh,0Eh,0Dh,0Ch,0Bh,0Ah,09h,08h,07h,06h,05h,04h,03h,02h,01h,00h	;02
1F4C 00 01 02 03 04 05 +  		db 000h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
1F5C 0F 0F 0E 0E 0D 0D +  		db 00Fh,0Fh,0Eh,0Eh,0Dh,0Dh,0Ch,0Ch,0Bh,0Bh,0Ah,0Ah,09h,09h,08h,08h
1F6C 07 07 06 06 05 05 +  		db 007h,07h,06h,06h,05h,05h,04h,04h,03h,03h,02h,02h,01h,01h,00h,00h
1F7C 08 08 09 09 0A 0A +  		db 008h,08h,09h,09h,0Ah,0Ah,0Bh,0Bh,0Ch,0Ch,0Dh,0Dh,0Eh,0Eh,0Fh,0Fh
1F8C 00 00 01 01 02 02 +  		db 000h,00h,01h,01h,02h,02h,03h,03h,04h,04h,05h,05h,06h,06h,07h,07h
1F9C                      		
1F9C 01 01 01 01 01 01 +  		db 001h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h
1FAC 01 01 01 01 01 01 +  		db 001h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h
1FBC 01 01 01 01 01 01 +  		db 001h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h
1FCC 01 01 01 01 01 01 +  		db 001h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h
1FDC 01 01 01 01 01 01 +  		db 001h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h
1FEC 01 01 01 01 01 01 +  		db 001h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h
1FFC 01 01 01 01 01 01 +  		db 001h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h
200C 01 01 01 01 01 01 +  		db 001h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h,01h
201C                      
201C                      		
201C                      		
201C                      
201C                      ; -------------------------------------------------
201C                      ; Vars
201C                      ; -------------------------------------------------
201C                      
201C                      ; -------------------------------------------------
201C                      ; RAM
201C                      ; -------------------------------------------------
201C                      
201C                      			rsset ram_modebuffer
201C =00000291            RAM_LevelBuffer		rb max_lvlprz
201C =000002AB            RAM_LevelPrizes		rb 100h 
201C =000002D4            RAM_ObjBuffer		rb sizeof_obj*max_objects
201C =000002F8            RAM_ObjJmpTo		rb 3			;0C3 + co + de
201C                      ;    			inform 0,"%h",ram_levelbuffer
201C                       			
201C                      ; -------------------------------------------------
201C                      ; Init
201C                      ; -------------------------------------------------
201C                      
201C                      Level:
201C 06 01                  		ld	b,ID_FadeOut
201E 11 00 1F               		ld	de,1F00h
2021 CD 19 12               		call	PalFade_Set
2024 CD 66 12                 		call	PalFade_Wait
2027                       		
2027 F3                    		di
2028 CD 09 10             		call	VDP_ClearLayer
202B                      		
202B 3A 07 C8               		ld	a,(ram_vdpregs)
202E CB EF                		set	bit_HscrlBar,a
2030 CB A7                		res 	4,a
2032 32 07 C8             		ld	(ram_vdpregs),a
2035 CD 5A 10             		call	Vdp_Update
2038                      		
2038                      ; -----------------------------------
2038                      
2038 3E 00 32 FE FF       		bankdata BANK_LvlMd_Init
203D                      		
203D 21 00 00             		ld      hl,pal_level_test
2040 DD 21 6E CA            		ld	ix,ram_palfadebuff
2044 01 10 00             		ld	bc,0010h
2047 CD 2F 12              		call	PalFade_Load
204A 21 00 00             		ld      hl,pal_player
204D DD 21 6E CA            		ld	ix,ram_palfadebuff
2051 01 10 10             		ld	bc,1010h
2054 CD 2F 12              		call	PalFade_Load
2057 21 00 00             		ld	hl,art_level_test
205A 01 20 16             		ld	bc,1620h
205D 11 00 00             		ld	de,0
2060 CD 7E 0F             		call	WriteVRAM
2063                      		
2063                      ; -----------------------------------
2063                      
2063 3E 00 32 FE FF       		bankdata BANK_LvlMd_Loop
2068                      		
2068 CD 6C 1D             		call	level_init
206B 21 00 00             		ld	hl,test_level
206E 01 00 00             		ld	bc,0
2071 11 00 00             		ld	de,0
2074 CD 2C 1C             		call	level_load
2077 CD 7F 1C             		call	level_draw
207A CD 40 13             		call	objects_init
207D                      		
207D 01 68 00             		ld	bc,VBlank_Default
2080 ED 43 01 C8          		ld	(ram_vintaddr),bc
2084 01 00 00             		ld	bc,HBlank_Level
2087 ED 43 04 C8          		ld	(ram_hintaddr),bc
208B                      		
208B 01 4C 17              		ld	bc,obj_test
208E ED 43 00 C6           		ld	(ram_objbuffer),bc
2092                       		
2092                      ; -----------------------------------
2092                      
2092 FB                   		ei
2093 CD 6D 1D             		call	level_run
2096 CD 46 13             		call	objects_run
2099                      		
2099 06 02                  		ld	b,ID_FadeIn
209B 11 00 1F               		ld	de,1F00h
209E CD 19 12               		call	PalFade_Set
20A1 CD 66 12                		call	PalFade_Wait
20A4                         		
20A4                      ; -------------------------------------------------
20A4                      ; Loop
20A4                      ; -------------------------------------------------
20A4                      
20A4                      level_loop:
20A4 CD D0 10               		call	Sprites_Reset		
20A7 CD 80 10             		call    vsync
20AA                      		
20AA CD 6D 1D                		call	level_run
20AD                         		
20AD                      ; --------------------
20AD                      
20AD 21 BE CD             		ld	hl,ram_tilestovdp+200h
20B0 AF                   		xor	a
20B1 D3 BF                  		out 	(Vcom),a
20B3 3E 62                  		ld	a,22h|WriteMask
20B5 D3 BF                    		out 	(Vcom),a
20B7 0E BE                		ld	c,Vdata
20B9 06 80                		ld	b,80h
20BB ED B3                		otir
20BD                      
20BD                      ; --------------------
20BD                      
20BD CD 46 13             		call	objects_run
20C0                      	
20C0 C3 A4 20             		jp      level_loop		; loop
20C3                      
20C3                      ; -------------------------------------------------
20C3                      ; HBlank
20C3                      ; -------------------------------------------------
20C3                      
20C3                      HBlank_Level:
20C3 C9                   		ret
20C4                      		
20C4                      ; -------------------------------------------------
20C4                      ; Subs
20C4                      ; -------------------------------------------------
20C4                      
20C4                      
20C4                      		
20C4                      		
20C4                      		
20C4                      ; ====================================================================
20C4                      ; -------------------------------------------------
20C4                      ; Sound
20C4                      ; -------------------------------------------------
20C4                      
20C4                       		include "sound/code.asm"
20C4                      ; ================================================================
20C4                      ; SMEG Junior
20C4                      ; Sound and Music Engine for Game Gear/Master System
20C4                      ;
20C4                      ; (C)2015 GF64
20C4                      ; 
20C4                      ; ImpulseTracker
20C4                      ;
20C4                      ; Ticks:
20C4                      ; 150 - NTSC
20C4                      ; 120 - PAL
20C4                      ; ================================================================
20C4                      
20C4                      			rsreset
20C4 =00000144            DrvStatus		rb 1		;Byte
20C4 =0000015E            DrvSettings		rb 1		;Byte
20C4 =00000178            CurrPattern		rb 1		;Byte
20C4 =00000191            PatternEnd		rb 1		;Byte
20C4 =000001AB            PatternLoop		rb 1		;Byte
20C4                      
20C4                      
20C4 =000001C6            PattSize		rw 1		;Word
20C4 =000001DD            PattRead		rw 1		;Word
20C4 =000001F5            SongStart		rw 1		;Word
20C4 =0000020C            SongRead		rw 1		;Word
20C4                      
20C4                      
20C4 =00000228            TicksRead		rb 1		;Byte
20C4 =0000023F            TicksSet		rb 1		;Byte
20C4 =00000256            PsgLast			rb 1		;Byte
20C4 =00000273            DrvSettingsBGM		rb 1		;Byte
20C4 =0000028D            Psg_Vibrato		rb 1		;Byte
20C4 =000002A7            Psg_AutoVol		rb 1		;Byte
20C4                      
20C4 =000002B9            CurrChan		rb 1
20C4 =000002CD            CurrChanType		rb 1
20C4 =000002F0            UsedChnBuff		rb 4		;Array (Bytes)
20C4                      
20C4                      ; --------------------------------------------
20C4                      ; Channel settings
20C4                      ; --------------------------------------------
20C4                      
20C4                      			rsreset
20C4 =0000038B            Chn_Type		rb 1		;Byte
20C4 =000003A1            Chn_ID			rb 1		;Byte
20C4 =000003B8            Chn_Inst		rb 1		;Byte
20C4 =000003CF            Chn_Vol			rb 1		;Byte
20C4                      
20C4 =000003E8            Chn_Freq		rw 1		;Word
20C4 =00000417            Chn_Effect		rw 1		;Word		;TODO: its backwards
20C4 =00000430            Chn_Portam		rw 1		;Word
20C4 =00000449            Chn_DefVol		rb 1		;Byte
20C4 =00000460            Chn_Note		rb 1		;Byte
20C4 =0000047A            Chn_Panning		rb 1		;Byte
20C4 =00000498            Chn_PSG_Vibrato		rb 1		;Byte
20C4 =000004AA            Chn_Unused		rb 2
20C4 =000004BC            sizeof_Chn		rw 0
20C4                       
20C4                      ; --------------------------------------------
20C4                      ; Bits
20C4                      ; --------------------------------------------
20C4                      
20C4 =0000053D            bitPriority		equ	0
20C4 =0000054E            bitSfxOn		equ	1
20C4 =00000562            bitDisabled		equ	2
20C4                      
20C4                      ;Status
20C4 =0000057E            bitDacOn		equ	0
20C4 =00000591            bitDacNote		equ	1
20C4 =000005A2            bitTone3		equ	2
20C4 =000005B6            bitSpecial3		equ	3
20C4                      
20C4                      ; --------------------------------------------
20C4                      ; Channel IDs
20C4                      ; --------------------------------------------
20C4                      
20C4 =0000063B            PSG_1			equ	080h
20C4 =0000064D            PSG_2			equ	0A0h
20C4 =0000065F            PSG_3			equ	0C0h
20C4 =00000671            NOISE			equ	0E0h
20C4 =00000685            MaxChannels		equ	4
20C4                      
20C4                      ; --------------------------------------------
20C4                      ; .IT request ($80+) format
20C4                      ; --------------------------------------------
20C4                      
20C4 =00000717            bitNote			equ	0
20C4 =00000728            bitInst			equ	1
20C4 =0000073A            bitVolume		equ	2
20C4 =0000074C            bitEffect		equ	3
20C4 =00000760            bitSameNote		equ	4
20C4 =00000774            bitSameInst		equ	5
20C4 =00000787            bitSameVol		equ	6
20C4 =0000079D            bitSameEffect		equ	7
20C4                      
20C4                      ; --------------------------------------------
20C4                      ; RAM
20C4                      ; --------------------------------------------
20C4                      
20C4                      			rsset ram_sounddriver
20C4 =0000083B            RAM_SMEG_Buffer		rb 48h
20C4 =00000854            RAM_SMEG_SfxBuff	rb 48h
20C4 =00000871            RAM_SMEG_Chnls_BGM	rb 10h*4
20C4 =0000088E            RAM_SMEG_Chnls_SFX	rb 10h*4
20C4 =000008A1            sizeof_SMEG		rb 0
20C4                      
20C4                      ; ================================================================
20C4                      ; -------------------------------------------
20C4                      ; Init
20C4                      ; -------------------------------------------
20C4                      
20C4                      SMEG_Init:
20C4 21 2E C8             		ld	hl,RAM_SMEG_Buffer
20C7 0E 01                		ld	c,1
20C9                      @nxtval:
20C9 06 FF                		ld	b,0FFh
20CB AF                   		xor	a
20CC                      @clrall:	
20CC 77                   		ld	(hl),a
20CD 23                   		inc	hl
20CE 10 FC                		djnz	@clrall
20D0 0D                   		dec	c
20D1 C2 C9 20             		jp	nz,@nxtval
20D4                      		
20D4                      ; -------------------------------------------
20D4                      ; Stop ALL Sound
20D4                      ; -------------------------------------------
20D4                      
20D4                      SMEG_StopSnd:
20D4 21 2E C8             		ld	hl,RAM_SMEG_Buffer
20D7 7E                   		ld	a,(hl)
20D8 CB D7                		set 	bitDisabled,a
20DA 77                   		ld	(hl),a
20DB 21 76 C8             		ld	hl,RAM_SMEG_SfxBuff
20DE 7E                   		ld	a,(hl)
20DF CB D7                		set 	bitDisabled,a
20E1 77                   		ld	(hl),a
20E2                      		
20E2 3E 9F                		ld	a,09Fh
20E4 D3 7F                		out	(7Fh),a
20E6 3E BF                		ld	a,0BFh
20E8 D3 7F                		out	(7Fh),a
20EA 3E DF                		ld	a,0DFh
20EC D3 7F                		out	(7Fh),a
20EE 3E FF                		ld	a,0FFh
20F0 D3 7F                		out	(7Fh),a
20F2 C9                   		ret
20F3                      
20F3                      ; -------------------------------------------
20F3                      ; Play Song
20F3                      ; -------------------------------------------
20F3                      
20F3                      SMEG_PlaySong:
20F3 21 2E C8             		ld	hl,RAM_SMEG_Buffer
20F6 7E                   		ld	a,(hl)
20F7 CB 97                		res 	bitDisabled,a
20F9 77                   		ld	(hl),a
20FA C9                   		ret
20FB                      		
20FB                      ; -------------------------------------------
20FB                      ; Load SFX
20FB                      ;
20FB                      ; d0 - StartOfSong
20FB                      ; d1 - Ticks
20FB                      ; -------------------------------------------
20FB                      
20FB                      SMEG_LoadSfx:
20FB                      ; 		movem.l	a4-a6,-(sp)
20FB                      ; 		lea	(RAM_SMEG_SfxBuff),a6
20FB                      ; 		lea	(RAM_SMEG_Chnls_SFX),a5
20FB                      ; 		clr.b	PcmChnOnOff(a6)
20FB                      ;                 clr.b	DrvStatus(a6)
20FB                      ;                 bset	#bitSfxOn,(a6)
20FB                      ; 		bsr	SMEG_Load_SetChnls
20FB                      ; 		movem.l	(sp)+,a4-a6
20FB C9                   		ret
20FC                      
20FC                      ; -------------------------------------------
20FC                      ; Load Song
20FC                      ;
20FC                      ; hl - StartOfSong
20FC                      ; b - Ticks
20FC                      ; -------------------------------------------
20FC                      
20FC                      SMEG_LoadSong:
20FC E5                   		push	hl
20FD C5                   		push	bc
20FE CD D4 20             		call	SMEG_StopSnd			;hl and b are gone
2101 C1                   		pop	bc
2102 E1                   		pop	hl
2103                      		
2103 DD 21 2E C8          		ld	ix,RAM_SMEG_Buffer		;a6
2107 FD 21 BE C8          		ld	iy,RAM_SMEG_Chnls_BGM		;a5
210B AF                   		xor	a
210C DD 77 00             		ld	(ix+DrvStatus),a
210F CD 00 00             		call	SMEG_Load_SetChnls
2112 C3 00 00             		jp	SMEG_Load_FixBgm
2115                      		
2115                      ; -----------------------
2115                      ; Setup channels
2115                      ; 
2115                      ; hl - Song
2115                      ; b  - Ticks
2115                      ; -----------------------
2115                      
2115                      SMEG_Load_SetChnls:
2115 DD 70 0E             		ld	(ix+TicksSet),b
2118                      		
2118                      ; -----------------------
2118                      ; Get instruments
2118                      ; -----------------------
2118                      
2118 23                   		inc	hl			;Probably not making PSG instruments
2119 23                   		inc	hl
211A                      
211A                      ; -----------------------
211A                      ; Get the
211A                      ; PatternEnd/PatternLoop
211A                      ; numbers
211A                      ; -----------------------
211A                      
211A 7E                   		ld	a,(hl)
211B 23                   		inc	hl
211C DD 77 03             		ld	(ix+PatternEnd),a
211F 7E                   		ld	a,(hl)
2120 23                   		inc	hl
2121 DD 77 04             		ld	(ix+PatternLoop),a
2124                      
2124                      ; -----------------------
2124                      ; Setup the channel IDs
2124                      ; -----------------------
2124                      
2124 06 04                		ld	b,MaxChannels
2126                      @SetId:
2126 3E 01                		ld	a,1
2128 FD 77 00             		ld	(iy+Chn_Type),a
212B 7E                   		ld	a,(hl)
212C 23                   		inc	hl
212D FD 77 01             		ld	(iy+Chn_ID),a
2130 AF                   		xor	a
2131 FD 77 05             		ld	(iy+(Chn_Freq+1)),a
2134 FD 77 04             		ld	(iy+Chn_Freq),a
2137                      		
2137 11 10 00             		ld	de,sizeof_Chn
213A FD 19                		add 	iy,de
213C 10 E8                		djnz	@SetId
213E                      
213E                      ; -----------------------
213E                      ; Master volumes
213E                      ; -----------------------
213E                      
213E                      		; (Removed in this driver)
213E                      		
213E                      ; -----------------------
213E                      ; last steps
213E                      ; -----------------------
213E                       
213E DD 74 0A              		ld	(ix+(SongStart+1)),h
2141 DD 75 09              		ld	(ix+SongStart),l
2144 7E                    		ld	a,(hl)
2145 23                    		inc	hl
2146 DD 77 05              		ld	(ix+PattSize),a
2149 7E                    		ld	a,(hl)
214A 23                    		inc	hl
214B DD 77 06              		ld	(ix+(PattSize+1)),a	
214E AF                    		xor	a
214F DD 77 08              		ld	(ix+(PattRead+1)),a
2152 DD 77 07              		ld	(ix+PattRead),a
2155 23                    		inc	hl
2156 23                     		inc	hl
2157 23                     		inc	hl
2158 23                    		inc	hl
2159 23                     		inc	hl
215A 23                     		inc	hl
215B DD 74 0C              		ld	(ix+(SongRead+1)),h
215E DD 75 0B              		ld	(ix+SongRead),l
2161                       		
2161                      ;  		ld	a,1
2161                      ;  		ld	(ix+CurrPattern),a
2161 C9                   		ret
2162                      		
2162                      ; -----------------------
2162                      ; Fix stuff to BGM
2162                      ; -----------------------
2162                      
2162                      SMEG_Load_FixBgm:
2162                      ; 		lea	(RAM_SMEG_Chnls_BGM),a5
2162                      ; 		moveq	#(MaxChannels)-1,d4
2162                      ; @SetId:
2162                      ; 		move.b	#$80,Chn_Panning(a5)
2162                      ; 
2162                      ; 		tst.b	Chn_ID(a5)
2162                      ; 		bmi.s	@NotFM
2162                      ; 		cmp.b	#PCM_1,Chn_ID(a5)
2162                      ; 		bge.s	@NotFM
2162                      ; 
2162                      ; 		clr.b	Chn_FM_Key(a5)
2162                      ; 		move.b	#%00001111,Chn_FM_Key(a5)
2162                      ; 		move.b	#$C0,Chn_Panning(a5)
2162                      ; 		bsr	SMEG_FM_SetPan
2162                      ; 
2162                      ; @NotFM:
2162                      ; 		adda 	#sizeof_Chn,a5
2162                      ; 		dbf	d4,@SetId
2162 C9                   		ret
2163                      		
2163                      ; ================================================================
2163                      ; -------------------------------------------
2163                      ; Run
2163                      ; -------------------------------------------
2163                      
2163                      SMEG_Upd:
2163 DD 21 2E C8          		ld	ix,RAM_SMEG_Buffer
2167 DD 7E 00             		ld	a,(ix)
216A CB C7                		set 	bitPriority,a
216C DD 77 00             		ld	(ix),a
216F CD 00 00             		call	@ReadRow
2172                      		
2172 DD 21 76 C8          		ld	ix,RAM_SMEG_SfxBuff
2176 DD 7E 00             		ld	a,(ix)
2179 CB 87                		res 	bitPriority,a
217B DD 77 00             		ld	(ix),a
217E CB 4F                		bit 	bitSfxOn,a
2180 CA 00 00             		jp	z,@Wait
2183 CD 00 00             		call	@ReadRow
2186                      		
2186                      @Wait:
2186 C9                   		ret
2187                      
2187                      ; -------------------------------------------
2187                      ; Read row
2187                      ; -------------------------------------------
2187                      
2187                      @ReadRow:
2187 DD 7E 00             		ld	a,(ix)
218A CB 57                		bit 	bitDisabled,a
218C C2 86 21             		jp	nz,@Wait
218F                      		
218F DD 35 0D             		dec 	(ix+TicksRead)
2192 DD 7E 0D             		ld	a,(ix+TicksRead)
2195 F2 86 21             		jp	p,@Wait
2198 DD 7E 0E             		ld	a,(ix+TicksSet)
219B DD 77 0D             		ld	(ix+TicksRead),a
219E                      		
219E DD 56 0C             		ld	d,(ix+(SongRead+1))
21A1 DD 5E 0B             		ld	e,(ix+SongRead)	
21A4                      	
21A4                      ; --------------------------------
21A4                      ; New pattern
21A4                      ; --------------------------------
21A4                      
21A4                      @Next:
21A4 DD 46 08             		ld	b,(ix+(PattRead+1))
21A7 DD 7E 06             		ld	a,(ix+(PattSize+1))
21AA B8                   		cp	b
21AB C2 00 00             		jp	nz,@NoNextRow
21AE DD 46 07             		ld	b,(ix+PattRead)
21B1 DD 7E 05             		ld	a,(ix+PattSize)
21B4 3D                   		dec 	a
21B5 B8                   		cp	b
21B6 D2 00 00             		jp	nc,@NoNextRow
21B9                      		
21B9 AF                   		xor	a
21BA DD 77 08             		ld	(ix+(PattRead+1)),a
21BD DD 77 07             		ld	(ix+PattRead),a
21C0                      		
21C0 DD 7E 03               		ld	a,(ix+PatternEnd)
21C3 DD 46 02               		ld	b,(ix+CurrPattern)
21C6 B8                      		cp	b
21C7 C2 00 00               		jp	nz,@NotEnd
21CA                       		
21CA                       		; Restart
21CA DD 66 0A              		ld	h,(ix+(SongStart+1))
21CD DD 6E 09              		ld	l,(ix+(SongStart))
21D0 7E                    		ld	a,(hl)
21D1 23                    		inc	hl
21D2 DD 77 05              		ld	(ix+(PattSize)),a
21D5 7E                    		ld	a,(hl)
21D6 23                    		inc	hl
21D7 DD 77 06              		ld	(ix+(PattSize+1)),a
21DA 23                    		inc	hl
21DB 23                     		inc	hl
21DC 23                     		inc	hl
21DD 23                    		inc	hl
21DE 23                     		inc	hl
21DF 23                     		inc	hl
21E0 DD 74 0C               		ld	(ix+(SongRead+1)),h
21E3 DD 75 0B               		ld	(ix+SongRead),l
21E6                      		
21E6 AF                   		xor	a
21E7 DD 77 08             		ld	(ix+(PattRead+1)),a
21EA DD 77 07             		ld	(ix+PattRead),a
21ED DD 7E 04              		ld	a,(ix+PatternLoop)
21F0 DD 77 02             		ld	(ix+CurrPattern),a
21F3                      
21F3 AF                   		xor	a
21F4 DD 77 0D             		ld	(ix+TicksRead),a
21F7 DD 77 02             		ld	(ix+CurrPattern),a
21FA 18 8B                 		jr 	@ReadRow
21FC                      
21FC                      ; --------------------------------
21FC                      
21FC                      @NotEnd:
21FC DD 7E 02              		ld	a,(ix+CurrPattern)
21FF 3C                    		inc	a
2200 DD 77 02              		ld	(ix+CurrPattern),a
2203                       		
2203 DD 7E 02              		ld	a,(ix+CurrPattern)
2206 DD 46 04              		ld	b,(ix+PatternLoop)
2209 B8                    		cp	b
220A C2 00 00              		jp	nz,@DontSaveLoop
220D DD 72 0A              		ld	(ix+(SongStart+1)),d
2210 DD 73 09              		ld	(ix+(SongStart)),e
2213                      		
2213                      @DontSaveLoop:	
2213 1A                    		ld	a,(de)
2214 13                    		inc	de
2215 DD 77 05              		ld	(ix+PattSize),a
2218 1A                    		ld	a,(de)
2219 13                    		inc	de
221A DD 77 06              		ld	(ix+(PattSize+1)),a	
221D AF                    		xor	a
221E DD 77 08              		ld	(ix+(PattRead+1)),a
2221 DD 77 07              		ld	(ix+PattRead),a
2224 13                   		inc	de
2225 13                   		inc	de
2226 13                   		inc	de
2227 13                   		inc	de
2228 13                   		inc	de
2229 13                   		inc	de
222A                      		
222A                      ; --------------------------------
222A                      ; Current pattern
222A                      ; --------------------------------
222A                       
222A                      @NoNextRow:
222A 1A                   		ld	a,(de)
222B 13                    		inc	de
222C DD 77 13              		ld	(ix+CurrChan),a
222F FE 00                 		cp	0
2231 C2 00 00             		jp	nz,@ValidNote
2234                      		
2234 DD 46 08             		ld	b,(ix+(PattRead+1))
2237 DD 4E 07             		ld	c,(ix+(PattRead))
223A 03                   		inc	bc
223B DD 70 08             		ld	(ix+(PattRead+1)),b
223E DD 71 07             		ld	(ix+(PattRead)),c
2241                      		
2241 DD 72 0C             		ld	(ix+(SongRead+1)),d
2244 DD 73 0B             		ld	(ix+(SongRead)),e
2247 C9                   		ret
2248                      		
2248                      @ValidNote:
2248 DD 7E 13              		ld	a,(ix+CurrChan)
224B CB 7F                 		bit 	7,a
224D CA 00 00             		jp	z,@Not80
2250                      		
2250 DD 46 08             		ld	b,(ix+(PattRead+1))
2253 DD 4E 07             		ld	c,(ix+(PattRead))
2256 03                   		inc	bc
2257 DD 70 08             		ld	(ix+(PattRead+1)),b
225A DD 71 07             		ld	(ix+(PattRead)),c
225D CB BF                		res 	7,a
225F DD 77 13             		ld	(ix+CurrChan),a
2262                      
2262 1A                    		ld	a,(de)
2263 13                    		inc	de
2264 DD 77 14              		ld	(ix+CurrChanType),a
2267                      		
2267                      @Not80:
2267 DD 46 08             		ld	b,(ix+(PattRead+1))
226A DD 4E 07             		ld	c,(ix+(PattRead))
226D 03                   		inc	bc
226E DD 70 08             		ld	(ix+(PattRead+1)),b
2271 DD 71 07             		ld	(ix+(PattRead)),c
2274                      		
2274 97                   		sub 	a
2275                      		;channel_on flags goes here
2275                      		
2275 FD 21 BE C8          		ld	iy,RAM_SMEG_Chnls_BGM
2279 DD 7E 00             		ld	a,(ix)
227C CB 47                		bit 	bitPriority,a
227E C2 00 00             		jp	nz,@BgmPrio
2281 FD 21 FE C8          		ld	iy,RAM_SMEG_Chnls_SFX		
2285                      @BgmPrio:
2285 DD 7E 13             		ld	a,(ix+CurrChan)
2288 FE 01                		cp	1
228A CA 00 00             		jp	z,@First
228D 3D                   		dec 	a
228E                      @NextChn:
228E 01 10 00              		ld	bc,sizeof_Chn
2291 FD 09                   		add 	iy,bc
2293 3D                      		dec	a
2294 C2 8E 22                		jp	nz,@NextChn
2297                      @First:
2297                      
2297 DD 7E 14              		ld	a,(ix+CurrChanType)
229A FE 00                 		cp	0
229C CA 00 00             		jp	z,@NotRest
229F DD 7E 14              		ld	a,(ix+CurrChanType)
22A2 FD 77 00             		ld	(iy+Chn_Type),a
22A5                      
22A5                      @NotRest:
22A5                      
22A5                      ; -------------
22A5                      ; Note
22A5                      ; -------------
22A5                      
22A5 FD 7E 00             		ld	a,(iy+Chn_Type)
22A8 CB 67                		bit 	bitSameNote,a
22AA C2 00 00             		jp	nz,@PlayOnly
22AD CB 47                		bit 	bitNote,a
22AF CA 00 00             		jp	z,@NoNote
22B2                      
22B2 1A                   		ld	a,(de)
22B3 13                   		inc 	de
22B4 FD 77 0B             		ld	(iy+Chn_Note),a
22B7 DD 46 08             		ld	b,(ix+(PattRead+1))
22BA DD 4E 07             		ld	c,(ix+(PattRead))
22BD 03                   		inc	bc
22BE DD 70 08             		ld	(ix+(PattRead+1)),b
22C1 DD 71 07             		ld	(ix+(PattRead)),c
22C4                      
22C4                      @PlayOnly:
22C4 CD 00 00              		call	SMEG_ChannelRest
22C7                      		
22C7                      ; -------------
22C7                      ; Instrument
22C7                      ; -------------
22C7                      
22C7                      @NoNote:
22C7 FD 7E 00             		ld	a,(iy+Chn_Type)
22CA CB 6F                 		bit 	bitSameInst,a
22CC C2 00 00              		jp	nz,@SameInst
22CF CB 4F                		bit 	bitInst,a
22D1 CA 00 00             		jp	z,@NoInst
22D4                      		
22D4 FD 34 0A             		inc	(iy+Chn_DefVol)
22D7                      		
22D7 1A                   		ld	a,(de)
22D8 13                   		inc 	de
22D9 FD 77 02             		ld	(iy+Chn_Inst),a
22DC DD 46 08             		ld	b,(ix+(PattRead+1))
22DF DD 4E 07             		ld	c,(ix+(PattRead))
22E2 03                   		inc	bc
22E3 DD 70 08             		ld	(ix+(PattRead+1)),b
22E6 DD 71 07             		ld	(ix+(PattRead)),c
22E9                      
22E9                      ; 		bsr	SMEG_SetVoice
22E9                      @SameInst:
22E9                      
22E9                      ; -------------
22E9                      ; Volume
22E9                      ; -------------
22E9                      
22E9                      @NoInst:
22E9 FD 7E 00             		ld	a,(iy+Chn_Type)
22EC CB 77                		bit 	bitSameVol,a
22EE C2 00 00             		jp	nz,@SameVol
22F1 CB 57                		bit 	bitVolume,a
22F3 CA 00 00             		jp	z,@NoVolume
22F6                       
22F6 AF                    		xor	a
22F7 FD 77 09             		ld	(iy+(Chn_Portam+1)),a
22FA FD 77 08             		ld	(iy+Chn_Portam),a
22FD FD 77 07             		ld	(iy+(Chn_Effect+1)),a
2300 FD 77 06             		ld	(iy+Chn_Effect),a
2303 1A                   		ld	a,(de)
2304 13                   		inc 	de
2305 DD 46 08             		ld	b,(ix+(PattRead+1))
2308 DD 4E 07             		ld	c,(ix+(PattRead))
230B 03                   		inc	bc
230C DD 70 08             		ld	(ix+(PattRead+1)),b
230F DD 71 07             		ld	(ix+(PattRead)),c
2312                      		
2312 D6 40                  		sub 	64
2314 ED 44                  		neg 	a
2316 FD 77 03             		ld	(iy+Chn_Vol),a
2319                      		
2319                      @SameVol:
2319 CD 00 00               		call	@ChnVolume
231C                      
231C                      ; -------------
231C                      ; Effect
231C                      ; -------------
231C                       
231C                      @NoVolume:
231C FD 7E 00             		ld	a,(iy+Chn_Type)
231F CB 7F                		bit 	bitSameEffect,a
2321 C2 00 00             		jp	nz,@SameEffect
2324 CB 5F                		bit 	bitEffect,a
2326 CA 00 00             		jp	z,@NoEffect
2329                      
2329 1A                   		ld	a,(de)
232A FD 77 07             		ld	(iy+(Chn_Effect+1)),a
232D 13                   		inc 	de
232E DD 46 08             		ld	b,(ix+(PattRead+1))
2331 DD 4E 07             		ld	c,(ix+(PattRead))
2334 03                   		inc	bc
2335 DD 70 08             		ld	(ix+(PattRead+1)),b
2338 DD 71 07             		ld	(ix+(PattRead)),c
233B                      		
233B 1A                   		ld	a,(de)
233C FD 77 06             		ld	(iy+Chn_Effect),a
233F 13                   		inc 	de
2340 DD 46 08             		ld	b,(ix+(PattRead+1))
2343 DD 4E 07             		ld	c,(ix+(PattRead))
2346 03                   		inc	bc
2347 DD 70 08             		ld	(ix+(PattRead+1)),b
234A DD 71 07             		ld	(ix+(PattRead)),c
234D                      
234D                      @SameEffect:
234D CD 00 00             		call	@ChannelEffects
2350                       
2350                      ; --------------
2350                      ; Play the note
2350                      ; --------------
2350                      ; 
2350                      @NoEffect:
2350 FD 7E 00             		ld	a,(iy+Chn_Type)
2353 CB 67                		bit 	bitSameNote,a
2355 C2 00 00             		jp	nz,@SameNote
2358 CB 47                		bit 	bitNote,a
235A CA A4 21             		jp	z,@Next
235D                      		
235D                      @SameNote:
235D CD 00 00              		call	@ChannelPlay	
2360 C3 A4 21              		jp	@Next
2363                      
2363                      ; ================================================================
2363                      ; -------------------------------
2363                      ; Set Volume
2363                      ; -------------------------------
2363                      
2363                      @ChnVolume:
2363 FD 7E 01             		ld	a,(iy+Chn_ID)
2366 FE FF                		cp	0FFh
2368 CA 00 00             		jp	z,@Disabled
236B                      		
236B 0E 00                		ld	c,00h
236D FD 7E 03               		ld	a,(iy+Chn_Vol)
2370 CA 00 00                 		jp	z,@Full
2373 D6 40                    		sub 	64
2375 CB 2F                    		sra 	a
2377 CB 2F                    		sra	a
2379                      @Full:
2379 E6 0F                 		and 	00001111b
237B 47                    		ld	b,a
237C FD 7E 01              		ld	a,(iy+Chn_ID)
237F E6 E0                 		and	11100000b
2381 CB E7                 		set 	4,a
2383 B0                    		or	b
2384 D3 7F                 		out	(7Fh),a
2386 C9                   		ret 
2387                      		
2387                      ; -------------------------------
2387                      ; Set Freq
2387                      ; -------------------------------
2387                      
2387                      @NoteFreq:	
2387 FD 7E 0B             		ld	a,(iy+Chn_Note)
238A FE FF                		cp	0FFh
238C CA 00 00             		jp	z,@ResetFreq
238F FE FE                		cp	0FEh
2391 CA 00 00             		jp	z,@ResetFreq
2394                      		
2394 FD 7E 01             		ld	a,(iy+Chn_ID)
2397 FE E0                		cp	NOISE
2399 C2 00 00             		jp	nz,@NotNoise
239C                      		
239C AF                   		xor	a
239D FD 77 05             		ld	(iy+(Chn_Freq+1)),a
23A0 3C                   		inc	a
23A1 FD 77 04             		ld	(iy+Chn_Freq),a
23A4                      
23A4 DD 7E 01             		ld	a,(ix+DrvSettings)
23A7 CB 57                		bit	bitTone3,a
23A9 CA 00 00             		jp	z,@Disabled
23AC                      @NotNoise:
23AC 01 00 00             		ld	bc,0
23AF FD 4E 0B             		ld	c,(iy+Chn_Note)
23B2 CB 21                		sla	c
23B4 E5                   		push	hl
23B5 21 00 00             		ld	hl,@Notes_PSG
23B8 FD 7E 01              		ld	a,(iy+Chn_ID)
23BB FE E0                  		cp	NOISE
23BD C2 00 00               		jp	nz,@NotNoiseFix
23C0 21 00 00             		ld	hl,@Notes_PSG+(32*2)		
23C3                      @NotNoiseFix:
23C3 09                   		add 	hl,bc
23C4 7E                   		ld	a,(hl)
23C5 FD 77 04             		ld	(iy+(Chn_Freq)),a
23C8 23                   		inc	hl
23C9 7E                   		ld	a,(hl)
23CA FD 77 05             		ld	(iy+Chn_Freq+1),a
23CD E1                   		pop	hl
23CE C9                   		ret 
23CF                      
23CF                      @ResetFreq:
23CF AF                   		xor	a
23D0 FD 77 05             		ld	(iy+(Chn_Freq+1)),a
23D3 FD 77 04             		ld	(iy+Chn_Freq),a
23D6                      		
23D6                      @Disabled:
23D6 C9                    		ret
23D7                      		
23D7                      ; -------------------------------
23D7                      ; Channel play
23D7                      ; -------------------------------
23D7                      
23D7                      @ChannelPlay:
23D7 FD 7E 01             		ld	a,(iy+Chn_ID)
23DA FE FF                		cp	0FFh
23DC CA D6 23             		jp	z,@Disabled
23DF                      		
23DF                      		;Portametro later
23DF CD 87 23             		call	@NoteFreq
23E2                      			
23E2 FD 7E 05             		ld	a,(iy+(Chn_Freq+1))
23E5 FD 46 04             		ld	b,(iy+(Chn_Freq))
23E8 B0                   		or	b
23E9 CA 00 00              		jp	z,SMEG_ChannelRest
23EC                      		
23EC FD 7E 01             		ld	a,(iy+Chn_ID)
23EF FE E0                		cp	NOISE
23F1 CA 00 00             		jp	z,@PlayNoise
23F4                      		
23F4 FE C0                		cp	PSG_3
23F6 C2 00 00             		jp	nz,@NotPsg3
23F9 DD 7E 01             		ld	a,(ix+DrvSettings)
23FC CB 57                		bit	bitTone3,a
23FE CA 00 00             		jp	z,@NotPsg3
2401                      		
2401 3E DF                		ld	a,0DFh
2403 D3 7F                		out	(7Fh),a
2405 C9                   		ret 
2406                      
2406                      @NotPsg3:
2406 FD 7E 01              		ld	a,(iy+Chn_ID)
2409 4F                    		ld	c,a
240A C3 00 00              		jp	@SetFreq
240D                      		
240D                      ; ------------------------------------
240D                      
240D                      @PlayNoise:
240D DD 7E 01             		ld	a,(ix+DrvSettings)
2410 CB 57                		bit 	bitTone3,a
2412 CA D6 23             		jp	z,@Disabled
2415 0E C0                		ld	c,11000000b
2417                      @SetFreq:
2417 FD 7E 04              		ld	a,(iy+(Chn_Freq))
241A E6 0F                 		and 	00001111b
241C 47                    		ld	b,a
241D 79                    		ld	a,c
241E E6 E0                 		and	11100000b
2420 B0                    		or	b
2421 D3 7F                		out	(7Fh),a
2423 FD 7E 04              		ld	a,(iy+(Chn_Freq))
2426 CB 2F                 		sra	a
2428 CB 2F                 		sra	a
242A CB 2F                 		sra	a
242C CB 2F                 		sra	a
242E E6 0F                 		and 	00001111b
2430 47                    		ld	b,a
2431 FD 7E 05              		ld	a,(iy+(Chn_Freq+1))
2434 CB 27                  		sla	a
2436 CB 27                 		sla	a
2438 CB 27                 		sla	a
243A CB 27                 		sla	a
243C E6 30                 		and 	00110000b
243E B0                    		or	b
243F D3 7F                 		out	(7Fh),a
2441 C9                   		ret
2442                      		
2442                      ; -------------------------------
2442                      
2442                      @Notes_PSG:
2442 00 00                		dw 0		;x-0
2444 00 00                		dw 0
2446 00 00                		dw 0
2448 00 00                		dw 0
244A 00 00                		dw 0
244C 00 00                		dw 0
244E 00 00                		dw 0
2450 00 00                		dw 0
2452 00 00                		dw 0
2454 00 00                		dw 0
2456 00 00                		dw 0
2458 00 00                		dw 0
245A 00 00                		dw 0
245C 00 00                		dw 0
245E 00 00                		dw 0
2460 00 00                		dw 0
2462 00 00                		dw 0
2464 00 00                		dw 0
2466                      
2466 00 00                		dw 0		;x-1
2468 00 00                		dw 0
246A 00 00                		dw 0
246C 00 00                		dw 0
246E 00 00                		dw 0
2470 00 00                		dw 0
2472 00 00                		dw 0
2474 00 00                		dw 0
2476 00 00                		dw 0
2478 00 00                		dw 0
247A 00 00                		dw 0
247C 00 00                		dw 0
247E 00 00                		dw 0
2480 00 00                		dw 0
2482 00 00                		dw 0
2484 00 00                		dw 0
2486 00 00                		dw 0
2488 00 00                		dw 0
248A                      
248A 00 00                		dw 0
248C 00 00                		dw 0
248E 00 00                		dw 0
2490 00 00                		dw 0
2492 00 00                		dw 0
2494 00 00                		dw 0
2496 00 00                		dw 0
2498 00 00                		dw 0
249A 00 00                		dw 0
249C                      
249C F8 03                		dw 3F8h
249E BF 03                                dw 3BFh
24A0 89 03                                dw 389h
24A2 56 03                		dw 356h
24A4 26 03                                dw 326h
24A6 F9 02                                dw 2F9h
24A8 CE 02                                dw 2CEh
24AA A5 02                                dw 2A5h
24AC 80 02                                dw 280h
24AE 5C 02                                dw 25Ch
24B0 3A 02                                dw 23Ah
24B2 1A 02                                dw 21Ah
24B4 FB 01                		dw 1FBh
24B6 DF 01                                dw 1DFh
24B8 C4 01                                dw 1C4h
24BA AB 01                                dw 1ABh
24BC 93 01                                dw 193h
24BE 7D 01                                dw 17Dh
24C0 67 01                                dw 167h
24C2 53 01                                dw 153h
24C4 40 01                                dw 140h
24C6 2E 01                		dw 12Eh
24C8 1D 01                                dw 11Dh
24CA 0D 01                                dw 10Dh
24CC FE 00                                dw 0FEh
24CE EF 00                                dw 0EFh
24D0 E2 00                                dw 0E2h
24D2 D6 00                                dw 0D6h
24D4 C9 00                                dw 0C9h
24D6 BE 00                                dw 0BEh
24D8 B4 00                                dw 0B4h
24DA A9 00                		dw 0A9h
24DC A0 00                                dw 0A0h
24DE 97 00                                dw 97h
24E0 8F 00                                dw 8Fh
24E2 87 00                                dw 87h
24E4 7F 00                                dw 7Fh
24E6 78 00                                dw 78h
24E8 71 00                                dw 71h
24EA 6B 00                                dw 6Bh
24EC 65 00                                dw 65h
24EE 5F 00                		dw 5Fh
24F0 5A 00                                dw 5Ah
24F2 55 00                                dw 55h
24F4 50 00                                dw 50h
24F6 4B 00                                dw 4Bh
24F8 47 00                                dw 47h
24FA 43 00                                dw 43h
24FC 40 00                                dw 40h
24FE 3C 00                                dw 3Ch
2500 39 00                                dw 39h
2502 36 00                		dw 36h
2504 33 00                                dw 33h
2506 30 00                                dw 30h
2508 2D 00                                dw 2Dh
250A 2B 00                                dw 2Bh
250C 28 00                                dw 28h
250E 26 00                                dw 26h
2510 24 00                                dw 24h
2512 22 00                                dw 22h
2514 20 00                                dw 20h
2516 1F 00                		dw 1Fh
2518 1D 00                                dw 1Dh
251A 1B 00                                dw 1Bh
251C 1A 00                                dw 1Ah
251E 18 00                                dw 18h
2520 17 00                                dw 17h
2522 16 00                                dw 16h
2524 15 00                                dw 15h
2526 13 00                                dw 13h
2528 12 00                                dw 12h
252A 11 00                		dw 11h
252C                      		
252C                      ; ================================================================
252C                      ; -------------------------------
252C                      ; Channel effect
252C                      ; -------------------------------
252C                      
252C                      @ChannelEffects:
252C 01 00 00             		ld	bc,0
252F FD 4E 07             		ld	c,(iy+(Chn_Effect+1))
2532 CB 21                		sla	c
2534 21 00 00             		ld	hl,@EffectList
2537 09                   		add 	hl,bc
2538 E9                   		jp	(hl)
2539                      
2539                      ; -------------------------------
2539                      
2539                      @EffectList:
2539 18 00                		jr	@Null		;(Nothing)
253B 18 00                		jr	@Null		;A	
253D 18 00                		jr	@Null
253F 18 00                		jr	@Null
2541 18 00                		jr	@Null
2543 18 00                		jr	@Null
2545 18 00                		jr	@Null
2547 18 00                		jr	@Null
2549 18 00                		jr	@Null
254B 18 00                		jr	@Null
254D 18 00                		jr	@Null
254F 18 00                		jr	@Null
2551 18 00                		jr	@Null
2553 18 00                		jr	@Null
2555 18 00                		jr	@Null
2557 18 00                		jr	@Null
2559 18 00                		jr	@Null
255B 18 00                		jr	@Null
255D 18 00                		jr	@Null
255F 18 00                		jr	@Null
2561 18 00                		jr	@Null
2563 18 00                		jr	@Null
2565 18 00                		jr	@Null
2567 18 00                		jr	@Null
2569 18 00                		jr	@Flag_X
256B 18 00                		jr	@Null
256D 18 00                		jr	@Flag_Z
256F                      
256F                      ; -------------------------------
256F                      ; Null effect
256F                      ; -------------------------------
256F                      
256F                      @Null:
256F C9                   		ret
2570                      		
2570                      ; -------------------------------
2570                      ; Flag X - Stereo
2570                      ; -------------------------------
2570                      
2570                      @Flag_X:
2570 C9                   		ret
2571                      		
2571                      ; ======================================================
2571                      ; -------------------------------
2571                      ; Flag Z
2571                      ; -------------------------------
2571                      
2571                      @Flag_Z:	
2571 01 00 00              		ld	bc,0
2574 FD 7E 06              		ld	a,(iy+(Chn_Effect))
2577 CB 2F                 		sra	a
2579 CB 2F                 		sra	a
257B CB 2F                 		sra	a
257D 4F                    		ld	c,a
257E 21 00 00              		ld	hl,@HashList
2581 09                    		add 	hl,bc
2582 E9                   		jp	(hl)
2583                      
2583                      @HashList:
2583 18 EA                		jr	@Null
2585 18 E8                		jr	@Null
2587 18 E6                		jr	@Null
2589 18 E4                		jr	@Null
258B 18 00                		jr	@PSG
258D 18 E0                		jr	@Null
258F 18 DE                		jr	@Null
2591 18 DC                		jr	@Null
2593 18 DA                		jr	@Null
2595 18 D8                		jr	@Null
2597 18 D6                		jr	@Null
2599 18 D4                		jr	@Null
259B 18 D2                		jr	@Null
259D 18 D0                		jr	@Null
259F 18 CE                		jr	@Null
25A1 18 CC                		jr	@Null
25A3                      		
25A3                      ; -------------------------------
25A3                      
25A3                      @PSG:
25A3 DD 46 01             		ld	b,(ix+DrvSettings)
25A6 CB 90                  		res	bitTone3,b
25A8 FD 7E 06                		ld	a,(iy+(Chn_Effect))
25AB E6 07                   		and	111b
25AD FE 03                   		cp	3
25AF CA 00 00                		jp	z,@SetIt3
25B2 FE 07                   		cp	7
25B4 CA 00 00                 		jp	z,@SetIt3
25B7 18 00                    		jr	@Tone3
25B9                      @SetIt3:
25B9 CB D0                   		set 	bitTone3,b
25BB                      @Tone3:
25BB DD 70 01             		ld	(ix+DrvSettings),b
25BE                      ; 		bit 	bitPriority,b
25BE                      ;  		jp	z,@IsPsg
25BE                      ;  		
25BE                      ;  		ld	a,(RAM_SMEG_Buffer+DrvSettings)
25BE                      ;  		ld	(RAM_SMEG_Buffer+DrvSettingsBGM),a
25BE                      ;  		ld	a,(iy+(Chn_Effect))
25BE                      ;  		and 	00000111b
25BE                      ;  		ld	(RAM_SMEG_Buffer+PsgLast),a
25BE                      ; 		
25BE                      ; @IsPsg:
25BE FD 7E 06             		ld	a,(iy+(Chn_Effect))
25C1 E6 07                		and	111b
25C3 47                   		ld	b,a
25C4 3E E0                		ld	a,0E0h
25C6 B0                   		or	b
25C7 D3 7F                		out	(7Fh),a
25C9 C9                   		ret	
25CA                      		
25CA                      ; ================================================================
25CA                      ; -------------------------------
25CA                      ; Mute/Rest channel
25CA                      ; -------------------------------
25CA                      
25CA                      SMEG_ChannelRest:
25CA FD 7E 01             		ld	a,(iy+Chn_ID)
25CD FE FF                		cp	0FFh
25CF CA 00 00             		jp	z,@Return
25D2                      		
25D2 FD 7E 01             		ld	a,(iy+Chn_ID)
25D5 E6 E0                		and 	11100000b
25D7 47                   		ld	b,a
25D8 3E 1F                		ld	a,00011111b
25DA B0                   		or	b
25DB D3 7F                		out	(7Fh),a
25DD                      @Return:
25DD C9                   		ret
25DE                      		
25DE                      ; ================================================================
25DE                      ; -------------------------------
25DE                      ; Play PCM sample
25DE                      ; -------------------------------
25DE                      
25DE                      PlayPCM:
25DE                      ;    		ld	h,(BANK_WAVE>>14)&0FFh
25DE                      ;     		ld	a,h
25DE                      ;     		ld      (0FFFFh),a
25DE 2E 06                  		ld      l,06h
25E0 11 00 80               		ld      de,8000h
25E3                       	
25E3 3E 81                   		ld      a,81h			;write $01 to tone channel 0
25E5 D3 7F                   		out     (7Fh),a
25E7 AF                      		xor	a
25E8 D3 7F                   		out     (7Fh),a
25EA 3E A1                   		ld      a,0A1h			;write $01 to tone channel 1
25EC D3 7F                   		out     (7Fh),a
25EE AF                      		xor	a
25EF D3 7F                   		out     (7Fh),a
25F1 3E C1                  		ld      a,0C1h			;write $01 to tone channel 2
25F3 D3 7F                  		out     (7Fh),a
25F5 AF                     		xor	a
25F6 D3 7F                  		out     (7Fh),a
25F8                       
25F8                      @Loop:
25F8 DB DC                		in      a,(pad)
25FA EE FF                		xor     0FFh
25FC C2 00 00             		jp	nz,@escape
25FF 00                      		nop 
2600 00                     		nop 
2601                      ;  		nop
2601                      
2601 1A                    		ld      a,(de)
2602 0F                    		rrca
2603 0F                    		rrca
2604 0F                    		rrca
2605 0F                     		rrca
2606 E6 0F                   		and     %00001111
2608 F6 90                   		or      90h;+40h
260A D3 7F                    		out     (7Fh),a
260C C6 20                     		add	20h
260E D3 7F                     		out     (7Fh),a
2610 C6 20                     		add	20h
2612 D3 7F                     		out     (7Fh),a
2614 45                      		ld      b,l
2615 10 FE                   		djnz    *
2617                         		
2617 13                    		inc     de
2618 7A                    		ld	a,d
2619 FE C0                 		cp	0C0h
261B DA F8 25               		jp	c,@Loop
261E 16 80                  		ld	d,80h
2620 24                     		inc 	h
2621 7C                   		ld	a,h
2622 32 FF FF             		ld      (0FFFFh),a
2625 C3 F8 25              		jp	@Loop
2628                       		
2628 79                    		ld      a,c
2629 B0                    		or      b
262A C2 F8 25              		jp      nz,@Loop
262D                        
262D                      @escape:
262D                      ;  		pop     hl
262D                      ;  		pop     de
262D                      ;  		pop     bc
262D C9                    		ret
262E                      		
262E                      		
262E                       		include "sound/data.asm"
262E                      ; ================================================================
262E                      ; User data
262E                      ; ================================================================
262E                      
262E                      SmegSong_Test:
262E                      ; 		dw 0
262E                      ;    		db 7,0
262E                      ;   		db PSG_1,PSG_2,PSG_3,NOISE
262E                      ;        		incbin "sound/data/music/smb.it",50h+59Ah
262E                      ;      		incbin "sound/data/music/froggy.it",50h+188Bh
262E                      ;      		incbin "sound/data/music/froggy.it",50h+188Bh
262E                       		
262E                      ; ====================================================================
262E                      
262E                      		inform 0,"CODE Size: %h",*
262E                          		cnop 0,4000h
4000                          		
4000                      ; ====================================================================
4000                      ; -------------------------------------------------
4000                      ; Data | SLOT 2
4000                      ; 
4000                      ; Header at the end
4000                      ; -------------------------------------------------
4000                      
4000                       		cnop 0,7FF0h
7FF0 54 4D 52 20 53 45 +   		db "TMR SEGA",0,0		; TMR SEGA + unused
7FFA 00 00                 		dw 0				; Checksum
7FFC 00 00                 		db 0,0				; Product code + PCode|Version
7FFE 00 00                 		db 0,0				; Version + Region code|ROM size
8000                       		
8000                      ; ====================================================================
8000                      ; -------------------------------------------------
8000                      ; Data | SLOT 3
8000                      ; 
8000                      ; TO-DO: This can be used as extra RAM
8000                      ; -------------------------------------------------
8000                      
8000                          		cnop 0,0C000h
C000                          		
C000                      ; ====================================================================
C000                      ; -------------------------------------------------
C000                      ; DATA BANKS for Slot 2
C000                      ; -------------------------------------------------
C000                      
C000                      ; -----------------------
C000                      ; Title Screen
C000                      ; -----------------------
C000                      
C000                      BANK_Title:	obj 4000h
4000                      		include "modes/title/data.asm"
4000                      ; ====================================================================
4000                      ; -------------------------------------------------
4000                      ; DATA | Title Screen
4000                      ; -------------------------------------------------
4000                      
4000                      art_title:	incbin "modes/title/data/art.bin"
50C0 =00000111            art_title_end	equ *-art_title
50C0                      pal_title:	incbin "modes/title/data/pal.bin"
50E0                      map_title:	incbin "modes/title/data/map.bin"
53B0                      
53B0                      ; art_plhold_spr:	incbin	"modes/level/data/sprhold.bin"
53B0                      ; art_plhold_spr_end:
53B0                      ; art_plhold_spr_end:
53B0                          		objend
D3B0                          		inform 0,"BANK Title size: %h",(*-BANK_Title)
D3B0                          		cnop 0,4000h
0000                      
0000                      ; -----------------------
0000                      ; Level
0000                      ; -----------------------
0000                      
0000                      BANK_LvlMd_Init:
0000                      		obj 4000h
4000                      		include "modes/level/data_1.asm"
4000                      ; ====================================================================
4000                      ; -------------------------------------------------
4000                      ; DATA | Art and palettes
4000                      ; -------------------------------------------------
4000                      
4000                      art_level_test:	incbin "modes/level/data/levels/test/lvl_art.bin"
5620                      art_level_test_end:
5620                      
5620                      ; -------------------------------------------------
5620                      
5620                      pal_player:	incbin	"modes/level/data/object/player/data/pal.bin"
5640                      pal_level_test:	incbin "modes/level/data/levels/test/lvl_pal.bin",0,(32*2)
5680                      
5680                      
5680                      
5680                      
5680                      		
5680                      		
5680                          		objend
1680                          		inform 0,"BANK Level (init) size: %h",(*-BANK_LvlMd_Init)
1680                          		cnop 0,4000h
4000                      
4000                      BANK_LvlMd_Loop:
4000                      		obj 4000h
4000                      		include "modes/level/data_2.asm"
4000                      ; ====================================================================
4000                      ; -------------------------------------------------
4000                      ; DATA | DPLC art and Level data
4000                      ; -------------------------------------------------
4000                      
4000 00 00                art_player:	dw @right
4002 00 00                 		dw @left
4004                      @right:		incbin	"modes/level/data/object/player/data/art.bin"
4D84                      @left:		incbin	"modes/level/data/object/player/data/art_l.bin"
5B05                      
5B05                      map_player:	include	"modes/level/data/object/player/data/map.asm"
5B05                      @mappings:
5B05 00 00                		dw @frame_0
5B07 00 00                		dw @frame_1
5B09 00 00                		dw @frame_2
5B0B 00 00                		dw @frame_3
5B0D 00 00                		dw @frame_4
5B0F 00 00                		dw @frame_5
5B11 00 00                		dw @frame_6
5B13 00 00                		dw @frame_7
5B15 00 00                		dw @frame_8
5B17                      @frame_0:
5B17 07                   		db 07h
5B18 E0 F8 00             	db 0E0h,0F8h,00h
5B1B F0 F8 02             		db 0F0h,0F8h,02h
5B1E E0 00 04             		db 0E0h,00h,04h
5B21 F0 00 06             		db 0F0h,00h,06h
5B24 E0 08 08             		db 0E0h,08h,08h
5B27 F0 08 0A             		db 0F0h,08h,0Ah
5B2A F0 10 0C             		db 0F0h,010h,0Ch
5B2D                      
5B2D                      @frame_1:
5B2D 07                   		db 07h
5B2E F0 F8 00             	db 0F0h,0F8h,00h
5B31 E0 00 02             		db 0E0h,00h,02h
5B34 F0 00 04             		db 0F0h,00h,04h
5B37 E0 08 06             		db 0E0h,08h,06h
5B3A F0 08 08             		db 0F0h,08h,08h
5B3D E0 10 0A             		db 0E0h,010h,0Ah
5B40 F8 10 0C             		db 0F8h,010h,0Ch
5B43                      
5B43                      @frame_2:
5B43 05                   		db 05h
5B44 E0 00 00             	db 0E0h,00h,00h
5B47 F0 00 02             		db 0F0h,00h,02h
5B4A E0 08 04             		db 0E0h,08h,04h
5B4D F0 08 06             		db 0F0h,08h,06h
5B50 E0 10 08             		db 0E0h,010h,08h
5B53                      
5B53                      @frame_3:
5B53 05                   		db 05h
5B54 E0 00 00             	db 0E0h,00h,00h
5B57 F0 00 02             		db 0F0h,00h,02h
5B5A E0 08 04             		db 0E0h,08h,04h
5B5D F0 08 06             		db 0F0h,08h,06h
5B60 E0 10 08             		db 0E0h,010h,08h
5B63                      
5B63                      @frame_4:
5B63 07                   		db 07h
5B64 F8 F8 00             	db 0F8h,0F8h,00h
5B67 E0 00 02             		db 0E0h,00h,02h
5B6A F0 00 04             		db 0F0h,00h,04h
5B6D E0 08 06             		db 0E0h,08h,06h
5B70 F0 08 08             		db 0F0h,08h,08h
5B73 E0 10 0A             		db 0E0h,010h,0Ah
5B76 F8 10 0C             		db 0F8h,010h,0Ch
5B79                      
5B79                      @frame_5:
5B79 05                   		db 05h
5B7A E0 00 00             	db 0E0h,00h,00h
5B7D F0 00 02             		db 0F0h,00h,02h
5B80 E0 08 04             		db 0E0h,08h,04h
5B83 F0 08 06             		db 0F0h,08h,06h
5B86 E0 10 08             		db 0E0h,010h,08h
5B89                      
5B89                      @frame_6:
5B89 05                   		db 05h
5B8A E0 00 00             	db 0E0h,00h,00h
5B8D F0 00 02             		db 0F0h,00h,02h
5B90 E0 08 04             		db 0E0h,08h,04h
5B93 F0 08 06             		db 0F0h,08h,06h
5B96 E0 10 08             		db 0E0h,010h,08h
5B99                      
5B99                      @frame_7:
5B99 06                   		db 06h
5B9A E0 00 00             	db 0E0h,00h,00h
5B9D F0 00 02             		db 0F0h,00h,02h
5BA0 E0 08 04             		db 0E0h,08h,04h
5BA3 F0 08 06             		db 0F0h,08h,06h
5BA6 E0 10 08             		db 0E0h,010h,08h
5BA9 F0 10 0A             		db 0F0h,010h,0Ah
5BAC                      
5BAC                      @frame_8:
5BAC 07                   		db 07h
5BAD E0 F8 00             	db 0E0h,0F8h,00h
5BB0 F0 F8 02             		db 0F0h,0F8h,02h
5BB3 E0 00 04             		db 0E0h,00h,04h
5BB6 F0 00 06             		db 0F0h,00h,06h
5BB9 E0 08 08             		db 0E0h,08h,08h
5BBC F0 08 0A             		db 0F0h,08h,0Ah
5BBF F8 10 0C             		db 0F8h,010h,0Ch
5BC2                      
5BC2                      
5BC2                      plc_player:	include	"modes/level/data/object/player/data/plc.asm"
5BC2                      @dplc:
5BC2 00                   		db 00h
5BC3 0E                   		db 0Eh
5BC4 1C                   		db 01Ch
5BC5 26                   		db 026h
5BC6 30                   		db 030h
5BC7 3E                   		db 03Eh
5BC8 48                   		db 048h
5BC9 52                   		db 052h
5BCA 5E                   		db 05Eh
5BCB 6C                   		db 06Ch ; LAST FRAME SIZE
5BCB 6C                   		db 06Ch ; LAST FRAME SIZE
5BCC                      
5BCC                      ; -------------------------------------------------
5BCC                      
5BCC 00 00 00 00 00 00 +  test_level:	dw @blocks,@collision,@prizes,@objpos
5BD4                      		incbin "modes/level/data/levels/test/lvl_lay.bin"
62D8                      @blocks:	incbin "modes/level/data/levels/test/lvl_blk.bin"
65F8                      @collision:	incbin "modes/level/data/levels/test/lvl_col.bin"
6CF8 FF FF                @prizes:	dw -1
6CFA FF FF                @objpos:	dw -1
6CFC                      
6CFC                      		
6CFC                      		
6CFC                          		objend
6CFC                          		inform 0,"BANK Level (loop) size: %h",(*-BANK_LvlMd_Loop)
6CFC                          		cnop 0,4000h
8000                          		
8000                      ; ====================================================================
8000                      
8000                      ; thisaddr = 0
8000                      ; BANK_WAVE:
8000                      ;      		rept 110
8000                      ;      		obj 4000h
8000                      ;     		incbin "sound/data/pcm/new.raw",thisaddr,4000h
8000                      ;  ;    		cnop 0,4000h
8000                      ;     		objend
8000                      ; thisaddr = thisaddr+4000h
8000                      ;     		endr
8000                          		
8000                      ; ====================================================================
8000                      
8000                      		inform 0,"ROM Size: %h",*
8000                      		cnop 0,10000h
0000                      		
0000                      		
