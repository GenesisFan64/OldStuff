00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; GAME
00000000                            ; -------------------------------------------------
00000000                            
00000000                            		include	"system/macros.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Macros
00000000                            ; -------------------------------------------------
00000000                            
00000000                            align		macro
00000000                            		cnop 0,\1
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Pick ROM section
00000000                            ; --------------------------------------------
00000000                            
00000000                            romSection	macro where
00000000                            CODE		=	*+$880000
00000000                            DATA		=	*+marsbank
00000000                            RAM		=	$FF0000
00000000                            WRAM		=	$200000
00000000                            ; ---------------------------
00000000                            		if MCD|MARS == True
00000000                            		obj \1
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; ---------------------------
00000000                            
00000000                            romSectionEnd	macro
00000000                            		if MCD
00000000                            		objend
00000000                            		elseif MARS
00000000                            		objend
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Video
00000000                            ; --------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; dmaTask
00000000                            ; --------------------------------------------
00000000                            
00000000                            dmaTask		macro
00000000                            FILL		=	$C0000000+1
00000000                            COPY		=	$C0000000+2
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA FILL
00000000                            ; (FILL,byte,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		if \1=FILL
00000000                            		
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                            		move.w	#$9780,(vdp_ctrl)
00000000                            		move.l	#\3|$80,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait1\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait1\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA COPY
00000000                            ; (COPY,from,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		elseif \1=COPY
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\2>>1)&$FF00)>>8)|(($9500+((\2>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$97C0,(vdp_ctrl)
00000000                            		move.l	#\3|$C0,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait2\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait2\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA ROM/RAM to VDP
00000000                            ; (from,to,size)
00000000                            ; ---------------------------
00000000                            		else
00000000                            		;\1 from | \2 to | \3 size
00000000                             		move.l	#$9400+(((\3)&$FF00)>>9)|(($9300+(((\3)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\1>>1)&$FF00)>>8)|(($9500+((\1>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(vdp_ctrl)
00000000                            		
00000000                            ; 		move.l	#\2|$80,(vdp_ctrl)		;new attempt
00000000                            		move.w	#((\2&$FFFF))|$80,-(sp)
00000000                            		move.w	#(((\2)>>16)&$FFFF),-(sp)
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#$100,($A11100)
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100)
00000000                              		bne.s	@WaitZ80_\@
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#0,($A11100).l
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            
00000000                            fade		macro
00000000                            in = 1
00000000                            out = 0
00000000                            		if \1=in
00000000                             		move.l	#$0101003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		elseif \1=out
00000000                            		
00000000                            		move.l	#$0201003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            ; System
00000000                            ; --------------------------------------------
00000000                            
00000000                            z80		macro
00000000                            ON = 1
00000000                            OFF = 0
00000000                            		if \1=OFF
00000000                            		
00000000                             		move.w	#$100,($A11100).l
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100).l
00000000                              		bne.s	@WaitZ80_\@
00000000                            		elseif \1=ON
00000000                            		
00000000                              		move.w	#0,($A11100).l
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            		
00000000                            		include	"system/ram.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; RAM
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; ---------------------------
00000000                            ; Setup
00000000                            ; ---------------------------
00000000                            
00000000                                            rsset	$FFFFBC00
00000000 =FFFFBC00                  RAM_ModeBuffer	rs.b	$2000
00000000 =FFFFDC00                  RAM_Engine      rs.b	$200
00000000 =FFFFDE00                  RAM_System      rs.b	$80
00000000 =FFFFDE80                  RAM_Input	rs.b	$80
00000000 =FFFFDF00                  RAM_Video       rs.b	$1000
00000000 =FFFFEF00                  RAM_Audio       rs.b	$400
00000000 =FFFFF300                  endof_ram	rs.l	0
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            		include	"system/hardware/map.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Variables
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; I/O
00000000                            ; --------------------------------------------
00000000                            
00000000 =00A10001                  port_ver	equ	$A10001
00000000 =00A14000                  port_tmss	equ	$A14000
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; VDP
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00000                  vdp_data	equ	$C00000
00000000 =00C00004                  vdp_ctrl	equ	$C00004
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MD Audio
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00011                  sound_psg	equ	$C00011
00000000 =00A04000                  sound_ym_1	equ	$A04000
00000000 =00A04001                  sound_ym_2	equ	$A04001
00000000 =00A04002                  sound_ym_3	equ	$A04002
00000000 =00A04003                  sound_ym_4	equ	$A04003
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MARS only
00000000                            ; --------------------------------------------
00000000                            
00000000 =00840000                  framebuffer	equ	$840000
00000000 =00860000                  overwrite	equ	$860000
00000000 =00880000                  marsipl		equ	$880000
00000000 =00900000                  marsbank	equ	$900000
00000000 =00A130EC                  mars_ID		equ	$a130ec		; MARS ID "MARS"
00000000                            
00000000 =00A15100                  marsreg		equ	$a15100
00000000 =00000000                  access		equ	$00		; byte		; MARS VDP access control
00000000 =00000001                  adapter		equ	$01		; byte		; MARS adapter control
00000000 =00000003                  intctl		equ	$03		; byte		; SH2 interrupt control
00000000 =00000005                  bankctl		equ	$05		; byte		; BANK conterol
00000000 =00000007                  dreqctl		equ	$07		; byte		; DREQ control
00000000 =00000008                  dreqsource	equ	$08		; long		; 68 to SH DREQ source address
00000000 =0000000C                  dreqdest	equ	$0c		; long		; 68 to SH DREQ destination address
00000000 =00000010                  dreqlength	equ	$10		; word		; 68 to SH DREQ length
00000000 =00000012                  dreqfifo	equ	$12		; word		; 68 to SH DREQ FIFO
00000000 =0000001B                  segatv		equ	$1b		; byte		; SEGA TV Reg.
00000000 =00000020                  comm0		equ	$20		; 		; Communcation Reg.
00000000 =00000022                  comm2		equ	$22		; 		; Communcation Reg.
00000000 =00000024                  comm4		equ	$24		; 		; Communcation Reg.
00000000 =00000026                  comm6		equ	$26		; 		; Communcation Reg.
00000000 =00000028                  comm8		equ	$28		; 		; Communcation Reg.
00000000 =00000029                  comm9		equ	$29		; 		; Communcation Reg.
00000000 =0000002A                  comm10		equ	$2a		; 		; Communcation Reg.
00000000 =0000002C                  comm12		equ	$2c		; 		; Communcation Reg.
00000000 =0000002E                  comm14		equ	$2e		; 		; Communcation Reg.
00000000                            
00000000 =00000080                  tvmode		equ	$80		; byte		; NTSC/PAL
00000000 =00000081                  bitmapmode	equ	$81		; byte		; BitMap Mode Reg.
00000000 =00000083                  shift		equ	$83		; byte		; Packed Pixel Dot Shift
00000000 =00000085                  filllength	equ	$85		; byte		; DRAM Fill Length
00000000 =00000086                  fillstart	equ	$86		; word		; DRAM Fill Start Address
00000000 =00000088                  filldata	equ	$88		; word		; DRAM Fill Data
00000000 =0000008A                  vdpsts		equ	$8a		; byte		; VDP status
00000000 =0000008B                  framectl	equ	$8b		; byte		; Frame Buffer Control
00000000                            
00000000 =00A15200                  palette		equ	$a15200		; 256 words	; Palette Data
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; OTHER
00000000                            ; --------------------------------------------
00000000                            
00000000                            		include	"system/hardware/mars/map_shared.asm"
00000000                            ; ==================================================================
00000000                            ; ---------------------------------------------------
00000000                            ; SH2 variables
00000000                            ; 
00000000                            ; For both SH2 and 68k
00000000                            ; ---------------------------------------------------
00000000                            
00000000 =00008000                  sizeof_code		equ	$8000
00000000                            
00000000 =06000000                  MasterEntry		equ	$06000000
00000000 =06008000                  SlaveEntry		equ	$06000000+sizeof_code
00000000 =06010000                  Sh2_CodeEnd		equ	$06000000+(sizeof_code*2)
00000000                            
00000000                            ; ---------------------------------------------------
00000000                            ; Variables
00000000                            ; ---------------------------------------------------
00000000                            
00000000                            ; 			rsreset
00000000                            ; m_loadpic		rs.b 1
00000000                            ; m_loadpic		rs.b 1
00000000                            		
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Header / Init
00000000                            ; -------------------------------------------------
00000000                            
00000000                            		include	"system/hardware/mars/68k/head.asm"	
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Header
00000000                            ; 
00000000                            ; MARS
00000000                            ; -------------------------------------------------
00000000                            
00000000 0000 0000                  		dc.l	0
00000004 0000 03F0 0000 03F0 0000+  		dcb.l	$B,$3F0
00000030 0000 0000 0000 0000 0000+  		align	$70
00000070 0000 0000                  		dc.l	RAM_HintJumpTo
00000074 0000 0000                  		align	$78
00000078 0000 0000                  		dc.l	RAM_VintJumpTo
0000007C                            
0000007C 0000 0000 0000 0000 0000+  		align $100
00000100 5345 4741 2033 3258 2020+  		dc.b "SEGA 32X        "
00000110 0000 0000 0000 0000 0000+  		align $120
00000120 4C61 7320 6176 656E 7475+  		dc.b "Las aventuras de Dominoe"
00000138 0000 0000 0000 0000 0000+  		align $150
00000150 446F 6D69 6E6F 6520 4164+  		dc.b "Dominoe Adventures"
00000162                            		
00000162 0000 0000 0000 0000 0000+  		align $1A0
000001A0 0000 0000                  		dc.l 0
000001A4 0000 0000                  		dc.l ROM_END
000001A8 00FF 0000                  		dc.l $FF0000
000001AC 00FF FFFF                  		dc.l $FFFFFF
000001B0 5241 E820                  		dc.b "RA",$E8,$20
000001B4 0020 0000                  		dc.l $200000
000001B8 0020 3FFF                  		dc.l $203FFF
000001BC                            
000001BC 0000 0000 0000 0000 0000+  		align $1F0
000001F0 5520 2020 2020 2020 2020+  		dc.b "U               "
00000200                            
00000200                            ; -------------------------------------------------
00000200                            
00000200 4EF9 0000 0000             		jmp	MD_Entry
00000206 0000 0000 0000 0000 0000+  		align	$2A2
000002A2 4EF9 0000 0000             		jmp	RAM_HintJumpTo
000002A8 0000 0000 0000             		align	$2AE
000002AE 4EF9 0000 0000             		jmp	RAM_VintJumpTo
000002B4                            		
000002B4                            ; -------------------------------------------------
000002B4                            ; MARS User Header
000002B4                            ; -------------------------------------------------
000002B4                            
000002B4                            		align	$3C0
000003C0 2A33 3278 2043 6865 636B+  		dc.b "*32x Check Mode*"				; module name
000003D0 0000 0000                  		dc.l 0						; version
000003D4 0000 0000                  		dc.l SH2_Start					; SH2 Program start address
000003D8 0000 0000                  		dc.l 0						; SH2 Program write address
000003DC 0000 0000                  		dc.l SH2_End-SH2_Start				; SH2 Program length
000003E0 0600 0120                  		dc.l MasterEntry+$120				; Master SH2 initial PC
000003E4 0600 8120                  		dc.l SlaveEntry+$120				; Slave SH2 initial PC
000003E8 0600 0000                  		dc.l MasterEntry				; Master SH2 initial VBR address
000003EC 0600 8000                  		dc.l SlaveEntry					; Slave SH2 intitial VBR address
000003F0                            		incbin	"system/hardware/mars/68k/security.bin"
00000800                            		
00000800                            ; -------------------------------------------------
00000800                            
00000800 6500 0000                   		bcs	MARS_Error
00000804 46FC 2700                  		move	#$2700,sr
00000808 4BF9 00A1 5100             		lea	(marsreg),a5
0000080E                            		
0000080E 0CAD 4D5F 4F4B 0020        @M_OK:		cmp.l	#"M_OK",$20(a5)
00000816 6600 FFF6                  		bne	@M_OK
0000081A 0CAD 535F 4F4B 0024        @S_OK:		cmp.l	#"S_OK",$24(a5)
00000822 6600 FFF6                  		bne	@S_OK
00000826                            
00000826 7000                       		moveq	#0,d0
00000828 2B40 0020                  		move.l	d0,$20(a5)
0000082C 2B40 0024                  		move.l	d0,$24(a5)
00000830                            		
00000830                            ; ===========================================================================
00000830                            ; -----------------------------------------------------------------
00000830                            ; Startup code
00000830                            ; -----------------------------------------------------------------
00000830                            
00000830                            MD_Entry:	
00000830 4EF9 0000 0000              		jmp	MD_Main
00000836                             		
00000836                            ; ===========================================================================
00000836                            ; -------------------------------------------------
00000836                            ; 32X Not connected
00000836                            ; -------------------------------------------------
00000836                            
00000836                            MARS_Error:
00000836 46FC 2700                  		move.w	#$2700,sr
0000083A 4A79 00C0 0004             		tst.w	(vdp_ctrl)
00000840                            		
00000840 4EB9 0000 0000             		jsr	(Video_Init&$FFFF)
00000846 4EB9 0000 0000             		jsr	(Video_Update&$FFFF)
0000084C                            		
0000084C 23FC C002 0000 00C0 0004   		move.l	#$C0020000,(vdp_ctrl)
00000856 23FC 0888 0EEE 00C0 0000   		move.l	#$08880EEE,(vdp_data)
00000860                            
00000860 23FC 4000 0000 00C0 0004   		move.l	#$40000000,(vdp_ctrl)
0000086A 41F9 0000 0000             		lea	(Art_DebugFont&$FFFF),a0
00000870 303C 0000                  		move.w	#((Art_DebugFont_e-Art_DebugFont)/4)-1,d0
00000874                            @dbg_loop:
00000874 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0000087A 51C8 FFF8                  		dbf	d0,@dbg_loop
0000087E                            		
0000087E 41FA 0000                  		lea	@asc_oops(pc),a0
00000882 7000                       		moveq	#0,d0
00000884 223C 0003 000C             		move.l	#$0003000C,d1
0000088A 7400                       		moveq	#0,d2
0000088C 4EB9 0000 0000             		jsr	(Video_PrintText&$FFFF)
00000892                            @loop:		
00000892 4E71                       		nop
00000894 4E71                       		nop
00000896 6000 FFFA                  		bra	@loop
0000089A                            		
0000089A 5468 6973 2067 616D 6520+  @asc_oops:	dc.b "This game requires the 32X addon.",0
000008BC                            		even
000008BC                            		
000008BC                            ; ====================================================================
000008BC                            ; -------------------------------------------------
000008BC                            ; MARS SH2 CODE
000008BC                            ; -------------------------------------------------
000008BC                            
000008BC                            SH2_Start:	incbin	"system/hardware/mars/sh2/code.bin"
00008B28                            SH2_End:
00008B28                            		align 4
00008B28                            		
00008B28                            		obj *+marsipl
00008B28                            		obj *+marsipl
00888B28                            		
00888B28                            ; ====================================================================
00888B28                            ; -------------------------------------------------
00888B28                            ; Subs
00888B28                            ; -------------------------------------------------
00888B28                            
00888B28                            		include	"system/video.asm"
00888B28                            ; ====================================================================
00888B28                            ; VDP
00888B28                            ; ====================================================================
00888B28                            
00888B28                            ; -------------------------------------------------
00888B28                            ; Variables
00888B28                            ; -------------------------------------------------
00888B28                            
00888B28                            		rsreset
00888B28 =00000000                  palFd_mode	rs.b 1
00888B28 =00000001                  palFd_delay	rs.b 1
00888B28 =00000002                  palFd_from	rs.b 1			;TODO: poner funcionar esto
00888B28 =00000003                  palFd_num	rs.b 1
00888B28 =00000004                  palFd_timer	rs.w 1
00888B28                            
00888B28                            		rsreset
00888B28 =00000000                  sprite_free	rs.l 1
00888B28 =00000004                  sprite_link	rs.w 1
00888B28 =00000006                  sprite_used	rs.w 1
00888B28                            
00888B28                            ; ====================================================================
00888B28                            ; -------------------------------------------------
00888B28                            ; RAM
00888B28                            ; -------------------------------------------------
00888B28                            
00888B28                            		rsset RAM_Video
00888B28 =FFFFDF00                  RAM_ScrlHor	rs.l 240
00888B28 =FFFFE2C0                  RAM_ScrlVer	rs.l $20			; Normal
00888B28 =FFFFE340                  RAM_Sprites	rs.l (80*2)			; Normal
00888B28 =FFFFE5C0                  RAM_SprControl	rs.l 2				; Normal
00888B28 =FFFFE5C8                  RAM_HSprites	rs.l (80*2)			; For HBlank
00888B28 =FFFFE848                  RAM_HScrlVer	rs.l $20			; For HBlank
00888B28 =FFFFE8C8                  RAM_HSprLast	rs.l 2				; For HBlank
00888B28 =FFFFE8D0                  RAM_Palette	rs.w 64				; Normal
00888B28 =FFFFE950                  RAM_HPalette	rs.w 64				; For HBlank
00888B28 =FFFFE9D0                  RAM_PalFade	rs.w 64				; Normal
00888B28 =FFFFEA50                  RAM_HPalFade	rs.w 64				; For HBlank
00888B28 =FFFFEAD0                  RAM_PalFadeSys	rs.l 8*2
00888B28 =FFFFEB10                  RAM_DMA_Buffer	rs.b $200
00888B28 =FFFFED10                  RAM_VidRegs	rs.b 16				; Unused regs included (always zero) | WINDOW and DMA regs ignored, use them separately
00888B28                            
00888B28 =FFFFED20                  sizeof_vid	rs.l 0
00888B28                            ;       		inform 0,"video ram: %h",(sizeof_vid-RAM_Video)
00888B28                            
00888B28                            ; ====================================================================
00888B28                            ; -------------------------------------------------
00888B28                            ; Subs
00888B28                            ; -------------------------------------------------
00888B28                            
00888B28                            ; -------------------------------------------------
00888B28                            ; Video control
00888B28                            ; -------------------------------------------------
00888B28                            
00888B28                            Video_init:
00888B28 41FA 0000                  		lea	reg_data(pc),a0
00888B2C 43F9 FFFF ED10             		lea	(RAM_VidRegs),a1
00888B32 303C 8000                  		move.w	#$8000,d0
00888B36 7210                       		moveq	#17-1,d1
00888B38                            @reg_list:
00888B38 1018                       		move.b	(a0)+,d0
00888B3A 12C0                       		move.b	d0,(a1)+
00888B3C 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
00888B42 0640 0100                  		add.w	#$100,d0
00888B46 51C9 FFF0                  		dbf	d1,@reg_list
00888B4A 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)	;WINDOW LEFT/TOP clear
00888B54 23FC 9300 9400 00C0 0004   		move.l	#$93009400,(vdp_ctrl)	;DMA len low/high clear
00888B5E 23FC 9500 9600 00C0 0004   		move.l	#$95009600,(vdp_ctrl)	;DMA addr mid/low clear
00888B68 33FC 9700 00C0 0004        		move.w	#$9700,(vdp_ctrl)	;DMA addr high clear
00888B70                              	
00888B70                            ; --------------------------------------------
00888B70                            ; Video_ClearAll
00888B70                            ; --------------------------------------------
00888B70                            
00888B70                            Video_ClearAll:
00888B70 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)
00888B7A                            		
00888B7A 6100                       		bsr.s	Video_ClrAllLyrs
00888B7C 6100                       		bsr.s	Video_ClearScroll
00888B7E 6100 0000                  		bsr	Sprites_Clear
00888B82 6000 0000                  		bra	Sprites_Reset
00888B86                            		
00888B86                            Video_ClearSprites:
00888B86 6100 0000                  		bsr	Sprites_Clear
00888B8A 6000 0000                  		bra	Sprites_Reset
00888B8E                            		
00888B8E                            ; --------------------------------------------
00888B8E                            ; Video_ClrAllLyrs
00888B8E                            ; --------------------------------------------
00888B8E                            
00888B8E                            Video_ClrAllLyrs:
00888B8E 203C 4000 0003             		move.l	#$40000003,d0
00888B94 6100                       		bsr.s	Video_ClrLyr
00888B96 203C 5000 0003             		move.l	#$50000003,d0
00888B9C 6100                       		bsr.s	Video_ClrLyr
00888B9E 203C 6000 0003             		move.l	#$60000003,d0
00888BA4                            ; 		bsr.s	Video_ClrLyr
00888BA4                            ; 		rts
00888BA4                            		
00888BA4                            ; --------------------------------------------
00888BA4                            ; Video_ClrLyr
00888BA4                            ; 
00888BA4                            ; d0 | LONG - VDP VRAM Command for the layer
00888BA4                            ; --------------------------------------------
00888BA4                            
00888BA4                            Video_ClrLyr:
00888BA4 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
00888BAA 303C 07FF                  		move.w	#$7FF,d0
00888BAE                            @loop:
00888BAE 33FC 0000 00C0 0000        		move.w	#0,(vdp_data)
00888BB6 51C8 FFF6                  		dbf	d0,@loop
00888BBA 4E75                       		rts
00888BBC                            	
00888BBC                            ; --------------------------------------------
00888BBC                            ; Video_ClrHScrl
00888BBC                            ; --------------------------------------------
00888BBC                            
00888BBC                            Video_ClrHScrl:
00888BBC 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
00888BC2 303C 00DF                  		move.w	#224-1,d0
00888BC6 6000                       		bra.s	VidClrScrl_loop
00888BC8                            
00888BC8                            ; --------------------------------------------
00888BC8                            ; Video_ClearScroll
00888BC8                            ; --------------------------------------------
00888BC8                            
00888BC8                            Video_ClearScroll:
00888BC8 61F2                       		bsr.s	Video_ClrHScrl
00888BCA 41F9 FFFF E2C0             		lea	(RAM_ScrlVer),a0
00888BD0 6100                       		bsr.s	Video_ClrVScrl
00888BD2 41F9 FFFF E848             		lea	(RAM_HScrlVer),a0
00888BD8                            ; 		bsr.s	Video_ClrVScrl
00888BD8                            		
00888BD8                            ; --------------------------------------------
00888BD8                            ; Video_ClrVScrl
00888BD8                            ; 
00888BD8                            ; a0 - Vertical scroll data
00888BD8                            ; --------------------------------------------
00888BD8                            
00888BD8                            Video_ClrVScrl:
00888BD8 303C 001F                  		move.w	#$20-1,d0
00888BDC                            VidClrScrl_loop:
00888BDC 4298                       		clr.l	(a0)+
00888BDE 51C8 FFFC                  		dbf	d0,VidClrScrl_loop
00888BE2 4E75                       		rts
00888BE4                            		
00888BE4                            ; ------------------------------------
00888BE4                            
00888BE4                            reg_data:
00888BE4 04                         		dc.b %00000100			; $80: [4] HInt interrupt OFF | [2] ALWAYS ON | [1] HV Counter OFF
00888BE5 74                         		dc.b %01110100			; $81: [6] Display ON, [5] Vint interrupt ON, [4] DMA OFF, [3] V28 (V30 PAL ONLY) | [2] ALWAYS ON
00888BE6 30                         		dc.b ($C000>>10)&%00111000	; $82: Plane A pattern table
00888BE7 34                         		dc.b ($D000>>10)&%00111110	; $83:  WINDOW pattern table (%00111110 H32, %00111100 H40)
00888BE8 07                         		dc.b ($E000>>13)&%00000111	; $84: Plane B pattern table
00888BE9 7C                         		dc.b ($F800>>09)&%01111111	; $85:  Sprite attribute table (%01111111 H32, %01111110 H40)
00888BEA 00                         		dc.b 0				; $86: NOTHING
00888BEB 00                         		dc.b 0				; $87: BG Color
00888BEC 00                         		dc.b 0				; $88: NOTHING
00888BED 00                         		dc.b 0				; $89: NOTHING
00888BEE 00                         		dc.b 0				; $8A: HInt counter
00888BEF 03                         		dc.b %00000011			; $8B: [3] External interrupt OFF | [2] Vscrl: full | [1|0] Hscrl: full
00888BF0 81                         		dc.b %10000001			; $8C: [7+0] H40 | [3] Prio/Shadow | [2|1] Interlace mode: None
00888BF1 3F                         		dc.b ($FC00>>10)&%00111111	; $8D: Hscroll attribute table
00888BF2 00                         		dc.b 0				; $8E: NOTHING
00888BF3 02                         		dc.b 2				; $8F: VDP Auto increment
00888BF4 01                         		dc.b %00000001			; $90: Plane size [5|4] Y size | [1|0] X size
00888BF6 00                         		even
00888BF6                            
00888BF6                            ; -------------------------------------------------
00888BF6                            ; Subs
00888BF6                            ; -------------------------------------------------
00888BF6                            
00888BF6                            Video_Update:
00888BF6 41F9 FFFF ED10             		lea	(RAM_VidRegs),a0
00888BFC 303C 8000                  		move.w	#$8000,d0
00888C00 7210                       		moveq	#17-1,d1
00888C02                            @reg_list:
00888C02 1018                       		move.b	(a0)+,d0
00888C04 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
00888C0A 0640 0100                  		add.w	#$100,d0
00888C0E 51C9 FFF2                  		dbf	d1,@reg_list
00888C12 4E75                       		rts
00888C14                            		
00888C14                            ; --------------------------------------------
00888C14                            ; VDP_SendData_W, VDP_SendData_L
00888C14                            ;
00888C14                            ; Input:
00888C14                            ; a0 - Data address
00888C14                            ;
00888C14                            ; d0 | VRAM Address
00888C14                            ; d1 | Data size
00888C14                            ; --------------------------------------------
00888C14                            
00888C14                            VDP_SendData_W:
00888C14 EB48                       		lsl.w	#5,d0
00888C16 6100 0000                  		bsr	VDP_VramToCmd
00888C1A 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
00888C20                            @Loop:
00888C20 33D8 00C0 0000             		move.w	(a0)+,(vdp_data).l
00888C26 51C9 FFF8                  		dbf	d1,@Loop
00888C2A 4E75                       		rts
00888C2C                            
00888C2C                            VDP_SendData_L:
00888C2C EB48                       		lsl.w	#5,d0
00888C2E 6100 0000                  		bsr	VDP_VramToCmd
00888C32 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
00888C38                            @Loop:
00888C38 23D8 00C0 0000             		move.l	(a0)+,(vdp_data).l
00888C3E 51C9 FFF8                  		dbf	d1,@Loop
00888C42 4E75                       		rts
00888C44                            		
00888C44                            ; -----------------------
00888C44                            ; Uses: d4 (LONG)
00888C44                            ;       d5 (WORD)
00888C44                            ; -----------------------
00888C44                            
00888C44                            vdpshv_findvdppos:
00888C44                            		;Check plane to use
00888C44 4845                       		swap	d5
00888C46 3A00                       		move.w	d0,d5
00888C48 7000                       		moveq	#0,d0
00888C4A 1039 FFFF ED12             		move.b	(RAM_VidRegs+2),d0
00888C50 0805 0001                  		btst	#1,d5				;%10? (WD)
00888C54 6700                       		beq.s	@FG
00888C56 1039 FFFF ED13             		move.b	(RAM_VidRegs+3),d0
00888C5C                            @FG:
00888C5C E148                       		lsl.w	#8,d0
00888C5E E548                       		lsl.w	#2,d0
00888C60 0805 0000                  		btst	#0,d5				;%01? (BG)
00888C64 6700                       		beq.s	@FGWD
00888C66 7000                       		moveq	#0,d0
00888C68 1039 FFFF ED14             		move.b	(RAM_VidRegs+4),d0
00888C6E E148                       		lsl.w	#8,d0
00888C70 EB48                       		lsl.w	#5,d0
00888C72                            @FGWD:
00888C72                            
00888C72                            		;Start Y
00888C72 7800                       		moveq	#0,d4
00888C74 3801                          		move.w	d1,d4
00888C76 ED8C                         		lsl.l	#6,d4
00888C78 0805 0001                   		btst	#1,d5
00888C7C 6700                        		beq.s	@def_fgbg
00888C7E                             		
00888C7E                             		;TODO: WD resolution check
00888C7E                            ;    		move.b	(RAM_VidRegs+vdpReg_HMode),d5
00888C7E                            ;    		and.w	#%10000001,d5
00888C7E                            ;    		bne.s	@Not128
00888C7E E38C                           		lsl.l	#1,d4
00888C80 6000                       		bra.s	@Not128
00888C82                            @def_fgbg:
00888C82 0839 0000 FFFF ED20         		btst	#0,(RAM_VidRegs+$10)
00888C8A 6700                        		beq.s	@Not40
00888C8C E38C                         		lsl.l	#1,d4
00888C8E                            @Not40:
00888C8E 0839 0001 FFFF ED20         		btst	#1,(RAM_VidRegs+$10)
00888C96 6700                        		beq.s	@Not128
00888C98 E38C                           		lsl.l	#1,d4
00888C9A                            @Not128:
00888C9A D044                        		add.w	d4,d0			;+Y Start
00888C9C 4841                       		swap	d1
00888C9E E349                       		lsl.w	#1,d1
00888CA0 D041                       		add.w	d1,d0			;+X Start
00888CA2 4845                       		swap	d5
00888CA4                            		
00888CA4                            ; --------------------------------------------
00888CA4                            ; VDP_VramToCmd
00888CA4                            ;
00888CA4                            ; Input:
00888CA4                            ; d0 | WORD - VRAM to convert
00888CA4                            ;
00888CA4                            ; Output:
00888CA4                            ; d0 | LONG - VDP Command (Write mode)
00888CA4                            ; --------------------------------------------
00888CA4                            
00888CA4                            VDP_VramToCmd:
00888CA4 0C40 4000                  		cmp.w	#$4000,d0
00888CA8 6500                       		bcs.s	@NoBank
00888CAA 4840                       		swap	d0
00888CAC 303C 0001                  		move.w	#1,d0
00888CB0 4840                       		swap	d0
00888CB2 0C40 8000                  		cmp.w	#$8000,d0
00888CB6 6500                       		bcs.s	@NoBank	
00888CB8 4840                       		swap	d0
00888CBA 303C 0002                  		move.w	#2,d0
00888CBE 4840                       		swap	d0
00888CC0 0C40 C000                  		cmp.w	#$C000,d0
00888CC4 6500                       		bcs.s	@NoBank	
00888CC6 4840                       		swap	d0
00888CC8 303C 0003                  		move.w	#3,d0
00888CCC 4840                       		swap	d0
00888CCE                            @NoBank:
00888CCE 0240 3FFF                    		and.w	#$3FFF,d0
00888CD2 0040 4000                    		or.w	#$4000,d0
00888CD6 4840                          		swap	d0
00888CD8 4E75                       		rts
00888CDA                            		
00888CDA                            ; --------------------------------------------
00888CDA                            ; VDP_LoadMaps
00888CDA                            ; 
00888CDA                            ; Input:
00888CDA                            ; a0 - Pattern data
00888CDA                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
00888CDA                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
00888CDA                            ; d2 | LONG - Value
00888CDA                            ; d3 | WORD - VRAM (ASCII start)
00888CDA                            ; d4 | WORD - Type:
00888CDA                            ;             00 Byte | 01 Word | 02 Long HEX
00888CDA                            ;             04 Byte | 05 Word | 06 Long DEC
00888CDA                            ;             08 Byte | 09 Word | 0A Long DEC
00888CDA                            ; Uses:
00888CDA                            ; d4-d6
00888CDA                            ; 
00888CDA                            ; NOTE: clear d2 FIRST and then set the value
00888CDA                            ; --------------------------------------------
00888CDA                            
00888CDA                            Video_PrintVal:
00888CDA 0244 0007                  		and.w	#%111,d4
00888CDE 0804 0002                  		btst	#2,d4
00888CE2 6700                       		beq.s	@hexy
00888CE4 6100 0000                  		bsr	HexToDec
00888CE8                            @hexy:
00888CE8 3A04                       		move.w	d4,d5
00888CEA 6100 FF58                  		bsr	vdpshv_findvdppos
00888CEE 3805                       		move.w	d5,d4
00888CF0                            		
00888CF0 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
00888CF6 0643 0030                  		add.w	#"0",d3
00888CFA                            		
00888CFA 7A07                          		moveq	#(8)-1,d5
00888CFC 0804 0001                  		btst	#1,d4
00888D00 6600                       		bne.s	@setit
00888D02 7A03                          		moveq	#(4)-1,d5
00888D04 4842                        		swap	d2
00888D06 1004                          		move.b	d4,d0
00888D08 0200 0003                     		and.b	#%11,d0
00888D0C 4A00                        		tst.b	d0
00888D0E 6600                        		bne.s	@setit
00888D10 7A01                        		moveq	#(2)-1,d5
00888D12 E19A                        		rol.l	#8,d2
00888D14                            @setit:
00888D14 0804 0002                  		btst	#2,d4
00888D18 6700                       		beq.s	@next
00888D1A 0804 0001                  		btst	#1,d4
00888D1E 6600                       		bne.s	@next
00888D20 E89A                       		ror.l	#4,d2
00888D22 0645 0001                  		add.w	#1,d5
00888D26                            @next:
00888D26 E99A                        		rol.l	#4,d2
00888D28 3002                       		move.w	d2,d0
00888D2A 0240 000F                  		and.w	#$F,d0
00888D2E 0C40 000A                  		cmp.w	#$A,d0
00888D32 6500                       		bcs.s	@lessF
00888D34 0640 0007                  		add.w	#7,d0
00888D38                            @lessF
00888D38 D043                       		add.w	d3,d0
00888D3A 33C0 00C0 0000             		move.w	d0,(vdp_data)
00888D40 51CD FFE4                  		dbf	d5,@next
00888D44 4E75                       		rts
00888D46                            
00888D46                            ; --------------------------------------------
00888D46                            ; Video_MakeMap
00888D46                            ; 
00888D46                            ; Input:
00888D46                            ; a0 - Pattern data
00888D46                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
00888D46                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
00888D46                            ; d2 | LONG - XSize (WORD) | YSize (WORD)
00888D46                            ; d3 | WORD - VRAM
00888D46                            ; 
00888D46                            ; Uses:
00888D46                            ; d4-d6
00888D46                            ; --------------------------------------------
00888D46                            
00888D46                            Video_MakeMap:
00888D46                            		;Check plane to use
00888D46 6100 FEFC                  		bsr	vdpshv_findvdppos
00888D4A                            		
00888D4A 283C 0040 0000             		move.l	#$400000,d4
00888D50 0839 0000 FFFF ED20        		btst	#0,(RAM_VidRegs+$10)
00888D58 6700                       		beq.s	@JpNot40
00888D5A E38C                        		lsl.l	#1,d4
00888D5C                            @JpNot40:
00888D5C 0839 0001 FFFF ED20        		btst	#1,(RAM_VidRegs+$10)
00888D64 6700                       		beq.s	@Y_Loop
00888D66 E38C                            		lsl.l	#1,d4
00888D68                                 		
00888D68                            @Y_Loop:
00888D68 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l		; Set VDP location from d0
00888D6E 4842                       		swap	d2
00888D70 3A02                       		move.w	d2,d5	  		; Move X-pos value to d3
00888D72 4842                       		swap	d2
00888D74                            @X_Loop:
00888D74 3C18                       		move.w	(a0)+,d6
00888D76 DC43                                       add.w	d3,d6
00888D78 4845                                       swap	d5
00888D7A 1A39 FFFF ED1C                             move.b	(RAM_VidRegs+$C),d5
00888D80 0245 0006                                  and.w	#%110,d5
00888D84 6700                                       beq.s	@normal
00888D86 E24E                                       lsr.w	#1,d6
00888D88                            @normal:
00888D88 4845                                       swap	d5
00888D8A 33C6 00C0 0000                             move.w	d6,(vdp_data)		; Put data
00888D90 51CD FFE2                  		dbf	d5,@X_Loop		; X-pos loop (from d1 to d3)
00888D94 D084                       		add.l	d4,d0                   ; Next line
00888D96 51CA FFD0                  		dbf	d2,@Y_Loop		; Y-pos loop
00888D9A 4E75                       		rts
00888D9C                            
00888D9C                            ; --------------------------------------------
00888D9C                            ; Video_PrintText
00888D9C                            ;
00888D9C                            ; Input:
00888D9C                            ; a0 - String
00888D9C                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
00888D9C                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
00888D9C                            ; d2 | VRAM
00888D9C                            ; 
00888D9C                            ; Uses:
00888D9C                            ; d3-d4
00888D9C                            ; --------------------------------------------
00888D9C                            
00888D9C                            Video_PrintText:
00888D9C                            		;Check plane to use
00888D9C 3A00                       		move.w	d0,d5
00888D9E 6100 FEA4                  		bsr	vdpshv_findvdppos
00888DA2                            		
00888DA2 283C 0080 0000              		move.l	#$800000,d4
00888DA8                            ;  		cmp.w	#2,d5
00888DA8                            ;  		bne.s	@NotWindow
00888DA8                            ; 		
00888DA8                            ;  		tst.b	(RAM_VidRegs+$C)
00888DA8                            ;  		beq.s	@Reset
00888DA8                            ;  		lsl.l	#1,d4
00888DA8                            ; 		bra.s	@Reset
00888DA8                            ; 		
00888DA8                            ; @NotWindow:
00888DA8                            ; 		btst	#0,(RAM_VidRegs+$10)
00888DA8                            ; 		beq.s	@JpNot40
00888DA8                            ;  		lsl.l	#1,d4
00888DA8                            ; @JpNot40:
00888DA8                            ; 		btst	#1,(RAM_VidRegs+$10)
00888DA8                            ; 		beq.s	@Space
00888DA8                            ;      		lsl.l	#1,d4
00888DA8                                 		
00888DA8                            @Reset:
00888DA8 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l
00888DAE                            @Next:
00888DAE 7600                       		moveq	#0,d3
00888DB0 1618                       		move.b	(a0)+,d3
00888DB2 0C03 000A                  		cmp.b	#$A,d3
00888DB6 6700                       		beq.s	@Space
00888DB8 4A03                       		tst.b	d3
00888DBA 6600                       		bne.s	@Char
00888DBC 4E75                       		rts
00888DBE                            @Char:
00888DBE D642                       		add.w	d2,d3
00888DC0 33C3 00C0 0000             		move.w	d3,(vdp_data).l
00888DC6 60E6                       		bra.s	@Next
00888DC8                            @Space:
00888DC8 D084                       		add.l	d4,d0                   ; Next line
00888DCA 60DC                       		bra.s	@Reset
00888DCC                            @Exit:
00888DCC 4E75                       		rts
00888DCE                            		
00888DCE                            ; --------------------------------------------
00888DCE                            ; Video_VSync
00888DCE                            ; 
00888DCE                            ; Wait VBlank
00888DCE                            ; --------------------------------------------
00888DCE                            
00888DCE                            Video_VSync:
00888DCE 08F9 0000 0000 0000         		bset	#0,(RAM_IntFlags)
00888DD6                            @vint:
00888DD6 0839 0000 0000 0000        		btst	#0,(RAM_IntFlags)
00888DDE 66F6                       		bne.s	@vint
00888DE0 4E75                       		rts
00888DE2                            
00888DE2                            ; ====================================================================
00888DE2                            ; ---------------------------------------------
00888DE2                            ; Palette fading
00888DE2                            ; ---------------------------------------------
00888DE2                            
00888DE2                            PalFade_Upd:
00888DE2 4DF9 FFFF EAD0             		lea	(RAM_PalFadeSys),a6
00888DE8 7C03                        		moveq	#4-1,d6
00888DEA                            @NextPalReq:
00888DEA 4A96                       		tst.l	(a6)
00888DEC 6700                       		beq.s	@Unused
00888DEE 4BF9 FFFF E8D0              		lea	(RAM_Palette),a5
00888DF4 49F9 FFFF E9D0              		lea	(RAM_PalFade),a4
00888DFA 6100 0000                    		bsr	@Active
00888DFE                            @Unused:
00888DFE DCFC 0008                   		adda	#8,a6
00888E02 51CE FFE6                   		dbf	d6,@NextPalReq
00888E06                            		
00888E06 7C03                       		moveq	#4-1,d6
00888E08                            @NextHPalReq:
00888E08 4A96                       		tst.l	(a6)
00888E0A 6700                       		beq.s	@UnusedH
00888E0C 4BF9 FFFF E950             		lea	(RAM_HPalette),a5
00888E12 49F9 FFFF EA50             		lea	(RAM_HPalFade),a4
00888E18 6100 0000                  		bsr	@Active
00888E1C                            @UnusedH:
00888E1C DCFC 0008                  		adda	#8,a6
00888E20 51CE FFE6                  		dbf	d6,@NextHPalReq
00888E24 4E75                       		rts
00888E26                            		
00888E26                            ; ---------------------------------
00888E26                            ; Active palette
00888E26                            ; ---------------------------------
00888E26                            
00888E26                            @Active:
00888E26 7000                       		moveq	#0,d0
00888E28 102E 0000                  		move.b	palFd_mode(a6),d0
00888E2C D040                       		add.w	d0,d0
00888E2E 323B 0000                  		move.w	@list(pc,d0.w),d1
00888E32 4EFB 1000                  		jmp	@list(pc,d1.w)
00888E36                            		
00888E36                            ; ---------------------------------
00888E36                            
00888E36                            @list:
00888E36 0000                       		dc.w fadeSet_Return-@list
00888E38 0000                       		dc.w fadeSet_in_timer-@list
00888E3A 0000                       		dc.w fadeSet_out_timer-@list
00888E3C 0000                       		dc.w fadeSet_in_single-@list
00888E3E 0000                        		dc.w fadeSet_out_single-@list		
00888E40                            		
00888E40                            ; ---------------------------------
00888E40                            
00888E40                            fadeSet_in_timer:
00888E40 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00888E46 6A00 0000                  		bpl	fadeSet_Return
00888E4A 7800                       		moveq	#0,d4
00888E4C 7A00                       		moveq	#0,d5
00888E4E 182E 0001                  		move.b 	palFd_delay(a6),d4
00888E52 3D44 0004                  		move.w	d4,palFd_timer(a6)
00888E56 182E 0003                  		move.b 	palFd_num(a6),d4
00888E5A                            @next_in:
00888E5A 3015                        		move.w	(a5),d0
00888E5C 3214                        		move.w	(a4),d1
00888E5E 3400                       		move.w	d0,d2
00888E60 3601                        		move.w	d1,d3
00888E62 0242 000E                   		and.w	#$00E,d2
00888E66 0243 000E                   		and.w	#$00E,d3
00888E6A B642                        		cmp.w	d2,d3
00888E6C 6700                        		beq.s	@goodin_b
00888E6E 0642 0002                  		add.w	#2,d2
00888E72                            @goodin_b:
00888E72 0240 0EE0                  		and.w	#$EE0,d0
00888E76 8042                        		or.w	d2,d0
00888E78                            		
00888E78 3400                       		move.w	d0,d2
00888E7A 3601                        		move.w	d1,d3
00888E7C 0242 00E0                   		and.w	#$0E0,d2
00888E80 0243 00E0                   		and.w	#$0E0,d3
00888E84 B642                        		cmp.w	d2,d3
00888E86 6700                        		beq.s	@goodin_g
00888E88 0642 0020                  		add.w	#$020,d2
00888E8C                            @goodin_g:
00888E8C 0240 0E0E                  		and.w	#$E0E,d0
00888E90 8042                        		or.w	d2,d0
00888E92                              		
00888E92 3400                       		move.w	d0,d2
00888E94 3601                        		move.w	d1,d3
00888E96 0242 0E00                   		and.w	#$E00,d2
00888E9A 0243 0E00                   		and.w	#$E00,d3
00888E9E B642                        		cmp.w	d2,d3
00888EA0 6700                        		beq.s	@goodin_r
00888EA2 0642 0200                  		add.w	#$200,d2
00888EA6                            @goodin_r:
00888EA6 0240 00EE                  		and.w	#$0EE,d0
00888EAA 8042                        		or.w	d2,d0
00888EAC                             		
00888EAC 3AC0                        		move.w	d0,(a5)+
00888EAE B05C                        		cmp.w	(a4)+,d0
00888EB0 6600                        		bne.s	@nonz_fdin
00888EB2 0645 0001                   		add.w	#1,d5
00888EB6                            @nonz_fdin:
00888EB6 51CC FFA2                  		dbf	d4,@next_in
00888EBA                            		
00888EBA 0445 0001                  		sub.w	#1,d5
00888EBE BA2E 0003                  		cmp.b	palFd_num(a6),d5
00888EC2 6600                       		bne.s	fadeSet_Return
00888EC4 4296                       		clr.l	(a6)
00888EC6                            fadeSet_Return:
00888EC6 4E75                       		rts
00888EC8                            		
00888EC8                            ; ---------------------------------
00888EC8                            
00888EC8                            fadeSet_out_timer:
00888EC8 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00888ECE 6AF6                       		bpl.s	fadeSet_Return
00888ED0 7400                       		moveq	#0,d2
00888ED2 7600                       		moveq	#0,d3
00888ED4 142E 0001                  		move.b 	palFd_delay(a6),d2
00888ED8 3D42 0004                  		move.w	d2,palFd_timer(a6)
00888EDC 142E 0003                  		move.b 	palFd_num(a6),d2
00888EE0                            @setcol:
00888EE0 3015                       		move.w	(a5),d0
00888EE2 3200                       		move.w	d0,d1
00888EE4 0241 000E                  		and.w	#$00E,d1
00888EE8 6700                       		beq.s	@good_b
00888EEA 0441 0002                  		sub.w	#2,d1
00888EEE                            @good_b:
00888EEE 0240 0EE0                  		and.w	#$EE0,d0
00888EF2 8041                       		or.w	d1,d0
00888EF4                            		
00888EF4 3200                       		move.w	d0,d1
00888EF6 0241 00E0                  		and.w	#$0E0,d1
00888EFA 6700                       		beq.s	@good_g
00888EFC 0441 0020                  		sub.w	#$020,d1
00888F00                            @good_g:
00888F00 0240 0E0E                  		and.w	#$E0E,d0
00888F04 8041                       		or.w	d1,d0
00888F06 3200                       		move.w	d0,d1
00888F08 0241 0E00                  		and.w	#$E00,d1
00888F0C 6700                       		beq.s	@good_r
00888F0E 0441 0200                  		sub.w	#$200,d1
00888F12                            @good_r:
00888F12 0240 00EE                  		and.w	#$0EE,d0
00888F16 8041                       		or.w	d1,d0
00888F18 3AC0                       		move.w	d0,(a5)+
00888F1A 4A40                       		tst.w	d0
00888F1C 6600                       		bne.s	@nonzero
00888F1E 0643 0001                  		add.w	#1,d3
00888F22                            @nonzero:
00888F22 51CA FFBC                  		dbf	d2,@setcol
00888F26                            		
00888F26 0443 0001                  		sub.w	#1,d3
00888F2A B62E 0003                  		cmp.b	palFd_num(a6),d3
00888F2E 6696                       		bne.s	fadeSet_Return
00888F30 4296                       		clr.l	(a6)
00888F32 4E75                       		rts
00888F34                            		
00888F34                            ; ---------------------------------
00888F34                            ; fadeSet_in_single
00888F34                            ; 
00888F34                            ; palFd_delay:
00888F34                            ; RGBTTTTT - RGB increment bits
00888F34                            ;            TTTTT timer
00888F34                            ; ---------------------------------
00888F34                            
00888F34                            fadeSet_in_single:
00888F34 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00888F3A 6A00 FF8A                  		bpl	fadeSet_Return
00888F3E                            
00888F3E 7A00                       		moveq	#0,d5
00888F40 1A2E 0002                  		move.b	palFd_from(a6),d5
00888F44 E34D                       		lsl.w	#1,d5
00888F46 DAC5                       		adda	d5,a5
00888F48 162E 0001                  		move.b 	palFd_delay(a6),d3
00888F4C 0243 00E0                  		and.w	#$E0,d3
00888F50 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
00888F56                            		
00888F56 7800                       		moveq	#0,d4
00888F58 182E 0003                  		move.b 	palFd_num(a6),d4
00888F5C                            @next_in:
00888F5C 3015                        		move.w	(a5),d0
00888F5E 3400                       		move.w	d0,d2
00888F60 0242 000E                   		and.w	#$00E,d2
00888F64 0803 0005                  		btst	#5,d3
00888F68 6700                       		beq.s	@goodin_b
00888F6A 0C42 000E                   		cmp.w	#$00E,d2
00888F6E 6C00                        		bge.s	@goodin_b
00888F70 0642 0002                  		add.w	#2,d2
00888F74                            @goodin_b:
00888F74 0240 0EE0                  		and.w	#$EE0,d0
00888F78 8042                        		or.w	d2,d0
00888F7A                            
00888F7A 3400                       		move.w	d0,d2
00888F7C 0242 00E0                   		and.w	#$0E0,d2
00888F80 0803 0006                  		btst	#6,d3
00888F84 6700                       		beq.s	@goodin_g
00888F86 0C42 00E0                   		cmp.w	#$0E0,d2
00888F8A 6C00                        		bge.s	@goodin_g
00888F8C 0642 0020                  		add.w	#$020,d2
00888F90                            @goodin_g:
00888F90 0240 0E0E                  		and.w	#$E0E,d0
00888F94 8042                        		or.w	d2,d0
00888F96                            
00888F96 3400                       		move.w	d0,d2
00888F98 0242 0E00                   		and.w	#$E00,d2
00888F9C 0803 0007                  		btst	#7,d3
00888FA0 6700                       		beq.s	@goodin_r
00888FA2 0C42 0E00                   		cmp.w	#$E00,d2
00888FA6 6C00                        		bge.s	@goodin_r
00888FA8 0642 0200                  		add.w	#$200,d2
00888FAC                            @goodin_r:
00888FAC 0240 00EE                  		and.w	#$0EE,d0
00888FB0 8042                        		or.w	d2,d0
00888FB2                            
00888FB2 3AC0                        		move.w	d0,(a5)+
00888FB4 51CC FFA6                  		dbf	d4,@next_in
00888FB8                            		
00888FB8 102E 0001                  		move.b	palFd_delay(a6),d0
00888FBC 0240 001F                  		and.w	#$1F,d0
00888FC0 0440 0001                  		sub.w	#1,d0
00888FC4 6A00                       		bpl.s	fadeSet_Return_2
00888FC6                            		
00888FC6                            ; 		sub.w	#1,d5
00888FC6                            ; 		cmp.b	palFd_num(a6),d5
00888FC6                            ; 		bne.s	fadeSet_Return
00888FC6 4296                       		clr.l	(a6)
00888FC8 42AE 0004                  		clr.l	4(a6)
00888FCC                            		
00888FCC                            fadeSet_Return_2:
00888FCC 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
00888FD2 812E 0001                  		or.b	d0,palFd_delay(a6)
00888FD6 4E75                       		rts
00888FD8                            		
00888FD8                            ; ---------------------------------
00888FD8                            ; fadeSet_out_single
00888FD8                            ; 
00888FD8                            ; palFd_delay:
00888FD8                            ; RGBTTTTT - RGB increment bits
00888FD8                            ;            TTTTT timer
00888FD8                            ; ---------------------------------
00888FD8                            
00888FD8                            fadeSet_out_single:
00888FD8 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00888FDE 6A00 FEE6                  		bpl	fadeSet_Return
00888FE2                            
00888FE2 7A00                       		moveq	#0,d5
00888FE4 1A2E 0002                  		move.b	palFd_from(a6),d5
00888FE8 E34D                       		lsl.w	#1,d5
00888FEA DAC5                       		adda	d5,a5
00888FEC 162E 0001                  		move.b 	palFd_delay(a6),d3
00888FF0 0243 00E0                  		and.w	#$E0,d3
00888FF4 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
00888FFA                            		
00888FFA 7800                       		moveq	#0,d4
00888FFC 182E 0003                  		move.b 	palFd_num(a6),d4
00889000                            @next_in:
00889000 3015                        		move.w	(a5),d0
00889002 3400                       		move.w	d0,d2
00889004 0242 000E                   		and.w	#$00E,d2
00889008 0803 0005                  		btst	#5,d3
0088900C 6700                       		beq.s	@goodin_b
0088900E                            ;  		tst.w	d2
0088900E                            ;  		beq.s	@goodin_b
0088900E 0442 0002                  		sub.w	#2,d2
00889012                            @goodin_b:
00889012 0240 0EE0                  		and.w	#$EE0,d0
00889016 8042                        		or.w	d2,d0
00889018                            
00889018 3400                       		move.w	d0,d2
0088901A 0242 00E0                   		and.w	#$0E0,d2
0088901E 0803 0006                  		btst	#6,d3
00889022 6700                       		beq.s	@goodin_g
00889024                            ;  		tst.w	d2
00889024                            ;  		beq.s	@goodin_g
00889024 0442 0020                  		sub.w	#$020,d2
00889028                            @goodin_g:
00889028 0240 0E0E                  		and.w	#$E0E,d0
0088902C 8042                        		or.w	d2,d0
0088902E                            
0088902E 3400                       		move.w	d0,d2
00889030 0242 0E00                   		and.w	#$E00,d2
00889034 0803 0007                  		btst	#7,d3
00889038 6700                       		beq.s	@goodin_r
0088903A                            ;  		tst.w	d2
0088903A                            ;  		beq.s	@goodin_r
0088903A 0442 0200                  		sub.w	#$200,d2
0088903E                            @goodin_r:
0088903E 0240 00EE                  		and.w	#$0EE,d0
00889042 8042                        		or.w	d2,d0
00889044                            
00889044 3AC0                        		move.w	d0,(a5)+
00889046 51CC FFB8                  		dbf	d4,@next_in
0088904A                            		
0088904A 102E 0001                  		move.b	palFd_delay(a6),d0
0088904E 0240 001F                  		and.w	#$1F,d0
00889052 0440 0001                  		sub.w	#1,d0
00889056 6A00                       		bpl.s	@fadeSet_Return_2
00889058                            		
00889058                            ; 		sub.w	#1,d5
00889058                            ; 		cmp.b	palFd_num(a6),d5
00889058                            ; 		bne.s	fadeSet_Return
00889058 4296                       		clr.l	(a6)
0088905A 42AE 0004                  		clr.l	4(a6)
0088905E                            		
0088905E                            @fadeSet_Return_2:
0088905E 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
00889064 812E 0001                  		or.b	d0,palFd_delay(a6)
00889068 4E75                       		rts
0088906A                            		
0088906A                            ; --------------------------------------------
0088906A                            ; PalFade_Set
0088906A                            ; --------------------------------------------
0088906A                            
0088906A                            PalFade_Set:
0088906A 4E75                       		rts
0088906C                            		
0088906C                            ; ====================================================================
0088906C                            ; ---------------------------------------------
0088906C                            ; DMA
0088906C                            ; ---------------------------------------------
0088906C                            
0088906C                            ; ROM data
0088906C                            ; Size
0088906C                            ; VRAM Destiantion
0088906C                            
0088906C                            DMA_Read:
0088906C 4DF9 FFFF EB10              		lea	(RAM_DMA_Buffer),a6
00889072                            ;  		move.w	#64,d3
00889072 381E                         		move.w	(a6)+,d4
00889074                            ;   		sub.w	d4,d3
00889074                            ;   		bmi	@FinishList
00889074 4A44                         		tst.w	d4
00889076 6700 0000                    		beq	@FinishList
0088907A 0444 0001                    		sub.w	#1,d4
0088907E                            ; 		dma 	on
0088907E                            @NextEntry:
0088907E 2A1E                       		move.l	(a6)+,d5
00889080 0285 000F FFFF             		and.l	#$FFFFF,d5
00889086                             		
00889086 E28D                         		lsr.l	#1,d5
00889088 2C3C 9600 9500              		move.l	#$96009500,d6
0088908E 1C05                        		move.b	d5,d6
00889090 E08D                        		lsr.l	#8,d5
00889092 4846                        		swap	d6
00889094 1C05                        		move.b	d5,d6
00889096 23C6 00C0 0004              		move.l	d6,(vdp_ctrl)
0088909C 3C3C 9700                   		move.w	#$9700,d6
008890A0 E08D                        		lsr.l	#8,d5
008890A2 1C05                        		move.b	d5,d6
008890A4 33C6 00C0 0004              		move.w	d6,(vdp_ctrl)
008890AA                             		
008890AA 2C3C 9400 9300               		move.l	#$94009300,d6		;Size
008890B0 3A1E                         		move.w	(a6)+,d5
008890B2 1C05                         		move.b	d5,d6
008890B4 4846                        		swap	d6
008890B6 E04D                         		lsr.w	#8,d5
008890B8 1C05                         		move.b	d5,d6
008890BA 23C6 00C0 0004               		move.l	d6,(vdp_ctrl)
008890C0                             		
008890C0 3A1E                        		move.w	(a6)+,d5
008890C2 EB4D                        		lsl.w	#5,d5
008890C4 3C05                        		move.w	d5,d6
008890C6 0245 3FFF                   		and.w	#$3FFF,d5
008890CA 0045 4000                   		or.w	#$4000,d5
008890CE E04E                        		lsr.w	#8,d6
008890D0 EC4E                        		lsr.w	#6,d6
008890D2 0246 0003                   		and.w	#%11,d6
008890D6 0046 0080                   		or.w	#$80,d6
008890DA 3F06                        		move.w	d6,-(sp)
008890DC 3F05                        		move.w	d5,-(sp)	
008890DE 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
008890E4 33FC 0100 00A1 1100         		move.w	#$100,($A11100).l
008890EC                            @hold_on:
008890EC 0839 0000 00A1 1100         		btst	#0,($A11100).l
008890F4 66F6                         		bne.s	@hold_on
008890F6                              		
008890F6 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
008890FC 33FC 0000 00A1 1100          		move.w	#0,($A11100).l
00889104                               		
00889104 51CC FF78                   		dbf	d4,@NextEntry
00889108                             		
00889108                            @FinishList:
00889108 4279 FFFF EB10             		clr.w	(RAM_DMA_Buffer)
0088910E 4E75                        		rts
00889110                            
00889110                            @ResetAllList:
00889110 4E75                       		rts
00889112                            		
00889112                            ; -----------------------------------
00889112                            ; Set new entry to the list
00889112                            ; 
00889112                            ; Input:
00889112                            ; d0 - ROM Address
00889112                            ; d1 - Size
00889112                            ; d2 - VRAM
00889112                            ; 
00889112                            ; Uses:
00889112                            ; a2/d3
00889112                            ; -----------------------------------
00889112                            
00889112                            DMA_Set:
00889112 45F9 FFFF EB10             		lea	(RAM_DMA_Buffer),a2
00889118 0C52 0040                  		cmp.w	#64,(a2)
0088911C 6C00                       		bge.s	@Return
0088911E 3612                       		move.w	(a2),d3
00889120 E74B                       		lsl.w	#3,d3			;Size: 8
00889122 D4C3                       		adda 	d3,a2
00889124 D4FC 0002                  		adda	#2,a2
00889128                            		
00889128 24C0                       		move.l	d0,(a2)+		;ROM Address
0088912A 34C1                       		move.w	d1,(a2)+
0088912C 34C2                       		move.w	d2,(a2)+
0088912E 0679 0001 FFFF EB10        		add.w	#1,(RAM_DMA_Buffer)
00889136                            @Return:
00889136 4E75                       		rts
00889138                            		
00889138                            ; ====================================================================
00889138                            ; ---------------------------------------------
00889138                            ; Sprites system
00889138                            ; ---------------------------------------------
00889138                            
00889138                            ; ---------------------------------------------
00889138                            ; Sprites_Reset
00889138                            ; ---------------------------------------------
00889138                            
00889138                            Sprites_Clear:
00889138                            ;  		lea	(RAM_Sprites),a6
00889138                            ;  		move.w	#$4F,d6
00889138                            ; @clrit:
00889138 42B9 FFFF E340               		clr.l	(RAM_Sprites)
0088913E 42B9 FFFF E344               		clr.l	(RAM_Sprites+4)
00889144 4E75                       		rts
00889146                            		
00889146                            ; ---------------------------------------------
00889146                            ; Sprites_Reset
00889146                            ; ---------------------------------------------
00889146                            
00889146                            Sprites_Reset:
00889146 4DF9 FFFF E5C0             		lea	(RAM_SprControl),a6
0088914C 2A6E 0000                  		movea.l	sprite_free(a6),a5
00889150 BAFC E340                  		cmpa	#((RAM_Sprites)&$FFFF),a5
00889154 6D00                       		blt.s	@Full
00889156                            @NextEntry:
00889156 BAFC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
0088915A 6E00                        		bgt.s	@Full
0088915C 429D                        		clr.l	(a5)+
0088915E 429D                         		clr.l	(a5)+
00889160 BAFC E5C0                    		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
00889164 6DF0                         		blt.s	@NextEntry
00889166                            @Full:
00889166 2D7C FFFF E340 0000        		move.l	#RAM_Sprites,sprite_free(a6)
0088916E 3D7C 0001 0004             		move.w	#1,sprite_link(a6)
00889174                            @Return:
00889174 4E75                       		rts
00889174 4E75                       		rts
00889176                            		include	"system/misc.asm"
00889176                            ; ====================================================================
00889176                            ; System
00889176                            ; ====================================================================
00889176                            
00889176                            ; ====================================================================
00889176                            ; -------------------------------------------------
00889176                            ; RAM
00889176                            ; -------------------------------------------------
00889176                            
00889176                                            rsset	RAM_System
00889176 =FFFFDE00                  RAM_HintJumpTo	rs.w	1				; DONT
00889176 =FFFFDE02                  RAM_HintAddr	rs.l	1				; SEPARATE
00889176 =FFFFDE06                  RAM_VIntJumpTo	rs.w	1				; THESE
00889176 =FFFFDE08                  RAM_VintAddr	rs.l	1				; ONES
00889176 =FFFFDE0C                  RAM_VIntRegs	rs.l	16
00889176 =FFFFDE4C                  RAM_ModeReset	rs.w	1
00889176 =FFFFDE4E                  RAM_IntFlags	rs.b	1
00889176 =FFFFDE4F                  RAM_GameMode	rs.b	1
00889176                            
00889176 =FFFFDE50                  sizeof_sys	rs.l	0
00889176                            ; 		inform 0,"system ram: %h",(sizeof_sys-RAM_System)
00889176                             				
00889176                            ; ====================================================================
00889176                            ; -------------------------------------------------
00889176                            ; Variables
00889176                            ; -------------------------------------------------
00889176                            
00889176                            ; --------------------------------------------
00889176                            				
00889176                            ; ====================================================================
00889176                            ; -------------------------------------------------
00889176                            ; Macros
00889176                            ; -------------------------------------------------
00889176                            
00889176                            ; --------------------------------------------
00889176                            
00889176                            ; ====================================================================
00889176                            ; -------------------------------------------------
00889176                            ; Subs
00889176                            ; -------------------------------------------------
00889176                            
00889176                            System_init:
00889176 41F9 FFFF BC00             		lea	(RAM_ModeBuffer),a0
0088917C 303C 0BFF                  		move.w	#($1800/2)-1,d0
00889180                            @clear_buff:
00889180 4258                       		clr.w	(a0)+
00889182 51C8 FFFC                  		dbf	d0,@clear_buff
00889186                            		
00889186 23FC 0000 0000 FFFF DE08   		move.l	#MD_Vint,(RAM_VIntAddr)
00889190 23FC 0000 0000 FFFF DE02   		move.l	#MD_Hint,(RAM_HIntAddr)
0088919A 303C 4EF9                  		move.w	#$4EF9,d0
0088919E 33C0 FFFF DE06              		move.w	d0,(RAM_VIntJumpTo)
008891A4 33C0 FFFF DE00             		move.w	d0,(RAM_HIntJumpTo)
008891AA                            		
008891AA 4239 FFFF DE4F              		clr.b	(RAM_GameMode)
008891B0 4E75                       		rts
008891B2                            		
008891B2                            ; ---------------------------------------------
008891B2                            ; SRAM
008891B2                            ; ---------------------------------------------
008891B2                            
008891B2                            SRAM_Init:
008891B2 13FC 0003 00A1 30F1        		move.b	#%11,($A130F1)		;read+write
008891BA 41F9 0020 0000             		lea	($200000),a0
008891C0 0108 0001                  		movep.w	1(a0),d0
008891C4 0C80 0000 4745             		cmp.l	#"GE",d0
008891CA 6700                       		beq.s	@exit
008891CC 43FA 0000                  		lea	@SramHead(pc),a1
008891D0 7006                       		moveq	#7-1,d0
008891D2                            @header:
008891D2 1019                       		move.b	(a1)+,d0
008891D4 1140 0001                  		move.b	d0,1(a0)
008891D8 D0FC 0002                  		adda	#2,a0
008891DC 51C8 FFF4                  		dbf	d0,@header
008891E0                            @exit:
008891E0 13FC 0000 00A1 30F1        		move.b	#0,($A130F1)
008891E8 4E75                       		rts
008891EA                            
008891EA                            ; ---------------------------------------------
008891EA                            
008891EA 4745 4E59 5341 5645 00     @SramHead:	dc.b "GENYSAVE",0
008891F4 00                         		even
008891F4                            		
008891F4                            ; ---------------------------------------------
008891F4                            ; CalcSine
008891F4                            ;
008891F4                            ; Input:
008891F4                            ; d0 | WORD
008891F4                            ;
008891F4                            ; Output:
008891F4                            ; d0 | WORD
008891F4                            ; d1 | WORD
008891F4                            ; ---------------------------------------------
008891F4                            
008891F4                            CalcSine:
008891F4 0240 00FF                  		and.w	#$FF,d0
008891F8 D040                       		add.w	d0,d0
008891FA 0640 0080                  		add.w	#$80,d0
008891FE 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00889202 0440 0080                  		sub.w	#$80,d0
00889206 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
0088920A 4E75                       		rts	
0088920C                            
0088920C                            Sine_Data:
0088920C 0000 0006 000C 0012 0019+  		dc.w 0,	6, $C, $12, $19, $1F, $25, $2B,	$31, $38, $3E
00889222 0044 004A 0050 0056 005C+  		dc.w $44, $4A, $50, $56, $5C, $61, $67,	$6D, $73, $78
00889236 007E 0083 0088 008E 0093+  		dc.w $7E, $83, $88, $8E, $93, $98, $9D,	$A2, $A7, $AB
0088924A 00B0 00B5 00B9 00BD 00C1+  		dc.w $B0, $B5, $B9, $BD, $C1, $C5, $C9,	$CD, $D1, $D4
0088925E 00D8 00DB 00DE 00E1 00E4+  		dc.w $D8, $DB, $DE, $E1, $E4, $E7, $EA,	$EC, $EE, $F1
00889272 00F3 00F4 00F6 00F8 00F9+  		dc.w $F3, $F4, $F6, $F8, $F9, $FB, $FC,	$FD, $FE, $FE
00889286 00FF 00FF 00FF 0100 00FF+  		dc.w $FF, $FF, $FF, $100, $FF, $FF, $FF, $FE, $FE, $FD
0088929A 00FC 00FB 00F9 00F8 00F6+  		dc.w $FC, $FB, $F9, $F8, $F6, $F4, $F3,	$F1, $EE, $EC
008892AE 00EA 00E7 00E4 00E1 00DE+  		dc.w $EA, $E7, $E4, $E1, $DE, $DB, $D8,	$D4, $D1, $CD
008892C2 00C9 00C5 00C1 00BD 00B9+  		dc.w $C9, $C5, $C1, $BD, $B9, $B5, $B0,	$AB, $A7, $A2
008892D6 009D 0098 0093 008E 0088+  		dc.w $9D, $98, $93, $8E, $88, $83, $7E,	$78, $73, $6D
008892EA 0067 0061 005C 0056 0050+  		dc.w $67, $61, $5C, $56, $50, $4A, $44,	$3E, $38, $31
008892FE 002B 0025 001F 0019 0012+  		dc.w $2B, $25, $1F, $19, $12, $C, 6, 0,	-6, -$C, -$12
00889314 FFE7 FFE1 FFDB FFD5 FFCF+  		dc.w -$19, -$1F, -$25, -$2B, -$31, -$38, -$3E, -$44, -$4A
00889326 FFB0 FFAA FFA4 FF9F FF99+  		dc.w -$50, -$56, -$5C, -$61, -$67, -$6D, -$75, -$78, -$7E
00889338 FF7D FF78 FF72 FF6D FF68+  		dc.w -$83, -$88, -$8E, -$93, -$98, -$9D, -$A2, -$A7, -$AB
0088934A FF50 FF4B FF47 FF43 FF3F+  		dc.w -$B0, -$B5, -$B9, -$BD, -$C1, -$C5, -$C9, -$CD, -$D1
0088935C FF2C FF28 FF25 FF22 FF1F+  		dc.w -$D4, -$D8, -$DB, -$DE, -$E1, -$E4, -$E7, -$EA, -$EC
0088936E FF12 FF0F FF0D FF0C FF0A+  		dc.w -$EE, -$F1, -$F3, -$F4, -$F6, -$F8, -$F9, -$FB, -$FC
00889380 FF03 FF02 FF02 FF01 FF01+  		dc.w -$FD, -$FE, -$FE, -$FF, -$FF, -$FF, -$100,	-$FF, -$FF
00889392 FF01 FF02 FF02 FF03 FF04+  		dc.w -$FF, -$FE, -$FE, -$FD, -$FC, -$FB, -$F9, -$F8, -$F6
008893A4 FF0C FF0D FF0F FF12 FF14+  		dc.w -$F4, -$F3, -$F1, -$EE, -$EC, -$EA, -$E7, -$E4, -$E1
008893B6 FF22 FF25 FF28 FF2C FF2F+  		dc.w -$DE, -$DB, -$D8, -$D4, -$D1, -$CD, -$C9, -$C5, -$C1
008893C8 FF43 FF47 FF4B FF50 FF55+  		dc.w -$BD, -$B9, -$B5, -$B0, -$AB, -$A7, -$A2, -$9D, -$98
008893DA FF6D FF72 FF78 FF7D FF82+  		dc.w -$93, -$8E, -$88, -$83, -$7E, -$78, -$75, -$6D, -$67
008893EC FF9F FFA4 FFAA FFB0 FFB6+  		dc.w -$61, -$5C, -$56, -$50, -$4A, -$44, -$3E, -$38, -$31
008893FE FFD5 FFDB FFE1 FFE7 FFEE+  		dc.w -$2B, -$25, -$1F, -$19, -$12, -$C,	-6, 0, 6, $C, $12
00889414 0019 001F 0025 002B 0031+  		dc.w $19, $1F, $25, $2B, $31, $38, $3E,	$44, $4A, $50
00889428 0056 005C 0061 0067 006D+  		dc.w $56, $5C, $61, $67, $6D, $73, $78,	$7E, $83, $88
0088943C 008E 0093 0098 009D 00A2+  		dc.w $8E, $93, $98, $9D, $A2, $A7, $AB,	$B0, $B5, $B9
00889450 00BD 00C1 00C5 00C9 00CD+  		dc.w $BD, $C1, $C5, $C9, $CD, $D1, $D4,	$D8, $DB, $DE
00889464 00E1 00E4 00E7 00EA 00EC+  		dc.w $E1, $E4, $E7, $EA, $EC, $EE, $F1,	$F3, $F4, $F6
00889478 00F8 00F9 00FB 00FC 00FD+  		dc.w $F8, $F9, $FB, $FC, $FD, $FE, $FE,	$FF, $FF, $FF
0088948C                            		even
0088948C                            	
0088948C                            ; ---------------------------------------------
0088948C                            ; HexToByte_Byte
0088948C                            ; 
0088948C                            ; Uses:
0088948C                            ; d4-d5
0088948C                            ; ---------------------------------------------
0088948C                            
0088948C                            ; HexToDec_Byte:
0088948C                            ; 		move.w	d0,d4
0088948C                            ; 		and.w	#$FF,d4
0088948C                            ; 		clr.w	d0
0088948C                            ; @hexloop:
0088948C                            ; 		sub.w	#1,d4
0088948C                            ; 		bcs.s	@finish
0088948C                            ; 		add.w	#1,d0
0088948C                            ; 		move.w	d0,d5
0088948C                            ;  		and.w	#$F,d5
0088948C                            ; 		cmp.w	#$A,d5
0088948C                            ; 		bcs.s	@lowbyte1
0088948C                            ; 		add.w	#6,d0
0088948C                            ; @lowbyte1:
0088948C                            ; 		move.w	d0,d5
0088948C                            ;  		and.w	#$F0,d5
0088948C                            ; 		cmp.w	#$A0,d5
0088948C                            ; 		bcs.s	@lowbyte2
0088948C                            ; 		add.w	#$60,d0
0088948C                            ; @lowbyte2:
0088948C                            ; 		bra.s	@hexloop
0088948C                            ; @finish:
0088948C                            ; 		rts
0088948C                            
0088948C                            ; ---------------------------
0088948C                            ; Convert HEX to DEC
0088948C                            ; MAX: 65535 ($FFFF)
0088948C                            ; 
0088948C                            ; input:
0088948C                            ; d2
0088948C                            ; 
0088948C                            ; output:
0088948C                            ; d2
0088948C                            ; Uses:
0088948C                            ; d4 WORD (swapped)
0088948C                            ; d5 LONG
0088948C                            ; ---------------------------
0088948C                            
0088948C                            HexToDec:
0088948C 7A00                       		moveq	#0,d5
0088948E 4844                       		swap	d4
00889490                            
00889490 4842                       		swap	d2
00889492 3802                       		move.w	d2,d4
00889494 4842                       		swap	d2
00889496 4A44                       		tst.w	d4
00889498 6700 0000                  		beq	@jumpy
0088949C                            		
0088949C 3802                       		move.w	d2,d4
0088949E E04C                       		lsr.w	#8,d4
008894A0 0244 000F                  		and.w	#$F,d4
008894A4 D844                       		add.w	d4,d4
008894A6 3A3B 4000                  		move.w	@grab256(pc,d4.w),d5
008894AA 3802                       		move.w	d2,d4
008894AC E04C                       		lsr.w	#8,d4
008894AE E44C                       		lsr.w	#2,d4
008894B0 0244 003C                  		and.w	#%111100,d4
008894B4 DABB 4000                  		add.l	@grab4096(pc,d4.w),d5
008894B8 6100 0000                  		bsr	@fixhexdec
008894BC 4842                       		swap	d2
008894BE 3802                       		move.w	d2,d4
008894C0 4842                       		swap	d2
008894C2 E54C                       		lsl.w	#2,d4
008894C4 0244 003C                  		and.w	#%111100,d4
008894C8 DABB 4000                  		add.l	@grab65536(pc,d4.w),d5
008894CC 6100 0000                  		bsr	@fixhexdec
008894D0 6000 0000                  		bra	@jumpy
008894D4                            ; --------------------------------
008894D4 0000                       @grab256:	dc.w 0
008894D6 0256                       		dc.w $256
008894D8 0512                       		dc.w $512
008894DA 0768                       		dc.w $768
008894DC 1024                       		dc.w $1024
008894DE 1280                       		dc.w $1280
008894E0 1536                       		dc.w $1536
008894E2 1792                       		dc.w $1792
008894E4 2048                       		dc.w $2048
008894E6 2304                       		dc.w $2304
008894E8 2560                       		dc.w $2560
008894EA 2816                       		dc.w $2816
008894EC 3072                       		dc.w $3072
008894EE 3328                       		dc.w $3328
008894F0 3584                       		dc.w $3584
008894F2 3840                       		dc.w $3840
008894F4                            		even
008894F4 0000 0000                  @grab4096:	dc.l 0
008894F8 0000 4096                  		dc.l $4096
008894FC 0000 8192                  		dc.l $8192
00889500 0001 2288                  		dc.l $12288
00889504 0001 6384                  		dc.l $16384
00889508 0002 0480                  		dc.l $20480
0088950C 0002 4576                  		dc.l $24576
00889510 0002 8672                  		dc.l $28672
00889514 0003 2768                  		dc.l $32768
00889518 0003 6864                  		dc.l $36864
0088951C 0004 0960                  		dc.l $40960
00889520 0004 5056                  		dc.l $45056
00889524 0004 9152                  		dc.l $49152
00889528 0005 3248                  		dc.l $53248
0088952C 0005 7344                  		dc.l $57344
00889530 0006 1440                  		dc.l $61440
00889534                            		even
00889534 0000 0000                  @grab65536: 	dc.l 0
00889538 0006 5536                  		dc.l $65536
0088953C 0013 1072                  		dc.l $131072
00889540 0019 6608                  		dc.l $196608
00889544 0026 2144                  		dc.l $262144
00889548 0032 7680                  		dc.l $327680
0088954C 0039 3216                  		dc.l $393216
00889550 0045 8752                  		dc.l $458752
00889554 0052 4288                  		dc.l $524288
00889558 0058 9824                  		dc.l $589824
0088955C 0065 5360                  		dc.l $655360
00889560 0072 0896                  		dc.l $720896
00889564 0078 6432                  		dc.l $786432
00889568 0085 1968                  		dc.l $851968
0088956C 0091 7504                  		dc.l $917504
00889570 0098 3040                  		dc.l $983040
00889574                            		even
00889574                            ; --------------------------------
00889574                            
00889574                            @jumpy:
00889574 0802 0007                  		btst	#7,d2
00889578 6700                       		beq.s	@not80
0088957A 0685 0000 0128             		add.l	#$128,d5
00889580 6100 0000                  		bsr	@fixhexdec
00889584                            @not80:
00889584 0282 0000 007F             		and.l	#$7F,d2
0088958A 4A82                       		tst.l	d2
0088958C 6700                       		beq.s	@lowrend
0088958E 0442 0001                  		sub.w	#1,d2
00889592                            @lelno:
00889592 0685 0000 0001             		add.l	#1,d5
00889598 6100 0000                  		bsr	@fixhexdec
0088959C 51CA FFF4                  		dbf	d2,@lelno
008895A0                            @lowrend:
008895A0 2405                       		move.l	d5,d2
008895A2 4844                       		swap	d4
008895A4 4E75                       		rts
008895A6                            
008895A6                            ; --------------------------------
008895A6                            
008895A6                            @fixhexdec:
008895A6 3805                       		move.w	d5,d4
008895A8 0244 000F                  		and.w	#$F,d4
008895AC 0C44 000A                  		cmp.w	#$A,d4
008895B0 6D00                       		blt.s	@lowr1
008895B2 0685 0000 0006             		add.l	#6,d5
008895B8                            @lowr1:
008895B8 3805                       		move.w	d5,d4
008895BA 0244 00F0                  		and.w	#$F0,d4
008895BE 0C44 00A0                  		cmp.w	#$A0,d4
008895C2 6D00                       		blt.s	@lowr2
008895C4 0685 0000 0060             		add.l	#$60,d5
008895CA                            @lowr2:
008895CA 3805                       		move.w	d5,d4
008895CC 0244 0F00                  		and.w	#$F00,d4
008895D0 0C44 0A00                  		cmp.w	#$A00,d4
008895D4 6D00                       		blt.s	@lowr3
008895D6 0685 0000 0600             		add.l	#$600,d5
008895DC                            @lowr3:
008895DC 3805                       		move.w	d5,d4
008895DE 0244 F000                  		and.w	#$F000,d4
008895E2 0C44 A000                  		cmp.w	#$A000,d4
008895E6 6500                       		bcs.s	@lowr4
008895E8 0685 0000 6000             		add.l	#$6000,d5
008895EE                            @lowr4:
008895EE 4845                       		swap	d5
008895F0 3805                       		move.w	d5,d4
008895F2 0244 000F                  		and.w	#$F,d4
008895F6 0C44 000A                  		cmp.w	#$A,d4
008895FA 6500                       		bcs.s	@lowr5
008895FC 0685 0000 0006             		add.l	#$6,d5
00889602                            @lowr5:
00889602 3805                       		move.w	d5,d4
00889604 0244 00F0                  		and.w	#$F0,d4
00889608 0C44 00A0                  		cmp.w	#$A0,d4
0088960C 6500                       		bcs.s	@lowr6
0088960E 0685 0000 0060             		add.l	#$60,d5
00889614                            @lowr6:
00889614 3805                       		move.w	d5,d4
00889616 0244 0F00                  		and.w	#$F00,d4
0088961A 0C44 0A00                  		cmp.w	#$A00,d4
0088961E 6500                       		bcs.s	@lowr7
00889620 0685 0000 0600             		add.l	#$600,d5
00889626                            @lowr7:
00889626 4845                       		swap	d5
00889628 4E75                       		rts
00889628 4E75                       		rts
0088962A                            		include	"system/input/code.asm"
0088962A                            ; ====================================================================
0088962A                            ; Input
0088962A                            ; ====================================================================
0088962A                            
0088962A                            		include	"system/input/map.asm"
0088962A                            ; ====================================================================
0088962A                            ; Input
0088962A                            ; ====================================================================
0088962A                            
0088962A                            ; ====================================================================
0088962A                            ; -------------------------------------------------
0088962A                            ; Variables
0088962A                            ; -------------------------------------------------
0088962A                            
0088962A =00000001                  JoyUp		equ	%00000001
0088962A =00000002                  JoyDown		equ	%00000010
0088962A =00000004                  JoyLeft		equ	%00000100
0088962A =00000008                  JoyRight	equ	%00001000
0088962A =00000010                  JoyB		equ	%00010000
0088962A =00000020                  JoyC		equ	%00100000
0088962A =00000040                  JoyA		equ	%01000000
0088962A =00000080                  JoyStart	equ	%10000000
0088962A =00000000                  bitJoyUp	equ	0
0088962A =00000001                  bitJoyDown	equ	1
0088962A =00000002                  bitJoyLeft	equ	2
0088962A =00000003                  bitJoyRight	equ	3
0088962A =00000004                  bitJoyB		equ	4
0088962A =00000005                  bitJoyC		equ	5
0088962A =00000006                  bitJoyA		equ	6
0088962A =00000007                  bitJoyStart	equ	7
0088962A                            
0088962A =00000001                  JoyZ		equ	%00000001
0088962A =00000002                  JoyY		equ	%00000010
0088962A =00000004                  JoyX		equ	%00000100
0088962A =00000008                  JoyMode		equ	%00001000
0088962A =00000000                  bitJoyZ		equ	0
0088962A =00000001                  bitJoyY		equ	1
0088962A =00000002                  bitJoyX		equ	2
0088962A =00000003                  bitJoyMode	equ	3
0088962A                            
0088962A                            ; --------------------------------------------
0088962A                            
0088962A                            		rsreset
0088962A =00000000                  CtrlID		rs.b	1
0088962A =00000001                  PadType		rs.b	1		;only TRUE $01 or FALSE $00
0088962A =00000002                  ExOnHold	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
0088962A =00000003                  OnHold		rs.b	1		;SACBRLDU
0088962A =00000004                  ExOnPress	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
0088962A =00000005                  OnPress		rs.b	1		;SACBRLDU
0088962A =00000006                  MouseX		rs.w	1		;TODO
0088962A =00000008                  MouseY		rs.w	1
0088962A =0000000A                  sizeof_control	rs.l	0
0088962A                            
0088962A                            ; ====================================================================
0088962A                            ; -------------------------------------------------
0088962A                            ; RAM
0088962A                            ; -------------------------------------------------
0088962A                            
0088962A                                            rsset	RAM_Input
0088962A =FFFFDE80                  RAM_Control_1	rs.b sizeof_control
0088962A =FFFFDE8A                  RAM_Control_2	rs.b sizeof_control
0088962A                            
0088962A                            ; --------------------------------------------
0088962A                            
0088962A =FFFFDE94                  sizeof_input	rs.l	0
0088962A                            ; 		inform 0,"input ram: %h",(sizeof_input-RAM_Input)
0088962A                             				
0088962A                            ; ====================================================================
0088962A                            ; -------------------------------------------------
0088962A                            ; Macros
0088962A                            ; -------------------------------------------------
0088962A                            
0088962A                            ; --------------------------------------------
0088962A                            ; --------------------------------------------
0088962A                            
0088962A                            ; ====================================================================
0088962A                            ; -------------------------------------------------
0088962A                            ; Read input
0088962A                            ; -------------------------------------------------
0088962A                            
0088962A                            Input_Read:
0088962A 4BF9 FFFF DE80             		lea	(RAM_Control_1),a5
00889630 7000                       		moveq	#0,d0
00889632 6100                       		bsr.s	@DoIt
00889634 4BF9 FFFF DE8A             		lea	(RAM_Control_2),a5
0088963A 7001                       		moveq	#1,d0
0088963C 6100                       		bsr.s	@DoIt
0088963E 4E75                       		rts
00889640                            
00889640                            ; ---------------------------------------
00889640                            
00889640                            @DoIt:
00889640 4DF9 00A1 0003             		lea	($A10003).l,a6
00889646 E348                       		lsl.w	#1,d0
00889648 DCC0                       		add.w	d0,a6			;Add result to port
0088964A 6100 0000                  		bsr	@FindJoypad
0088964E 1A80                       		move.b	d0,(a5)
00889650                            
00889650 0C00 000F                                  cmp.b	#$F,d0
00889654 6700                                       beq.s	@End
00889656 0C00 000D                  		cmp.b	#$D,d0
0088965A 6700                                       beq.s	@Controller
0088965C 0C00 0007                    		cmp.b	#7,d0			;Multitap
00889660 6700                                       beq.s	@End
00889662 0C00 0003                  		cmp.b	#3,d0
00889666 6700 0000                                  beq	@Mouse
0088966A                            
0088966A                            @End:
0088966A 4E75                       		rts
0088966C                            
0088966C                            ; ------------------------------------
0088966C                            ; Controller
0088966C                            ; ------------------------------------
0088966C                            
0088966C                            @Controller:
0088966C 1D7C 0040 0006             		move.b	#$40,6(a6)
00889672 4E71                       		nop
00889674 4E71                       		nop
00889676 1CBC 0040                  		move.b	#$40,(a6)		; Show CB|RLDU
0088967A 4E71                       		nop
0088967C 4E71                       		nop
0088967E 1CBC 0000                  		move.b	#$00,(a6)		; Show SA|RLDU
00889682 4E71                       		nop
00889684 4E71                       		nop
00889686 1CBC 0040                  		move.b	#$40,(a6)		; Show CB|RLDU
0088968A 4E71                       		nop
0088968C 4E71                       		nop
0088968E 1CBC 0000                  		move.b	#$00,(a6)		; Show SA|RLDU
00889692 4E71                       		nop
00889694 4E71                       		nop
00889696 1CBC 0040                  		move.b	#$40,(a6)		; "Okay OKAY!, I have more buttons"
0088969A 4E71                       		nop
0088969C 4E71                       		nop
0088969E 1016                       		move.b	(a6),d0
008896A0 1CBC 0000                   		move.b	#$00,(a6)		; "Heres my ID"
008896A4 4E71                         		nop
008896A6 4E71                         		nop
008896A8 1216                        		move.b	(a6),d1
008896AA 1CBC 0040                   		move.b	#$40,(a6)
008896AE 4E71                        		nop
008896B0 4E71                        		nop
008896B2                            		
008896B2 142D 0001                  		move.b	PadType(a5),d2
008896B6 0882 0000                  		bclr	#0,d2
008896BA 0241 000F                  		and.w	#$F,d1
008896BE 0C41 000F                  		cmp.w	#$F,d1
008896C2 6600                       		bne.s	@Original
008896C4                            		
008896C4 08C2 0000                  		bset	#0,d2
008896C8 7200                        		moveq	#0,d1
008896CA 122D 0002                   		move.b	ExOnHold(a5),d1
008896CE 4601                       		not.b	d1
008896D0 B101                        		eor.b	d0,d1
008896D2 C200                        		and.b	d0,d1
008896D4 0241 000F                   		and.w	#$F,d1
008896D8 1B41 0004                   		move.b	d1,ExOnPress(a5)
008896DC 4600                        		not.b	d0
008896DE 0240 000F                   		and.w	#$F,d0
008896E2 1B40 0002                   		move.b	d0,ExOnHold(a5)
008896E6                             		
008896E6                            @Original:	
008896E6 1B42 0001                  		move.b	d2,PadType(a5)
008896EA                            	
008896EA 1CBC 0000                  		move.b	#0,(a6)
008896EE 4E71                       		nop
008896F0 4E71                       		nop
008896F2 1016                       		move.b	(a6),d0
008896F4 E508                       		lsl.b	#2,d0
008896F6 0200 00C0                  		and.b	#$C0,d0	
008896FA 1CBC 0040                  		move.b	#$40,(a6)
008896FE 4E71                       		nop
00889700 4E71                       		nop
00889702 1216                       		move.b	(a6),d1
00889704                            ; 		move.w	#0,($A11100)
00889704 0201 003F                  		and.b	#$3F,d1
00889708 8001                       		or.b	d1,d0
0088970A 4600                       		not.b	d0
0088970C 122D 0003                  		move.b	OnHold(a5),d1
00889710 B101                       		eor.b	d0,d1
00889712 1B40 0003                  		move.b	d0,OnHold(a5)
00889716 C200                       		and.b	d0,d1
00889718 1B41 0005                  		move.b	d1,OnPress(a5)
0088971C 4E75                       		rts
0088971E                            
0088971E                            ; ; ------------------------------------
0088971E                            ; ; Multitap
0088971E                            ; ; ------------------------------------
0088971E                            ; 
0088971E                            ; @Multitap:
0088971E                            ; 		bra	@End
0088971E                            
0088971E                            ; ------------------------------------
0088971E                            ; Sega Mega Mouse
0088971E                            ;
0088971E                            ; in: d1 - port number
0088971E                            ; out: d0 - status
0088971E                            ;      d2
0088971E                            ; ------------------------------------
0088971E                            
0088971E                            @Mouse:
0088971E 7200                       		moveq	#0,d1
00889720 6100 0000                  		bsr	@ReadIt
00889724                            		
00889724 2002                       		move.l	d2,d0
00889726 4840                       		swap	d0
00889728 0240 00FF                  		and.w	#$FF,d0
0088972C 122D 0003                  		move.b	OnHold(a5),d1
00889730 B101                       		eor.b	d0,d1
00889732 1B40 0003                  		move.b	d0,OnHold(a5)
00889736 C200                        		and.b	d0,d1
00889738 1B41 0005                  		move.b	d1,OnPress(a5)
0088973C                            		
0088973C                            		;TODO
0088973C 3002                       		move.w	d2,d0
0088973E 0240 00FF                  		and.w	#$FF,d0
00889742 4880                       		ext.w	d0
00889744 4440                       		neg.w	d0
00889746 3B40 0008                   		move.w	d0,MouseY(a5)
0088974A                             		
0088974A E04A                        		lsr.w	#8,d2
0088974C 0242 00FF                   		and.w	#$FF,d2
00889750 4882                       		ext.w	d2
00889752 3B42 0006                   		move.w	d2,MouseX(a5)
00889756 6000 FF12                   		bra	@End
0088975A                            
0088975A                            ; ------------------------------------
0088975A                            
0088975A                            @ReadIt:
0088975A                            ; 		movem.l	d1/d3/d4/d7/a6,-(sp)
0088975A                            
0088975A 7000                       		moveq	#0,d0			;Error flag
0088975C 0C41 0002                  		cmp.w	#2,d1			;Control ID < 2?
00889760 6200 0000                  		bhi	@Error
00889764 D241                       		add.w	d1,d1
00889766                            	;	lea	($A10003),a6
00889766                            @Connect:
00889766 1D7C 0060 0006             		move.b	#$60,6(a6)
0088976C 4E71                                       nop
0088976E 4E71                                       nop
00889770 1CBC 0060                                  move.b	#$60,(a6)		;TH,TR=11 (END DATA)
00889774 7400                                       moveq	#0,d2
00889776 7600                                       moveq	#0,d3
00889778                            @NotReady:
00889778 0816 0004                   		btst	#4,(a6)
0088977C 67FA                        		beq.s	@NotReady
0088977E 1816                        		move.b	(a6),d4			;d4.b = ? 1 1 1 | 0 0 0
00889780 0204 000F                   		and.b	#$F,d4
00889784 4A04                        		tst.b	d4
00889786 6600 0000                   		bne	@Error			;No mouse
0088978A 1CBC 0020                   		move.b	#$20,(a6)		;Select t1 m1 1 1
0088978E 3E3C 00FE                   		move.w	#$FE,d7
00889792                            @lp1:
00889792 0816 0004                  		btst.b	#4,(a6)
00889796 6600                       		bne.s	@Mouse_10
00889798 51CF FFF8                  		dbra	d7,@lp1
0088979C 6000 0000                  		bra	@Error
008897A0                            		
008897A0                            @Mouse_10:
008897A0 1016                       		move.b	(a6),d0			;d0 = xxxx|xxxx|xxxx|t1 m1 1 1
008897A2 E148                       		lsl.w	#8,d0			;d0 = xxxx|t1 m1 1 1|0000|0000
008897A4 1CBC 0000                  		move.b	#0,(a6)
008897A8 4E71                       		nop
008897AA                            @lp2:
008897AA 0816 0004                  		btst	#4,(a6)
008897AE 6700                       		beq.s	@Mouse_20
008897B0 51CF FFF8                  		dbra	d7,@lp2
008897B4 6000 0000                  		bra	@Error
008897B8                            		
008897B8                            @Mouse_20:
008897B8 1616                       		move.b	(a6),d3
008897BA 1CBC 0020                  		move.b	#$20,(a6)
008897BE E14B                       		lsl.w	#8,d3
008897C0                            @lp3:
008897C0 0816 0004                  		btst	#4,(a6)
008897C4 6600                       		bne.s	@Mouse_30
008897C6 51CF FFF8                  		dbra	d7,@lp3
008897CA 6000 0000                  		bra	@Error
008897CE                            		
008897CE                            @Mouse_30:
008897CE 1616                       		move.b	(a6),d3
008897D0 E90B                       		lsl.b	#4,d3
008897D2 E84B                       		lsr.w	#4,d3
008897D4 1CBC 0000                  		move.b	#0,(a6)
008897D8 8043                       		or.w	d3,d0
008897DA 7600                       		moveq	#0,d3
008897DC                            @lp4:
008897DC 0816 0004                  		btst	#4,(a6)
008897E0 6700                                       beq.s	@Mouse_40
008897E2 51CF FFF8                                  dbra	d7,@lp4
008897E6 6000 0000                                  bra	@Error
008897EA                            
008897EA                            @Mouse_40:
008897EA 1416                       		move.b	(a6),d2
008897EC 1CBC 0020                  		move.b	#$20,(a6)
008897F0 E14A                       		lsl.w	#8,d2
008897F2                            @lp5:
008897F2 0816 0004                  		btst	#4,(a6)
008897F6 6600                       		bne.s	@Mouse_50
008897F8 51CF FFF8                  		dbra	d7,@lp5
008897FC 6000 0000                  		bra	@Error
00889800                            		
00889800                            @Mouse_50:
00889800 1416                       		move.b	(a6),d2
00889802 1CBC 0000                  		move.b	#0,(a6)
00889806 E90A                       		lsl.b	#4,d2
00889808 E94A                       		lsl.w	#4,d2
0088980A                            @lp6:
0088980A 0816 0004                  		btst	#4,(a6)
0088980E 6700                       		beq.s	@Mouse_60
00889810 51CF FFF8                  		dbra	d7,@lp6
00889814 6000 0000                  		bra	@Error
00889818                            
00889818                            @Mouse_60:
00889818 1416                       		move.b	(a6),d2
0088981A 1CBC 0020                  		move.b	#$20,(a6)
0088981E E90A                       		lsl.b	#4,d2
00889820 E98A                       		lsl.l	#4,d2
00889822                            @lp7:
00889822 0816 0004                  		btst	#4,(a6)
00889826 6600                       		bne.s	@Mouse_70
00889828 51CF FFF8                  		dbra	d7,@lp7
0088982C 6000                       		bra.s	@Error
0088982E                            
0088982E                            @Mouse_70:
0088982E 1416                       		move.b	(a6),d2
00889830 1CBC 0000                  		move.b	#0,(a6)
00889834 E90A                       		lsl.b	#4,d2
00889836 E98A                       		lsl.l	#4,d2
00889838                            @lp8:
00889838 0816 0004                  		btst	#4,(a6)
0088983C 6700                       		beq.s	@Mouse_80
0088983E 51CF 0000                  		dbra	d7,@Mouse_80
00889842 6000                       		bra.s	@Error
00889844                            
00889844                            @Mouse_80:
00889844 1416                       		move.b	(a6),d2
00889846 1CBC 0020                  		move.b	#$20,(a6)
0088984A E90A                       		lsl.b	#4,d2
0088984C E98A                       		lsl.l	#4,d2
0088984E                            @lp9:
0088984E 0816 0004                  		btst	#4,(a6)
00889852 6700                       		beq.s	@Mouse_90
00889854 51CF FFF8                  		dbra	d7,@lp9
00889858 6000                       		bra.s	@Error
0088985A                            
0088985A                            @Mouse_90:
0088985A 1416                       		move.b	(a6),d2
0088985C 1CBC 0060                  		move.b	#$60,(a6)
00889860 E90A                       		lsl.b	#4,d2
00889862 E88A                       		lsr.l	#4,d2
00889864                            @lp10:
00889864 0816 0004                  		btst	#4,(a6)
00889868 67FA                       		beq.s	@lp10
0088986A 0082 0000 0000             		or.l	#0,d2
00889870                            @Exit:
00889870 33FC 0000 00A1 1100        		move.w	#0,($A11100)
00889878                            ; 		movem.l	(sp)+,d1/d3/d4/d7/a6
00889878 4E75                       		rts
0088987A                            
0088987A                            @Error:
0088987A 1CBC 0060                  		move.b	#$60,(a6)
0088987E 4E71                       		nop
00889880 4E71                       		nop
00889882                            @erlp:
00889882 1CBC 0004                  		move.b	#4,(a6)
00889886 67FA                       		beq.s	@erlp
00889888 0082 8000 0000             		or.l	#$80000000,d2
0088988E 7000                       		moveq	#0,d0
00889890 33FC 0000 00A1 1100        		move.w	#0,($A11100)
00889898                            ; 		movem.l	(sp)+,d1/d3/d4/d7/a6
00889898 4E75                       		rts
0088989A                            
0088989A                            ; ------------------------------------
0088989A                            ; d0.w
0088989A                            ; $0F - Nothing
0088989A                            ; $0D - Controller
0088989A                            ; $07 - Multitap
0088989A                            ; $03 - Mouse
0088989A                            ;
0088989A                            ; d1.l
0088989A                            ; $00xx00yy - Key presses
0088989A                            ; ------------------------------------
0088989A                            
0088989A                            @FindJoypad:
0088989A 7000                       		moveq	#0,d0
0088989C 1CBC 0070                  		move.b	#$70,(a6)
008898A0 6100                       		bsr.s	@GetPress
008898A2 4841                       		swap	d1
008898A4 1CBC 0030                  		move.b	#$30,(a6)
008898A8 D040                       		add.w	d0,d0
008898AA                            
008898AA                            @GetPress:
008898AA 1216                       		move.b	(a6),d1
008898AC 1401                       		move.b	d1,d2
008898AE 0202 000C                  		and.b	#$C,d2
008898B2 6700                       		beq.s	@Nope1
008898B4 5240                       		addq.w	#1,d0
008898B6                            
008898B6                            @Nope1:
008898B6 D040                       		add.w	d0,d0
008898B8 1601                       		move.b	d1,d3
008898BA 0243 0003                  		and.w	#3,d3
008898BE 6700                       		beq.s	@Nope2
008898C0 5240                       		addq.w	#1,d0
008898C2                            
008898C2                            @Nope2:
008898C2 4E75                       		rts
008898C4                            		
008898C4                            ; ====================================================================
008898C4                            ; -------------------------------------------------
008898C4                            ; Subs
008898C4                            ; -------------------------------------------------
008898C4                            
008898C4                            Input_init:
008898C4                            ; 		move.w	#$100,($A11100).l
008898C4                            ; @WaitZ80:
008898C4                            ; 		btst	#0,($A11100).l
008898C4                            ; 		bne.s	@WaitZ80
008898C4                             
008898C4 7240                       		moveq	#$40,d1
008898C6 13C1 00A1 0009             		move.b	d1,($A10009).l
008898CC 13C1 00A1 000B             		move.b	d1,($A1000B).l
008898D2 13C1 00A1 000D             		move.b	d1,($A1000D).l
008898D8                            
008898D8                            ; 		move.w	#0,($A11100).l
008898D8 4E75                       		rts
008898DA                            		
008898DA                            		
008898DA                            		include	"system/sound/68k/main.asm"
008898DA                            ; ================================================================
008898DA                            ; SMEG Karasucia
008898DA                            ; Sound and Music Engine for Genesis (also MCD* and 32X**)
008898DA                            ;
008898DA                            ; (C)2013-2017 GF64
008898DA                            ; 
008898DA                            ; Reads patterns from a ImpulseTracker file (.it)
008898DA                            ;
008898DA                            ; Ticks:
008898DA                            ; 150 - NTSC
008898DA                            ; 120 - PAL
008898DA                            ;
008898DA                            ; uses assembler settings:
008898DA                            ; MCD     - for building to MCD (All the driver must be aligned
008898DA                            ;              to WordRAM or PRG-RAM)
008898DA                            ; MARS       - for building to 32x (CODE and
008898DA                            ;              DATA(Music/Sfx/Voices/Z80 samples) must be aligned to
008898DA                            ;              the 32x standards, uses bank 0 only,
008898DA                            ;              PWM Samples can be anywhere in ROM)
008898DA                            ; SMEG_Z80   - Use Z80, set to 0 while running from PRGRAM
008898DA                            ;                 
008898DA                            ; Limtations:
008898DA                            ; (Driver) - Effects: only volume and panning (Xxx) works
008898DA                            ; 
008898DA                            ; (MCD) - You cant use Z80 samples if your program is running
008898DA                            ;            on PRG-RAM (Z80 cant access RAM), if your program is
008898DA                            ;            running on WORD-RAM, set the permission to
008898DA                            ;            MainCPU (2M Mode) (not recommended)
008898DA                            ;            
008898DA                            ; * requires respective SubCPU code
008898DA                            ; ** requires respective SH2 code
008898DA                            ; ================================================================
008898DA                            
008898DA                            ;NOTE: Format
008898DA                            ; SONGFILE:
008898DA                            ; 		dc.b 12,0		; Numof_blocks, loop_block (-1 dont loop)
008898DA                            ; 		dc.l @pattern		; Pattern data
008898DA                            ;      		dc.l @instruments	; Instrument set
008898DA                            ;      		dc.w 8			; Number of channel settings
008898DA                            ;       	dc.b FM_6,64,$80,$0F	; Example of one (Channel,Vol,Pan,Extra)		
008898DA                            ;		...
008898DA                            ;
008898DA                            ; Extra:
008898DA                            ; FM: %????KEYS KEYS: FM Keys (ignored if not FM)
008898DA                            ; PSG: (not yet)
008898DA                            ; PCM/PWM: not yet
008898DA                            ; 
008898DA                            ; @instruments:
008898DA                            ; 		dc.w @ymha-@instruments
008898DA                            ; 		dc.w @psg-@instruments
008898DA                            ; 		dc.w @noise-@instruments
008898DA                            ; 		dc.w @psmpl-@instruments
008898DA                            ; 		even
008898DA                            ; @ymha:
008898DA                            ; 		;FM
008898DA                            ; 		dc.w INSTNUM,0
008898DA                            ; 		dc.l fmVoice_bass_ambient
008898DA                            ;    		
008898DA                            ;    		;FM3
008898DA                            ;    		dc.w $40|INSTNUM,0
008898DA                            ;    		dc.l fm_hatopen
008898DA                            ;    		dc.w $0511|$2000,$0328|$2000
008898DA                            ;    		dc.w $005E|$2000,$0328|$2000
008898DA                            ;    		
008898DA                            ;    		;Samples
008898DA                            ;   		dc.w $80|INSTNUM,12	; NUM,Pitch
008898DA                            ;   		dc.l wav_kick		; WAV Start
008898DA                            ;  		dc.l wav_kick_e		; WAV End
008898DA                            ;  		dc.l -1			; WAV Loop sample (0: start -1: none)
008898DA                            ;  		
008898DA                            ; 		dc.w -1			; ENDOFLIST
008898DA                            ; 		even
008898DA                            ; @psmpl:
008898DA                            ; 		dc.w -1			; Later
008898DA                            ; 		even
008898DA                            ; @psg:
008898DA                            ; 		dc.w -1			; Later
008898DA                            ; 		even
008898DA                            ; @noise:
008898DA                            ;  		dc.w 3,%101		; INSTNUM, PSG Noise setting
008898DA                            ;  		
008898DA                            ;  		dc.w 5,%101
008898DA                            ;  		dc.w 7,%100
008898DA                            ;  		
008898DA                            ; 		dc.w -1
008898DA                            ; 		even
008898DA                            
008898DA                            
008898DA                            ; GEMS style tick
008898DA                            ; 		dc.l fmSfx_Coin
008898DA                            ; 		dc.w $00AB|$3800,$0457|$3000
008898DA                            ; 		dc.w $0511|$3000,$0336|$2000
008898DA                            ;
008898DA                            ;    		dc.l fm_hatopen
008898DA                            ;    		dc.w $0511|$2000,$0328|$2000
008898DA                            ;    		dc.w $005E|$2000,$0328|$2000
008898DA                            ;
008898DA                            ;    		dc.l fm_hatclosed
008898DA                            ;    		dc.w $051C|$2000,$0328|$2000
008898DA                            ;    		dc.w $005E|$2000,$0328|$2000
008898DA                            ;
008898DA                            ;    		dc.l fm_hatclosed
008898DA                            ;    		dc.w $051C|$2000,$0328|$2000
008898DA                            ;    		dc.w $005E|$2000,$0328|$2000	
008898DA                            
008898DA                            ; ================================================================
008898DA                            
008898DA                            			rsreset
008898DA =00000000                  DrvStatus		rs.b 1		;Byte
008898DA =00000001                  snd_flags		rs.b 1		;Byte
008898DA =00000002                  PatternEnd		rs.b 1		;Byte
008898DA =00000003                  PatternLoop		rs.b 1		;Byte
008898DA =00000004                  SongRequest		rs.l 1 		;Long
008898DA =00000008                  SongStart		rs.l 1		;Long
008898DA =0000000C                  SongRead		rs.l 1		;Long
008898DA =00000010                  snd_instr		rs.l 1		;Long
008898DA =00000014                  SongPcmSamp		rs.l 1		;Long
008898DA =00000018                  TicksRequest		rs.w 1		;Word
008898DA =0000001A                  TicksRead		rs.w 1		;Word
008898DA =0000001C                  TicksSet		rs.w 1		;Word
008898DA =0000001E                  TempoRead 		rs.w 1		;Word
008898DA =00000020                  PattSize		rs.w 1		;Word
008898DA =00000022                  pattr_read		rs.w 1		;Word
008898DA =00000024                  CdOnlyFlags		rs.w 1		;Word
008898DA =00000026                  CurrPattern		rs.b 1		;Byte
008898DA =00000027                  PcmChnOnOff		rs.b 1		;Byte
008898DA =00000028                  PsgLast			rs.b 1		;Byte
008898DA =00000029                  snd_flagsBGM		rs.b 1		;Byte
008898DA =0000002A                  LastPattChn		rs.b 1		;Byte
008898DA =0000002B                  Psg_Vibrato		rs.b 1		;Byte
008898DA =0000002C                  Psg_AutoVol		rs.b 1		;Byte
008898DA =0000002E                  sizeof_SndBuff		rs.l 0
008898DA                            
008898DA                            ; --------------------------------------------
008898DA                            ; Channel settings
008898DA                            ; --------------------------------------------
008898DA                            
008898DA                            			rsreset
008898DA =00000000                  Chn_Freq		rs.w 1		;Word
008898DA =00000002                  Chn_Effect		rs.w 1		;Word
008898DA =00000004                  Chn_Portam		rs.w 1		;Word
008898DA =00000006                  Chn_Type		rs.b 1		;Byte
008898DA =00000007                  Chn_ID			rs.b 1		;Byte
008898DA =00000008                  Chn_Inst		rs.b 1		;Byte
008898DA =00000009                  Chn_Vol			rs.b 1		;Byte
008898DA =0000000A                  Chn_MainVol		rs.b 1		;Byte
008898DA =0000000B                  Chn_Note		rs.b 1		;Byte
008898DA =0000000C                  Chn_Pan			rs.b 1		;Byte
008898DA =0000000D                  Chn_FM_Key		rs.b 1		;Byte
008898DA =0000000E                  Chn_PCM_Pitch		rs.b 1		;Byte
008898DA                            ; Chn_PSG_Vibrato		rs.b 1		;Byte
008898DA =0000000F                  Chn_Timer		rs.b 1
008898DA =00000010                  sizeof_Chn		rs.l 0
008898DA                             
008898DA                             
008898DA                            			rsreset
008898DA =00000000                  instDYmha		rs.w 1
008898DA =00000002                  instDPsg		rs.w 1
008898DA =00000004                  instDNoise		rs.w 1
008898DA =00000006                  instDpsmpl		rs.w 1
008898DA                            
008898DA                            ; --------------------------------------------
008898DA                            ; Bits
008898DA                            ; --------------------------------------------
008898DA                            
008898DA =00000000                  bitPriority		equ	0
008898DA =00000001                  bitSfxOn		equ	1
008898DA =00000002                  bitEnabled		equ	2
008898DA                            
008898DA                            ;Status
008898DA =00000000                  bitFmDac		equ	0
008898DA =00000001                  bitDacNote		equ	1
008898DA =00000002                  bitTone3		equ	2
008898DA =00000003                  bitSpecial3		equ	3
008898DA                            
008898DA                            ; --------------------------------------------
008898DA                            ; Channel IDs
008898DA                            ; --------------------------------------------
008898DA                            
008898DA =00000000                  FM_1			equ	$00
008898DA =00000001                  FM_2			equ	$01
008898DA =00000002                  FM_3			equ	$02
008898DA =00000004                  FM_4			equ	$04
008898DA =00000005                  FM_5			equ	$05
008898DA =00000006                  FM_6			equ	$06
008898DA =00000080                  PSG_1			equ	$80
008898DA =000000A0                  PSG_2			equ	$A0
008898DA =000000C0                  PSG_3			equ	$C0
008898DA =000000E0                  NOISE			equ	$E0
008898DA =00000010                  PCM_1			equ	$10
008898DA =00000011                  PCM_2			equ	$11
008898DA =00000012                  PCM_3			equ	$12
008898DA =00000013                  PCM_4			equ	$13
008898DA =00000014                  PCM_5			equ	$14
008898DA =00000015                  PCM_6			equ	$15
008898DA =00000016                  PCM_7			equ	$16
008898DA =00000017                  PCM_8			equ	$17
008898DA =00000012                  max_chnl		equ	18
008898DA                            
008898DA                            ; --------------------------------------------
008898DA                            ; .IT request ($80+) format
008898DA                            ; --------------------------------------------
008898DA                            
008898DA =00000000                  bitNote			equ	0
008898DA =00000001                  bitInst			equ	1
008898DA =00000002                  bitVolume		equ	2
008898DA =00000003                  bitEffect		equ	3
008898DA =00000004                  bitSameNote		equ	4
008898DA =00000005                  bitSameInst		equ	5
008898DA =00000006                  bitSameVol		equ	6
008898DA =00000007                  bitSameEffect		equ	7
008898DA                            
008898DA                            ; --------------------------------------------
008898DA                            ; RAM
008898DA                            ; 
008898DA                            ; MAX: $400
008898DA                            ; --------------------------------------------
008898DA                            
008898DA                            			rsset RAM_Audio
008898DA =FFFFEF00                  RAM_SMEG_Buffer		rs.b sizeof_SndBuff
008898DA =FFFFEF2E                  RAM_SMEG_SfxBuff	rs.b sizeof_SndBuff
008898DA =FFFFEF5C                  RAM_SMEG_PrioList	rs.b max_chnl
008898DA =FFFFEF6E                  RAM_SMEG_Chnls_BGM	rs.b $10*max_chnl
008898DA =FFFFF08E                  RAM_SMEG_Chnls_SFX	rs.b $10*max_chnl
008898DA                            			
008898DA =FFFFF1AE                  sizeof_SMEG		rs.l 0
008898DA                            ;      			inform 0,"SMEG Uses: %h",sizeof_SMEG-RAM_Audio
008898DA                            			
008898DA                            ; ================================================================
008898DA                            ; -------------------------------------------
008898DA                            ; Macros
008898DA                            ; -------------------------------------------
008898DA                            
008898DA                            ; -----------------------------------------
008898DA                            
008898DA                            PCM_Entry	macro	cd_side,mars_side,loop,pitch
008898DA                            		
008898DA                            cdsize_size	= strlen(\cd_side)
008898DA                            		if MCD
008898DA                            		  if cdsize_size>$C
008898DA                            		    inform 2,"(SMEG) CD FILENAME TOO LONG"
008898DA                            		  elseif cdsize_size=$C
008898DA                            		    dc.b \cd_side
008898DA                            		  elseif cdsize_size<$C
008898DA                            		    dc.b \cd_side
008898DA                            		    rept $C-cdsize_size
008898DA                            		      dc.b 0
008898DA                            		    endr
008898DA                            		  elseif cdsize_size<=0
008898DA                            		    inform 2,"(SMEG) YOU FORGOT THE CD FILENAME"
008898DA                            		  endif
008898DA                            		  
008898DA                            		elseif MARS
008898DA                            		  dc.l mars_side
008898DA                            		endif
008898DA                            		
008898DA                            		dc.w loop
008898DA                            		dc.w pitch
008898DA                            		endm
008898DA                            
008898DA                            ; 		inform 0,"%h",RAM_SMEG_Buffer
008898DA                            
008898DA                            ; ================================================================
008898DA                            ; -------------------------------------------
008898DA                            ; External Calls
008898DA                            ; -------------------------------------------
008898DA                            
008898DA                            ;SegaPCM
008898DA =00000020                  CdTask_LoadPcm		equ	$20
008898DA =00000021                  CdTask_SetAddr		equ	$21
008898DA =00000022                  CdTask_SetFreq		equ	$22
008898DA =00000023                  CdTask_SetPan		equ	$23
008898DA =00000024                  CdTask_SetEnv		equ	$24
008898DA =00000025                  CdTask_SetOnOff		equ	$25
008898DA =00000026                  CdTask_ClearAllPcm	equ	$26
008898DA                            
008898DA                            ;MARS
008898DA =00000001                  marscall_Play		equ	1
008898DA =00000002                  marscall_Stop		equ	2
008898DA =00000003                  marscall_SetSmpl	equ	3
008898DA =00000004                  marscall_SetVol		equ	4
008898DA =00000005                  marscall_SetEntry	equ	5
008898DA                            	
008898DA                            ; ================================================================
008898DA                            ; -------------------------------------------
008898DA                            ; Init
008898DA                            ; -------------------------------------------
008898DA                            
008898DA                            Audio_Init:
008898DA 41F9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a0
008898E0 303C 02FF                  		move.w	#$2FF,d0
008898E4                            @ClrAll:
008898E4 4298                       		clr.l	(a0)+
008898E6 51C8 FFFC                  		dbf	d0,@ClrAll
008898EA                            		
008898EA                            ; -------------------------------------------
008898EA                            ; Z80
008898EA                            ; -------------------------------------------
008898EA                            
008898EA                            SMEG_Z80_Init:
008898EA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
008898F2 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
008898FA                            @WaitZ80:
008898FA 0839 0000 00A1 1100        		btst	#0,($A11100).l
00889902 66F6                       		bne.s	@WaitZ80
00889904                            
00889904 41F9 00A0 0000             		lea	($A00000).l,a0
0088990A 303C 1FFF                  		move.w	#$1FFF,d0
0088990E                            @cleanup:
0088990E 4218                       		clr.b	(a0)+
00889910 51C8 FFFC                  		dbf	d0,@cleanup
00889914                            		
00889914 41FA 0000                  		lea	Z80_Driver(pc),a0
00889918 43F9 00A0 0000             		lea	($A00000).l,a1
0088991E 323C 0000                  		move.w	#Z80_DriverEnd-Z80_Driver,d1
00889922                            @ToZ80:
00889922 12D8                       		move.b	(a0)+,(a1)+
00889924 51C9 FFFC                  		dbf	d1,@ToZ80
00889928                            
00889928                            ; -----------------------------------
00889928                            
00889928 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
00889930 4E71                       		nop
00889932 4E71                       		nop
00889934 4E71                       		nop
00889936 4E71                       		nop
00889938 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
00889940 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00889948                            ; 		rts
00889948                            		
00889948                            ; -------------------------------------------
00889948                            ; Stop ALL Sound
00889948                            ; -------------------------------------------
00889948                            
00889948                            SMEG_StopSnd:
00889948 103C 002B                  		move.b	#$2B,d0
0088994C 123C 0000                  		move.b	#$00,d1
00889950 6100 0000                  		bsr	SMEG_Z80_Off
00889954 6100 0000                  		bsr	FM_RegWrite_1
00889958 6100 0000                  		bsr	SMEG_Z80_On
0088995C 6100 0000                  		bsr	Audio_Sample_Stop
00889960                            		
00889960 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
00889966 0896 0002                  		bclr	#bitEnabled,(a6)
0088996A                            	
0088996A 6100 0000                  		bsr	SMEG_FM_Reset
0088996E 6100 0000                   		bsr	SMEG_PSG_Reset
00889972 6000 0000                  		bra	SMEG_PCM_Reset
00889976                            		
00889976                            ; -------------------------------------------
00889976                            ; Play Song
00889976                            ; -------------------------------------------
00889976                            
00889976                            SMEG_PlaySong:
00889976 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
0088997C 08D6 0002                  		bset	#bitEnabled,(a6)
00889980 4E75                       		rts
00889982                            		
00889982                            ; -------------------------------------------
00889982                            ; Load Song
00889982                            ;
00889982                            ; d0 - StartOfSong
00889982                            ; d1 - Ticks
00889982                            ; d2 - Type (0 - song, 1 - sfx)
00889982                            ; -------------------------------------------
00889982                            
00889982                            Audio_Track_Play:
00889982 4A42                       		tst.w	d2
00889984 6600                       		bne.s	@Sfx
00889986                            		
00889986 23C0 FFFF EF04             		move.l	d0,(RAM_SMEG_Buffer+SongRequest)
0088998C 33C1 FFFF EF18             		move.w	d1,(RAM_SMEG_Buffer+TicksRequest)
00889992 4E75                       		rts
00889994                            @Sfx:
00889994                            ; 		clr.w	(RAM_SMEG_SfxBuff+pattr_read)
00889994                            ; 		clr.w	(RAM_SMEG_SfxBuff+CurrPattern)
00889994                            ; 		move.l	(RAM_SMEG_SfxBuff+SongStart),(RAM_SMEG_SfxBuff+SongRead)
00889994                            ; 		cmp.l	(RAM_SMEG_SfxBuff+SongRequest),d0
00889994                            ; 		bne.s	@SameSfx
00889994                            		
00889994 23C0 FFFF EF32             		move.l	d0,(RAM_SMEG_SfxBuff+SongRequest)
0088999A 33C1 FFFF EF46             		move.w	d1,(RAM_SMEG_SfxBuff+TicksRequest)
008899A0                            @SameSfx:
008899A0 4E75                       		rts
008899A2                            		
008899A2                            ; ================================================================
008899A2                            ; -------------------------------------------
008899A2                            ; Run
008899A2                            ; -------------------------------------------
008899A2                            
008899A2                            Audio_Run:
008899A2 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
008899A8 6100 0000                  		bsr	@RequestSong
008899AC 0896 0000                  		bclr	#bitPriority,(a6)
008899B0 6100 0000                                  bsr	@ReadRow
008899B4                            
008899B4 4DF9 FFFF EF2E               		lea	(RAM_SMEG_SfxBuff),a6
008899BA 6100 0000                   		bsr	@RequestSfx
008899BE 08D6 0000                  		bset	#bitPriority,(a6)
008899C2 6100 0000                  		bsr	@ReadRow
008899C6                            		
008899C6                            ; -------------------------
008899C6                            ; MARS ONLY
008899C6                            ; Transfer 68k RAM using
008899C6                            ; framebuffer (offside)
008899C6                            ; -------------------------
008899C6                            
008899C6                            ; @marsturn:
008899C6                            ; 		btst	#7,(marsreg)	
008899C6                            ; 		bne.s	@busymars
008899C6                            ; 		
008899C6                            ; 		bchg	#0,($A1518B)
008899C6                            ; @waitfb:	btst	#1,($A1518B)
008899C6                            ; 		bne.s	@waitfb
008899C6                            ; 		lea	(RAM_SMEG_Chnls_BGM),a0
008899C6                            ; 		lea	(framebuffer+$14000),a1
008899C6                            ; 		move.w	#$10*max_chnl,d0
008899C6                            ; @copytomars:	
008899C6                            ; 		move.b	(a0)+,(a1)+
008899C6                            ; 		dbf	d0,@copytomars
008899C6                            ; 		bchg	#0,($A1518B)
008899C6                            ; @busymars:
008899C6                            
008899C6                            ; -------------------------
008899C6                            
008899C6                            @Wait:
008899C6 4E75                       		rts
008899C8                            
008899C8                            ; -------------------------------------------
008899C8                            ; Request song
008899C8                            ; -------------------------------------------
008899C8                            	
008899C8                            @RequestSong:
008899C8 4AAE 0004                  		tst.l	SongRequest(a6)
008899CC 6700                       		beq.s	@Same
008899CE 0896 0002                  		bclr	#bitEnabled,(a6)
008899D2 6100 FF74                   		bsr	SMEG_StopSnd			;d0-d1 are gone
008899D6 4AAE 0004                   		tst.l	SongRequest(a6)
008899DA 6B00                        		bmi.s	@Same
008899DC                             		
008899DC 422E 0026                  		clr.b	CurrPattern(a6)
008899E0 422E 0002                  		clr.b	PatternEnd(a6)
008899E4 426E 0020                  		clr.w	PattSize(a6)
008899E8 426E 0022                  		clr.w	pattr_read(a6)
008899EC 4BF9 FFFF EF6E             		lea	(RAM_SMEG_Chnls_BGM),a5
008899F2 422E 0027                  		clr.b	PcmChnOnOff(a6)
008899F6 422E 0000                                  clr.b	DrvStatus(a6)
008899FA 6100 0000                  		bsr	SMEG_Load_SetChnls
008899FE 6100 0000                   		bsr	SMEG_Load_SetExtChnls
00889A02 08D6 0002                  		bset	#bitEnabled,(a6)
00889A06                            
00889A06 426E 0018                  		clr.w	TicksRequest(a6)
00889A0A 42AE 0004                  		clr.l	SongRequest(a6)
00889A0E                            @Same:
00889A0E 4E75                       		rts
00889A10                            		
00889A10                            ; -------------------------------------------
00889A10                            ; Request sfx
00889A10                            ; -------------------------------------------
00889A10                            
00889A10                            @RequestSfx:
00889A10 4AAE 0004                  		tst.l	SongRequest(a6)
00889A14 67F8                       		beq.s	@Same
00889A16 6BF6                       		bmi.s	@Same
00889A18                            		
00889A18 0896 0002                  		bclr	#bitEnabled,(a6)
00889A1C 422E 0026                  		clr.b	CurrPattern(a6)
00889A20 422E 0002                  		clr.b	PatternEnd(a6)
00889A24 426E 0020                  		clr.w	PattSize(a6)
00889A28 426E 0022                  		clr.w	pattr_read(a6)
00889A2C                            		
00889A2C 422E 0027                  		clr.b	PcmChnOnOff(a6)
00889A30 422E 0000                                  clr.b	DrvStatus(a6)
00889A34                            ;                 bset	#bitSfxOn,(a6)
00889A34 4BF9 FFFF F08E             		lea	(RAM_SMEG_Chnls_SFX),a5
00889A3A 6100 0000                  		bsr	SMEG_Load_SetChnls
00889A3E 6100 0000                  		bsr	SMEG_Load_FixSfx
00889A42 08D6 0002                  		bset	#bitEnabled,(a6)
00889A46                            		
00889A46 426E 0018                  		clr.w	TicksRequest(a6)
00889A4A 42AE 0004                  		clr.l	SongRequest(a6)
00889A4E 4E75                       		rts
00889A50                            		
00889A50                            ; -------------------------------------------
00889A50                            ; Read row
00889A50                            ; -------------------------------------------
00889A50                            
00889A50                            @ReadRow:
00889A50 0816 0002                  		btst	#bitEnabled,(a6)
00889A54 6700 FF70                  		beq	@Wait
00889A58                            
00889A58 046E 0001 001A             		sub.w	#1,TicksRead(a6)
00889A5E 6A00 FF66                  		bpl	@Wait
00889A62 3D6E 001C 001A              		move.w	TicksSet(a6),TicksRead(a6)
00889A68                            
00889A68                            @NewRow:
00889A68 286E 000C                                  movea.l	SongRead(a6),a4
00889A6C                            
00889A6C                            ; --------------------------------
00889A6C                            ; New pattern
00889A6C                            ; --------------------------------
00889A6C                            
00889A6C                            @Next:
00889A6C 7A00                       		moveq	#0,d5
00889A6E 7C00                       		moveq	#0,d6
00889A70 3C2E 0020                   		move.w	PattSize(a6),d6
00889A74 0446 0001                    		sub.w	#1,d6
00889A78 3A2E 0022                    		move.w	pattr_read(a6),d5
00889A7C BC85                        		cmp.l	d5,d6
00889A7E 6400                        		bcc.s	@NoNextRow
00889A80                             		
00889A80 426E 0022                  		clr.w	pattr_read(a6)
00889A84 7A00                       		moveq	#0,d5
00889A86 7C00                       		moveq	#0,d6
00889A88 1C2E 0002                  		move.b	PatternEnd(a6),d6
00889A8C 1A2E 0026                  		move.b	CurrPattern(a6),d5
00889A90 BC45                       		cmp.w	d5,d6
00889A92 6E00                       		bgt.s	@NotEnd
00889A94                            		
00889A94 0C2E 00FF 0003             		cmp.b	#-1,PatternLoop(a6)
00889A9A 6700                       		beq.s	@exit
00889A9C                            		
00889A9C 286E 0008                  		movea.l	SongStart(a6),a4
00889AA0 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
00889AA4 1D5C 0020                   		move.b	(a4)+,PattSize(a6)
00889AA8 D8FC 0006                   		adda	#6,a4
00889AAC 2D4C 000C                  		move.l	a4,SongRead(a6)
00889AB0 1D6E 0003 0026             		move.b	PatternLoop(a6),CurrPattern(a6)
00889AB6 426E 001A                  		clr.w	TicksRead(a6)
00889ABA 4E75                       		rts
00889ABC                            		
00889ABC                            @exit:
00889ABC 0896 0002                  		bclr	#bitEnabled,(a6)
00889AC0 4E75                       		rts
00889AC2                            
00889AC2                            ; --------------------------------
00889AC2                            
00889AC2                            @NotEnd:
00889AC2 062E 0001 0026             		add.b	#1,CurrPattern(a6)
00889AC8 7000                       		moveq	#0,d0
00889ACA 102E 0026                  		move.b	CurrPattern(a6),d0
00889ACE B02E 0003                  		cmp.b	PatternLoop(a6),d0
00889AD2 6600                       		bne.s	@DontSaveLoop
00889AD4 2D4C 0008                  		move.l	a4,SongStart(a6)
00889AD8                            @DontSaveLoop:
00889AD8 7200                       		moveq	#0,d1
00889ADA 121C                       		move.b	(a4)+,d1
00889ADC 141C                       		move.b	(a4)+,d2
00889ADE E14A                       		lsl.w	#8,d2
00889AE0 8242                       		or	d2,d1
00889AE2 3D41 0020                  		move.w	d1,PattSize(a6)
00889AE6 D8FC 0006                  		adda	#6,a4
00889AEA                            		
00889AEA                            ; --------------------------------
00889AEA                            ; Current pattern
00889AEA                            ; --------------------------------
00889AEA                            
00889AEA                            @NoNextRow:
00889AEA 7C00                       		moveq	#0,d6
00889AEC 7000                       		moveq	#0,d0
00889AEE 101C                       		move.b	(a4)+,d0
00889AF0                            
00889AF0 4A40                       		tst.w	d0
00889AF2 6600                       		bne.s	@ValidNote
00889AF4                            
00889AF4 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889AFA 2D4C 000C                  		move.l	a4,SongRead(a6)
00889AFE 4E75                       		rts
00889B00                            
00889B00                            @ValidNote:
00889B00 4A00                       		tst.b	d0
00889B02 6A00                       		bpl.s	@Not80
00889B04 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889B0A 0880 0007                  		bclr	#7,d0
00889B0E 1C1C                       		move.b	(a4)+,d6
00889B10                            @Not80:
00889B10 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889B16 0440 0001                  		sub.w	#1,d0
00889B1A 1D40 002A                  		move.b	d0,LastPattChn(a6)
00889B1E                            
00889B1E 4BF9 FFFF EF6E             		lea 	(RAM_SMEG_Chnls_BGM),a5
00889B24 0816 0000                  		btst 	#bitPriority,(a6)
00889B28 6700                       		beq.s	@MusicPrio
00889B2A 4BF9 FFFF F08E             		lea 	(RAM_SMEG_Chnls_SFX),a5	
00889B30                            @MusicPrio:
00889B30 C0FC 0010                  		mulu.w	#sizeof_Chn,d0
00889B34 DAC0                       		adda	d0,a5
00889B36                            		
00889B36 4A46                       		tst.w	d6
00889B38 6700                       		beq.s	@NotRest
00889B3A 1B46 0006                  		move.b	d6,Chn_Type(a5)
00889B3E                            @NotRest:
00889B3E                            
00889B3E                            ; SFX: Mark used channel
00889B3E                            
00889B3E 0816 0000                  		btst 	#bitPriority,(a6)
00889B42 6700                       		beq.s	@MusicPrio2
00889B44 6100 0000                  		bsr	SMEG_FindPrioSlot
00889B48 16BC 0001                    		move.b	#1,(a3)
00889B4C                            @MusicPrio2:
00889B4C                             
00889B4C                            ; -------------
00889B4C                            ; Note
00889B4C                            ; -------------
00889B4C                            
00889B4C 082D 0004 0006             		btst	#bitSameNote,Chn_Type(a5)
00889B52 6600                       		bne.s	@PlayOnly
00889B54 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
00889B5A 6700                       		beq.s	@NoNote
00889B5C                            
00889B5C 426D 0004                  		clr.w	Chn_Portam(a5)
00889B60 1B5C 000B                                  move.b	(a4)+,Chn_Note(a5)
00889B64 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889B6A                            
00889B6A                            @PlayOnly:
00889B6A                            ; 		bsr	SMEG_ChannelRest
00889B6A                            
00889B6A                            @NoNote:
00889B6A                            
00889B6A                            ; -------------
00889B6A                            ; Instrument
00889B6A                            ; -------------
00889B6A                            
00889B6A 082D 0005 0006              		btst	#bitSameInst,Chn_Type(a5)
00889B70 6600                       		bne.s	@SameInst
00889B72 082D 0001 0006             		btst	#bitInst,Chn_Type(a5)
00889B78 6700                       		beq.s	@NoInst
00889B7A                            
00889B7A 1B5C 0008                  		move.b	(a4)+,Chn_Inst(a5)
00889B7E 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889B84                            
00889B84                            @SameInst:
00889B84 6100 0000                  		bsr	SMEG_SetVoice
00889B88                            @NoInst:
00889B88                            
00889B88                            ; -------------
00889B88                            ; Volume
00889B88                            ; -------------
00889B88                            
00889B88 082D 0006 0006              		btst	#bitSameVol,Chn_Type(a5)
00889B8E 6600                        		bne.s	@SameVol
00889B90 082D 0002 0006             		btst	#bitVolume,Chn_Type(a5)
00889B96 6700                       		beq.s	@NoVolume
00889B98                            
00889B98 7000                       		moveq 	#0,d0
00889B9A 101C                       		move.b 	(a4)+,d0
00889B9C 1B40 0009                  		move.b	d0,chn_vol(a5)
00889BA0 066E 0001 0022             		add.w 	#1,pattr_read(a6)
00889BA6                            @NoVolume:
00889BA6                            @SameVol:
00889BA6 6100 0000                   		bsr	@ChnVolume
00889BAA                             		
00889BAA                            ; -------------
00889BAA                            ; Effect
00889BAA                            ; -------------
00889BAA                            
00889BAA 082D 0007 0006              		btst	#bitSameEffect,Chn_Type(a5)
00889BB0 6600                        		bne.s	@SameEffect
00889BB2 082D 0003 0006             		btst	#bitEffect,Chn_Type(a5)
00889BB8 6700                       		beq.s	@NoEffect
00889BBA                            
00889BBA 1B5C 0002                  		move.b	(a4)+,Chn_Effect(a5)
00889BBE 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889BC4 1B5C 0003                  		move.b	(a4)+,Chn_Effect+1(a5)
00889BC8 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889BCE                            @SameEffect:
00889BCE 6100 0000                  		bsr	@ChannelEffects
00889BD2                            @NoEffect:
00889BD2                            
00889BD2                            ; --------------
00889BD2                            ; Play the note
00889BD2                            ; --------------
00889BD2                            
00889BD2 082D 0004 0006              		btst	#bitSameNote,Chn_Type(a5)
00889BD8 6600                        		bne.s	@SameNote
00889BDA 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
00889BE0 6700 FE8A                  		beq	@Next
00889BE4                            @SameNote:
00889BE4 6100 0000                  		bsr	@ChannelPlay
00889BE8 6000 FE82                  		bra	@Next
00889BEC                            
00889BEC                            ; ================================================================
00889BEC                            ; -------------------------------
00889BEC                            ; PCM Frequencies
00889BEC                            ; -------------------------------
00889BEC                            
00889BEC                            		
00889BEC                            ; ================================================================
00889BEC                            ; -------------------------------
00889BEC                            ; Set Volume
00889BEC                            ; -------------------------------
00889BEC                            
00889BEC                            @ChnVolume:
00889BEC 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00889BF2 6700 0000                  		beq	@Return
00889BF6                            
00889BF6 0816 0000                  		btst	#bitPriority,(a6)
00889BFA 6600                       		bne.s	@SFX_ModeV
00889BFC 6100 0000                  		bsr	SMEG_FindPrioSlot
00889C00 4A13                         		tst.b	(a3)
00889C02 6600 0000                    		bne	@Return
00889C06                            @SFX_ModeV:
00889C06                            
00889C06 4A2D 0007                  		tst.b	Chn_ID(a5)
00889C0A 6B00 0000                  		bmi	@ChnVol_PSG
00889C0E 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00889C14 6C00 0000                  		bge	@ChnVol_PCM
00889C18                            		
00889C18 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
00889C1E 6600                       		bne.s	@NotSmplChk
00889C20 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
00889C26 6600 0000                  		bne	@Return
00889C2A                            @NotSmplChk:
00889C2A                            
00889C2A                            ; -------------------------------
00889C2A                            ; FM Volume
00889C2A                            ; -------------------------------
00889C2A                            
00889C2A 6100 0000                  		bsr	ChnlFM_srchIns
00889C2E 223C 7F7F 7F7F             		move.l	#$7F7F7F7F,d1
00889C34 0C42 FFFF                  		cmp.w	#-1,d2
00889C38 6700 0000                  		beq	@ForceOff
00889C3C 0802 0007                   		btst	#7,d2
00889C40 6600 0000                   		bne	@ForceOff
00889C44                             		
00889C44                            ;  		cmp.b	#64,chn_vol(a5)
00889C44                            ;  		bge	@Return
00889C44                            	
00889C44 D6FC 0004                   		adda.w	#4,a3
00889C48 2653                       		movea.l	(a3),a3
00889C4A D6FC 0015                    		adda	#$15,a3
00889C4E                            		
00889C4E 203C 4C44 4840             		move.l	#$4C444840,d0
00889C54 7200                        		moveq	#0,d1
00889C56 7400                        		moveq	#0,d2
00889C58 7600                        		moveq	#0,d3
00889C5A 162D 0007                   		move.b	chn_id(a5),d3
00889C5E 0243 0003                   		and.w	#%11,d3
00889C62                            
00889C62                             		;TODO: checar bien los TL
00889C62 122B 0003                   		move.b	3(a3),d1
00889C66 142D 0009                   		move.b	chn_vol(a5),d2
00889C6A 0402 0040                   		sub.b	#64,d2
00889C6E 9202                        		sub.b	d2,d1
00889C70 E189                        		lsl.l	#8,d1
00889C72                             		
00889C72 122B 0002                   		move.b	2(a3),d1
00889C76 142D 0009                   		move.b	chn_vol(a5),d2
00889C7A 0402 0040                   		sub.b	#64,d2
00889C7E 9202                        		sub.b	d2,d1
00889C80 E189                         		lsl.l	#8,d1
00889C82                              		
00889C82 122B 0001                   		move.b	1(a3),d1
00889C86 142D 0009                   		move.b	chn_vol(a5),d2
00889C8A 0402 0040                   		sub.b	#64,d2
00889C8E 9202                        		sub.b	d2,d1
00889C90 E189                         		lsl.l	#8,d1
00889C92                              		
00889C92 1213                        		move.b	(a3),d1
00889C94 142D 0009                   		move.b	chn_vol(a5),d2
00889C98 0402 0040                   		sub.b	#64,d2
00889C9C 9202                        		sub.b	d2,d1
00889C9E                            
00889C9E                            @ForceOff:
00889C9E 6100 0000                   		bsr	SMEG_Z80_OFF
00889CA2                            ;  		or.b	d3,d0
00889CA2                            ;  		bsr	SMEG_FM_FindWrite	;oops.
00889CA2 E088                        		lsr.l	#8,d0
00889CA4 E089                        		lsr.l	#8,d1
00889CA6 8003                        		or.b	d3,d0
00889CA8 6100 0000                    		bsr	SMEG_FM_FindWrite
00889CAC E088                        		lsr.l	#8,d0
00889CAE E089                        		lsr.l	#8,d1
00889CB0                            ;  		or.b	d3,d0
00889CB0                            ;   		bsr	SMEG_FM_FindWrite
00889CB0 E088                        		lsr.l	#8,d0
00889CB2 E089                        		lsr.l	#8,d1
00889CB4 8003                        		or.b	d3,d0
00889CB6 6100 0000                   		bsr	SMEG_FM_FindWrite
00889CBA 6000 0000                   		bra	SMEG_Z80_On
00889CBE                             	
00889CBE                            ; -------------------------------
00889CBE                            ; PSG Volume
00889CBE                            ; -------------------------------
00889CBE                            
00889CBE                            @ChnVol_PSG:
00889CBE 162D 0007                  		move.b	Chn_ID(a5),d3
00889CC2 0043 001F                  		or.w	#$1F,d3
00889CC6 102D 000B                  		move.b	chn_note(a5),d0
00889CCA 0C00 00FE                  		cmp.b	#-2,d0
00889CCE 6700 0000                  		beq	ChnPsg_Rest
00889CD2 0C00 00FF                  		cmp.b	#-1,d0
00889CD6 6700 0000                  		beq	ChnPsg_Rest
00889CDA 6000 0000                  		bra	ChnPsg_SetVol
00889CDE                            @Return:
00889CDE 4E75                       		rts
00889CE0                            
00889CE0                            ; -------------------------------
00889CE0                            ; PCM Volume
00889CE0                            ; -------------------------------
00889CE0                            
00889CE0                            @ChnVol_PCM:
00889CE0                               		
00889CE0 142D 0009                   		move.b	Chn_Vol(a5),d2
00889CE4 E64A                         		lsr.w	#3,d2
00889CE6                            ;  		and.w	#%11111110,d2
00889CE6                            ;  		moveq	#0,d1
00889CE6                            ;     		move.b	Chn_MainVol(a5),d1
00889CE6                            ;       	lsr.w	#4,d1
00889CE6                            ;      		lsl.w	#4,d1
00889CE6                            ;    		sub.b	d1,d2
00889CE6                            ;     		move.b	Chn_Vol(a5),d1
00889CE6                            ;       		lsr.w	#4,d1
00889CE6                            ;     		sub.b	d1,d2
00889CE6                                		
00889CE6 7200                           		moveq	#0,d1
00889CE8 122D 0007                      		move.b	Chn_ID(a5),d1
00889CEC 0241 000F                      		and.w	#$F,d1
00889CF0 13C1 00A1 5122                 		move.b	d1,(marsreg+comm2)
00889CF6 13C2 00A1 5123                		move.b	d2,(marsreg+comm2+1)
00889CFC 7004                         		moveq 	#marscall_SetVol,d0
00889CFE 6100 0000                    		bsr	SMEG_MARS_Call
00889D02                             		
00889D02 4E75                       		rts
00889D04                            		
00889D04                            ; ================================================================
00889D04                            ; -------------------------------
00889D04                            ; Channel effect
00889D04                            ; -------------------------------
00889D04                            
00889D04                            @ChannelEffects:
00889D04 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00889D0A 6700 0000                  		beq	@Null
00889D0E                            ; 		btst 	#bitPriority,(a6)
00889D0E                            ; 		bne.s	@SFX_Eff
00889D0E                            ; 		bsr	SMEG_FindPrioSlot
00889D0E                            ;   		tst.b	(a3)
00889D0E                            ;   		bne	@Return
00889D0E                            ; @SFX_Eff:
00889D0E                            
00889D0E 7000                       		moveq	#0,d0
00889D10 102D 0002                  		move.b	Chn_Effect(a5),d0
00889D14 D040                       		add.w	d0,d0
00889D16 323B 0000                  		move.w	@EffectList(pc,d0.w),d1
00889D1A 4EFB 1000                  		jmp	@EffectList(pc,d1.w)
00889D1E                            		
00889D1E                            ; -------------------------------
00889D1E                            
00889D1E 0000                       @EffectList:	dc.w	@Null-@EffectList
00889D20 0000                       		dc.w	@Flag_A-@EffectList
00889D22 0000                       		dc.w	@Null-@EffectList
00889D24 0000                       		dc.w	@Null-@EffectList
00889D26 0000                       		dc.w	@Flag_D-@EffectList
00889D28 0000                       		dc.w	@Flag_E-@EffectList
00889D2A 0000                       		dc.w	@Flag_F-@EffectList
00889D2C 0000                       		dc.w	@Null-@EffectList
00889D2E 0000                       		dc.w	@Null-@EffectList
00889D30 0000                       		dc.w	@Null-@EffectList
00889D32 0000                       		dc.w	@Null-@EffectList
00889D34 0000                       		dc.w	@Null-@EffectList
00889D36 0000                       		dc.w	@Null-@EffectList
00889D38 0000                       		dc.w	@Flag_M-@EffectList
00889D3A 0000                       		dc.w	@Null-@EffectList
00889D3C 0000                       		dc.w	@Null-@EffectList
00889D3E 0000                       		dc.w	@Null-@EffectList
00889D40 0000                       		dc.w	@Null-@EffectList
00889D42 0000                       		dc.w	@Null-@EffectList
00889D44 0000                       		dc.w	@Null-@EffectList
00889D46 0000                       		dc.w	@Null-@EffectList
00889D48 0000                       		dc.w	@Null-@EffectList
00889D4A 0000                       		dc.w	@Null-@EffectList
00889D4C 0000                       		dc.w	@Null-@EffectList
00889D4E 0000                       		dc.w	@Flag_X-@EffectList
00889D50 0000                       		dc.w	@Null-@EffectList
00889D52 0000                       		dc.w	@Flag_Z-@EffectList
00889D54                            		even
00889D54                            
00889D54                            ; -------------------------------
00889D54                            ; Null effect
00889D54                            ; -------------------------------
00889D54                            
00889D54                            @Null:
00889D54 4E75                       		rts
00889D56                            
00889D56                            ; -------------------------------
00889D56                            ; Flag A - Set Tick rate
00889D56                            ; -------------------------------
00889D56                            
00889D56                            @Flag_A:
00889D56 7000                       		moveq	#0,d0
00889D58 426E 001C                  		clr.w	TicksSet(a6)
00889D5C 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00889D60 0440 0001                  		sub.w	#1,d0
00889D64 1D40 001D                  		move.b	d0,TicksSet+1(a6)
00889D68 4E75                       		rts
00889D6A                            
00889D6A                            ; -------------------------------
00889D6A                            ; Flag D - Volume slide
00889D6A                            ; -------------------------------
00889D6A                            
00889D6A                            @Flag_D:
00889D6A 4E75                        rts
00889D6C                            ; 		moveq	#0,d0
00889D6C                            ; 		moveq	#0,d1
00889D6C                            ; 		move.b	Chn_Effect+1(a5),d0
00889D6C                            ; 		tst.b	Chn_ID(a5)
00889D6C                            ; 		bpl	@NotPSG
00889D6C                            ; 		lsl.w	#4,d0
00889D6C                            ; @NotPSG:
00889D6C                            ; 		move.b	Chn_Vol(a5),d1
00889D6C                            ; 		add.b	d0,d1
00889D6C                            ; 		move.b	d1,Chn_Vol(a5)
00889D6C                            ; 		bra	@ChnVolume
00889D6C                            
00889D6C                            ; -------------------------------
00889D6C                            ; Flag E - Portametro down
00889D6C                            ; -------------------------------
00889D6C                            
00889D6C                            @Flag_E:
00889D6C 7000                       		moveq	#0,d0
00889D6E 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00889D72 0640 0001                  		add.w	#1,d0
00889D76 4440                       		neg.w	d0
00889D78 6000                       		bra.s	@DoPortam
00889D7A                            
00889D7A                            ; -------------------------------
00889D7A                            ; Flag F - Portametro up
00889D7A                            ; -------------------------------
00889D7A                            
00889D7A                            @Flag_F:
00889D7A 7000                       		moveq	#0,d0
00889D7C 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00889D80 0640 0001                  		add.w	#1,d0
00889D84                            		
00889D84                            ; ---------------------
00889D84                            
00889D84                            @DoPortam:
00889D84 382D 0004                  		move.w	Chn_Portam(a5),d4
00889D88 4A44                       		tst.w	d4
00889D8A 6700 FF52                  		beq	@return
00889D8E                            		
00889D8E 4A2D 0007                  		tst.b	Chn_ID(a5)
00889D92 6B00                       		bmi.s	@psg_mode
00889D94 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00889D9A 6C00                       		bge.s	@pcm_mode
00889D9C                            		
00889D9C E548                       		lsl.w	#2,d0
00889D9E D840                       		add.w	d0,d4
00889DA0 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00889DA4 6000 0000                  		bra	SMEG_SetFreqFM
00889DA8                            		
00889DA8                            @psg_mode:
00889DA8 D040                       		add.w	d0,d0
00889DAA 9840                       		sub.w	d0,d4
00889DAC 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00889DB0 3004                       		move.w	d4,d0
00889DB2 122D 0007                  		move.b	Chn_ID(a5),d1
00889DB6 6000 0000                  		bra	ChnPsg_NoteFreq
00889DBA                            		
00889DBA                            @pcm_mode:
00889DBA 4E75                       		rts
00889DBC                            		
00889DBC                            ; -------------------------------
00889DBC                            ; Flag M - Set Channel Volume
00889DBC                            ; -------------------------------
00889DBC                            
00889DBC                            @Flag_M:
00889DBC 4E75                        rts
00889DBE                             
00889DBE                            ; 		moveq	#0,d0
00889DBE                            ; 		move.b	Chn_Effect+1(a5),d0
00889DBE                            ; 	;	tst.b	Chn_ID(a5)
00889DBE                            ; 	;	bpl	@NotPSG_H
00889DBE                            ; 
00889DBE                            ; 		neg.w	d0
00889DBE                            ; 		sub.w	#$D0,d0
00889DBE                            ; ;@NotPSG_H:
00889DBE                            ; 		move.b	d0,Chn_MainVol(a5)
00889DBE                            ; 		bra	@ChnVolume
00889DBE                            
00889DBE                            ; -------------------------------
00889DBE                            ; Flag X - Stereo
00889DBE                            ; -------------------------------
00889DBE                            
00889DBE                            @Flag_X:
00889DBE                            ; 		tst.b	Chn_ID(a5)
00889DBE                            ; 		bmi	@Null
00889DBE                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
00889DBE                            ; 		bge	@PCM_Pan
00889DBE                            		
00889DBE 1B6D 0003 000C             		move.b	Chn_Effect+1(a5),Chn_Pan(a5)
00889DC4 4E75                       		rts
00889DC6                            		
00889DC6                            ; 		moveq	#0,d0
00889DC6                            ; 		move.w	#$C0,d0
00889DC6                            ;                 cmp.b	#$80,Chn_Effect+1(a5)
00889DC6                            ;                 beq.s	@SetPan
00889DC6                            ; 		tst.b	Chn_Effect+1(a5)
00889DC6                            ; 		bmi.s	@Right
00889DC6                            ; 		bpl.s	@Left
00889DC6                            ; @SetPan:
00889DC6                            ; 		move.b	d0,Chn_Pan(a5)
00889DC6                            ; 		rts
00889DC6                            ; @Left:
00889DC6                            ; 		move.w	#$80,d0
00889DC6                            ; 		bra.s	@SetPan
00889DC6                            ; @Right:
00889DC6                            ; 		move.w	#$40,d0
00889DC6                            ; 		bra.s	@SetPan
00889DC6                            
00889DC6                            ; ; -------------------------------
00889DC6                            ; ; PCM Panning
00889DC6                            ; ; -------------------------------
00889DC6                            ; 
00889DC6                            ; @PCM_Pan:
00889DC6                            ; 		if MCD
00889DC6                            ; 		
00889DC6                            ; 		moveq	#0,d0
00889DC6                            ; 		move.b	#%11001100,d0				;TODO: dejarlo así
00889DC6                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
00889DC6                            ; 		beq.s	@Return2
00889DC6                            ;                  
00889DC6                            ;  		tst.b	Chn_Effect+1(a5)
00889DC6                            ;  		bmi.s	@Right2
00889DC6                            ; 		bpl.s	@Left2
00889DC6                            ; 		bra	@Return2
00889DC6                            ; @Right2:
00889DC6                            ;  		move.b	#%10000000,d0
00889DC6                            ;  		bra	@Return2
00889DC6                            ; @Left2:
00889DC6                            ; 		move.b	#%00001000,d0
00889DC6                            ; @Return2:
00889DC6                            ; 		move.b	d0,Chn_Pan(a5)
00889DC6                            ; 
00889DC6                            ; ; -------------------------------------------------
00889DC6                            ; 
00889DC6                            ;  		elseif MARS
00889DC6                            ;  
00889DC6                            ; 		move.w	#%11000000,d0
00889DC6                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
00889DC6                            ; 		beq	@Cont
00889DC6                            ;  		tst.b	Chn_Effect+1(a5)
00889DC6                            ;  		bmi.s	@pwmRight
00889DC6                            ; 		bpl.s	@pwmLeft
00889DC6                            ; 		bra	@Cont
00889DC6                            ;  		
00889DC6                            ; @pwmRight:
00889DC6                            ;  		move.w	#%01000000,d0
00889DC6                            ;  		bra.s	@Cont
00889DC6                            ; @pwmLeft:
00889DC6                            ; 		move.w	#%10000000,d0
00889DC6                            ; 
00889DC6                            ; @Cont:
00889DC6                            ; 		move.b	d0,Chn_Pan(a5)   		
00889DC6                            ; 		endif
00889DC6                            ; 		rts
00889DC6                            
00889DC6                            ; ======================================================
00889DC6                            ; -------------------------------
00889DC6                            ; Flag Z
00889DC6                            ; -------------------------------
00889DC6                            
00889DC6                            @Flag_Z:
00889DC6 7000                       		moveq	#0,d0
00889DC8 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00889DCC E848                       		lsr.w	#4,d0
00889DCE D040                       		add.w	d0,d0
00889DD0 323B 0000                  		move.w	@HashList(pc,d0.w),d1
00889DD4 102D 0003                  		move.b	Chn_Effect+1(a5),d0		;d0 - $0-$F argument
00889DD8 0200 000F                  		and.b	#$F,d0
00889DDC 4EFB 1000                  		jmp	@HashList(pc,d1.w)
00889DE0                            
00889DE0 FF74                       @HashList:	dc.w	@Null-@HashList		;$00
00889DE2 0000                       		dc.w	@FM_Key-@HashList		;$10 - FM Keys ON/OFF
00889DE4 FF74                       		dc.w	@Null-@HashList			;$20
00889DE6 FF74                       		dc.w	@Null-@HashList			;$30
00889DE8 0000                       		dc.w	@PSG-@HashList			;$40 - PSG Settings
00889DEA FF74                       		dc.w	@Null-@HashList			;$50
00889DEC FF74                       		dc.w	@Null-@HashList			;$60
00889DEE FF74                       		dc.w	@Null-@HashList			;$70
00889DF0 FF74                       		dc.w	@Null-@HashList			;$80
00889DF2 FF74                       		dc.w	@Null-@HashList			;$90
00889DF4 FF74                       		dc.w	@Null-@HashList			;$A0
00889DF6 FF74                       		dc.w	@Null-@HashList			;$B0
00889DF8 FF74                       		dc.w	@Null-@HashList			;$C0
00889DFA FF74                       		dc.w	@Null-@HashList			;$D0
00889DFC FF74                       		dc.w	@Null-@HashList			;$E0
00889DFE 0000                       		dc.w	@FixSfx-@HashList		;$F0 - Finish SFX flag (SFX only)
00889E00                            		even
00889E00                            
00889E00                            ; -------------------------------
00889E00                            
00889E00                            @DacStatus:
00889E00 4E75                        rts
00889E02                            
00889E02                            ; -------------------------------
00889E02                            
00889E02                            @FM_Key:
00889E02 0240 000F                  		and.w	#$F,d0
00889E06 E948                       		lsl.w	#4,d0
00889E08 1B40 000D                  		move.b	d0,Chn_FM_Key(a5)
00889E0C 4E75                       		rts
00889E0E                            
00889E0E                            ; -------------------------------
00889E0E                            
00889E0E                            @PSG:
00889E0E 4E75                        rts
00889E10                            
00889E10                            ; -------------------------------
00889E10                            
00889E10                            @FixSfx:
00889E10                            ;    		btst	#bitPriority,(a6)
00889E10                            ;   		bne	@Return
00889E10                            		
00889E10                            ;  		lea	(RAM_SMEG_Buffer),a3
00889E10                            ;  		move.b	snd_flagsBGM(a3),snd_flags(a3)
00889E10                            ; 		moveq 	#0,d0
00889E10                            ;  		move.b	PsgLast(a3),d0
00889E10                            ; 		add.w	#$E0,d0
00889E10                            ; 		bsr	@PutPSG
00889E10                            
00889E10                            ;  		moveq	#0,d0
00889E10                            ;  		move.b	LastPattChn(a6),d0
00889E10                            ; 		bsr	SMEG_FindPrioSlot
00889E10                            ;   		bclr	#0,(a3)
00889E10                             		
00889E10                            ;   		bclr	#bitSfxOn,(a6)				;SFX finished playing
00889E10 4E75                       		rts
00889E12                            		
00889E12                            ; ================================================================
00889E12                            ; -------------------------------
00889E12                            ; Channel play
00889E12                            ; -------------------------------
00889E12                            
00889E12                            @ChannelPlay:	
00889E12 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00889E18 6700 0000                  		beq	@Disabled
00889E1C                            		
00889E1C                            ;                 moveq	#0,d0
00889E1C                            ; 		move.b	Chn_Note(a5),d0
00889E1C                            ; 		sub.w	#1,Chn_Portam(a5)
00889E1C                            ; 		tst.b	Chn_Portam(a5)
00889E1C                            ; 		beq.s	@NoUp
00889E1C                            ; 		add.b	Chn_Portam(a5),d0
00889E1C                            ; 		bra.s	@NoDown
00889E1C                            ; @NoUp:
00889E1C                            ; 		tst.b	Chn_Portam+1(a5)
00889E1C                            ; 		beq.s	@NoDown
00889E1C                            ; 		sub.b	Chn_Portam+1(a5),d0
00889E1C                            ; @NoDown:
00889E1C                            
00889E1C                            ; --------------------------------
00889E1C                            
00889E1C                            ; BGM: Block channel
00889E1C                            
00889E1C 0816 0000                  		btst 	#bitPriority,(a6)
00889E20 6600                       		bne.s	@SFX_Check
00889E22 6100 0000                  		bsr	SMEG_FindPrioSlot
00889E26 4A13                         		tst.b	(a3)
00889E28 6600 FEB4                    		bne	@Return
00889E2C                              		
00889E2C                            ; --------------------------------
00889E2C                            
00889E2C                            ; SFX: Check NoteOff/NoteCut
00889E2C                            ; then clear flag
00889E2C                            
00889E2C                            @SFX_Check:
00889E2C 0816 0000                  		btst 	#bitPriority,(a6)
00889E30 6700                       		beq.s	@NotSFX
00889E32                            ; 		cmp.b	#-1,chn_note(a5)
00889E32                            ; 		beq	@DoIt
00889E32 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
00889E38 6600 0000                  		bne	@NotSFX
00889E3C                            @DoIt:
00889E3C 6100 0000                  		bsr	SMEG_FindPrioSlot
00889E40 4213                         		clr.b	(a3)
00889E42                            @NotSFX:
00889E42                            
00889E42                            ; --------------------------------
00889E42                            
00889E42 4A2D 0007                  		tst.b	Chn_ID(a5)
00889E46 6B00 0000                  		bmi	Chnl_PSG
00889E4A 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00889E50 6C00 0000                  		bge	@ChannelPlay_PCM
00889E54 0C2D 0002 0007             		cmp.b	#FM_3,Chn_ID(a5)
00889E5A 6700 0000                  		beq	@Chn3_ChkSpecial
00889E5E 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
00889E64 6700 0000                  		beq	@Chn6_ChkSmpl
00889E68 6000 0000                  		bra	@ChnPlay_FM
00889E6C                            		
00889E6C                            ; -------------------------------
00889E6C                            ; Play FM6 or DAC sample
00889E6C                            ; -------------------------------
00889E6C                            
00889E6C                            @Chn6_ChkSmpl:
00889E6C 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
00889E72 6700 0000                  		beq	@ChnPlay_FM6
00889E76 0C2D 00FF 000B             		cmp.b	#-1,chn_note(a5)
00889E7C 6700 0000                  		beq	@StopSmpl
00889E80 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
00889E86 6700 0000                  		beq	@StopSmpl
00889E8A                            		
00889E8A 7028                       		moveq	#$28,d0
00889E8C 7206                       		moveq	#6,d1
00889E8E 6100 0000                   		bsr	SMEG_Z80_Off
00889E92 6100 0000                  		bsr	FM_RegWrite_1
00889E96 6100 0000                  		bsr	SMEG_FM_SetPan
00889E9A 6100 0000                  		bsr	SMEG_Z80_On
00889E9E                            		
00889E9E                            ; 		btst 	#bitPriority,(a6)
00889E9E                            ; 		beq.s	@MusicPrio3
00889E9E                            ; 		bsr	SMEG_FindPrioSlot
00889E9E                            ;   		btst	#0,(a3)
00889E9E                            ;   		bne	@return
00889E9E                            ; @MusicPrio3:
00889E9E 6000 0000                  		bra	Audio_Sample_Play
00889EA2                            
00889EA2                            ; Stop
00889EA2                            
00889EA2                            @StopSmpl:
00889EA2                            ; 		btst 	#bitPriority,(a6)
00889EA2                            ; 		bne.s	@NotSfxDAC
00889EA2                            ; 		bsr	SMEG_FindPrioSlot
00889EA2                            ;   		bclr	#0,(a3)
00889EA2                            ; @NotSfxDAC:
00889EA2 6000 0000                  		bra	Audio_Sample_Stop
00889EA6                            		
00889EA6                            ; -------------------------------
00889EA6                            ; Play FM6 Normally
00889EA6                            ; -------------------------------
00889EA6                            
00889EA6                            @ChnPlay_FM6:
00889EA6 103C 002B                  		move.b	#$2B,d0
00889EAA 123C 0000                  		move.b	#$00,d1
00889EAE 6100 0000                  		bsr	SMEG_Z80_Off
00889EB2 6100 0000                  		bsr	FM_RegWrite_1
00889EB6 6100 0000                  		bsr	SMEG_Z80_On
00889EBA 6100 0000                  		bsr	Audio_Sample_Stop
00889EBE 6000 0000                  		bra	@ChnPlay_FM
00889EC2                            		
00889EC2                            ; -------------------------------
00889EC2                            ; Play FM3 Normally
00889EC2                            ; -------------------------------
00889EC2                            
00889EC2                            @Chn3_ChkSpecial:
00889EC2 6100 0000                  		bsr	SMEG_Z80_Off
00889EC6 6100 0000                  		bsr	SMEG_FM_SetPan
00889ECA 6100 0000                  		bsr	SMEG_Z80_On
00889ECE                            		
00889ECE 082E 0003 0001             		btst	#bitSpecial3,snd_flags(a6)
00889ED4 6700 0000                  		beq	@NoSpecial3
00889ED8                            		
00889ED8 6100 0000                  		bsr	ChnlFM_srchIns
00889EDC 0C42 FFFF                  		cmp.w	#-1,d2
00889EE0 6700 0000                  		beq	@NoSpecial3
00889EE4 0802 0006                   		btst	#6,d2
00889EE8 6700 0000                   		beq	@NoSpecial3
00889EEC                            		
00889EEC                            ;   		moveq	#$22,d0
00889EEC                            ;  		move.w	#%00001011,d1
00889EEC                            ; 		bsr	FM_RegWrite_1
00889EEC                            		
00889EEC 7027                         		moveq	#$27,d0		;CH3 enable
00889EEE 323C 0040                   		move.w	#%01000000,d1
00889EF2 6100 0000                   		bsr	SMEG_Z80_Off
00889EF6 6100 0000                  		bsr	FM_RegWrite_1
00889EFA 6100 0000                  		bsr	SMEG_Z80_On
00889EFE                            		
00889EFE 203C A9AD AAAE              		move.l	#$A9ADAAAE,d0
00889F04 322B 000E                   		move.w	$E(a3),d1
00889F08 E059                        		ror.w	#8,d1
00889F0A 6100 0000                   		bsr	SMEG_Z80_Off
00889F0E 6100 0000                  		bsr	FM_RegWrite_1
00889F12 E088                       		lsr.l	#8,d0
00889F14 E089                       		lsr.l	#8,d1
00889F16 6100 0000                  		bsr	FM_RegWrite_1
00889F1A E088                       		lsr.l	#8,d0
00889F1C 322B 000C                   		move.w	$C(a3),d1
00889F20 E059                        		ror.w	#8,d1
00889F22 6100 0000                  		bsr	FM_RegWrite_1
00889F26 E088                       		lsr.l	#8,d0
00889F28 E089                       		lsr.l	#8,d1
00889F2A 6100 0000                  		bsr	FM_RegWrite_1	
00889F2E 6100 0000                    		bsr	SMEG_Z80_On
00889F32                              		
00889F32 203C A2A6 A8AC              		move.l	#$A2A6A8AC,d0
00889F38 322B 000A                   		move.w	$A(a3),d1
00889F3C E059                        		ror.w	#8,d1
00889F3E 6100 0000                   		bsr	SMEG_Z80_Off
00889F42 6100 0000                  		bsr	FM_RegWrite_1
00889F46 E088                       		lsr.l	#8,d0
00889F48 E089                       		lsr.l	#8,d1
00889F4A 6100 0000                  		bsr	FM_RegWrite_1
00889F4E E088                       		lsr.l	#8,d0
00889F50 322B 0008                   		move.w	8(a3),d1
00889F54 E059                        		ror.w	#8,d1
00889F56 6100 0000                  		bsr	FM_RegWrite_1
00889F5A E088                       		lsr.l	#8,d0
00889F5C E089                       		lsr.l	#8,d1
00889F5E 6100 0000                  		bsr	FM_RegWrite_1
00889F62 6100 0000                  		bsr	SMEG_Z80_On
00889F66                            		
00889F66 7028                       		moveq	#$28,d0
00889F68 7200                       		moveq	#0,d1
00889F6A 122D 000D                  		move.b	Chn_FM_Key(a5),d1
00889F6E 822D 0007                  		or.b	Chn_ID(a5),d1
00889F72 6100 0000                  		bsr	SMEG_Z80_Off
00889F76 6100 0000                  		bsr	FM_RegWrite_1
00889F7A 6000 0000                   		bra	SMEG_Z80_On
00889F7E                             		
00889F7E                            @NoSpecial3:
00889F7E 7200                       		moveq	#0,d1
00889F80 7027                         		moveq	#$27,d0
00889F82 6100 0000                   		bsr	SMEG_Z80_Off
00889F86 6100 0000                  		bsr	FM_RegWrite_1
00889F8A 6100 0000                   		bsr	SMEG_Z80_On
00889F8E                            		
00889F8E                            ; -------------------------------
00889F8E                            ; Play FM1-FM5 normally
00889F8E                            ; -------------------------------
00889F8E                            
00889F8E                            @ChnPlay_FM:
00889F8E 6100 0000                  		bsr	SMEG_Z80_Off
00889F92 6100 0000                  		bsr	SMEG_FM_SetPan
00889F96 6100 0000                  		bsr	SMEG_Z80_On
00889F9A                            		
00889F9A 7000                        		moveq	#0,d0
00889F9C 102D 000B                  		move.b	chn_note(a5),d0
00889FA0 0C00 00FF                  		cmp.b	#-1,d0
00889FA4 6700 0000                  		beq	SMEG_FM_KeysOff
00889FA8 0C00 00FE                  		cmp.b	#-2,d0
00889FAC 6700 0000                  		beq	SMEG_FM_TotLvlOff
00889FB0                            		
00889FB0 6100 0000                  		bsr	SMEG_FM_KeysOff
00889FB4                            		
00889FB4 7000                       		moveq	#0,d0
00889FB6 7200                       		moveq	#0,d1
00889FB8 102D 000B                  		move.b	chn_note(a5),d0
00889FBC D040                       		add.w	d0,d0
00889FBE 45F9 0000 0000              		lea	(FreqList_FM),a2
00889FC4 3832 0000                  		move.w	(a2,d0.w),d4
00889FC8 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00889FCC 6000 0000                  		bra	SMEG_SetFreqFM
00889FD0                            @Disabled:
00889FD0 4E75                       		rts
00889FD2                            
00889FD2                            ; -------------------------------
00889FD2                            ; Play PCM
00889FD2                            ; -------------------------------
00889FD2                            
00889FD2                            @ChannelPlay_PCM:	
00889FD2                            ; 		if MCD
00889FD2                            ; 		
00889FD2                            ; 		tst.l	SongPcmSamp(a6)
00889FD2                            ; 		beq.s	@ReturnPCM
00889FD2                            ; 		bmi.s	@ReturnPCM
00889FD2                            ; 		
00889FD2                            ;  		moveq	#0,d1
00889FD2                            ;  		move.b	Chn_ID(a5),d1
00889FD2                            ;    		and.w	#$F,d1
00889FD2                            ;  		move.b	d1,($A12000+CommDataM)
00889FD2                            ;  		move.b	Chn_Pan(a5),d1
00889FD2                            ;  		move.b	d1,($A12000+CommDataM+1)
00889FD2                            ;  		moveq	#CdTask_SetPan,d0
00889FD2                            ;  		bsr	SMEG_CD_Call
00889FD2                            ;  		
00889FD2                            ; 		moveq	#0,d1
00889FD2                            ; 		move.b	Chn_ID(a5),d1
00889FD2                            ; 		and.b	#$F,d1
00889FD2                            ; 		move.b	d1,($A12000+CommDataM)
00889FD2                            ; 		move.w	Chn_Freq(a5),($A12000+CommDataM+2)
00889FD2                            ; 		moveq	#CdTask_SetFreq,d0
00889FD2                            ; 		bsr	SMEG_CD_Call
00889FD2                            ; 		bset	d1,PcmChnOnOff(a6)
00889FD2                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
00889FD2                            ; 		moveq	#CdTask_SetOnOff,d0
00889FD2                            ; 		bsr	SMEG_CD_Call
00889FD2                            ; 		
00889FD2                            ; @ReturnPCM:
00889FD2                            ;  		elseif MARS
00889FD2                            ; 
00889FD2                            ; 		tst.l	SongPcmSamp(a6)
00889FD2                            ; 		beq.s	@ReturnPCM
00889FD2                            ; 		bmi.s	@ReturnPCM
00889FD2                            ; 		
00889FD2                            ;   		moveq	#0,d1
00889FD2                            ;   		moveq	#0,d2
00889FD2                            ;        		move.b	Chn_ID(a5),d1
00889FD2                            ;      		and.w	#$F,d1
00889FD2                            ;       		or.b	Chn_Pan(a5),d1
00889FD2                            ;       		move.b	Chn_Note(a5),d2
00889FD2                            ;   		move.b	d1,(marsreg+comm2)			; Pan+Channel set
00889FD2                            ;   		move.b	d2,(marsreg+comm2+1)			; Note
00889FD2                            ;   		moveq 	#marscall_Play,d0
00889FD2                            ;   		bsr	SMEG_MARS_Call
00889FD2                            ; @ReturnPCM:
00889FD2                            ;  		endif
00889FD2                             		
00889FD2 4E75                       		rts
00889FD4                            
00889FD4                            ; --------------------------
00889FD4                            ; Set FM Frequency
00889FD4                            ; autodetected channel
00889FD4                            ; 
00889FD4                            ; d4 - Freq
00889FD4                            ; --------------------------
00889FD4                            
00889FD4                            SMEG_SetFreqFM:
00889FD4 7A00                       		moveq	#0,d5
00889FD6 1A2D 0007                  		move.b	Chn_ID(a5),d5
00889FDA 0C05 0004                  		cmp.b	#4,d5
00889FDE 6D00                       		blt.s	@FirstFM
00889FE0 0405 0004                  		sub.b	#4,d5
00889FE4                            @FirstFM:
00889FE4 303C 00A4                  		move.w	#$A4,d0
00889FE8 D005                       		add.b	d5,d0
00889FEA 7200                       		moveq	#0,d1
00889FEC E15C                       		rol.w	#8,d4
00889FEE 1204                       		move.b	d4,d1
00889FF0                            		
00889FF0 6100 0000                  		bsr	SMEG_Z80_Off
00889FF4 6100 0000                  		bsr	SMEG_FM_FindWrite
00889FF8 303C 00A0                  		move.w	#$A0,d0
00889FFC D005                       		add.b	d5,d0
00889FFE 7200                       		moveq	#0,d1
0088A000 E15C                       		rol.w	#8,d4
0088A002 1204                       		move.b	d4,d1
0088A004 6100 0000                  		bsr	SMEG_FM_FindWrite
0088A008                            
0088A008 7028                       		moveq	#$28,d0
0088A00A 7200                       		moveq	#0,d1
0088A00C 122D 000D                  		move.b	Chn_FM_Key(a5),d1
0088A010 822D 0007                  		or.b	Chn_ID(a5),d1
0088A014 6100 0000                  		bsr	FM_RegWrite_1
0088A018 6000 0000                  		bra	SMEG_Z80_On
0088A01C                            		
0088A01C                            ; Turn Total Level (the volume) off 
0088A01C                            
0088A01C                            SMEG_FM_TotLvlOff:
0088A01C 162D 0007                   		move.b	chn_id(a5),d3
0088A020 0243 0003                   		and.w	#%11,d3
0088A024 203C 4C44 4840             		move.l	#$4C444840,d0
0088A02A 323C 007F                  		move.w	#$7F,d1
0088A02E 6100 0000                   		bsr	SMEG_Z80_OFF
0088A032 8003                        		or.b	d3,d0
0088A034 6100 0000                   		bsr	SMEG_FM_FindWrite	;oops.
0088A038 E088                        		lsr.l	#8,d0
0088A03A 8003                        		or.b	d3,d0
0088A03C 6100 0000                    		bsr	SMEG_FM_FindWrite
0088A040 E088                        		lsr.l	#8,d0
0088A042 8003                        		or.b	d3,d0
0088A044 6100 0000                    		bsr	SMEG_FM_FindWrite
0088A048 E088                        		lsr.l	#8,d0
0088A04A 8003                        		or.b	d3,d0
0088A04C 6100 0000                   		bsr	SMEG_FM_FindWrite
0088A050 6100 0000                   		bsr	SMEG_Z80_On
0088A054                             		
0088A054                            ; Turn FM Keys off
0088A054                            
0088A054                            SMEG_FM_KeysOff:
0088A054 7028                       		moveq	#$28,d0
0088A056 7200                       		moveq	#0,d1
0088A058 D22D 0007                  		add.b	Chn_ID(a5),d1
0088A05C 6100 0000                   		bsr	SMEG_Z80_Off
0088A060 6100 0000                  		bsr	FM_RegWrite_1
0088A064 6000 0000                  		bra	SMEG_Z80_On
0088A068                            		
0088A068                            ; ----------------------------
0088A068                            ; PSG Channels
0088A068                            ; ----------------------------
0088A068                            
0088A068                            Chnl_PSG:
0088A068 122D 0007                  		move.b	Chn_ID(a5),d1
0088A06C 0C2D 00E0 0007             		cmp.b	#NOISE,Chn_ID(a5)
0088A072 6700                       		beq.s	Chnl_Noise
0088A074                            
0088A074 3601                       		move.w	d1,d3
0088A076 0043 001F                  		or.w	#$1F,d3
0088A07A 102D 000B                  		move.b	chn_note(a5),d0
0088A07E 0C00 00FE                  		cmp.b	#-2,d0
0088A082 6700                       		beq.s	ChnPsg_Rest
0088A084 0C00 00FF                  		cmp.b	#-1,d0
0088A088 6700                       		beq.s	ChnPsg_Rest
0088A08A                            		
0088A08A 45F9 0000 0000             		lea	(FreqList_PSG),a2
0088A090 D040                       		add.w	d0,d0
0088A092 3032 0000                  		move.w	(a2,d0.w),d0
0088A096 3B40 0004                  		move.w	d0,Chn_Portam(a5)
0088A09A 6100 0000                  		bsr	ChnPsg_NoteFreq
0088A09E                            		
0088A09E                            ChnPsg_SetVol:
0088A09E 0043 0010                  		or.w	#$10,d3
0088A0A2 0043 000F                  		or.w	#$F,d3
0088A0A6 4A2D 0009                  		tst.b	chn_vol(a5)
0088A0AA 6700                       		beq.s	ChnPsg_DoVol
0088A0AC 0243 00F0                  		and.w	#$F0,d3
0088A0B0 0C2D 0040 0009             		cmp.b	#64,chn_vol(a5)
0088A0B6 6C00                         		bge.s	ChnPsg_DoVol
0088A0B8 7000                         		moveq	#0,d0
0088A0BA 102D 0009                     		move.b	chn_vol(a5),d0
0088A0BE 4440                        		neg.w	d0
0088A0C0 E448                          		lsr.w	#2,d0
0088A0C2 0240 000F                    		and.w	#%1111,d0
0088A0C6 8640                         		or.w	d0,d3
0088A0C8                            
0088A0C8                            
0088A0C8                            ChnPsg_DoVol:
0088A0C8 13C3 00C0 0011              		move.b	d3,(sound_psg)
0088A0CE                            Chnl_Return:
0088A0CE 4E75                       		rts
0088A0D0                            		
0088A0D0                            ChnPsg_Rest:
0088A0D0 61F6                        		bsr.s	ChnPsg_DoVol
0088A0D2                            ; 		btst 	#bitPriority,(a6)
0088A0D2                            ; 		bne.s	Chnl_Return
0088A0D2                            ; 		bsr	SMEG_FindPrioSlot
0088A0D2                            ;   		bclr	#0,(a3)
0088A0D2 4E75                         		rts
0088A0D4                              		
0088A0D4                            ; ----------------------------
0088A0D4                            ; PSG Noise channel
0088A0D4                            ; ----------------------------
0088A0D4                            
0088A0D4                            Chnl_NOISE:
0088A0D4 246E 0010                  		movea.l	snd_instr(a6),a2
0088A0D8 302A 0004                  		move.w	instDNoise(a2),d0
0088A0DC D4C0                       		adda	d0,a2
0088A0DE                            		
0088A0DE 303C 0000                   		move.w	#%000,d0
0088A0E2                            @next:
0088A0E2 4A52                       		tst.w	(a2)
0088A0E4 6B00                       		bmi.s	@default
0088A0E6 7400                       		moveq	#0,d2
0088A0E8 142D 0008                  		move.b	chn_inst(a5),d2
0088A0EC B452                       		cmp.w	(a2),d2
0088A0EE 6700                       		beq.s	@found
0088A0F0 D4FC 0004                  		adda	#4,a2
0088A0F4 60EC                       		bra.s	@next
0088A0F6                            @found:
0088A0F6 302A 0002                   		move.w	2(a2),d0
0088A0FA                            
0088A0FA                            @default:
0088A0FA 323C 00E0                  		move.w	#$E0,d1
0088A0FE 3601                       		move.w	d1,d3
0088A100 0043 001F                  		or.w	#$1F,d3
0088A104                            
0088A104 142D 000B                  		move.b	chn_note(a5),d2
0088A108 0C02 00FF                  		cmp.b	#-1,d2
0088A10C 67C2                       		beq.s	ChnPsg_Rest
0088A10E 0C02 00FE                  		cmp.b	#-2,d2
0088A112 67BC                       		beq.s	ChnPsg_Rest
0088A114                            		
0088A114 08AE 0002 0001             		bclr	#bitTone3,snd_flags(a6)
0088A11A 0C40 0003                  		cmp.w	#%011,d0
0088A11E 6700                       		beq.s	@valdnoise
0088A120 0C40 0007                  		cmp.w	#%111,d0
0088A124 6600                       		bne.s	@deftone
0088A126                            @valdnoise:
0088A126 08EE 0002 0001             		bset	#bitTone3,snd_flags(a6)
0088A12C 13FC 00DF 00C0 0011        		move.b	#$C0|$1F,(sound_psg)
0088A134 8240                       		or.w	d0,d1
0088A136 13C1 00C0 0011             		move.b	d1,(sound_psg)
0088A13C                            		
0088A13C 102D 000B                  		move.b	chn_note(a5),d0
0088A140 0C00 00FF                  		cmp.b	#-1,d0
0088A144 6700 FF8A                  		beq	ChnPsg_Rest
0088A148 0C00 00FE                  		cmp.b	#-2,d0
0088A14C 6700 FF82                  		beq	ChnPsg_Rest
0088A150 0640 000C                  		add.w	#12,d0		; TODO: checar
0088A154 323C 00C0                  		move.w	#$C0,d1		; PSG3 freq
0088A158                            		
0088A158 45F9 0000 0000             		lea	(FreqList_PSG),a2
0088A15E D040                       		add.w	d0,d0
0088A160 3032 0000                  		move.w	(a2,d0.w),d0
0088A164 3B40 0004                  		move.w	d0,Chn_Portam(a5)
0088A168 6000 0000                  		bra	ChnPsg_NoteFreq
0088A16C                            		
0088A16C                            ; 		move.w	#$E0,d3		; NOISE volume
0088A16C                            ; 		bra	ChnPsg_SetVol
0088A16C                            		
0088A16C                            @deftone:
0088A16C 3601                       		move.w	d1,d3
0088A16E 3400                       		move.w	d0,d2
0088A170 0242 0007                  		and.w	#%111,d2
0088A174 8242                       		or.w	d2,d1
0088A176 13C1 00C0 0011             		move.b	d1,(sound_psg)
0088A17C 4E75                       		rts
0088A17E                            		
0088A17E                            ; 		move.w	#$E0,d3
0088A17E                            ; 		bra	ChnPsg_SetVol
0088A17E                            		
0088A17E                            ; ----------------------------
0088A17E                            ; PSG Noise channel Tone 3
0088A17E                            ; 
0088A17E                            ; input:
0088A17E                            ; d0 - freq
0088A17E                            ; d1 - channel
0088A17E                            ; 
0088A17E                            ; returns:
0088A17E                            ; d3 - last psg freq | channel
0088A17E                            ; ----------------------------
0088A17E                            
0088A17E                            ChnPsg_NoteFreq:
0088A17E 3601                       		move.w	d1,d3
0088A180 3400                       		move.w	d0,d2
0088A182 0242 000F                  		and.w	#%1111,d2
0088A186 8242                       		or.w	d2,d1
0088A188 13C1 00C0 0011             		move.b	d1,(sound_psg)
0088A18E E848                       		lsr.w	#4,d0
0088A190 0240 003F                  		and.w	#%00111111,d0
0088A194 13C0 00C0 0011             		move.b	d0,(sound_psg)
0088A19A 4E75                       		rts
0088A19C                            
0088A19C                            ; -------------------------------
0088A19C                            ; PSG Frequencies
0088A19C                            ; -------------------------------
0088A19C                            
0088A19C                            FreqList_PSG:
0088A19C 0000                       		dc.w 0		;C-0 $0
0088A19E 0000                       		dc.w 0
0088A1A0 0000                       		dc.w 0
0088A1A2 0000                       		dc.w 0
0088A1A4 0000                       		dc.w 0
0088A1A6 0000                       		dc.w 0
0088A1A8 0000                       		dc.w 0
0088A1AA 0000                       		dc.w 0
0088A1AC 0000                       		dc.w 0
0088A1AE 0000                       		dc.w 0
0088A1B0 0000                       		dc.w 0
0088A1B2 0000                       		dc.w 0
0088A1B4                            		
0088A1B4 0000                       		dc.w 0		;C-1 $C
0088A1B6 0000                       		dc.w 0
0088A1B8 0000                       		dc.w 0
0088A1BA 0000                       		dc.w 0
0088A1BC 0000                       		dc.w 0
0088A1BE 0000                       		dc.w 0
0088A1C0 0000                       		dc.w 0
0088A1C2 0000                       		dc.w 0
0088A1C4 0000                       		dc.w 0
0088A1C6 0000                       		dc.w 0
0088A1C8 0000                       		dc.w 0
0088A1CA 0000                       		dc.w 0
0088A1CC                            		
0088A1CC 0000                       		dc.w 0		;C-2 $18
0088A1CE 0000                       		dc.w 0
0088A1D0 0000                       		dc.w 0
0088A1D2 0000                       		dc.w 0
0088A1D4 0000                       		dc.w 0
0088A1D6 0000                       		dc.w 0
0088A1D8 0000                       		dc.w 0
0088A1DA 0000                       		dc.w 0
0088A1DC 0000                       		dc.w 0
0088A1DE 0000                       		dc.w 0
0088A1E0 0000                       		dc.w 0
0088A1E2 0000                       		dc.w 0
0088A1E4                            
0088A1E4 0000                       		dc.w 0		;C-3 $24
0088A1E6 0000                       		dc.w 0
0088A1E8 0000                       		dc.w 0
0088A1EA 0000                       		dc.w 0
0088A1EC 0000                       		dc.w 0
0088A1EE 0000                       		dc.w 0
0088A1F0 0000                       		dc.w 0
0088A1F2 0000                       		dc.w 0
0088A1F4 0000                       		dc.w 0
0088A1F6 03F8                       		dc.w $3F8
0088A1F8 03BF                                       dc.w $3BF
0088A1FA 0389                                       dc.w $389
0088A1FC                                            
0088A1FC 0356                       		dc.w $356	;C-4 $30
0088A1FE 0326                                       dc.w $326
0088A200 02F9                                       dc.w $2F9
0088A202 02CE                                       dc.w $2CE
0088A204 02A5                                       dc.w $2A5
0088A206 0280                                       dc.w $280
0088A208 025C                                       dc.w $25C
0088A20A 023A                                       dc.w $23A
0088A20C 021A                                       dc.w $21A
0088A20E 01FB                       		dc.w $1FB
0088A210 01DF                                       dc.w $1DF
0088A212 01C4                                       dc.w $1C4
0088A214                                            
0088A214 01AB                                       dc.w $1AB	;C-5 $3C
0088A216 0193                                       dc.w $193
0088A218 017D                                       dc.w $17D
0088A21A 0167                                       dc.w $167
0088A21C 0153                                       dc.w $153
0088A21E 0140                                       dc.w $140
0088A220 012E                       		dc.w $12E
0088A222 011D                                       dc.w $11D
0088A224 010D                                       dc.w $10D
0088A226 00FE                                       dc.w $FE
0088A228 00EF                                       dc.w $EF
0088A22A 00E2                                       dc.w $E2
0088A22C                                            
0088A22C 00D6                                       dc.w $D6	;C-6 $48
0088A22E 00C9                                       dc.w $C9
0088A230 00BE                                       dc.w $BE
0088A232 00B4                                       dc.w $B4
0088A234 00A9                       		dc.w $A9
0088A236 00A0                                       dc.w $A0
0088A238 0097                                       dc.w $97
0088A23A 008F                                       dc.w $8F
0088A23C 0087                                       dc.w $87
0088A23E 007F                                       dc.w $7F
0088A240 0078                                       dc.w $78
0088A242 0071                                       dc.w $71
0088A244                                            
0088A244 006B                                       dc.w $6B	;C-7 $54
0088A246 0065                                       dc.w $65
0088A248 005F                       		dc.w $5F
0088A24A 005A                                       dc.w $5A
0088A24C 0055                                       dc.w $55
0088A24E 0050                                       dc.w $50
0088A250 004B                                       dc.w $4B
0088A252 0047                                       dc.w $47
0088A254 0043                                       dc.w $43
0088A256 0040                                       dc.w $40
0088A258 003C                                       dc.w $3C
0088A25A 0039                                       dc.w $39
0088A25C                                            
0088A25C 0036                       		dc.w $36	;C-8 $60
0088A25E 0033                                       dc.w $33
0088A260 0030                                       dc.w $30
0088A262 002D                                       dc.w $2D
0088A264 002B                                       dc.w $2B
0088A266 0028                                       dc.w $28
0088A268 0026                                       dc.w $26
0088A26A 0024                                       dc.w $24
0088A26C 0022                                       dc.w $22
0088A26E 0020                                       dc.w $20
0088A270 001F                       		dc.w $1F
0088A272 001D                                       dc.w $1D
0088A274                                            
0088A274 001B                                       dc.w $1B	;C-9 $6C
0088A276 001A                                       dc.w $1A
0088A278 0018                                       dc.w $18
0088A27A 0017                                       dc.w $17
0088A27C 0016                                       dc.w $16
0088A27E 0015                                       dc.w $15
0088A280 0013                                       dc.w $13
0088A282 0012                                       dc.w $12
0088A284 0011                       		dc.w $11
0088A286 0010                        		dc.w $10 ;Custom...
0088A288 0009                        		dc.w $9
0088A28A 0008                        		dc.w $8
0088A28C                            
0088A28C                            		even
0088A28C                            		
0088A28C                            ; -------------------------------
0088A28C                            ; FM Frequencies
0088A28C                            ; -------------------------------
0088A28C                            
0088A28C                            FreqList_FM:
0088A28C                            ; 		dc.w $269	;NULL
0088A28C 028D                       		dc.w $28d	;C-0 $00
0088A28E 02B4                       		dc.w $2b4
0088A290 02DD                       		dc.w $2dd
0088A292 0309                       		dc.w $309
0088A294 0337                       		dc.w $337
0088A296 0368                       		dc.w $368
0088A298 039C                       		dc.w $39c
0088A29A 03D3                       		dc.w $3d3
0088A29C 040D                       		dc.w $40d
0088A29E 044B                       		dc.w $44b
0088A2A0 048C                       		dc.w $48c
0088A2A2 0269                       		dc.w $269
0088A2A4 028D                       		dc.w $28d	;C-1 $0C
0088A2A6 02B4                       		dc.w $2b4
0088A2A8 02DD                       		dc.w $2dd
0088A2AA 0309                       		dc.w $309
0088A2AC 0337                       		dc.w $337
0088A2AE 0368                       		dc.w $368
0088A2B0 039C                       		dc.w $39c
0088A2B2 03D3                       		dc.w $3d3
0088A2B4 040D                       		dc.w $40d
0088A2B6 044B                       		dc.w $44b
0088A2B8 048C                       		dc.w $48c
0088A2BA 0A69                       		dc.w $a69
0088A2BC 0A8D                       		dc.w $a8d	;C-2 $18
0088A2BE 0AB4                       		dc.w $ab4
0088A2C0 0ADD                       		dc.w $add
0088A2C2 0B09                       		dc.w $b09
0088A2C4 0B37                       		dc.w $b37
0088A2C6 0B68                       		dc.w $b68
0088A2C8 0B9C                       		dc.w $b9c
0088A2CA 0BD3                       		dc.w $bd3
0088A2CC 0C0D                       		dc.w $c0d
0088A2CE 0C4B                       		dc.w $c4b
0088A2D0 0C8C                       		dc.w $c8c
0088A2D2 1269                       		dc.w $1269
0088A2D4 128D                       		dc.w $128d	;C-3 $24
0088A2D6 12B4                       		dc.w $12b4
0088A2D8 12DD                       		dc.w $12dd
0088A2DA 1309                       		dc.w $1309
0088A2DC 1337                       		dc.w $1337
0088A2DE 1368                       		dc.w $1368
0088A2E0 139C                       		dc.w $139c
0088A2E2 13D3                       		dc.w $13d3
0088A2E4 140D                       		dc.w $140d
0088A2E6 144B                       		dc.w $144b
0088A2E8 148C                       		dc.w $148c
0088A2EA 1A69                       		dc.w $1a69
0088A2EC 1A8D                       		dc.w $1a8d	;C-4 $30
0088A2EE 1AB4                       		dc.w $1ab4
0088A2F0 1ADD                       		dc.w $1add
0088A2F2 1B09                       		dc.w $1b09
0088A2F4 1B37                       		dc.w $1b37
0088A2F6 1B68                       		dc.w $1b68
0088A2F8 1B9C                       		dc.w $1b9c
0088A2FA 1BD3                       		dc.w $1bd3
0088A2FC 1C0D                       		dc.w $1c0d
0088A2FE 1C4B                       		dc.w $1c4b
0088A300 1C8C                       		dc.w $1c8c
0088A302 2269                       		dc.w $2269
0088A304 228D                       		dc.w $228d	;C-5 $3C
0088A306 22B4                       		dc.w $22b4
0088A308 22DD                       		dc.w $22dd
0088A30A 2309                       		dc.w $2309
0088A30C 2337                       		dc.w $2337
0088A30E 2368                       		dc.w $2368
0088A310 239C                       		dc.w $239c
0088A312 23D3                       		dc.w $23d3
0088A314 240D                       		dc.w $240d
0088A316 244B                       		dc.w $244b
0088A318 248C                       		dc.w $248c
0088A31A 2A69                       		dc.w $2a69
0088A31C 2A8D                       		dc.w $2a8d	;C-6 $48
0088A31E 2AB4                       		dc.w $2ab4
0088A320 2ADD                       		dc.w $2add
0088A322 2B09                       		dc.w $2b09
0088A324 2B37                       		dc.w $2b37
0088A326 2B68                       		dc.w $2b68
0088A328 2B9C                       		dc.w $2b9c
0088A32A 2BD3                       		dc.w $2bd3
0088A32C 2C0D                       		dc.w $2c0d
0088A32E 2C4B                       		dc.w $2c4b
0088A330 2C8C                       		dc.w $2c8c
0088A332 3269                       		dc.w $3269	;C-7 $54
0088A334 328D                       		dc.w $328d
0088A336 32B4                       		dc.w $32b4
0088A338 32DD                       		dc.w $32dd
0088A33A 3309                       		dc.w $3309
0088A33C 3337                       		dc.w $3337
0088A33E 3368                       		dc.w $3368
0088A340 339C                       		dc.w $339c
0088A342 33D3                       		dc.w $33d3
0088A344 340D                       		dc.w $340d
0088A346 344B                       		dc.w $344b
0088A348 348C                       		dc.w $348c
0088A34A                            		even
0088A34A                            		
0088A34A                            ; ; -------------------------------
0088A34A                            ; ; Mute/Rest channel
0088A34A                            ; ; -------------------------------
0088A34A                            ; 
0088A34A                            ; SMEG_ChannelRest:
0088A34A                            ; 		cmp.b	#$FF,Chn_ID(a5)
0088A34A                            ; 		beq	@Return
0088A34A                            ; 		
0088A34A                            ; ; 		btst	#bitPriority,(a6)
0088A34A                            ; ; 		beq.s	@SFX_Mode
0088A34A                            ; ; 		btst	#bitSfxOn,(RAM_SMEG_SfxBuff)
0088A34A                            ; ; 		beq.s	@SFX_Mode
0088A34A                            ; ;  		lea	(RAM_SMEG_PrioList),a3
0088A34A                            ; ;  		moveq	#0,d1
0088A34A                            ; ;  		move.b	LastPattChn(a6),d1
0088A34A                            ; ; 		btst	#0,(a3,d1.w)
0088A34A                            ; ; 		bne	@Return
0088A34A                            ; ; @SFX_Mode:
0088A34A                            ; 
0088A34A                            ; 		tst.b	Chn_ID(a5)
0088A34A                            ; 		bmi.s	@PSG_Rest
0088A34A                            ; 
0088A34A                            ;                 cmp.b	#6,Chn_ID(a5)
0088A34A                            ;                 bne.s	@NoChk6
0088A34A                            ; 		btst	#bitFmDac,snd_flags(a6)
0088A34A                            ; 		bne.s	@DAC_Rest
0088A34A                            ; 
0088A34A                            ; @NoChk6:
0088A34A                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
0088A34A                            ; 		bge	@PCM_Rest
0088A34A                            ; 		
0088A34A                            ; 		moveq	#$28,d0
0088A34A                            ;                 moveq	#0,d1
0088A34A                            ; 		move.b	Chn_ID(a5),d1
0088A34A                            ; 		bsr	SMEG_Z80_Off
0088A34A                            ; 		bsr	FM_RegWrite_1
0088A34A                            ; 		bsr	SMEG_Z80_On
0088A34A                            ; 
0088A34A                            ; @Return:
0088A34A                            ; 		rts
0088A34A                            ; 
0088A34A                            ; ; -------------------------------
0088A34A                            ; ; PSG Rest
0088A34A                            ; ; -------------------------------
0088A34A                            ; 
0088A34A                            ; @PSG_Rest:
0088A34A                            ; 		moveq	#0,d0
0088A34A                            ; 		move.b	Chn_ID(a5),d0
0088A34A                            ; 		add.b	#$1F,d0
0088A34A                            ; 		move.b	d0,($C00011)
0088A34A                            ; 
0088A34A                            ; @Disabled:
0088A34A                            ; 		rts
0088A34A                            ; 
0088A34A                            ; ; -------------------------------
0088A34A                            ; ; DAC Rest
0088A34A                            ; ; -------------------------------
0088A34A                            ; 
0088A34A                            ; @DAC_Rest:
0088A34A                            ;   		bsr	SMEG_Z80_Off
0088A34A                            ; 		moveq	#$2B,d0
0088A34A                            ;                 moveq	#0,d1
0088A34A                            ;   		bsr	FM_RegWrite_1
0088A34A                            ; 
0088A34A                            ; 		moveq	#0,d0
0088A34A                            ; 		move.b	d0,($A001E0+$D)
0088A34A                            ; 		bsr	SMEG_Z80_On
0088A34A                            ; 		rts
0088A34A                            ; 
0088A34A                            ; ; -------------------------------
0088A34A                            ; ; PCM Rest
0088A34A                            ; ; -------------------------------
0088A34A                            ; 
0088A34A                            ; @PCM_Rest:
0088A34A                            ;  		if MCD
0088A34A                            ;  		
0088A34A                            ; 		tst.l	SongPcmSamp(a6)
0088A34A                            ; 		beq.s	@ReturnPCM
0088A34A                            ; 		bmi.s	@ReturnPCM
0088A34A                            ; 		
0088A34A                            ; 		moveq	#0,d1
0088A34A                            ; 		move.b	Chn_ID(a5),d1
0088A34A                            ; 		and.b	#$F,d1
0088A34A                            ; 		bclr	d1,PcmChnOnOff(a6)
0088A34A                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
0088A34A                            ; 		moveq	#CdTask_SetOnOff,d0
0088A34A                            ; 		bsr	SMEG_CD_Call
0088A34A                            ; 		
0088A34A                            ;  		elseif MARS
0088A34A                            ;  		
0088A34A                            ; 		tst.l	SongPcmSamp(a6)
0088A34A                            ; 		beq.s	@ReturnPCM
0088A34A                            ; 		bmi.s	@ReturnPCM
0088A34A                            ; 		
0088A34A                            ;   		moveq	#0,d0
0088A34A                            ;   		move.b	Chn_ID(a5),d0
0088A34A                            ;   		and.w	#$F,d0
0088A34A                            ;   		move.b	d0,(marsreg+comm2)
0088A34A                            ;   		moveq	#marscall_Stop,d0
0088A34A                            ;   		bsr	SMEG_MARS_Call
0088A34A                            ;     		
0088A34A                            ; 		endif
0088A34A                            ; @ReturnPCM:
0088A34A                            ; 		rts
0088A34A                            		
0088A34A                            ; ================================================================
0088A34A                            ; Subs
0088A34A                            ; ================================================================
0088A34A                            
0088A34A                            ; -------------------------------------------
0088A34A                            ; Extra channels communication
0088A34A                            ; -------------------------------------------
0088A34A                            
0088A34A                            SMEG_CD_Call:
0088A34A 4E75                       		rts
0088A34C                            
0088A34C                            SMEG_MARS_Call:
0088A34C                            ;  		bsr	Mars_Task_Slave
0088A34C                            ;  		bra	Mars_Wait_Slave
0088A34C 4E75                        		rts
0088A34E                             		
0088A34E                            ; -------------------------------------------
0088A34E                            ; Set instrument
0088A34E                            ; -------------------------------------------
0088A34E                            
0088A34E                            SMEG_SetVoice:
0088A34E 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
0088A354 6700 0000                  		beq	@Return
0088A358                            		
0088A358 0816 0000                  		btst	#bitPriority,(a6)
0088A35C 6600                       		bne.s	@SFX_ModeV
0088A35E 6100 0000                  		bsr	SMEG_FindPrioSlot
0088A362 4A13                         		tst.b	(a3)
0088A364 6600 0000                    		bne	@Return
0088A368                            @SFX_ModeV:
0088A368                            
0088A368                            
0088A368 4AAE 0010                  		tst.l	snd_instr(a6)
0088A36C 6700 0000                  		beq	@Return
0088A370                            		
0088A370 4A2D 0007                  		tst.b	Chn_ID(a5)
0088A374 6B00                       		bmi.s	@Return
0088A376 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
0088A37C 6C00 0000                  		bge	SMEG_SetVoice_PCM
0088A380 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
0088A386 6700 0000                  		beq	SMEG_SetVoice_DAC
0088A38A                            		
0088A38A 6000 0000                   		bra	SetVoice_FM
0088A38E                            @Return:
0088A38E 4E75                        		rts
0088A390                            		
0088A390                            ; -------------------------------------------
0088A390                            ; Send DAC
0088A390                            ; -------------------------------------------
0088A390                            
0088A390                            SMEG_SetVoice_DAC:
0088A390 6100 0000                  		bsr	ChnlFM_srchIns
0088A394 0C42 FFFF                  		cmp.w	#-1,d2
0088A398 6700                       		beq.s	@Return
0088A39A                            		
0088A39A 0802 0007                   		btst	#7,d2
0088A39E 6600                        		bne.s	@Sample_Mode
0088A3A0 08AE 0000 0001             		bclr	#bitFmDac,snd_flags(a6)
0088A3A6 6000 0000                  		bra	SetVoice_FM
0088A3AA                             		
0088A3AA                            @Sample_Mode:
0088A3AA 08EE 0000 0001             		bset	#bitFmDac,snd_flags(a6)
0088A3B0 202B 0004                  		move.l	4(a3),d0
0088A3B4 222B 0008                  		move.l	8(a3),d1
0088A3B8 0481 0000 0001             		sub.l	#1,d1
0088A3BE 242B 000C                  		move.l	$C(a3),d2
0088A3C2 7600                       		moveq	#0,d3
0088A3C4 162D 000B                  		move.b	chn_note(a5),d3
0088A3C8 D66B 0002                   		add.w	2(a3),d3
0088A3CC 6000 0000                   		bra	Audio_Sample_Set
0088A3D0                            @Return:
0088A3D0 4E75                       		rts
0088A3D2                            		
0088A3D2                            ; -------------------------------------------
0088A3D2                            ; Send FM
0088A3D2                            ; -------------------------------------------
0088A3D2                            
0088A3D2                            SetVoice_FM:
0088A3D2 6100 0000                  		bsr	ChnlFM_srchIns
0088A3D6 08AE 0003 0001             		bclr	#bitSpecial3,snd_flags(a6)
0088A3DC 0C42 FFFF                  		cmp.w	#-1,d2
0088A3E0 6700 0000                  		beq	@Return
0088A3E4 0802 0007                   		btst	#7,d2
0088A3E8 6600 0000                   		bne	@Return
0088A3EC 0802 0006                   		btst	#6,d2
0088A3F0 6700                        		beq.s	@notFM3
0088A3F2 08EE 0003 0001              		bset	#bitSpecial3,snd_flags(a6)
0088A3F8                            @notFM3:
0088A3F8                            
0088A3F8                            ;  		adda.w	#4,a3
0088A3F8 266B 0004                  		movea.l	4(a3),a3
0088A3FC 7000                       		moveq	#0,d0
0088A3FE 102D 0007                  		move.b	Chn_ID(a5),d0
0088A402 0C00 0004                  		cmp.b	#4,d0
0088A406 6D00                       		blt.s	@Low3
0088A408 0400 0004                  		sub.b	#4,d0
0088A40C                            @Low3:
0088A40C                            
0088A40C 4840                       		swap	d0
0088A40E 303C 0028                  		move.w	#$28,d0
0088A412 7200                       		moveq	#0,d1
0088A414 122D 0007                  		move.b	Chn_ID(a5),d1
0088A418 6100 0000                  		bsr	SMEG_Z80_Off
0088A41C 6100 0000                  		bsr	FM_RegWrite_1
0088A420 4840                       		swap	d0
0088A422                            
0088A422 45FA 0000                  		lea	SMEG_FM_RegList(pc),a2
0088A426 3C00                       		move.w	d0,d6
0088A428 7818                       		moveq	#$18,d4
0088A42A                            @Next:
0088A42A 3A06                       		move.w	d6,d5
0088A42C 101A                       		move.b	(a2)+,d0
0088A42E 3600                       		move.w	d0,d3
0088A430 D045                       		add.w	d5,d0
0088A432 121B                       		move.b	(a3)+,d1
0088A434                            
0088A434 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
0088A43A 6C00                       		bge.s	@Chn456
0088A43C 6100 0000                  		bsr	FM_RegWrite_1
0088A440 51CC FFE8                  		dbf	d4,@Next
0088A444 6000                       		bra.s	@BackZ80
0088A446                            
0088A446                            @Chn456:
0088A446 6100 0000                  		bsr	FM_RegWrite_2
0088A44A 51CC FFDE                  		dbf	d4,@Next
0088A44E                            @BackZ80:
0088A44E 6100 0000                  		bsr	SMEG_Z80_On
0088A452                            @Return:
0088A452 4E75                       		rts
0088A454                            
0088A454                            ; -------------------------------------------
0088A454                            ; Set FM panning
0088A454                            ; -------------------------------------------
0088A454                            
0088A454                            SMEG_FM_SetPan:
0088A454 4A2D 0007                  		tst.b	Chn_ID(a5)
0088A458 6B00 0000                  		bmi	@Return
0088A45C                            		
0088A45C 7200                       		moveq	#0,d1
0088A45E 122D 000C                    		move.b	chn_pan(a5),d1
0088A462 EC49                         		lsr.w	#6,d1
0088A464 0241 0003                    		and.w	#%11,d1
0088A468 123B 1000                    		move.b	@list(pc,d1.w),d1
0088A46C 0241 00C0                    		and.w	#%11000000,d1
0088A470 303C 00B4                    		move.w	#$B4,d0
0088A474 142D 0007                    		move.b	chn_id(a5),d2
0088A478 0242 0003                    		and.w	#%11,d2
0088A47C 8042                         		or.w	d2,d0
0088A47E 6000 0000                   		bra	SMEG_FM_FindWrite
0088A482                            		
0088A482 8080 C040                  @list:		dc.b $80,$80,$C0,$40
0088A486                            		even
0088A486                            		
0088A486                            		
0088A486 303C 00B4                  		move.w	#$B4,d0
0088A48A 7400                       		moveq	#0,d2
0088A48C 142D 0007                  		move.b	Chn_ID(a5),d2
0088A490 7200                       		moveq	#0,d1
0088A492 122D 000C                  		move.b	Chn_Pan(a5),d1
0088A496                            
0088A496 6100 0000                  		bsr	SMEG_Z80_Off
0088A49A 0C02 0003                  		cmp.b	#3,d2
0088A49E 6E00                       		bgt.s	@SecondFM
0088A4A0 D042                       		add.w	d2,d0
0088A4A2 6100 0000                  		bsr	FM_RegWrite_1
0088A4A6 6000                       		bra.s	@BackZ80
0088A4A8                            @SecondFM:
0088A4A8 0442 0004                  		sub.w	#4,d2
0088A4AC D042                       		add.w	d2,d0
0088A4AE 6100 0000                  		bsr	FM_RegWrite_2
0088A4B2                            @BackZ80:
0088A4B2 6100 0000                  		bsr	SMEG_Z80_On
0088A4B6                            @Return:
0088A4B6 4E75                       		rts
0088A4B8                            
0088A4B8                            ; ---------------------
0088A4B8                            
0088A4B8                            ChnlFM_srchIns:
0088A4B8 266E 0010                  		movea.l	snd_instr(a6),a3
0088A4BC 302B 0000                   		move.w	instDYmha(a3),d0
0088A4C0 D6C0                        		adda	d0,a3
0088A4C2                            @next:
0088A4C2 4841                       		swap	d1
0088A4C4 4A53                       		tst.w	(a3)
0088A4C6 6B00 0000                   		bmi	@NoteOff
0088A4CA 7000                        		moveq	#0,d0
0088A4CC 102D 0008                  		move.b	chn_inst(a5),d0
0088A4D0 3213                       		move.w	(a3),d1
0088A4D2 3401                       		move.w	d1,d2
0088A4D4 0241 003F                  		and.w	#$3F,d1
0088A4D8 B041                       		cmp.w	d1,d0
0088A4DA 6700                       		beq.s	@found
0088A4DC D6FC 0008                  		adda	#8,a3		;inst,oct,firstlong
0088A4E0 0802 0007                  		btst	#7,d2
0088A4E4 6600                       		bne.s	@doit
0088A4E6 0802 0006                  		btst	#6,d2
0088A4EA 67D6                       		beq.s	@next
0088A4EC                            @doit:
0088A4EC D6FC 0008                  		adda	#8,a3		;scndlong,thrdlong
0088A4F0 60D0                       		bra.s	@next
0088A4F2                            @NoteOff:
0088A4F2 4841                       		swap	d1
0088A4F4 74FF                       		moveq	#-1,d2
0088A4F6                            @found:
0088A4F6 4E75                       		rts
0088A4F8                            		
0088A4F8                            ; --------------------------------------------
0088A4F8                            ; Play a sample
0088A4F8                            ;
0088A4F8                            ; Input:
0088A4F8                            ; d0 | LONG - Start
0088A4F8                            ; d1 | LONG - End
0088A4F8                            ; d2 | LONG - Loop point
0088A4F8                            ;              0 = From start
0088A4F8                            ;             -1 = No loop
0088A4F8                            ; d3 | WORD - Note ($3C - default)
0088A4F8                            ; --------------------------------------------
0088A4F8                            
0088A4F8                            Audio_Sample_Set:
0088A4F8 6100 0000                  		bsr	SMEG_Z80_Off
0088A4FC                            		
0088A4FC 41F9 00A0 0180             		lea	($A00180),a0
0088A502 E198                       		rol.l	#8,d0
0088A504 10C0                       		move.b	d0,(a0)+
0088A506 E198                       		rol.l	#8,d0
0088A508 10C0                       		move.b	d0,(a0)+		
0088A50A E198                       		rol.l	#8,d0
0088A50C 10C0                       		move.b	d0,(a0)+
0088A50E E198                       		rol.l	#8,d0
0088A510 10C0                       		move.b	d0,(a0)+
0088A512                            		
0088A512 0481 0000 0001              		sub.l	#1,d1
0088A518 E199                       		rol.l	#8,d1
0088A51A 10C1                       		move.b	d1,(a0)+
0088A51C E199                       		rol.l	#8,d1
0088A51E 10C1                       		move.b	d1,(a0)+		
0088A520 E199                       		rol.l	#8,d1
0088A522 10C1                       		move.b	d1,(a0)+
0088A524 E199                       		rol.l	#8,d1
0088A526 10C1                       		move.b	d1,(a0)+
0088A528                            		
0088A528 7200                       		moveq	#0,d1
0088A52A 2800                       		move.l	d0,d4
0088A52C 0C82 FFFF FFFF             		cmp.l	#-1,d2
0088A532 6700                       		beq.s	@no_loop
0088A534 7202                       		moveq	#2,d1
0088A536 2800                       		move.l	d0,d4
0088A538 D882                       		add.l	d2,d4
0088A53A                            @no_loop:
0088A53A E19C                       		rol.l	#8,d4
0088A53C 10C4                       		move.b	d4,(a0)+
0088A53E E19C                       		rol.l	#8,d4
0088A540 10C4                       		move.b	d4,(a0)+		
0088A542 E19C                       		rol.l	#8,d4
0088A544 10C4                       		move.b	d4,(a0)+
0088A546 E19C                       		rol.l	#8,d4
0088A548 10C4                       		move.b	d4,(a0)+
0088A54A                            
0088A54A 1081                       		move.b	d1,(a0)
0088A54C                            		
0088A54C 3003                       		move.w	d3,d0
0088A54E 6000 0000                  		bra	AudioSmplNote_go
0088A552                            
0088A552                            ; --------------------------------------------
0088A552                            ; Stop the current sample
0088A552                            ; --------------------------------------------
0088A552                            
0088A552                            Audio_Sample_Play:
0088A552 6100 0000                  		bsr	SMEG_Z80_Off
0088A556                            		
0088A556 1039 00A0 018C             		move.b	($A0018C).l,d0
0088A55C 08C0 0000                  		bset	#0,d0
0088A560 13C0 00A0 018C             		move.b	d0,($A0018C).l
0088A566                             		
0088A566 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0088A56E 4E75                       		rts
0088A570                            		
0088A570                            ; --------------------------------------------
0088A570                            ; Stop the current sample
0088A570                            ; --------------------------------------------
0088A570                            
0088A570                            Audio_Sample_Stop:
0088A570 6100 0000                  		bsr	SMEG_Z80_Off
0088A574                            		
0088A574 13FC 0040 00A0 018C        		move.b	#$40,($A0018C).l
0088A57C                             		
0088A57C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0088A584 4E75                       		rts
0088A586                            		
0088A586                            ; --------------------------------------------
0088A586                            ; Modify sample note
0088A586                            ;
0088A586                            ; d3 | WORD - Note
0088A586                            ; --------------------------------------------
0088A586                            
0088A586                            Audio_Sample_Note:
0088A586 6100 0000                  		bsr	SMEG_Z80_Off
0088A58A                            		
0088A58A                            AudioSmplNote_go:
0088A58A                            ; 		sub.w	#24,d0			; skip 2 octaves
0088A58A ED48                       		lsl.w	#6,d0
0088A58C 0640 01C0                   		add.w	#$1C0,d0
0088A590 13C0 00A0 00DC             		move.b	d0,($A000DC)		; ld bc,(NEW ADDRESS)
0088A596 E048                       		lsr.w	#8,d0			;
0088A598 13C0 00A0 00DD              		move.b	d0,($A000DD)		;
0088A59E                             		
0088A59E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0088A5A6 4E75                       		rts
0088A5A8                            
0088A5A8                            ; -------------------------------------------
0088A5A8                            ; Send PCM/PWM
0088A5A8                            ; -------------------------------------------
0088A5A8                            
0088A5A8                            SMEG_SetVoice_PCM:
0088A5A8                               		
0088A5A8 4AAE 0014                  		tst.l	SongPcmSamp(a6)
0088A5AC 6700                       		beq.s	@FinishList
0088A5AE 6B00                       		bmi.s	@FinishList
0088A5B0                            		
0088A5B0 7200                           		moveq	#0,d1
0088A5B2 7400                          		moveq	#0,d2
0088A5B4 266E 0014                       		movea.l	SongPcmSamp(a6),a3
0088A5B8 122D 0008                      		move.b	Chn_Inst(a5),d1
0088A5BC                            @NextPcm:
0088A5BC 4A53                            		tst.w	(a3)
0088A5BE 6B00                            		bmi.s	@GiveUp
0088A5C0 1413                            		move.b	(a3),d2
0088A5C2 B401                            		cmp.b	d1,d2
0088A5C4 6700                            		beq.s	@FoundPcm
0088A5C6 D6FC 0002                       		adda	#2,a3
0088A5CA 60F0                            		bra.s	@NextPcm
0088A5CC                            @FoundPcm:
0088A5CC 122B 0001                    		move.b	1(a3),d1
0088A5D0                            @GiveUp:
0088A5D0 0441 0001                     		sub.w	#1,d1
0088A5D4 7400                          		moveq	#0,d2
0088A5D6 142D 0007                     		move.b	Chn_ID(a5),d2
0088A5DA 0242 000F                     		and.w	#$F,d2
0088A5DE 13C2 00A1 5122                		move.b	d2,(marsreg+comm2)
0088A5E4 13C1 00A1 5123               		move.b	d1,(marsreg+comm2+1)
0088A5EA 7003                        		moveq 	#marscall_SetSmpl,d0
0088A5EC 6100 FD5E                   		bsr	SMEG_MARS_Call
0088A5F0                              		
0088A5F0                            @FinishList:
0088A5F0 4E75                       		rts
0088A5F2                            		
0088A5F2                            ; -------------------------------------------
0088A5F2                            ; Reset FM
0088A5F2                            ; -------------------------------------------
0088A5F2                            
0088A5F2                            SMEG_FM_Reset:
0088A5F2 6100 0000                  		bsr	SMEG_Z80_Off
0088A5F6                            
0088A5F6 7028                       		moveq	#$28,d0
0088A5F8 7200                       		moveq	#0,d1
0088A5FA 6100 0000                  		bsr	FM_RegWrite_1
0088A5FE 7028                       		moveq	#$28,d0
0088A600 7201                       		moveq	#1,d1
0088A602 6100 0000                  		bsr	FM_RegWrite_1
0088A606 7028                       		moveq	#$28,d0
0088A608 7202                       		moveq	#2,d1
0088A60A 6100 0000                  		bsr	FM_RegWrite_1
0088A60E 7028                       		moveq	#$28,d0
0088A610 7204                       		moveq	#4,d1
0088A612 6100 0000                  		bsr	FM_RegWrite_1
0088A616 7028                       		moveq	#$28,d0
0088A618 7205                       		moveq	#5,d1
0088A61A 6100 0000                  		bsr	FM_RegWrite_1
0088A61E 7028                       		moveq	#$28,d0
0088A620 7206                       		moveq	#6,d1
0088A622 6100 0000                  		bsr	FM_RegWrite_1
0088A626                            
0088A626 6000 0000                  		bra	SMEG_Z80_On
0088A62A                            
0088A62A                            ; -------------------------------------------
0088A62A                            ; Find FM
0088A62A                            ; -------------------------------------------
0088A62A                            
0088A62A                            SMEG_FM_FindWrite:
0088A62A 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
0088A630 6C00                       		bge.s	@Second
0088A632 6000 0000                  		bra	FM_RegWrite_1
0088A636                            @Second:
0088A636 6000 0000                  		bra	FM_RegWrite_2
0088A63A                            
0088A63A                            ; -------------------------------------------
0088A63A                            ; Write to FM register
0088A63A                            ; -------------------------------------------
0088A63A                            
0088A63A                            FM_RegWrite_1:
0088A63A 1439 00A0 4000             		move.b	($A04000).l,d2
0088A640 0802 0007                  		btst	#7,d2
0088A644 66F4                       		bne.s	FM_RegWrite_1
0088A646 13C0 00A0 4000             		move.b	d0,($A04000).l
0088A64C                            @Loop:
0088A64C 1439 00A0 4000             		move.b	($A04000).l,d2
0088A652 0802 0007                  		btst	#7,d2
0088A656 66F4                       		bne.s	@Loop
0088A658 13C1 00A0 4001             		move.b	d1,($A04001).l
0088A65E 4E75                       		rts
0088A660                            
0088A660                            FM_RegWrite_2:
0088A660 1439 00A0 4000             		move.b	($A04000).l,d2
0088A666 0802 0007                  		btst	#7,d2
0088A66A 66F4                       		bne.s	FM_RegWrite_2
0088A66C 13C0 00A0 4002             		move.b	d0,($A04002).l
0088A672                            @Loop:
0088A672 1439 00A0 4000             		move.b	($A04000).l,d2
0088A678 0802 0007                  		btst	#7,d2
0088A67C 66F4                       		bne.s	@Loop
0088A67E 13C1 00A0 4003             		move.b	d1,($A04003).l
0088A684 4E75                       		rts
0088A686                            		
0088A686                            SMEG_Z80_Off:
0088A686 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0088A68E                            @WaitZ80;\@:
0088A68E 0839 0000 00A1 1100        		btst	#0,($A11100).l
0088A696 66F6                       		bne.s	@WaitZ80;\@
0088A698 4E75                       		rts
0088A69A                            		
0088A69A                            ; USES d2
0088A69A                            
0088A69A                            SMEG_Z80_On:
0088A69A 1439 00A0 018C             		move.b	($A0018C),d2
0088A6A0 0802 0007                  		btst	#7,d2
0088A6A4 6700                       		beq.s	@stopped;\@
0088A6A6                            @busywait;\@:
0088A6A6 1439 00A0 4000             		move.b	($A04000).l,d2
0088A6AC 0802 0007                  		btst	#7,d2
0088A6B0 66F4                       		bne.s	@busywait;\@
0088A6B2 13FC 002A 00A0 4000        		move.b	#$2A,(sound_ym_1)
0088A6BA 1439 00A0 018F             		move.b	($A0018F),d2
0088A6C0 13C2 00A0 4001             		move.b	d2,(sound_ym_2)
0088A6C6                            @stopped;\@:
0088A6C6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0088A6CE 4E75                       		rts
0088A6D0                            		
0088A6D0                            ; -----------------------
0088A6D0                            ; Setup channels
0088A6D0                            ; -----------------------
0088A6D0                            
0088A6D0                            SMEG_Load_SetChnls:
0088A6D0 286E 0004                  		movea.l	SongRequest(a6),a4				;a4 - Music data
0088A6D4 3D6E 0018 001C             		move.w	TicksRequest(a6),TicksSet(a6)
0088A6DA                            
0088A6DA                            ; -----------------------
0088A6DA                            ; Get the
0088A6DA                            ; PatternEnd/PatternLoop
0088A6DA                            ; numbers
0088A6DA                            ; -----------------------
0088A6DA                            
0088A6DA 1D5C 0002                  		move.b	(a4)+,PatternEnd(a6)
0088A6DE 1D5C 0003                  		move.b	(a4)+,PatternLoop(a6)
0088A6E2                            		
0088A6E2                            ; -----------------------
0088A6E2                            ; Get instruments
0088A6E2                            ; -----------------------
0088A6E2                            
0088A6E2 2D5C 0008                  		move.l	(a4)+,SongStart(a6)
0088A6E6 2D5C 0010                  		move.l	(a4)+,snd_instr(a6)
0088A6EA                            
0088A6EA                            ; -----------------------
0088A6EA                            ; Setup the channel IDs
0088A6EA                            ; -----------------------
0088A6EA                            
0088A6EA 303C 0011                  		move.w	#max_chnl-1,d0
0088A6EE 341C                       		move.w	(a4)+,d2
0088A6F0 0442 0001                  		sub.w	#1,d2
0088A6F4                            @SetId:
0088A6F4 1B7C 0001 0006             		move.b	#1,Chn_Type(a5)
0088A6FA 1B7C 00FF 0007             		move.b	#-1,Chn_ID(a5)
0088A700 4A42                       		tst.w	d2
0088A702 6B00                       		bmi.s	@Disabled
0088A704 0442 0001                  		sub.w	#1,d2
0088A708 1B5C 0007                  		move.b	(a4)+,Chn_ID(a5)
0088A70C 1B5C 0009                   		move.b	(a4)+,Chn_Vol(a5)
0088A710 1B5C 000C                   		move.b	(a4)+,Chn_Pan(a5)
0088A714 161C                        		move.b	(a4)+,d3
0088A716 4A2D 0007                   		tst.b	chn_id(a5)
0088A71A 6B00                        		bmi.s	@is_psg
0088A71C 0C2D 0010 0007              		cmp.b	#PCM_1,chn_id(a5)
0088A722 6C00                        		bge.s	@is_pcm
0088A724                             		
0088A724 E94B                        		lsl.w	#4,d3
0088A726 1B43 000D                   		move.b	d3,Chn_FM_Key(a5)
0088A72A 6000                       		bra.s	@Disabled
0088A72C                            @is_pcm:
0088A72C 4E71                       		nop 
0088A72E 6000                       		bra.s	@Disabled
0088A730                            		
0088A730                            @is_psg:
0088A730 122D 0007                  		move.b	Chn_ID(a5),d1
0088A734 0001 001F                  		or.b	#$1F,d1
0088A738 13C1 00C0 0011             		move.b	d1,(sound_psg)
0088A73E                             		
0088A73E                            @Disabled:
0088A73E DAFC 0010                  		adda 	#sizeof_Chn,a5
0088A742 51C8 FFB0                  		dbf	d0,@SetId
0088A746                             		
0088A746                            ; ; -----------------------
0088A746                            ; ; Master volumes
0088A746                            ; ; -----------------------
0088A746                            ; 
0088A746                            ; 		moveq	#(max_chnl)-1,d0
0088A746                            ; @SetVol:
0088A746                            ; 		move.b	(a4)+,Chn_MainVol(a5)
0088A746                            ; 		adda 	#sizeof_Chn,a5
0088A746                            ; 		dbf	d0,@SetVol
0088A746                            
0088A746                            ; -----------------------
0088A746                            ; last steps
0088A746                            ; -----------------------
0088A746                            
0088A746 286E 0008                  		movea.l	SongStart(a6),a4
0088A74A 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
0088A74E 1D5C 0020                  		move.b	(a4)+,PattSize(a6)
0088A752 426E 0022                  		clr.w	pattr_read(a6)
0088A756 D8FC 0006                  		adda	#6,a4
0088A75A 2D4C 000C                  		move.l	a4,SongRead(a6)
0088A75E 4E75                       		rts
0088A760                            		
0088A760                            ; -----------------------
0088A760                            ; Search used slot
0088A760                            ; 
0088A760                            ; Uses d3
0088A760                            ; -----------------------
0088A760                            
0088A760                            SMEG_FindPrioSlot:
0088A760 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
0088A766                            ;  		inform 0,"%h",RAM_SMEG_PrioList
0088A766                             		
0088A766 7600                        		moveq	#0,d3
0088A768 162D 0007                   		move.b	Chn_ID(a5),d3
0088A76C 0803 0007                   		btst	#7,d3
0088A770 6600                        		bne.s	@PSG_slots
0088A772 0C03 0010                   		cmp.b	#PCM_1,d3
0088A776 6C00                        		bge.s	@PCM_Slots
0088A778 0C03 0004                   		cmp.b	#4,d3
0088A77C 6D00                        		blt.s	@leftFM
0088A77E 0443 0001                   		sub.w	#1,d3
0088A782                            @leftFM:
0088A782 6000                       		bra.s	@set_slot
0088A784                            
0088A784                            @PSG_slots:
0088A784 EA4B                       		lsr.w	#5,d3
0088A786 0243 0003                  		and.w	#%11,d3
0088A78A 0643 0006                  		add.w	#6,d3
0088A78E 6000                       		bra.s	@set_slot
0088A790                            
0088A790                            @PCM_Slots:
0088A790 0443 0010                  		sub.w	#PCM_1,d3
0088A794                            @set_slot:
0088A794 D6C3                       		add.w	d3,a3
0088A796 4E75                       		rts
0088A798                            		
0088A798                            ; -----------------------
0088A798                            ; Turn off the unused
0088A798                            ; channels
0088A798                            ; -----------------------
0088A798                            
0088A798                            SMEG_Load_FixSfx:
0088A798 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
0088A79E                             		
0088A79E                            ; FM Check
0088A79E                            
0088A79E 7605                        		moveq	#6-1,d3
0088A7A0 7028                        		moveq	#$28,d0
0088A7A2 7200                        		moveq	#0,d1
0088A7A4                            @chknextfm1:
0088A7A4 4A13                       		tst.b	(a3)
0088A7A6 6700                       		beq.s	@off_fm
0088A7A8 4213                       		clr.b	(a3)
0088A7AA                            		
0088A7AA 0C01 0006                  		cmp.b	#6,d1
0088A7AE 6600                       		bne.s	@notdac
0088A7B0 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
0088A7B6 6700                       		beq.s	@notdac
0088A7B8                            		
0088A7B8 6100 FDB6                  		bsr	Audio_Sample_Stop
0088A7BC 6000                       		bra.s	@off_fm
0088A7BE                            		
0088A7BE                            @notdac:
0088A7BE 6100 FEC6                  		bsr	SMEG_Z80_Off
0088A7C2 6100 FE76                  		bsr	FM_RegWrite_1
0088A7C6 6100 FED2                  		bsr	SMEG_Z80_On
0088A7CA                            @off_fm:
0088A7CA D6FC 0001                  		adda 	#1,a3
0088A7CE                            
0088A7CE 0641 0001                  		add.w	#1,d1
0088A7D2 0C41 0003                  		cmp.w	#3,d1
0088A7D6 6600                       		bne.s	@nope
0088A7D8 0641 0001                  		add.w	#1,d1
0088A7DC                            @nope:
0088A7DC 51CB FFC6                  		dbf	d3,@chknextfm1
0088A7E0                            		
0088A7E0                            ; PSG check
0088A7E0                            
0088A7E0 323C 009F                  		move.w	#$9F,d1
0088A7E4 303C 0003                  		move.w	#4-1,d0
0088A7E8                            @chknextpsg:
0088A7E8 4A13                       		tst.b	(a3)
0088A7EA 6700                       		beq.s	@off_psg
0088A7EC 4213                       		clr.b	(a3)
0088A7EE 13C1 00C0 0011             		move.b	d1,(sound_psg)
0088A7F4                            @off_psg:
0088A7F4 D6FC 0001                  		adda	#1,a3
0088A7F8 0641 0020                  		add.w	#$20,d1
0088A7FC 51C8 FFEA                  		dbf	d0,@chknextpsg
0088A800                            		
0088A800                            ; TODO: PCM check
0088A800                            
0088A800                            ; 		lea	(RAM_SMEG_Chnls_BGM),a5
0088A800                            ; 		moveq	#(max_chnl)-1,d4
0088A800                            ; @SetId:
0088A800                            ; 		move.b	#$80,Chn_Pan(a5)
0088A800                            ; 
0088A800                            ; 		tst.b	Chn_ID(a5)
0088A800                            ; 		bmi.s	@NotFM
0088A800                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
0088A800                            ; 		bge.s	@NotFM
0088A800                            ; 
0088A800                            ; 		clr.b	Chn_FM_Key(a5)
0088A800                            ; 		move.b	#%00001111,Chn_FM_Key(a5)
0088A800                            ; 		move.b	#$C0,Chn_Pan(a5)
0088A800                            ; 		bsr	SMEG_FM_SetPan
0088A800                            ; @NotFM:
0088A800                            ; 		adda 	#sizeof_Chn,a5
0088A800                            ; 		dbf	d4,@SetId
0088A800                            		
0088A800                            ; 		bsr	SMEG_Z80_Off
0088A800                            ; 		moveq	#$2B,d0
0088A800                            ;                 moveq	#0,d1
0088A800                            ;   		bsr	FM_RegWrite_1
0088A800                            ;   		
0088A800                            ; 		moveq	#0,d0
0088A800                            ; 		move.b	d0,($A001E0+$D)
0088A800                            ; 		bsr	SMEG_Z80_On
0088A800                            		
0088A800 4E75                       		rts
0088A802                            		
0088A802                            ; -----------------------
0088A802                            ; Exclusive features
0088A802                            ;
0088A802                            ; TODO: creo que es
0088A802                            ; mala idea hacer esperar
0088A802                            ; al VBlank ya que moví
0088A802                            ; la rutina esta
0088A802                            ; -----------------------
0088A802                            
0088A802                            SMEG_Load_SetExtChnls:
0088A802                            		
0088A802 4DF9 FFFF EF00               		lea	(RAM_SMEG_Buffer),a6
0088A808 4AAE 0014                    		tst.l	SongPcmSamp(a6)
0088A80C 6700                          		beq.s	@Return
0088A80E                              		
0088A80E 2A6E 0014                     		movea.l	SongPcmSamp(a6),a5
0088A812 7200                          		moveq	#0,d1
0088A814                            @NextSamp:
0088A814 4A55                           		tst.w	(a5)
0088A816 6B00                           		bmi.s	@Finish
0088A818                            
0088A818 23DD 00A1 512C                 		move.l	(a5)+,(marsreg+comm12)		;Sample addr (start/end)
0088A81E 33DD 00A1 512A                 		move.w	(a5)+,(marsreg+comm10)		;Sample loop
0088A824 301D                           		move.w	(a5)+,d0
0088A826 13C0 00A1 5123                 		move.b	d0,(marsreg+comm2+1)		;Note transpose
0088A82C 13C1 00A1 5122                 		move.b	d1,(marsreg+comm2)		;Sample slot
0088A832 7005                          		moveq	#marscall_SetEntry,d0
0088A834 6100 FB16                     		bsr	SMEG_MARS_Call
0088A838                                   		
0088A838 0641 0001                          	add.w	#1,d1
0088A83C 60D6                        		bra.s	@NextSamp
0088A83E                            @Finish:
0088A83E DAFC 0002                    		adda	#2,a5
0088A842 2D4D 0014                    		move.l	a5,SongPcmSamp(a6)		;Second list		
0088A846                            		
0088A846                            @Return:
0088A846 4E75                       		rts
0088A848                            		
0088A848                            ; -------------------------------------------
0088A848                            ; Reset PSG
0088A848                            ; -------------------------------------------
0088A848                            
0088A848                            SMEG_PSG_Reset:
0088A848 13FC 009F 00C0 0011        		move.b	#$9F,($C00011).l
0088A850 13FC 00BF 00C0 0011        		move.b	#$BF,($C00011).l
0088A858 13FC 00DF 00C0 0011        		move.b	#$DF,($C00011).l
0088A860 13FC 00FF 00C0 0011        		move.b	#$FF,($C00011).l
0088A868 4E75                       		rts
0088A86A                            
0088A86A                            ; -------------------------------------------
0088A86A                            ; Reset PCM
0088A86A                            ; -------------------------------------------
0088A86A                            
0088A86A                            SMEG_PCM_Reset:
0088A86A 4AAE 0014                  		tst.l	SongPcmSamp(a6)
0088A86E 6700                       		beq.s	@NoResetPCM
0088A870 6B00 0000                  		bmi	@NoResetPCM
0088A874                            		
0088A874                            		
0088A874 13FC 0000 00A1 5122          		move.b	#0,(marsreg+comm2)
0088A87C 7002                         		moveq	#marscall_Stop,d0
0088A87E 6100 FACC                    		bsr	SMEG_MARS_Call
0088A882 13FC 0001 00A1 5122          		move.b	#1,(marsreg+comm2)
0088A88A 7002                         		moveq	#marscall_Stop,d0
0088A88C 6100 FABE                    		bsr	SMEG_MARS_Call
0088A890 13FC 0002 00A1 5122          		move.b	#2,(marsreg+comm2)
0088A898 7002                         		moveq	#marscall_Stop,d0
0088A89A 6100 FAB0                    		bsr	SMEG_MARS_Call
0088A89E 13FC 0003 00A1 5122           		move.b	#3,(marsreg+comm2)
0088A8A6 7002                         		moveq	#marscall_Stop,d0
0088A8A8 6100 FAA2                    		bsr	SMEG_MARS_Call
0088A8AC 13FC 0004 00A1 5122           		move.b	#4,(marsreg+comm2)
0088A8B4 7002                         		moveq	#marscall_Stop,d0
0088A8B6 6100 FA94                    		bsr	SMEG_MARS_Call
0088A8BA 13FC 0005 00A1 5122          		move.b	#5,(marsreg+comm2)
0088A8C2 7002                         		moveq	#marscall_Stop,d0
0088A8C4 6100 FA86                    		bsr	SMEG_MARS_Call
0088A8C8 13FC 0006 00A1 5122          		move.b	#6,(marsreg+comm2)
0088A8D0 7002                         		moveq	#marscall_Stop,d0
0088A8D2 6100 FA78                    		bsr	SMEG_MARS_Call
0088A8D6 13FC 0007 00A1 5122          		move.b	#7,(marsreg+comm2)
0088A8DE 7002                         		moveq	#marscall_Stop,d0
0088A8E0 6100 FA6A                    		bsr	SMEG_MARS_Call
0088A8E4                              		
0088A8E4                            
0088A8E4                            @NoResetPCM:
0088A8E4 4E75                       		rts
0088A8E6                            
0088A8E6                            ; ================================================================
0088A8E6                            ; -------------------------------------------------
0088A8E6                            ; Data
0088A8E6                            ; -------------------------------------------------
0088A8E6                            
0088A8E6                            ; -------------------------------
0088A8E6                            ; FM Register list
0088A8E6                            ; -------------------------------
0088A8E6                            
0088A8E6                            SMEG_FM_RegList:
0088A8E6 B0                         		dc.b $B0
0088A8E7 3038 343C                  		dc.b $30,$38,$34,$3C
0088A8EB 5058 545C                  		dc.b $50,$58,$54,$5C
0088A8EF 6068 646C                  		dc.b $60,$68,$64,$6C
0088A8F3 7078 747C                  		dc.b $70,$78,$74,$7C
0088A8F7 8088 848C                  		dc.b $80,$88,$84,$8C
0088A8FB 4048 444C                  		dc.b $40,$48,$44,$4C
0088A900 00                         		even
0088A900                            	
0088A900                            ; -------------------------------
0088A900                            ; Z80 Driver
0088A900                            ; -------------------------------
0088A900                            
0088A900                            Z80_Driver:	incbin	"system/sound/z80/main.bin"
0088BA00                            Z80_DriverEnd:
0088BA00                            		even
0088BA00                            		
0088BA00                            ; ---------------------------------------------------
0088BA00                            ; ---------------------------------------------------
0088BA00                            		
0088BA00                            ; ====================================================================
0088BA00                            ; -------------------------------------------------
0088BA00                            ; Main
0088BA00                            ; -------------------------------------------------
0088BA00                            
0088BA00                            		include	"engine/md.asm"
0088BA00                            ; ====================================================================
0088BA00                            ; Main engine
0088BA00                            ; ====================================================================
0088BA00                            
0088BA00                            		include	"engine/ram.asm"
0088BA00                            ; ====================================================================
0088BA00                            ; -------------------------------------------------
0088BA00                            ; RAM
0088BA00                            ; 
0088BA00                            ; Put your features here
0088BA00                            ; (players lives, keys, current level, map, etc.)
0088BA00                            ; -------------------------------------------------
0088BA00                            
0088BA00                                            rsset	RAM_Engine
0088BA00 =FFFFDC00                  RAM_P1_Lives	rs.w	1
0088BA00 =FFFFDC02                  RAM_P1_Coins	rs.w	1
0088BA00 =FFFFDC04                  RAM_P1_Hits	rs.w	1
0088BA00 =FFFFDC06                  RAM_CurrLevel	rs.w	1
0088BA00 =FFFFDC08                  sizeof_engine	rs.l	0
0088BA00                            ; 		inform 0,"engine ram: %h",(sizeof_engine-RAM_Engine)
0088BA00                            ; 		inform 0,"engine ram: %h",(sizeof_engine-RAM_Engine)
0088BA00                            
0088BA00                            ; ====================================================================
0088BA00                            ; -------------------------------------------------
0088BA00                            ; Engine Main loop
0088BA00                            ; -------------------------------------------------
0088BA00                            
0088BA00                            MD_Main:
0088BA00 6100 D774                  		bsr	System_Init		; init System
0088BA04 6100 DED4                  		bsr	Audio_Init		; init Audio
0088BA08 6100 D11E                  		bsr	Video_Init		; init Video
0088BA0C 6100 DEB6                   		bsr	Input_Init		; init Input
0088BA10                            
0088BA10                            ; -------------------------------------------------
0088BA10                            
0088BA10 46FC 2000                   		move.w	#$2000,sr
0088BA14                            Main_Loop:
0088BA14 7000                       		moveq	#0,d0
0088BA16 1039 FFFF DE4F             		move.b	(RAM_GameMode),d0
0088BA1C E548                       		lsl.w	#2,d0
0088BA1E 207B 0000                  		movea.l	@list(pc,d0.w),a0
0088BA22 4E90                       		jsr	(a0)
0088BA24                            		
0088BA24 60EE                       		bra.s	Main_Loop
0088BA26                            		
0088BA26                            ; ====================================================================
0088BA26                            ; -------------------------------------------------
0088BA26                            ; Data
0088BA26                            ; -------------------------------------------------
0088BA26                            
0088BA26                            @list:
0088BA26 0000 0000                  		dc.l	mode_Title
0088BA2A 0000 0000                  		dc.l	mode_Level
0088BA2E 0000 0000                  		dc.l	mode_Title
0088BA32 0000 0000                  		dc.l	mode_Title
0088BA36 0000 0000                  		dc.l	mode_Title
0088BA3A 0000 0000                  		dc.l	mode_Title
0088BA3E 0000 0000                  		dc.l	mode_Title
0088BA42 0000 0000                  		dc.l	mode_Title
0088BA46                            		even
0088BA46                            		
0088BA46                            ; ====================================================================
0088BA46                            ; -------------------------------------------------
0088BA46                            ; Default interrupts
0088BA46                            ; -------------------------------------------------
0088BA46                            
0088BA46                            		include	"system/ints.asm"
0088BA46                            ; ====================================================================
0088BA46                            ; -------------------------------------------------
0088BA46                            ; VBlank
0088BA46                            ; -------------------------------------------------
0088BA46                            
0088BA46                            MD_Vint:
0088BA46 0839 0007 FFFF DE4E         		btst	#7,(RAM_IntFlags)
0088BA4E 6600 0000                   		bne	@nope
0088BA52 08F9 0007 FFFF DE4E         		bset	#7,(RAM_IntFlags)
0088BA5A 48F9 7FFF FFFF DE0C        		movem.l	a0-a6/d0-d7,(RAM_VIntRegs)
0088BA62                            		
0088BA62 3039 00C0 0004             		move.w	(vdp_ctrl),d0
0088BA68 0800 0000                  		btst	#0,d0
0088BA6C 6700                       		beq.s	@JapAme
0088BA6E 303C 06BC                  		move.w	#$6BC,d0
0088BA72 51C8 FFFE                  		dbf	d0,*
0088BA76                            @JapAme:
0088BA76                            
0088BA76 6100 DBB2                   		bsr	Input_Read
0088BA7A 6100 D366                  		bsr	PalFade_Upd
0088BA7E 6100 D5EC                  		bsr	DMA_Read
0088BA82                            		
0088BBAA                            		
0088BBAA 6100 DDF6                   		bsr	Audio_run			; NO MOVERLO
0088BBAE 4CF9 7FFF FFFF DE0C        		movem.l	(RAM_VIntRegs),a0-a6/d0-d7
0088BBB6 08F9 0001 FFFF DE4E         		bset	#1,(RAM_IntFlags)		; VBlank done flag
0088BBBE 08B9 0007 FFFF DE4E         		bclr	#7,(RAM_IntFlags)
0088BBC6                             
0088BBC6                            @nope:
0088BBC6 08B9 0000 FFFF DE4E         		bclr	#0,(RAM_IntFlags)		; Frame done flag
0088BBCE 4E73                       		rte
0088BBD0                             		
0088BBD0                            ; ====================================================================
0088BBD0                            ; -------------------------------------------------
0088BBD0                            ; HBlank
0088BBD0                            ; -------------------------------------------------
0088BBD0                            
0088BBD0                            MD_HInt:
0088BBD0 4E73                       		rte
0088BBD0 4E73                       		rte
0088BBD2                            		
0088BBD2                            ; ====================================================================
0088BBD2                            ; -------------------------------------------------
0088BBD2                            ; CODE
0088BBD2                            ; -------------------------------------------------
0088BBD2                            
0088BBD2                            		;obj already set in MARS
0088BBD2                            		include	"engine/modes/title/md.asm"
0088BBD2                            ; ====================================================================
0088BBD2                            ; -------------------------------------------------
0088BBD2                            ; Title
0088BBD2                            ; -------------------------------------------------
0088BBD2                            
0088BBD2                            ; ====================================================================
0088BBD2                            ; --------------------------------------------
0088BBD2                            ; RAM
0088BBD2                            ; --------------------------------------------
0088BBD2                            
0088BBD2                            		rsset RAM_ModeBuffer
0088BBD2                            ; this_counter	rs.l 1
0088BBD2 =FFFFBC00                  model_buff	rs.b $20
0088BBD2 =FFFFBC20                  test_val	rs.l 1
0088BBD2                            
0088BBD2                            ; ====================================================================
0088BBD2                            ; --------------------------------------------
0088BBD2                            ; Init
0088BBD2                            ; --------------------------------------------
0088BBD2                            
0088BBD2                            mode_Title:
0088BBE4 46FC 2700                  		move.w	#$2700,sr
0088BBE8 6100 CF86                  		bsr	Video_ClearAll
0088BBEC 6100 DD5A                    		bsr	SMEG_StopSnd
0088BBF0                              		
0088BBF0 23FC 5000 0003 00C0 0004   		move.l	#$50000003,(vdp_ctrl)
0088BBFA 41F9 0000 0000             		lea	(Art_DebugFont),a0
0088BC00 303C 0000                  		move.w	#((Art_DebugFont_e-Art_DebugFont)/4)-1,d0
0088BC04                            @dbg_loop:
0088BC04 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0088BC0A 51C8 FFF8                  		dbf	d0,@dbg_loop
0088BC0E 43F9 FFFF E9D0              		lea	(RAM_PalFade),a1
0088BC14 41F9 0000 0000             		lea	(Pal_Title),a0
0088BC1A 303C 000F                  		move.w	#16-1,d0
0088BC1E                            @pal_loop2:
0088BC1E 32D8                       		move.w	(a0)+,(a1)+
0088BC20 51C8 FFFC                  		dbf	d0,@pal_loop2
0088BC24 337C 0644 001C             		move.w	#$644,$1C(a1)
0088BC2A 337C 0EEE 001E             		move.w	#$EEE,$1E(a1)
0088BC30                            		
0088BC30                            ; MARS: Model viewer
0088BC30                            		
0088BC30                            ; 		if MARS
0088BC30                            ; 		
0088BC30                            ; 		lea	(Asc_MarsMdl),a0
0088BC30                            ; 		moveq	#0,d0
0088BC30                            ; 		move.l	#$00010001,d1
0088BC30                            ; 		move.w	#$580|$2000,d2
0088BC30                            ; 		bsr	Video_PrintText
0088BC30                            ; 		bsr	MarsMdl_Init
0088BC30                            ; 
0088BC30                            ; ; Else: Text
0088BC30                            ; 
0088BC30                            ;    		else
0088BC30                               		
0088BC30 41F9 0000 0000             		lea	(Asc_Karasucia),a0
0088BC36 7000                       		moveq	#0,d0
0088BC38 223C 0001 0001             		move.l	#$00010001,d1
0088BC3E 343C 2680                  		move.w	#$680|$2000,d2
0088BC42 6100 D158                  		bsr	Video_PrintText
0088BC46                            		
0088BC46                            ; 		lea	(Map_Title),a0
0088BC46                            ;  		moveq	#0,d0
0088BC46                            ;  		move.l	#$00000000,d1
0088BC46                            ;    		move.l	#$0027001B,d2
0088BC46                            ;    		moveq	#1,d3
0088BC46                            ;    		bsr	Video_MakeMap
0088BC46                            ; 		move.l	#$40200000,(vdp_ctrl)
0088BC46                            ; 		lea	(Art_Title),a0
0088BC46                            ; 		move.w	#(Art_Title_End-Art_Title)/4,d0
0088BC46                            ; @art_loop:
0088BC46                            ; 		move.l	(a0)+,(vdp_data)
0088BC46                            ; 		dbf	d0,@art_loop
0088BC46                            		
0088BC46                            ;     		endif
0088BC46                               		
0088BC46 13FC 0007 FFFF ED1B          		move.b	#%111,(RAM_VidRegs+$B)
0088BC4E 6100 CFA6                    		bsr	Video_Update
0088BC52                               		
0088BC52                            ;    		if MCD=0
0088BC52                            ;  		move.l	#TEST_IT,d0
0088BC52                            ;  		moveq 	#2,d1
0088BC52                            ;  		moveq	#0,d2
0088BC52                            ;   		bsr	Audio_Track_play
0088BC52                            ;   		endif
0088BC52                            ;   		move.l	#TEST_IT_2,d0
0088BC52                            ;   		move.w 	#2,d1
0088BC52                            ;   		moveq	#0,d2
0088BC52                            ;   		bsr	Audio_Track_play
0088BC52                            		
0088BC52                            ;  		if MCD=0
0088BC52                            ; 		move.l	#TEST_WAV,d0
0088BC52                            ; 		move.l	#TEST_WAV_end,d1
0088BC52                            ; 		moveq	#0,d2
0088BC52                            ; 		move.w	#12*4,d3
0088BC52                            ; 		bsr	Audio_Sample_Set
0088BC52                            ; 		bsr	Audio_Sample_Play
0088BC52                            ;  		endif
0088BC52                            		
0088BC52 46FC 2000                   		move.w	#$2000,sr
0088BC68                            		
0088BC68                            ; --------------------------------------------
0088BC68                            ; Loop
0088BC68                            ; --------------------------------------------
0088BC68                            
0088BC68                            ; 		move.l	#$300000,(test_val)
0088BC68                            @loop:
0088BC68 6100 D164                   		bsr	Video_vsync
0088BC6C                            		
0088BC6C                            ;  		moveq	#0,d0
0088BC6C                            ; 		move.l	#$00080008,d1
0088BC6C                            ; 		move.l	(test_val),d2
0088BC6C                            ; 		move.w	#$680|$2000,d3
0088BC6C                            ; 		moveq	#6,d4
0088BC6C                            ; 		bsr	Video_PrintVal
0088BC6C                            ; 
0088BC6C                            ;  		moveq	#0,d0
0088BC6C                            ; 		move.l	#$00080009,d1
0088BC6C                            ; 		move.l	(test_val),d2
0088BC6C                            ; 		move.w	#$680|$2000,d3
0088BC6C                            ; 		moveq	#2,d4
0088BC6C                            ; 		bsr	Video_PrintVal
0088BC6C                            		
0088BC6C                            ; 		add.l	#1,(test_val)
0088BC6C                            
0088BC6C                            ; 		if MARS
0088BC6C                            ; 		bsr	MarsMdl_Upd
0088BC6C                            ; 		endif
0088BC6C                            
0088BC6C                            ; ------------
0088BC6C                            ; TESTING SFX
0088BC6C                            ; ------------
0088BC6C                            
0088BC6C                            ; 		if MARS|MCD=0
0088BC6C                            ; 		btst	#bitJoyA,(RAM_Control_1+OnPress)
0088BC6C                            ;  		beq.s	@nope
0088BC6C                            ;   		move.l	#SndSfx_OneUp,d0
0088BC6C                            ;   		moveq 	#0,d1
0088BC6C                            ;   		moveq	#1,d2
0088BC6C                            ;   		bsr	Audio_Track_play
0088BC6C                            ; @nope:
0088BC6C                            ; 		endif
0088BC6C                            		
0088BC6C                            ; ------------
0088BC6C                            
0088BC6C 0839 0007 FFFF DE85        		btst	#bitJoyStart,(RAM_Control_1+OnPress)
0088BC74 6700 FFF2                   		beq	@loop
0088BC78 4279 FFFF DC06              		clr.w	(RAM_CurrLevel)
0088BC7E 13FC 0001 FFFF DE4F        		move.b	#1,(RAM_GameMode)
0088BC86 4E75                       		rts
0088BC88                            		
0088BC88                            ; ====================================================================
0088BC88                            ; --------------------------------------------
0088BC88                            ; Subs
0088BC88                            ; --------------------------------------------
0088BC88                            
0088BC88                            BG_DEFORM:
0088BC88 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
0088BC8E 3606                       		move.w	d6,d3
0088BC90 343C 00DF                  		move.w	#224-1,d2
0088BC94                            @loop_hor:
0088BC94 3003                       		move.w	d3,d0
0088BC96 6100 D55C                  		bsr	CalcSine
0088BC9A E848                       		lsr.w	#4,d0
0088BC9C 3080                       		move.w	d0,(a0)
0088BC9E D0FC 0004                  		adda	#4,a0
0088BCA2 0643 0001                  		add.w	#1,d3
0088BCA6 51CA FFEC                  		dbf	d2,@loop_hor
0088BCAA                            		
0088BCAA 41F9 FFFF E2C0             		lea	(RAM_ScrlVer),a0
0088BCB0 3606                       		move.w	d6,d3
0088BCB2 343C 0013                  		move.w	#(320/16)-1,d2
0088BCB6                            @loop_ver:
0088BCB6 3003                       		move.w	d3,d0
0088BCB8 6100 D53A                  		bsr	CalcSine
0088BCBC E848                       		lsr.w	#4,d0
0088BCBE 3080                       		move.w	d0,(a0)
0088BCC0 D0FC 0004                  		adda	#4,a0
0088BCC4 0643 0002                  		add.w	#2,d3
0088BCC8 51CA FFEC                  		dbf	d2,@loop_ver
0088BCCC                            		
0088BCCC 0646 0001                  		add.w	#1,d6
0088BCD0 4E75                       		rts
0088BCD2                            	
0088BCD2                            ; ; --------------------------------------------
0088BCD2                            ; ; MARS ONLY
0088BCD2                            ; ; 
0088BCD2                            ; ; 3d test
0088BCD2                            ; ; --------------------------------------------
0088BCD2                            ; 
0088BCD2                            ; 		if MARS
0088BCD2                            ; MarsMdl_Init:
0088BCD2                            ; 		clr.w	(model_buff+$10)
0088BCD2                            ; 		bsr	MarsMdl_Set
0088BCD2                            ; 
0088BCD2                            ; ; ------------------
0088BCD2                            ; ; Loop
0088BCD2                            ; ; ------------------
0088BCD2                            ; 
0088BCD2                            ; MarsMdl_Upd:
0088BCD2                            ; 		move.b	(RAM_Control_1+ExOnHold),d4
0088BCD2                            ; 		btst	#bitJoyX,d4
0088BCD2                            ;  		beq.s	@not_X
0088BCD2                            ;  		add.w	#1,(model_buff+4)
0088BCD2                            ; @not_X:
0088BCD2                            ; 		btst	#bitJoyY,d4
0088BCD2                            ;  		beq.s	@not_Y
0088BCD2                            ;  		sub.w	#1,(model_buff+4)
0088BCD2                            ; @not_Y:
0088BCD2                            ; 		move.b	(RAM_Control_1+OnHold),d4
0088BCD2                            ; 		btst	#bitJoyRight,d4
0088BCD2                            ;  		beq.s	@not_right
0088BCD2                            ;  		sub.w	#1,(model_buff)
0088BCD2                            ; @not_right:
0088BCD2                            ; 		btst	#bitJoyLeft,d4
0088BCD2                            ;  		beq.s	@not_left
0088BCD2                            ;  		add.w	#1,(model_buff)
0088BCD2                            ; @not_left:
0088BCD2                            ; 		btst	#bitJoyDown,d4
0088BCD2                            ;  		beq.s	@not_down
0088BCD2                            ;  		sub.w	#1,(model_buff+2)
0088BCD2                            ; @not_down:
0088BCD2                            ; 		btst	#bitJoyUp,d4
0088BCD2                            ;  		beq.s	@not_up
0088BCD2                            ;  		add.w	#1,(model_buff+2)
0088BCD2                            ; @not_up:
0088BCD2                            ; 
0088BCD2                            ; 
0088BCD2                            ; 		move.b	(RAM_Control_1+OnPress),d4
0088BCD2                            ; 		btst	#bitJoyB,d4
0088BCD2                            ;  		beq.s	@not_B
0088BCD2                            ;  		add.w	#1,(model_buff+$10)
0088BCD2                            ;  		bsr	MarsMdl_Set
0088BCD2                            ; @not_B:
0088BCD2                            ; 		btst	#bitJoyA,d4
0088BCD2                            ;  		beq.s	@not_A
0088BCD2                            ;  		sub.w	#1,(model_buff+$10)
0088BCD2                            ;  		bsr	MarsMdl_Set
0088BCD2                            ; @not_A:
0088BCD2                            ; 		btst	#bitJoyC,d4
0088BCD2                            ;  		beq.s	@not_C
0088BCD2                            ;  		clr.w	(model_buff)
0088BCD2                            ;  		clr.w	(model_buff+2)
0088BCD2                            ;  		move.w	#0,(model_buff+4)
0088BCD2                            ;  		clr.w	(model_buff+6)
0088BCD2                            ;  		clr.w	(model_buff+8)
0088BCD2                            ;  		clr.w	(model_buff+$A)
0088BCD2                            ; @not_C:
0088BCD2                            ; 
0088BCD2                            ; ; Contoller 2
0088BCD2                            ; 
0088BCD2                            ; 		move.b	(RAM_Control_2+OnHold),d4
0088BCD2                            ; 		btst	#bitJoyRight,d4
0088BCD2                            ;  		beq.s	@not_right2
0088BCD2                            ;  		add.w	#1,(model_buff+8)
0088BCD2                            ; @not_right2:
0088BCD2                            ; 		btst	#bitJoyLeft,d4
0088BCD2                            ;  		beq.s	@not_left2
0088BCD2                            ;  		sub.w	#1,(model_buff+8)
0088BCD2                            ; @not_left2:
0088BCD2                            ; 		btst	#bitJoyDown,d4
0088BCD2                            ;  		beq.s	@not_down2
0088BCD2                            ;  		add.w	#1,(model_buff+6)
0088BCD2                            ; @not_down2:
0088BCD2                            ; 		btst	#bitJoyUp,d4
0088BCD2                            ;  		beq.s	@not_up2
0088BCD2                            ;  		sub.w	#1,(model_buff+6)
0088BCD2                            ; @not_up2:
0088BCD2                            ; 
0088BCD2                            ; 		btst	#bitJoyB,d4
0088BCD2                            ;  		beq.s	@not_B2
0088BCD2                            ;  		add.w	#1,(model_buff+$A)
0088BCD2                            ; @not_B2:
0088BCD2                            ; 		btst	#bitJoyA,d4
0088BCD2                            ;  		beq.s	@not_A2
0088BCD2                            ;  		sub.w	#1,(model_buff+$A)
0088BCD2                            ; @not_A2:
0088BCD2                            ; 
0088BCD2                            ; ; ------------------------
0088BCD2                            ; ; Show values
0088BCD2                            ; ; ------------------------
0088BCD2                            ; 
0088BCD2                            ; 		lea	(model_buff),a1
0088BCD2                            ; 		moveq	#2,d6
0088BCD2                            ; 		move.l	#$00050002,d7
0088BCD2                            ; @next3:
0088BCD2                            ; 		moveq	#0,d0
0088BCD2                            ; 		move.l	d7,d1
0088BCD2                            ; 		move.w	(a1)+,d2
0088BCD2                            ; 		move.w	#$2000|$580,d3
0088BCD2                            ; 		moveq	#1,d4
0088BCD2                            ; 		bsr	Video_PrintVal
0088BCD2                            ; 		add.l	#$00050000,d7
0088BCD2                            ; 		dbf	d6,@next3
0088BCD2                            ; 		
0088BCD2                            ; 		lea	(model_buff+6),a1
0088BCD2                            ; 		moveq	#2,d6
0088BCD2                            ; 		move.l	#$00050003,d7
0088BCD2                            ; @next4:
0088BCD2                            ; 		moveq	#0,d0
0088BCD2                            ; 		move.l	d7,d1
0088BCD2                            ; 		move.w	(a1)+,d2
0088BCD2                            ; 		move.w	#$2000|$580,d3
0088BCD2                            ; 		moveq	#1,d4
0088BCD2                            ; 		bsr	Video_PrintVal
0088BCD2                            ; 		add.l	#$00050000,d7
0088BCD2                            ; 		dbf	d6,@next4
0088BCD2                            ; 		
0088BCD2                            ; 		moveq	#0,d0
0088BCD2                            ; 		move.l	#$0008001A,d1
0088BCD2                            ; 		move.w	(marsreg+comm14),d2
0088BCD2                            ; 		move.w	#$2000|$580,d3
0088BCD2                            ; 		moveq	#1,d4
0088BCD2                            ; 		bsr	Video_PrintVal
0088BCD2                            ; 
0088BCD2                            ; ; 		lea	(marsreg+comm0),a1
0088BCD2                            ; ; 		moveq	#3,d6
0088BCD2                            ; ; 		move.l	#$00010019,d7
0088BCD2                            ; ; @next:
0088BCD2                            ; ; 		moveq	#0,d0
0088BCD2                            ; ; 		move.l	d7,d1
0088BCD2                            ; ; 		move.w	(a1)+,d2
0088BCD2                            ; ; 		move.w	#$2000|$580,d3
0088BCD2                            ; ; 		moveq	#1,d4
0088BCD2                            ; ; 		bsr	Video_PrintVal
0088BCD2                            ; ; 		add.l	#$00050000,d7
0088BCD2                            ; ; 		dbf	d6,@next
0088BCD2                            ; ; 		
0088BCD2                            ; ; 		lea	(marsreg+comm8),a1
0088BCD2                            ; ; 		moveq	#3,d6
0088BCD2                            ; ; 		move.l	#$0001001A,d7
0088BCD2                            ; ; @next2:
0088BCD2                            ; ; 		moveq	#0,d0
0088BCD2                            ; ; 		move.l	d7,d1
0088BCD2                            ; ; 		move.w	(a1)+,d2
0088BCD2                            ; ; 		move.w	#$2000|$580,d3
0088BCD2                            ; ; 		moveq	#1,d4
0088BCD2                            ; ; 		bsr	Video_PrintVal
0088BCD2                            ; ; 		add.l	#$00050000,d7
0088BCD2                            ; ; 		dbf	d6,@next2
0088BCD2                            ; 		
0088BCD2                            ; ; ------------------------
0088BCD2                            ; ; Send data
0088BCD2                            ; ; ------------------------
0088BCD2                            ; 
0088BCD2                            ; @busy:		tst.b	(marsreg+comm0+1)
0088BCD2                            ; 		bne.s	@busy
0088BCD2                            ; 		clr.l	(marsreg+comm4)
0088BCD2                            ; 		clr.l	(marsreg+comm8)
0088BCD2                            ; 		move.w	#$14,(marsreg+comm0)
0088BCD2                            ; 		lea	(marsreg+comm4),a0
0088BCD2                            ; 		move.w	#0,(a0)+
0088BCD2                            ; 		move.w	(model_buff),(a0)+
0088BCD2                            ; 		move.w	(model_buff+2),(a0)+
0088BCD2                            ; 		move.w	(model_buff+4),(a0)+
0088BCD2                            ;  		bset	#0,(marsreg+intctl)
0088BCD2                            ;  		
0088BCD2                            ; @busy2:		tst.b	(marsreg+comm0+1)
0088BCD2                            ; 		bne.s	@busy2
0088BCD2                            ; 		clr.l	(marsreg+comm4)
0088BCD2                            ; 		clr.l	(marsreg+comm8)
0088BCD2                            ; 		move.w	#$15,(marsreg+comm0)
0088BCD2                            ; 		lea	(marsreg+comm4),a0
0088BCD2                            ; 		move.w	#0,(a0)+
0088BCD2                            ; 		move.w	(model_buff+6),(a0)+
0088BCD2                            ; 		move.w	(model_buff+8),(a0)+
0088BCD2                            ; 		move.w	(model_buff+$A),(a0)+
0088BCD2                            ;  		bset	#0,(marsreg+intctl)
0088BCD2                            ; 		rts
0088BCD2                            ; 		
0088BCD2                            ; ; ------------------------------------
0088BCD2                            ; 
0088BCD2                            ; MarsMdl_Set:
0088BCD2                            ; 		btst	#0,(marsreg+intctl)
0088BCD2                            ; 		bne.s	@busyinit
0088BCD2                            ; 		move.w	#$10,(marsreg+comm0)
0088BCD2                            ; 		lea	(marsreg+comm4),a0
0088BCD2                            ; 		move.w	(model_buff+$10),d0
0088BCD2                            ; 		lsl.w	#4,d0
0088BCD2                            ; 		move.l	List_Models(pc,d0.w),(a0)+
0088BCD2                            ; 		move.w	#0,(a0)+
0088BCD2                            ;  		bset	#0,(marsreg+intctl)
0088BCD2                            ;  		
0088BCD2                            ;  		clr.l	(model_buff)
0088BCD2                            ;  		move.w	#0,(model_buff+4)
0088BCD2                            ;  		
0088BCD2                            ;  		clr.l	(model_buff+6)
0088BCD2                            ; 		clr.w	(model_buff+$A)
0088BCD2                            ; 		
0088BCD2                            ; ; 		move.w	(model_buff+$10),d0
0088BCD2                            ; ; 		lsl.w	#4,d0
0088BCD2                            ; ;  		lea 	List_Models+4(pc,d0.w),a0
0088BCD2                            ; ; 		moveq	#0,d0
0088BCD2                            ; ; 		move.l	#$00170001,d1
0088BCD2                            ; ; 		move.w	#$580|$2000,d2
0088BCD2                            ; ; 		bsr	Video_PrintText
0088BCD2                            ;  		
0088BCD2                            ; @busyinit:
0088BCD2                            ; 		rts
0088BCD2                            ; 		
0088BCD2                            ; 		endif
0088BCD2                            		
0088BCD2                            ; ====================================================================
0088BCD2                            ; --------------------------------------------
0088BCD2                            ; VBlank
0088BCD2                            ; --------------------------------------------
0088BCD2                            
0088BCD2                            ; ====================================================================		
0088BCD2                            ; --------------------------------------------
0088BCD2                            ; HBlank
0088BCD2                            ; --------------------------------------------
0088BCD2                            		
0088BCD2                            ; ====================================================================		
0088BCD2                            ; --------------------------------------------
0088BCD2                            ; Data
0088BCD2                            ; --------------------------------------------
0088BCD2                            
0088BCD2                            List_Models:
0088BCD2 0000 0000                  		dc.l mdldata_cube
0088BCD6 5465 7874 7572 6543 7562+  		dc.b "TextureCube",0
0088BCE2 0000 0000                  		dc.l mdldata_sphere
0088BCE6 4963 6F20 7370 6865 7265+  		dc.b "Ico sphere ",0
0088BCF2 0000 0000                  		dc.l mdldata_monkey
0088BCF6 4D6F 6E6B 6579 2020 2020+  		dc.b "Monkey     ",0
0088BD02 0000 0000                  		dc.l mdldata_field
0088BD06 536D 616C 6C20 6669 656C+  		dc.b "Small field",0
0088BD12 0000 0000                  		dc.l mdldata_world
0088BD16 4269 6720 6669 656C 6420+  		dc.b "Big field  ",0
0088BD22                            		even
0088BD22                            		
0088BD22                            		
0088BD22 4F62 6A20 2D58 2D20 202D+  Asc_MarsMdl:	dc.b "Obj -X-  -Y-  -Z-  Wld -X-  -Y-  -Z- ",$A
0088BD48 2020 5020 3030 3030 2030+  		dc.b "  P 0000 0000 0000   P 0000 0000 0000",$A
0088BD6E 2020 5220 3030 3030 2030+  		dc.b "  R 0000 0000 0000   R 0000 0000 0000",$A
0088BD94 0A                         		dc.b $A
0088BD95 0A                         		dc.b $A
0088BD96 0A                         		dc.b $A
0088BD97 0A                         		dc.b $A
0088BD98 0A                         		dc.b $A
0088BD99 0A                         		dc.b $A
0088BD9A 0A                         		dc.b $A
0088BD9B 0A                         		dc.b $A
0088BD9C 0A                         		dc.b $A
0088BD9D 0A                         		dc.b $A
0088BD9E 0A                         		dc.b $A
0088BD9F 0A                         		dc.b $A
0088BDA0 0A                         		dc.b $A
0088BDA1 0A                         		dc.b $A
0088BDA2 0A                         		dc.b $A
0088BDA3 0A                         		dc.b $A
0088BDA4 0A                         		dc.b $A
0088BDA5 0A                         		dc.b $A
0088BDA6 0A                         		dc.b $A
0088BDA7 0A                         		dc.b $A
0088BDA8 0A                         		dc.b $A
0088BDA9 0A                         		dc.b $A
0088BDAA 4661 6365 733A 2030 3030+  		dc.b "Faces: 0000",$A
0088BDB6 00                         		dc.b 0
0088BDB8 00                         		even
0088BDB8                            		
0088BDB8                            Asc_Karasucia:
0088BDB8 446F 6D69 6E6F 6520 4164+  		dc.b "Dominoe Adventures mini-game",$A
0088BDD5 0A                         		dc.b $A
0088BDD6 0A                         		dc.b $A
0088BDD7 0A                         		dc.b $A
0088BDD8 0A                         		dc.b $A
0088BDD9 0A                         		dc.b $A
0088BDDA 0A                         		dc.b $A
0088BDDB 0A                         		dc.b $A
0088BDDC 0A                         		dc.b $A
0088BDDD 0A                         		dc.b $A
0088BDDE 0A                         		dc.b $A
0088BDDF 0A                         		dc.b $A
0088BDE0 0A                         		dc.b $A
0088BDE1 0A                         		dc.b $A
0088BDE2 0A                         		dc.b $A
0088BDE3 0A                         		dc.b $A
0088BDE4 0A                         		dc.b $A
0088BDE5 0A                         		dc.b $A
0088BDE6 0A                         		dc.b $A
0088BDE7 0A                         		dc.b $A
0088BDE8 0A                         		dc.b $A
0088BDE9 0A                         		dc.b $A
0088BDEA 0A                         		dc.b $A
0088BDEB 0A                         		dc.b $A
0088BDEC 0A                         		dc.b $A
0088BDED 2843 2947 4636 3420 3230+  		dc.b "(C)GF64 2017"
0088BDF9 00                         		dc.b 0
0088BDFA                            		even
0088BDFA                            		
0088BDFA                            Art_DebugFont:	incbin "engine/shared/dbgfont.bin"
0088CDFA                            Art_DebugFont_e:
0088CDFA                            		even
0088CDFA                            		
0088CDFA                            		
0088CDFA                            		include "engine/modes/level/md.asm"
0088CDFA                            ; ====================================================================
0088CDFA                            ; -------------------------------------------------
0088CDFA                            ; Level
0088CDFA                            ; 
0088CDFA                            ; CODE ONLY
0088CDFA                            ; -------------------------------------------------
0088CDFA                            
0088CDFA                            ; --------------------------------------------
0088CDFA                            ; RAM
0088CDFA                            ; --------------------------------------------
0088CDFA                            
0088CDFA                            		rsset RAM_ModeBuffer
0088CDFA                            ;Prize data: $FF0000-$FF87FF
0088CDFA =FFFFBC00                  RAM_Level	rs.b $440
0088CDFA =FFFFC040                  RAM_ObjectSys	rs.b $1B80
0088CDFA =FFFFDBC0                  sizeof_lvl	rs.l 0
0088CDFA                            ;       		inform 0,"Level mode uses: %h",(sizeof_lvl-RAM_ModeBuffer)
0088CDFA                            		
0088CDFA                            ; --------------------------------------------
0088CDFA                            ; Init
0088CDFA                            ; --------------------------------------------
0088CDFA                            
0088CDFA                            mode_Level:
0088CE0C 46FC 2700                  		move.w	#$2700,sr
0088CE10 4279 FFFF DC06             		clr.w	(RAM_CurrLevel)
0088CE16 6100 BD58                  		bsr	Video_ClearAll
0088CE1A                            		
0088CE1A                            ; --------------
0088CE1A                            ; Load resources
0088CE1A                            ; --------------
0088CE1A                            
0088CE1A 41F9 0000 0000             		lea	(Pal_LvlCoinItms),a0
0088CE20 43F9 FFFF EA10             		lea	(RAM_PalFade+$40),a1
0088CE26 303C 000F                  		move.w	#16-1,d0
0088CE2A                            @copyextpal:
0088CE2A 32D8                       		move.w	(a0)+,(a1)+
0088CE2C 51C8 FFFC                  		dbf	d0,@copyextpal
0088CE30                            		
0088CE30 41F9 0000 0000             		lea	(Pal_Player),a0
0088CE36 303C 000F                  		move.w	#16-1,d0
0088CE3A                            @copychrpal:
0088CE3A 32D8                       		move.w	(a0)+,(a1)+
0088CE3C 51C8 FFFC                  		dbf	d0,@copychrpal
0088CE40                            		
0088CE40                            		;Same art for everything
0088CE40 41F9 0000 0000             		lea	(Art_Lvl_Test),a0
0088CE46 23FC 4000 0000 00C0 0004   		move.l	#$40000000,(vdp_ctrl)
0088CE50 303C 0000                  		move.w	#((Art_Lvl_Test_e-Art_Lvl_Test)/4)-1,d0
0088CE54                            @copy_art:
0088CE54 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0088CE5A 51C8 FFF8                  		dbf	d0,@copy_art
0088CE5E                            		
0088CE5E 41F9 0000 0000             		lea	(Art_LvlBG_Test),a0
0088CE64 23FC 7800 0000 00C0 0004   		move.l	#$78000000,(vdp_ctrl)
0088CE6E 303C 0000                  		move.w	#((Art_LvlBG_Test_e-Art_LvlBG_Test)/4)-1,d0
0088CE72                            @dobgart:
0088CE72 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0088CE78 51C8 FFF8                  		dbf	d0,@dobgart
0088CE7C                               				
0088CE7C 6100 0000                  		bsr	Level_Init
0088CE80 43F9 0000 0000                		lea	(artdata_Level_Test),a1
0088CE86 6100 0000                     		bsr	Level_LoadArtList
0088CE8A                            
0088CE8A                            ; **************
0088CE8A                            ; DEBUG ONLY
0088CE8A                            ; **************
0088CE8A                            
0088CE8A 23FC 5000 0003 00C0 0004   		move.l	#$50000003,(vdp_ctrl)
0088CE94 41F9 0088 BDFA             		lea	(Art_DebugFont),a0
0088CE9A 303C 03FF                  		move.w	#((Art_DebugFont_e-Art_DebugFont)/4)-1,d0
0088CE9E                            @dbg_loop:
0088CE9E 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0088CEA4 51C8 FFF8                  		dbf	d0,@dbg_loop
0088CEA8                            		
0088CEA8                            ;    		move.l	#$40800001,(vdp_ctrl)		
0088CEA8                            ;    		move.l	#$17100000,(vdp_data)
0088CEA8                            ;    		move.l	#$71700000,(vdp_data)
0088CEA8                            ;    		move.l	#$17100000,(vdp_data)
0088CEA8                            ;      		move.w	#1,(RAM_CurrLevel)
0088CEA8                                 		
0088CEA8                            ;      		if MCD=0
0088CEA8                            ;  		move.l	#TEST_IT,d0
0088CEA8                            ;  		moveq 	#7,d1
0088CEA8                            ;  		moveq	#0,d2
0088CEA8                            ;   		bsr	Audio_Track_play
0088CEA8                            ;   		endif
0088CEA8                            		
0088CEA8                            ; --------------
0088CEA8                            ; Restart
0088CEA8                            ; --------------
0088CEA8                            
0088CEA8                            @restart:
0088CEA8 6100 BD1E                  		bsr	Video_ClearScroll
0088CEAC 6100 BCD8                  		bsr	Video_ClearSprites
0088CEB0 6100 0000                    		bsr	Objects_Init
0088CEB4 6100 0000                  		bsr	Level_FromList
0088CEB8 6100 0000                    		bsr	Level_Draw
0088CEBC 6100 0000                     		bsr	Level_Run
0088CEC0                               		
0088CEC0 41F9 0000 0000             		lea	(Map_LvlBG_Test),a0
0088CEC6 7001                        		moveq	#1,d0
0088CEC8 223C 0000 0000              		move.l	#$00000000,d1
0088CECE 243C 003F 001F                		move.l	#$003F001F,d2
0088CED4 363C 21C0                     		move.w	#$21C0,d3
0088CED8 6100 BE6C                     		bsr	Video_MakeMap
0088CEDC                               		
0088CEDC 203C 0000 0000               		move.l	#Music_Level1,d0
0088CEE2 7201                         		moveq 	#1,d1
0088CEE4 7400                         		moveq	#0,d2
0088CEE6 6100 CA9A                    		bsr	Audio_Track_play
0088CEEA                              		
0088CEEA 46FC 2000                   		move.w	#$2000,sr
0088CEEE                             		
0088CEEE 6100 0000                    		bsr	Objects_Run
0088CEF2                            ; 		bsr	Level_DbgInit
0088CF04                             		
0088CF04                            ; --------------------------------------------
0088CF04                            ; Loop
0088CF04                            ; --------------------------------------------
0088CF04                            
0088CF04                            @loop:
0088CF04 6100 BEC8                   		bsr	Video_vsync
0088CF08                             		
0088CF08 6100 0000                     		bsr	Level_BlockUpd	
0088CF0C 6100 0000                    		bsr	Objects_Run
0088CF10 6100 0000                     		bsr	Level_Run
0088CF14                            ;    		bsr	Level_Debug
0088CF14                            		
0088CF14                            ; -----------------------------------------
0088CF14                            
0088CF14                            ; 		btst	#bitJoyStart,(RAM_Control_1+OnPress)
0088CF14                            ;  		beq.s	@ignore_st
0088CF14                            ;  		clr.b	(RAM_GameMode)
0088CF14                            ;  		rts
0088CF14                            ; @ignore_st:
0088CF14                            ; 		btst	#bitJoyA,(RAM_Control_2+OnHold)
0088CF14                            ;  		beq.s	@ignore_d
0088CF14                            ;  		move.b	#1,(RAM_ModeReset)
0088CF14                            ;   		add.w	#1,(RAM_CurrLevel)
0088CF14                            ; 
0088CF14                            ; @ignore_d:
0088CF14 4A39 FFFF DE4C             		tst.b	(RAM_ModeReset)
0088CF1A 6700 FFE8                  		beq	@loop
0088CF1E 4239 FFFF DE4C             		clr.b	(RAM_ModeReset)
0088CF24                            		
0088CF24 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
0088CF2A 6700                       		beq.s	@gameover
0088CF2C 4E75                       		rts
0088CF2E                            		
0088CF2E                            ;  		fade	out
0088CF2E                            ;  		move.w	#$2700,sr
0088CF2E                            ;  		bra	@Restart
0088CF2E                            
0088CF2E                            ; --------------------------------------------
0088CF2E                            ; Game Over
0088CF2E                            ; --------------------------------------------
0088CF2E                            
0088CF2E                            @gameover:
0088CF2E 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
0088CF34 4E75                       		rts
0088CF36                            		
0088CF36                            ; ====================================================================
0088CF36                            ; --------------------------------------------
0088CF36                            ; Subs
0088CF36                            ; --------------------------------------------
0088CF36                            
0088CF36                            Level_DbgInit:
0088CF36                            ; 		move.w	#$EEE,(RAM_PalFade+$42)
0088CF36 41FA 0000                  		lea	ascDebugTop(pc),a0
0088CF3A 7002                       		moveq	#2,d0
0088CF3C 223C 0000 0000             		move.l	#$00000000,d1
0088CF42 343C 0680                  		move.w	#$680,d2
0088CF46 6100 BE54                  		bsr	Video_PrintText
0088CF4A                            		
0088CF4A 23FC 9100 9201 00C0 0004   		move.l	#$91009201,(vdp_ctrl)
0088CF54                            		
0088CF54                            Level_Debug:
0088CF54                            ;  		moveq	#2,d0
0088CF54                            ; 		move.l	#$00060000,d1
0088CF54                            ; 		moveq	#0,d2
0088CF54                            ; 		move.w	(RAM_P1_Coins),d2
0088CF54                            ; 		move.w	#$680,d3
0088CF54                            ; 		moveq	#4,d4
0088CF54                            ; 		bsr	Video_PrintVal
0088CF54                            ; 
0088CF54                            ;  		moveq	#2,d0
0088CF54                            ; 		move.l	#$000F0000,d1
0088CF54                            ; 		moveq	#0,d2
0088CF54                            ; 		move.w	(RAM_P1_Hits),d2
0088CF54                            ; 		move.w	#$680,d3
0088CF54                            ; 		moveq	#4,d4
0088CF54                            ; 		bsr	Video_PrintVal
0088CF54                            
0088CF54 7002                        		moveq	#2,d0
0088CF56 223C 001B 0000             		move.l	#$001B0000,d1
0088CF5C 2439 0000 0000             		move.l	(RAM_ObjBuffer+obj_y_spd),d2
0088CF62 363C 0680                  		move.w	#$680,d3
0088CF66 7802                       		moveq	#2,d4
0088CF68 6100 BD70                  		bsr	Video_PrintVal
0088CF6C                            		
0088CF6C 7002                        		moveq	#2,d0
0088CF6E 223C 0018 0000             		move.l	#$00180000,d1
0088CF74 7400                       		moveq	#0,d2
0088CF76 1439 0000 0000             		move.b	(RAM_ObjBuffer+obj_col),d2
0088CF7C 363C 0680                  		move.w	#$680,d3
0088CF80 7800                       		moveq	#0,d4
0088CF82 6100 BD56                  		bsr	Video_PrintVal
0088CF86                            		
0088CF86 7002                        		moveq	#2,d0
0088CF88 223C 000C 0000             		move.l	#$000C0000,d1
0088CF8E 7400                       		moveq	#0,d2
0088CF90 1439 0000 0000             		move.b	(RAM_ObjBuffer+obj_status),d2
0088CF96 363C 0680                  		move.w	#$680,d3
0088CF9A 7800                       		moveq	#0,d4
0088CF9C 6000 BD3C                  		bra	Video_PrintVal
0088CFA0                            		
0088CFA0                            ; -----------------------
0088CFA0                            
0088CFA0                            Level_FromList:
0088CFA0 3039 FFFF DC06             		move.w	(RAM_CurrLevel),d0
0088CFA6 E948                       		lsl.w	#4,d0
0088CFA8 49F9 0000 0000             		lea	(LevelList),a4
0088CFAE 2074 0000                  		movea.l	(a4,d0.w),a0
0088CFB2 6100 0000                  		bsr	Level_Load
0088CFB6 43F9 0000 0000             		lea	(RAM_LvlPlanes),a1
0088CFBC 1374 0000 0000             		move.b	(a4,d0.w),lvl_type(a1)
0088CFC2                            		
0088CFC2 41F9 0000 0000             		lea	(Pal_LvlMain_Gray),a0
0088CFC8 43F9 FFFF E9D0             		lea	(RAM_PalFade),a1
0088CFCE 7000                       		moveq	#0,d0
0088CFD0 303C 001F                  		move.w	#32-1,d0
0088CFD4                            @copy_pal:
0088CFD4 32D8                       		move.w	(a0)+,(a1)+
0088CFD6 51C8 FFFC                  		dbf	d0,@copy_pal
0088CFDA                            		
0088CFDA 3239 FFFF DC06             		move.w	(RAM_CurrLevel),d1
0088CFE0 E949                       		lsl.w	#4,d1
0088CFE2                            		
0088CFE2 7000                       		moveq	#0,d0
0088CFE4 3034 1008                   		move.w	8(a4,d1.w),d0
0088CFE8 4840                        		swap	d0
0088CFEA 3034 100A                     		move.w	$A(a4,d1.w),d0
0088CFEE 4239 0000 0000                 		clr.b	(RAM_ObjBuffer+obj_index)
0088CFF4 23FC 0000 0000 0000 0000       		move.l	#Obj_Player,(RAM_ObjBuffer)
0088CFFE 6100 0000                      		bsr	Plyr_SetStartPos
0088D002                            		
0088D002 3239 FFFF DC06             		move.w	(RAM_CurrLevel),d1
0088D008 E949                       		lsl.w	#4,d1
0088D00A 43F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*4)),a1
0088D010 3374 100C 0000              		move.w	$C(a4,d1.w),obj_x(a1)
0088D016 3374 100E 0000                		move.w	$E(a4,d1.w),obj_y(a1)
0088D01C 237C 0000 0000 0000        		move.l	#Obj_EndFlag,obj_code(a1)
0088D024 43F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*6)),a1	
0088D02A 237C 0000 0000 0000        		move.l	#Obj_HudInfo,obj_code(a1)
0088D032 337C 0000 0000             		move.w	#0,obj_x(a1)
0088D038 337C 0000 0000             		move.w	#0,obj_y(a1)
0088D03E 4E75                       		rts
0088D040                            		
0088D040 6F62 6A5F 7374 6174 7573+  ascDebugTop:	dc.b "obj_status: 00 obj_col: 00              ",0
0088D069                            ; 		dc.b "                              00000000",0
0088D06A 00                         		even
0088D06A                            		
0088D06A                            ; --------------------------------------------
0088D06A                            
0088D06A                            		include	"engine/modes/level/subs/level.asm"
0088D06A                            ; ====================================================================
0088D06A                            ; ---------------------------------------------
0088D06A                            ; Level system
0088D06A                            ; ---------------------------------------------
0088D06A                            
0088D06A                            ; *** NOTES ***
0088D06A                            ; MAX Prize size: $7FFF
0088D06A                            
0088D06A                            ; --------------------------------------------
0088D06A                            ; Variables
0088D06A                            ; --------------------------------------------
0088D06A                            
0088D06A                            		rsreset
0088D06A =00000000                  lvl_objects	rs.l 1
0088D06A =00000004                  lvl_blocks	rs.l 1
0088D06A =00000008                  lvl_przblocks	rs.l 1
0088D06A =0000000C                  lvl_layout	rs.l 1
0088D06A =00000010                  lvl_hilayout	rs.l 1
0088D06A =00000014                  lvl_collision	rs.l 1
0088D06A =00000018                  lvl_prizes	rs.l 1
0088D06A =0000001C                  lvl_x		rs.l 1
0088D06A =00000020                  lvl_y		rs.l 1
0088D06A =00000024                  lvl_x_camspd	rs.l 1
0088D06A =00000028                  lvl_y_camspd	rs.l 1
0088D06A =0000002C                  lvl_timer	rs.l 1
0088D06A =00000030                  lvl_size_x	rs.w 1
0088D06A =00000032                  lvl_size_y	rs.w 1
0088D06A =00000034                  lvl_maxcam_x	rs.w 1
0088D06A =00000036                  lvl_maxcam_y	rs.w 1
0088D06A =00000038                  lvl_camflags	rs.w 1
0088D06A =0000003A                  lvl_flags	rs.w 1
0088D06A =0000003C                  lvl_type	rs.w 1
0088D06A =0000003E                  lvl_lastx	rs.w 1
0088D06A =00000040                  lvl_lasty	rs.w 1
0088D06A =00000042                  sizeof_lvlpln	rs.l 0
0088D06A                            
0088D06A                            ; --------------------------------------------
0088D06A                            
0088D06A =00000046                  max_lvlobj	equ	70
0088D06A                            
0088D06A =00000000                  bitLvlDirR	equ	0
0088D06A =00000001                  bitLvlDirL	equ	1
0088D06A =00000002                  bitLvlDirD	equ	2
0088D06A =00000003                  bitLvlDirU	equ	3
0088D06A =00000004                  bitLvlDontUpd	equ	4
0088D06A                            
0088D06A                            ; RAM_LevelPrizes	equ	$FF0000
0088D06A                            
0088D06A                            ; --------------------------------------------
0088D06A                            ; RAM
0088D06A                            ; --------------------------------------------
0088D06A                            
0088D06A                            		rsset RAM_Level
0088D06A =FFFFBC00                  RAM_LvlPlanes	rs.b sizeof_lvlpln
0088D06A =FFFFBC42                  RAM_LevelObjPos	rs.w (max_lvlobj)*5
0088D06A =FFFFBEFE                  RAM_LvlAnim	rs.w 16
0088D06A =FFFFBF1E                  RAM_PrizeHide	rs.w 1+(2*16)
0088D06A =FFFFBF60                  RAM_PrizeShow	rs.w 1+(2*16)
0088D06A =FFFFBFA2                  RAM_PrizeUsed	rs.w 1+(2*16)
0088D06A                            
0088D06A =FFFFBFE4                  sizeof_lvl2	rs.l 0
0088D06A                            ;    		inform 0,"Level system uses: %h",(sizeof_lvl2-RAM_Level)
0088D06A                            		
0088D06A                            ; ====================================================================	
0088D06A                            ; --------------------------------------------
0088D06A                            ; Init
0088D06A                            ; --------------------------------------------
0088D06A                            
0088D06A                            Level_Init:
0088D06A 4279 FFFF DC02             		clr.w	(RAM_P1_Coins)
0088D070 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
0088D076 6600                       		bne.s	@firsttime
0088D078 33FC 0003 FFFF DC00        		move.w	#3,(RAM_P1_Lives)
0088D080                            @firsttime:
0088D080 13FC 0003 FFFF ED1B          		move.b	#%11,(RAM_VidRegs+$B)		; H: line V: full
0088D088                            ;      		move.b	#%10000111,(RAM_VidRegs+$C)	; H40 + Double interlace
0088D088 13FC 0001 FFFF ED20          		move.b	#1,(RAM_VidRegs+$10)		; 512x256 layer size
0088D090 6100 BB64                    		bsr	Video_Update
0088D094                             		
0088D094 41F9 0000 0000             		lea	(Art_LvlPrizes),a0
0088D09A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,(vdp_ctrl)
0088D0A4 303C 0000                  		move.w	#((Art_LvlPrizes_e-Art_LvlPrizes)/4)-1,d0
0088D0A8                            @doprzart:
0088D0A8 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0088D0AE 51C8 FFF8                  		dbf	d0,@doprzart
0088D0B2                            		
0088D0B2                            ; 		move.w	#-1,(RAM_LvlPlanes+lvl_lastx)
0088D0B2                            ; 		move.w	#-1,(RAM_LvlPlanes+lvl_lasty)		
0088D0B2 4E75                       		rts
0088D0B4                            		
0088D0B4                            ; ====================================================================		
0088D0B4                            ; --------------------------------------------
0088D0B4                            ; Loop
0088D0B4                            ; --------------------------------------------
0088D0B4                            
0088D0B4                            Level_Run:
0088D0B4 4DF9 FFFF BC00             		lea	(RAM_LvlPlanes),a6
0088D0BA                            		
0088D0BA 6100 0000                   		bsr	Lvl_RefreshObj
0088D0BE 6100 0000                  		bsr	Lvl_DrawScrl
0088D0C2 6100 0000                  		bsr	Lvl_Animation
0088D0C6 6000 0000                  		bra	Lvl_Deform
0088D0CA                            		
0088D0CA                            ; -----------------------------------
0088D0CA                             
0088D0CA                            Level_BlockUpd:
0088D0CA 4DF9 FFFF BC00             		lea	(RAM_LvlPlanes),a6
0088D0D0 4BF9 FFFF BF1E             		lea	(RAM_PrizeHide),a5
0088D0D6 3C15                       		move.w	(a5),d6
0088D0D8 425D                       		clr.w	(a5)+
0088D0DA 4A46                       		tst.w	d6
0088D0DC 6700                       		beq.s	@skip_hide
0088D0DE 0446 0001                  		sub.w	#1,d6
0088D0E2                            @next_hide:
0088D0E2 2015                       		move.l	(a5),d0
0088D0E4 6100 0000                   		bsr	Lvl_DoHidePrz
0088D0E8 429D                        		clr.l	(a5)+
0088D0EA 51CE FFF6                   		dbf	d6,@next_hide
0088D0EE                            @skip_hide:
0088D0EE                            
0088D0EE 4BF9 FFFF BF60             		lea	(RAM_PrizeShow),a5
0088D0F4 3C15                       		move.w	(a5),d6
0088D0F6 425D                       		clr.w	(a5)+
0088D0F8 4A46                       		tst.w	d6
0088D0FA 6700                       		beq.s	@skip_show
0088D0FC 0446 0001                  		sub.w	#1,d6
0088D100                            @next_show:
0088D100 2015                       		move.l	(a5),d0
0088D102 6100 0000                   		bsr	Lvl_DoShowPrz
0088D106 429D                        		clr.l	(a5)+
0088D108 51CE FFF6                   		dbf	d6,@next_show
0088D10C                            @skip_show:
0088D10C                            		
0088D10C 4E75                       		rts
0088D10E                            		
0088D10E                            ; ====================================================================
0088D10E                            ; --------------------------------------------
0088D10E                            ; Subs
0088D10E                            ; --------------------------------------------
0088D10E                            
0088D10E                            Lvl_DrawScrl:
0088D10E                            
0088D10E                            ; -----------------------------------
0088D10E                            ; RIGHT
0088D10E                            ; -----------------------------------
0088D10E                            
0088D10E 302E 003E                  		move.w	lvl_lastx(a6),d0
0088D112 322E 001C                  		move.w	lvl_x(a6),d1
0088D116 B240                       		cmp.w	d0,d1
0088D118 6700 0000                  		beq	@dontupdL
0088D11C 3D41 003E                  		move.w	d1,lvl_lastx(a6)
0088D120                            		
0088D120 082E 0000 003A             		btst	#bitLvlDirR,lvl_flags(a6)
0088D126 6700 0000                  		beq	@dontupdR
0088D12A 08AE 0000 003A             		bclr	#bitLvlDirR,lvl_flags(a6)
0088D130 303C 4000                  		move.w	#$4000,d0
0088D134 2A6E 000C                  		movea.l	lvl_layout(a6),a5
0088D138 286E 0010                  		movea.l lvl_hilayout(a6),a4
0088D13C 266E 0018                  		movea.l	lvl_prizes(a6),a3
0088D140                            		
0088D140 382E 0020                  		move.w	lvl_y(a6),d4
0088D144 3404                       		move.w	d4,d2
0088D146 E84A                       		lsr.w	#4,d2
0088D148 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
0088D14C DAC2                        		adda	d2,a5
0088D14E D8C2                        		adda 	d2,a4
0088D150 D6C2                        		adda	d2,a3
0088D152                             		
0088D152 3604                        		move.w	d4,d3
0088D154 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
0088D158 0644 0150                  		add.w	#$150,d4
0088D15C 3204                       		move.w	d4,d1
0088D15E E849                       		lsr.w	#4,d1
0088D160 DAC1                        		adda	d1,a5
0088D162 D8C1                        		adda 	d1,a4
0088D164 D6C1                        		adda	d1,a3
0088D166                            
0088D166 E44C                       		lsr.w	#2,d4
0088D168 0244 007C                  		and.w	#$7C,d4
0088D16C E94B                       		lsl.w	#4,d3			; VDP YPOS
0088D16E 0243 0F00                  		and.w	#$F00,d3
0088D172 D843                       		add.w	d3,d4
0088D174 8840                       		or.w	d0,d4
0088D176 4844                       		swap	d4
0088D178 383C 0003                   		move.w	#3,d4
0088D17C                             		
0088D17C 363C 000F                   		move.w	#$F,d3
0088D180                            ;   		move.l	#$00010001,d1
0088D180                            @nextblkR:
0088D180 7000                       		moveq	#0,d0
0088D182 246E 0004                  		movea.l	lvl_blocks(a6),a2
0088D186 1013                       		move.b	(a3),d0
0088D188 4A00                        		tst.b	d0
0088D18A 6700                        		beq.s	@noPrzR
0088D18C 0800 0007                   		btst	#7,d0
0088D190 6600                        		bne.s	@noPrzR
0088D192 0240 007F                   		and.w	#$7F,d0
0088D196 246E 0008                  		movea.l	lvl_przblocks(a6),a2
0088D19A 6000                       		bra.s	@hasprzR
0088D19C                            @noPrzR:
0088D19C 1015                       		move.b	(a5),d0
0088D19E 4A14                       		tst.b 	(a4)
0088D1A0 6700                       		beq.s 	@hasprzR
0088D1A2 1014                       		move.b 	(a4),d0
0088D1A4                            @hasprzR:
0088D1A4                            		
0088D1A4 E748                       		lsl.w	#3,d0
0088D1A6 3232 0002                  		move.w	2(a2,d0.w),d1
0088D1AA 4841                       		swap	d1
0088D1AC 3232 0000                  		move.w	(a2,d0.w),d1
0088D1B0 3432 0006                   		move.w	6(a2,d0.w),d2
0088D1B4 4842                        		swap	d2
0088D1B6 3432 0004                   		move.w	4(a2,d0.w),d2
0088D1BA                            
0088D1BA 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
0088D1C0 0684 0080 0000              		add.l	#$00800000,d4
0088D1C6 0284 4FFE 0003               		and.l	#$4FFE0003,d4
0088D1CC                              		
0088D1CC 4843                         		swap	d3
0088D1CE 1639 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d3
0088D1D4 0243 0006                   		and.w	#%110,d3
0088D1D8 6700                        		beq.s	@dontShftV_R
0088D1DA E249                        		lsr.w	#1,d1
0088D1DC E24A                        		lsr.w	#1,d2
0088D1DE                            @dontShftV_R:
0088D1DE 4843                       		swap	d3
0088D1E0 4A14                       		tst.b 	(a4)
0088D1E2 6700                       		beq.s 	@nohiprioR
0088D1E4 0041 8000                  		or.w 	#$8000,d1
0088D1E8 0042 8000                  		or.w 	#$8000,d2
0088D1EC                            @nohiprioR:
0088D1EC 33C1 00C0 0000              		move.w	d1,(vdp_data)
0088D1F2 33C2 00C0 0000              		move.w	d2,(vdp_data)
0088D1F8                             		
0088D1F8 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
0088D1FE 0241 0006                   		and.w	#%110,d1
0088D202 6600                        		bne.s	@dontupdR_2
0088D204                             		
0088D204 4841                        		swap	d1
0088D206 4842                        		swap	d2
0088D208 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
0088D20E 0684 0080 0000              		add.l	#$00800000,d4
0088D214 0284 4FFE 0003               		and.l	#$4FFE0003,d4
0088D21A 4A14                         		tst.b 	(a4)
0088D21C 6700                       		beq.s 	@nohiprioR_2
0088D21E 0041 8000                  		or.w 	#$8000,d1
0088D222 0042 8000                  		or.w 	#$8000,d2
0088D226                            @nohiprioR_2:
0088D226 33C1 00C0 0000              		move.w	d1,(vdp_data)
0088D22C 33C2 00C0 0000              		move.w	d2,(vdp_data)
0088D232                             		
0088D232                            @dontupdR_2:
0088D232 DAEE 0030                   		add.w	lvl_size_x(a6),a5
0088D236 D8EE 0030                   		add.w 	lvl_size_x(a6),a4
0088D23A D6EE 0030                   		add.w	lvl_size_x(a6),a3
0088D23E 51CB FF40                  		dbf	d3,@nextblkR
0088D242                            @dontupdR:
0088D242                            	
0088D242                            ; -----------------------------------
0088D242                            ; LEFT
0088D242                            ; -----------------------------------
0088D242                            
0088D242 082E 0001 003A             		btst	#bitLvlDirL,lvl_flags(a6)
0088D248 6700 0000                  		beq	@dontupdL
0088D24C 08AE 0001 003A             		bclr	#bitLvlDirL,lvl_flags(a6)
0088D252 303C 4000                  		move.w	#$4000,d0
0088D256 2A6E 000C                  		movea.l	lvl_layout(a6),a5
0088D25A 286E 0010                  		movea.l lvl_hilayout(a6),a4
0088D25E 266E 0018                  		movea.l	lvl_prizes(a6),a3
0088D262                            		
0088D262 382E 0020                  		move.w	lvl_y(a6),d4
0088D266 3404                       		move.w	d4,d2
0088D268 E84A                       		lsr.w	#4,d2
0088D26A C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
0088D26E DAC2                        		adda	d2,a5
0088D270 D8C2                        		adda	d2,a4
0088D272 D6C2                        		adda	d2,a3
0088D274 3604                        		move.w	d4,d3
0088D276                             		
0088D276 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
0088D27A 0444 0010                       		sub.w	#$010,d4		; TODO CHECAR SI FUNCIONA BIEN
0088D27E 3204                       		move.w	d4,d1
0088D280 E849                       		lsr.w	#4,d1
0088D282 DAC1                        		adda	d1,a5
0088D284 D8C1                        		adda	d1,a4
0088D286 D6C1                        		adda	d1,a3
0088D288                             		
0088D288 E44C                       		lsr.w	#2,d4
0088D28A 0244 007C                  		and.w	#$7C,d4
0088D28E E94B                       		lsl.w	#4,d3			; VDP YPOS
0088D290 0243 0F00                  		and.w	#$F00,d3
0088D294 D843                       		add.w	d3,d4
0088D296 8840                       		or.w	d0,d4
0088D298 4844                       		swap	d4
0088D29A 383C 0003                   		move.w	#3,d4
0088D29E                             		
0088D29E 363C 000F                   		move.w	#$F,d3
0088D2A2                            ;  		move.l	#$00010001,d1
0088D2A2                            @nextblkL:
0088D2A2 7000                       		moveq	#0,d0
0088D2A4 246E 0004                  		movea.l	lvl_blocks(a6),a2
0088D2A8 1013                       		move.b	(a3),d0
0088D2AA 4A00                        		tst.b	d0
0088D2AC 6700                        		beq.s	@noPrzL
0088D2AE 0800 0007                   		btst	#7,d0
0088D2B2 6600                        		bne.s	@noPrzL
0088D2B4 0240 007F                   		and.w	#$7F,d0
0088D2B8 246E 0008                  		movea.l	lvl_przblocks(a6),a2
0088D2BC 6000                       		bra.s	@hasprzL
0088D2BE                            @noPrzL:
0088D2BE 1015                       		move.b	(a5),d0
0088D2C0 4A14                       		tst.b 	(a4)
0088D2C2 6700                       		beq.s 	@hasprzL
0088D2C4 1014                       		move.b 	(a4),d0
0088D2C6                            @hasprzL:
0088D2C6 E748                       		lsl.w	#3,d0
0088D2C8 3232 0002                  		move.w	2(a2,d0.w),d1
0088D2CC 4841                       		swap	d1
0088D2CE 3232 0000                  		move.w	(a2,d0.w),d1
0088D2D2 3432 0006                   		move.w	6(a2,d0.w),d2
0088D2D6 4842                        		swap	d2
0088D2D8 3432 0004                   		move.w	4(a2,d0.w),d2
0088D2DC                            
0088D2DC 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
0088D2E2 0684 0080 0000              		add.l	#$00800000,d4
0088D2E8 0284 4FFE 0003               		and.l	#$4FFE0003,d4
0088D2EE                              		
0088D2EE 4843                         		swap	d3
0088D2F0 1639 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d3
0088D2F6 0243 0006                   		and.w	#%110,d3
0088D2FA 6700                        		beq.s	@dontShftV_L
0088D2FC E249                        		lsr.w	#1,d1
0088D2FE E24A                        		lsr.w	#1,d2
0088D300                            @dontShftV_L:
0088D300 4843                       		swap	d3
0088D302 4A14                       		tst.b 	(a4)
0088D304 6700                       		beq.s 	@nohiprioL
0088D306 0041 8000                  		or.w	#$8000,d1
0088D30A 0042 8000                  		or.w 	#$8000,d2
0088D30E                            @nohiprioL:
0088D30E 33C1 00C0 0000              		move.w	d1,(vdp_data)
0088D314 33C2 00C0 0000              		move.w	d2,(vdp_data)
0088D31A                             		
0088D31A 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
0088D320 0241 0006                   		and.w	#%110,d1
0088D324 6600                        		bne.s	@dontupdL_2
0088D326                             		
0088D326 4841                        		swap	d1
0088D328 4842                        		swap	d2
0088D32A 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
0088D330 0684 0080 0000              		add.l	#$00800000,d4
0088D336 0284 4FFE 0003               		and.l	#$4FFE0003,d4
0088D33C 4A14                       		tst.b 	(a4)
0088D33E 6700                       		beq.s 	@nohiprioL_2
0088D340 0041 8000                  		or.w	#$8000,d1
0088D344 0042 8000                  		or.w 	#$8000,d2
0088D348                            @nohiprioL_2:
0088D348 33C1 00C0 0000              		move.w	d1,(vdp_data)
0088D34E 33C2 00C0 0000              		move.w	d2,(vdp_data)
0088D354                             		
0088D354                            @dontupdL_2:
0088D354 DAEE 0030                   		add.w	lvl_size_x(a6),a5
0088D358 D8EE 0030                   		add.w	lvl_size_x(a6),a4
0088D35C D6EE 0030                   		add.w	lvl_size_x(a6),a3
0088D360 51CB FF40                  		dbf	d3,@nextblkL
0088D364                            @dontupdL:
0088D364                            
0088D364                            ; -----------------------------------
0088D364                            ; DOWN
0088D364                            ; -----------------------------------
0088D364                            
0088D364 302E 0040                  		move.w	lvl_lasty(a6),d0
0088D368 322E 0020                  		move.w	lvl_y(a6),d1
0088D36C B240                       		cmp.w	d0,d1
0088D36E 6700 0000                  		beq	@dontupdU
0088D372 3D41 0040                  		move.w	d1,lvl_lasty(a6)
0088D376                            		
0088D376 082E 0002 003A             		btst	#bitLvlDirD,lvl_flags(a6)
0088D37C 6700 0000                  		beq	@dontupdD
0088D380 08AE 0002 003A             		bclr	#bitLvlDirD,lvl_flags(a6)
0088D386                            			
0088D386 2A6E 000C                  		movea.l	lvl_layout(a6),a5
0088D38A 286E 0010                  		movea.l lvl_hilayout(a6),a4
0088D38E 266E 0018                  		movea.l	lvl_prizes(a6),a3
0088D392                            
0088D392 382E 0020                  		move.w	lvl_y(a6),d4
0088D396 303C 4000                  		move.w	#$4000,d0
0088D39A 0644 00E0                  		add.w	#$0E0,d4
0088D39E 3404                       		move.w	d4,d2
0088D3A0 E84A                       		lsr.w	#4,d2
0088D3A2 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
0088D3A6 DAC2                        		adda	d2,a5
0088D3A8 D8C2                        		adda	d2,a4
0088D3AA D6C2                        		adda	d2,a3
0088D3AC 3604                        		move.w	d4,d3
0088D3AE                            
0088D3AE 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
0088D3B2 3404                       		move.w	d4,d2
0088D3B4 3204                       		move.w	d4,d1
0088D3B6 E849                       		lsr.w	#4,d1
0088D3B8 DAC1                        		adda	d1,a5
0088D3BA D8C1                        		adda 	d1,a4
0088D3BC D6C1                        		adda	d1,a3
0088D3BE E44C                       		lsr.w	#2,d4
0088D3C0 0244 007C                  		and.w	#$7C,d4
0088D3C4 E94B                       		lsl.w	#4,d3			; VDP YPOS
0088D3C6 0243 0F00                  		and.w	#$F00,d3
0088D3CA 8843                       		or.w	d3,d4
0088D3CC 8840                       		or.w	d0,d4
0088D3CE 4844                       		swap	d4
0088D3D0 383C 0003                   		move.w	#3,d4
0088D3D4                            
0088D3D4 363C 0015                   		move.w	#$15,d3
0088D3D8                            ;  		move.l	#$00010001,d1
0088D3D8 2A04                        		move.l	d4,d5
0088D3DA 0285 4F80 0003              		and.l	#$4F800003,d5
0088D3E0 0284 007E 0000              		and.l	#$007E0000,d4
0088D3E6                            @nextblkD:
0088D3E6                            
0088D3E6 7000                       		moveq	#0,d0
0088D3E8 246E 0004                  		movea.l	lvl_blocks(a6),a2
0088D3EC 1013                       		move.b	(a3),d0
0088D3EE 4A00                       		tst.b	d0
0088D3F0 6700                       		beq.s	@noPrzD
0088D3F2 0800 0007                  		btst	#7,d0
0088D3F6 6600 0000                  		bne	@noPrzD
0088D3FA 0240 007F                  		and.w	#$7F,d0
0088D3FE 246E 0008                  		movea.l	lvl_przblocks(a6),a2
0088D402 6000                       		bra.s	@hasprzD
0088D404                            @noPrzD:
0088D404 1015                       		move.b	(a5),d0
0088D406 4A14                       		tst.b 	(a4)
0088D408 6700                       		beq.s 	@hasprzD
0088D40A 1014                       		move.b 	(a4),d0
0088D40C                            @hasprzD:
0088D40C                            
0088D40C                            
0088D40C                            ; 		moveq	#0,d0
0088D40C                            ; 		movea.l	lvl_przblocks(a6),a2
0088D40C                            ; 		move.b	(a3),d0
0088D40C                            ; 		tst.b	d0
0088D40C                            ; 		bne.s	@hasprzD
0088D40C                            ; 		movea.l	lvl_blocks(a6),a2
0088D40C                            ; 		move.b	(a5),d0
0088D40C                            ; 		tst.b 	(a4)
0088D40C                            ; 		beq.s 	@hasprzD
0088D40C                            ; 		move.b	(a4),d0
0088D40C                            ; @hasprzD:
0088D40C E748                       		lsl.w	#3,d0
0088D40E                            		
0088D40E 3232 0000                  		move.w	(a2,d0.w),d1
0088D412 4841                       		swap	d1
0088D414 3232 0004                  		move.w	4(a2,d0.w),d1
0088D418 3432 0002                   		move.w	2(a2,d0.w),d2
0088D41C 4842                        		swap	d2
0088D41E 3432 0006                   		move.w	6(a2,d0.w),d2
0088D422                             		
0088D422 8885                       		or.l	d5,d4
0088D424 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
0088D42A                             		
0088D42A                            *  		move.b	(RAM_VidRegs+$C),d2
0088D42A                            *  		and.w	#%110,d2
0088D42A                            *  		beq.s	@dontshftD
0088D42A                            *  		swap 	d1
0088D42A                            *  		move.w	d1,d2
0088D42A                            *  		and.w	#$7FF,d2
0088D42A                            *  		and.w	#$F800,d1
0088D42A                            *  		lsr.w	#1,d2
0088D42A                            *  		or.w	d2,d1
0088D42A                            *  		swap 	d1
0088D42A                            *  		move.w	d1,d2
0088D42A                            *  		and.w	#$7FF,d2
0088D42A                            *  		and.w	#$F800,d1
0088D42A                            *  		lsr.w	#1,d2
0088D42A                            *  		or.w	d2,d1
0088D42A                            *  		
0088D42A                            * @dontshftD:
0088D42A                             		
0088D42A 4A14                         		tst.b 	(a4)
0088D42C 6700                        		beq.s	@nohiprioD
0088D42E 0081 8000 8000              		or.l	#$80008000,d1
0088D434                            @nohiprioD:
0088D434 23C1 00C0 0000              		move.l	d1,(vdp_data)
0088D43A                            
0088D43A                            *   		move.b	(RAM_VidRegs+$C),d0
0088D43A                            *  		and.w	#%110,d0
0088D43A                            *  		bne.s	@dontshftD_2
0088D43A                             		
0088D43A 2005                         		move.l	d5,d0
0088D43C 8084                       		or.l	d4,d0
0088D43E 0680 0080 0000               		add.l	#$00800000,d0
0088D444 23C0 00C0 0004               		move.l	d0,(vdp_ctrl)
0088D44A 4A14                         		tst.b 	(a4)
0088D44C 6700                        		beq.s	@nohiprioD_2
0088D44E 0082 8000 8000              		or.l	#$80008000,d2
0088D454                            @nohiprioD_2:
0088D454 23C2 00C0 0000              		move.l	d2,(vdp_data)
0088D45A                             		
0088D45A                            @dontshftD_2:
0088D45A 0684 0004 0000              		add.l	#$040000,d4
0088D460 0284 007E 0000               		and.l	#$7E0000,d4
0088D466                              		
0088D466 DAFC 0001                   		add.w	#1,a5
0088D46A D8FC 0001                   		add.w	#1,a4
0088D46E D6FC 0001                   		add.w	#1,a3
0088D472 51CB FF72                  		dbf	d3,@nextblkD
0088D476                            @dontupdD:
0088D476                            
0088D476                            ; -----------------------------------
0088D476                            ; UP
0088D476                            ; -----------------------------------
0088D476                            
0088D476 082E 0003 003A             		btst	#bitLvlDirU,lvl_flags(a6)
0088D47C 6700 0000                  		beq	@dontupdU
0088D480 08AE 0003 003A             		bclr	#bitLvlDirU,lvl_flags(a6)
0088D486 2A6E 000C                  		movea.l	lvl_layout(a6),a5
0088D48A 286E 0010                  		movea.l lvl_hilayout(a6),a4
0088D48E 266E 0018                  		movea.l	lvl_prizes(a6),a3
0088D492                            
0088D492 303C 4000                  		move.w	#$4000,d0
0088D496 382E 0020                  		move.w	lvl_y(a6),d4
0088D49A 3204                       		move.w	d4,d1
0088D49C 4841                       		swap	d1
0088D49E 3404                       		move.w	d4,d2
0088D4A0 E84A                       		lsr.w	#4,d2
0088D4A2 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
0088D4A6 DAC2                        		adda	d2,a5
0088D4A8 D8C2                        		adda 	d2,a4
0088D4AA D6C2                        		adda	d2,a3
0088D4AC 3604                        		move.w	d4,d3
0088D4AE                             		
0088D4AE 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
0088D4B2 3404                       		move.w	d4,d2
0088D4B4 3204                       		move.w	d4,d1
0088D4B6 E849                       		lsr.w	#4,d1
0088D4B8 DAC1                        		adda	d1,a5
0088D4BA D8C1                        		adda 	d1,a4
0088D4BC D6C1                        		adda	d1,a3
0088D4BE E44C                       		lsr.w	#2,d4
0088D4C0 0244 007C                  		and.w	#$7C,d4
0088D4C4 E94B                       		lsl.w	#4,d3			; VDP YPOS
0088D4C6 0243 0F00                  		and.w	#$F00,d3
0088D4CA 8843                       		or.w	d3,d4
0088D4CC 8840                       		or.w	d0,d4
0088D4CE 4844                       		swap	d4
0088D4D0 383C 0003                   		move.w	#3,d4
0088D4D4                             		
0088D4D4 4841                        		swap	d1
0088D4D6 3401                        		move.w	d1,d2
0088D4D8 363C 0015                   		move.w	#$15,d3
0088D4DC                            ;  		move.l	#$00010001,d1
0088D4DC 2A04                        		move.l	d4,d5
0088D4DE 0285 4F80 0003              		and.l	#$4F800003,d5
0088D4E4 0284 007E 0000              		and.l	#$007E0000,d4
0088D4EA                            @nextblkU:
0088D4EA 7000                       		moveq	#0,d0
0088D4EC 246E 0004                  		movea.l	lvl_blocks(a6),a2
0088D4F0 1013                       		move.b	(a3),d0
0088D4F2 4A00                       		tst.b	d0
0088D4F4 6700                       		beq.s	@noPrzU
0088D4F6 0800 0007                  		btst	#7,d0
0088D4FA 6600 0000                  		bne	@noPrzU
0088D4FE 0240 007F                  		and.w	#$7F,d0
0088D502 246E 0008                  		movea.l	lvl_przblocks(a6),a2
0088D506 6000                       		bra.s	@hasprzU
0088D508                            @noPrzU:
0088D508 1015                       		move.b	(a5),d0
0088D50A 4A14                       		tst.b 	(a4)
0088D50C 6700                       		beq.s 	@hasprzU
0088D50E 1014                       		move.b 	(a4),d0
0088D510                            @hasprzU:
0088D510                            
0088D510                            ; 		moveq	#0,d0
0088D510                            ; 		movea.l	lvl_przblocks(a6),a2
0088D510                            ; 		move.b	(a3),d0
0088D510                            ; 		tst.b	d0
0088D510                            ; 		bne.s	@hasprzU
0088D510                            ; 		movea.l	lvl_blocks(a6),a2
0088D510                            ; 		move.b	(a5),d0
0088D510                            ; 		tst.b 	(a4)
0088D510                            ; 		beq.s 	@hasprzU
0088D510                            ; 		move.b 	(a4),d0
0088D510                            ; @hasprzU:
0088D510 E748                       		lsl.w	#3,d0
0088D512                            		
0088D512 3232 0000                  		move.w	(a2,d0.w),d1
0088D516 4841                       		swap	d1
0088D518 3232 0004                  		move.w	4(a2,d0.w),d1
0088D51C 3432 0002                   		move.w	2(a2,d0.w),d2
0088D520 4842                        		swap	d2
0088D522 3432 0006                   		move.w	6(a2,d0.w),d2
0088D526                             		
0088D526 8885                       		or.l	d5,d4
0088D528 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
0088D52E 4A14                        		tst.b 	(a4)
0088D530 6700                        		beq.s	@nohiprioU
0088D532 0081 8000 8000              		or.l	#$80008000,d1
0088D538                            @nohiprioU:
0088D538 23C1 00C0 0000              		move.l	d1,(vdp_data)
0088D53E 2005                         		move.l	d5,d0
0088D540 8084                       		or.l	d4,d0
0088D542 0680 0080 0000               		add.l	#$00800000,d0
0088D548 23C0 00C0 0004              		move.l	d0,(vdp_ctrl)
0088D54E 4A14                        		tst.b 	(a4)
0088D550 6700                        		beq.s	@nohiprioU_2
0088D552 0082 8000 8000              		or.l	#$80008000,d2
0088D558                            @nohiprioU_2:
0088D558 23C2 00C0 0000              		move.l	d2,(vdp_data)
0088D55E                             		
0088D55E                            @nohiprioU_3:
0088D55E 0684 0004 0000              		add.l	#$040000,d4
0088D564 0284 007E 0000               		and.l	#$7E0000,d4
0088D56A                              		
0088D56A DAFC 0001                   		add.w	#1,a5
0088D56E D8FC 0001                   		add.w 	#1,a4
0088D572 D6FC 0001                   		add.w	#1,a3
0088D576 51CB FF72                  		dbf	d3,@nextblkU
0088D57A                            @dontupdU:
0088D57A 4E75                       		rts
0088D57C                            	
0088D57C                            ; --------------------------------------------
0088D57C                            ; Lvl_Animation
0088D57C                            ; --------------------------------------------
0088D57C                            
0088D57C                            Lvl_Animation:
0088D57C 4BF9 FFFF BEFE             		lea	(RAM_LvlAnim),a5
0088D582                            ; 		lea	(Art_AnimCoin),a4
0088D582                            		
0088D582 0455 0001                  		sub.w	#1,(a5)
0088D586 6A00 0000                  		bpl	@pluswait
0088D58A 3ABC 0005                  		move.w	#5,(a5)
0088D58E                            		
0088D58E 7200                       		moveq	#0,d1
0088D590 7400                       		moveq	#0,d2
0088D592 203C 0000 0000             		move.l	#Art_AnimCoin,d0
0088D598 322D 0002                  		move.w	2(a5),d1
0088D59C 0641 0001                  		add.w	#1,d1
0088D5A0 0C41 0006                  		cmp.w	#6,d1
0088D5A4 6600                       		bne.s	@stay
0088D5A6 4241                       		clr.w	d1
0088D5A8                            @stay:
0088D5A8 3B41 0002                  		move.w	d1,2(a5)
0088D5AC E149                       		lsl.w	#8,d1
0088D5AE D081                       		add.l	d1,d0
0088D5B0                            		
0088D5B0 323C 0040                  		move.w	#$40,d1
0088D5B4 343C 05A0                  		move.w	#$5A0,d2
0088D5B8 6100 BB58                  		bsr	DMA_Set
0088D5BC                            		
0088D5BC                            @pluswait:
0088D5BC 4E75                       		rts
0088D5BE                            		
0088D5BE                            ; --------------------------------------------
0088D5BE                            ; Lvl_Deform
0088D5BE                            ; --------------------------------------------
0088D5BE                            
0088D5BE                            Lvl_Deform:
0088D5BE 302E 0020                  		move.w	lvl_y(a6),d0
0088D5C2 33C0 FFFF E2C0             		move.w	d0,(RAM_ScrlVer)
0088D5C8 3800                       		move.w	d0,d4
0088D5CA E844                       		asr.w	#4,d4
0088D5CC 33C4 FFFF E2C2             		move.w	d4,(RAM_ScrlVer+2)
0088D5D2 7A00                       		moveq	#0,d5
0088D5D4 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
0088D5DA 362E 001C                  		move.w	lvl_x(a6),d3
0088D5DE 4443                       		neg.w	d3
0088D5E0                            		
0088D5E0                            ; Sun
0088D5E0 7000                       		moveq	#0,d0
0088D5E2 343C 001B                  		move.w	#(28)-1,d2
0088D5E6 9444                       		sub.w	d4,d2
0088D5E8 6B00 0000                  		bmi	@rest_fg
0088D5EC                            @lyr1:
0088D5EC 30C3                       		move.w	d3,(a0)+
0088D5EE 30C0                       		move.w	d0,(a0)+
0088D5F0 0645 0001                  		add.w	#1,d5
0088D5F4 0C45 00E0                  		cmp.w	#224,d5
0088D5F8 6E00 0000                  		bgt	@exit_now
0088D5FC 51CA FFEE                  		dbf	d2,@lyr1
0088D600                            		
0088D600                            ; Clouds 1
0088D600 3003                       		move.w	d3,d0
0088D602 E840                       		asr.w	#4,d0
0088D604 343C 001B                  		move.w	#(28)-1,d2
0088D608 0C44 001C                  		cmp.w	#28,d4
0088D60C 6D00                       		blt.s	@lyr2
0088D60E 9444                       		sub.w	d4,d2
0088D610 6B00                       		bmi.s	@rest_fg
0088D612                            @lyr2:
0088D612 30C3                       		move.w	d3,(a0)+
0088D614 30C0                       		move.w	d0,(a0)+
0088D616 0645 0001                  		add.w	#1,d5
0088D61A 0C45 00E0                  		cmp.w	#224,d5
0088D61E 6E00                       		bgt.s	@exit_now
0088D620 51CA FFF0                  		dbf	d2,@lyr2
0088D624                            		
0088D624                            ; Clouds 2
0088D624 3003                       		move.w	d3,d0
0088D626 EA40                       		asr.w	#5,d0
0088D628 343C 001F                  		move.w	#(32)-1,d2
0088D62C                            ; 		cmp.w	#28,d4
0088D62C                            ; 		blt.s	@lyr3
0088D62C                            ; 		sub.w	d4,d2
0088D62C                            ; 		bmi.s	@rest_fg
0088D62C                            @lyr3:
0088D62C 30C3                       		move.w	d3,(a0)+
0088D62E 30C0                       		move.w	d0,(a0)+
0088D630 0645 0001                  		add.w	#1,d5
0088D634 0C45 00E0                  		cmp.w	#224,d5
0088D638 6E00                       		bgt.s	@exit_now
0088D63A 51CA FFF0                  		dbf	d2,@lyr3
0088D63E                            
0088D63E                            ; Mountains 1
0088D63E 3003                       		move.w	d3,d0
0088D640 E840                       		asr.w	#4,d0
0088D642 343C 0024                  		move.w	#(37)-1,d2
0088D646                            @lyr4:
0088D646 30C3                       		move.w	d3,(a0)+
0088D648 30C0                       		move.w	d0,(a0)+
0088D64A 0645 0001                  		add.w	#1,d5
0088D64E 0C45 00E0                  		cmp.w	#224,d5
0088D652 6E00                       		bgt.s	@exit_now
0088D654 51CA FFF0                  		dbf	d2,@lyr4
0088D658                            
0088D658                            ; Mountains 2
0088D658 3003                       		move.w	d3,d0
0088D65A E640                       		asr.w	#3,d0
0088D65C 343C 0024                  		move.w	#(37)-1,d2
0088D660                            @lyr5:
0088D660 30C3                       		move.w	d3,(a0)+
0088D662 30C0                       		move.w	d0,(a0)+
0088D664 0645 0001                  		add.w	#1,d5
0088D668 0C45 00E0                  		cmp.w	#224,d5
0088D66C 6E00                       		bgt.s	@exit_now
0088D66E 51CA FFF0                  		dbf	d2,@lyr5
0088D672                            		
0088D672                            ; Mountains 2
0088D672 3003                       		move.w	d3,d0
0088D674 E440                       		asr.w	#2,d0
0088D676 343C 002F                  		move.w	#(48)-1,d2
0088D67A                            @lyr6:
0088D67A 30C3                       		move.w	d3,(a0)+
0088D67C 30C0                       		move.w	d0,(a0)+
0088D67E 0645 0001                  		add.w	#1,d5
0088D682 0C45 00E0                  		cmp.w	#224,d5
0088D686 6E00                       		bgt.s	@exit_now
0088D688 51CA FFF0                  		dbf	d2,@lyr6
0088D68C                            		
0088D68C                            ; ----------------
0088D68C                            ; Rest of BG
0088D68C                            
0088D68C                            @rest_fg:
0088D68C 30C3                       		move.w	d3,(a0)+
0088D68E 4258                       		clr.w	(a0)+
0088D690 0645 0001                  		add.w	#1,d5
0088D694 0C45 00E0                  		cmp.w	#224,d5
0088D698 6DF2                       		blt.s	@rest_fg
0088D69A                            
0088D69A                            @exit_now:
0088D69A 06AE 0000 0001 002C        		add.l	#1,lvl_timer(a6)
0088D6A2 4E75                       		rts
0088D6A4                            		
0088D6A4                            ; 		lea	(RAM_ScrlHor),a0
0088D6A4                            ; 		move.w	#224-1,d1
0088D6A4                            ; @nxt_h:
0088D6A4                            ; 		move.w	lvl_x(a6),d0
0088D6A4                            ; 		neg.w	d0
0088D6A4                            ; 		move.w	d0,(a0)+
0088D6A4                            ; 		asr.w	#2,d0
0088D6A4                            ; 		move.w	d0,(a0)+
0088D6A4                            ; 		dbf	d1,@nxt_h
0088D6A4                            ; 		
0088D6A4                            ; 		move.w	lvl_y(a6),d0
0088D6A4                            ; 		move.w	d0,(RAM_ScrlVer)
0088D6A4                            ; 		asr.w	#2,d0
0088D6A4                            ; 		move.w	d0,(RAM_ScrlVer+2)
0088D6A4                            
0088D6A4                            ; --------------------------------------------
0088D6A4                            ; Level_Load
0088D6A4                            ; 
0088D6A4                            ; a0 | Data
0088D6A4                            ; --------------------------------------------
0088D6A4                            
0088D6A4                            Level_Load:
0088D6A4                            ; 		lea	(Level_Test),a0
0088D6A4 43F9 00FF 0000             		lea	($FF0000),a1
0088D6AA 303C 1FFF                  		move.w	#(($8000)/4)-1,d0
0088D6AE                            @clrram:
0088D6AE 4299                       		clr.l	(a1)+
0088D6B0 51C8 FFFC                  		dbf	d0,@clrram
0088D6B4                            		
0088D6B4 43F9 FFFF BC00             		lea	(RAM_LvlPlanes),a1
0088D6BA 4279 FFFF BF1E             		clr.w	(RAM_PrizeHide)
0088D6C0 4279 FFFF BF60             		clr.w	(RAM_PrizeShow)
0088D6C6 4269 001C                  		clr.w	lvl_x(a1)
0088D6CA 4269 0020                  		clr.w	lvl_y(a1)
0088D6CE 283C FFFF 0000             		move.l	#$FFFF0000,d4
0088D6D4 3018                       		move.w	(a0)+,d0
0088D6D6 3340 0030                  		move.w	d0,lvl_size_x(a1)
0088D6DA 3340 0034                  		move.w	d0,lvl_maxcam_x(a1)
0088D6DE 3018                       		move.w	(a0)+,d0
0088D6E0 3340 0032                  		move.w	d0,lvl_size_y(a1)
0088D6E4 3340 0036                  		move.w	d0,lvl_maxcam_y(a1)
0088D6E8 2358 0000                  		move.l	(a0)+,lvl_objects(a1)
0088D6EC                            @loop:
0088D6EC                            ; 		tst.w	(a0)
0088D6EC                            ; 		bmi.s	@exit
0088D6EC                            		
0088D6EC 2358 0004                  		move.l	(a0)+,lvl_blocks(a1)
0088D6F0 2018                       		move.l	(a0)+,d0
0088D6F2 4A80                       		tst.l	d0
0088D6F4 6A00                       		bpl.s	@nullprz
0088D6F6 237C 0000 0000 0008        		move.l	#vram_prizes,lvl_przblocks(a1)
0088D6FE                            @nullprz:
0088D6FE 2358 000C                  		move.l	(a0)+,lvl_layout(a1)
0088D702 2358 0010                  		move.l	(a0)+,lvl_hilayout(a1)
0088D706                            		
0088D706 2358 0014                  		move.l	(a0)+,lvl_collision(a1)
0088D70A 2344 0018                  		move.l	d4,lvl_prizes(a1)
0088D70E 2458                       		movea.l	(a0)+,a2
0088D710 2644                       		movea.l	d4,a3
0088D712                            @nextrle:
0088D712 7000                       		moveq	#0,d0
0088D714 7200                       		moveq	#0,d1
0088D716 101A                       		move.b	(a2)+,d0
0088D718 0C00 00FF                  		cmp.b	#-1,d0
0088D71C 6700                       		beq.s	@Finish
0088D71E 121A                       		move.b	(a2)+,d1
0088D720 4A40                       		tst.w	d0
0088D722 6700                       		beq.s	@oops
0088D724 0440 0001                  		sub.w	#1,d0
0088D728                            @CopyIt:
0088D728 16C1                       		move.b	d1,(a3)+
0088D72A 0684 0000 0001             		add.l	#1,d4
0088D730 51C8 FFF6                  		dbf	d0,@CopyIt
0088D734                            @oops:
0088D734 60DC                       		bra.s	@nextrle
0088D736                            @Finish:
0088D736                            ; 		adda	#sizeof_lvlpln,a1
0088D736                            ; 		bra.s	@loop
0088D736                            ; @exit:
0088D736                            		
0088D736                            ; ----------------------------------		
0088D736                            ; Load object from the list
0088D736                            ; ----------------------------------
0088D736                            
0088D736 47F9 FFFF BC42             		lea	(RAM_LevelObjPos),a3
0088D73C 323C 0045                  		move.w	#max_lvlobj-1,d1
0088D740                            @clrlist:
0088D740 429B                       		clr.l	(a3)+
0088D742 429B                       		clr.l	(a3)+
0088D744 425B                       		clr.w	(a3)+
0088D746 51C9 FFF8                  		dbf	d1,@clrlist
0088D74A                            		
0088D74A 2479 FFFF BC00             		movea.l	(RAM_LvlPlanes+lvl_objects),a2
0088D750 47F9 FFFF BC42             		lea	(RAM_LevelObjPos),a3
0088D756 323C 0045                  		move.w	#max_lvlobj-1,d1
0088D75A                            @NextObj:
0088D75A 4A92                       		tst.l	(a2)
0088D75C 6700                       		beq.s	@Nothing
0088D75E 201A                        		move.l	(a2)+,d0
0088D760 0280 00FF FFFF              		and.l 	#$FFFFFF,d0
0088D766 26C0                        		move.l	d0,(a3)+
0088D768 26DA                       		move.l	(a2)+,(a3)+
0088D76A 36DA                       		move.w	(a2)+,(a3)+
0088D76C 51C9 FFEC                  		dbf	d1,@NextObj
0088D770                            @Nothing:
0088D770 4E75                       		rts
0088D772                            		
0088D772                            ; --------------------------------------------
0088D772                            ; Draw the level on screen
0088D772                            ; 
0088D772                            ; Uses:
0088D772                            ; d0-d5/a2-a5
0088D772                            ; --------------------------------------------
0088D772                            
0088D772                            Level_Draw:
0088D772 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088D778 203C 4000 0003             		move.l	#$40000003,d0		; VDP Address
0088D77E 322D 001C                    		move.w	lvl_x(a5),d1		; X pos
0088D782 342D 0020                    		move.w	lvl_y(a5),d2		; Y pos
0088D786 E84A                          		lsr.w	#4,d2			; Ypos: xxx0 > 0xxx
0088D788 0242 000F                     		and.w	#$F,d2			; 0xxx > 00xx
0088D78C E14A                          		lsl.w	#8,d2			; 00xx > xx00
0088D78E 0242 3FFF                     		and.w	#$3FFF,d2
0088D792 E849                          		lsr.w	#4,d1			; Xpos: xxx0 > 0xxx
0088D794 E549                           		lsl.w	#2,d1			; 0xxx * 2
0088D796 4840                           		swap	d0
0088D798 D042                          		add.w	d2,d0			; +Y VDP
0088D79A D001                         		add.b	d1,d0			; +X VDP
0088D79C 0200 007F                         		and.b	#$7F,d0
0088D7A0 4840                             		swap	d0
0088D7A2                            		
0088D7A2 382D 0020                  		move.w	lvl_y(a5),d4
0088D7A6 E84C                       		lsr.w	#4,d4
0088D7A8 C8ED 0030                  		mulu.w	lvl_size_x(a5),d4
0088D7AC 3A2D 001C                  		move.w	lvl_x(a5),d5
0088D7B0 E84D                       		lsr.w	#4,d5
0088D7B2 DA44                       		add.w	d4,d5
0088D7B4 0245 7FFF                  		and.w	#$7FFF,d5
0088D7B8 4845                       		swap 	d5
0088D7BA                            		
0088D7BA 3A3C 0016                  		move.w	#$16,d5
0088D7BE                            @do_row:
0088D7BE 286D 000C                   		movea.l	lvl_layout(a5),a4
0088D7C2 266D 0010                   		movea.l	lvl_hilayout(a5),a3
0088D7C6 246D 0018                   		movea.l	lvl_prizes(a5),a2
0088D7CA 4845                        		swap	d5
0088D7CC D8C5                        		adda 	d5,a4
0088D7CE D6C5                        		adda 	d5,a3
0088D7D0 D4C5                        		adda	d5,a2
0088D7D2 4845                        		swap 	d5
0088D7D4                             		
0088D7D4 2600                       		move.l	d0,d3
0088D7D6 780F                        		moveq	#$F,d4
0088D7D8                            ;  		move.b	(RAM_VidRegs+$C),d2
0088D7D8                            ;   		and.w	#%110,d2
0088D7D8                            ;   		beq.s	@block
0088D7D8                            ;   		moveq	#$1F,d4
0088D7D8                            ;  
0088D7D8                            @block:
0088D7D8 226D 0008                  		movea.l	lvl_przblocks(a5),a1
0088D7DC 7400                        		moveq	#0,d2	
0088D7DE 1412                        		move.b	(a2),d2
0088D7E0 4A02                        		tst.b	d2
0088D7E2 6700                        		beq.s	@noprzblk
0088D7E4 0802 0007                   		btst	#7,d2
0088D7E8 6700                        		beq.s	@hasPrzDrw
0088D7EA                            @noprzblk:
0088D7EA 1414                         		move.b	(a4),d2
0088D7EC 226D 0004                     		movea.l	lvl_blocks(a5),a1
0088D7F0 4A13                        		tst.b	(a3)
0088D7F2 6700                        		beq.s	@hasprzDrw
0088D7F4 1413                        		move.b	(a3),d2
0088D7F6                            @hasprzDrw:
0088D7F6 E74A                       		lsl.w	#3,d2
0088D7F8 3231 2000                  		move.w	(a1,d2.w),d1
0088D7FC 4841                        		swap	d1
0088D7FE 3231 2004                   		move.w	4(a1,d2.w),d1
0088D802                             		
0088D802 4844                        		swap	d4
0088D804 1839 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d4
0088D80A 0244 0006                   		and.w	#%110,d4
0088D80E 6700                        		beq.s	@NoDouble
0088D810 E249                        		lsr.w	#1,d1
0088D812 4841                        		swap	d1
0088D814 E249                        		lsr.w	#1,d1
0088D816 4841                        		swap	d1
0088D818                            @NoDouble:
0088D818 4844                       		swap	d4
0088D81A 23C3 00C0 0004              		move.l	d3,(vdp_ctrl)
0088D820 4A13                        		tst.b	(a3)
0088D822 6700                        		beq.s	@nohiprio
0088D824 0081 8000 8000              		or.l 	#$80008000,d1
0088D82A                            @nohiprio:
0088D82A 23C1 00C0 0000              		move.l	d1,(vdp_data)
0088D830 0683 0080 0000              		add.l	#$00800000,d3
0088D836                              		
0088D836 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
0088D83C 0241 0006                   		and.w	#%110,d1
0088D840 6600                        		bne.s	@NoDouble2
0088D842 3231 2002                  		move.w	2(a1,d2.w),d1
0088D846 4841                        		swap	d1
0088D848 3231 2006                   		move.w	6(a1,d2.w),d1
0088D84C 23C3 00C0 0004             		move.l	d3,(vdp_ctrl)
0088D852 4A13                        		tst.b	(a3)
0088D854 6700                        		beq.s	@nohiprio2
0088D856 0081 8000 8000              		or.l 	#$80008000,d1
0088D85C                            @nohiprio2:
0088D85C 23C1 00C0 0000              		move.l	d1,(vdp_data)
0088D862 0683 0080 0000              		add.l	#$00800000,d3
0088D868 0283 4F7C 0003              		and.l	#$4F7C0003,d3
0088D86E                            @NoDouble2:		
0088D86E 322D 0030                  		move.w	lvl_size_x(a5),d1
0088D872 D8C1                       		adda	d1,a4
0088D874 D6C1                       		adda	d1,a3
0088D876 D4C1                       		adda	d1,a2
0088D878 51CC FF5E                  		dbf	d4,@block
0088D87C                            	
0088D87C 0680 0004 0000             		add.l	#$40000,d0
0088D882 0280 4F7C 0003             		and.l	#$4F7C0003,d0
0088D888 4845                       		swap 	d5
0088D88A 0645 0001                  		add.w	#1,d5
0088D88E 4845                       		swap 	d5
0088D890 51CD FF2C                  		dbf	d5,@do_row
0088D894                            
0088D894                            ; ----------------------------------
0088D894                            ; Check for objects ON the
0088D894                            ; same screen as the player
0088D894                            ; ----------------------------------
0088D894                            
0088D894 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
0088D89A 49F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*16)),a4	;Start of level objects
0088D8A0 7601                       		moveq	#1,d3			; Starting at 1
0088D8A2                            @next_obj:
0088D8A2 4A95                       		tst.l	(a5)
0088D8A4 6700 0000                  		beq	@finish
0088D8A8 0815 0007                   		btst	#7,(a5)			;ON SCREEN flag?
0088D8AC 6600 0000                   		bne	@next
0088D8B0                            @found_obj:
0088D8B0 7800                         		moveq	#(max_objects-8)-1,d4
0088D8B2                            @nxtav_obj:
0088D8B2 4AAC 0000                  		tst.l	obj_code(a4)	
0088D8B6 6700                       		beq.s	@valid
0088D8B8 D8FC 0000                  		adda	#sizeof_obj,a4
0088D8BC 51CC FFF4                  		dbf	d4,@nxtav_obj
0088D8C0                            		
0088D8C0                            @valid:
0088D8C0 396D 0004 0000             		move.w	4(a5),obj_x(a4)
0088D8C6 396D 0006 0000             		move.w	6(a5),obj_y(a4)
0088D8CC 1943 0000                  		move.b	d3,obj_spwnindx(a4)
0088D8D0                            		
0088D8D0 7200                          		moveq	#0,d1
0088D8D2 122D 0008                      		move.b	8(a5),d1
0088D8D6 422C 0000                      		clr.b	obj_status(a4)
0088D8DA 0801 0007                      		btst	#7,d1
0088D8DE 6700                           		beq.s	@dont_flip_l
0088D8E0 08EC 0030 0000               		bset	#bitobj_flipH,obj_status(a4)
0088D8E6                            @dont_flip_l:
0088D8E6 0801 0006                      		btst	#6,d1
0088D8EA 6700                           		beq.s	@dont_flip_d
0088D8EC 08EC 0070 0000               		bset	#bitobj_flipV,obj_status(a4)
0088D8F2                            @dont_flip_d:
0088D8F2 122D 0008                   		move.b	8(a5),d1
0088D8F6 0241 003F                   		and.w	#$3F,d1
0088D8FA 1941 0000                  		move.b	d1,obj_subid(a4)
0088D8FE 2015                        		move.l	(a5),d0
0088D900 0280 00FF FFFF               		and.l 	#$FFFFFF,d0
0088D906 2940 0000                   		move.l	d0,obj_code(a4)
0088D90A 08D5 0007                   		bset	#7,(a5)			;SET ON SCREEN flag
0088D90E D8FC 0000                  		adda	#sizeof_obj,a4
0088D912                            @next:
0088D912 0643 0001                  		add.w	#1,d3
0088D916 DAFC 000A                  		adda	#$A,a5
0088D91A 6000 FF86                  		bra	@next_obj
0088D91E                            @finish:
0088D91E 4E75                            		rts
0088D920                            		
0088D920                            ; ----------------------------------		
0088D920                            
0088D920                            Level_HidePrize:
0088D920 49F9 FFFF BF20             		lea	(RAM_PrizeHide+2),a4
0088D926 3839 FFFF BF1E             		move.w	(RAM_PrizeHide),d4
0088D92C E54C                       		lsl.w	#2,d4
0088D92E D8C4                       		adda	d4,a4
0088D930                            ; @chknext:
0088D930                            ; 		tst.l	(a4)
0088D930                            ; 		beq.s	@free
0088D930                            ; 		adda	#4,a4
0088D930                            ; 		bra.s	@chknext
0088D930                            ; @free:
0088D930 2880                       		move.l	d0,(a4)
0088D932 0679 0001 FFFF BF1E        		add.w	#1,(RAM_PrizeHide)
0088D93A                            @same:
0088D93A 4E75                       		rts
0088D93C                            		
0088D93C                            ; ----------------------------------
0088D93C                            
0088D93C                            Level_ShowPrize:
0088D93C 49F9 FFFF BF62             		lea	(RAM_PrizeShow+2),a4
0088D942 3839 FFFF BF60             		move.w	(RAM_PrizeShow),d4
0088D948 E54C                       		lsl.w	#2,d4
0088D94A D8C4                       		adda	d4,a4
0088D94C                            ; @chknext:
0088D94C                            ; 		tst.l	(a4)
0088D94C                            ; 		beq.s	@free
0088D94C                            ; 		adda	#4,a4
0088D94C                            ; 		bra.s	@chknext
0088D94C                            ; @free:
0088D94C 2880                       		move.l	d0,(a4)
0088D94E 0679 0001 FFFF BF60        		add.w	#1,(RAM_PrizeShow)
0088D956                            @same:
0088D956 4E75                       		rts
0088D958                            
0088D958                            ; ----------------------------------
0088D958                            
0088D958                            ; Level_CheckPrize:
0088D958                            ;  		moveq	#0,d4
0088D958                            ;  		lea	(RAM_PrizeHide),a3
0088D958                            ;  		move.w	(a3)+,d5
0088D958                            ;  		tst.w	d5
0088D958                            ;  		beq.s	@free
0088D958                            ; 		sub.w	#1,d5
0088D958                            ; @chknext:
0088D958                            ;  		cmp.l	(a3)+,d0
0088D958                            ;  		beq.s	@found
0088D958                            ;  		dbf	d5,@chknext
0088D958                            ;  		bra.s	@free
0088D958                            ; 
0088D958                            ; @found:
0088D958                            ;  nop
0088D958                            ; ;  		bra.s * ;moveq	#-1,d4
0088D958                            ;  		
0088D958                            ; @free:
0088D958                            ;  		tst.l	d4
0088D958                            ; 		rts
0088D958                            		
0088D958                            ; ----------------------------------		
0088D958                            ; load level objects while moving
0088D958                            ; ----------------------------------
0088D958                            
0088D958                            Lvl_RefreshObj:
0088D958 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
0088D95E 49F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*16)),a4
0088D964 7601                       		moveq	#1,d3			; Starting at 1
0088D966                            @next_obj:
0088D966 4A95                       		tst.l	(a5)
0088D968 6700 0000                  		beq	@finish
0088D96C 0815 0006                  		btst	#6,(a5)			; GONE flag?
0088D970 6600 0000                  		bne	@next
0088D974 0815 0007                   		btst	#7,(a5)			; ON SCREEN flag?
0088D978 6600 0000                   		bne	@next
0088D97C                            		
0088D97C 4843                       		swap	d3
0088D97E                            
0088D97E 302E 001C                     		move.w	lvl_x(a6),d0
0088D982 322D 0004                         		move.w	4(a5),d1
0088D986 3400                           		move.w	d0,d2
0088D988 0642 0140                      		add.w	#320,d2
0088D98C                                		
0088D98C 0642 0038                     		add.w	#$38,d2
0088D990 B242                            		cmp.w	d2,d1
0088D992 6E00 0000                        		bgt	@tooright  		
0088D996 0442 0008                     		sub.w	#$8,d2
0088D99A B242                            		cmp.w	d2,d1
0088D99C 6D00 0000                        		blt	@tooright
0088D9A0 363C 0001                        		move.w	#1,d3
0088D9A4                            @tooright:
0088D9A4 0440 0038                     		sub.w	#$38,d0
0088D9A8 B240                             		cmp.w	d0,d1
0088D9AA 6D00 0000                         		blt	@tooleft
0088D9AE 0640 0008                     		add.w	#$8,d0
0088D9B2 B240                            		cmp.w	d0,d1
0088D9B4 6C00 0000                        		bge	@tooleft
0088D9B8 363C 0001                        		move.w	#1,d3
0088D9BC                            @tooleft:
0088D9BC                            
0088D9BC                            		
0088D9BC 302E 0020                      		move.w	lvl_y(a6),d0
0088D9C0 322D 0006                         		move.w	6(a5),d1
0088D9C4 3400                            		move.w	d0,d2
0088D9C6 0642 00E0                      		add.w	#224,d2
0088D9CA                            		
0088D9CA 0642 0058                     		add.w	#$58,d2
0088D9CE B242                            		cmp.w	d2,d1
0088D9D0 6C00 0000                        		bge	@toodown 		
0088D9D4 0442 0008                     		sub.w	#$8,d2
0088D9D8 B242                            		cmp.w	d2,d1
0088D9DA 6D00 0000                        		blt	@toodown
0088D9DE 363C 0001                        		move.w	#1,d3
0088D9E2                            @toodown:
0088D9E2 0440 0058                     		sub.w	#$58,d0
0088D9E6 B240                             		cmp.w	d0,d1
0088D9E8 6D00 0000                         		blt	@tooup
0088D9EC 0640 0008                     		add.w	#$8,d0
0088D9F0 B240                            		cmp.w	d0,d1
0088D9F2 6C00 0000                        		bge	@tooup
0088D9F6 363C 0001                        		move.w	#1,d3
0088D9FA                            @tooup:
0088D9FA                            
0088D9FA                            
0088D9FA 3003                       		move.w	d3,d0
0088D9FC 4843                       		swap	d3
0088D9FE 4A40                       		tst.w	d0
0088DA00 6700                       		beq.s	@next
0088DA02                              		
0088DA02                            @found_obj:
0088DA02 7800                         		moveq	#(max_objects-16)-1,d4
0088DA04                            @nxtav_obj:
0088DA04 4AAC 0000                  		tst.l	obj_code(a4)
0088DA08 6700                       		beq.s	@valid
0088DA0A B62C 0000                  		cmp.b	obj_spwnindx(a4),d3
0088DA0E 6700                       		beq.s	@next
0088DA10 D8FC 0000                  		adda	#sizeof_obj,a4
0088DA14 51CC FFEE                  		dbf	d4,@nxtav_obj
0088DA18 6000                       		bra.s	@next
0088DA1A                            		
0088DA1A                            @valid:
0088DA1A 264C                       		movea.l	a4,a3
0088DA1C 323C 0000                  		move.w	#sizeof_obj,d1
0088DA20                            @cleanup:
0088DA20 421B                       		clr.b	(a3)+
0088DA22 51C9 FFFC                  		dbf	d1,@cleanup
0088DA26                            		
0088DA26 396D 0004 0000             		move.w	4(a5),obj_x(a4)
0088DA2C 396D 0006 0000             		move.w	6(a5),obj_y(a4)
0088DA32 1943 0000                  		move.b	d3,obj_spwnindx(a4)
0088DA36                            		
0088DA36 7200                          		moveq	#0,d1
0088DA38 122D 0008                      		move.b	8(a5),d1
0088DA3C 422C 0000                      		clr.b	obj_status(a4)
0088DA40 0801 0007                      		btst	#7,d1
0088DA44 6700                           		beq.s	@dont_flip_l
0088DA46 08EC 0030 0000               		bset	#bitobj_flipH,obj_status(a4)
0088DA4C                            
0088DA4C                            @dont_flip_l:
0088DA4C 0801 0006                      		btst	#6,d1
0088DA50 6700                           		beq.s	@dont_flip_d
0088DA52 08EC 0070 0000               		bset	#bitobj_flipV,obj_status(a4)
0088DA58                            @dont_flip_d:
0088DA58 122D 0008                   		move.b	8(a5),d1
0088DA5C 0241 003F                   		and.w	#$3F,d1
0088DA60 1941 0000                  		move.b	d1,obj_subid(a4)
0088DA64 2015                        		move.l	(a5),d0
0088DA66 0280 00FF FFFF               		and.l 	#$FFFFFF,d0
0088DA6C 2940 0000                   		move.l	d0,obj_code(a4)
0088DA70 08D5 0007                   		bset	#7,(a5)			;SET ON SCREEN flag
0088DA74 D8FC 0000                  		adda	#sizeof_obj,a4
0088DA78                            @next:
0088DA78 0643 0001                  		add.w	#1,d3
0088DA7C DAFC 000A                  		adda	#$A,a5
0088DA80 6000 FEE4                  		bra	@next_obj
0088DA84                            @finish:
0088DA84 4E75                       		rts
0088DA86                             	
0088DA86                            ; ----------------------------------
0088DA86                            ; d0 - ID
0088DA86                            ; ----------------------------------
0088DA86                            
0088DA86                            Lvl_DoHidePrz:
0088DA86                            		;TODO: Up/Left checks
0088DA86 2800                       		move.l	d0,d4
0088DA88 E88C                       		lsr.l	#4,d4
0088DA8A 0244 FFF0                  		and.w	#$FFF0,d4
0088DA8E 3A2E 0020                   		move.w	lvl_y(a6),d5
0088DA92 B845                        		cmp.w	d5,d4
0088DA94 6D00                        		blt.s	LvlPrzReadRet
0088DA96 2800                       		move.l	d0,d4
0088DA98 4844                       		swap	d4
0088DA9A 0244 FFF0                  		and.w	#$FFF0,d4
0088DA9E 3A2E 001C                   		move.w	lvl_x(a6),d5
0088DAA2 B845                        		cmp.w	d5,d4
0088DAA4 6D00                        		blt.s	LvlPrzReadRet
0088DAA6                             		
0088DAA6 2800                        		move.l	d0,d4			;Postion | XXX?????
0088DAA8 4844                        		swap	d4			;????XXX?
0088DAAA E44C                        		lsr.w	#2,d4			;????0XXX
0088DAAC 0284 0000 007C              		and.l	#$7C,d4
0088DAB2 2A00                        		move.l	d0,d5			;???YYY??
0088DAB4 0245 0F00                    		and.w	#$F00,d5
0088DAB8 D845                          		add.w	d5,d4
0088DABA 2A3C 4000 0003              		move.l	#$40000003,d5
0088DAC0 4845                        		swap	d5
0088DAC2 8A44                        		or.w	d4,d5
0088DAC4 4845                        		swap	d5
0088DAC6                             		
0088DAC6 286E 000C                    		movea.l	lvl_layout(a6),a4	;Layout data
0088DACA 2800                        		move.l	d0,d4
0088DACC 0284 000F FF00              		and.l	#$000FFF00,d4
0088DAD2 E08C                        		lsr.l	#8,d4
0088DAD4 0284 0000 0FFF              		and.l	#$FFF,d4
0088DADA C8EE 0030                   		mulu.w	lvl_size_x(a6),d4
0088DADE D8C4                        		adda	d4,a4	
0088DAE0 2800                         		move.l	d0,d4
0088DAE2 0284 FFF0 0000              		and.l	#$FFF00000,d4
0088DAE8 4844                         		swap	d4
0088DAEA E84C                         		lsr.w	#4,d4
0088DAEC D8C4                          		add.w 	d4,a4
0088DAEE 7800                           		moveq	#0,d4
0088DAF0 1814                          		move.b	(a4),d4
0088DAF2 286E 0004                  		movea.l	lvl_blocks(a6),a4	;Draw blocks
0088DAF6 6000                       		bra.s	LvlPrzReadBlk
0088DAF8                            LvlPrzReadRet:
0088DAF8 4E75                       		rts
0088DAFA                            		
0088DAFA                            ; ----------------------------------
0088DAFA                            ; d0 - ID
0088DAFA                            ; ----------------------------------
0088DAFA                            
0088DAFA                            Lvl_DoShowPrz:
0088DAFA                            		;TODO: Up/Left checks
0088DAFA 2800                       		move.l	d0,d4
0088DAFC E88C                       		lsr.l	#4,d4
0088DAFE 0244 FFF0                  		and.w	#$FFF0,d4
0088DB02 3A2E 0020                   		move.w	lvl_y(a6),d5
0088DB06 B845                        		cmp.w	d5,d4
0088DB08 6DEE                        		blt.s	LvlPrzReadRet
0088DB0A 2800                       		move.l	d0,d4
0088DB0C 4844                       		swap	d4
0088DB0E 0244 FFF0                  		and.w	#$FFF0,d4
0088DB12 3A2E 001C                   		move.w	lvl_x(a6),d5
0088DB16 B845                        		cmp.w	d5,d4
0088DB18 6DDE                        		blt.s	LvlPrzReadRet
0088DB1A                             		
0088DB1A 2800                        		move.l	d0,d4			;Postion | XXX?????
0088DB1C 4844                        		swap	d4			;????XXX?
0088DB1E E44C                        		lsr.w	#2,d4			;????0XXX
0088DB20 0284 0000 007C              		and.l	#$7C,d4
0088DB26 2A00                        		move.l	d0,d5			;???YYY??
0088DB28 0285 0000 0F00               		and.l	#$F00,d5
0088DB2E 8845                          		or.w	d5,d4
0088DB30 2A3C 4000 0003              		move.l	#$40000003,d5
0088DB36 4845                        		swap	d5
0088DB38 8A44                        		or.w	d4,d5
0088DB3A 4845                        		swap	d5 		
0088DB3C 286E 0018                    		movea.l	lvl_prizes(a6),a4	;Layout data
0088DB40 2800                        		move.l	d0,d4
0088DB42 0284 000F FF00              		and.l	#$000FFF00,d4
0088DB48 E08C                        		lsr.l	#8,d4
0088DB4A 0284 0000 0FFF              		and.l	#$FFF,d4
0088DB50 C8EE 0030                   		mulu.w	lvl_size_x(a6),d4
0088DB54                            ;  		lsl.w	#1,d4
0088DB54 D8C4                        		adda	d4,a4	
0088DB56 2800                         		move.l	d0,d4
0088DB58 0284 FFF0 0000              		and.l	#$FFF00000,d4
0088DB5E 4844                         		swap	d4
0088DB60 E84C                         		lsr.w	#4,d4
0088DB62                            ;    		lsl.w	#1,d4
0088DB62 D8C4                          		add.w	d4,a4
0088DB64 7800                           		moveq	#0,d4
0088DB66 1814                          		move.b	(a4),d4
0088DB68 286E 0008                  		movea.l	lvl_przblocks(a6),a4	;Draw blocks
0088DB6C                            		
0088DB6C                            LvlPrzReadBlk:
0088DB6C E78C                         		lsl.l	#3,d4
0088DB6E 0284 0000 FFFF               		and.l	#$FFFF,d4
0088DB74 D8C4                          		adda 	d4,a4
0088DB76                               		
0088DB76 23C5 00C0 0004              		move.l	d5,(vdp_ctrl).l
0088DB7C 3814                        		move.w	(a4),d4
0088DB7E 4844                        		swap	d4
0088DB80 382C 0004                   		move.w	4(a4),d4
0088DB84 23C4 00C0 0000              		move.l	d4,(vdp_data).l
0088DB8A 0685 0080 0000              		add.l	#$800000,d5
0088DB90 23C5 00C0 0004              		move.l	d5,(vdp_ctrl).l
0088DB96 382C 0002                   		move.w	2(a4),d4
0088DB9A 4844                        		swap	d4
0088DB9C 382C 0006                   		move.w	6(a4),d4
0088DBA0 23C4 00C0 0000              		move.l	d4,(vdp_data).l
0088DBA6                            @ignore:
0088DBA6 4E75                        		rts	
0088DBA8                            		
0088DBA8                            ; ----------------------------------		
0088DBA8                            ; Load art data
0088DBA8                            ; 
0088DBA8                            ; a1 - the list
0088DBA8                            ; ----------------------------------
0088DBA8                            
0088DBA8                            Level_LoadArtList:
0088DBA8 4A51                       		tst.w	(a1)
0088DBAA 6B00                       		bmi.s	@Finish
0088DBAC 2059                       		move.l	(a1)+,a0		;Addr
0088DBAE 3019                        		move.w	(a1)+,d0		;VRAM
0088DBB0 3219                        		move.w	(a1)+,d1		;Size
0088DBB2 6100 B078                   		bsr	VDP_SendData_L
0088DBB6 60F0                        		bra.s	Level_LoadArtList
0088DBB8                             		
0088DBB8                            @Finish:
0088DBB8 4E75                       		rts
0088DBBA                            		
0088DBBA                            ; =================================================================
0088DBBA                            ; --------------------------------------------
0088DBBA                            ; Data
0088DBBA                            ; --------------------------------------------
0088DBBA                            
0088DBBA                            vram_prizes:
0088DBBA 0000 0001 0000 0001        		dc.l $0001,$0001		; $00 FILLER
0088DBC2 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $01 Breakable: normal
0088DBCA 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $02  **  **  : 1 coin
0088DBD2 0580 0581 0582 0583         		dc.w $580,$581,$582,$583	; $03  **  **  : 10 coins
0088DBDA 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $04  **  **  : ???
0088DBE2 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $05  **  **  : ???
0088DBEA 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $06  **  **  : ???
0088DBF2 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $07  **  **  : 1 up
0088DBFA 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $08 Block ! : 1 coin
0088DC02 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $09  ****   : 10 coins
0088DC0A 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0A  ****   : ???
0088DC12 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0B  ****   : ???
0088DC1A 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0C  ****   : ???
0088DC22 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0D  ****   : ???
0088DC2A 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0E  ****   : 1 up
0088DC32 059C 059D 059E 059F        		dc.w $59C,$59D,$59E,$59F	; $0F Empty block
0088DC3A                            		
0088DC3A 4580 4581 4582 4583        		dc.w $4580,$4581,$4582,$4583	;$10+
0088DC42 4580 4581 4582 4583        		dc.w $4580,$4581,$4582,$4583
0088DC4A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DC52 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DC5A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DC62 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DC6A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DC72 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DC7A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
0088DC82 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DC8A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DC92 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DC9A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DCA2 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DCAA 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DCB2 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DCBA                            
0088DCBA 4594 4595 4596 4597        		dc.w $4594,$4595,$4596,$4597	;$20+ Bouncing block
0088DCC2 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DCCA 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DCD2 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DCDA 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DCE2 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DCEA 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DCF2 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DCFA 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
0088DD02 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD0A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD12 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD1A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD22 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD2A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD32 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD3A                            		
0088DD3A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	;$30+
0088DD42 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD4A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD52 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD5A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD62 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD6A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD72 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD7A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
0088DD82 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD8A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD92 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD9A 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDA2 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDAA 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDB2 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDBA                            		
0088DDBA 45A0 45A1 45A2 45A3        		dc.w $45A0,$45A1,$45A2,$45A3	;$40 - Coins
0088DDC2 45A4 45A5 45A6 45A7        		dc.w $45A4,$45A5,$45A6,$45A7
0088DDCA                            		even
0088DDCA                            
0088DDCA                            ; --------------------------------------------
0088DDCA                            
0088DDCA                            col_SlopeData:
0088DDCA 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0088DDDA 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;$01
0088DDEA 0F0E 0D0C 0B0A 0908 0706+  		dc.b $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00	;$02
0088DDFA 0001 0203 0405 0607 0809+  		dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F	;$03
0088DE0A                            		
0088DE0A 0F0F 0E0E 0D0D 0C0C 0B0B+  		dc.b $0F,$0F,$0E,$0E,$0D,$0D,$0C,$0C,$0B,$0B,$0A,$0A,$09,$09,$08,$08
0088DE1A 0707 0606 0505 0404 0303+  		dc.b $07,$07,$06,$06,$05,$05,$04,$04,$03,$03,$02,$02,$01,$01,$00,$00
0088DE2A                            		
0088DE2A 0000 0101 0202 0303 0404+  		dc.b $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
0088DE3A 0808 0909 0A0A 0B0B 0C0C+  		dc.b $08,$08,$09,$09,$0A,$0A,$0B,$0B,$0C,$0C,$0D,$0D,$0E,$0E,$0F,$0F
0088DE4A                            		
0088DE4A 0F0F 0F0F 0E0E 0E0E 0D0D+  		dc.b $0F,$0F,$0F,$0F,$0E,$0E,$0E,$0E,$0D,$0D,$0D,$0D,$0C,$0C,$0C,$0C
0088DE5A 0B0B 0B0B 0A0A 0A0A 0909+  		dc.b $0B,$0B,$0B,$0B,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$08,$08,$08,$08
0088DE6A 0707 0707 0606 0606 0505+  		dc.b $07,$07,$07,$07,$06,$06,$06,$06,$05,$05,$05,$05,$04,$04,$04,$04
0088DE7A 0303 0303 0202 0202 0101+  		dc.b $03,$03,$03,$03,$02,$02,$02,$02,$01,$01,$01,$01,$00,$00,$00,$00
0088DE8A                            		
0088DE8A 0000 0000 0101 0101 0202+  		dc.b $00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03
0088DE9A 0404 0404 0505 0505 0606+  		dc.b $04,$04,$04,$04,$05,$05,$05,$05,$06,$06,$06,$06,$07,$07,$07,$07
0088DEAA 0808 0808 0909 0909 0A0A+  		dc.b $08,$08,$08,$08,$09,$09,$09,$09,$0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B
0088DEBA 0C0C 0C0C 0D0D 0D0D 0E0E+  		dc.b $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D,$0E,$0E,$0E,$0E,$0F,$0F,$0F,$0F
0088DECA                            		even
0088DECA                            		
0088DECA                            		
0088DECA                            		include	"engine/modes/level/subs/objects.asm"
0088DECA                            ; ====================================================================
0088DECA                            ; -------------------------------------------------
0088DECA                            ; Objects system
0088DECA                            ; -------------------------------------------------
0088DECA                            
0088DECA                            ; NOTES:
0088DECA                            ; Current object Slots:
0088DECA                            ;   00   | Player 1 (HARD-CODED)
0088DECA                            ;   01   | PLANNED (Second player if needed)
0088DECA                            ;   02   | HUD (TODO)
0088DECA                            ;   03   | Eng flag
0088DECA                            ;   04   | FREE
0088DECA                            ;   05   | FREE
0088DECA                            ;   06   | FREE
0088DECA                            ;   07   | FREE
0088DECA                            ; 08-15  | Blocks+Action objects (Auto-arrangled)
0088DECA                            ; 16-MAX | Level objects (Auto-arrangled)
0088DECA                            
0088DECA                            ; --------------------------------------------
0088DECA                            ; Variables
0088DECA                            ; --------------------------------------------
0088DECA                            
0088DECA =00000040                  max_objects	equ	64
0088DECA =00000040                  max_microspr	equ	64
0088DECA                            
0088DECA                            ; --------------------------------------------
0088DECA                            
0088DECA                            		rsreset
0088DECA =00000000                  obj_code	rs.l	1		; Object code 
0088DECA =00000004                  obj_size	rs.l	1		; Object size (see below)
0088DECA                            
0088DECA =00000008                  obj_x		rs.l	1		; Object X Position
0088DECA =0000000C                  obj_y		rs.l	1		; Object Y Position
0088DECA =00000010                  obj_x_spd	rs.l	1		; Object X Speed
0088DECA =00000014                  obj_y_spd	rs.l	1		; Object Y Gravity
0088DECA                            ; obj_maps	rs.l	1
0088DECA                            
0088DECA =00000018                  obj_anim_next	rs.w	1		; Object animation increment (obj_anim + obj_anim_next)
0088DECA =0000001A                  obj_anim_id	rs.w	1		; Object animation to read (current|saved)
0088DECA                            ; obj_vram	rs.w	1		; Object VRAM
0088DECA =0000001C                  obj_anim_spd	rs.b	1		; Object animation delay
0088DECA =0000001D                  obj_index	rs.b	1		; Object code index
0088DECA =0000001E                  obj_status	rs.b	1		; Object status
0088DECA =0000001F                  obj_subid	rs.b	1		; Object SubID
0088DECA =00000020                  obj_frame	rs.b	1		; Object display frame
0088DECA                            ; obj_frame_old	rs.b	1		; Object last frame (DMA)
0088DECA =00000021                  obj_spwnindx	rs.b	1		; Object respawn index (this - 1)
0088DECA =00000022                  obj_col		rs.b	1		; Object collision
0088DECA =00000023                  obj_null	rs.b	1		; FILLER
0088DECA                            
0088DECA =00000024                  obj_ram		rs.b	$40		; Object RAM
0088DECA =00000064                  sizeof_obj	rs.l	0
0088DECA                            
0088DECA                            ; --------------------------------
0088DECA                            ; obj_size
0088DECA                            ; --------------------------------
0088DECA                            
0088DECA                            		rsreset
0088DECA =00000000                  objsize_l	rs.b	1
0088DECA =00000001                  objsize_r	rs.b	1
0088DECA =00000002                  objsize_u	rs.b	1
0088DECA =00000003                  objsize_d	rs.b	1
0088DECA                            
0088DECA                            ; --------------------------------
0088DECA                            ; obj_status
0088DECA                            ; --------------------------------
0088DECA                            
0088DECA =00000000                  bitobj_flipH	equ	0		; set to flip Sprite Horizontally
0088DECA =00000001                  bitobj_flipV	equ	1		; set to flip Sprite Vertically
0088DECA =00000002                  bitobj_air	equ	2		; set if floating/jumping
0088DECA =00000003                  bitobj_hurt	equ	3		; set if we are hurt (Touched by enemy or player)
0088DECA                            
0088DECA =00000006                  bitobj_hit	equ	6		; set to we can hit objects
0088DECA =00000007                  bitobj_stay	equ	7		; set to stay on-screen
0088DECA                            
0088DECA                            ; --------------------------------
0088DECA                            ; obj_col
0088DECA                            ; --------------------------------
0088DECA                            
0088DECA =00000000                  bitcol_floor	equ	0		; Set for Touching floor
0088DECA =00000001                  bitcol_ceiling	equ	1		; 
0088DECA =00000002                  bitcol_wall_r	equ	2		; set for Touching floor/wall/Ceiling
0088DECA =00000003                  bitcol_wall_l	equ	3		;
0088DECA =00000004                  bitcol_obj	equ	4
0088DECA =00000005                  bitcol_obju	equ	5
0088DECA =00000006                  bitcol_objl	equ	6
0088DECA =00000007                  bitcol_objr	equ	7
0088DECA                            
0088DECA                            ; =================================================================
0088DECA                            ; ------------------------------------------------
0088DECA                            ; RAM
0088DECA                            ; ------------------------------------------------
0088DECA                            
0088DECA                            		rsset RAM_ObjectSys
0088DECA =FFFFC040                  RAM_ObjBuffer	rs.b (sizeof_obj*max_objects)
0088DECA =FFFFD940                  RAM_ObjBackup	rs.l 2
0088DECA =FFFFD948                  RAM_MicrSprBuff	rs.l max_microspr*2
0088DECA =FFFFDB48                  RAM_ObjMaxCoins	rs.l 16
0088DECA =FFFFDB88                  RAM_MicrSprCntr	rs.w 1
0088DECA =FFFFDB8A                  RAM_ObjCount	rs.w 1
0088DECA =FFFFDB8C                  sizeof_objbuff	rs.l 0
0088DECA                            ; 		inform 0,"Objects system uses: %h",sizeof_objbuff-RAM_ObjectSys
0088DECA                            		
0088DECA                            ; ====================================================================		
0088DECA                            ; --------------------------------------------
0088DECA                            ; Init
0088DECA                            ; --------------------------------------------
0088DECA                            
0088DECA                            Objects_Init:
0088DECA 41F9 FFFF C040              		lea	(RAM_ObjBuffer),a0
0088DED0 303C 18FF                  		move.w	#(sizeof_obj*max_objects)-1,d0
0088DED4                            @ClrObjs:
0088DED4 4218                        		clr.b	(a0)+
0088DED6 51C8 FFFC                   		dbf	d0,@ClrObjs
0088DEDA 4279 FFFF DB88              		clr.w	(RAM_MicrSprCntr)
0088DEE0 4E75                       		rts
0088DEE2                             
0088DEE2                            ; ====================================================================	
0088DEE2                            ; --------------------------------------------
0088DEE2                            ; Loop
0088DEE2                            ; --------------------------------------------
0088DEE2                            
0088DEE2                            Objects_Run:
0088DEE2 6100 B262                    		bsr	Sprites_Reset
0088DEE6                            
0088DEE6                            ; -----------------------------
0088DEE6                            ; Run objects
0088DEE6                            ; -----------------------------
0088DEE6                            
0088DEE6 4279 FFFF DB8A             		clr.w	(RAM_ObjCount)
0088DEEC 4DF9 FFFF C040              		lea	(RAM_ObjBuffer),a6
0088DEF2 3E3C 003F                   		move.w	#max_objects-1,d7
0088DEF6                            @Next:
0088DEF6 4A96                        		tst.l	(a6)
0088DEF8 6700                        		beq.s	@NoAddr
0088DEFA                             		
0088DEFA 48F9 4080 FFFF D940         		movem.l	a6/d7,(RAM_ObjBackup)
0088DF02 2A6E 0000                    		movea.l	obj_code(a6),a5
0088DF06 4E95                         		jsr	(a5)
0088DF08 4CF9 4080 FFFF D940         		movem.l	(RAM_ObjBackup),a6/d7
0088DF10 0679 0001 FFFF DB8A          		add.w	#1,(RAM_ObjCount)
0088DF18                            @NoAddr:
0088DF18 DCFC 0064                   		adda	#sizeof_obj,a6
0088DF1C 51CF FFD8                   		dbf	d7,@Next
0088DF20                             		
0088DF20                            ; -----------------------------
0088DF20                            ; Show the sprites
0088DF20                            ; -----------------------------
0088DF20                            
0088DF20                            ; Object_DrawObjects:
0088DF20 45F9 FFFF D948              		lea	(RAM_MicrSprBuff),a2
0088DF26                            @NextFrm:
0088DF26 4A92                        		tst.l	(a2)
0088DF28 6700                        		beq.s	@NoAddrFrm
0088DF2A 6100 0000                   		bsr	Object_MicroToSpr
0088DF2E 429A                        		clr.l	(a2)+
0088DF30 429A                        		clr.l	(a2)+
0088DF32 60F2                         		bra.s	@NextFrm
0088DF34                            @NoAddrFrm:
0088DF34 4279 FFFF DB88               		clr.w	(RAM_MicrSprCntr)
0088DF3A 4E75                       		rts
0088DF3C                            ; 		inform 0,"%h",RAM_MicrSprBuff
0088DF3C                            		
0088DF3C                            ; ====================================================================
0088DF3C                            ; ----------------------------------------------
0088DF3C                            ; Subs
0088DF3C                            ; ----------------------------------------------
0088DF3C                            
0088DF3C                            ; **********************************************
0088DF3C                            ; Object display
0088DF3C                            ; **********************************************
0088DF3C                            
0088DF3C                            ; ----------------------------------------------
0088DF3C                            ; Object_DynArt
0088DF3C                            ; 
0088DF3C                            ; Input:
0088DF3C                            ; d0 | LONG - VRAM|Frame
0088DF3C                            ; d1 | LONG - DPLC data
0088DF3C                            ; d2 | LONG - Art data
0088DF3C                            ;
0088DF3C                            ; Uses:
0088DF3C                            ; a3/d3-d7
0088DF3C                            ; ----------------------------------------------
0088DF3C                             
0088DF3C                            Object_DPLC:
0088DF3C                            ; 		cmp.b	obj_frame_old(a6),d0
0088DF3C                            ; 		beq.s	@EndAll
0088DF3C 0240 00FF                  		and.w	#$FF,d0
0088DF40                            ; 		move.b	d0,obj_frame_old(a6)
0088DF40 2641                       		movea.l	d1,a3
0088DF42 E348                       		lsl.w	#1,d0
0088DF44 D6F3 0000                      		adda	(a3,d0.w),a3
0088DF48 7C00                          		moveq	#0,d6
0088DF4A 3C1B                          		move.w	(a3)+,d6
0088DF4C 6700 0000                     		beq	@EndAll
0088DF50 0446 0001                     		sub.w	#1,d6
0088DF54 4840                          		swap	d0
0088DF56 0240 07FF                     		and.w	#$7FF,d0
0088DF5A 7A00                          		moveq	#0,d5
0088DF5C 3A00                          		move.w	d0,d5		;d5 - VRAM (base)
0088DF5E 2E02                          		move.l	d2,d7
0088DF60                            @Next:
0088DF60 3213                            		move.w	(a3),d1
0088DF62 E049                            		lsr.w	#8,d1
0088DF64 3801                            		move.w	d1,d4
0088DF66 E84C                            		lsr.w	#4,d4		;d4 - Next VRAM
0088DF68 0244 000F                       		and.w	#$F,d4
0088DF6C 0644 0001                       		add.w	#1,d4
0088DF70 0641 0010                       		add.w	#$10,d1		;Size + 1
0088DF74 4841                            		swap	d1		;Size|ROM+Here
0088DF76 321B                             		move.w	(a3)+,d1
0088DF78 0241 0FFF                        		and.w	#$FFF,d1
0088DF7C EB49                            		lsl.w	#5,d1
0088DF7E 2007                            		move.l	d7,d0
0088DF80 7600                             		moveq	#0,d3
0088DF82 3601                             		move.w	d1,d3
0088DF84 D083                             		add.l	d3,d0		;ROM Addr + Cell number
0088DF86                                 		
0088DF86 4841                       		swap	d1		;(Broken)|Size
0088DF88 3405                       		move.w	d5,d2
0088DF8A 6100 B186                      		bsr	DMA_Set		;** TODO **
0088DF8E DA44                       		add.w	d4,d5		;Next VRAM
0088DF90 51CE FFCE                     		dbf	d6,@Next
0088DF94                             
0088DF94                            @EndAll:
0088DF94 4E75                        		rts
0088DF96                             
0088DF96                            ; ----------------------------------------------
0088DF96                            ; Object_Show
0088DF96                            ; 
0088DF96                            ; Input:
0088DF96                            ; a6 - Current object
0088DF96                            ; d0 - VRAM | Frame
0088DF96                            ; 
0088DF96                            ; Uses:
0088DF96                            ; a3/d0-d1
0088DF96                            ; 
0088DF96                            ; WARNING: WITH THIS METHOD, OBJECTS MUST BE
0088DF96                            ; AFTER $FF8000 SO IT CAN CORRECTLY
0088DF96                            ; CHECK BETWEEN OBJECTS AND
0088DF96                            ; SEPARATE SPRITES
0088DF96                            ; ----------------------------------------------
0088DF96                            
0088DF96                            Object_Show:	
0088DF96 47F9 FFFF D948             		lea	(RAM_MicrSprBuff),a3
0088DF9C 3439 FFFF DB88             		move.w	(RAM_MicrSprCntr),d2
0088DFA2 E74A                       		lsl.w	#3,d2
0088DFA4 D6C2                       		adda	d2,a3
0088DFA6                            ; @next:		
0088DFA6                            ; 		tst.l	(a3)
0088DFA6                            ; 		beq.s	@free
0088DFA6                            ; 		adda	#8,a3
0088DFA6                            ; 		bra.s	@next
0088DFA6                            @free:
0088DFA6 B6FC DB48                   		cmpa.w	#(RAM_MicrSprBuff+($200))&$FFFF,a3	; TODO: mejor check
0088DFAA 6C00                        		bge.s	@full
0088DFAC                             		
0088DFAC 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088DFB2 342E 0008                   		move.w	obj_x(a6),d2
0088DFB6 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0088DFBC 6600                        		bne.s	@onscrn_X
0088DFBE 946D 001C                   		sub.w	lvl_x(a5),d2
0088DFC2                            @onscrn_X:
0088DFC2 0642 0080                   		add.w	#$80,d2
0088DFC6 0C42 0040                    		cmp.w	#$40,d2
0088DFCA 6D00 0000                    		blt	@full
0088DFCE 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
0088DFD2 6E00 0000                   		bgt	@full
0088DFD6                            
0088DFD6 4842                        		swap	d2
0088DFD8 342E 000C                   		move.w	obj_y(a6),d2
0088DFDC 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0088DFE2 6600                        		bne.s	@onscrn_Y
0088DFE4 946D 0020                  		sub.w	lvl_y(a5),d2
0088DFE8                            @onscrn_Y:
0088DFE8 0642 0080                   		add.w	#$80,d2
0088DFEC 0C42 0040                   		cmp.w	#$40,d2
0088DFF0 6D00 0000                   		blt	@full
0088DFF4 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
0088DFF8 6E00 0000                  		bgt	@full
0088DFFC                                		
0088DFFC 36CE                       		move.w	a6,(a3)+	; (Object_RAM & $FFFF)
0088DFFE 0240 00FF                  		and.w	#$FF,d0
0088E002 E148                       		lsl.w	#8,d0
0088E004 4840                       		swap	d0
0088E006 36C0                       		move.w	d0,(a3)+	; VRAM
0088E008 4240                       		clr.w	d0
0088E00A 8280                        		or.l	d0,d1	
0088E00C 26C1                       		move.l	d1,(a3)+	; Frame | Maps data
0088E00E                            		
0088E00E 0679 0001 FFFF DB88        		add.w	#1,(RAM_MicrSprCntr)
0088E016                            @full:		
0088E016 4E75                        		rts
0088E018                            
0088E018                            ; ----------------------------------------------
0088E018                            ; Object_ExtSprite
0088E018                            ; 
0088E018                            ; Input:
0088E018                            ; d0 -    X | Y
0088E018                            ; d1 - Size | VRAM
0088E018                            ; 
0088E018                            ; Uses:
0088E018                            ; d4-d5, a3
0088E018                            ; ----------------------------------------------
0088E018                            
0088E018                            Object_ExtSprite:
0088E018 47F9 FFFF D948             		lea	(RAM_MicrSprBuff),a3
0088E01E 7800                       		moveq	#0,d4
0088E020 3839 FFFF DB88             		move.w	(RAM_MicrSprCntr),d4
0088E026 E74C                       		lsl.w	#3,d4
0088E028 D6C4                       		adda	d4,a3
0088E02A                            ; @next:		
0088E02A                            ; 		tst.l	(a3)
0088E02A                            ; 		beq.s	@free
0088E02A                            ; 		adda	#8,a3
0088E02A                            ; 		bra.s	@next
0088E02A                            @free:
0088E02A B6FC DB48                   		cmpa.w	#(RAM_MicrSprBuff+($200))&$FFFF,a3	; TODO: mejor check
0088E02E 6C00                        		bge.s	@full
0088E030                             		
0088E030 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E036                            		
0088E036 2A00                       		move.l	d0,d5
0088E038 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0088E03E 6600                        		bne.s	@onscrn_Y
0088E040 9A6D 0020                    		sub.w	lvl_y(a5),d5
0088E044                            @onscrn_Y:
0088E044 0645 0080                    		add.w	#$80,d5
0088E048 0C45 0040                   		cmp.w	#$40,d5
0088E04C 6D00 0000                   		blt	@full
0088E050 0C45 01A0                  		cmp.w	#(224+$80)+$40,d5
0088E054 6E00 0000                  		bgt	@full
0088E058 0245 7FFF                   		and.w	#$7FFF,d5
0088E05C 3685                         		move.w	d5,(a3)
0088E05E                            
0088E05E 4845                       		swap	d5
0088E060 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0088E066 6600                        		bne.s	@onscrn_X
0088E068 9A6D 001C                     		sub.w	lvl_x(a5),d5
0088E06C                            @onscrn_X:
0088E06C 0645 0080                    		add.w	#$80,d5
0088E070 0C45 0040                    		cmp.w	#$40,d5
0088E074 6D00 0000                    		blt	@full
0088E078 0C45 0200                   		cmp.w	#(320+$80)+$40,d5
0088E07C 6E00 0000                   		bgt	@full
0088E080 0245 7FFF                  		and.w	#$7FFF,d5
0088E084 3745 0006                    		move.w	d5,6(a3)
0088E088                            
0088E088 2801                         		move.l	d1,d4
0088E08A 3744 0004                   		move.w	d4,4(a3)
0088E08E 4844                        		swap	d4
0088E090 3A04                        		move.w	d4,d5
0088E092 0245 000F                   		and.w	#$F,d5
0088E096 3745 0002                     		move.w	d5,2(a3)
0088E09A 4844                          		swap	d4
0088E09C                               		
0088E09C 0679 0001 FFFF DB88           		add.w	#1,(RAM_MicrSprCntr)
0088E0A4                            @full:		
0088E0A4 4E75                        		rts
0088E0A6                             		
0088E0A6                            ; ----------------------------------------------
0088E0A6                            ; Object_Delete
0088E0A6                            ; 
0088E0A6                            ; Input:
0088E0A6                            ; a6 - Current object
0088E0A6                            ; ----------------------------------------------
0088E0A6                            
0088E0A6                            Object_Delete:
0088E0A6 7000                       		moveq	#0,d0
0088E0A8 102E 0021                  		move.b 	obj_spwnindx(a6),d0
0088E0AC 4A00                       		tst.b	d0
0088E0AE 6700                       		beq.s	@offindx
0088E0B0 0440 0001                  		sub.w	#1,d0
0088E0B4 C0FC 000A                  		mulu.w	#$A,d0
0088E0B8 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
0088E0BE DAC0                       		adda	d0,a5
0088E0C0 0895 0007                  		bclr	#7,(a5)			;Reset ON SCREEN flag
0088E0C4                            @offindx:
0088E0C4                            
0088E0C4                            ;  		clr.l	obj_code(a6)
0088E0C4                            ; 		clr.b	obj_index(a6)
0088E0C4                            		
0088E0C4 303C 0063                  		move.w	#sizeof_obj-1,d0
0088E0C8                            @delete:
0088E0C8 421E                       		clr.b	(a6)+
0088E0CA 51C8 FFFC                  		dbf	d0,@delete
0088E0CE 4E75                        		rts
0088E0D0                             		
0088E0D0                            ; ----------------------------------------------
0088E0D0                            ; Object_MicroToSpr
0088E0D0                            ; 
0088E0D0                            ; grab an entry from the microlist
0088E0D0                            ; and convert it to sprites
0088E0D0                            ; ----------------------------------------------
0088E0D0                            
0088E0D0                            Object_MicroToSpr:
0088E0D0 7000                       		moveq	#0,d0
0088E0D2 3012                       		move.w	(a2),d0
0088E0D4 4A40                       		tst.w	d0
0088E0D6 6B00                       		bmi.s	@FromObject
0088E0D8                            		
0088E0D8 4BF9 FFFF E5C0              		lea	(RAM_SprControl),a5
0088E0DE 286D 0000                  		movea.l	sprite_free(a5),a4
0088E0E2 B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
0088E0E6 6E00 0000                   		bgt	Object_Return
0088E0EA                             		
0088E0EA 3412                         		move.w	(a2),d2
0088E0EC 0C42 0040                   		cmp.w	#$40,d2
0088E0F0 6D00 0000                   		blt	@no_sprite
0088E0F4 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
0088E0F8 6E00 0000                  		bgt	@no_sprite
0088E0FC 3882                        		move.w	d2,(a4)
0088E0FE 342A 0006                   		move.w	6(a2),d2
0088E102 0C42 0040                    		cmp.w	#$40,d2
0088E106 6D00 0000                    		blt	@no_sprite
0088E10A 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
0088E10E 6E00 0000                   		bgt	@no_sprite
0088E112 3942 0006                   		move.w	d2,6(a4)
0088E116                            	
0088E116 342A 0002                  		move.w	2(a2),d2
0088E11A 302D 0004                  		move.w	sprite_link(a5),d0
0088E11E 066D 0001 0004              		add.w	#1,sprite_link(a5)
0088E124 E14A                            		lsl.w	#8,d2
0088E126 0242 0F00                  		and.w	#$0F00,d2
0088E12A 8042                       		or.w	d2,d0
0088E12C 3940 0002                  		move.w	d0,2(a4)
0088E130 396A 0004 0004             		move.w	4(a2),4(a4)
0088E136                             
0088E136 D8FC 0008                    		adda	#8,a4
0088E13A 2B4C 0000                  		move.l	a4,sprite_free(a5)
0088E13E 4E75                       		rts
0088E140                            
0088E140                            @no_sprite:
0088E140 4294                       		clr.l	(a4)
0088E142 42AC 0004                  		clr.l	4(a4)
0088E146 4E75                       		rts
0088E148                            		
0088E148                            ; ----------------------------------------------
0088E148                            
0088E148                            @FromObject:
0088E148 0080 00FF 0000             		or.l	#$FF0000,d0
0088E14E 2C40                       		movea.l	d0,a6
0088E150 302A 0002                   		move.w	2(a2),d0
0088E154 4840                       		swap	d0
0088E156 102A 0004                  		move.b	4(a2),d0
0088E15A 0240 00FF                  		and.w	#$FF,d0
0088E15E 222A 0004                  		move.l	4(a2),d1
0088E162 0281 00FF FFFF             		and.l	#$FFFFFF,d1
0088E168                            		
0088E168 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E16E 342E 0008                   		move.w	obj_x(a6),d2
0088E172 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0088E178 6600                        		bne.s	@onscrn_X_obj
0088E17A 946D 001C                   		sub.w	lvl_x(a5),d2
0088E17E                            @onscrn_X_obj:
0088E17E 0642 0080                   		add.w	#$80,d2
0088E182 0C42 0040                    		cmp.w	#$40,d2
0088E186 6D00 0000                    		blt	Object_Return
0088E18A 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
0088E18E 6E00 0000                   		bgt	Object_Return
0088E192 4842                        		swap	d2
0088E194 342E 000C                   		move.w	obj_y(a6),d2
0088E198 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0088E19E 6600                        		bne.s	@onscrn_Y_obj
0088E1A0 946D 0020                  		sub.w	lvl_y(a5),d2
0088E1A4                            @onscrn_Y_obj:
0088E1A4 0642 0080                   		add.w	#$80,d2
0088E1A8 0C42 0040                   		cmp.w	#$40,d2
0088E1AC 6D00 0000                   		blt	Object_Return
0088E1B0 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
0088E1B4 6E00 0000                  		bgt	Object_Return
0088E1B8                            
0088E1B8 4243                       		clr.w	d3
0088E1BA 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
0088E1C0 6700                       		beq.s	@Right_LR
0088E1C2 08C3 0000                  		bset	#0,d3
0088E1C6                            @Right_LR:
0088E1C6 082E 0001 001E             		btst	#bitobj_flipV,obj_status(a6)
0088E1CC 6700                       		beq.s	@Right_UD
0088E1CE 08C3 0001                  		bset	#1,d3
0088E1D2                            @Right_UD:
0088E1D2                            
0088E1D2                            ; ----------------------------------------------
0088E1D2                            ; Object_BldSpr_List
0088E1D2                            ; 
0088E1D2                            ; Input:
0088E1D2                            ; d0 - VRAM|Frame
0088E1D2                            ; d1 - Mappings data address
0088E1D2                            ; d2 - X-pos|Y-pos 
0088E1D2                            ; d3 - Flags
0088E1D2                            ;
0088E1D2                            ; Output:
0088E1D2                            ; d3 - New sprite link
0088E1D2                            ; 
0088E1D2                            ; Uses:
0088E1D2                            ; a3-a5/d4
0088E1D2                            ; ----------------------------------------------
0088E1D2                            
0088E1D2                            ; TODO: esto no checa el final
0088E1D2                            
0088E1D2                            Object_BldSpr_List:
0088E1D2 4BF9 FFFF E5C0              		lea	(RAM_SprControl),a5
0088E1D8 286D 0000                  		movea.l	sprite_free(a5),a4
0088E1DC B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
0088E1E0 6E00 0000                   		bgt	Object_Return
0088E1E4                             		
0088E1E4 2641                        		movea.l	d1,a3
0088E1E6 E348                        		lsl.w	#1,d0
0088E1E8 D6F3 0000                   		adda	(a3,d0.w),a3
0088E1EC                             		
0088E1EC 0283 0000 FFFF             		and.l	#$FFFF,d3
0088E1F2 7C00                        		moveq	#0,d6
0088E1F4 1C1B                        		move.b	(a3)+,d6
0088E1F6 6700 0000                   		beq	Object_Return
0088E1FA 0446 0001                   		sub.w	#1,d6
0088E1FE                            @Next:
0088E1FE                            
0088E1FE                            ; ------------
0088E1FE                            ; Ypos check
0088E1FE                            ; ------------
0088E1FE                            
0088E1FE                            ; TODO: hacer el mismo fix de abajo despues
0088E1FE                            
0088E1FE 3202                       		move.w	d2,d1
0088E200 1013                        		move.b	(a3),d0
0088E202 4880                        		ext.w	d0
0088E204                             		
0088E204 0803 0001                     		btst	#1,d3		; VFlip flag?
0088E208 6700 0000                    		beq	@DontFlip
0088E20C 182B 0001                   		move.b	1(a3),d4
0088E210 0244 0003                    		and.w	#%11,d4
0088E214 E74C                         		lsl.w	#3,d4
0088E216 D044                         		add.w	d4,d0
0088E218 4440                       		neg.w	d0
0088E21A                            @DontFlip:
0088E21A D240                        		add.w	d0,d1
0088E21C 1039 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d0
0088E222 0240 0006                   		and.w	#%00000110,d0
0088E226 6700                        		beq.s	@normal
0088E228 0641 0070                  		add.w	#$70,d1	
0088E22C                            @normal:
0088E22C 38C1                        		move.w	d1,(a4)+
0088E22E                            		
0088E22E                            ; ------------
0088E22E                            ; Size
0088E22E                            ; ------------
0088E22E                            
0088E22E 18EB 0001                   		move.b	1(a3),(a4)+		; Size
0088E232 4240                        		clr.w	d0
0088E234 102D 0005                   		move.b	5(a5),d0
0088E238 D02D 0004                   		add.b	sprite_link(a5),d0
0088E23C 18C0                        		move.b	d0,(a4)+		; Link
0088E23E 066D 0001 0004              		add.w	#1,sprite_link(a5)
0088E244                             
0088E244                            ; ------------
0088E244                            ; Vram
0088E244                            ; ------------
0088E244                            
0088E244 4240                         		clr.w	d0			; Vram
0088E246 102B 0002                    		move.b	2(a3),d0
0088E24A E148                         		lsl.w	#8,d0
0088E24C 102B 0003                    		move.b	3(a3),d0
0088E250 4840                         		swap	d0
0088E252 3200                         		move.w	d0,d1
0088E254 4840                         		swap	d0
0088E256 D240                         		add.w	d0,d1
0088E258                              	
0088E258 0803 0000                     		btst	#0,d3			;Left flag?
0088E25C 6700                          		beq.s	@Right
0088E25E 0041 0800                     		or.w	#$800,d1
0088E262                            @Right:
0088E262 0803 0001                     		btst	#1,d3			;V flag?
0088E266 6700                          		beq.s	@Down
0088E268 0041 1000                     		or.w	#$1000,d1
0088E26C                            @Down:
0088E26C 38C1                         		move.w	d1,(a4)+
0088E26E                            		
0088E26E                            ; ------------
0088E26E                            ; Xpos check
0088E26E                            ; ------------
0088E26E                            
0088E26E 4240                        		clr.w	d0
0088E270 7200                        		moveq	#0,d1
0088E272 7800                        		moveq	#0,d4
0088E274 4842                        		swap	d2
0088E276 3202                        		move.w	d2,d1
0088E278 4842                        		swap	d2
0088E27A                             		
0088E27A 102B 0004                   		move.b	4(a3),d0
0088E27E 4880                        		ext.w	d0
0088E280 0803 0000                     		btst	#0,d3			;Left flag?
0088E284 6700 0000                    		beq	@ContX
0088E288                            
0088E288 182B 0001                   		move.b	1(a3),d4
0088E28C 0244 000C                    		and.w	#%1100,d4
0088E290 E34C                         		lsl.w	#1,d4
0088E292 D044                         		add.w	d4,d0
0088E294 4440                       		neg.w	d0
0088E296 0440 0008                    		sub.w	#8,d0			;TODO: mala idea
0088E29A                            
0088E29A                            @ContX:
0088E29A D240                        		add.w	d0,d1
0088E29C 38C1                        		move.w	d1,(a4)+
0088E29E D6FC 0005                   		adda 	#5,a3
0088E2A2 51CE FF5A                   		dbf	d6,@Next
0088E2A6 2B4C 0000                   		move.l	a4,sprite_free(a5)
0088E2AA                             		
0088E2AA B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
0088E2AE 6E00                        		bgt.s	Object_Return
0088E2B0 429C                        		clr.l	(a4)+
0088E2B2 429C                        		clr.l	(a4)+
0088E2B4                            Object_Return:
0088E2B4 4E75                        		rts
0088E2B6                             		
0088E2B6                            ; ----------------------------------------------
0088E2B6                            ; Object_IsGone
0088E2B6                            ; ----------------------------------------------
0088E2B6                            
0088E2B6                            Object_IsGone:
0088E2B6 7000                       		moveq	#0,d0
0088E2B8 102E 0021                  		move.b 	obj_spwnindx(a6),d0
0088E2BC 4A00                       		tst.b	d0
0088E2BE 6700                       		beq.s	@offindx
0088E2C0 0440 0001                  		sub.w	#1,d0
0088E2C4 C0FC 000A                  		mulu.w	#$A,d0
0088E2C8 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
0088E2CE DAC0                       		adda	d0,a5
0088E2D0 08D5 0006                  		bset	#6,(a5)			; Set GONE flag
0088E2D4                            @offindx:
0088E2D4 4E75                       		rts
0088E2D6                            		
0088E2D6                            ; ----------------------------------------------
0088E2D6                            ; Object_OffCheck
0088E2D6                            ; ----------------------------------------------
0088E2D6                            
0088E2D6                            Object_OffCheck:
0088E2D6 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E2DC 49F9 FFFF BC42             		lea	(RAM_LevelObjPos),a4
0088E2E2                            		
0088E2E2 7000                       		moveq	#0,d0
0088E2E4 102E 0021                  		move.b 	obj_spwnindx(a6),d0
0088E2E8 4A00                       		tst.b	d0
0088E2EA 6700                       		beq.s	@return
0088E2EC 0440 0001                  		sub.w	#1,d0
0088E2F0 C0FC 000A                  		mulu.w	#$A,d0
0088E2F4 D8C0                       		adda	d0,a4
0088E2F6                            		
0088E2F6 302D 0020                     		move.w	lvl_y(a5),d0
0088E2FA 3400                          		move.w	d0,d2
0088E2FC 322E 000C                       		move.w	obj_y(a6),d1
0088E300 0641 0060                       		add.w	#$60,d1
0088E304 B240                            		cmp.w	d0,d1
0088E306 6D00                            		blt.s	Object_OffDelete
0088E308 0642 0140                         		add.w	#224+$60,d2
0088E30C 322E 000C                        		move.w	obj_y(a6),d1
0088E310 B242                             		cmp.w	d2,d1
0088E312 6E00                             		bgt.s	Object_OffDelete
0088E314                                 		
0088E314 302D 001C                    		move.w	lvl_x(a5),d0
0088E318 3400                         		move.w	d0,d2
0088E31A 322E 0008                      		move.w	obj_x(a6),d1
0088E31E 0641 0040                      		add.w	#$40,d1
0088E322 B240                           		cmp.w	d0,d1
0088E324 6D00                           		blt.s	Object_OffDelete
0088E326 0642 0180                        		add.w	#320+$40,d2		;TODO: horizontal mode 
0088E32A 322E 0008                       		move.w	obj_x(a6),d1
0088E32E B242                            		cmp.w	d2,d1
0088E330 6E00                            		bgt.s	Object_OffDelete
0088E332                                 		
0088E332                            ;      		; Check for suicide
0088E332                            ; 		move.w	lvl_size_y(a5),d0		; Bottomless pit
0088E332                            ; 		lsl.w	#4,d0
0088E332                            ; 		move.w	obj_y(a6),d1
0088E332                            ; 		moveq	#0,d2
0088E332                            ; 		move.b	obj_size+2(a6),d2
0088E332                            ; 		lsl.w	#3,d2
0088E332                            ; 		sub.w	d2,d1
0088E332                            ; 		cmp.w	d0,d1
0088E332                            ; 		blt	@return
0088E332                            ; 		
0088E332                            ; 		bset	#7,(a4)
0088E332                            ; 		clr.l	obj_code(a6)
0088E332                            ; 		clr.b	obj_index(a6)
0088E332                            @return:
0088E332 4E75                       		rts
0088E334                            		
0088E334                            ; a4 - respawn slot of this object
0088E334                            
0088E334                            Object_OffDelete:
0088E334 0894 0007                  		bclr	#7,(a4)			; Reset ON SCREEN flag
0088E338                            @offindx:
0088E338                            
0088E338 42AE 0000                  		clr.l	obj_code(a6)
0088E33C 422E 001D                  		clr.b	obj_index(a6)
0088E340                            @Return:
0088E340 4E75                        		rts
0088E342                            		
0088E342                            ; ----------------------------------------------
0088E342                            ; Object animation
0088E342                            ; 
0088E342                            ; Input
0088E342                            ; d1 | LONG - Animation data
0088E342                            ; 
0088E342                            ; Output
0088E342                            ; d0 | WORD - Frame
0088E342                            ; 
0088E342                            ; Uses:
0088E342                            ; d2
0088E342                            ; ----------------------------------------------
0088E342                             
0088E342                            Object_Animate:
0088E342 4A81                        		tst.l	d1
0088E344 6700                         		beq.s	@Return
0088E346 7400                        		moveq	#0,d2
0088E348 142E 001B                   		move.b	obj_anim_id+1(a6),d2
0088E34C B42E 001A                   		cmp.b	obj_anim_id(a6),d2
0088E350 6700                        		beq.s	@SameThing
0088E352 1D6E 001A 001B              		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
0088E358 426E 0018                   		clr.w	obj_anim_next(a6)
0088E35C                            @SameThing:
0088E35C 142E 001A                   		move.b	obj_anim_id(a6),d2
0088E360 0C02 00FF                   		cmp.b	#-1,d2
0088E364 6700                        		beq.s	@Return
0088E366 E34A                        		lsl.w	#1,d2
0088E368 2041                       		movea.l	d1,a0
0088E36A D0F0 2000                   		adda	(a0,d2.w),a0
0088E36E                             
0088E36E 1418                        		move.b	(a0)+,d2
0088E370 0C02 00FF                   		cmp.b	#-1,d2
0088E374 6700                        		beq.s	@keepspd
0088E376 042E 0001 001C              		sub.b	#1,obj_anim_spd(a6)
0088E37C 6A00                        		bpl.s	@Return
0088E37E 1D42 001C                  		move.b	d2,obj_anim_spd(a6)
0088E382                            @keepspd:
0088E382 7200                        		moveq	#0,d1
0088E384 342E 0018                   		move.w	obj_anim_next(a6),d2
0088E388 1210                        		move.b	(a0),d1
0088E38A D0C2                        		adda	d2,a0
0088E38C                             
0088E38C 0280 FFFF 0000              		and.l	#$FFFF0000,d0
0088E392 1010                        		move.b	(a0),d0
0088E394 0C00 00FF                   		cmp.b	#$FF,d0
0088E398 6700                        		beq.s	@NoAnim
0088E39A 0C00 00FE                   		cmp.b	#$FE,d0
0088E39E 6700                        		beq.s	@GoToFrame
0088E3A0 0C00 00FD                   		cmp.b	#$FD,d0
0088E3A4 6700                        		beq.s	@LastFrame
0088E3A6                             		
0088E3A6 1D40 0020                   		move.b	d0,obj_frame(a6)
0088E3AA 066E 0001 0018              		add.w	#1,obj_anim_next(a6)
0088E3B0                            @Return:
0088E3B0 4E75                        		rts
0088E3B2                             
0088E3B2                            @NoAnim:
0088E3B2 3D7C 0001 0018              		move.w	#1,obj_anim_next(a6)
0088E3B8 3001                        		move.w	d1,d0
0088E3BA 1D40 0020                   		move.b	d0,obj_frame(a6)
0088E3BE 4E75                       		rts
0088E3C0                            @LastFrame:
0088E3C0 422E 001C                   		clr.b	obj_anim_spd(a6)
0088E3C4 4E75                       		rts
0088E3C6                            @GoToFrame:
0088E3C6 426E 0018                  		clr.w	obj_anim_next(a6)
0088E3CA 1D68 0001 0019             		move.b	1(a0),obj_anim_next+1(a6)
0088E3D0 4E75                       		rts
0088E3D2                            	
0088E3D2                            ; ------------------------------------------------
0088E3D2                            
0088E3D2                            Object_ShowPoints:
0088E3D2 302E 0008                   		move.w	obj_x(a6),d0
0088E3D6 0440 0004                   		sub.w	#4,d0
0088E3DA 4840                        		swap	d0
0088E3DC 302E 000C                   		move.w	obj_y(a6),d0
0088E3E0 0440 0004                   		sub.w	#4,d0
0088E3E4 7200                        		moveq	#0,d1
0088E3E6 323C 0587                   		move.w	#$587,d1
0088E3EA 6000 FC2C                   		bra	Object_ExtSprite
0088E3EE                             		
0088E3EE                             		
0088E3EE 382E 000C                   		move.w	obj_y(a6),d4
0088E3F2 7400                        		moveq	#0,d2
0088E3F4 142E 0007                   		move.b	obj_size+3(a6),d2
0088E3F8 E74A                        		lsl.w	#3,d2
0088E3FA D842                        		add.w	d2,d4
0088E3FC 6100 0000                   		bsr	@leftright
0088E400 382E 000C                   		move.w	obj_y(a6),d4
0088E404 7400                        		moveq	#0,d2
0088E406 142E 0006                   		move.b	obj_size+2(a6),d2
0088E40A E74A                        		lsl.w	#3,d2
0088E40C 9842                        		sub.w	d2,d4
0088E40E                            
0088E40E                            ;  		rts
0088E40E                            @leftright:
0088E40E 302E 0008                   		move.w	obj_x(a6),d0
0088E412 0440 0002                   		sub.w	#2,d0
0088E416 4840                        		swap	d0
0088E418 3004                        		move.w	d4,d0
0088E41A 7200                        		moveq	#0,d1
0088E41C 323C 0587                   		move.w	#$587,d1
0088E420 6100 FBF6                   		bsr	Object_ExtSprite
0088E424                             		
0088E424 302E 0008                   		move.w	obj_x(a6),d0
0088E428 7400                        		moveq	#0,d2
0088E42A 142E 0004                   		move.b	obj_size(a6),d2
0088E42E E74A                        		lsl.w	#3,d2
0088E430 9042                        		sub.w	d2,d0
0088E432 4840                        		swap	d0
0088E434 3004                        		move.w	d4,d0
0088E436 6100 FBE0                   		bsr	Object_ExtSprite
0088E43A                             		
0088E43A 302E 0008                   		move.w	obj_x(a6),d0
0088E43E 0440 0003                   		sub.w	#3,d0
0088E442 7400                        		moveq	#0,d2
0088E444 142E 0005                   		move.b	obj_size+1(a6),d2
0088E448 E74A                        		lsl.w	#3,d2
0088E44A D042                        		add.w	d2,d0
0088E44C 4840                        		swap	d0
0088E44E 3004                        		move.w	d4,d0
0088E450 6000 FBC6                   		bra	Object_ExtSprite
0088E454                             	
0088E454                            ; **********************************************
0088E454                            ; Object level collision
0088E454                            ; **********************************************
0088E454                            
0088E454                            ; ************************
0088E454                            ; Find floor collision
0088E454                            ; CENTER
0088E454                            ; 
0088E454                            ; Input:
0088E454                            ; a6 - Object to read
0088E454                            ; a5 - Level buffer
0088E454                            ; a4 - Layout data
0088E454                            ; 
0088E454                            ; Output:
0088E454                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
0088E454                            ; 
0088E454                            ; Uses:
0088E454                            ; a3-a4 | d4-d5
0088E454                            ; ************************
0088E454                            
0088E454                            object_FindPrz_Floor:
0088E454 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E45A 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088E45E 6000                         		bra.s	objSearchCol_Floor
0088E460                              		
0088E460                            object_FindCol_Floor:
0088E460 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E466 286D 0014                    		movea.l	lvl_collision(a5),a4
0088E46A                            
0088E46A                            objSearchCol_Floor:
0088E46A 7000                       		moveq	#0,d0
0088E46C 7800                       		moveq	#0,d4
0088E46E 7A00                       		moveq	#0,d5
0088E470 382E 000C                   		move.w	obj_y(a6),d4
0088E474 1A2E 0007                   		move.b	obj_size+3(a6),d5
0088E478 E74D                        		lsl.w	#3,d5
0088E47A D845                        		add.w	d5,d4
0088E47C 4A44                        		tst.w	d4
0088E47E 6B00 0000                   		bmi	@no_col
0088E482 3A2D 0032                   		move.w	lvl_size_y(a5),d5
0088E486 E94D                        		lsl.w	#4,d5
0088E488 B845                        		cmp.w	d5,d4
0088E48A 6C00 0000                   		bge	@no_col
0088E48E 3A04                        		move.w	d4,d5
0088E490 E98D                          		lsl.l	#4,d5
0088E492 2005                           		move.l	d5,d0
0088E494 E84C                         		lsr.w	#4,d4
0088E496 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0088E49A D8C4                         		adda	d4,a4
0088E49C                             		
0088E49C                            ; ------------------------
0088E49C                            ; X check
0088E49C                            ; ------------------------
0088E49C                            
0088E49C 264C                         		movea.l	a4,a3
0088E49E 382E 0008                   		move.w	obj_x(a6),d4
0088E4A2 4A44                        		tst.w	d4
0088E4A4 6B00                        		bmi.s	@force_on
0088E4A6 3A2D 0030                   		move.w	lvl_size_x(a5),d5
0088E4AA E94D                        		lsl.w	#4,d5
0088E4AC B845                         		cmp.w	d5,d4
0088E4AE 6C00                         		bge.s	@force_on
0088E4B0 E84C                        		lsr.w	#4,d4
0088E4B2 D6C4                        		adda 	d4,a3
0088E4B4                            ;  		btst	#7,(a3)
0088E4B4                            ;  		bne.s	@no_col
0088E4B4                            ;  		tst.b	(a3)
0088E4B4                            ;  		beq.s	@no_col
0088E4B4 E94C                        		lsl.w	#4,d4
0088E4B6 4844                        		swap	d4
0088E4B8 8084                        		or.l	d4,d0			;XXXYYY00
0088E4BA                               		
0088E4BA 1013                        		move.b	(a3),d0	
0088E4BC 4E75                        		rts
0088E4BE                             		
0088E4BE                            @force_on:
0088E4BE 7001                        		moveq	#1,d0
0088E4C0                            @no_col:
0088E4C0 4E75                       		rts
0088E4C2                            		
0088E4C2                            ; ************************
0088E4C2                            ; Find side collision
0088E4C2                            ; CENTER
0088E4C2                            ;
0088E4C2                            ; Input:
0088E4C2                            ; a6 - Object to read
0088E4C2                            ; a5 - Level buffer
0088E4C2                            ; a4 - Layout data
0088E4C2                            ; 
0088E4C2                            ; Output:
0088E4C2                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
0088E4C2                            ; 
0088E4C2                            ; Uses:
0088E4C2                            ; a3-a4 | d4-d5
0088E4C2                            ; ************************
0088E4C2                            
0088E4C2                            object_FindPrz_Wall:
0088E4C2 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E4C8 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088E4CC 6000                         		bra.s	objSearchCol_Wall
0088E4CE                              		
0088E4CE                            object_FindCol_Wall:
0088E4CE 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E4D4 286D 0014                    		movea.l	lvl_collision(a5),a4
0088E4D8                            
0088E4D8                            objSearchCol_Wall:
0088E4D8 7000                       		moveq	#0,d0
0088E4DA 7800                       		moveq	#0,d4
0088E4DC 7A00                       		moveq	#0,d5
0088E4DE 382E 000C                   		move.w	obj_y(a6),d4
0088E4E2 1A2E 0007                   		move.b	obj_size+3(a6),d5
0088E4E6 E74D                        		lsl.w	#3,d5
0088E4E8 D845                        		add.w	d5,d4
0088E4EA 0444 0001                   		sub.w	#1,d4
0088E4EE 4A44                        		tst.w	d4
0088E4F0 6B00 0000                   		bmi	@no_col
0088E4F4 3A2D 0032                   		move.w	lvl_size_y(a5),d5
0088E4F8 E94D                        		lsl.w	#4,d5
0088E4FA B845                        		cmp.w	d5,d4
0088E4FC 6C00 0000                   		bge	@no_col
0088E500 E84C                        		lsr.w	#4,d4
0088E502 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
0088E506 D8C4                        		adda	d4,a4
0088E508 E18C                        		lsl.l	#8,d4
0088E50A 2004                        		move.l	d4,d0
0088E50C                             		
0088E50C                            ; ------------------------
0088E50C                            ; X check
0088E50C                            ; ------------------------
0088E50C                            
0088E50C 264C                        		movea.l	a4,a3
0088E50E 382E 0008                   		move.w	obj_x(a6),d4
0088E512 4A44                        		tst.w	d4
0088E514 6B00                        		bmi.s	@force_on
0088E516 3A2D 0030                   		move.w	lvl_size_x(a5),d5
0088E51A E94D                        		lsl.w	#4,d5
0088E51C B845                         		cmp.w	d5,d4
0088E51E 6C00                         		bge.s	@force_on
0088E520 E84C                        		lsr.w	#4,d4
0088E522 D6C4                        		adda 	d4,a3
0088E524 E94C                        		lsl.w	#4,d4
0088E526 4844                        		swap	d4
0088E528                             		
0088E528 7A00                       		moveq	#0,d5
0088E52A 382E 000C                     		move.w	obj_y(a6),d4
0088E52E 1A2E 0007                     		move.b	obj_size+3(a6),d5
0088E532 E74D                          		lsl.w	#3,d5
0088E534 D845                          		add.w	d5,d4
0088E536                               		
0088E536 0444 0001                     		sub.w	#1,d4
0088E53A 3A2D 0032                   		move.w	lvl_size_y(a5),d5
0088E53E E94D                        		lsl.w	#4,d5
0088E540 4845                        		swap	d5
0088E542 1A2E 0006                   		move.b	obj_size+2(a6),d5
0088E546 0245 00FF                    		and.w	#$FF,d5
0088E54A E24D                         		lsr.w	#1,d5
0088E54C 4A45                          		tst.w	d5
0088E54E 6700                          		beq.s	@nxt_y
0088E550 0445 0001                     		sub.w	#1,d5
0088E554                            @nxt_y:
0088E554 4845                       		swap	d5
0088E556 4A44                        		tst.w	d4
0088E558 6B00                        		bmi.s	@force_on
0088E55A B845                        		cmp.w	d5,d4
0088E55C 6C00                        		bge.s	@zero_y
0088E55E 0813 0007                   		btst	#7,(a3)
0088E562 6600                        		bne.s	@zero_y
0088E564 4A13                       		tst.b	(a3)
0088E566 6700                       		beq.s	@zero_y
0088E568 8084                         		or.l	d4,d0
0088E56A 4844                         		swap	d4
0088E56C E98C                         		lsl.l	#4,d4
0088E56E 0284 000F FF00               		and.l	#$000FFF00,d4
0088E574 8084                         		or.l	d4,d0
0088E576 1013                        		move.b	(a3),d0
0088E578 4E75                        		rts
0088E57A                            @zero_y:
0088E57A 96ED 0030                   		suba	lvl_size_x(a5),a3
0088E57E 0444 0010                   		sub.w	#$10,d4
0088E582 4845                       		swap	d5
0088E584 51CD FFCE                    		dbf	d5,@nxt_y
0088E588                            
0088E588                            @force_on:
0088E588 103C 0000                  		move.b	#0,d0
0088E58C                            @no_col:
0088E58C 4E75                       		rts
0088E58E                            
0088E58E                            ; ************************
0088E58E                            ; Find Ceiling collision
0088E58E                            ; CENTER
0088E58E                            ; 
0088E58E                            ; Input:
0088E58E                            ; a6 - Object to read
0088E58E                            ; a5 - Level buffer
0088E58E                            ; a4 - Layout data
0088E58E                            
0088E58E                            ; Output:
0088E58E                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
0088E58E                            ; 
0088E58E                            ; Uses:
0088E58E                            ; a3-a4 | d4-d5
0088E58E                            ; ************************
0088E58E                            
0088E58E                            object_FindPrz_Ceiling:
0088E58E 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E594 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088E598 6000                         		bra.s	objSearchCol_Ceiling
0088E59A                              		
0088E59A                            object_FindCol_Ceiling:
0088E59A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E5A0 286D 0014                    		movea.l	lvl_collision(a5),a4
0088E5A4                              		
0088E5A4                            objSearchCol_Ceiling:
0088E5A4 7000                       		moveq	#0,d0
0088E5A6 7800                       		moveq	#0,d4
0088E5A8 7A00                       		moveq	#0,d5
0088E5AA 382E 000C                   		move.w	obj_y(a6),d4
0088E5AE 1A2E 0006                      		move.b	obj_size+2(a6),d5
0088E5B2 E74D                           		lsl.w	#3,d5
0088E5B4 9845                           		sub.w	d5,d4			;UP SIZE
0088E5B6 4A44                        		tst.w	d4
0088E5B8 6B00 0000                   		bmi	@no_col
0088E5BC 3A2D 0032                   		move.w	lvl_size_y(a5),d5
0088E5C0 E94D                        		lsl.w	#4,d5
0088E5C2 B845                        		cmp.w	d5,d4
0088E5C4 6C00 0000                   		bge	@no_col
0088E5C8 E84C                        		lsr.w	#4,d4
0088E5CA 0244 0FFF                   		and.w	#$FFF,d4
0088E5CE 3004                        		move.w	d4,d0
0088E5D0 E188                        		lsl.l	#8,d0			;000YYY00
0088E5D2 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
0088E5D6 D8C4                        		adda	d4,a4
0088E5D8                            		
0088E5D8                            ; ------------------------
0088E5D8                            ; X check
0088E5D8                            ; ------------------------
0088E5D8                            
0088E5D8 264C                        		movea.l	a4,a3
0088E5DA 382E 0008                   		move.w	obj_x(a6),d4
0088E5DE 0444 0001                   		sub.w	#1,d4
0088E5E2 4A44                        		tst.w	d4
0088E5E4 6B00                        		bmi.s	@no_col
0088E5E6 3A2D 0030                   		move.w	lvl_size_x(a5),d5
0088E5EA E94D                        		lsl.w	#4,d5
0088E5EC B845                          		cmp.w	d5,d4
0088E5EE 6C00                          		bge.s	@no_col
0088E5F0 E84C                        		lsr.w	#4,d4
0088E5F2 D6C4                        		adda 	d4,a3
0088E5F4                            ;  		btst	#7,(a3)
0088E5F4                            ;  		bne.s	@no_col
0088E5F4                            ;  		tst.b	(a3)
0088E5F4                            ;  		beq.s	@no_col
0088E5F4 E94C                        		lsl.w	#4,d4
0088E5F6 4844                        		swap	d4
0088E5F8 8084                        		or.l	d4,d0			;XXXYYY00
0088E5FA 1013                        		move.b	(a3),d0	
0088E5FC                            @no_col:
0088E5FC 4E75                       		rts
0088E5FE                            		
0088E5FE                            ; ************************
0088E5FE                            ; Find floor collision
0088E5FE                            ; Left/Right points
0088E5FE                            ;
0088E5FE                            ; Input:
0088E5FE                            ; a6 - Object to read
0088E5FE                            ; a5 - Level buffer
0088E5FE                            ; a4 - Layout data
0088E5FE                            ; 
0088E5FE                            ; Output:
0088E5FE                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
0088E5FE                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
0088E5FE                            ; 
0088E5FE                            ; Uses:
0088E5FE                            ; a3 | d4-d5
0088E5FE                            ; ************************
0088E5FE                            
0088E5FE                            object_FindPrz_FloorSides:
0088E5FE 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E604 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088E608 6000                       		bra.s	objSearchCol_FloorSides
0088E60A                            		
0088E60A                            object_FindCol_FloorSides:
0088E60A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E610 286D 0014                    		movea.l	lvl_collision(a5),a4
0088E614                              		
0088E614                            objSearchCol_FloorSides:
0088E614 7000                       		moveq	#0,d0
0088E616 7200                       		moveq	#0,d1
0088E618                            
0088E618 7800                       		moveq	#0,d4
0088E61A 7A00                       		moveq	#0,d5
0088E61C 382E 000C                   		move.w	obj_y(a6),d4
0088E620 1A2E 0007                    		move.b	obj_size+3(a6),d5
0088E624 E74D                        		lsl.w	#3,d5
0088E626 D845                        		add.w	d5,d4
0088E628 4A44                        		tst.w	d4
0088E62A 6B00 0000                   		bmi	@no_col
0088E62E 3A2D 0032                    		move.w	lvl_size_y(a5),d5
0088E632 E94D                         		lsl.w	#4,d5
0088E634 B845                         		cmp.w	d5,d4
0088E636 6C00 0000                    		bge	@no_col
0088E63A E84C                        		lsr.w	#4,d4
0088E63C 3004                         		move.w	d4,d0
0088E63E 3204                         		move.w	d4,d1
0088E640 E188                         		lsl.l	#8,d0			; LEFT 000YYY00
0088E642 E189                         		lsl.l	#8,d1			;RIGHT 000YYY00
0088E644 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
0088E648 D8C4                        		adda	d4,a4
0088E64A                            
0088E64A                            ; ------------------------
0088E64A                            ; X check
0088E64A                            ; 
0088E64A                            ; LEFT
0088E64A                            ; ------------------------
0088E64A                            
0088E64A 7800                        		moveq	#0,d4
0088E64C 7A00                       		moveq	#0,d5
0088E64E 3A2E 0008                    		move.w	obj_x(a6),d5
0088E652 382D 0030                   		move.w	lvl_size_x(a5),d4
0088E656 E94C                        		lsl.w	#4,d4
0088E658 BA44                             		cmp.w	d4,d5
0088E65A 6D00                             		blt.s	@dontfix_l
0088E65C 0445 0001                        		sub.w	#1,d5
0088E660                            @dontfix_l:
0088E660 4A45                        		tst.w	d5
0088E662 6B00                        		bmi.s	@zero_l
0088E664                             		
0088E664 3805                        		move.w	d5,d4
0088E666 E84C                        		lsr.w	#4,d4
0088E668 264C                        		movea.l	a4,a3
0088E66A D6C4                        		adda 	d4,a3
0088E66C 4845                        		swap	d5		; d5 - XRead | Free
0088E66E 1A2E 0004                   		move.b	obj_size(a6),d5
0088E672 0245 00FF                   		and.w	#$FF,d5		; d5 - XRead | Loop
0088E676 4A45                        		tst.w	d5
0088E678 6700                        		beq.s	@zero_l
0088E67A                            @Next_col_l:
0088E67A 4845                        		swap	d5		; d5 - Loop | Xread
0088E67C                             		
0088E67C 4A13                        		tst.b	(a3)
0088E67E 6700                        		beq.s	@No_col_l
0088E680 0813 0007                   		btst	#7,(a3)
0088E684 6600                        		bne.s	@No_col_l
0088E686 3805                        		move.w	d5,d4
0088E688 0244 FFF0                   		and.w	#$FFF0,d4
0088E68C 4844                        		swap	d4
0088E68E 8284                        		or.l	d4,d1		; LEFT XXXYYY00
0088E690 1213                       		move.b	(a3),d1
0088E692 6000                        		bra.s	@zero_l
0088E694                            @No_col_l:
0088E694                            
0088E694 0445 0008                   		sub.w	#8,d5
0088E698 6A00                          		bpl.s	@Fine_l
0088E69A 4245                          		clr.w	d5
0088E69C                            @Fine_l:
0088E69C 3805                        		move.w	d5,d4
0088E69E E84C                        		lsr.w	#4,d4
0088E6A0 264C                        		movea.l	a4,a3
0088E6A2 D6C4                        		adda 	d4,a3
0088E6A4 4845                        		swap	d5		; d5 - XRead | Loop
0088E6A6 51CD FFD2                   		dbf	d5,@Next_col_l
0088E6AA                            @zero_l:
0088E6AA                            		
0088E6AA                            ; ------------------------
0088E6AA                            ; X check
0088E6AA                            ; 
0088E6AA                            ; RIGHT
0088E6AA                            ; ------------------------
0088E6AA                            
0088E6AA 7800                        		moveq	#0,d4
0088E6AC 7A00                        		moveq	#0,d5
0088E6AE 3A2E 0008                   		move.w	obj_x(a6),d5
0088E6B2 0445 0001                   		sub.w	#1,d5
0088E6B6 4A45                        		tst.w	d5
0088E6B8 6B00                        		bmi.s	@no_col
0088E6BA 382D 0030                   		move.w	lvl_size_x(a5),d4
0088E6BE E94C                        		lsl.w	#4,d4
0088E6C0 BA44                          		cmp.w	d4,d5
0088E6C2 6C00                           		bge.s	@no_col
0088E6C4                            
0088E6C4 3805                        		move.w	d5,d4
0088E6C6 E84C                        		lsr.w	#4,d4
0088E6C8 264C                        		movea.l	a4,a3
0088E6CA D6C4                        		adda 	d4,a3
0088E6CC 4845                        		swap	d5		;d5 - XRead | Free
0088E6CE 1A2E 0005                   		move.b	obj_size+1(a6),d5
0088E6D2 0245 00FF                   		and.w	#$FF,d5		;d5 - XRead | Loop
0088E6D6 4A45                        		tst.w	d5
0088E6D8 6700                        		beq.s	@no_col
0088E6DA                             		
0088E6DA                            @Next_col_r:
0088E6DA 4845                        		swap	d5		;d5 - Loop | Xread
0088E6DC 4A13                        		tst.b	(a3)
0088E6DE 6700                        		beq.s	@No_col_r
0088E6E0 0813 0007                   		btst	#7,(a3)
0088E6E4 6600                        		bne.s	@No_col_r
0088E6E6 382D 0030                   		move.w	lvl_size_x(a5),d4
0088E6EA E94C                        		lsl.w	#4,d4
0088E6EC BA44                          		cmp.w	d4,d5
0088E6EE 6C00                           		bge.s	@no_col
0088E6F0                                		
0088E6F0 3805                        		move.w	d5,d4
0088E6F2 0244 FFF0                   		and.w	#$FFF0,d4
0088E6F6 4844                        		swap	d4
0088E6F8 8084                        		or.l	d4,d0		; RIGHT XXXYYY00
0088E6FA 1013                       		move.b	(a3),d0
0088E6FC 4E75                        		rts
0088E6FE                             		
0088E6FE                            @No_col_r:
0088E6FE 0645 0008                   		add.w	#8,d5
0088E702 3805                        		move.w	d5,d4
0088E704 E84C                        		lsr.w	#4,d4
0088E706 264C                        		movea.l	a4,a3
0088E708 D6C4                        		adda 	d4,a3
0088E70A 4845                        		swap	d5		;d5 - XRead | Loop
0088E70C 51CD FFCC                   		dbf	d5,@Next_col_r
0088E710                             		
0088E710                            ; ------------------------
0088E710                            
0088E710                            @no_col:
0088E710 4E75                       		rts
0088E712                            
0088E712                            ; ************************
0088E712                            ; Find side collision
0088E712                            ; LEFT/RIGHT
0088E712                            ;
0088E712                            ; Input:
0088E712                            ; (Nothing)
0088E712                            ; 
0088E712                            ; Output:
0088E712                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
0088E712                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
0088E712                            ; 
0088E712                            ; Uses:
0088E712                            ; a3-a4 | d4-d5
0088E712                            ; ************************
0088E712                            
0088E712                            object_FindPrz_WallSides:
0088E712 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E718 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088E71C 6000                         		bra.s	objSearchCol_WallSides
0088E71E                              		
0088E71E                            object_FindCol_WallSides:
0088E71E 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E724 286D 0014                    		movea.l	lvl_collision(a5),a4
0088E728                              		
0088E728                            objSearchCol_WallSides:
0088E728 7000                        		moveq	#0,d0
0088E72A 7200                        		moveq	#0,d1
0088E72C 7800                        		moveq	#0,d4
0088E72E 7A00                        		moveq	#0,d5
0088E730                            
0088E730                            ; ------------------------
0088E730                            ; Left
0088E730                            ; ------------------------
0088E730                            
0088E730 4A2E 0004                  		tst.b	obj_size(a6)
0088E734 6700 0000                  		beq	@ignore_l
0088E738                            			
0088E738                            ; --------------
0088E738                            ; LEFT DOWN
0088E738                            ; --------------
0088E738                            
0088E738 3A2E 000C                    		move.w	obj_y(a6),d5
0088E73C 4A45                         		tst.w	d5
0088E73E 6B00 0000                  		bmi	@ignore_l
0088E742 382D 0032                  		move.w	lvl_size_y(a5),d4
0088E746 E94C                       		lsl.w	#4,d4
0088E748 BA44                       		cmp.w	d4,d5
0088E74A 6C00 0000                  		bge	@ignore_l
0088E74E 4845                         		swap	d5
0088E750 4245                         		clr.w	d5
0088E752 1A2E 0007                    		move.b	obj_size+3(a6),d5	
0088E756 4A45                         		tst.w	d5
0088E758 6700 0000                    		beq	@ignore_l
0088E75C 0445 0001                    		sub.w	#1,d5
0088E760                            @next_passld:
0088E760 4845                       		swap	d5
0088E762 4A45                       		tst.w	d5
0088E764 6B00 0000                  		bmi	@ignore_l
0088E768 3805                       		move.w	d5,d4
0088E76A 4844                       		swap	d4
0088E76C 382E 0008                  		move.w	obj_x(a6),d4
0088E770 0444 0001                  		sub.w	#1,d4
0088E774 4245                       		clr.w	d5
0088E776 1A2E 0004                  		move.b	obj_size(a6),d5
0088E77A E74D                       		lsl.w	#3,d5
0088E77C 9845                       		sub.w	d5,d4			; left X size
0088E77E 4A44                       		tst.w	d4
0088E780 6B00 0000                  		bmi	@forceset_l
0088E784 E84C                       		lsr.w	#4,d4
0088E786 264C                        		movea.l	a4,a3
0088E788 D6C4                       		adda	d4,a3
0088E78A 4844                       		swap	d4
0088E78C 3A04                       		move.w	d4,d5
0088E78E E84C                         		lsr.w	#4,d4
0088E790 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0088E794 D6C4                         		adda	d4,a3
0088E796                              		
0088E796 0813 0007                    		btst	#7,(a3)
0088E79A 6600                         		bne.s	@next_ld
0088E79C 4A13                         		tst.b	(a3)
0088E79E 6600 0000                    		bne	@found_l
0088E7A2                            @next_ld:
0088E7A2 0645 0008                  		add.w	#8,d5
0088E7A6 382D 0032                  		move.w	lvl_size_y(a5),d4
0088E7AA E94C                       		lsl.w	#4,d4
0088E7AC BA44                       		cmp.w	d4,d5
0088E7AE 6C00                       		bge.s	@gone_ld
0088E7B0                            		
0088E7B0 4845                       		swap	d5
0088E7B2 51CD FFAC                  		dbf	d5,@next_passld
0088E7B6                            @gone_ld:
0088E7B6                            
0088E7B6                            ; --------------
0088E7B6                            ; LEFT UP
0088E7B6                            ; --------------
0088E7B6                            
0088E7B6 3A2E 000C                    		move.w	obj_y(a6),d5
0088E7BA 4A45                         		tst.w	d5
0088E7BC 6B00 0000                  		bmi	@ignore_l
0088E7C0 382D 0032                  		move.w	lvl_size_y(a5),d4
0088E7C4 E94C                       		lsl.w	#4,d4
0088E7C6 BA44                       		cmp.w	d4,d5
0088E7C8 6C00 0000                  		bge	@ignore_l
0088E7CC 4845                         		swap	d5
0088E7CE 4245                         		clr.w	d5
0088E7D0 1A2E 0006                    		move.b	obj_size+2(a6),d5	
0088E7D4 4A45                         		tst.w	d5
0088E7D6 6700                         		beq.s	@ignore_l
0088E7D8 0445 0001                    		sub.w	#1,d5
0088E7DC                            @next_passlu:
0088E7DC 4845                       		swap	d5
0088E7DE 4A45                       		tst.w	d5
0088E7E0 6B00                       		bmi.s	@ignore_l
0088E7E2 3805                       		move.w	d5,d4
0088E7E4 4844                       		swap	d4
0088E7E6 382E 0008                  		move.w	obj_x(a6),d4
0088E7EA 0444 0001                  		sub.w	#1,d4
0088E7EE 4245                       		clr.w	d5
0088E7F0 1A2E 0004                  		move.b	obj_size(a6),d5
0088E7F4 E74D                       		lsl.w	#3,d5
0088E7F6 9845                       		sub.w	d5,d4			; left X size
0088E7F8 4A44                       		tst.w	d4
0088E7FA 6B00                       		bmi.s	@forceset_l
0088E7FC E84C                       		lsr.w	#4,d4
0088E7FE 264C                        		movea.l	a4,a3
0088E800 D6C4                       		adda	d4,a3
0088E802 4844                       		swap	d4
0088E804 3A04                       		move.w	d4,d5
0088E806 E84C                         		lsr.w	#4,d4
0088E808 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0088E80C D6C4                         		adda	d4,a3
0088E80E                              		
0088E80E 0813 0007                    		btst	#7,(a3)
0088E812 6600                         		bne.s	@next_lu
0088E814 4A13                         		tst.b	(a3)
0088E816 6600                         		bne.s	@found_l	
0088E818                            @next_lu:
0088E818 0445 0008                  		sub.w	#8,d5
0088E81C 4A45                       		tst.w	d5
0088E81E 6B00                       		bmi.s	@ignore_l
0088E820 4845                       		swap	d5
0088E822 51CD FFB8                  		dbf	d5,@next_passlu
0088E826                            		
0088E826 6000                       		bra.s	@ignore_l
0088E828                            		
0088E828                            ; --------------
0088E828                            ; Found left
0088E828                            ; --------------
0088E828                            
0088E828                            @forceset_l:
0088E828 123C 0001                  		move.b	#1,d1
0088E82C 6000                       		bra.s	@ignore_l
0088E82E                            		
0088E82E                            @found_l:
0088E82E 0285 0000 FFF0             		and.l	#$FFF0,d5
0088E834 E98D                       		lsl.l	#4,d5
0088E836 8285                       		or.l	d5,d1
0088E838 7A00                        		moveq	#0,d5
0088E83A 382E 0008                  		move.w	obj_x(a6),d4
0088E83E 0444 0001                  		sub.w	#1,d4
0088E842 1A2E 0004                  		move.b	obj_size(a6),d5
0088E846 E74D                       		lsl.w	#3,d5
0088E848 9845                       		sub.w	d5,d4
0088E84A 0284 0000 FFF0             		and.l	#$FFF0,d4
0088E850 4844                       		swap	d4
0088E852 8284                       		or.l	d4,d1
0088E854 1213                        		move.b	(a3),d1
0088E856                            @ignore_l:
0088E856                            
0088E856                            ; ------------------------
0088E856                            ; Right
0088E856                            ; ------------------------
0088E856                             
0088E856 4A2E 0005                  		tst.b	obj_size+1(a6)
0088E85A 6700 0000                  		beq	@ignore_r
0088E85E                            		
0088E85E                            ; --------------
0088E85E                            ; RIGHT DOWN
0088E85E                            ; --------------
0088E85E                            
0088E85E 7A00                       		moveq	#0,d5
0088E860 3A2E 000C                    		move.w	obj_y(a6),d5
0088E864 4A45                         		tst.w	d5
0088E866 6B00 0000                  		bmi	@ignore_r
0088E86A 382D 0032                  		move.w	lvl_size_y(a5),d4
0088E86E E94C                       		lsl.w	#4,d4
0088E870 BA44                       		cmp.w	d4,d5
0088E872 6C00 0000                  		bge	@ignore_r
0088E876 4845                         		swap	d5
0088E878 4245                         		clr.w	d5
0088E87A 1A2E 0007                    		move.b	obj_size+3(a6),d5	
0088E87E 4A45                         		tst.w	d5
0088E880 6700 0000                    		beq	@ignore_r
0088E884 0445 0001                    		sub.w	#1,d5
0088E888                            @next_passrd:
0088E888 4845                       		swap	d5
0088E88A 4A45                       		tst.w	d5
0088E88C 6B00 0000                  		bmi	@ignore_r
0088E890                            		
0088E890 3805                       		move.w	d5,d4
0088E892 4844                       		swap	d4
0088E894 382E 0008                  		move.w	obj_x(a6),d4
0088E898 4245                       		clr.w	d5
0088E89A 1A2E 0005                  		move.b	obj_size+1(a6),d5
0088E89E E74D                       		lsl.w	#3,d5
0088E8A0 D845                       		add.w	d5,d4			; left X size
0088E8A2 3A2D 0030                  		move.w	lvl_size_x(a5),d5
0088E8A6 E94D                       		lsl.w	#4,d5
0088E8A8 B845                       		cmp.w	d5,d4
0088E8AA 6C00 0000                  		bge	@forceset_r
0088E8AE                            		
0088E8AE E84C                       		lsr.w	#4,d4
0088E8B0 264C                        		movea.l	a4,a3
0088E8B2 D6C4                       		adda	d4,a3
0088E8B4 4844                       		swap	d4
0088E8B6 3A04                       		move.w	d4,d5
0088E8B8 E84C                         		lsr.w	#4,d4
0088E8BA C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0088E8BE D6C4                         		adda	d4,a3
0088E8C0                              		
0088E8C0 0813 0007                    		btst	#7,(a3)
0088E8C4 6600                         		bne.s	@next_rd
0088E8C6 4A13                         		tst.b	(a3)
0088E8C8 6600 0000                    		bne	@found_r
0088E8CC                            @next_rd:
0088E8CC 0645 0008                  		add.w	#8,d5
0088E8D0 382D 0032                  		move.w	lvl_size_y(a5),d4
0088E8D4 E94C                       		lsl.w	#4,d4
0088E8D6 BA44                       		cmp.w	d4,d5
0088E8D8 6C00                       		bge.s	@gone_rd
0088E8DA 4845                       		swap	d5
0088E8DC 51CD FFAA                  		dbf	d5,@next_passrd
0088E8E0                            @gone_rd:
0088E8E0                            
0088E8E0                            ; --------------
0088E8E0                            ; RIGHT UP
0088E8E0                            ; --------------
0088E8E0                            
0088E8E0 7A00                       		moveq	#0,d5
0088E8E2 3A2E 000C                    		move.w	obj_y(a6),d5
0088E8E6 4A45                         		tst.w	d5
0088E8E8 6B00 0000                  		bmi	@ignore_r
0088E8EC 382D 0032                  		move.w	lvl_size_y(a5),d4
0088E8F0 E94C                       		lsl.w	#4,d4
0088E8F2 BA44                       		cmp.w	d4,d5
0088E8F4 6C00 0000                  		bge	@ignore_r
0088E8F8 4845                         		swap	d5
0088E8FA 4245                         		clr.w	d5
0088E8FC 1A2E 0006                    		move.b	obj_size+2(a6),d5	
0088E900 4A45                         		tst.w	d5
0088E902 6700                         		beq.s	@ignore_r
0088E904 0445 0001                    		sub.w	#1,d5
0088E908                            @next_passru:
0088E908 4845                       		swap	d5
0088E90A 4A45                       		tst.w	d5
0088E90C 6B00                       		bmi.s	@ignore_r
0088E90E                            		
0088E90E 3805                       		move.w	d5,d4
0088E910 4844                       		swap	d4
0088E912 382E 0008                  		move.w	obj_x(a6),d4
0088E916 4245                       		clr.w	d5
0088E918 1A2E 0005                  		move.b	obj_size+1(a6),d5
0088E91C E74D                       		lsl.w	#3,d5
0088E91E D845                       		add.w	d5,d4			; left X size
0088E920 3A2D 0030                  		move.w	lvl_size_x(a5),d5
0088E924 E94D                       		lsl.w	#4,d5
0088E926 B845                       		cmp.w	d5,d4
0088E928 6C00                       		bge.s	@forceset_r
0088E92A                            		
0088E92A E84C                       		lsr.w	#4,d4
0088E92C 264C                        		movea.l	a4,a3
0088E92E D6C4                       		adda	d4,a3
0088E930 4844                       		swap	d4
0088E932                            		
0088E932 3A04                       		move.w	d4,d5
0088E934 E84C                         		lsr.w	#4,d4
0088E936 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0088E93A D6C4                         		adda	d4,a3
0088E93C                              		
0088E93C 0813 0007                    		btst	#7,(a3)
0088E940 6600                         		bne.s	@next_ru
0088E942 4A13                         		tst.b	(a3)
0088E944 6600                         		bne.s	@found_r
0088E946                            @next_ru:
0088E946 0445 0008                  		sub.w	#8,d5
0088E94A 4A45                       		tst.w	d5
0088E94C 6B00                       		bmi.s	@ignore_r
0088E94E                            		
0088E94E 4845                       		swap	d5
0088E950 51CD FFB6                  		dbf	d5,@next_passru
0088E954                            
0088E954 6000                       		bra.s	@ignore_r
0088E956                            
0088E956                            ; --------------
0088E956                            ; Found right
0088E956                            ; --------------
0088E956                            
0088E956                            @forceset_r:
0088E956 103C 0001                  		move.b	#1,d0
0088E95A 6000                       		bra.s	@ignore_r
0088E95C                            		
0088E95C                            @found_r:
0088E95C 0285 0000 FFF0             		and.l	#$FFF0,d5
0088E962 E98D                       		lsl.l	#4,d5
0088E964 8085                       		or.l	d5,d0
0088E966 7A00                        		moveq	#0,d5
0088E968 382E 0008                  		move.w	obj_x(a6),d4
0088E96C 1A2E 0005                  		move.b	obj_size+1(a6),d5
0088E970 E74D                       		lsl.w	#3,d5
0088E972 D845                       		add.w	d5,d4
0088E974 0284 0000 FFF0             		and.l	#$FFF0,d4
0088E97A 4844                       		swap	d4
0088E97C 8084                       		or.l	d4,d0
0088E97E 1013                        		move.b	(a3),d0	
0088E980                            @ignore_r:
0088E980                            		
0088E980                            ; ------------------------
0088E980                            ; Finish checking
0088E980                            ; ------------------------
0088E980                            
0088E980 4E75                       		rts
0088E982                            		
0088E982                            ; ************************
0088E982                            ; Find ceiling collision
0088E982                            ; LEFT/RIGHT
0088E982                            ; 
0088E982                            ; Input:
0088E982                            ; (Nothing)
0088E982                            ; 
0088E982                            ; Output:
0088E982                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
0088E982                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
0088E982                            ; 
0088E982                            ; Uses:
0088E982                            ; a3-a4 | d4-d5
0088E982                            ; ************************
0088E982                            
0088E982                            object_FindPrz_CeilingSides:
0088E982 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E988 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088E98C 6000                         		bra.s	objSearchCol_CeilingSides
0088E98E                              		
0088E98E                            object_FindCol_CeilingSides:
0088E98E 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E994 286D 0014                    		movea.l	lvl_collision(a5),a4
0088E998                              		
0088E998                            objSearchCol_CeilingSides:
0088E998 7000                       		moveq	#0,d0
0088E99A 7200                       		moveq	#0,d1
0088E99C 7800                        		moveq	#0,d4
0088E99E 3A2E 000C                    		move.w	obj_y(a6),d5
0088E9A2                            ;   		add.w	#4,d5
0088E9A2 182E 0006                     		move.b	obj_size+2(a6),d4
0088E9A6 E74C                          		lsl.w	#3,d4
0088E9A8                            ;     		sub.w	#1,d4
0088E9A8 9A44                          		sub.w	d4,d5			;UP SIZE
0088E9AA 4A45                         		tst.w	d5
0088E9AC 6B00 0000                    		bmi	@no_col
0088E9B0 382D 0032                   		move.w	lvl_size_y(a5),d4
0088E9B4 E94C                        		lsl.w	#4,d4
0088E9B6 BA44                        		cmp.w	d4,d5
0088E9B8 6C00 0000                   		bge	@no_col
0088E9BC                             		
0088E9BC E84D                         		lsr.w	#4,d5
0088E9BE 3005                         		move.w	d5,d0
0088E9C0 3205                         		move.w	d5,d1
0088E9C2 E188                         		lsl.l	#8,d0			; LEFT 000YYY00
0088E9C4 E189                         		lsl.l	#8,d1			;RIGHT 000YYY00
0088E9C6 CAED 0030                   		mulu.w	lvl_size_x(a5),d5
0088E9CA D8C5                         		adda	d5,a4
0088E9CC                            
0088E9CC                            ; ------------------------
0088E9CC                            ; X check
0088E9CC                            ; 
0088E9CC                            ; LEFT
0088E9CC                            ; ------------------------
0088E9CC                            
0088E9CC 7800                        		moveq	#0,d4
0088E9CE 7A00                       		moveq	#0,d5
0088E9D0 3A2E 0008                    		move.w	obj_x(a6),d5
0088E9D4 382D 0030                   		move.w	lvl_size_x(a5),d4
0088E9D8 E94C                        		lsl.w	#4,d4
0088E9DA BA44                             		cmp.w	d4,d5
0088E9DC 6D00                             		blt.s	@dontfix_l
0088E9DE 0445 0001                        		sub.w	#1,d5
0088E9E2                            @dontfix_l:
0088E9E2 4A45                        		tst.w	d5
0088E9E4 6B00                        		bmi.s	@zero_l
0088E9E6 3805                        		move.w	d5,d4
0088E9E8 E84C                        		lsr.w	#4,d4
0088E9EA 264C                        		movea.l	a4,a3
0088E9EC D6C4                        		adda 	d4,a3
0088E9EE                             		
0088E9EE 4845                        		swap	d5		; d5 - XRead | Free
0088E9F0 1A2E 0004                   		move.b	obj_size(a6),d5
0088E9F4 0245 00FF                   		and.w	#$FF,d5		; d5 - XRead | Loop
0088E9F8 4A45                        		tst.w	d5
0088E9FA 6700                        		beq.s	@zero_l
0088E9FC                            @Next_col_l:
0088E9FC 4845                        		swap	d5		; d5 - Loop | Xread
0088E9FE                             		
0088E9FE 4A13                        		tst.b	(a3)
0088EA00 6700                        		beq.s	@No_col_l
0088EA02 3805                        		move.w	d5,d4
0088EA04 0244 FFF0                   		and.w	#$FFF0,d4
0088EA08 4844                        		swap	d4
0088EA0A 8284                        		or.l	d4,d1		; LEFT XXXYYY00
0088EA0C 1213                       		move.b	(a3),d1
0088EA0E 6000                        		bra.s	@zero_l
0088EA10                            @No_col_l:
0088EA10                            
0088EA10 0445 0008                   		sub.w	#8,d5
0088EA14 6A00                          		bpl.s	@Fine_l
0088EA16 4245                          		clr.w	d5
0088EA18                            @Fine_l:
0088EA18 3805                        		move.w	d5,d4
0088EA1A E84C                        		lsr.w	#4,d4
0088EA1C 264C                        		movea.l	a4,a3
0088EA1E D6C4                        		adda 	d4,a3
0088EA20 4845                        		swap	d5		; d5 - XRead | Loop
0088EA22 51CD FFD8                   		dbf	d5,@Next_col_l
0088EA26                            @zero_l:
0088EA26                            		
0088EA26                            ; ------------------------
0088EA26                            ; X check
0088EA26                            ; 
0088EA26                            ; RIGHT
0088EA26                            ; ------------------------
0088EA26                            
0088EA26 7800                        		moveq	#0,d4
0088EA28 7A00                        		moveq	#0,d5
0088EA2A 3A2E 0008                   		move.w	obj_x(a6),d5
0088EA2E 0445 0001                   		sub.w	#1,d5
0088EA32 4A45                        		tst.w	d5
0088EA34 6B00                        		bmi.s	@no_col
0088EA36 382D 0030                   		move.w	lvl_size_x(a5),d4
0088EA3A E94C                        		lsl.w	#4,d4
0088EA3C BA44                          		cmp.w	d4,d5
0088EA3E 6C00                           		bge.s	@no_col
0088EA40                            
0088EA40 3805                        		move.w	d5,d4
0088EA42 E84C                        		lsr.w	#4,d4
0088EA44 264C                        		movea.l	a4,a3
0088EA46 D6C4                        		adda 	d4,a3
0088EA48                             		
0088EA48 4845                        		swap	d5		;d5 - XRead | Free
0088EA4A 1A2E 0005                   		move.b	obj_size+1(a6),d5
0088EA4E 0245 00FF                   		and.w	#$FF,d5		;d5 - XRead | Loop
0088EA52 4A45                        		tst.w	d5
0088EA54 6700                        		beq.s	@no_col
0088EA56                             		
0088EA56                            @Next_col_r:
0088EA56 4845                        		swap	d5		;d5 - Loop | Xread
0088EA58 4A13                        		tst.b	(a3)
0088EA5A 6700                        		beq.s	@No_col_r
0088EA5C 382D 0030                   		move.w	lvl_size_x(a5),d4
0088EA60 E94C                        		lsl.w	#4,d4
0088EA62 BA44                          		cmp.w	d4,d5
0088EA64 6C00                           		bge.s	@no_col
0088EA66                                		
0088EA66 3805                        		move.w	d5,d4
0088EA68 0244 FFF0                   		and.w	#$FFF0,d4
0088EA6C 4844                        		swap	d4
0088EA6E 8084                        		or.l	d4,d0		; RIGHT XXXYYY00
0088EA70 1013                       		move.b	(a3),d0
0088EA72 4E75                        		rts
0088EA74                             		
0088EA74                            @No_col_r:
0088EA74 0645 0008                   		add.w	#8,d5
0088EA78 3805                        		move.w	d5,d4
0088EA7A E84C                        		lsr.w	#4,d4
0088EA7C 264C                        		movea.l	a4,a3
0088EA7E D6C4                        		adda 	d4,a3
0088EA80 4845                        		swap	d5		;d5 - XRead | Loop
0088EA82 51CD FFD2                   		dbf	d5,@Next_col_r
0088EA86                             		
0088EA86                            ; ------------------------
0088EA86                            
0088EA86                            @no_col:
0088EA86 4E75                       		rts
0088EA88                             	
0088EA88                            ; ************************
0088EA88                            ; Find Center collision
0088EA88                            ;
0088EA88                            ; Input:
0088EA88                            ; a6 - Object
0088EA88                            ; a5 - RAM_LvlPlanes
0088EA88                            ; a4 - Collision data
0088EA88                            ; 
0088EA88                            ; Output:
0088EA88                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
0088EA88                            ; 
0088EA88                            ; Uses:
0088EA88                            ; a3 | d4-d5
0088EA88                            ; ************************
0088EA88                            
0088EA88                            ; TODO: no agarra los X/Y
0088EA88                            
0088EA88                            object_FindPrz_Center:
0088EA88 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EA8E 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088EA92 6000                         		bra.s	objSearchCol_Center
0088EA94                              		
0088EA94                            object_FindCol_Center:
0088EA94 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EA9A 286D 0014                    		movea.l	lvl_collision(a5),a4
0088EA9E                            
0088EA9E                            objSearchCol_Center:
0088EA9E 7000                       		moveq	#0,d0
0088EAA0 7800                       		moveq	#0,d4
0088EAA2 7A00                       		moveq	#0,d5
0088EAA4 382E 000C                   		move.w	obj_y(a6),d4
0088EAA8 4A44                        		tst.w	d4
0088EAAA 6B00 0000                   		bmi	@no_col
0088EAAE 3A2D 0032                   		move.w	lvl_size_y(a5),d5
0088EAB2 E94D                        		lsl.w	#4,d5
0088EAB4 B845                        		cmp.w	d5,d4
0088EAB6 6C00 0000                   		bge	@no_col
0088EABA E84C                         		lsr.w	#4,d4
0088EABC C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0088EAC0 D8C4                         		adda	d4,a4
0088EAC2 0284 0000 0FFF               		and.l	#$FFF,d4
0088EAC8 E18C                         		lsl.l	#8,d4
0088EACA 8084                          		or.l	d4,d0
0088EACC                            
0088EACC                            ; ------------------------
0088EACC                            		
0088EACC 264C                         		movea.l	a4,a3
0088EACE 382E 0008                   		move.w	obj_x(a6),d4
0088EAD2 4A44                        		tst.w	d4
0088EAD4 6B00                        		bmi.s	@force_on
0088EAD6 3A2D 0030                   		move.w	lvl_size_x(a5),d5
0088EADA E94D                         		lsl.w	#4,d5
0088EADC B845                         		cmp.w	d5,d4
0088EADE 6C00                         		bge.s	@force_on
0088EAE0 3A04                         		move.w	d4,d5
0088EAE2 4845                        		swap	d5
0088EAE4 8085                        		or.l	d5,d0			; XXXYYY00
0088EAE6 E84C                        		lsr.w	#4,d4
0088EAE8 D6C4                        		adda 	d4,a3
0088EAEA                              		
0088EAEA 4A13                       		tst.b	(a3)
0088EAEC 6700                       		beq.s	@no_col		
0088EAEE 1013                       		move.b	(a3),d0
0088EAF0 4E75                       		rts
0088EAF2                            @force_on:
0088EAF2 7000                       		moveq	#0,d0
0088EAF4                            @no_col:
0088EAF4 4E75                       		rts
0088EAF6                            		
0088EAF6                            ; ************************
0088EAF6                            ; Sets a object in the floor
0088EAF6                            ; DOWN/UP
0088EAF6                            ; CENTER
0088EAF6                            ; 
0088EAF6                            ; Input:
0088EAF6                            ; d0 - Floor ID
0088EAF6                            ; (Object's current Ypos)
0088EAF6                            ; 
0088EAF6                            ; Output:
0088EAF6                            ; d7 | LONG - Y speed result
0088EAF6                            ; 
0088EAF6                            ; Uses:
0088EAF6                            ; a3-a4 | d3-d4
0088EAF6                            ; ************************
0088EAF6                            
0088EAF6                            object_SetCol_Floor:
0088EAF6 0800 0006                  		btst	#6,d0
0088EAFA 6600 0000                  		bne	@check_special
0088EAFE 0C00 0001                  		cmp.b	#1,d0
0088EB02 6700 0000                  		beq	@floorsolid
0088EB06 4A87                          		tst.l	d7
0088EB08 6B00                          		bmi.s	@NoCol
0088EB0A                               		
0088EB0A 222E 000C                     		move.l	obj_y(a6),d1
0088EB0E 2601                          		move.l	d1,d3
0088EB10 47F9 0088 DDCA               		lea	(col_SlopeData),a3
0088EB16 0240 003F                    		and.w	#$3F,d0
0088EB1A 3200                         		move.w	d0,d1
0088EB1C E949                         		lsl.w	#4,d1
0088EB1E D6C1                         		adda	d1,a3
0088EB20 202E 0008                   		move.l	obj_x(a6),d0
0088EB24 4840                        		swap	d0
0088EB26 0240 000F                   		and.w	#$F,d0
0088EB2A 1033 0000                   		move.b	(a3,d0.w),d0
0088EB2E 0280 0000 000F                 		and.l	#$F,d0
0088EB34 0281 FFF0 0000                 		and.l	#$FFF00000,d1
0088EB3A 4840                         		swap	d0
0088EB3C D280                        		add.l	d0,d1
0088EB3E                             		
0088EB3E                            ; 		btst	#bitobj_air,obj_status(a6)
0088EB3E                            ; 		beq.s	@dontchk
0088EB3E D687                         		add.l	d7,d3
0088EB40 B681                         		cmp.l	d1,d3
0088EB42 6D00                         		blt.s	@NoCol
0088EB44                            @dontchk:
0088EB44 2D41 000C                    		move.l	d1,obj_y(a6)	; TODO: REPARAME
0088EB48                              		
0088EB48 08AE 0002 001E                		bclr	#bitobj_air,obj_status(a6)
0088EB4E 4287                        		clr.l	d7
0088EB50 4A86                            		tst.l	d6
0088EB52 6700                            		beq.s	@NoCol
0088EB54 2E3C 0001 0000                 		move.l	#$10000,d7
0088EB5A                            @NoCol:
0088EB5A 4E75                       		rts
0088EB5C                            
0088EB5C                            @floorsolid:
0088EB5C 08AE 0002 001E             		bclr	#bitobj_air,obj_status(a6)	
0088EB62 02AE FFF8 0000 000C        		and.l	#$FFF80000,obj_y(a6)		; TODO: REPARAME
0088EB6A 4287                       		clr.l	d7
0088EB6C 4E75                       		rts
0088EB6E                            
0088EB6E                            ; ---------------------
0088EB6E                            ; Check $80+ collision
0088EB6E                            ; Floor
0088EB6E                            ; ---------------------
0088EB6E                            
0088EB6E                            @check_special:
0088EB6E 4E75                       		rts
0088EB70                            		
0088EB70                            ; ************************
0088EB70                            ; Sets collision on the object
0088EB70                            ; Ceiling
0088EB70                            ; 
0088EB70                            ; Input:
0088EB70                            ; d0 - Floor ID
0088EB70                            ; 
0088EB70                            ; Output:
0088EB70                            ; d7 | LONG - Y speed result
0088EB70                            ; 
0088EB70                            ; Uses:
0088EB70                            ; a3-a4 | d3-d4
0088EB70                            ; ************************
0088EB70                            
0088EB70                            object_SetCol_Ceiling:
0088EB70 0800 0006                  		btst	#6,d0
0088EB74 6600 0000                  		bne	@floorsolid
0088EB78 0C00 0001                  		cmp.b	#1,d0
0088EB7C 6700 0000                  		beq	@floorsolid
0088EB80                            ;    		tst.l	d7
0088EB80                            ;    		bpl.s	@NoCol
0088EB80                               		
0088EB80                            ;    		move.l	obj_y(a6),d1
0088EB80                            ;    		move.l	d1,d3
0088EB80                            ;   		lea	(col_SlopeData),a3
0088EB80                            ;   		and.w	#$3F,d0
0088EB80                            ;   		move.w	d0,d1
0088EB80                            ;   		lsl.w	#4,d1
0088EB80                            ;   		adda	d1,a3
0088EB80                            ;  		move.l	obj_x(a6),d0
0088EB80                            ;  		swap	d0
0088EB80                            ;  		and.w	#$F,d0
0088EB80                            ;  		move.b	(a3,d0.w),d0
0088EB80                            ;     		and.l	#$F,d0
0088EB80                            ;     		and.l	#$FFF00000,d1
0088EB80                            ;   		swap	d0
0088EB80                            ;  		add.l	d0,d1
0088EB80                            ;  		
0088EB80                            ; ; 		btst	#bitobj_air,obj_status(a6)
0088EB80                            ; ; 		beq.s	@dontchk
0088EB80                            ;   		add.l	d7,d3
0088EB80                            ;   		cmp.l	d1,d3
0088EB80                            ;   		blt.s	@NoCol
0088EB80                            ; @dontchk:
0088EB80                            ;   		move.l	d1,obj_y(a6)	; TODO: REPARAME
0088EB80                            ;   		
0088EB80                            ;    		bclr	#bitobj_air,obj_status(a6)
0088EB80                            ;  		clr.l	d7
0088EB80                            ;      		tst.l	d6
0088EB80                            ;      		beq.s	@NoCol
0088EB80                            ;     		move.l	#$10000,d7
0088EB80                            ; @NoCol:
0088EB80                            ; 		rts
0088EB80                            ; 
0088EB80                            @floorsolid:
0088EB80 4287                       		clr.l	d7
0088EB82 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
0088EB88 02AE FFF8 0000 000C        		and.l	#$FFF80000,obj_y(a6)
0088EB90 7800                       		moveq	#0,d4
0088EB92 182E 0007                  		move.b	obj_size+3(a6),d4
0088EB96 E74C                       		lsl.w	#3,d4
0088EB98 D96E 000C                  		add.w	d4,obj_y(a6)
0088EB9C                            @NoCol:
0088EB9C 4E75                       		rts
0088EB9E                            		
0088EB9E                            ; ************************
0088EB9E                            ; Sets a object in the wall
0088EB9E                            ; LEFT/RIGHT
0088EB9E                            ; CENTER
0088EB9E                            ; 
0088EB9E                            ; Input:
0088EB9E                            ; d0 - Floor ID
0088EB9E                            ; (Object's current Ypos)
0088EB9E                            ; 
0088EB9E                            ; Output:
0088EB9E                            ; d7 | LONG - Y speed result
0088EB9E                            ; 
0088EB9E                            ; Uses:
0088EB9E                            ; a3-a4 | d3-d4
0088EB9E                            ; ************************
0088EB9E                            
0088EB9E                            ; TODO: para que mierdas era esto
0088EB9E                            
0088EB9E                            object_SetCol_Wall:
0088EB9E                            ; 		move.w	obj_y(a6),d1		;TODO: REPARAME
0088EB9E                            ; 		sub.w	#1,d1
0088EB9E                            ; 		move.w	d1,d3
0088EB9E                            ; 		and.w	#$FFF0,d1 		
0088EB9E                            ;      		lea	(col_SlopeData),a3
0088EB9E                            ;       		and.w	#$FF,d0
0088EB9E                            ;      		lsl.w	#4,d0
0088EB9E                            ;       		adda	d0,a3
0088EB9E                            ;       		move.w	obj_x(a6),d0
0088EB9E                            ;       		and.w	#$F,d0
0088EB9E                            ;       		move.b	(a3,d0.w),d2
0088EB9E                            ;       		and.w	#$F,d2
0088EB9E                            ;       		add.w	d2,d1
0088EB9E                            ;       		
0088EB9E                            ;  		btst	#bitobj_air,obj_status(a6)
0088EB9E                            ; 		beq.s	@dontchkLR
0088EB9E                            ;   		cmp.w	d1,d3
0088EB9E                            ;   		blt.s	@NoCol_LR
0088EB9E                            ; @dontchkLR:
0088EB9E                            ;    		move.w	d1,obj_y(a6)		;TODO: REPARAME
0088EB9E                            
0088EB9E                            @NoCol_LR:
0088EB9E 4E75                       		rts
0088EBA0                            	
0088EBA0                            ; **********************************************
0088EBA0                            ; Object interaction
0088EBA0                            ; **********************************************
0088EBA0                            
0088EBA0                            ; ----------------------------------
0088EBA0                            ; objTouch
0088EBA0                            ; 
0088EBA0                            ; touch/hit detection
0088EBA0                            ; 
0088EBA0                            ; Uses: d0-d4
0088EBA0                            ; ----------------------------------
0088EBA0                            
0088EBA0                            objTouch:
0088EBA0 6100 0000                  		bsr	objTouch_Top
0088EBA4 3600                       		move.w	d0,d3
0088EBA6 6100 0000                  		bsr	objTouch_Bottom
0088EBAA 8640                       		or.w	d0,d3
0088EBAC 6100 0000                  		bsr	objTouch_Sides
0088EBB0 8640                       		or.w	d0,d3
0088EBB2 4840                       		swap	d0
0088EBB4 8640                       		or.w	d0,d3
0088EBB6 3003                       		move.w	d3,d0
0088EBB8 4E75                       		rts
0088EBBA                            		
0088EBBA                            ; ---------------------------
0088EBBA                            ; Seperate touches
0088EBBA                            ; ---------------------------
0088EBBA                            
0088EBBA                            objTouch_Top:
0088EBBA 4200                       		clr.b	d0
0088EBBC 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088EBC2 780F                       		moveq	#16-1,d4
0088EBC4                            @check_again:
0088EBC4 4AAC 0000                  		tst.l	obj_code(a4)
0088EBC8 6700 0000                  		beq	@notfound
0088EBCC 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
0088EBD2 6700                       		beq.s	@notfound
0088EBD4                            		
0088EBD4                            ;  		tst.l	obj_y_spd(a4)
0088EBD4                            ;  		bmi.s	@lowrY
0088EBD4                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
0088EBD4                            ;  		bne.s	@lowrY
0088EBD4 7200                       		moveq	#0,d1
0088EBD6                            		
0088EBD6                            		; Check LEFT
0088EBD6 7400                          		moveq	#0,d2
0088EBD8 322E 0008                     		move.w	obj_x(a6),d1
0088EBDC 142E 0004                     		move.b	obj_size(a6),d2
0088EBE0 E74A                          		lsl.w	#3,d2
0088EBE2 9242                          		sub.w	d2,d1
0088EBE4 342C 0008                     		move.w	obj_x(a4),d2
0088EBE8 4841                           		swap	d1
0088EBEA 122C 0005                     		move.b	obj_size+1(a4),d1
0088EBEE E749                          		lsl.w	#3,d1
0088EBF0 D441                             		add.w	d1,d2
0088EBF2 4841                           		swap	d1
0088EBF4 B242                          		cmp.w	d2,d1
0088EBF6 6C00                          		bge.s	@lowrY
0088EBF8                               		; Check RIGHT
0088EBF8 7400                          		moveq	#0,d2
0088EBFA 322E 0008                     		move.w	obj_x(a6),d1
0088EBFE 142E 0005                     		move.b	obj_size+1(a6),d2
0088EC02 E74A                          		lsl.w	#3,d2
0088EC04 D242                          		add.w	d2,d1
0088EC06 342C 0008                     		move.w	obj_x(a4),d2
0088EC0A 4841                           		swap	d1
0088EC0C 122C 0004                     		move.b	obj_size(a4),d1
0088EC10 E749                          		lsl.w	#3,d1
0088EC12 9441                       		sub.w	d1,d2
0088EC14 4841                           		swap	d1
0088EC16 B242                           		cmp.w	d2,d1
0088EC18 6F00                           		ble.s	@lowrY
0088EC1A                            
0088EC1A                                		; Check Top, and $C pixels more
0088EC1A 322E 000C                     		move.w	obj_y(a6),d1
0088EC1E 7400                          		moveq	#0,d2
0088EC20 142E 0006                     		move.b	obj_size+2(a6),d2
0088EC24 E74A                          		lsl.w	#3,d2
0088EC26 9242                          		sub.w	d2,d1
0088EC28 4841                          		swap	d1
0088EC2A 342C 000C                     		move.w	obj_y(a4),d2
0088EC2E 122C 0007                     		move.b	obj_size+3(a4),d1
0088EC32 E749                          		lsl.w	#3,d1
0088EC34 D441                          		add.w	d1,d2
0088EC36 4841                          		swap	d1
0088EC38 B242                          		cmp.w	d2,d1
0088EC3A 6E00                          		bgt.s	@lowrY
0088EC3C 0641 000C                       		add.w	#$C,d1
0088EC40 B242                           		cmp.w	d2,d1
0088EC42 6D00                           		blt.s	@lowrY
0088EC44                                		
0088EC44 103C 0001                     		move.b	#1,d0
0088EC48                            @lowrY:
0088EC48                            
0088EC48 4A00                       		tst.b	d0
0088EC4A 6600 0000                  		bne	@wecanhurt
0088EC4E                            @notfound:
0088EC4E D8FC 0064                  		adda	#sizeof_obj,a4
0088EC52 51CC FF70                  		dbf	d4,@check_again
0088EC56                            @wecanhurt:
0088EC56 4E75                          		rts
0088EC58                               		
0088EC58                            ; ----------------------------------
0088EC58                            
0088EC58                            objTouch_Bottom:
0088EC58 4200                       		clr.b	d0
0088EC5A 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088EC60 780F                       		moveq	#16-1,d4
0088EC62                            @check_again:
0088EC62 4AAC 0000                  		tst.l	obj_code(a4)
0088EC66 6700 0000                  		beq	@notfound
0088EC6A 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
0088EC70 6700 0000                  		beq	@notfound
0088EC74                            		
0088EC74                            ;  		tst.l	obj_y_spd(a4)
0088EC74                            ;  		bmi.s	@lowrY
0088EC74                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
0088EC74                            ;  		bne.s	@lowrY
0088EC74 7200                       		moveq	#0,d1
0088EC76                            		
0088EC76                            		; Check LEFT
0088EC76 7400                          		moveq	#0,d2
0088EC78 322E 0008                     		move.w	obj_x(a6),d1
0088EC7C 142E 0004                     		move.b	obj_size(a6),d2
0088EC80 E74A                          		lsl.w	#3,d2
0088EC82 9242                          		sub.w	d2,d1
0088EC84 342C 0008                     		move.w	obj_x(a4),d2
0088EC88 4841                           		swap	d1
0088EC8A 122C 0005                     		move.b	obj_size+1(a4),d1
0088EC8E E749                          		lsl.w	#3,d1
0088EC90 D441                             		add.w	d1,d2
0088EC92 4841                           		swap	d1
0088EC94 B242                          		cmp.w	d2,d1
0088EC96 6C00                          		bge.s	@lowrY
0088EC98                               		; Check RIGHT
0088EC98 7400                          		moveq	#0,d2
0088EC9A 322E 0008                     		move.w	obj_x(a6),d1
0088EC9E 142E 0005                     		move.b	obj_size+1(a6),d2
0088ECA2 E74A                          		lsl.w	#3,d2
0088ECA4 D242                          		add.w	d2,d1
0088ECA6 342C 0008                     		move.w	obj_x(a4),d2
0088ECAA 4841                           		swap	d1
0088ECAC 122C 0004                     		move.b	obj_size(a4),d1
0088ECB0 E749                          		lsl.w	#3,d1
0088ECB2 9441                       		sub.w	d1,d2
0088ECB4 4841                           		swap	d1
0088ECB6 B242                           		cmp.w	d2,d1
0088ECB8 6F00                           		ble.s	@lowrY
0088ECBA                            
0088ECBA                                		; Check Top, and $C pixels more
0088ECBA 322E 000C                     		move.w	obj_y(a6),d1
0088ECBE 7400                          		moveq	#0,d2
0088ECC0 142E 0007                     		move.b	obj_size+3(a6),d2
0088ECC4 E74A                          		lsl.w	#3,d2
0088ECC6 D242                          		add.w	d2,d1
0088ECC8 4841                          		swap	d1
0088ECCA 342C 000C                     		move.w	obj_y(a4),d2
0088ECCE 122C 0006                     		move.b	obj_size+2(a4),d1
0088ECD2 E749                          		lsl.w	#3,d1
0088ECD4 9441                          		sub.w	d1,d2
0088ECD6 4841                          		swap	d1
0088ECD8 B441                          		cmp.w	d1,d2
0088ECDA 6E00                          		bgt.s	@lowrY
0088ECDC 0441 000C                       		sub.w	#$C,d1
0088ECE0 B441                           		cmp.w	d1,d2
0088ECE2 6D00                           		blt.s	@lowrY
0088ECE4                                		
0088ECE4 103C 0001                     		move.b	#1,d0
0088ECE8                            @lowrY:
0088ECE8                            
0088ECE8 4A00                       		tst.b	d0
0088ECEA 6600 0000                  		bne	@wecanhurt
0088ECEE                            @notfound:
0088ECEE D8FC 0064                  		adda	#sizeof_obj,a4
0088ECF2 51CC FF6E                  		dbf	d4,@check_again
0088ECF6                            @wecanhurt:
0088ECF6 4E75                          		rts
0088ECF8                            
0088ECF8                            ; ----------------------------------
0088ECF8                            
0088ECF8                            objTouch_Sides:
0088ECF8 7000                       		moveq	#0,d0
0088ECFA 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088ED00 780F                       		moveq	#16-1,d4
0088ED02                            @check_again:
0088ED02 4AAC 0000                  		tst.l	obj_code(a4)
0088ED06 6700 0000                  		beq	@notfound
0088ED0A 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
0088ED10 6700 0000                  		beq	@notfound
0088ED14                            		
0088ED14                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
0088ED14                            ;  		bne	@lowrY
0088ED14                             		
0088ED14 7200                            		moveq	#0,d1
0088ED16 7400                          		moveq	#0,d2
0088ED18 322E 000C                      		move.w	obj_y(a6),d1
0088ED1C 7400                           		moveq	#0,d2
0088ED1E 142E 0006                      		move.b	obj_size+2(a6),d2
0088ED22 E74A                           		lsl.w	#3,d2
0088ED24 9242                           		sub.w	d2,d1
0088ED26 4841                           		swap	d1
0088ED28 342C 000C                      		move.w	obj_y(a4),d2
0088ED2C 122C 0007                      		move.b	obj_size+3(a4),d1
0088ED30 E749                           		lsl.w	#3,d1
0088ED32 D441                           		add.w	d1,d2
0088ED34 4841                           		swap	d1
0088ED36 B242                           		cmp.w	d2,d1
0088ED38 6E00 0000                      		bgt	@lowrY
0088ED3C                                		
0088ED3C 322E 000C                      		move.w	obj_y(a6),d1
0088ED40 7400                           		moveq	#0,d2
0088ED42 142E 0007                      		move.b	obj_size+3(a6),d2
0088ED46 E74A                           		lsl.w	#3,d2
0088ED48 D242                           		add.w	d2,d1
0088ED4A 4841                           		swap	d1
0088ED4C 342C 000C                      		move.w	obj_y(a4),d2
0088ED50 122C 0006                      		move.b	obj_size+2(a4),d1
0088ED54 E749                           		lsl.w	#3,d1
0088ED56 9441                           		sub.w	d1,d2
0088ED58 4841                           		swap	d1
0088ED5A B242                           		cmp.w	d2,d1
0088ED5C 6D00 0000                      		blt	@lowrY
0088ED60                            
0088ED60                                 		; X Sides check
0088ED60 7200                            		moveq	#0,d1
0088ED62 7400                          		moveq	#0,d2
0088ED64 322E 0008                     		move.w	obj_x(a6),d1
0088ED68 142E 0005                     		move.b	obj_size+1(a6),d2
0088ED6C E74A                          		lsl.w	#3,d2
0088ED6E D242                          		add.w	d2,d1
0088ED70 242C 0008                     		move.l	obj_x(a4),d2
0088ED74 D4AC 0010                     		add.l	obj_x_spd(a4),d2
0088ED78 4842                          		swap	d2
0088ED7A 4841                           		swap	d1
0088ED7C 122C 0004                      		move.b	obj_size(a4),d1
0088ED80 E749                            		lsl.w	#3,d1
0088ED82 9441                            		sub.w	d1,d2
0088ED84 4841                            		swap	d1
0088ED86 B441                           		cmp.w	d1,d2
0088ED88 6E00                           		bgt.s	@lowrY_L
0088ED8A 0441 0008                      		sub.w	#8,d1
0088ED8E B441                           		cmp.w	d1,d2
0088ED90 6D00                           		blt.s	@lowrY_L 
0088ED92 303C 0001                      		move.w	#1,d0
0088ED96                            
0088ED96                            @lowrY_L:
0088ED96 4840                            		swap	d0
0088ED98 7200                            		moveq	#0,d1
0088ED9A 7400                          		moveq	#0,d2
0088ED9C 322E 0008                     		move.w	obj_x(a6),d1
0088EDA0 142E 0004                     		move.b	obj_size(a6),d2
0088EDA4 E74A                          		lsl.w	#3,d2
0088EDA6 9242                          		sub.w	d2,d1
0088EDA8 342C 0008                     		move.w	obj_x(a4),d2
0088EDAC 4841                           		swap	d1
0088EDAE 122C 0005                      		move.b	obj_size+1(a4),d1
0088EDB2 E749                           		lsl.w	#3,d1
0088EDB4 D441                           		add.w	d1,d2
0088EDB6 4841                           		swap	d1
0088EDB8 B242                          		cmp.w	d2,d1
0088EDBA 6E00                          		bgt.s	@lowrY
0088EDBC 0641 0008                     		add.w	#8,d1
0088EDC0 B242                          		cmp.w	d2,d1
0088EDC2 6D00                          		blt.s	@lowrY 
0088EDC4 303C 0001                     		move.w	#1,d0
0088EDC8                            @lowrY:
0088EDC8                            		
0088EDC8 4A80                       		tst.l	d0
0088EDCA 6600 0000                  		bne	@wecanhurt
0088EDCE                            @notfound:
0088EDCE D8FC 0064                  		adda	#sizeof_obj,a4
0088EDD2 51CC FF2E                  		dbf	d4,@check_again
0088EDD6                            @wecanhurt:
0088EDD6 4E75                          		rts
0088EDD8                               			
0088EDD8                            ; ----------------------------------
0088EDD8                            
0088EDD8                            objPlyrSetFloor:
0088EDD8 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088EDDE 4AAC 0014                  		tst.l	obj_y_spd(a4)
0088EDE2 6B00                       		bmi.s	@return
0088EDE4 082C 00C0 0000             		btst	#bitPlyrClimb,plyr_status(a4)
0088EDEA 6600                       		bne.s	@return
0088EDEC                            ; 		lea	(RAM_LvlPlanes),a5
0088EDEC                            		
0088EDEC 42AC 0014                     		clr.l	obj_y_spd(a4)
0088EDF0 302E 000C                   		move.w	obj_y(a6),d0
0088EDF4 3200                        		move.w	d0,d1
0088EDF6 7400                          		moveq	#0,d2
0088EDF8 142E 0006                     		move.b	obj_size+2(a6),d2
0088EDFC E74A                          		lsl.w	#3,d2
0088EDFE 9042                          		sub.w	d2,d0
0088EE00 7400                          		moveq	#0,d2
0088EE02 142C 0007                     		move.b	obj_size+3(a4),d2
0088EE06 E74A                          		lsl.w	#3,d2
0088EE08 9042                          		sub.w	d2,d0
0088EE0A                            ;    		cmp.w	d0,d1
0088EE0A                            ;    		blt.s	@lowrY
0088EE0A 297C 0001 0000 0014           		move.l	#$10000,obj_y_spd(a4)
0088EE12                            ; @lowrY:
0088EE12 3940 000C                     		move.w	d0,obj_y(a4)
0088EE16                               		
0088EE16                            ; 		bsr	object_PlyrFlgs_floor
0088EE16 08AC 0002 001E                  		bclr	#bitobj_air,obj_status(a4)
0088EE1C 08EC 0004 0022                  		bset	#bitcol_obj,obj_col(a4)
0088EE22 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
0088EE2A 6600 0000                  		bne	@return
0088EE2E 397C 0000 0000                 		move.w	#varJumpTimer,plyr_jumptmr(a4)
0088EE34                            @return:
0088EE34 4E75                          		rts
0088EE36                              	
0088EE36                            ; ----------------------------------
0088EE36                            
0088EE36                            objPlyrSetCeiling:
0088EE36 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088EE3C 082C 00C0 0000             		btst	#bitPlyrClimb,plyr_status(a4)
0088EE42 6600                       		bne.s	@return
0088EE44 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EE4A 42AC 0014                  		clr.l	obj_y_spd(a4)
0088EE4E 08EC 0002 001E                  		bset	#bitobj_air,obj_status(a4)
0088EE54                            ;      		bset	#bitcol_obju,obj_col(a4)
0088EE54                                 		
0088EE54                            ;      		bset	#bitcol_floor,obj_col(a4)
0088EE54                            ;  		move.w	obj_y(a6),d0
0088EE54                            ;    		moveq	#0,d2
0088EE54                            ;    		move.b	obj_size+2(a6),d2
0088EE54                            ;    		lsl.w	#3,d2
0088EE54                            ;    		sub.w	d2,d0
0088EE54                            ;    		move.w	d0,obj_y(a4)
0088EE54                            @return:
0088EE54 4E75                          		rts
0088EE56                               		
0088EE56                            ; ----------------------------------
0088EE56                            
0088EE56                            objPlyrSetWall_R:
0088EE56 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088EE5C 082C 00C0 0000             		btst	#bitPlyrClimb,plyr_status(a4)
0088EE62 6600                       		bne.s	objPlyrColReturn
0088EE64 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EE6A 42AC 0010                  		clr.l	obj_x_spd(a4)
0088EE6E 08EC 0002 0022                  		bset	#bitcol_wall_r,obj_col(a4)
0088EE74 302E 0008                   		move.w	obj_x(a6),d0
0088EE78 7400                          		moveq	#0,d2
0088EE7A 142E 0004                     		move.b	obj_size(a6),d2
0088EE7E E74A                          		lsl.w	#3,d2
0088EE80 9042                          		sub.w	d2,d0
0088EE82 7400                          		moveq	#0,d2
0088EE84 142C 0005                     		move.b	obj_size+1(a4),d2
0088EE88 E74A                          		lsl.w	#3,d2
0088EE8A 9042                          		sub.w	d2,d0
0088EE8C 6000                          		bra.s	objPlyrSetWLX
0088EE8E                            		
0088EE8E                            ; ----------------------------------
0088EE8E                            
0088EE8E                            objPlyrSetWall_L:
0088EE8E 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088EE94 082C 00C0 0000             		btst	#bitPlyrClimb,plyr_status(a4)
0088EE9A 6600                       		bne.s	objPlyrColReturn
0088EE9C 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EEA2 42AC 0010                  		clr.l	obj_x_spd(a4)
0088EEA6 08EC 0003 0022                  		bset	#bitcol_wall_l,obj_col(a4)
0088EEAC 302E 0008                   		move.w	obj_x(a6),d0
0088EEB0                            ;  		add.w	#1,d0
0088EEB0 7400                          		moveq	#0,d2
0088EEB2 142E 0005                     		move.b	obj_size+1(a6),d2
0088EEB6 E74A                          		lsl.w	#3,d2
0088EEB8 D042                          		add.w	d2,d0
0088EEBA                               		
0088EEBA 7400                          		moveq	#0,d2
0088EEBC 142C 0004                     		move.b	obj_size(a4),d2
0088EEC0 E74A                          		lsl.w	#3,d2
0088EEC2 D042                          		add.w	d2,d0
0088EEC4                            objPlyrSetWLX:
0088EEC4 4A40                          		tst.w	d0
0088EEC6 6A00                          		bpl.s	@plus_x
0088EEC8 4240                          		clr.w	d0
0088EECA                            @plus_x:
0088EECA 342D 0030                  		move.w	lvl_size_x(a5),d2
0088EECE E94A                       		lsl.w	#4,d2
0088EED0 B042                       		cmp.w	d2,d0
0088EED2 6D00                       		blt.s	@plusr_x
0088EED4 3002                       		move.w	d2,d0
0088EED6                            @plusr_x:
0088EED6 3940 0008                     		move.w	d0,obj_x(a4)
0088EEDA                            objPlyrColReturn:
0088EEDA 4E75                          		rts
0088EEDC                               		
0088EEDC                            ; ----------------------------------
0088EEDC                            ; What to do if object touched the
0088EEDC                            ; player
0088EEDC                            ; 
0088EEDC                            ; Input:
0088EEDC                            ; a4 - Player object
0088EEDC                            ; 
0088EEDC                            ; Uses:
0088EEDC                            ; d4
0088EEDC                            ; 
0088EEDC                            ; Returns:
0088EEDC                            ; beq.s Nothing
0088EEDC                            ; bne.s Touched
0088EEDC                            ; ----------------------------------
0088EEDC                            
0088EEDC                            objPlyrHurtKill:
0088EEDC 7800                       		moveq	#0,d4
0088EEDE 200C                       		move.l	a4,d0
0088EEE0 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0	; Player?
0088EEE6 6600                       		bne.s	@settrue
0088EEE8 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
0088EEEE 0C2C 0000 001D             		cmp.b	#varPlyrMdDead,obj_index(a4)
0088EEF4 6700                       		beq.s	@return
0088EEF6 08EC 0003 001E             		bset	#bitobj_hurt,obj_status(a4)
0088EEFC 0C2C 0000 001A             		cmp.b	#varPlyAniJump,obj_anim_id(a4)
0088EF02 6700                       		beq.s	@stomppikudo
0088EF04 082C 0002 001E              		btst	#bitobj_air,obj_status(a4)
0088EF0A 6600                        		bne.s	@stomppikudo
0088EF0C 6000                       		bra.s	@return
0088EF0E                            		
0088EF0E                            @stomppikudo:
0088EF0E 082C 0004 0022             		btst	#bitcol_obj,obj_col(a4)
0088EF14 66FE                       		bne.s	*;@return
0088EF16 4AAC 0014                   		tst.l	obj_y_spd(a4)
0088EF1A 6B00                       		bmi.s	@return
0088EF1C 6700                       		beq.s	@return	
0088EF1E                            @hurtanywy:
0088EF1E 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
0088EF24                            @settrue:
0088EF24 7801                       		moveq	#1,d4
0088EF26                            @return:
0088EF26 4A44                       		tst.w	d4
0088EF28 4E75                       		rts
0088EF2A                            		
0088EF2A                            ; Object_ChkPlyrHit:
0088EF2A                            ; 		lea	(RAM_ObjBuffer),a4
0088EF2A                            ; 		moveq	#0,d5
0088EF2A                            ; 		cmp.b	#varPlyAniJump,obj_anim_id(a4)
0088EF2A                            ; 		bne.s	@objhit
0088EF2A                            ; 		moveq	#-1,d5
0088EF2A                            ; @objhit:
0088EF2A                            ; 		tst.w	d5
0088EF2A                            ; 		rts
0088EF2A                            
0088EF2A                            ; ----------------------------------
0088EF2A                            ; Prize ceiling action
0088EF2A                            ; 
0088EF2A                            ; Output:
0088EF2A                            ; d4 - Collision out
0088EF2A                            ; ----------------------------------
0088EF2A                            
0088EF2A                            Object_PrzActionCeil:
0088EF2A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EF30 7A00                       		moveq	#0,d5
0088EF32 1A00                       		move.b	d0,d5
0088EF34 0805 0007                  		btst	#7,d5
0088EF38 6600                       		bne.s	@its_hidden
0088EF3A DA45                       		add.w	d5,d5
0088EF3C 3C3B 5000                  		move.w	@block_list(pc,d5.w),d6
0088EF40 4EFB 6000                  		jmp	@block_list(pc,d6.w)
0088EF44                            		
0088EF44                            ; --------------------------
0088EF44                            ; Reveral hidden block
0088EF44                            ; --------------------------
0088EF44                            
0088EF44                            @its_hidden:
0088EF44 6100 0000                   		bsr	Prize_Locate
0088EF48 0200 007F                   		and.b	#$7F,d0
0088EF4C 1680                        		move.b	d0,(a3)
0088EF4E                             		
0088EF4E                            ;  		bsr	Level_HidePrize
0088EF4E 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
0088EF54 264C                       		movea.l	a4,a3
0088EF56 323C 0007                  		move 	#8-1,d1
0088EF5A                            @chksame2:
0088EF5A B0AB 0024                  		cmp.l	obj_ram(a3),d0
0088EF5E 6700 0000                  		beq	@solidblock
0088EF62 D6FC 0064                  		adda 	#sizeof_obj,a3
0088EF66 51C9 FFF2                  		dbf	d1,@chksame2	
0088EF6A                            
0088EF6A 323C 0003                  		move 	#4-1,d1
0088EF6E                            @next_obj2:
0088EF6E 4AAC 0000                  		tst.l	obj_code(a4)
0088EF72 6700                       		beq.s	@free2
0088EF74 D8FC 0064                  		adda	#sizeof_obj,a4
0088EF78 51C9 FFF4                  		dbf	d1,@next_obj2
0088EF7C 6000                       		bra.s	@ranout2
0088EF7E                            @free2:
0088EF7E 6100 0000                   		bsr	blkobj_setcoords
0088EF82 197C 0001 001F             		move.b	#1,obj_subid(a4)
0088EF88 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
0088EF90 2940 0024                  		move.l	d0,obj_ram(a4)
0088EF94                            		
0088EF94 203C 0000 0000               		move.l	#SndSfx_BONK,d0
0088EF9A 323C 0003                    		move.w 	#3,d1
0088EF9E 7401                         		moveq	#1,d2
0088EFA0 6100 A9E0                    		bsr	Audio_Track_play
0088EFA4                            @ranout2:
0088EFA4                            ; 		moveq	#0,d4
0088EFA4 4E75                        		rts
0088EFA6                             		
0088EFA6                            ; ----------------------------------
0088EFA6                            
0088EFA6                            @block_list:
0088EFA6 0000                       		dc.w 0
0088EFA8 0000                       		dc.w @break_block-@block_list
0088EFAA 0000                       		dc.w @bump_1coin-@block_list
0088EFAC 0000                       		dc.w @bump_10coin-@block_list
0088EFAE 0000                       		dc.w @break_block-@block_list
0088EFB0 0000                       		dc.w @break_block-@block_list
0088EFB2 0000                       		dc.w @break_block-@block_list
0088EFB4 0000                       		dc.w @bump_1up-@block_list
0088EFB6 0000                       		dc.w @bump_1coin-@block_list
0088EFB8 0000                       		dc.w @bump_10coin-@block_list
0088EFBA 0000                       		dc.w @bump_1up-@block_list
0088EFBC 0000                       		dc.w @bump_block-@block_list
0088EFBE 0000                       		dc.w @bump_block-@block_list
0088EFC0 0000                       		dc.w @bump_block-@block_list
0088EFC2 0000                       		dc.w @bump_block-@block_list
0088EFC4 0000                       		dc.w @bump_block-@block_list
0088EFC6                            		
0088EFC6 0000                       		dc.w @break_block-@block_list	
0088EFC8 0000                       		dc.w @break_block-@block_list
0088EFCA 0000                       		dc.w @break_block-@block_list
0088EFCC 0000                       		dc.w @break_block-@block_list
0088EFCE 0000                       		dc.w @break_block-@block_list
0088EFD0 0000                       		dc.w @break_block-@block_list
0088EFD2 0000                       		dc.w @break_block-@block_list
0088EFD4 0000                       		dc.w @break_block-@block_list
0088EFD6 0000                       		dc.w @break_block-@block_list
0088EFD8 0000                       		dc.w @break_block-@block_list
0088EFDA 0000                       		dc.w @break_block-@block_list
0088EFDC 0000                       		dc.w @break_block-@block_list
0088EFDE 0000                       		dc.w @break_block-@block_list
0088EFE0 0000                       		dc.w @break_block-@block_list
0088EFE2 0000                       		dc.w @break_block-@block_list	
0088EFE4 0000                       		dc.w @break_block-@block_list
0088EFE6                            		
0088EFE6 0000                       		dc.w @trampoline-@block_list	
0088EFE8 0000                       		dc.w @break_block-@block_list
0088EFEA 0000                       		dc.w @break_block-@block_list
0088EFEC 0000                       		dc.w @break_block-@block_list
0088EFEE 0000                       		dc.w @break_block-@block_list
0088EFF0 0000                       		dc.w @break_block-@block_list
0088EFF2 0000                       		dc.w @break_block-@block_list
0088EFF4 0000                       		dc.w @break_block-@block_list
0088EFF6 0000                       		dc.w @break_block-@block_list
0088EFF8 0000                       		dc.w @break_block-@block_list
0088EFFA 0000                       		dc.w @break_block-@block_list
0088EFFC 0000                       		dc.w @break_block-@block_list
0088EFFE 0000                       		dc.w @break_block-@block_list
0088F000 0000                       		dc.w @break_block-@block_list
0088F002 0000                       		dc.w @break_block-@block_list	
0088F004 0000                       		dc.w @break_block-@block_list
0088F006                            		
0088F006 0000                       		dc.w @break_block-@block_list	
0088F008 0000                       		dc.w @break_block-@block_list
0088F00A 0000                       		dc.w @break_block-@block_list
0088F00C 0000                       		dc.w @break_block-@block_list
0088F00E 0000                       		dc.w @break_block-@block_list
0088F010 0000                       		dc.w @break_block-@block_list
0088F012 0000                       		dc.w @break_block-@block_list
0088F014 0000                       		dc.w @break_block-@block_list
0088F016 0000                       		dc.w @break_block-@block_list
0088F018 0000                       		dc.w @break_block-@block_list
0088F01A 0000                       		dc.w @break_block-@block_list
0088F01C 0000                       		dc.w @break_block-@block_list
0088F01E 0000                       		dc.w @break_block-@block_list
0088F020 0000                       		dc.w @break_block-@block_list
0088F022 0000                       		dc.w @break_block-@block_list	
0088F024 0000                       		dc.w @break_block-@block_list
0088F026                            		
0088F026 0000                       		dc.w @coin_red-@block_list
0088F028 0000                       		dc.w @coin_blue-@block_list
0088F02A                            		
0088F02A                            ; ----------------------------------
0088F02A                            ; Normal breakable block
0088F02A                            ; ----------------------------------
0088F02A                            
0088F02A                            @break_block:
0088F02A 6100 0000                  		bsr	@chk_breakblk
0088F02E 6600                       		bne.s	@oops
0088F030 6100 0000                   		bsr	Prize_Delete
0088F034 6100 0000                   		bsr	blkobj_overwrite
0088F038                            		
0088F038 6100 0000                  		bsr	blkobj_setcoords
0088F03C 2940 0024                  		move.l	d0,obj_ram(a4)
0088F040 422C 001F                  		clr.b	obj_subid(a4)
0088F044 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
0088F04C                            		
0088F04C 203C 0000 0000               		move.l	#SndSfx_PUM,d0
0088F052 323C 0004                    		move.w 	#4,d1
0088F056 7401                         		moveq	#1,d2
0088F058 6100 A928                    		bsr	Audio_Track_play
0088F05C                            @oops:
0088F05C 7801                         		moveq	#1,d4
0088F05E 2E3C 0001 0000               		move.l	#$10000,d7
0088F064 4E75                         		rts
0088F066                            		
0088F066                            ; ----------------------------------
0088F066                            ; BUMP block
0088F066                            ; ----------------------------------
0088F066                            
0088F066                            @bump_1coin:
0088F066 7601                       		moveq	#1,d3
0088F068 6000                       		bra.s	@bump_coinarg
0088F06A                            @bump_10coin:
0088F06A 760A                       		moveq	#10,d3
0088F06C 6000                       		bra.s	@bump_coinarg
0088F06E                            
0088F06E                            ; ----------------------------------
0088F06E                            
0088F06E                            @bump_block:
0088F06E 7600                       		moveq	#0,d3
0088F070                            @bump_coinarg:
0088F070 6100 0000                  		bsr	blkobj_chkdupl
0088F074 66E6                       		bne.s	@oops
0088F076                            
0088F076 6100 0000                  		bsr	blkobj_overwrite
0088F07A 6100 0000                   		bsr	blkobj_setcoords
0088F07E 2400                       		move.l	d0,d2
0088F080 2940 0024                  		move.l	d0,obj_ram(a4)
0088F084 197C 0001 001F             		move.b	#1,obj_subid(a4)
0088F08A 4A03                       		tst.b	d3
0088F08C 6700                       		beq.s	@noexsubid
0088F08E 197C 0002 001F             		move.b	#2,obj_subid(a4)
0088F094 0C03 000A                  		cmp.b	#10,d3
0088F098 6600                       		bne.s	@noexsubid
0088F09A 197C 0003 001F             		move.b	#3,obj_subid(a4)
0088F0A0                            @noexsubid:
0088F0A0                            
0088F0A0 0C02 000F                  		cmp.b	#$F,d2
0088F0A4 6700                       		beq.s	@SolidOnly
0088F0A6                            		
0088F0A6 D779 FFFF DC02             		add.w	d3,(RAM_P1_Coins)
0088F0AC 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
0088F0B4 6D00                         		blt.s	@SolidOnly
0088F0B6 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
0088F0BC 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
0088F0C4                              		
0088F0C4 203C 0000 0000               		move.l	#SndSfx_OneUp,d0
0088F0CA 7200                         		moveq 	#0,d1
0088F0CC 7401                         		moveq	#1,d2
0088F0CE 6100 A8B2                    		bsr	Audio_Track_play
0088F0D2                              		
0088F0D2 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
0088F0DA                            		
0088F0DA 6000 0000                  		bra	@solidblock
0088F0DE                            
0088F0DE                            @SolidOnly:
0088F0DE                            
0088F0DE                            
0088F0DE 203C 0000 0000               		move.l	#SndSfx_BonkCoin,d0
0088F0E4 7202                         		moveq 	#2,d1
0088F0E6                              		
0088F0E6 0C02 000F                  		cmp.b	#$F,d2
0088F0EA 6600                       		bne.s	@Alt_Sfx
0088F0EC 203C 0000 0000               		move.l	#SndSfx_BONK,d0
0088F0F2 323C 0003                    		move.w 	#3,d1
0088F0F6 0C43 000A                    		cmp.w	#10,d3
0088F0FA 6600                         		bne.s	@Alt_Sfx
0088F0FC 7201                         		moveq	#1,d1
0088F0FE                            @Alt_Sfx:
0088F0FE 7401                       		moveq	#1,d2
0088F100 6100 A880                    		bsr	Audio_Track_play
0088F104                              		
0088F104 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
0088F10C 6000                       		bra.s	@solidblock
0088F10E                            		
0088F10E                            ; ----------------------------------
0088F10E                            
0088F10E                            @bump_1up:
0088F10E 6100 0000                  		bsr	blkobj_chkdupl
0088F112 6600 FF48                  		bne	@oops
0088F116                            
0088F116 6100 0000                  		bsr	blkobj_overwrite
0088F11A 6100 0000                   		bsr	blkobj_setcoords
0088F11E 2400                       		move.l	d0,d2
0088F120 2940 0024                  		move.l	d0,obj_ram(a4)
0088F124 197C 0004 001F             		move.b	#4,obj_subid(a4)
0088F12A 0679 0001 FFFF DC00        		add.w	#1,(RAM_P1_Lives)
0088F132 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
0088F13A                            		
0088F13A 203C 0000 0000               		move.l	#SndSfx_OneUp,d0
0088F140 7200                         		moveq 	#0,d1
0088F142 7401                         		moveq	#1,d2
0088F144 6100 A83C                    		bsr	Audio_Track_play
0088F148                            		
0088F148                            @solidblock:
0088F148 7801                         		moveq	#1,d4
0088F14A 2E3C 0001 0000               		move.l	#$10000,d7
0088F150 4E75                         		rts
0088F152                              		
0088F152                            ; ----------------------------------
0088F152                            ; A Coin, from top
0088F152                            ; ----------------------------------
0088F152                            
0088F152                            @coin_red:
0088F152 7801                       		moveq	#1,d4
0088F154 6000                       		bra.s	@setcoin
0088F156                            @coin_blue:
0088F156 7805                       		moveq	#5,d4
0088F158                            @setcoin:
0088F158 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
0088F15E 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
0088F166 6D00                         		blt.s	@dontadd1up
0088F168 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
0088F16E 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
0088F176                              		
0088F176 2800                         		move.l	d0,d4
0088F178 203C 0000 0000               		move.l	#SndSfx_OneUp,d0
0088F17E 7200                         		moveq 	#0,d1
0088F180 7401                         		moveq	#1,d2
0088F182 6100 A7FE                    		bsr	Audio_Track_play
0088F186 2004                         		move.l	d4,d0
0088F188                              		
0088F188                            @dontadd1up:
0088F188                              		
0088F188 6100 0000                   		bsr	Prize_Delete
0088F18C 6100 E792                  		bsr	Level_HidePrize
0088F190                              		
0088F190 203C 0000 0000               		move.l	#SndSfx_COIN,d0
0088F196 7202                         		moveq 	#2,d1
0088F198 7401                         		moveq	#1,d2
0088F19A 6100 A7E6                    		bsr	Audio_Track_play
0088F19E 7800                       		moveq	#0,d4		
0088F1A0 4E75                       		rts
0088F1A2                            		
0088F1A2                            ; ----------------------------------
0088F1A2                            ; Normal breakable block
0088F1A2                            ; ----------------------------------
0088F1A2                            
0088F1A2                            @trampoline:
0088F1A2 6100 0000                  		bsr	goToTrampolineWhy
0088F1A6                            		
0088F1A6 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088F1AC 283C 0007 0000             		move.l	#$70000,d4
0088F1B2 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
0088F1BA 6700                       		beq.s	@dontadd
0088F1BC 283C 0009 0000             		move.l	#$90000,d4
0088F1C2                            @dontadd:
0088F1C2 2E04                       		move.l	d4,d7
0088F1C4 4E75                       		rts
0088F1C6                            		
0088F1C6                            ; -------------------------------
0088F1C6                            ; check for active object
0088F1C6                            ; d2 - sub-id
0088F1C6                            ; -------------------------------
0088F1C6                            
0088F1C6                            @chk_breakblk:
0088F1C6 7401                       		moveq	#1,d2
0088F1C8 7800                       		moveq	#0,d4
0088F1CA 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
0088F1D0 264C                       		movea.l	a4,a3
0088F1D2 7207                       		moveq 	#8-1,d1
0088F1D4                            @checkhdnbmp:
0088F1D4 0CAB 0000 0000 0000        		cmp.l	#obj_prize,obj_code(a3)
0088F1DC 6600                       		bne.s	@notprz
0088F1DE B42B 001F                  		cmp.b	obj_subid(a3),d2
0088F1E2 6600                       		bne.s	@notprz
0088F1E4 7801                       		moveq	#1,d4
0088F1E6 7200                       		moveq	#0,d1
0088F1E8                            @notprz:
0088F1E8 D6FC 0064                  		adda 	#sizeof_obj,a3
0088F1EC 51C9 FFE6                  		dbf	d1,@checkhdnbmp
0088F1F0 4A44                       		tst.w	d4
0088F1F2 4E75                       		rts
0088F1F4                            
0088F1F4                            ; -------------------------------
0088F1F4                            ; check for duplicate object
0088F1F4                            ; using obj_ram
0088F1F4                            ; -------------------------------
0088F1F4                            
0088F1F4                            blkobj_chkdupl:
0088F1F4 7800                       		moveq	#0,d4
0088F1F6 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
0088F1FC 7207                       		moveq 	#8-1,d1
0088F1FE                            @chksame234:
0088F1FE B0AC 0024                   		cmp.l	obj_ram(a4),d0
0088F202 6600                        		bne.s	@notequl
0088F204 0644 0001                   		add.w	#1,d4
0088F208                            @notequl:
0088F208 D8FC 0064                   		adda 	#sizeof_obj,a4
0088F20C 51C9 FFF0                   		dbf	d1,@chksame234
0088F210 4A44                        		tst.w	d4
0088F212 4E75                        		rts
0088F214                             		
0088F214                            ; -------------------------------
0088F214                            ; Overwrite prize object if its
0088F214                            ; the same
0088F214                            ; -------------------------------
0088F214                            
0088F214                            blkobj_overwrite:
0088F214 7800                       		moveq	#0,d4
0088F216 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
0088F21C 7207                       		moveq 	#8-1,d1
0088F21E                            @chksame23:
0088F21E B0AC 0024                   		cmp.l	obj_ram(a4),d0
0088F222 6600 0000                   		bne	@notsame
0088F226                             		
0088F226 264C                        		movea.l	a4,a3
0088F228 343C 0063                   		move.w	#sizeof_obj-1,d2
0088F22C                            @delete:
0088F22C 421B                        		clr.b	(a3)+
0088F22E 51CA FFFC                   		dbf	d2,@delete
0088F232                            @notsame:
0088F232 0CAC 0000 0000 0000        		cmp.l	#obj_prize,obj_code(a4)
0088F23A 6600                       		bne.s	@found
0088F23C D8FC 0064                   		adda 	#sizeof_obj,a4
0088F240 51C9 FFDC                   		dbf	d1,@chksame23
0088F244                            @found:
0088F244 4E75                       		rts
0088F246                            		
0088F246                            ; ----------------------------------
0088F246                            ; obj_coords
0088F246                            ; ----------------------------------
0088F246                            
0088F246                            blkobj_setcoords:
0088F246 2800                       		move.l	d0,d4
0088F248 E88C                       		lsr.l	#4,d4
0088F24A 0244 FFF0                  		and.w	#$FFF0,d4
0088F24E 0644 0008                   		add.w	#8,d4
0088F252 3944 000C                   		move.w	d4,obj_y(a4)
0088F256 E08C                       		lsr.l	#8,d4
0088F258 E88C                       		lsr.l	#4,d4
0088F25A 0244 FFF0                  		and.w	#$FFF0,d4
0088F25E 0644 0008                   		add.w	#8,d4
0088F262 3944 0008                   		move.w	d4,obj_x(a4)
0088F266                             		
0088F266 206D 0008                  		movea.l	lvl_przblocks(a5),a0
0088F26A 3800                       		move.w	d0,d4
0088F26C 0244 00FF                  		and.w	#$FF,d4
0088F270 E74C                       		lsl.w	#3,d4
0088F272 3830 4000                  		move.w	(a0,d4.w),d4
0088F276 3944 0028                  		move.w	d4,obj_ram+4(a4)
0088F27A 4E75                        		rts
0088F27C                             	
0088F27C                            goToTrampolineWhy:
0088F27C 6100 FF76                  		bsr	blkobj_chkdupl
0088F280 6600 0000                  		bne	@oopstr
0088F284                            
0088F284 6100 FF8E                  		bsr	blkobj_overwrite
0088F288 6100 FFBC                   		bsr	blkobj_setcoords
0088F28C 2940 0024                  		move.l	d0,obj_ram(a4)
0088F290 197C 0005 001F             		move.b	#5,obj_subid(a4)
0088F296 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
0088F29E 6100 E680                  		bsr	Level_HidePrize
0088F2A2                            @oopstr:
0088F2A2 7801                       		moveq	#1,d4
0088F2A4 4E75                       		rts
0088F2A6                            		
0088F2A6                            ; ----------------------------------
0088F2A6                            ; block subs
0088F2A6                            ; 
0088F2A6                            ; d0 - XXXYYYID
0088F2A6                            ; a5 - RAM_LvlPlanes
0088F2A6                            ; ----------------------------------
0088F2A6                            
0088F2A6                            Prize_Locate:
0088F2A6 266D 0018                  		movea.l	lvl_prizes(a5),a3
0088F2AA 2800                       		move.l	d0,d4
0088F2AC E08C                       		lsr.l	#8,d4
0088F2AE 0284 0000 0FFF             		and.l	#$FFF,d4
0088F2B4 C8ED 0030                  		mulu.w	lvl_size_x(a5),d4
0088F2B8 D6C4                       		adda	d4,a3
0088F2BA 2800                       		move.l	d0,d4
0088F2BC 4844                       		swap	d4
0088F2BE E84C                       		lsr.w	#4,d4
0088F2C0 0284 0000 0FFF             		and.l	#$FFF,d4
0088F2C6 D6C4                       		adda	d4,a3
0088F2C8 4E75                       		rts
0088F2CA                            		
0088F2CA                            Prize_Delete:
0088F2CA 61DA                       		bsr.s	Prize_Locate
0088F2CC 4213                       		clr.b	(a3)
0088F2CE 4E75                       		rts
0088F2D0                            		
0088F2D0                            ; **********************************************
0088F2D0                            ; Object action
0088F2D0                            ; **********************************************
0088F2D0                            
0088F2D0                            ; ---------------------------
0088F2D0                            ; Object action: mark 
0088F2D0                            ; stomped by player
0088F2D0                            ; 
0088F2D0                            ; Input:
0088F2D0                            ; d0 | LONG - Mappings
0088F2D0                            ; d1 | WORD - VRAM
0088F2D0                            ; d2 | BYTE - Frame
0088F2D0                            ; a4 | Object who touched it
0088F2D0                            ; ---------------------------
0088F2D0                            
0088F2D0                            objAction_SetStomp:
0088F2D0 422E 001D                  		clr.b	obj_index(a6)		; Clear index
0088F2D4 422E 001F                  		clr.b	obj_subid(a6)		; Subaction: Stomp
0088F2D8 2D40 0024                  		move.l	d0,obj_ram(a6)		; Last frame
0088F2DC 3D41 0028                  		move.w	d1,obj_ram+4(a6)
0088F2E0 1D42 002A                  		move.b	d2,obj_ram+6(a6)
0088F2E4 2D43 002C                  		move.l	d3,obj_ram+8(a6)
0088F2E8 2D7C 0000 0000 0000        		move.l	#obj_actionscript,obj_code(a6)
0088F2F0 4E75                       		rts
0088F2F2                            		
0088F2F2                            ; =================================================================
0088F2F2                            ; --------------------------------------------
0088F2F2                            ; Includes
0088F2F2                            ; --------------------------------------------
0088F2F2                            
0088F2F2                              		include	"engine/modes/level/data/objects/player/code.asm"
0088F2F2                            ; =================================================================
0088F2F2                            ; Object
0088F2F2                            ; 
0088F2F2                            ; Player
0088F2F2                            ; =================================================================
0088F2F2                            
0088F2F2                            ; =================================================================
0088F2F2                            ; ------------------------------------------------
0088F2F2                            ; Variables
0088F2F2                            ; ------------------------------------------------
0088F2F2                            
0088F2F2 =00006780                  varPlyrVRAM	equ	$6000|$780
0088F2F2 =00000140                  varScrlHor	equ	320
0088F2F2 =0000000B                  varJumpTimer	equ	11
0088F2F2 =00000060                  varHurtTimer	equ	96
0088F2F2                            
0088F2F2 =00000002                  varPlyAniJump	equ	2
0088F2F2 =00000002                  varPlyrMdDead	equ	2
0088F2F2                            
0088F2F2 =00000005                  bitPlyrClimb	equ	5
0088F2F2 =00000006                  bitPlyrCancelY	equ	6
0088F2F2 =00000007                  bitPlyrBusy	equ	7
0088F2F2                            
0088F2F2                            ; =================================================================
0088F2F2                            ; ------------------------------------------------
0088F2F2                            ; RAM
0088F2F2                            ; ------------------------------------------------
0088F2F2                            
0088F2F2                            		rsset obj_ram
0088F2F2 =00000024                  plyr_lvltrgt	rs.w	1
0088F2F2 =00000026                  plyr_jumptmr	rs.w	1
0088F2F2 =00000028                  plyr_hits	rs.w	1
0088F2F2 =0000002A                  plyr_hittime	rs.w	1
0088F2F2 =0000002C                  plyr_spccol	rs.b	1		; %00000LCR
0088F2F2 =0000002D                  plyr_status	rs.b	1		; %000000FB
0088F2F2                            
0088F2F2                            ; =================================================================
0088F2F2                            ; ------------------------------------------------
0088F2F2                            ; Code start
0088F2F2                            ; ------------------------------------------------
0088F2F2                            
0088F2F2                            Obj_Player:
0088F2F2 7000                        		moveq	#0,d0
0088F2F4 102E 001D                   		move.b	obj_index(a6),d0
0088F2F8 D040                        		add.w	d0,d0
0088F2FA 323B 0000                   		move.w	@Index(pc,d0.w),d1
0088F2FE 4EBB 1000                   		jsr	@Index(pc,d1.w)
0088F302                             		
0088F302                             		;Render
0088F302 7000                        		moveq	#0,d0
0088F304 303C 6780                      		move.w	#varPlyrVRAM,d0
0088F308 0C2E 0002 001D             		cmp.b	#varPlyrMdDead,obj_index(a6)
0088F30E 6600                       		bne.s	@dontforce
0088F310 0040 8000                  		or.w	#$8000,d0
0088F314                            @dontforce:
0088F314 4840                           		swap	d0
0088F316 102E 0020                     		move.b	obj_frame(a6),d0
0088F31A 223C 0000 0000              		move.l	#ani_player,d1
0088F320 6100 F020                  		bsr	Object_Animate
0088F324                            		
0088F324 082E 0000 002B             		btst	#0,plyr_hittime+1(a6)
0088F32A 6600                       		bne.s	@return
0088F32C                            		
0088F32C 102E 0020                     		move.b	obj_frame(a6),d0	
0088F330 223C 0000 0000              		move.l	#map_player,d1
0088F336 6100 EC5E                    		bsr	Object_Show
0088F33A                             		
0088F33A 203C 6780 0000                		move.l	#(varPlyrVRAM<<16),d0
0088F340 102E 0020                     		move.b	obj_frame(a6),d0
0088F344 223C 0000 0000             		move.l	#dplc_player,d1
0088F34A 243C 0000 0000             		move.l	#art_player,d2
0088F350 6000 EBEA                  		bra	Object_DPLC
0088F354                            
0088F354                            @return:
0088F354 4E75                       		rts
0088F356                            		
0088F356                            ; ------------------------------------------------
0088F356                            
0088F356                            @Index:
0088F356 0000                       		dc.w ObjPlyr_Init-@Index
0088F358 0000                       		dc.w ObjPlyr_Main-@Index
0088F35A 0000                       		dc.w ObjPlyr_Die-@Index
0088F35C                            		even
0088F35C                            
0088F35C                            ; =================================================================
0088F35C                            ; ------------------------------------------------
0088F35C                            ; Index $00: Init
0088F35C                            ; ------------------------------------------------
0088F35C                            
0088F35C                            ObjPlyr_Init:
0088F35C 062E 0001 001D             		add.b	#1,obj_index(a6)
0088F362 2D7C 0101 0202 0004        		move.l	#$01010202,obj_size(a6)
0088F36A                            ; 		bset	#bitobj_flipV,obj_status(a6)
0088F36A                            		
0088F36A                            ; 		tst.w	(RAM_P1_Hits)
0088F36A                            ; 		beq.s	@iszerohits
0088F36A                            ; 		bpl.s	@dontresthit
0088F36A                            ; @iszerohits:
0088F36A 33FC 0003 FFFF DC04        		move.w	#3,(RAM_P1_Hits)
0088F372                            @dontresthit:
0088F372 426E 002A                  		clr.w	plyr_hittime(a6)
0088F376 08EE 0006 001E              		bset	#bitobj_hit,obj_status(a6)
0088F37C                             		
0088F37C                            ; =================================================================
0088F37C                            ; ------------------------------------------------
0088F37C                            ; Index $01: Main
0088F37C                            ; ------------------------------------------------
0088F37C                            
0088F37C                            ObjPlyr_Main:
0088F37C                            ; 		btst	#bitJoyA,(RAM_Control_2+OnPress)
0088F37C                            ; 		beq.s	@NotDbg
0088F37C                            ; 		clr.l	obj_x(a6)
0088F37C                            ; 		clr.l	obj_y(a6)
0088F37C                            ; 		clr.l	obj_x_spd(a6)
0088F37C                            ; 		clr.l	obj_y_spd(a6)
0088F37C                            ; 		lea	(RAM_LvlPlanes),a5
0088F37C                            ; 		clr.w	lvl_x(a5)
0088F37C                            ; 		clr.w	lvl_y(a5)
0088F37C                            ; 		movem.l	a6,-(sp)
0088F37C                            ; 		bsr	Level_Draw
0088F37C                            ; 		movem.l	(sp)+,a6
0088F37C                            ; @NotDbg:
0088F37C                            ; 		btst	#bitJoyMode,(RAM_Control_1+ExOnHold)
0088F37C                            ; 		beq.s	@NotWnd
0088F37C                            ; 		bra	PlyrDebugMove
0088F37C                            ; @NotWnd:
0088F37C                            
0088F37C                            ; 		btst	#bitJoyX,(RAM_Control_1+ExOnPress)
0088F37C                            ; 		beq.s	@NotWnd3
0088F37C                            ; 		bchg	#3,(RAM_VidRegs+$C)
0088F37C                            ; 		bchg	#bitobj_flipH,obj_status(a6)
0088F37C                            ; 		bsr	Video_Update
0088F37C                            ; @NotWnd3:
0088F37C                            ; 		btst	#bitJoyY,(RAM_Control_1+ExOnPress)
0088F37C                            ; 		beq.s	@NotWnd2
0088F37C                            ; 		bchg	#bitobj_flipV,obj_status(a6)
0088F37C                            ; @NotWnd2:
0088F37C                            
0088F37C                            ; ----------------------------------
0088F37C                            ; Falling frame
0088F37C                            ; ----------------------------------
0088F37C                            
0088F37C                            ; 		btst	#bitobj_air,obj_status(a6)
0088F37C                            ; 		beq.s	@idleanim
0088F37C                            ; 		tst.l	obj_y_spd(a6)
0088F37C                            ; 		beq.s	@idleanim
0088F37C                            ; 		bmi.s	@idleanim
0088F37C                            ; 		move.b	#3,obj_anim_id(a6)
0088F37C                            ; @idleanim:
0088F37C                            
0088F37C 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088F382 302D 0032                  		move.w	lvl_size_y(a5),d0		; Bottomless pit
0088F386 E948                       		lsl.w	#4,d0
0088F388 322E 000C                  		move.w	obj_y(a6),d1
0088F38C 7400                       		moveq	#0,d2
0088F38E 142E 0006                  		move.b	obj_size+2(a6),d2
0088F392 E74A                       		lsl.w	#3,d2
0088F394 9242                       		sub.w	d2,d1
0088F396 B240                       		cmp.w	d0,d1
0088F398 6E00 0000                  		bgt	PlyrLevelReset
0088F39C                            		
0088F39C 4A6E 002A                  		tst.w	plyr_hittime(a6)
0088F3A0 6600                       		bne.s	@counting
0088F3A2 082E 0003 001E             		btst	#bitobj_hurt,obj_status(a6)
0088F3A8 6700                       		beq.s	@no_action
0088F3AA                            		
0088F3AA 4A6E 002A                  		tst.w	plyr_hittime(a6)
0088F3AE 6600                       		bne.s	@ignore
0088F3B0 0479 0001 FFFF DC04        		sub.w	#1,(RAM_P1_Hits)
0088F3B8 3D7C 0060 002A             		move.w	#varHurtTimer,plyr_hittime(a6)
0088F3BE                            		
0088F3BE 4A79 FFFF DC04             		tst.w	(RAM_P1_Hits)
0088F3C4 6600                       		bne.s	@counting
0088F3C6 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
0088F3CC 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
0088F3D2 1D7C 0002 001D             		move.b	#2,obj_index(a6)		; Mode $02: dead
0088F3D8 1D7C 0005 001A             		move.b	#5,obj_anim_id(a6)		; Animation $05
0088F3DE 2D7C 0001 0000 0010        		move.l	#$10000,obj_x_spd(a6)
0088F3E6 2D7C FFFC 0000 0014        		move.l	#-$40000,obj_y_spd(a6)
0088F3EE                            @ignore:
0088F3EE 4E75                       		rts
0088F3F0                            		
0088F3F0                            @counting:
0088F3F0 046E 0001 002A             		sub.w	#1,plyr_hittime(a6)
0088F3F6 6600                       		bne.s	@no_action
0088F3F8 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
0088F3FE                            @no_action:
0088F3FE 6000 0000                  		bra	PlyrPhysics
0088F402                            		
0088F402                            ; =================================================================
0088F402                            ; ------------------------------------------------
0088F402                            ; Index $01: Main
0088F402                            ; ------------------------------------------------
0088F402                            
0088F402                            ObjPlyr_Die:
0088F402 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088F408 2C2E 0010                  		move.l	obj_x_spd(a6),d6
0088F40C 2E2E 0014                  		move.l	obj_y_spd(a6),d7
0088F410 0687 0000 4000             		add.l	#$4000,d7
0088F416                            		
0088F416 DDAE 0008                  		add.l	d6,obj_x(a6)
0088F41A DFAE 000C                  		add.l	d7,obj_y(a6)
0088F41E                            		
0088F41E 302D 0032                  		move.w	lvl_size_y(a5),d0
0088F422 E948                       		lsl.w	#4,d0
0088F424 322E 000C                  		move.w	obj_y(a6),d1
0088F428 7400                       		moveq	#0,d2
0088F42A 142E 0006                  		move.b	obj_size+2(a6),d2
0088F42E E74A                       		lsl.w	#3,d2
0088F430 9242                       		sub.w	d2,d1
0088F432 B240                       		cmp.w	d0,d1
0088F434 6E00                       		bgt.s	PlyrLevelReset
0088F436                            		
0088F436 2D46 0010                  		move.l	d6,obj_x_spd(a6)
0088F43A 2D47 0014                  		move.l	d7,obj_y_spd(a6)
0088F43E 4E75                       		rts
0088F440                            		
0088F440                            ; =================================================================
0088F440                            ; ----------------------------------
0088F440                            ; Level reset
0088F440                            ; ----------------------------------
0088F440                            
0088F440                            PlyrLevelReset:
0088F440 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
0088F448                            		
0088F448 0479 0001 FFFF DC00        		sub.w	#1,(RAM_P1_Lives)
0088F450 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
0088F456 6600                       		bne.s	@ignore
0088F458                            		;GAME OVER stuff goes here
0088F458 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
0088F45E                            		
0088F45E                            @ignore:
0088F45E 4E75                       		rts
0088F460                            		
0088F460                            ; ----------------------------------
0088F460                            
0088F460                            PlyrDebugMove:
0088F460 08AE 0005 002D             		bclr	#bitPlyrClimb,plyr_status(a6)
0088F466 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
0088F46C 422E 0022                  		clr.b	obj_col(a6)
0088F470                            		
0088F470 0839 0003 FFFF DE83        		btst	#bitJoyRight,(RAM_Control_1+OnHold)
0088F478 6700                       		beq.s	@DNotRight
0088F47A 06AE 0005 0000 0008        		add.l	#$50000,obj_x(a6)
0088F482 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
0088F488                            @DNotRight:
0088F488 0839 0002 FFFF DE83        		btst	#bitJoyLeft,(RAM_Control_1+OnHold)
0088F490 6700                       		beq.s	@DNotLeft
0088F492 04AE 0005 0000 0008        		sub.l	#$50000,obj_x(a6)
0088F49A 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
0088F4A0                            @DNotLeft:
0088F4A0 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
0088F4A8 6700                       		beq.s	@DNotDown
0088F4AA 06AE 0005 0000 000C        		add.l	#$50000,obj_y(a6)
0088F4B2                            @DNotDown:
0088F4B2 0839 0000 FFFF DE83        		btst	#bitJoyUp,(RAM_Control_1+OnHold)
0088F4BA 6700                       		beq.s	@DNotUp
0088F4BC 04AE 0005 0000 000C        		sub.l	#$50000,obj_y(a6)
0088F4C4                            @DNotUp:
0088F4C4 2D7C 0000 0001 0010        		move.l	#1,obj_x_spd(a6)		;Temporal
0088F4CC 2D7C 0000 0001 0014        		move.l	#1,obj_y_spd(a6)
0088F4D4                            		
0088F4D4 6000 0000                    		bra	Plyr_LvlCamera
0088F4D8                              		
0088F4D8                            ; ----------------------------------
0088F4D8                            ; Player physics
0088F4D8                            ; ----------------------------------
0088F4D8                            
0088F4D8                            PlyrPhysics:
0088F4D8 2C2E 0010                  		move.l	obj_x_spd(a6),d6
0088F4DC 2E2E 0014                  		move.l	obj_y_spd(a6),d7
0088F4E0                            
0088F4E0                            ; ------------------------
0088F4E0                            ; Animation ID
0088F4E0                            ; ------------------------
0088F4E0                            
0088F4E0 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088F4E6 6600                       		bne.s	@walking
0088F4E8 082E 0002 001E             		btst	#bitobj_air,obj_status(a6)
0088F4EE 6600                       		bne.s	@walking
0088F4F0                            
0088F4F0 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
0088F4F6 4A86                       		tst.l	d6
0088F4F8 6600                       		bne.s	@walking
0088F4FA 422E 001A                  		clr.b	obj_anim_id(a6)
0088F4FE                            @walking:
0088F4FE                            
0088F4FE                            ; ***************
0088F4FE                            ; X Speed stuff
0088F4FE                            ; ***************
0088F4FE                            
0088F4FE 6100 0000                  		bsr	@Player_Friction
0088F502 6100 0000                  		bsr	@Player_Walk
0088F506 DDAE 0008                  		add.l	d6,obj_x(a6)			;X + X Speed
0088F50A 6100 0000                  		bsr	PlyrColRead_Wall
0088F50E                            		
0088F50E                            ; ***************
0088F50E                            ; Y Speed stuff
0088F50E                            ; ***************
0088F50E                            ; 
0088F50E 6100 0000                  		bsr	@Player_Jump
0088F512 DFAE 000C                  		add.l	d7,obj_y(a6)			;Y + Y Speed
0088F516 6100 0000                    		bsr	PlyrColRead_Ceiling
0088F51A 6100 0000                  		bsr	PlyrColRead_Floor
0088F51E                            
0088F51E                            ; ***************
0088F51E                            ; Save them
0088F51E                            ; ***************
0088F51E                            
0088F51E 2D46 0010                  		move.l	d6,obj_x_spd(a6)
0088F522 2D47 0014                  		move.l	d7,obj_y_spd(a6)
0088F526                            		
0088F526 6000 0000                   		bra	Plyr_LvlCamera
0088F52A                            	
0088F52A                            ; =================================================================
0088F52A                            ; ------------------------------------------------
0088F52A                            ; Subs
0088F52A                            ; ------------------------------------------------
0088F52A                            
0088F52A                            ; **********************************
0088F52A                            ; Player Walk
0088F52A                            ; **********************************
0088F52A                            
0088F52A                            @Player_Walk:
0088F52A 2806                       		move.l	d6,d4
0088F52C 0839 0003 FFFF DE83        		btst	#bitJoyRight,(RAM_Control_1+OnHold)
0088F534 6700                       		beq.s	@NotRight
0088F536 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088F53C 6600                       		bne.s	@NotMuchRight
0088F53E 7000                       		moveq	#0,d0
0088F540 3039 FFFF BC34             		move.w	(RAM_LvlPlanes+lvl_maxcam_x),d0
0088F546 E948                       		lsl.w	#4,d0
0088F548 322E 0008                  		move.w	obj_x(a6),d1
0088F54C B240                       		cmp.w	d0,d1
0088F54E 6E00                       		bgt.s	@NotRight
0088F550                            	
0088F550                            ; 		tst.l	d4
0088F550                            ; 		bpl.s	@NotRunningR
0088F550 203C 0001 E000             		move.l	#$1E000,d0
0088F556 0839 0004 FFFF DE83         		btst	#bitJoyB,(RAM_Control_1+OnHold)
0088F55E 6700                        		beq.s	@NotRunningR
0088F560 203C 0002 8000              		move.l	#$28000,d0
0088F566                            @NotRunningR:
0088F566                            
0088F566 0686 0000 4800             		add.l	#$4800,d6
0088F56C BC80                       		cmp.l	d0,d6
0088F56E 6D00                       		blt.s	@NotMuchRight
0088F570 2C00                       		move.l	d0,d6
0088F572                            @NotMuchRight:
0088F572 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
0088F578                            
0088F578                            @NotRight:
0088F578 0839 0002 FFFF DE83        		btst	#bitJoyLeft,(RAM_Control_1+OnHold)
0088F580 6700                       		beq.s	@NotLeft
0088F582 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088F588 6600                       		bne.s	@NotMuchLeft
0088F58A 4AAE 0008                  		tst.l	obj_x(a6)
0088F58E 6700                       		beq.s	@NotLeft
0088F590 6B00                       		bmi.s	@NotLeft
0088F592                            		
0088F592                            ; 		tst.l	d4
0088F592                            ; 		bmi.s	@NotRunningL
0088F592 203C FFFE 0000             		move.l	#-$20000,d0
0088F598 0839 0004 FFFF DE83         		btst	#bitJoyB,(RAM_Control_1+OnHold)
0088F5A0 6700                        		beq.s	@NotRunningL
0088F5A2 203C FFFD 0000              		move.l	#-$30000,d0
0088F5A8                            @NotRunningL:
0088F5A8                            
0088F5A8                            		
0088F5A8 0486 0000 4800             		sub.l	#$4800,d6
0088F5AE BC80                       		cmp.l	d0,d6
0088F5B0 6E00                       		bgt.s	@NotMuchLeft
0088F5B2 2C00                       		move.l	d0,d6
0088F5B4                            @NotMuchLeft:
0088F5B4 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
0088F5BA                            @NotLeft:		
0088F5BA 4E75                       		rts
0088F5BC                            		
0088F5BC                            ; **********************************
0088F5BC                            ; Player Friction
0088F5BC                            ; **********************************
0088F5BC                            
0088F5BC                            @Player_Friction:
0088F5BC 283C 0000 2400             		move.l	#$2400,d4			;Friction
0088F5C2 4A86                       		tst.l	d6
0088F5C4 6700                       		beq.s	@FineSpeed
0088F5C6 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
0088F5CC 6600                       		bne.s	@Left
0088F5CE 9C84                       		sub.l	d4,d6
0088F5D0 6A00                       		bpl.s	@FineSpeed
0088F5D2 4286                       		clr.l	d6
0088F5D4 4E75                       		rts
0088F5D6                            @Left:
0088F5D6 DC84                       		add.l	d4,d6
0088F5D8 6B00                       		bmi.s	@FineSpeed
0088F5DA                            		
0088F5DA                            @ignoreR:
0088F5DA 4286                       		clr.l	d6
0088F5DC                            @FineSpeed:	
0088F5DC 4E75                       		rts
0088F5DE                            
0088F5DE                            ; **********************************
0088F5DE                            ; Player jump
0088F5DE                            ; **********************************
0088F5DE                            
0088F5DE                            @Player_Jump:
0088F5DE 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088F5E4 6600                       		bne.s	@JumpFromLadder
0088F5E6 082E 0006 002D             		btst	#bitPlyrCancelY,plyr_status(a6)
0088F5EC 6600                       		bne.s	@JumpFromLadder
0088F5EE                            		
0088F5EE 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
0088F5F6 6700 0000                  		beq	@IsFalling
0088F5FA                            		
0088F5FA 0C6E 000B 0026              		cmp.w	#varJumpTimer,plyr_jumptmr(a6)
0088F600 6600                        		bne.s	@onair
0088F602 082E 0004 0022               		btst	#bitcol_obj,obj_col(a6)
0088F608 6600                           		bne.s	@onair
0088F60A 082E 0000 0022               		btst	#bitcol_floor,obj_col(a6)
0088F610 6700                           		beq.s	@IsFalling
0088F612                            @onair:
0088F612                            
0088F612 046E 0001 0026             		sub.w	#1,plyr_jumptmr(a6)
0088F618 6B00                       		bmi.s	@IsFalling
0088F61A                            
0088F61A 082E 0002 001E              		btst	#bitobj_air,obj_status(a6)
0088F620 6600                        		bne.s	@onair2
0088F622                            
0088F622 1D7C 0002 001A              		move.b	#varPlyAniJump,obj_anim_id(a6)
0088F628 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
0088F62E 08AE 0000 0022                  		bclr	#bitcol_floor,obj_col(a6)
0088F634 08AE 0004 0022                  		bclr	#bitcol_obj,obj_col(a6)
0088F63A 2E3C FFFB E000                		move.l	#-$42000,d7
0088F640 2006                          		move.l	d6,d0
0088F642 E480                          		asr.l	#2,d0
0088F644 4A80                          		tst.l	d0
0088F646 6B00                          		bmi.s	@dontnegx
0088F648 4480                          		neg.l	d0
0088F64A                            @dontnegx:
0088F64A DE80                       		add.l	d0,d7
0088F64C                            		
0088F64C 203C 0000 0000               		move.l	#SndSfx_PlyrJump,d0
0088F652 7201                         		moveq 	#1,d1
0088F654 7401                         		moveq	#1,d2
0088F656 6100 A32A                    		bsr	Audio_Track_play
0088F65A                            @onair2:
0088F65A 4E75                          		rts
0088F65C                              
0088F65C                            ; ----------------------------------
0088F65C                            
0088F65C                            @JumpFromLadder:
0088F65C 0839 0005 FFFF DE85        		btst	#bitJoyC,(RAM_Control_1+OnPress)
0088F664 6700 0000                  		beq	@IsFalling
0088F668                            		
0088F668 08AE 0005 002D             		bclr	#bitPlyrClimb,plyr_status(a6)
0088F66E 08EE 0002 001E              		bset	#bitobj_air,obj_status(a6)
0088F674 1D7C 0002 001A              		move.b	#2,obj_anim_id(a6)
0088F67A 4286                          		clr.l	d6
0088F67C 4287                          		clr.l	d7
0088F67E 4E75                        		rts
0088F680                             		
0088F680                            ; ----------------------------------
0088F680                            
0088F680                            @IsFalling:
0088F680 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088F686 6600                       		bne.s	@low_fall
0088F688 082E 0000 0022                		btst	#bitcol_floor,obj_col(a6)
0088F68E 6600                           		bne.s	@low_fall
0088F690                            
0088F690 0687 0000 4800              		add.l	#$4800,d7
0088F696 0C87 0010 0000             		cmp.l	#$100000,d7
0088F69C 6D00                       		blt.s	@low_fall
0088F69E 2E3C 0010 0000             		move.l	#$100000,d7
0088F6A4                            @low_fall:
0088F6A4 4E75                       		rts
0088F6A6                            		
0088F6A6                            ; **********************************
0088F6A6                            ; Object to Level layout collision
0088F6A6                            ; **********************************
0088F6A6                            
0088F6A6                            ; ----------------------------------
0088F6A6                            ; floor collision
0088F6A6                            ; ----------------------------------
0088F6A6                            
0088F6A6                            PlyrColRead_Floor:
0088F6A6 08AE 0000 0022              		bclr	#bitcol_floor,obj_col(a6)
0088F6AC 08AE 0002 001E              		bclr	#bitobj_air,obj_status(a6)
0088F6B2                             		
0088F6B2 082E 0004 0022              		btst	#bitcol_obj,obj_col(a6)
0088F6B8 6600                        		bne.s	@dont
0088F6BA 08EE 0002 001E              		bset	#bitobj_air,obj_status(a6)
0088F6C0                            @dont:
0088F6C0 08AE 0004 0022              		bclr	#bitcol_obj,obj_col(a6)
0088F6C6                             		
0088F6C6 4A87                       		tst.l	d7
0088F6C8 6B00                       		bmi.s	@going_up
0088F6CA                            
0088F6CA                            ; 		bsr	object_FindPrz_Floor		;TODO: no sirve en prizes
0088F6CA                            ;  		btst	#7,d0
0088F6CA                            ;  		beq.s	@cntrnrml
0088F6CA                            ; 		clr.b	d0
0088F6CA                            ; @cntrnrml:
0088F6CA                            ; 		tst.b	d0
0088F6CA                            ; 		bne	@przfloor_center
0088F6CA                            
0088F6CA 6100 EF32                   		bsr 	object_FindPrz_FloorSides
0088F6CE                             		
0088F6CE 4A00                       		tst.b	d0
0088F6D0 6600 0000                  		bne	@przfloor_right
0088F6D4 2001                       		move.l	d1,d0
0088F6D6 4A00                       		tst.b	d0
0088F6D8 6600 0000                  		bne	@przfloor_left
0088F6DC                            
0088F6DC 6100 ED82                  		bsr	object_FindCol_Floor
0088F6E0 6100 0000                  		bsr	@center_special
0088F6E4 4A00                       		tst.b	d0
0088F6E6 6600                       		bne.s	@found_center
0088F6E8 6100 EF20                   		bsr 	object_FindCol_FloorSides
0088F6EC 6100 0000                  		bsr	@right_special
0088F6F0 4A00                       		tst.b	d0
0088F6F2 6600 0000                  		bne	@found_sides
0088F6F6 2001                       		move.l	d1,d0
0088F6F8 6100 0000                  		bsr	@left_special
0088F6FC 4A00                       		tst.b	d0
0088F6FE 6600 0000                  		bne	@found_sides
0088F702                            @going_up:
0088F702                            
0088F702 4E75                       		rts
0088F704                            		
0088F704                            ; ----------------------------------
0088F704                            
0088F704                            @found_center:
0088F704 0C00 0001                  		cmp.b	#1,d0
0088F708 6700 0000                  		beq	@floorsolid
0088F70C                            
0088F70C 6000                       		bra.s	@SlopeCenter
0088F70E                            		
0088F70E                            ; ----------------------------------
0088F70E                            
0088F70E                            @found_sides:
0088F70E 0C00 0001                  		cmp.b	#1,d0
0088F712 6700 0000                  		beq	@floorsolid
0088F716 4E75                       		rts
0088F718                            
0088F718                            ; ----------------------------------
0088F718                            
0088F718                            @SlopeCenter:
0088F718 4A87                          		tst.l	d7
0088F71A 6B00 0000                     		bmi	@NoCol
0088F71E                               				
0088F71E 222E 000C                     		move.l	obj_y(a6),d1
0088F722 2401                          		move.l	d1,d2
0088F724 47F9 0088 DDCA               		lea	(col_SlopeData),a3
0088F72A 0240 00FF                    		and.w	#$FF,d0
0088F72E 3200                         		move.w	d0,d1
0088F730 E949                         		lsl.w	#4,d1
0088F732 D6C1                         		adda	d1,a3
0088F734 202E 0008                   		move.l	obj_x(a6),d0
0088F738 4840                        		swap	d0
0088F73A 0240 000F                   		and.w	#$F,d0
0088F73E 1033 0000                   		move.b	(a3,d0.w),d0
0088F742 0240 000F                      		and.w	#$F,d0
0088F746 0281 FFF0 0000                 		and.l	#$FFF00000,d1
0088F74C 4840                         		swap	d0
0088F74E 0280 FFFF 0000               		and.l	#$FFFF0000,d0
0088F754 D280                        		add.l	d0,d1
0088F756                             		
0088F756                             		;TODO: no recuerdo pa que
0088F756                             		;era este fix
0088F756                             		; tambien ver que pedo
0088F756                             		; porque dominou no
0088F756                             		; se queda pegado a los slopes
0088F756                             		
0088F756                            ;  		move.l	obj_x_spd(a6),d0
0088F756                            ;  		btst	#bitobj_flipH,obj_status(a6)
0088F756                            ;  		beq.s	@right
0088F756                            ;  		neg.l	d0
0088F756                            ; @right:
0088F756                            ; 		cmp.l	#$20000,d0
0088F756                            ; 		bge.s	@dontchk
0088F756 082E 0002 001E               		btst	#bitobj_air,obj_status(a6)
0088F75C 6700                         		beq.s	@dontchk
0088F75E B481                         		cmp.l	d1,d2
0088F760 6D00                         		blt.s	@NoCol
0088F762                            @dontchk:
0088F762 2E3C 0005 0000              		move.l	#$50000,d7
0088F768 2D41 000C                    		move.l	d1,obj_y(a6)
0088F76C 6100 0000                     		bsr	@objFloorFlags
0088F770                            @NoCol:
0088F770 4E75                       		rts
0088F772                            		
0088F772                            ; ----------------------------------
0088F772                            ; Event block: on floor
0088F772                            ; ----------------------------------
0088F772                            
0088F772                            @center_special:
0088F772 0800 0006                  		btst	#6,d0
0088F776 6700                       		beq.s	@return
0088F778 6100 0000                  		bsr	plyrColEntry
0088F77C 3814                       		move.w	(a4),d4
0088F77E 6000 0000                  		bra	plyrColGo
0088F782                            		
0088F782                            @left_special:
0088F782 0800 0006                  		btst	#6,d0
0088F786 6700                       		beq.s	@return
0088F788 6100 0000                  		bsr	plyrColEntry
0088F78C 382C 0002                  		move.w	2(a4),d4
0088F790 6000 0000                  		bra	plyrColGo
0088F794                            		
0088F794                            @right_special:
0088F794 0800 0006                  		btst	#6,d0
0088F798 6700                       		beq.s	@return
0088F79A 6100 0000                  		bsr	plyrColEntry
0088F79E 382C 0004                  		move.w	4(a4),d4
0088F7A2 6000 0000                  		bra	plyrColGo
0088F7A6                            @return:
0088F7A6 4E75                       		rts
0088F7A8                            
0088F7A8                            ; ----------------------------------
0088F7A8                            ; Prizes on floor
0088F7A8                            ; ----------------------------------
0088F7A8                            
0088F7A8                            @przfloor_center:
0088F7A8                            @przfloor_left:
0088F7A8                            @przfloor_right:
0088F7A8 7801                       		moveq	#1,d4
0088F7AA                            		
0088F7AA 0C00 0020                  		cmp.b	#$20,d0
0088F7AE 6700                       		beq.s	@trampoline
0088F7B0                            		
0088F7B0 0C00 0040                  		cmp.b	#$40,d0		;> $40?
0088F7B4 6D00                       		blt.s	@a_coin
0088F7B6 0200 003F                  		and.b	#$3F,d0
0088F7BA 7801                       		moveq	#1,d4
0088F7BC 4A00                       		tst.b	d0
0088F7BE 6700                       		beq.s	@setcoin
0088F7C0 7805                       		moveq	#5,d4
0088F7C2                            @setcoin:
0088F7C2 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
0088F7C8 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
0088F7D0 6D00                         		blt.s	@dontadd1up
0088F7D2 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
0088F7D8 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
0088F7E0                            @dontadd1up:
0088F7E0                            
0088F7E0 6100 FAE8                  		bsr	Prize_Delete
0088F7E4 6100 E13A                  		bsr	Level_HidePrize
0088F7E8                            		
0088F7E8 203C 0000 0000               		move.l	#SndSfx_COIN,d0
0088F7EE 7202                         		moveq 	#2,d1
0088F7F0 7401                         		moveq	#1,d2
0088F7F2 6100 A18E                    		bsr	Audio_Track_play
0088F7F6 7800                       		moveq	#0,d4
0088F7F8                            @a_coin:
0088F7F8 4A44                       		tst.w	d4
0088F7FA 6600                       		bne.s	@floorsolid
0088F7FC 4E75                       		rts
0088F7FE                            		
0088F7FE                            ; $20
0088F7FE                            
0088F7FE                            @trampoline:
0088F7FE 6100 FA7C                  		bsr	goToTrampolineWhy
0088F802                            		
0088F802 283C FFF9 0000             		move.l	#-$70000,d4
0088F808 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
0088F810 6700                       		beq.s	@dontadd
0088F812 283C FFF7 0000             		move.l	#-$90000,d4
0088F818                            @dontadd:
0088F818 2E04                       		move.l	d4,d7
0088F81A 7801                       		moveq	#1,d4
0088F81C 4E75                       		rts
0088F81E                            		
0088F81E                            ; ----------------------------------
0088F81E                            
0088F81E                            ; @check_prz_id:
0088F81E                            ;    		bsr	Object_PrzActionCeil
0088F81E                            ;   		tst.w	d4
0088F81E                            ;   		bne	@ceilingsolid
0088F81E                            ; 		rts
0088F81E                            		
0088F81E                            ;       	bsr	level_CheckPrize
0088F81E                            ;        	bne	@floorsolid
0088F81E                            ;        	rts
0088F81E                            
0088F81E                            ; ----------------------------------
0088F81E                            		
0088F81E                            @floorsolid:
0088F81E 6100 0000                  		bsr	@objFloorFlags
0088F822 02AE FFF0 0000 000C         		and.l	#$FFF00000,obj_y(a6)
0088F82A 4287                       		clr.l	d7
0088F82C 4E75                       		rts
0088F82E                            
0088F82E                            ; ----------------------------------
0088F82E                            
0088F82E                            @objFloorFlags:
0088F82E 08EE 0000 0022               		bset	#bitcol_floor,obj_col(a6)
0088F834 08AE 0002 001E             		bclr	#bitobj_air,obj_status(a6)
0088F83A                            		
0088F83A 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
0088F842 6600 0000                  		bne	@onhold
0088F846 3D7C 000B 0026                 		move.w	#varJumpTimer,plyr_jumptmr(a6)
0088F84C                            @onhold:
0088F84C 08AE 0005 002D              		bclr	#bitPlyrClimb,plyr_status(a6)
0088F852 08AE 0006 002D             		bclr	#bitPlyrCancelY,plyr_status(a6)
0088F858 4E75                       		rts
0088F85A                            		
0088F85A                            ; ----------------------------------
0088F85A                            ; ceiling collision
0088F85A                            ; ----------------------------------
0088F85A                            
0088F85A                            PlyrColRead_Ceiling:
0088F85A 08AE 0001 0022             		bclr	#bitcol_ceiling,obj_col(a6)
0088F860 4A87                       		tst.l	d7
0088F862 6A00                       		bpl.s	@doing_down
0088F864                            		
0088F864 6100 F128                   		bsr 	object_FindCol_CeilingSides
0088F868 2400                        		move.l	d0,d2
0088F86A 2601                        		move.l	d1,d3
0088F86C 6100 F114                   		bsr 	object_FindPrz_CeilingSides
0088F870 4A00                       		tst.b	d0
0088F872 6600 0000                  		bne	@przceil_right
0088F876 2002                       		move.l	d2,d0
0088F878 6100 0000                  		bsr	@right_special
0088F87C 4A00                       		tst.b	d0
0088F87E 6600 0000                   		bne	@ceiling_sides
0088F882 2001                       		move.l	d1,d0
0088F884 4A00                       		tst.b	d0
0088F886 6600 0000                  		bne	@przceil_left
0088F88A 2003                       		move.l	d3,d0
0088F88C 6100 0000                  		bsr	@left_special
0088F890 4A00                       		tst.b	d0
0088F892 6600 0000                  		bne	@ceiling_sides
0088F896                            		
0088F896 6100 ECF6                  		bsr	object_FindPrz_Ceiling
0088F89A 4A00                       		tst.b	d0
0088F89C 6600 0000                  		bne	@przceil_center
0088F8A0 6100 ECF8                  		bsr	object_FindCol_Ceiling
0088F8A4 6100 0000                  		bsr	@center_special
0088F8A8 4A00                       		tst.b	d0
0088F8AA 6600                       		bne.s	@ceiling_center
0088F8AC                            		
0088F8AC                            @doing_down:
0088F8AC 4E75                       		rts
0088F8AE                            
0088F8AE                            ; ----------------------------------
0088F8AE                            
0088F8AE                            @ceiling_center:
0088F8AE                            @ceiling_sides:
0088F8AE 0C00 0001                  		cmp.b	#1,d0
0088F8B2 6700                       		beq.s	@ceilingsolid_stop
0088F8B4 4E75                       		rts
0088F8B6                            
0088F8B6                            ; ----------------------------------
0088F8B6                            
0088F8B6                            @ceilingsolid_stop:
0088F8B6 2E3C 0001 0000             		move.l	#$10000,d7
0088F8BC 066E 0010 000C                     	add.w	#$10,obj_y(a6)
0088F8C2 02AE FFF0 0000 000C        		and.l	#$FFF00000,obj_y(a6)
0088F8CA                            
0088F8CA                            @ceilingsolid:
0088F8CA 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
0088F8D0 08EE 0001 0022              		bset	#bitcol_ceiling,obj_col(a6)
0088F8D6 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
0088F8DC 4E75                        		rts
0088F8DE                            		
0088F8DE                            ; ----------------------------------
0088F8DE                            ; Event block: ceiling
0088F8DE                            ; ----------------------------------
0088F8DE                            
0088F8DE                            @center_special:
0088F8DE 0800 0006                  		btst	#6,d0
0088F8E2 6700                       		beq.s	@return
0088F8E4 6100 0000                  		bsr	plyrColEntry
0088F8E8 382C 000C                  		move.w	$C(a4),d4
0088F8EC 6000 0000                  		bra	plyrColGo
0088F8F0                            		
0088F8F0                            @left_special:
0088F8F0 0800 0006                  		btst	#6,d0
0088F8F4 6700                       		beq.s	@return
0088F8F6 6100 0000                  		bsr	plyrColEntry
0088F8FA 382C 000E                  		move.w	$E(a4),d4
0088F8FE 6000 0000                  		bra	plyrColGo
0088F902                            		
0088F902                            @right_special:
0088F902 0800 0006                  		btst	#6,d0
0088F906 6700                       		beq.s	@return
0088F908 6100 0000                  		bsr	plyrColEntry
0088F90C 382C 0010                  		move.w	$10(a4),d4
0088F910 6000 0000                  		bra	plyrColGo
0088F914                            		
0088F914                            @return:
0088F914 4E75                       		rts
0088F916                            		
0088F916                            ; ----------------------------------
0088F916                            
0088F916                            @przceil_center:
0088F916                            @przceil_left:
0088F916                            @przceil_right:
0088F916 6100 F612                     		bsr	Object_PrzActionCeil
0088F91A 4A44                         		tst.w	d4
0088F91C 6600 FFAC                    		bne	@ceilingsolid
0088F920 4E75                       		rts
0088F922                            		
0088F922                            ; ----------------------------------
0088F922                            ; d0 - LEFT
0088F922                            ; d1 - RIGHT
0088F922                            ; d2 - CENTER
0088F922                            ; ----------------------------------
0088F922                            
0088F922                            ; @prizes_ceiling:
0088F922                            ; 		move.l	d0,d3
0088F922                            ; 		btst	#bitobj_flipH,obj_status(a6)
0088F922                            ; 		beq.s	@itsleft
0088F922                            ; 		exg.l	d1,d3
0088F922                            ; @itsleft:
0088F922                            ; 
0088F922                            ;    		move.l	d2,d0
0088F922                            ;    		tst.b	d0
0088F922                            ;    		beq.s	@przc_no_c
0088F922                            ;   		bsr	Object_PrzActionCeil
0088F922                            ;  		tst.w	d4
0088F922                            ;  		bne	@ceilingsolid
0088F922                            ; @przc_no_c:
0088F922                            ; 
0088F922                            ; 		move.l	d1,d0
0088F922                            ; 		tst.b	d0
0088F922                            ; 		beq.s	@przc_no_r
0088F922                            ; 		bsr	Object_PrzActionCeil
0088F922                            ; 		tst.w	d4
0088F922                            ; 		bne	@ceilingsolid
0088F922                            ; @przc_no_r:
0088F922                            ;  		move.l	d3,d0
0088F922                            ;  		tst.b	d0
0088F922                            ;  		beq.s	@przc_no_l
0088F922                            ;  		bsr	Object_PrzActionCeil
0088F922                            ; 		tst.w	d4
0088F922                            ; 		bne	@ceilingsolid
0088F922                            ; @przc_no_l:
0088F922                            ; 		rts
0088F922                            		
0088F922                            ; **********************************
0088F922                            ; Wall collision
0088F922                            ; **********************************
0088F922                            
0088F922                            PlyrColRead_Wall:
0088F922 08AE 0002 0022             		bclr	#bitcol_wall_r,obj_col(a6)
0088F928 08AE 0003 0022             		bclr	#bitcol_wall_l,obj_col(a6)
0088F92E                            		
0088F92E                            		; Ignorar PRIZEs si Player esta
0088F92E                            		; en modo escalera
0088F92E 082E 0005 002D              		btst	#bitPlyrClimb,plyr_status(a6)
0088F934 6600                        		bne.s	@okaydntchk
0088F936 6100 EB8A                  		bsr	object_FindPrz_Wall
0088F93A 2400                       		move.l	d0,d2
0088F93C 6100 EDD4                  		bsr	object_FindPrz_WallSides
0088F940 0800 0007                   		btst	#7,d0
0088F944 6700                        		beq.s	@righthidn
0088F946 4200                        		clr.b	d0
0088F948                            @righthidn:
0088F948 4A00                       		tst.b	d0
0088F94A 6600 0000                  		bne	@przwall_right
0088F94E 2001                       		move.l	d1,d0
0088F950 0800 0007                   		btst	#7,d0
0088F954 6700                        		beq.s	@lefthidn
0088F956 4200                        		clr.b	d0
0088F958                            @lefthidn:
0088F958 4A00                       		tst.b	d0
0088F95A 6600 0000                  		bne	@przwall_left
0088F95E                            @okaydntchk:
0088F95E                            
0088F95E 6100 EB6E                  		bsr	object_FindCol_Wall
0088F962 6100 0000                  		bsr	@center_special
0088F966 4A00                       		tst.b	d0
0088F968 6600                       		bne.s	@wall_center
0088F96A                            		
0088F96A 6100 EDB2                   		bsr 	object_FindCol_WallSides
0088F96E 6100 0000                  		bsr	@right_special
0088F972 4A00                       		tst.b	d0
0088F974 6600 0000                  		bne	@wall_right
0088F978                            		
0088F978 2001                       		move.l	d1,d0
0088F97A 6100 0000                  		bsr	@left_special
0088F97E 4A00                       		tst.b	d0
0088F980 6600 0000                  		bne	@wall_left
0088F984 4E75                       		rts
0088F986                            		
0088F986                            ; ----------------------------------
0088F986                            
0088F986                            @wall_center:
0088F986 0C40 0001                  		cmp.w	#1,d0
0088F98A 6700 0000                   		beq	@wallsolid_slope
0088F98E                            		
0088F98E 4A87                       		tst.l	d7
0088F990 6B00                       		bmi.s	@NoCol_LR
0088F992 082E 0002 001E                		btst	#bitobj_air,obj_status(a6)
0088F998 6600                          		bne.s	@NoCol_LR
0088F99A 4287                           		clr.l	d7	
0088F99C 08AE 0002 001E                 		bclr	#bitobj_air,obj_status(a6)
0088F9A2                                		
0088F9A2 322E 000C                  		move.w	obj_y(a6),d1
0088F9A6 0441 0001                  		sub.w	#1,d1
0088F9AA 3601                       		move.w	d1,d3
0088F9AC 0241 FFF0                  		and.w	#$FFF0,d1 		
0088F9B0 47F9 0088 DDCA                  		lea	(col_SlopeData),a3
0088F9B6 0240 00FF                        		and.w	#$FF,d0
0088F9BA E948                            		lsl.w	#4,d0
0088F9BC D6C0                             		adda	d0,a3
0088F9BE 302E 0008                        		move.w	obj_x(a6),d0
0088F9C2 0240 000F                        		and.w	#$F,d0
0088F9C6 1433 0000                        		move.b	(a3,d0.w),d2
0088F9CA 0242 000F                        		and.w	#$F,d2
0088F9CE D242                             		add.w	d2,d1
0088F9D0                                  		
0088F9D0 082E 0002 001E              		btst	#bitobj_air,obj_status(a6)
0088F9D6 6700                       		beq.s	@dontchkLR
0088F9D8 B641                         		cmp.w	d1,d3
0088F9DA 6D00                         		blt.s	@NoCol_LR
0088F9DC                            @dontchkLR:
0088F9DC 3D41 000C                     		move.w	d1,obj_y(a6)
0088F9E0                            
0088F9E0                            @NoCol_LR:
0088F9E0 4E75                       		rts
0088F9E2                            
0088F9E2                            ; ----------------------------------
0088F9E2                            ; Prizes on walls
0088F9E2                            ; ----------------------------------	
0088F9E2                            
0088F9E2                            @przwall_left:
0088F9E2 6100 0000                  		bsr	@check_wll_prz
0088F9E6 4A44                          		tst.w	d4
0088F9E8 6600 0000                     		bne	@wallsolid_l
0088F9EC 4E75                       		rts
0088F9EE                            @przwall_right:
0088F9EE 6100 0000                  		bsr	@check_wll_prz
0088F9F2 4A44                          		tst.w	d4
0088F9F4 6600 0000                     		bne	@wallsolid_r
0088F9F8 4E75                       		rts
0088F9FA                            	
0088F9FA                            ; ----------------------------------
0088F9FA                            
0088F9FA                            @check_wll_prz:
0088F9FA 7801                       		moveq	#1,d4
0088F9FC                            		
0088F9FC 0C00 0020                  		cmp.b	#$20,d0
0088FA00 6700                       		beq.s	@trampolinewll
0088FA02                            		
0088FA02 0C00 0040                  		cmp.b	#$40,d0		;> $40?
0088FA06 6D00                       		blt.s	@notcoin
0088FA08 0200 003F                  		and.b	#$3F,d0
0088FA0C 7801                       		moveq	#1,d4
0088FA0E 4A00                       		tst.b	d0
0088FA10 6700                       		beq.s	@setcoin
0088FA12 7805                       		moveq	#5,d4
0088FA14                            @setcoin:
0088FA14 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
0088FA1A 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
0088FA22 6D00                         		blt.s	@dontadd1up2
0088FA24 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
0088FA2A 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
0088FA32                              		
0088FA32 2800                         		move.l	d0,d4
0088FA34 203C 0000 0000               		move.l	#SndSfx_OneUp,d0
0088FA3A 7200                         		moveq 	#0,d1
0088FA3C 7401                         		moveq	#1,d2
0088FA3E 6100 9F42                    		bsr	Audio_Track_play
0088FA42 2004                         		move.l	d4,d0
0088FA44                            @dontadd1up2:
0088FA44                            
0088FA44 6100 F884                  		bsr	Prize_Delete
0088FA48 6100 DED6                  		bsr	Level_HidePrize
0088FA4C                            ; 		move.l	d0,(RAM_LvlPlanes+lvl_przreq)
0088FA4C                            ; 		bset	#bitLvlHidePrz,(RAM_LvlPlanes+lvl_flags)
0088FA4C                            
0088FA4C 203C 0000 0000               		move.l	#SndSfx_COIN,d0
0088FA52 7202                         		moveq 	#2,d1
0088FA54 7401                         		moveq	#1,d2
0088FA56 6100 9F2A                    		bsr	Audio_Track_play
0088FA5A 7800                       		moveq	#0,d4
0088FA5C                            		
0088FA5C                            @notcoin:
0088FA5C 4E75                       		rts
0088FA5E                            		
0088FA5E                            @trampolinewll:
0088FA5E                            ; 		bsr	goToTrampolineWhy
0088FA5E                            
0088FA5E                            ; 		and.w	#$FFF8,obj_x(a6)
0088FA5E                            		
0088FA5E                            ; 		move.l	#-$80000,d0
0088FA5E                            ; 		btst	#bitobj_flipH,obj_status(a6)
0088FA5E                            ; 		bne.s	@lefty
0088FA5E                            ; 		tst.l	d6
0088FA5E                            ; 		bpl.s	@righy
0088FA5E                            ; @lefty:
0088FA5E                            ; 		neg.l	d0
0088FA5E                            ; @righy:
0088FA5E                            ; 		move.l	d0,d6
0088FA5E 7801                       		moveq	#1,d4
0088FA60 4E75                       		rts
0088FA62                            		
0088FA62                            ; ----------------------------------
0088FA62                            
0088FA62                            @wall_right:
0088FA62                            ; 		btst	#bitobj_flipH,obj_status(a6)
0088FA62                            ; 		bne.s	@return_w
0088FA62 0C00 0002                    		cmp.b	#2,d0
0088FA66 6C00                         		bge.s	@return_w
0088FA68 0C00 0001                   		cmp.b	#1,d0
0088FA6C 6700                         		beq.s	@wallsolid_r
0088FA6E 4E75                         		rts
0088FA70                              		
0088FA70                            @wall_left:
0088FA70                            ; 		btst	#bitobj_flipH,obj_status(a6)
0088FA70                            ; 		beq.s	@return_w
0088FA70 0C00 0002                    		cmp.b	#2,d0
0088FA74 6C00                         		bge.s	@return_w
0088FA76 0C00 0001                    		cmp.b	#1,d0
0088FA7A 6700                         		beq.s	@wallsolid_l
0088FA7C                            @return_w:
0088FA7C 4E75                       		rts
0088FA7E                            		
0088FA7E                            ; ----------------------------------
0088FA7E                            
0088FA7E                            @wallsolid_r:
0088FA7E 026E FFF8 0008             		and.w	#$FFF8,obj_x(a6)
0088FA84                            		
0088FA84 4286                       		clr.l	d6
0088FA86 08EE 0002 0022             		bset	#bitcol_wall_r,obj_col(a6)
0088FA8C 4E75                       		rts
0088FA8E                            
0088FA8E                            ; ----------------------------------
0088FA8E                            
0088FA8E                            @wallsolid_l:
0088FA8E 066E 0004 0008             		add.w	#4,obj_x(a6)
0088FA94 026E FFF8 0008             		and.w	#$FFF8,obj_x(a6)
0088FA9A                            		
0088FA9A                            ; 		moveq	#0,d4
0088FA9A                            ; 		move.b	obj_size(a6),d4
0088FA9A                            ; 		lsl.w	#3,d4
0088FA9A                            ; 		move.w	obj_x(a6),d5
0088FA9A                            ; 		sub.w	#1,d5
0088FA9A                            ; 		sub.w	d4,d5
0088FA9A                            ; 		tst.w	d5
0088FA9A                            ; 		bpl.s	@noleftlvl
0088FA9A                            ; 		
0088FA9A                            ; 		moveq	#0,d0
0088FA9A                            ; 		add.w	d4,d0
0088FA9A                            ; 		move.w	d0,obj_x(a6)
0088FA9A                            ; 		bra.s	@leftend
0088FA9A                            ; @noleftlvl:
0088FA9A                            ; 		move.l	d0,d2
0088FA9A                            ; 		swap	d2
0088FA9A                            ; 		and.w	#$FFF0,d2
0088FA9A                            ; 		add.w	#$10,d2
0088FA9A                            ; 		add.w	#8,d2
0088FA9A                            ; 		move.w	d2,obj_x(a6)
0088FA9A                            ; @leftend:
0088FA9A 4286                       		clr.l	d6
0088FA9C 08EE 0003 0022             		bset	#bitcol_wall_l,obj_col(a6)
0088FAA2 4E75                       		rts
0088FAA4                            
0088FAA4                            ; ----------------------------------
0088FAA4                            
0088FAA4                            @wallsolid_slope:
0088FAA4 082E 0000 001E                  		btst	#bitobj_flipH,obj_status(a6)
0088FAAA 6600                       		bne.s	@wllflg_l
0088FAAC 08EE 0002 0022             		bset	#bitcol_wall_r,obj_col(a6)
0088FAB2 4E75                       		rts
0088FAB4                            @wllflg_l:
0088FAB4 08EE 0003 0022             		bset	#bitcol_wall_l,obj_col(a6)
0088FABA 4E75                       		rts
0088FABC                             		
0088FABC                            ; ----------------------------------
0088FABC                            ; Event block: on wall
0088FABC                            ; ----------------------------------
0088FABC                            
0088FABC                            @center_special:
0088FABC 0800 0006                  		btst	#6,d0
0088FAC0 6700                       		beq.s	@return
0088FAC2 6100 0000                  		bsr	plyrColEntry
0088FAC6 382C 0006                  		move.w	6(a4),d4
0088FACA 6000 0000                  		bra	plyrColGo
0088FACE                            		
0088FACE                            @left_special:
0088FACE 0800 0006                  		btst	#6,d0
0088FAD2 6700                       		beq.s	@return
0088FAD4 6100 0000                  		bsr	plyrColEntry
0088FAD8 382C 0008                  		move.w	8(a4),d4
0088FADC 6000 0000                  		bra	plyrColGo
0088FAE0                            		
0088FAE0                            @right_special:
0088FAE0 0800 0006                  		btst	#6,d0
0088FAE4 6700                       		beq.s	@return
0088FAE6 6100 0000                  		bsr	plyrColEntry
0088FAEA 382C 000A                  		move.w	$A(a4),d4
0088FAEE 6000 0000                  		bra	plyrColGo
0088FAF2                            		
0088FAF2                            @return:
0088FAF2 4E75                       		rts
0088FAF4                            		
0088FAF4                            ; ---------------------------------------------
0088FAF4                            ; EVENT BLOCKS ($80+)
0088FAF4                            ; ---------------------------------------------
0088FAF4                            
0088FAF4                            plyrColEntry:
0088FAF4 2800                       		move.l	d0,d4
0088FAF6 0244 003F                  		and.w	#$3F,d4
0088FAFA C8FC 0012                  		mulu.w	#$12,d4
0088FAFE 49FA 0000                  		lea	plyEvnList(pc),a4
0088FB02 D8C4                       		adda	d4,a4
0088FB04 4E75                       		rts
0088FB06                            plyrColGo:
0088FB06 0284 0000 FFFF             		and.l	#$FFFF,d4
0088FB0C 0684 0000 0000             		add.l	#plyEvnList,d4
0088FB12 2844                       		movea.l	d4,a4
0088FB14 4ED4                       		jmp	(a4)
0088FB16                            	
0088FB16                            ; ---------------------------------------------
0088FB16                            ;   Floor Center |   Floor Left |   Floor Right
0088FB16                            ;    Wall Center |    Wall Left |    Wall Right
0088FB16                            ; Ceiling Center | Ceiling Left | Ceiling Right
0088FB16                            ; 
0088FB16                            ; d0 - Return collision (xpos|ypos|byte)
0088FB16                            ; DO NOT USE d1 WHILE CHECKING SIDES
0088FB16                            ; ---------------------------------------------
0088FB16                            
0088FB16                            plyEvnList:
0088FB16                            	; $40 - Exit level (old)
0088FB16 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
0088FB1C 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
0088FB22 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
0088FB28                            	; $41 - Ladder (climbing mode)
0088FB28 0000 0000 0000             	dc.w @event41_flr-plyEvnList,@event41_flrsd-plyEvnList,@event41_flrsd-plyEvnList
0088FB2E 0000 0000 0000             	dc.w @event41_wll-plyEvnList,       @unused-plyEvnList,       @unused-plyEvnList
0088FB34 0000 0000 0000             	dc.w      @unused-plyEvnList,       @unused-plyEvnList,       @unused-plyEvnList
0088FB3A                            	; $42 - Spikes (Up)
0088FB3A 0000 0000 0000             	dc.w @event42-plyEvnList,@event42-plyEvnList,@event42-plyEvnList
0088FB40 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FB46 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FB4C                            	;$83
0088FB4C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB52 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB58 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB5E                            	;$84
0088FB5E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB64 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB6A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB70                            	;$85
0088FB70 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB76 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB7C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB82                            	;$86
0088FB82 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB88 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB8E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB94                            	;$87
0088FB94 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB9A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBA0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBA6                            	;$88
0088FBA6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBAC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBB2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBB8                            	;$89
0088FBB8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBBE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBC4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBCA                            	;$8A
0088FBCA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBD0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBD6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBDC                            	;$8B
0088FBDC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBE2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBE8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBEE                            	;$8C
0088FBEE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBF4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBFA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC00                            	;$8D
0088FC00 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC06 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC0C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC12                            	;$8E
0088FC12 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC18 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC1E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC24                            	;$8F
0088FC24 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC2A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC30 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC36                            	
0088FC36                            	;$90
0088FC36 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
0088FC3C 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
0088FC42 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
0088FC48                            	;$91
0088FC48 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
0088FC4E 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
0088FC54 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
0088FC5A                            	;$92
0088FC5A 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
0088FC60 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
0088FC66 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
0088FC6C                            	;$93
0088FC6C 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
0088FC72 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
0088FC78 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
0088FC7E                            	;$94
0088FC7E 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FC84 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FC8A 0000 0000 0000             	dc.w @event54_cei-plyEvnList,@event54_cei-plyEvnList,@event54_cei-plyEvnList
0088FC90                            	;$95
0088FC90 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FC96 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FC9C 0000 0000 0000             	dc.w @event55_cei-plyEvnList,@event55_cei-plyEvnList,@event55_cei-plyEvnList
0088FCA2                            	;$96
0088FCA2 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FCA8 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FCAE 0000 0000 0000             	dc.w @event56_cei-plyEvnList,@event56_cei-plyEvnList,@event56_cei-plyEvnList
0088FCB4                            	;$97
0088FCB4 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FCBA 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FCC0 0000 0000 0000             	dc.w @event57_cei-plyEvnList,@event57_cei-plyEvnList,@event57_cei-plyEvnList
0088FCC6                            	;$98
0088FCC6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FCCC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FCD2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FCD8                            	;$99
0088FCD8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FCDE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FCE4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FCEA                            	;$9A
0088FCEA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FCF0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FCF6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FCFC                            	;$9B
0088FCFC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD02 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD08 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD0E                            	;$9C
0088FD0E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD14 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD1A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD20                            	;$9D
0088FD20 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD26 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD2C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD32                            	;$9E
0088FD32 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD38 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD3E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD44                            	;$9F
0088FD44 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD4A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD50 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD56                            
0088FD56                            	;$A0
0088FD56 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD5C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD62 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD68                            	;$A1
0088FD68 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD6E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD74 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD7A                            	;$A2
0088FD7A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD80 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD86 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD8C                            	;$A3
0088FD8C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD92 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD98 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD9E                            	;$A4
0088FD9E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDA4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDAA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDB0                            	;$A5
0088FDB0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDB6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDBC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDC2                            	;$A6
0088FDC2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDC8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDCE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDD4                            	;$A7
0088FDD4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDDA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDE0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDE6                            	;$A8
0088FDE6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDEC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDF2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDF8                            	;$A9
0088FDF8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDFE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE04 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE0A                            	;$AA
0088FE0A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE10 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE16 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE1C                            	;$AB
0088FE1C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE22 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE28 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE2E                            	;$AC
0088FE2E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE34 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE3A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE40                            	;$AD
0088FE40 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE46 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE4C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE52                            	;$AE
0088FE52 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE58 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE5E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE64                            	;$AF
0088FE64 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE6A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE70 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE76                            		
0088FE76                            ; ----------------------------------
0088FE76                            ; EVENT $80
0088FE76                            ; ----------------------------------
0088FE76                            
0088FE76                            @event40:
0088FE76 4200                       		clr.b	d0
0088FE78 4A39 FFFF DE4C             		tst.b	(RAM_ModeReset)
0088FE7E 6600                       		bne.s	@already
0088FE80 0679 0001 FFFF DC06          		add.w	#1,(RAM_CurrLevel)
0088FE88 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
0088FE90                            @already:
0088FE90 4E75                       		rts
0088FE92                            		
0088FE92                            ; ----------------------------------
0088FE92                            ; EVENT $41
0088FE92                            ; ----------------------------------
0088FE92                            
0088FE92                            @event41_flr:
0088FE92 4282                       		clr.l	d2
0088FE94 6100 EBFE                  		bsr	object_FindCol_Center
0088FE98 0C00 0041                  		cmp.b	#$41,d0
0088FE9C 6700 0000                  		beq	@unused_flag
0088FEA0 7401                       		moveq	#1,d2	
0088FEA2                            @notclimb:
0088FEA2                            
0088FEA2                            		
0088FEA2 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
0088FEAA 6700 0000                  		beq	@unused_flag
0088FEAE                            		
0088FEAE 2400                       		move.l	d0,d2
0088FEB0 6100 E758                  		bsr	object_FindCol_FloorSides
0088FEB4 0C00 0041                  		cmp.b	#$41,d0
0088FEB8 6700                       		beq.s	@usethis
0088FEBA 2001                       		move.l	d1,d0
0088FEBC 0C00 0041                  		cmp.b	#$41,d0
0088FEC0 6700                       		beq.s	@usethis
0088FEC2 2002                       		move.l	d2,d0
0088FEC4                            @usethis:
0088FEC4 4286                       		clr.l	d6
0088FEC6 4287                       		clr.l	d7
0088FEC8 0280 FFF0 0000             		and.l	#$FFF00000,d0
0088FECE 0680 0008 0000             		add.l	#$80000,d0
0088FED4 2D40 0008                  		move.l	d0,obj_x(a6)
0088FED8 08EE 0005 002D             		bset	#bitPlyrClimb,plyr_status(a6)
0088FEDE 08AE 0000 0022             		bclr	#bitcol_floor,obj_col(a6)
0088FEE4 1D7C 0004 001A               		move.b	#4,obj_anim_id(a6)
0088FEEA 1D7C 000C 0020              		move.b	#12,obj_frame(a6)		;FRAME 12
0088FEF0 066E 0008 000C             		add.w	#8,obj_y(a6)
0088FEF6 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
0088FEFC                            
0088FEFC                            ; 		clr.l	d0
0088FEFC 4E75                       		rts
0088FEFE                             		
0088FEFE                            ; --------------------
0088FEFE                            
0088FEFE                            @event41_flrsd:
0088FEFE                            ; 		clr.l	d0
0088FEFE                            ; 		rts
0088FEFE                            		
0088FEFE                            ; --------------------
0088FEFE                            
0088FEFE                            @event41_cei:
0088FEFE 4280                       		clr.l	d0
0088FF00 4E75                       		rts
0088FF02                            		
0088FF02                            ; --------------------
0088FF02                            
0088FF02                            @event41_wll:
0088FF02                            ;  		clr.l	d0
0088FF02 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088FF08 6700                       		beq.s	@notwaitclmb
0088FF0A 1D7C 00FF 001A              		move.b	#-1,obj_anim_id(a6)
0088FF10 4286                       		clr.l	d6
0088FF12 4287                       		clr.l	d7
0088FF14                            @notwaitclmb:
0088FF14                            ; 		move.l	d0,d2
0088FF14 0839 0000 FFFF DE83         		btst	#bitJoyUp,(RAM_Control_1+OnHold)
0088FF1C 6700                        		beq.s	@dontclimb
0088FF1E 1D7C 0004 001A               		move.b	#4,obj_anim_id(a6)
0088FF24 082E 0005 002D              		btst	#bitPlyrClimb,plyr_status(a6)
0088FF2A 6600                        		bne.s	@alrdup
0088FF2C                             		
0088FF2C 6100 EB66                    		bsr	object_FindCol_Center
0088FF30 0C00 0041                   		cmp.b	#$41,d0
0088FF34 6700                        		beq.s	@canclimb
0088FF36 6100 E528                     		bsr	object_FindCol_Floor
0088FF3A 0C00 0041                   		cmp.b	#$41,d0
0088FF3E 6600                        		bne.s	@dontclimb
0088FF40                            @canclimb:
0088FF40 0280 FFF0 0000              		and.l	#$FFF00000,d0
0088FF46 0680 0008 0000               		add.l	#$80000,d0
0088FF4C 2D40 0008                   		move.l	d0,obj_x(a6)
0088FF50                             		
0088FF50                            @alrdup:
0088FF50 04AE 0001 6000 000C         		sub.l	#$16000,obj_y(a6)
0088FF58 4286                        		clr.l	d6
0088FF5A 4287                        		clr.l	d7
0088FF5C 08EE 0005 002D               		bset	#bitPlyrClimb,plyr_status(a6)
0088FF62 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
0088FF68                             
0088FF68                            @dontclimb:
0088FF68 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
0088FF70 6700                       		beq.s	@dontclimbd
0088FF72                            		
0088FF72 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088FF78 6600                       		bne.s	@alrddwn
0088FF7A 6100 EB18                  		bsr	object_FindCol_Center
0088FF7E 0C00 0041                  		cmp.b	#$41,d0
0088FF82 6600                       		bne.s	@dontclimbd
0088FF84 0280 FFF0 0000             		and.l	#$FFF00000,d0
0088FF8A 0680 0008 0000              		add.l	#$80000,d0
0088FF90 2D40 0008                  		move.l	d0,obj_x(a6)
0088FF94                            @alrddwn:
0088FF94 06AE 0001 6000 000C        		add.l	#$16000,obj_y(a6)
0088FF9C 4286                       		clr.l	d6
0088FF9E 4287                       		clr.l	d7
0088FFA0 08EE 0005 002D              		bset	#bitPlyrClimb,plyr_status(a6)
0088FFA6 1D7C 0004 001A              		move.b	#4,obj_anim_id(a6)
0088FFAC 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
0088FFB2                            @dontclimbd:
0088FFB2                            
0088FFB2 4280                       		clr.l	d0
0088FFB4 4E75                       		rts
0088FFB6                            
0088FFB6                            ; --------------------
0088FFB6                            
0088FFB6                            @unused_flag:
0088FFB6 1002                        		move.b	d2,d0
0088FFB8 4E75                        		rts
0088FFBA                            
0088FFBA                            ; ----------------------------------
0088FFBA                            ; EVENT $82
0088FFBA                            ; ----------------------------------
0088FFBA                            
0088FFBA                            @event42:
0088FFBA 08EE 0003 001E             		bset	#bitobj_hurt,obj_status(a6)
0088FFC0                            		
0088FFC0 103C 0001                  		move.b	#1,d0
0088FFC4 4E75                       		rts
0088FFC6                            		
0088FFC6                            ; ----------------------------------
0088FFC6                            ; EVENT $90
0088FFC6                            ;
0088FFC6                            ; CHECKS COLOR
0088FFC6                            ; ----------------------------------
0088FFC6                            
0088FFC6                            @event50_check:
0088FFC6 0C79 000E FFFF E8F6        		cmp.w	#$00E,(RAM_Palette+$26)
0088FFCE 6700 0000                  		beq	@event_solid
0088FFD2 6000 0000                  		bra	@unused
0088FFD6                            
0088FFD6                            ; ----------------------------------
0088FFD6                            ; EVENT $91
0088FFD6                            ;
0088FFD6                            ; CHECKS COLOR
0088FFD6                            ; ----------------------------------
0088FFD6                            
0088FFD6                            @event51_check:
0088FFD6 0C79 0E00 FFFF E8FC        		cmp.w	#$E00,(RAM_Palette+$2C)
0088FFDE 6700 0000                  		beq	@event_solid
0088FFE2 6000 0000                  		bra	@unused
0088FFE6                            		
0088FFE6                            ; ----------------------------------
0088FFE6                            ; EVENT $92
0088FFE6                            ;
0088FFE6                            ; CHECKS COLOR
0088FFE6                            ; ----------------------------------
0088FFE6                            
0088FFE6                            @event52_check:
0088FFE6 0C79 00E0 FFFF E902        		cmp.w	#$0E0,(RAM_Palette+$32)
0088FFEE 6700 0000                  		beq	@event_solid
0088FFF2 6000 0000                  		bra	@unused
0088FFF6                            
0088FFF6                            ; ----------------------------------
0088FFF6                            ; EVENT $93
0088FFF6                            ;
0088FFF6                            ; CHECKS COLOR
0088FFF6                            ; ----------------------------------
0088FFF6                            
0088FFF6                            @event53_check:
0088FFF6 0C79 00EE FFFF E908        		cmp.w	#$0EE,(RAM_Palette+$38)
0088FFFE 6700 0000                  		beq	@event_solid
00890002 6000 0000                  		bra	@unused
00890006                            		
00890006                            ; ----------------------------------
00890006                            ; EVENT $94
00890006                            ; 
00890006                            ; CHECKS COLOR
00890006                            ; ----------------------------------
00890006                            
00890006                            @event54_cei:
00890006 243C 0323 1102             		move.l	#$03231102,d2
0089000C 0C79 000E FFFF E8F6        		cmp.w	#$00E,(RAM_Palette+$26)
00890014 6600                       		bne.s	@fade_this
00890016 243C 0423 1102             		move.l	#$04231102,d2
0089001C                            @fade_this:
0089001C 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00890022 6600                       		bne.s	@busy_pal
00890024 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
0089002A                            @busy_pal:
0089002A 103C 0001                  		move.b	#1,d0
0089002E 4E75                       		rts
00890030                            
00890030                            ; ----------------------------------
00890030                            ; EVENT $95
00890030                            ; 
00890030                            ; CHECKS COLOR
00890030                            ; ----------------------------------
00890030                            
00890030                            @event55_cei:
00890030 243C 0383 1402             		move.l	#$03831402,d2
00890036 0C79 0E00 FFFF E8FC        		cmp.w	#$E00,(RAM_Palette+$2C)
0089003E 6600                       		bne.s	@fade_this_b
00890040 243C 0483 1402             		move.l	#$04831402,d2
00890046                            @fade_this_b:
00890046 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
0089004C 6600                       		bne.s	@busy_pal_b
0089004E 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
00890054                            @busy_pal_b:
00890054 103C 0001                  		move.b	#1,d0
00890058 4E75                       		rts
0089005A                            	
0089005A                            ; ----------------------------------
0089005A                            ; EVENT $96
0089005A                            ; 
0089005A                            ; CHECKS COLOR
0089005A                            ; ----------------------------------
0089005A                            
0089005A                            @event56_cei:
0089005A 243C 0343 1702             		move.l	#$03431702,d2
00890060 0C79 00E0 FFFF E902        		cmp.w	#$0E0,(RAM_Palette+$32)
00890068 6600                       		bne.s	@fade_this_g
0089006A 243C 0443 1702             		move.l	#$04431702,d2
00890070                            @fade_this_g:
00890070 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00890076 6600                       		bne.s	@busy_pal_g
00890078 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
0089007E                            @busy_pal_g:
0089007E 103C 0001                  		move.b	#1,d0
00890082 4E75                       		rts
00890084                            
00890084                            ; ----------------------------------
00890084                            ; EVENT $97
00890084                            ; 
00890084                            ; CHECKS COLOR
00890084                            ; ----------------------------------
00890084                            
00890084                            @event57_cei:
00890084 243C 0363 1A02             		move.l	#$03631A02,d2
0089008A 0C79 00EE FFFF E908        		cmp.w	#$0EE,(RAM_Palette+$38)
00890092 6600                       		bne.s	@fade_this_y
00890094 243C 0463 1A02             		move.l	#$04631A02,d2
0089009A                            @fade_this_y:
0089009A 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
008900A0 6600                       		bne.s	@busy_pal_y
008900A2 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
008900A8                            @busy_pal_y:
008900A8 103C 0001                  		move.b	#1,d0
008900AC 4E75                       		rts
008900AE                            		
008900AE                            ; ----------------------------------
008900AE                            ; Full solid
008900AE                            ; ----------------------------------
008900AE                            
008900AE                            @event_solid:
008900AE 103C 0001                  		move.b	#1,d0
008900B2 4E75                       		rts
008900B4                            		
008900B4                            ; ----------------------------------
008900B4                            ; Return
008900B4                            ; ----------------------------------
008900B4                            
008900B4                            @unused:
008900B4 4280                       		clr.l	d0
008900B6 4E75                       		rts
008900B8                            		
008900B8                            ; ---------------------------------------------
008900B8                            ; Move level camera
008900B8                            ; ---------------------------------------------
008900B8                            
008900B8                            Plyr_LvlCamera:
008900B8 4BF9 FFFF BC00              		lea	(RAM_LvlPlanes),a5
008900BE                             		
008900BE                            ; 		move.b	lvl_settings(a5),d0
008900BE                            ; 		and.w	#$F,d0
008900BE                            ; 		add.w	d0,d0
008900BE                            ; 		move.w	@ScrollTypes(pc,d0.w),d1
008900BE                            ; 		jmp	@ScrollTypes(pc,d1.w)
008900BE                            ; 		
008900BE                            ; ; -----------------------------------
008900BE                            ; 
008900BE                            ; @ScrollTypes:
008900BE                            ; 		dc.w @Scrl_Normal-@ScrollTypes
008900BE                            ; 		dc.w @Scrl_Section-@Scrolltypes
008900BE                            ; 		dc.w 0
008900BE                            ; 		dc.w 0
008900BE                            ; 		dc.w 0
008900BE                            ; 		dc.w 0
008900BE                            ; 		dc.w 0
008900BE                            ; 		dc.w 0
008900BE                            ; 		dc.w 0
008900BE                            	
008900BE                            ; -----------------------------------
008900BE                            ; Default scroll
008900BE                            ; 
008900BE                            ; Autochecks the level size
008900BE                            ; -----------------------------------
008900BE                            
008900BE                            @Scrl_Normal:
008900BE 7400                       		moveq	#0,d2
008900C0 7600                       		moveq	#0,d3
008900C2                            		
008900C2 383C 0140                  		move.w	#320,d4
008900C6 1039 FFFF ED1C             		move.b	(RAM_VidRegs+$C),d0
008900CC 0240 0081                  		and.w	#%10000001,d0
008900D0 6600                       		bne.s	@normal_hor
008900D2 383C 0100                  		move.w	#256,d4
008900D6                            @normal_hor:
008900D6 3004                       		move.w	d4,d0
008900D8 E848                       		lsr.w	#4,d0
008900DA 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
008900DE B240                       		cmp.w	d0,d1
008900E0 6F00                       		ble.s	@DontScrollHor
008900E2                            		
008900E2 302E 0008                  		move.w	obj_x(a6),d0
008900E6 7A00                       		moveq	#0,d5
008900E8 3204                       		move.w	d4,d1
008900EA E249                       		lsr.w	#1,d1
008900EC 9041                       		sub.w	d1,d0
008900EE 6B00                       		bmi.s	@Wait_X
008900F0 3A00                       		move.w	d0,d5
008900F2                            		
008900F2 322D 001C                   		move.w	lvl_x(a5),d1
008900F6 B245                        		cmp.w	d5,d1
008900F8 6700                        		beq.s	@Wait_X		
008900FA 7000                        		moveq	#bitLvlDirR,d0
008900FC BA41                         		cmp.w	d1,d5
008900FE 6E00                         		bgt.s	@RightDir
00890100 7001                         		moveq	#bitLvlDirL,d0	
00890102                            @RightDir:
00890102 01ED 003A                    		bset	d0,lvl_flags(a5)
00890106                             		
00890106                            @Wait_X:
00890106 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
0089010A 3004                       		move.w	d4,d0
0089010C E848                       		lsr.w	#4,d0
0089010E 9240                       		sub.w	d0,d1
00890110 3005                       		move.w	d5,d0
00890112 0440 0001                  		sub.w	#1,d0
00890116 E949                       		lsl.w	#4,d1
00890118 B041                       		cmp.w	d1,d0
0089011A 6D00                       		blt.s	@NotEnd_X
0089011C 3A01                       		move.w	d1,d5
0089011E                            @NotEnd_X:
0089011E 3005                       		move.w	d5,d0
00890120 E848                       		lsr.w	#4,d0
00890122 3B45 001C                  		move.w	d5,lvl_x(a5)
00890126                            
00890126                            @DontScrollHor:
00890126                            
00890126                            ; ------------------------
00890126                            ; Update Vertical
00890126                            ; scrolling
00890126                            ; ------------------------
00890126                            
00890126 0C6D 000E 0036              		cmp.w	#(224/16),lvl_maxcam_y(a5)
0089012C 6F00 0000                   		ble	@single_Y
00890130                             		
00890130 3A2D 0020                    		move.w	lvl_y(a5),d5
00890134 382E 000C                    		move.w	obj_y(a6),d4
00890138 986D 0020                    		sub.w	lvl_y(a5),d4
0089013C                              		
0089013C 0C44 0068                    		cmp.w	#(224/2)-8,d4
00890140 6D00                         		blt.s	@Do_Up
00890142 0C44 007E                    		cmp.w	#(224/2)+14,d4
00890146 6F00                         		ble.s	@Set_Y
00890148                              		
00890148 302E 000C                  		move.w	obj_y(a6),d0
0089014C 0440 007E                  		sub.w	#(224/2)+14,d0
00890150 3A00                       		move.w	d0,d5
00890152 08ED 0002 003A                   		bset	#bitLvlDirD,lvl_flags(a5)
00890158 6000                             		bra.s	@Set_Y
0089015A                                  		
0089015A                            @Do_Up:
0089015A 302E 000C                  		move.w	obj_y(a6),d0
0089015E 0440 0068                  		sub.w	#(224/2)-8,d0
00890162 3A00                       		move.w	d0,d5
00890164 08ED 0003 003A                   		bset	#bitLvlDirU,lvl_flags(a5)
0089016A                                  		
0089016A 6000                       		bra.s	@Set_Y
0089016C                            		
0089016C                            @old_yscrl:
0089016C 3A2E 000C                    		move.w	obj_y(a6),d5			; Old
00890170 383C 0080                   		move.w	#(224/2)+$10,d4
00890174 9A44                        		sub.w	d4,d5
00890176 08ED 0002 003A                  		bset	#bitLvlDirD,lvl_flags(a5)
0089017C 08ED 0003 003A                  		bset	#bitLvlDirU,lvl_flags(a5)
00890182                                 		
00890182                            ;  		sub.w	#((224/2)+$10),d5
00890182                            ;  		move.w	obj_y(a6),d0			; New
00890182                            ;  		sub.w	#((224/2)+$20),d0
00890182                            ;  		add.w	lvl_y(a5),d0
00890182                            ;  		asr.w	#3,d0
00890182                            ;  		add.w	d0,d0
00890182                            ;  		move.w	d0,d5
00890182                             		
00890182                            ;  		moveq	#bitLvlDirD,d2
00890182                            ;    		cmp.w	d5,d1
00890182                            ;    		bgt.s	@drwydown
00890182                            ;    		bset	#bitLvlDirU,d2
00890182                            ; @drwydown:
00890182                            
00890182                            ;     		bset	#bitLvlDirD,lvl_flags(a5)
00890182                            ;     		bset	#bitLvlDirU,lvl_flags(a5)
00890182                               		
00890182                            ; --------------------------------
00890182                             	
00890182                            @Set_Y:
00890182 4A45                        		tst.w	d5
00890184 6A00                        		bpl.s	@onyplus
00890186 4245                        		clr.w	d5
00890188                            @onyplus:
00890188 7200                       		moveq	#0,d1
0089018A 322D 0036                    		move.w	lvl_maxcam_y(a5),d1
0089018E 0441 000E                    		sub.w	#(224/16),d1
00890192 E949                         		lsl.w	#4,d1
00890194                            ;   		swap	d1
00890194 BA41                         		cmp.w	d1,d5
00890196 6D00                         		blt.s	@notbotmd
00890198 3A01                         		move.w	d1,d5
0089019A                            @notbotmd:
0089019A 3B45 0020                  		move.w	d5,lvl_y(a5)
0089019E                            		
0089019E                            @single_Y:
0089019E 4E75                       		rts
008901A0                            ; 		
008901A0                            ; ; -----------------------------------
008901A0                            ; ; Dungeon Scroll
008901A0                            ; ; -----------------------------------
008901A0                            ; 
008901A0                            ; @Scrl_Section:
008901A0                            ; 		btst	#bitobj_flipH,obj_status(a6)
008901A0                            ; 		bne.s	@LeftCheck
008901A0                            ; 		
008901A0                            ; ; RIGHT
008901A0                            ; 
008901A0                            ;  		btst	#0,plyr_status(a6)
008901A0                            ;  		bne.s	@MoveRight
008901A0                            ;  		
008901A0                            ; 		move.w	obj_x(a6),d1
008901A0                            ; 		move.w	#320,d0
008901A0                            ; 		move.w	d0,d2
008901A0                            ; 		add.w	lvl_x(a5),d2
008901A0                            ; 		move.w	d2,plyr_lvltrgt(a6)
008901A0                            ; 		add.w	#8,d0
008901A0                            ;  		add.w	lvl_x(a5),d0
008901A0                            ;  		cmp.w	d0,d1
008901A0                            ; 		blt.s	@UpDownChk
008901A0                            ;  		
008901A0                            ;  		bset	#0,plyr_status(a6)
008901A0                            ;  		clr.l	obj_x_spd(a6)
008901A0                            ;  		clr.l	obj_y_spd(a6)
008901A0                            ; 
008901A0                            ; @MoveRight:
008901A0                            ;   		move.w	lvl_x(a5),d1
008901A0                            ;  		lea	(RAM_ScrlHor),a4
008901A0                            ;  		move.w	#224-1,d3
008901A0                            ; @doline2:
008901A0                            ;  		move.w	d1,d0
008901A0                            ;  		neg.w	d0
008901A0                            ;  		move.w	d0,(a4)+
008901A0                            ;  		asr.w	#4,d0
008901A0                            ;  		move.w	d0,(a4)+
008901A0                            ;  		dbf	d3,@doline2
008901A0                            ;  		
008901A0                            ;   		move.w	plyr_lvltrgt(a6),d0
008901A0                            ;   		move.w	lvl_x(a5),d1
008901A0                            ;   		cmp.w 	d0,d1
008901A0                            ;   		bcs.s	@KeepScrlR
008901A0                            ;  		bclr	#0,plyr_status(a6)
008901A0                            ;   		move.w	d1,lvl_x(a5)
008901A0                            ; 		rts
008901A0                            ; @KeepScrlR:
008901A0                            ;  		add.w	#4,lvl_x(a5)
008901A0                            ;       		bset	#bitLvlDirR,lvl_flags(a5)
008901A0                            ;        		rts
008901A0                            ; 		
008901A0                            ; @LeftCheck:
008901A0                            ;        		
008901A0                            ; 		
008901A0                            ; @UpDownChk:
008901A0                            ;  		bclr	#0,plyr_status(a6)
008901A0                            ; 		rts
008901A0                            		
008901A0                            ; =================================================================
008901A0                            ; 
008901A0                            Plyr_SetStartPos:
008901A0 4DF9 FFFF C040               		lea	(RAM_ObjBuffer),a6
008901A6 4BF9 FFFF BC00              		lea	(RAM_LvlPlanes),a5
008901AC                             		
008901AC 3D40 000C                   		move.w	d0,obj_y(a6)
008901B0 4840                        		swap	d0
008901B2 3D40 0008                   		move.w	d0,obj_x(a6)
008901B6                             		
008901B6                            ; ----------------------------------------
008901B6                             
008901B6 383C 0140                  		move.w	#320,d4
008901BA                            ; 		btst	#bit_hortype,lvl_prio(a5)
008901BA                            ; 		beq.s	@normal_hor
008901BA                            ; 		move.w	#256,d4
008901BA                            ; @normal_hor:
008901BA 3004                       		move.w	d4,d0
008901BC E848                       		lsr.w	#4,d0
008901BE 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
008901C2 B240                       		cmp.w	d0,d1
008901C4 6F00                       		ble.s	@DontScrollHor
008901C6                            		
008901C6 362E 0008                  		move.w	obj_x(a6),d3
008901CA 7400                       		moveq	#0,d2
008901CC 3204                       		move.w	d4,d1
008901CE E249                       		lsr.w	#1,d1
008901D0 9641                       		sub.w	d1,d3
008901D2 6B00                       		bmi.s	@Wait_X
008901D4 3403                       		move.w	d3,d2
008901D6                            @Wait_X:
008901D6 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
008901DA 3004                       		move.w	d4,d0
008901DC E848                       		lsr.w	#4,d0
008901DE 9240                       		sub.w	d0,d1
008901E0 3002                       		move.w	d2,d0
008901E2 0440 0001                  		sub.w	#1,d0
008901E6 E949                       		lsl.w	#4,d1
008901E8 B041                       		cmp.w	d1,d0
008901EA 6D00                       		blt.s	@NotEnd_X
008901EC 3401                       		move.w	d1,d2
008901EE                            @NotEnd_X:
008901EE 3002                       		move.w	d2,d0
008901F0 E848                       		lsr.w	#4,d0
008901F2 3B42 001C                  		move.w	d2,lvl_x(a5)
008901F6                            
008901F6                            @DontScrollHor:
008901F6                            
008901F6                            ; ----------------------------------------
008901F6                            
008901F6 426D 0020                  		clr.w	lvl_y(a5)
008901FA 0C6D 000E 0036              		cmp.w	#(224/16),lvl_maxcam_y(a5)
00890200 6F00                        		ble.s	@Return
00890202 362E 000C                  		move.w	obj_y(a6),d3
00890206 7400                       		moveq	#0,d2
00890208 0443 0084                  		sub.w	#((224/2)+$14),d3	;aprox
0089020C 6B00                       		bmi.s	@Wait_Y
0089020E 3403                       		move.w	d3,d2
00890210                            @Wait_Y:
00890210 322D 0036                   		move.w	lvl_maxcam_y(a5),d1
00890214 0441 000E                   		sub.w	#(224/16),d1
00890218 3002                        		move.w	d2,d0
0089021A 0440 0001                   		sub.w	#1,d0
0089021E E949                        		lsl.w	#4,d1
00890220 B041                        		cmp.w	d1,d0
00890222 6D00                        		blt.s	@NotEnd_Y
00890224 3401                        		move.w	d1,d2
00890226                            @NotEnd_Y:
00890226 3B42 0020                  		move.w	d2,lvl_y(a5)
0089022A                             		
0089022A                            @Return:
0089022A 4E75                        		rts
0089022C                            
0089022C                            ; =================================================================
0089022C                            ; ------------------------------------------------
0089022C                            ; EXTERNAL Routines for the player
0089022C                            ; ------------------------------------------------
0089022C                            
0089022C                            ; TODO
0089022C                            
0089022C                            ; =================================================================
0089022C                            ; ------------------------------------------------
0089022C                            ; Data
0089022C                            ; ------------------------------------------------
0089022C                            		
0089022C                            Ani_Player:
0089022C 0000                       		dc.w @Idle-Ani_Player		;$00
0089022E 0000                       		dc.w @Walk-Ani_Player
00890230 0000                       		dc.w @Jump_1-Ani_Player
00890232 0000                        		dc.w @Jump_2-Ani_Player
00890234 0000                        		dc.w @ClimbMove-Ani_Player	;$04
00890236 0000                        		dc.w @Die-Ani_Player
00890238                            		even
00890238                            @Idle:
00890238 06                          		dc.b 6
00890239 0000 0000 0000 0000 0000+   		dc.b 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
00890255 FF                         		dc.b -1
00890256                            		even
00890256                            @Jump_1:	
00890256 04                          		dc.b 4
00890257 0A                          		dc.b $A
00890258 FF                         		dc.b -1
0089025A 00                         		even
0089025A                            @Jump_2:	
0089025A 04                          		dc.b 4
0089025B 0B                           		dc.b $B
0089025C FF                          		dc.b -1
0089025E 00                          		even
0089025E                            @Walk:
0089025E 03                          		dc.b 3
0089025F 0203 0405 0607 0809         		dc.b 2,3,4,5,6,7,8,9
00890267 FF                         		dc.b -1
00890268                            		even
00890268                            @ClimbMove:
00890268 04                         		dc.b 4
00890269 0C0D 0E0F 0E0D             		dc.b 12,13,14,15,14,13
0089026F FF                         		dc.b -1
00890270                            		even	
00890270                            @Die:
00890270 04                         		dc.b 4
00890271 10                         		dc.b 16
00890272 FF                         		dc.b -1
00890274 00                         		even
00890274 00                         		even
00890274                               		include	"engine/modes/level/data/objects/dadou/code.asm"
00890274                            ; =================================================================
00890274                            ; Object
00890274                            ; 
00890274                            ; Dadou
00890274                            ; =================================================================
00890274                            
00890274                            ; =================================================================
00890274                            ; ------------------------------------------------
00890274                            ; Variables
00890274                            ; ------------------------------------------------
00890274                            
00890274 =00006420                  varVramDadou	equ	$6000|$420
00890274                            
00890274                            ; =================================================================
00890274                            ; ------------------------------------------------
00890274                            ; RAM
00890274                            ; ------------------------------------------------
00890274                            
00890274                            		rsset Obj_Ram
00890274 =00000024                  timer_1		rs.w 1
00890274                            
00890274                            ; =================================================================
00890274                            ; ------------------------------------------------
00890274                            ; Code start
00890274                            ; ------------------------------------------------
00890274                            
00890274                            Obj_Dadou:
00890274 7000                        		moveq	#0,d0
00890276 102E 001D                   		move.b	obj_index(a6),d0
0089027A D040                        		add.w	d0,d0
0089027C 323B 0000                   		move.w	@Index(pc,d0.w),d1
00890280 4EBB 1000                   		jsr	@Index(pc,d1.w)
00890284                             		
00890284 6100 E050                   		bsr	Object_OffCheck
00890288 203C 6420 0000                		move.l	#(varVramDadou<<16),d0
0089028E 223C 0000 0000              		move.l	#ani_dadou,d1
00890294 6100 E0AC                  		bsr	Object_Animate
00890298                            		
00890298 203C 6420 0000                 		move.l	#(varVramDadou<<16),d0
0089029E 102E 0020                   		move.b	obj_frame(a6),d0
008902A2 223C 0000 0000             		move.l	#map_dadou,d1
008902A8 6000 DCEC                   		bra	Object_Show
008902AC                             		
008902AC                            ; ------------------------------------------------
008902AC                            
008902AC                            @Index:
008902AC 0000                       		dc.w @Init-@Index
008902AE 0000                       		dc.w @Stand-@Index
008902B0 0000                       		dc.w @Walk-@Index
008902B2                            		even
008902B2                            		
008902B2                            ; =================================================================
008902B2                            ; ------------------------------------------------
008902B2                            ; Index $00: Init
008902B2                            ; ------------------------------------------------
008902B2                            
008902B2                            @Init:
008902B2 2D7C 0101 0102 0004        		move.l	#$01010102,obj_size(a6)
008902BA 2D7C 0000 8000 0014        		move.l	#$8000,obj_y_spd(a6)
008902C2                            		
008902C2 3D7C 00C0 0024             		move.w	#$C0,timer_1(a6)
008902C8 6100 0000                  		bsr	@Go_Stand
008902CC                            		
008902CC                            ; =================================================================
008902CC                            ; ------------------------------------------------                  
008902CC                            ; Index $01: Stand
008902CC                            ; ------------------------------------------------
008902CC                            
008902CC                            @Stand:
008902CC                            ; 		sub.w	#1,timer_1(a6)
008902CC                            ; 		bpl.s	@Pyhsics
008902CC                            ; 
008902CC                            ; 		move.w	#$C0,timer_1(a6)
008902CC 6000 0000                  		bra	@Go_Walk
008902D0                            		
008902D0                            ; =================================================================
008902D0                            ; ------------------------------------------------                  
008902D0                            ; Index $01: Walk
008902D0                            ; ------------------------------------------------
008902D0                            
008902D0                            @Walk:
008902D0                            ; 		sub.w	#1,timer_1(a6)
008902D0                            ; 		bpl.s	@Pyhsics
008902D0                            ; 		
008902D0                            ; 		move.w	#$C0,timer_1(a6)
008902D0                            ; 		bchg	#bitobj_flipH,obj_status(a6)
008902D0                            ; 		bra	@Go_Stand
008902D0                            		
008902D0 6000 0000                  		bra	@Pyhsics
008902D4                            		
008902D4                            ; =================================================================
008902D4                            ; ------------------------------------------------
008902D4                            ; Subs
008902D4                            ; ------------------------------------------------
008902D4                            
008902D4                            @Go_Stand:
008902D4 42AE 0010                  		clr.l	obj_x_spd(a6)
008902D8 422E 001A                  		clr.b	obj_anim_id(a6)
008902DC 1D7C 0001 001D             		move.b	#1,obj_index(a6)
008902E2 4E75                       		rts
008902E4                            	
008902E4                            ; --------------------------------------
008902E4                            
008902E4                            @Go_Walk:
008902E4 2D7C 0000 4000 0010        		move.l	#$4000,obj_x_spd(a6)
008902EC 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
008902F2 6600                       		bne.s	@right
008902F4 2D7C FFFF C000 0010        		move.l	#-$4000,obj_x_spd(a6)
008902FC                            @right:
008902FC 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
00890302 1D7C 0002 001D             		move.b	#2,obj_index(a6)
00890308 4E75                       		rts
0089030A                            	
0089030A                            ; ------------------------------------------------
0089030A                            ; Pyhsics
0089030A                            ; ------------------------------------------------
0089030A                            
0089030A                            @Pyhsics:
0089030A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00890310 2C2E 0010                   		move.l	obj_x_spd(a6),d6
00890314 2E2E 0014                   		move.l	obj_y_spd(a6),d7
00890318                             		
00890318 DDAE 0008                   		add.l	d6,obj_x(a6)
0089031C 6100 0000                   		bsr	@WallCheck
00890320                            		
00890320                            ; ----------------------------------
00890320                            
00890320 0687 0000 8000               		add.l	#$8000,d7
00890326 0C87 0004 0000               		cmp.l	#$40000,d7
0089032C 6D00                         		blt.s	@low_y
0089032E 2E3C 0004 0000               		move.l	#$40000,d7
00890334                            @low_y:
00890334 DFAE 000C                    		add.l	d7,obj_y(a6)
00890338                              		
00890338                            ; 		lea	(RAM_LvlPlanes),a5
00890338                            ; 		move.w	lvl_size_y(a5),d0
00890338                            ; 		lsl.w	#4,d0
00890338                            ; 		move.w	obj_y(a6),d1
00890338                            ; 		moveq	#0,d2
00890338                            ; 		move.b	obj_size+2(a6),d2
00890338                            ; 		lsl.w	#3,d2
00890338                            ; 		sub.w	d2,d1
00890338                            ; 		cmp.w	d0,d1
00890338                            ; 		bge	@delete
00890338                            ; 		
00890338 4A87                         		tst.l	d7
0089033A 6B00                         		bmi.s	@no_floor
0089033C                              
0089033C 6100 E116                  		bsr	object_FindPrz_Floor
00890340 2400                       		move.l	d0,d2
00890342 4A00                       		tst.b	d0
00890344 6600                       		bne.s	@from_prize
00890346 6100 E2B6                   		bsr 	object_FindPrz_FloorSides
0089034A 4A00                       		tst.b	d0
0089034C 6600 0000                  		bne	@from_prize;@swap_dir_wl
00890350 2001                       		move.l	d1,d0
00890352 4A00                       		tst.b	d0
00890354 6600 0000                  		bne	@from_prize
00890358                            		
00890358 6100 E106                  		bsr	object_FindCol_Floor
0089035C 2400                       		move.l	d0,d2
0089035E 4A00                       		tst.b	d0
00890360 6600                       		bne.s	@set_floor
00890362 6100 E2A6                   		bsr 	object_FindCol_FloorSides
00890366 4A00                       		tst.b	d0
00890368 6600 0000                  		bne	@set_floor;@swap_dir_wl
0089036C 2001                       		move.l	d1,d0
0089036E 4A00                       		tst.b	d0
00890370 6700 0000                  		beq	@no_floor
00890374                            		
00890374 6000                       		bra.s	@set_floor
00890376                            ; @swap_dir_wl:
00890376                            ; 		neg.l	d6
00890376                            ; 		bchg	#bitobj_flipH,obj_status(a6)
00890376                            ; 		bra.s	@no_floor
00890376                            
00890376                            @from_prize:
00890376 0C00 0040                  		cmp.b	#$40,d0
0089037A 6C00                       		bge.s	@set_floor
0089037C 103C 0001                  		move.b	#1,d0
00890380                            		
00890380                            @set_floor:
00890380 6100 E774                    		bsr 	object_SetCol_Floor
00890384                              		
00890384                            @no_floor:
00890384                            
00890384 2D46 0010                   		move.l	d6,obj_x_spd(a6)
00890388 2D47 0014                   		move.l	d7,obj_y_spd(a6)
0089038C                             		
0089038C                            ; ----------------------------------
0089038C                            ; Check if touched
0089038C                            ; ----------------------------------
0089038C                            
0089038C                            @check_touch:
0089038C 6100 E82C                  		bsr	objTouch_Top
00890390 4A00                       		tst.b	d0
00890392 6600                       		bne.s	@touch_flag
00890394 6100 E8C2                  		bsr	objTouch_Bottom
00890398 4A00                       		tst.b	d0
0089039A 6600                       		bne.s	@touch_flag
0089039C                            		
0089039C 6100 E95A                  		bsr	objTouch_Sides
008903A0 4A00                       		tst.b	d0
008903A2 6600                       		bne.s	@touch_flag
008903A4 4840                       		swap	d0
008903A6 4A00                       		tst.b	d0
008903A8 6600                       		bne.s	@touch_flag
008903AA 4E75                       		rts
008903AC                            		
008903AC                            ; -----------------------------------
008903AC                            
008903AC                            @touch_flag:
008903AC 6100 EB2E                  		bsr	objPlyrHurtKill
008903B0 6700                       		beq.s	@return
008903B2 323C 6420                     		move.w	#varVramDadou,d1
008903B6 142E 0020                   		move.b	obj_frame(a6),d2
008903BA 203C 0000 0000             		move.l	#map_dadou,d0
008903C0 260C                       		move.l	a4,d3
008903C2 6100 EF0C                  		bsr	objAction_SetStomp
008903C6 6000 DEEE                  		bra	Object_IsGone
008903CA                            @return:
008903CA 4E75                       		rts
008903CC                            		
008903CC                            ; =================================================================
008903CC                            
008903CC                            @WallCheck:
008903CC 6100 E0F4                     		bsr	object_FindPrz_Wall
008903D0 4A00                          		tst.b	d0
008903D2 6600                          		bne.s	@foundprzwl
008903D4 6100 E0F8                    		bsr	object_FindCol_Wall
008903D8 4A00                         		tst.b	d0
008903DA 6700                         		beq.s	@chk_right
008903DC                            @foundprzwl:
008903DC 0800 0006                    		btst	#6,d0
008903E0 6600                         		bne.s	@chk_right
008903E2                            ;    		cmp.b	#2,d0
008903E2                            ;    		blt.s	@chk_right
008903E2 6100 E7BA                    		bsr	object_SetCol_Wall
008903E6                            ;    		bra.s	@endchk
008903E6                            @chk_right:
008903E6                            
008903E6                            		;TODO: Prize check
008903E6                            ;   		bsr	object_FindPrz_WallSides
008903E6                            ;   		tst.b	d0
008903E6                            ;   		bne.s	@przrotx
008903E6                            ;   		move.l	d1,d0
008903E6                            ;   		tst.b	d0
008903E6                            ;   		bne.s	@przrotx
008903E6                            
008903E6 6100 E336                    		bsr	object_FindCol_WallSides
008903EA 0800 0006                    		btst	#6,d0
008903EE 6600                         		bne.s	@endchk
008903F0 0801 0006                    		btst	#6,d1
008903F4 6600                         		bne.s	@endchk
008903F6 4A00                         		tst.b	d0
008903F8 6600                         		bne.s	@leftws
008903FA 4A01                         		tst.b	d1
008903FC 6600                         		bne.s	@rightws
008903FE 6000                          		bra.s	@endchk
00890400                            @przrotx:
00890400                            	
00890400                            @leftws:
00890400 0C01 0002                  		cmp.b	#2,d1
00890404 6C00                       		bge.s	@endchk
00890406 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
0089040C 6700                       		beq.s	@endchk
0089040E 6000                       		bra.s	@rotatex
00890410                            @rightws:
00890410 0C01 0002                  		cmp.b	#2,d1
00890414 6C00                       		bge.s	@endchk
00890416 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
0089041C 6600                       		bne.s	@endchk
0089041E                            @rotatex:
0089041E 4486                        		neg.l	d6
00890420 086E 0000 001E              		bchg	#bitobj_flipH,obj_status(a6)
00890426                            @endchk:
00890426 4E75                       		rts
00890428                            		
00890428                            ; ------------------------------------------------
00890428                            ; Data
00890428                            ; ------------------------------------------------
00890428                            		
00890428                            ; ----------------------------------------
00890428                            
00890428                            ani_dadou:
00890428 0000                       		dc.w @Idle-ani_dadou
0089042A 0000                       		dc.w @Walk-ani_dadou
0089042C                            		even
0089042C                            @Idle:
0089042C 08                          		dc.b 8
0089042D 0000 0000 0000 0000 0001+   		dc.b 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
0089043E FF                         		dc.b $FF
00890440 00                         		even
00890440                            @Walk:
00890440 06                          		dc.b 6
00890441 0203 0405 0607 0809         		dc.b 2,3,4,5,6,7,8,9
00890449 FF                         		dc.b $FF
0089044A                            		even	
0089044A                            		even	
0089044A                               		include	"engine/modes/level/data/objects/pikudo/code.asm"
0089044A                            ; =================================================================
0089044A                            ; Object
0089044A                            ; 
0089044A                            ; Pikudo
0089044A                            ; =================================================================
0089044A                            
0089044A                            ; =================================================================
0089044A                            ; ------------------------------------------------
0089044A                            ; Variables
0089044A                            ; ------------------------------------------------
0089044A                            
0089044A =000004D0                  varVramPikudo	equ	$4D0
0089044A =000000AA                  varTimerWait	equ	170
0089044A =0000001E                  varTimerAttck	equ	30
0089044A                            
0089044A                            ; =================================================================
0089044A                            ; ------------------------------------------------
0089044A                            ; RAM
0089044A                            ; ------------------------------------------------
0089044A                            
0089044A                            		rsset Obj_Ram
0089044A =00000024                  timerpik1	rs.w 1
0089044A =00000026                  timerpik2	rs.w 1
0089044A =00000028                  lastx		rs.w 1
0089044A =0000002A                  lasty		rs.w 1
0089044A                            
0089044A                            ; =================================================================
0089044A                            ; ------------------------------------------------
0089044A                            ; Code start
0089044A                            ; ------------------------------------------------
0089044A                            
0089044A                            Obj_Pikudo:
0089044A 7000                        		moveq	#0,d0
0089044C 102E 001D                   		move.b	obj_index(a6),d0
00890450 D040                        		add.w	d0,d0
00890452 323B 0000                   		move.w	@Index(pc,d0.w),d1
00890456 4EBB 1000                   		jsr	@Index(pc,d1.w)
0089045A                             		
0089045A 6100 DE7A                   		bsr	Object_OffCheck
0089045E 203C 04D0 0000                		move.l	#(varVramPikudo<<16),d0
00890464 223C 0000 0000              		move.l	#ani_pikudo,d1
0089046A 6100 DED6                  		bsr	Object_Animate
0089046E                            		
0089046E 203C 04D0 0000                 		move.l	#(varVramPikudo<<16),d0
00890474 102E 0020                   		move.b	obj_frame(a6),d0
00890478 223C 0000 0000             		move.l	#map_pikudo,d1
0089047E 6000 DB16                   		bra	Object_Show
00890482                             		
00890482                            ; ------------------------------------------------
00890482                            
00890482                            @Index:
00890482 0000                       		dc.w @Init-@Index
00890484 0000                       		dc.w @Stand-@Index
00890486 0000                       		dc.w @Attack-@Index
00890488                            		even
00890488                            		
00890488                            ; =================================================================
00890488                            ; ------------------------------------------------
00890488                            ; Index $00: Init
00890488                            ; ------------------------------------------------
00890488                            
00890488                            @Init:
00890488 062E 0001 001D             		add.b	#1,obj_index(a6)
0089048E 422E 001A                  		clr.b	obj_anim_id(a6)
00890492 422E 0020                  		clr.b	obj_frame(a6)
00890496 2D7C 0101 0202 0004        		move.l	#$01010202,obj_size(a6)
0089049E 42AE 0010                  		clr.l	obj_x_spd(a6)
008904A2 3D7C 00AA 0024             		move.w	#varTimerWait,timerpik1(a6)
008904A8 3D6E 0008 0028             		move.w	obj_x(a6),lastx(a6)
008904AE 3D6E 000C 002A             		move.w	obj_y(a6),lasty(a6)
008904B4                            		
008904B4                            ; =================================================================
008904B4                            ; ------------------------------------------------                  
008904B4                            ; Index $01: Stand
008904B4                            ; ------------------------------------------------
008904B4                            
008904B4                            @Stand:
008904B4 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
008904BA 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
008904C0 302C 0008                  		move.w	obj_x(a4),d0
008904C4 B06E 0008                  		cmp.w	obj_x(a6),d0
008904C8 6D00                       		blt.s	@leftside
008904CA 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
008904D0                            @leftside:
008904D0                            
008904D0 6100 E0C8                  		bsr	object_FindCol_Ceiling
008904D4 4A00                       		tst.b	d0
008904D6 6600                       		bne.s	@ignore
008904D8 6100 E4B4                  		bsr	object_FindCol_CeilingSides
008904DC 4A00                       		tst.b	d0
008904DE 6600                       		bne.s	@ignore	
008904E0 4A01                       		tst.b	d1
008904E2 6600                       		bne.s	@ignore
008904E4                            		
008904E4 302E 000C                  		move.w	obj_y(a6),d0
008904E8 B06E 002A                  		cmp.w	lasty(a6),d0
008904EC 6F00                       		ble.s	@ignore
008904EE                            		
008904EE                            ; 		
008904EE                            ; 		bsr	object_FindPrz_CeilingSides
008904EE                            ; 		move.l	d0,d2
008904EE                            ; 		bsr	object_FindPrz_CeilingSides
008904EE                            ; 		or.l	d1,d0
008904EE                            ; 		or.l	d2,d0
008904EE                            ; 		btst	#7,d0
008904EE                            ; 		bne.s	@cont2
008904EE                            ; 		btst	#6,d0
008904EE                            ; 		bne.s	@cont2
008904EE                            ; 		tst.b	d0
008904EE                            ; 		bne.s	@ignore
008904EE                            ; @cont2:
008904EE                            
008904EE 046E 0001 000C             		sub.w	#1,obj_y(a6)
008904F4                            @ignore:
008904F4                            
008904F4 046E 0001 0024             		sub.w	#1,timerpik1(a6)
008904FA 6A00                       		bpl.s	@waitpik1
008904FC                            		
008904FC 203C 0000 0000               		move.l	#SndSfx_BEEBUZZ,d0
00890502 7202                         		moveq 	#2,d1
00890504 7401                         		moveq	#1,d2
00890506 6100 947A                    		bsr	Audio_Track_play
0089050A                              		
0089050A 1D7C 0002 001D             		move.b	#2,obj_index(a6)
00890510 3D7C 001E 0024             		move.w	#varTimerAttck,timerpik1(a6)
00890516 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
0089051C 2D7C FFFE 1000 0010        		move.l	#-$1F000,obj_x_spd(a6)
00890524 2D7C 0002 0000 0014        		move.l	#$20000,obj_y_spd(a6)
0089052C 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00890532 6700                       		beq.s	@waitpik1
00890534 44AE 0010                  		neg.l	obj_x_spd(a6)
00890538                            
00890538                            @waitpik1:
00890538 6000 0000                  		bra	@check_touch
0089053C                            		
0089053C                            ; =================================================================
0089053C                            ; ------------------------------------------------                  
0089053C                            ; Index $02: Attack
0089053C                            ; ------------------------------------------------
0089053C                            
0089053C                            @Attack:
0089053C 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00890540 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00890544                            		
00890544 DDAE 0008                  		add.l	d6,obj_x(a6)
00890548 DFAE 000C                  		add.l	d7,obj_y(a6)
0089054C                            		
0089054C                            ; Check for floor or walls
0089054C                            
0089054C 6100 DF12                  		bsr	object_FindCol_Floor
00890550 4A00                       		tst.b	d0
00890552 6600                       		bne.s	@forceend
00890554 6100 DEFE                  		bsr	object_FindPrz_Floor
00890558 0800 0007                  		btst	#7,d0
0089055C 6600                       		bne.s	@cont
0089055E 0800 0006                  		btst	#6,d0
00890562 6600                       		bne.s	@cont	
00890564 4A00                       		tst.b	d0
00890566 6600                       		bne.s	@forceend
00890568                            @cont:
00890568                            
00890568 6100 DF64                  		bsr	object_FindCol_Wall
0089056C 4A00                       		tst.b	d0
0089056E 6684                       		bne.s	@ignore
00890570 6100 E1AC                  		bsr	object_FindCol_WallSides
00890574 4A00                       		tst.b	d0
00890576 6600 FF7C                  		bne	@ignore		
0089057A 4A01                       		tst.b	d1
0089057C 6600 FF76                  		bne	@ignore
00890580                            		
00890580 6100 E190                  		bsr	object_FindPrz_WallSides
00890584 2400                       		move.l	d0,d2
00890586 6100 E18A                  		bsr	object_FindPrz_WallSides
0089058A 8081                       		or.l	d1,d0
0089058C 8082                       		or.l	d2,d0
0089058E 0800 0007                  		btst	#7,d0
00890592 6600                       		bne.s	@cont3
00890594 0800 0006                  		btst	#6,d0
00890598 6600                       		bne.s	@cont3
0089059A 4A00                       		tst.b	d0
0089059C 6600                       		bne.s	@forceend
0089059E                            @cont3:
0089059E                            
0089059E 046E 0001 0024             		sub.w	#1,timerpik1(a6)
008905A4 6A00                       		bpl.s	@waitpik2
008905A6 6000                       		bra.s	@end2
008905A8                            @forceend:
008905A8 046E 0008 002A             		sub.w	#8,lasty(a6)
008905AE                            @end2:
008905AE                            
008905AE 1D7C 0001 001D             		move.b	#1,obj_index(a6)
008905B4 3D7C 00AA 0024             		move.w	#varTimerWait,timerpik1(a6)
008905BA 422E 001A                  		clr.b	obj_anim_id(a6)
008905BE 4286                       		clr.l	d6
008905C0 4287                       		clr.l	d7
008905C2                            @waitpik2:
008905C2                            
008905C2 2D46 0010                  		move.l	d6,obj_x_spd(a6)
008905C6 2D47 0014                  		move.l	d7,obj_y_spd(a6)
008905CA 6000 0000                  		bra	@check_touch
008905CE                            		
008905CE                            ; =================================================================
008905CE                            ; ------------------------------------------------
008905CE                            ; Subs
008905CE                            ; ------------------------------------------------
008905CE                            
008905CE                            ; @Go_Stand:
008905CE                            ; 		clr.l	obj_x_spd(a6)
008905CE                            ; 		clr.b	obj_anim_id(a6)
008905CE                            ; 		move.b	#1,obj_index(a6)
008905CE                            ; 		rts
008905CE                            ; 	
008905CE                            ; ; --------------------------------------
008905CE                            ; 
008905CE                            ; @Go_Walk:
008905CE                            ; 		move.l	#$4000,obj_x_spd(a6)
008905CE                            ; 		btst	#bitobj_flipH,obj_status(a6)
008905CE                            ; 		bne.s	@right
008905CE                            ; 		move.l	#-$4000,obj_x_spd(a6)
008905CE                            ; @right:
008905CE                            ; 		move.b	#1,obj_anim_id(a6)
008905CE                            ; 		move.b	#2,obj_index(a6)
008905CE                            ; 		rts
008905CE                            ; 	
008905CE                            ; ; ------------------------------------------------
008905CE                            ; ; Pyhsics
008905CE                            ; ; ------------------------------------------------
008905CE                            ; 
008905CE                            ; @Pyhsics:
008905CE                            ; 		lea	(RAM_LvlPlanes),a5
008905CE                            ;  		move.l	obj_x_spd(a6),d6
008905CE                            ;  		move.l	obj_y_spd(a6),d7
008905CE                            ;  		
008905CE                            ;  		add.l	d6,obj_x(a6)
008905CE                            ;  		bsr	@WallCheck
008905CE                            ; 		
008905CE                            ; ; ----------------------------------
008905CE                            ; 
008905CE                            ;   		add.l	#$8000,d7
008905CE                            ;   		cmp.l	#$40000,d7
008905CE                            ;   		blt.s	@low_y
008905CE                            ;   		move.l	#$40000,d7
008905CE                            ; @low_y:
008905CE                            ;   		add.l	d7,obj_y(a6)
008905CE                            ;   		
008905CE                            ; ; 		lea	(RAM_LvlPlanes),a5
008905CE                            ; ; 		move.w	lvl_size_y(a5),d0
008905CE                            ; ; 		lsl.w	#4,d0
008905CE                            ; ; 		move.w	obj_y(a6),d1
008905CE                            ; ; 		moveq	#0,d2
008905CE                            ; ; 		move.b	obj_size+2(a6),d2
008905CE                            ; ; 		lsl.w	#3,d2
008905CE                            ; ; 		sub.w	d2,d1
008905CE                            ; ; 		cmp.w	d0,d1
008905CE                            ; ; 		bge	@delete
008905CE                            ; ; 		
008905CE                            ;   		tst.l	d7
008905CE                            ;   		bmi.s	@no_floor
008905CE                            ;   
008905CE                            ; 		bsr	object_FindPrz_Floor
008905CE                            ; 		move.l	d0,d2
008905CE                            ; 		tst.b	d0
008905CE                            ; 		bne.s	@from_prize
008905CE                            ;  		bsr 	object_FindPrz_FloorSides
008905CE                            ; 		tst.b	d0
008905CE                            ; 		bne	@from_prize;@swap_dir_wl
008905CE                            ; 		move.l	d1,d0
008905CE                            ; 		tst.b	d0
008905CE                            ; 		bne	@from_prize
008905CE                            ; 		
008905CE                            ; 		bsr	object_FindCol_Floor
008905CE                            ; 		move.l	d0,d2
008905CE                            ; 		tst.b	d0
008905CE                            ; 		bne.s	@set_floor
008905CE                            ;  		bsr 	object_FindCol_FloorSides
008905CE                            ; 		tst.b	d0
008905CE                            ; 		bne	@set_floor;@swap_dir_wl
008905CE                            ; 		move.l	d1,d0
008905CE                            ; 		tst.b	d0
008905CE                            ; 		beq	@no_floor
008905CE                            ; 		
008905CE                            ; 		bra.s	@set_floor
008905CE                            ; ; @swap_dir_wl:
008905CE                            ; ; 		neg.l	d6
008905CE                            ; ; 		bchg	#bitobj_flipH,obj_status(a6)
008905CE                            ; ; 		bra.s	@no_floor
008905CE                            ; 
008905CE                            ; @from_prize:
008905CE                            ; 		cmp.b	#$40,d0
008905CE                            ; 		bge.s	@set_floor
008905CE                            ; 		move.b	#1,d0
008905CE                            ; 		
008905CE                            ; @set_floor:
008905CE                            ;   		bsr 	object_SetCol_Floor
008905CE                            ;   		
008905CE                            ; @no_floor:
008905CE                            ; 
008905CE                            ;  		move.l	d6,obj_x_spd(a6)
008905CE                            ;  		move.l	d7,obj_y_spd(a6)
008905CE                             		
008905CE                            ; ----------------------------------
008905CE                            ; Check if touched
008905CE                            ; ----------------------------------
008905CE                            
008905CE                            @check_touch:
008905CE 6100 E5EA                  		bsr	objTouch_Top
008905D2 4A00                       		tst.b	d0
008905D4 6600                       		bne.s	@touch_flag
008905D6 6100 E680                  		bsr	objTouch_Bottom
008905DA 4A00                       		tst.b	d0
008905DC 6600                       		bne.s	@touch_flag
008905DE                            		
008905DE 6100 E718                  		bsr	objTouch_Sides
008905E2 4A00                       		tst.b	d0
008905E4 6600                       		bne.s	@touch_flag;_side
008905E6 4840                       		swap	d0
008905E8 4A00                       		tst.b	d0
008905EA 6600                       		bne.s	@touch_flag;_side
008905EC 4E75                       		rts
008905EE                            		
008905EE                            ; -----------------------------------
008905EE                            
008905EE                            @touch_flag:
008905EE 6100 E8EC                  		bsr	objPlyrHurtKill
008905F2 6700                       		beq.s	@return
008905F4                            		
008905F4 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
008905FA 323C 04D0                     		move.w	#varVramPikudo,d1
008905FE 142E 0020                   		move.b	obj_frame(a6),d2
00890602 203C 0000 0000             		move.l	#map_pikudo,d0
00890608 260C                       		move.l	a4,d3
0089060A 6100 ECC4                  		bsr	objAction_SetStomp
0089060E 6000 DCA6                  		bra	Object_IsGone
00890612                            @return:
00890612 4E75                       		rts
00890614                            		
00890614                            ; =================================================================
00890614                            
00890614                            @WallCheck:
00890614 6100 DEAC                     		bsr	object_FindPrz_Wall
00890618 4A00                          		tst.b	d0
0089061A 6600                          		bne.s	@foundprzwl
0089061C 6100 DEB0                    		bsr	object_FindCol_Wall
00890620 4A00                         		tst.b	d0
00890622 6700                         		beq.s	@chk_right
00890624                            @foundprzwl:
00890624 0800 0006                    		btst	#6,d0
00890628 6600                         		bne.s	@chk_right
0089062A                            ;    		cmp.b	#2,d0
0089062A                            ;    		blt.s	@chk_right
0089062A 6100 E572                    		bsr	object_SetCol_Wall
0089062E                            ;    		bra.s	@endchk
0089062E                            @chk_right:
0089062E                            
0089062E                            		;TODO: Prize check
0089062E                            ;   		bsr	object_FindPrz_WallSides
0089062E                            ;   		tst.b	d0
0089062E                            ;   		bne.s	@przrotx
0089062E                            ;   		move.l	d1,d0
0089062E                            ;   		tst.b	d0
0089062E                            ;   		bne.s	@przrotx
0089062E                            
0089062E 6100 E0EE                    		bsr	object_FindCol_WallSides
00890632 0800 0006                    		btst	#6,d0
00890636 6600                         		bne.s	@endchk
00890638 0801 0006                    		btst	#6,d1
0089063C 6600                         		bne.s	@endchk
0089063E 4A00                         		tst.b	d0
00890640 6600                         		bne.s	@leftws
00890642 4A01                         		tst.b	d1
00890644 6600                         		bne.s	@rightws
00890646 6000                          		bra.s	@endchk
00890648                            @przrotx:
00890648                            	
00890648                            @leftws:
00890648 0C01 0002                  		cmp.b	#2,d1
0089064C 6C00                       		bge.s	@endchk
0089064E 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00890654 6700                       		beq.s	@endchk
00890656 6000                       		bra.s	@rotatex
00890658                            @rightws:
00890658 0C01 0002                  		cmp.b	#2,d1
0089065C 6C00                       		bge.s	@endchk
0089065E 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00890664 6600                       		bne.s	@endchk
00890666                            @rotatex:
00890666 4486                        		neg.l	d6
00890668 086E 0000 001E              		bchg	#bitobj_flipH,obj_status(a6)
0089066E                            @endchk:
0089066E 4E75                       		rts
00890670                            
00890670                            ; ------------------------------------------------
00890670                            ; Data
00890670                            ; ------------------------------------------------
00890670                            		
00890670                            ; ----------------------------------------
00890670                            
00890670                            ani_pikudo:
00890670 0000                       		dc.w @Idle-ani_pikudo
00890672 0000                       		dc.w @Attack-ani_pikudo
00890674                            		even
00890674                            @Idle:
00890674 03                          		dc.b 3
00890675 0001 0001 0001 0001 0001+   		dc.b 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2
00890694 0100 0100 0100 0100 0100+   		dc.b 1,0,1,0,1,0,1,0,1,0,1
0089069F FF                         		dc.b $FF
008906A0                            		even
008906A0                            @Attack:
008906A0 02                          		dc.b 2
008906A1 0304                        		dc.b 3,4
008906A3 FF                         		dc.b $FF
008906A4                            		even
008906A4                            		even
008906A4                               		include	"engine/modes/level/data/objects/platform/code.asm"
008906A4                            ; =================================================================
008906A4                            ; Object
008906A4                            ; 
008906A4                            ; Platforms
008906A4                            ; =================================================================
008906A4                            
008906A4                            ; =================================================================
008906A4                            ; ------------------------------------------------
008906A4                            ; Variables
008906A4                            ; ------------------------------------------------
008906A4                            
008906A4 =00002530                  varVramPlatfrm	equ	$2000|$530
008906A4                            
008906A4                            ; =================================================================
008906A4                            ; ------------------------------------------------
008906A4                            ; RAM
008906A4                            ; ------------------------------------------------
008906A4                            
008906A4                            		rsset obj_ram
008906A4 =00000024                  last_x		rs.w	1
008906A4 =00000026                  last_y		rs.w	1
008906A4 =00000028                  tanvalue	rs.w	1
008906A4                            
008906A4                            ; =================================================================
008906A4                            ; ------------------------------------------------
008906A4                            ; Code start
008906A4                            ; ------------------------------------------------
008906A4                            
008906A4                            Obj_Platform:
008906A4 7000                        		moveq	#0,d0
008906A6 102E 001D                   		move.b	obj_index(a6),d0
008906AA D040                        		add.w	d0,d0
008906AC 323B 0000                   		move.w	@Index(pc,d0.w),d1
008906B0 4EBB 1000                   		jsr	@Index(pc,d1.w)
008906B4                             		
008906B4                             		;TODO: si hago este check se 
008906B4                             		;desincronizan
008906B4                            ;  		bsr	Object_OffCheck
008906B4                            
008906B4                            ;    		move.l	#(varVramPlatfrm<<16),d0
008906B4                            ;  		move.l	#ani_chamoy,d1
008906B4                            ; 		bsr	Object_Animate
008906B4 203C 2530 0000              		move.l	#(varVramPlatfrm<<16),d0
008906BA 102E 0020                   		move.b	obj_frame(a6),d0
008906BE 223C 0000 0000             		move.l	#objMap_platform,d1
008906C4 6000 D8D0                   		bra	Object_Show
008906C8                             		
008906C8                            ; =================================================================
008906C8                            ; ------------------------------------------------
008906C8                            ; Code index
008906C8                            ; ------------------------------------------------
008906C8                            
008906C8                            @Index:
008906C8 0000                       		dc.w	@Init-@Index
008906CA 0000                       		dc.w	@Main-@Index
008906CC                            		even
008906CC                            		
008906CC                            ; =================================================================
008906CC                            ; ------------------------------------------------
008906CC                            ; Sub-id
008906CC                            ; ------------------------------------------------
008906CC                            
008906CC                            @id_list:
008906CC 0000 0000                  		dc.w @left_right_sin-@id_list,0
008906D0 0303 0100                  		dc.l $03030100
008906D4 0000 0000                  		dc.w @left_right_cos-@id_list,0
008906D8 0303 0100                  		dc.l $03030100
008906DC 0000 0000                  		dc.w @up_down_sin-@id_list,0
008906E0 0303 0100                  		dc.l $03030100
008906E4 0000 0000                  		dc.w @up_down_cos-@id_list,0
008906E8 0303 0100                  		dc.l $03030100
008906EC 0000 0000                  		dc.w @rotate_right-@id_list,0
008906F0 0303 0100                  		dc.l $03030100
008906F4 0000 0000                  		dc.w @rotate_left-@id_list,0
008906F8 0303 0100                  		dc.l $03030100	
008906FC 0000 0000                  		dc.w @stepfall-@id_list,0
00890700 0303 0100                  		dc.l $03030100
00890704                            		
00890704                            ; =================================================================
00890704                            ; ------------------------------------------------
00890704                            ; Index $00: Init
00890704                            ; ------------------------------------------------
00890704                            
00890704                            @Init:
00890704 062E 0001 001D             		add.b	#1,obj_index(a6)
0089070A 2D7C 0303 0001 0004        		move.l	#$03030001,obj_size(a6)		;failsafe
00890712 2D7C 0000 8000 0014        		move.l	#$8000,obj_y_spd(a6)
0089071A 3D6E 0008 0024             		move.w	obj_x(a6),last_x(a6)
00890720 3D6E 000C 0026             		move.w	obj_y(a6),last_y(a6)
00890726 422E 0020                  		clr.b	obj_frame(a6)
0089072A                            		
0089072A                            ; =================================================================
0089072A                            ; ------------------------------------------------                  
0089072A                            ; Index $01: Main
0089072A                            ; ------------------------------------------------
0089072A                            
0089072A                            @Main:
0089072A 7A00                        		moveq	#0,d5
0089072C                             		
0089072C 7000                       		moveq	#0,d0
0089072E 102E 001F                  		move.b	obj_subid(a6),d0
00890732 E748                       		lsl.w	#3,d0
00890734 2D7B 009A 0004              		move.l	@id_list+4(pc,d0.w),obj_size(a6)
0089073A 323B 0090                  		move.w	@id_list(pc,d0.w),d1
0089073E 4EBB 108C                  		jsr	@id_list(pc,d1.w)
00890742                             		
00890742 6100 E476                  		bsr	objTouch_Top
00890746 200C                       		move.l	a4,d0
00890748 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
0089074E 6600                       		bne.s	@return
00890750 4A00                       		tst.b	d0
00890752 6700                       		beq.s	@return
00890754 0C2C 0002 001D             		cmp.b	#varPlyrMdDead,obj_index(a4)
0089075A 6700                       		beq.s	@return
0089075C 6100 E67A                  		bsr	objPlyrSetFloor
00890760 4AAC 0014                  		tst.l	obj_y_spd(a4)
00890764 6B00                       		bmi.s	@return
00890766 9B6C 0008                     		sub.w	d5,obj_x(a4)
0089076A                            @return:
0089076A 4E75                       		rts
0089076C                             	
0089076C                            ; ---------------------------
0089076C                            ; Left/Right
0089076C                            ; ---------------------------
0089076C                            	
0089076C                            @left_right_cos:
0089076C 302E 0028                    		move.w	tanvalue(a6),d0
00890770                            
00890770 6000 0000                    		bra	@do_lr
00890774                              
00890774                            @left_right_sin:
00890774 302E 0028                    		move.w	tanvalue(a6),d0
00890778 4440                         		neg.w	d0
0089077A                              		
0089077A                            @do_lr:
0089077A 6100 8A78                    		bsr	CalcSine
0089077E E640                         		asr.w	#3,d0
00890780 342E 0024                    		move.w	last_x(a6),d2
00890784 D440                         		add.w	d0,d2
00890786 3A2E 0008                    		move.w	obj_x(a6),d5
0089078A 9A42                         		sub.w	d2,d5
0089078C 3D42 0008                    		move.w	d2,obj_x(a6)
00890790                              		
00890790 066E 0001 0028              		add.w	#1,tanvalue(a6)
00890796 4E75                         		rts
00890798                             
00890798                            ; ---------------------------
00890798                            ; Up/Down
00890798                            ; ---------------------------
00890798                            
00890798                            @up_down_cos:
00890798 302E 0028                  		move.w	tanvalue(a6),d0
0089079C 4440                       		neg.w	d0
0089079E 6000                       		bra.s	@do_ud
008907A0                            @up_down_sin:
008907A0 302E 0028                    		move.w	tanvalue(a6),d0
008907A4                            @do_ud:
008907A4 6100 8A4E                    		bsr	CalcSine
008907A8 E640                         		asr.w	#3,d0
008907AA 342E 0026                    		move.w	last_y(a6),d2
008907AE D440                         		add.w	d0,d2
008907B0                            ;   		move.w	obj_y(a6),d4
008907B0                            ;   		sub.w	d2,d4
008907B0 3D42 000C                     		move.w	d2,obj_y(a6)
008907B4                            
008907B4 066E 0001 0028              		add.w	#1,tanvalue(a6)
008907BA 4E75                        		rts
008907BC                             		
008907BC                            ; ---------------------------
008907BC                            ; rotate_right
008907BC                            ; ---------------------------
008907BC                            
008907BC                            @rotate_right:
008907BC                            ;   		move.w	#$20,d4
008907BC                              		
008907BC 302E 0028                    		move.w	tanvalue(a6),d0
008907C0 6100 8A32                    		bsr	CalcSine
008907C4 C1FC 0040                    		muls	#$40,d0
008907C8 E080                         		asr.l	#8,d0
008907CA 342E 0024                    		move.w	last_x(a6),d2
008907CE D440                         		add.w	d0,d2
008907D0 3A2E 0008                    		move.w	obj_x(a6),d5
008907D4 9A42                         		sub.w	d2,d5
008907D6 3D42 0008                    		move.w	d2,obj_x(a6)
008907DA                               		
008907DA 302E 0028                    		move.w	tanvalue(a6),d0
008907DE E348                         		lsl.w	#1,d0
008907E0 6100 8A12                    		bsr	CalcSine
008907E4 C3FC 0030                    		muls	#$30,d1
008907E8 E081                         		asr.l	#8,d1
008907EA 342E 0026                    		move.w	last_y(a6),d2
008907EE D441                         		add.w	d1,d2
008907F0 3D42 000C                     		move.w	d2,obj_y(a6)
008907F4                            
008907F4 066E 0001 0028              		add.w	#1,tanvalue(a6)
008907FA 4E75                        		rts
008907FC                             		
008907FC                            ; ---------------------------
008907FC                            ; rotate_left
008907FC                            ; ---------------------------
008907FC                            
008907FC                            @rotate_left:
008907FC 066E 0001 0028              		add.w	#1,tanvalue(a6)
00890802 4E75                        		rts
00890804                            
00890804                            ; ---------------------------
00890804                            ; StepFall
00890804                            ; ---------------------------
00890804                            
00890804                            @stepfall:
00890804 6100 E3B4                  		bsr	objTouch_Top
00890808 4A00                       		tst.b	d0
0089080A 6700 FF5E                  		beq	@return
0089080E 200C                       		move.l	a4,d0
00890810 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
00890816 6600 FF52                  		bne	@return
0089081A 4AAC 0014                  		tst.l	obj_y_spd(a4)
0089081E 6B00 FF4A                  		bmi	@return
00890822                            		
00890822 066E 0003 000C             		add.w	#3,obj_y(a6)
00890828 4E75                       		rts
00890828 4E75                       		rts
0089082A                               		include	"engine/modes/level/data/objects/prize/code.asm"
0089082A                            ; =================================================================
0089082A                            ; Object
0089082A                            ; 
0089082A                            ; The prize
0089082A                            ; =================================================================
0089082A                            
0089082A                            ; =================================================================
0089082A                            ; ------------------------------------------------
0089082A                            ; Variables
0089082A                            ; ------------------------------------------------
0089082A                            
0089082A =0000C5A8                  vramCoinRed	equ	$C000|$5A8
0089082A =0000C5AC                  vramCoinBlue	equ	$C000|$5AC
0089082A =0000C5B0                  vram1up		equ	$C000|$5B0
0089082A =0000C594                  vramJmpBlock	equ	$C000|$594
0089082A                            
0089082A                            ; =================================================================
0089082A                            ; ------------------------------------------------
0089082A                            ; RAM
0089082A                            ; ------------------------------------------------
0089082A                            
0089082A                            		rsset obj_ram
0089082A =00000024                  this_pos	rs.l 1			; Block type and X/Y position
0089082A =00000028                  this_vram	rs.w 1			; Vram (top left)
0089082A =0000002A                  this_counter	rs.w 1			; Counter (coins, etc.)
0089082A                            
0089082A =0000002C                  y_coin_spd	rs.l 1
0089082A =00000030                  y_pos_coin	rs.l 1
0089082A =00000034                  x_pos_main	rs.w 1
0089082A =00000036                  y_pos_main	rs.w 1
0089082A =00000038                  x_pos_l		rs.w 1
0089082A =0000003A                  x_pos_r		rs.w 1
0089082A =0000003C                  tmr_1		rs.w 1
0089082A =0000003E                  block_flags	rs.b 1
0089082A                            
0089082A                            ; =================================================================
0089082A                            ; ------------------------------------------------
0089082A                            ; Code start
0089082A                            ; ------------------------------------------------
0089082A                            
0089082A                            obj_prize:
0089082A 7000                        		moveq	#0,d0
0089082C 102E 001D                   		move.b	obj_index(a6),d0
00890830 D040                        		add.w	d0,d0
00890832 323B 0000                   		move.w	@Index(pc,d0.w),d1
00890836 4EFB 1000                   		jmp	@Index(pc,d1.w)
0089083A                             		
0089083A                            ; ------------------------------------------------
0089083A                            
0089083A                            @Index:
0089083A 0000                       		dc.w	@Init-@Index
0089083C 0000                       		dc.w	@Main-@Index
0089083E                            		even
0089083E                            		
0089083E                            ; =================================================================
0089083E                            ; ------------------------------------------------
0089083E                            ; Index $00: Init
0089083E                            ; ------------------------------------------------
0089083E                            
0089083E                            @Init:
0089083E 062E 0001 001D             		add.b	#1,obj_index(a6)
00890844 202E 0024                  		move.l	this_pos(a6),d0
00890848 4840                        		swap	d0
0089084A 0240 FFF0                   		and.w	#$FFF0,d0
0089084E 3D40 0008                   		move.w	d0,obj_x(a6)
00890852 4840                        		swap	d0
00890854 E848                        		lsr.w	#4,d0
00890856 0240 FFF0                   		and.w	#$FFF0,d0
0089085A 3D40 000C                   		move.w	d0,obj_y(a6)
0089085E                            
0089085E 202E 0024                   		move.l	this_pos(a6),d0
00890862 6100 D0BC                  		bsr	Level_HidePrize
00890866                            
00890866 2D7C FFFC 0000 0014         		move.l	#-$40000,obj_y_spd(a6)
0089086E 4A2E 001F                   		tst.b	obj_subid(a6)
00890872 6700                        		beq.s	@not_brick
00890874 2D7C FFFE 0000 0014         		move.l	#-$20000,obj_y_spd(a6)
0089087C                            @not_brick:
0089087C 3D6E 0008 0034              		move.w	obj_x(a6),x_pos_main(a6)
00890882 302E 000C                   		move.w	obj_y(a6),d0
00890886 3D40 0036                   		move.w	d0,y_pos_main(a6)
0089088A 0440 0010                   		sub.w	#$10,d0
0089088E 4840                        		swap	d0
00890890 2D40 0030                   		move.l	d0,y_pos_coin(a6)
00890894                             		
00890894 3D6E 0008 0038              		move.w	obj_x(a6),x_pos_l(a6)
0089089A 3D6E 0008 003A              		move.w	obj_x(a6),x_pos_r(a6)
008908A0 066E 0008 003A              		add.w	#8,x_pos_r(a6)
008908A6 2D7C FFFC 0000 002C         		move.l	#-$40000,y_coin_spd(a6)
008908AE                             		
008908AE 2D7C 0101 0101 0004         		move.l	#$01010101,obj_size(a6)
008908B6 08EE 0006 001E              		bset	#bitobj_hit,obj_status(a6)
008908BC                             		
008908BC                            ; =================================================================
008908BC                            ; ------------------------------------------------                  
008908BC                            ; Index $01: Main
008908BC                            ; ------------------------------------------------
008908BC                            
008908BC                            @Main:
008908BC 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
008908C2 7000                        		moveq	#0,d0
008908C4 102E 001F                   		move.b	obj_subid(a6),d0
008908C8 0200 007F                   		and.b	#$7F,d0
008908CC D040                        		add.w	d0,d0
008908CE 323B 0000                   		move.w	@subtypes(pc,d0.w),d1
008908D2 4EFB 1000                   		jmp	@subtypes(pc,d1.w)
008908D6                            		
008908D6                            ; ------------------------------------------------
008908D6                            ; Subs
008908D6                            ; ------------------------------------------------
008908D6                            
008908D6                            @subtypes:
008908D6 0000                       		dc.w @destroy-@subtypes		; $00 - Breakable block
008908D8 0000                       		dc.w @bump_solid-@subtypes	; $01 - Bump, normal
008908DA 0000                       		dc.w @bump_coin-@subtypes	; $02 - Bump, add red coin (1)
008908DC 0000                       		dc.w @bump_coin_blue-@subtypes	; $03 - Bump, add blue coin (2)
008908DE 0000                       		dc.w @bump_1up-@subtypes	; $04 - Bump, add extra life
008908E0 0000                       		dc.w @trampoline-@subtypes	; $05 - Trampoline animation
008908E2                            		
008908E2                            ; ------------------------------------------------
008908E2                            ; Return
008908E2                            ; ------------------------------------------------
008908E2                            
008908E2                            @return:
008908E2 4E75                       		rts
008908E4                            		
008908E4                            ; ------------------------------------------------
008908E4                            ; Destroy block
008908E4                            ; ------------------------------------------------
008908E4                            
008908E4                            @destroy:
008908E4 2E2E 0014                  		move.l	obj_y_spd(a6),d7
008908E8                            		
008908E8 223C 0000 0000             		move.l	#$0000,d1
008908EE 4841                       		swap	d1
008908F0 322E 0028                  		move.w	this_vram(a6),d1
008908F4 0041 8000                  		or.w	#$8000,d1
008908F8                            		
008908F8 362E 003A                  		move.w	x_pos_r(a6),d3
008908FC 066E 0001 003A             		add.w	#1,x_pos_r(a6)
00890902 4843                       		swap	d3
00890904 342E 0038                  		move.w	x_pos_l(a6),d2
00890908 046E 0001 0038             		sub.w	#1,x_pos_l(a6)
0089090E 4842                       		swap	d2
00890910                            	
00890910 2002                       		move.l	d2,d0
00890912 302E 000C                  		move.w	obj_y(a6),d0
00890916 0480 0006 0000             		sub.l	#$60000,d0
0089091C 0440 0010                  		sub.w	#$10,d0
00890920 6100 D6F6                  		bsr	Object_ExtSprite
00890924 2003                       		move.l	d3,d0
00890926 0641 0002                   		add.w	#2,d1
0089092A 302E 000C                  		move.w	obj_y(a6),d0
0089092E 0680 0004 0000             		add.l	#$40000,d0	
00890934 0440 0014                  		sub.w	#$14,d0
00890938 6100 D6DE                  		bsr	Object_ExtSprite
0089093C 2002                       		move.l	d2,d0
0089093E 0441 0001                   		sub.w	#1,d1
00890942 302E 000C                  		move.w	obj_y(a6),d0
00890946 0480 0001 0000             		sub.l	#$10000,d0
0089094C 6100 D6CA                  		bsr	Object_ExtSprite
00890950 2003                       		move.l	d3,d0
00890952 0641 0002                   		add.w	#2,d1
00890956 302E 000C                  		move.w	obj_y(a6),d0
0089095A 0680 0003 0000             		add.l	#$30000,d0
00890960 0440 0004                  		sub.w	#4,d0
00890964 6100 D6B2                  		bsr	Object_ExtSprite
00890968                            		
00890968 0687 0000 4000              		add.l	#$4000,d7
0089096E 4A87                        		tst.l	d7
00890970 6B00                        		bmi.s	@minus
00890972 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00890978                            @minus:
00890978 DFAE 000C                  		add.l	d7,obj_y(a6)
0089097C                            		
0089097C 322E 000C                  		move.w	obj_y(a6),d1
00890980 303C 0140                  		move.w	#320,d0
00890984 D06D 0020                  		add.w	lvl_y(a5),d0
00890988 B240                       		cmp.w	d0,d1
0089098A 6D00                       		blt.s	@lower_y
0089098C 4EF9 0088 E0A6             		jmp	Object_Delete
00890992                            @lower_y:
00890992 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00890996 4E75                           		rts
00890998                            		
00890998                            ; ------------------------------------------------
00890998                            ; Bump, nothing (or reveral hidden block)
00890998                            ; ------------------------------------------------
00890998                            
00890998                            @bump_solid:
00890998 2E2E 0014                  		move.l	obj_y_spd(a6),d7
0089099C 2C2E 002C                  		move.l	y_coin_spd(a6),d6
008909A0                            		
008909A0                            ; 		move.l	#$0005,d1
008909A0                            ; 		swap	d1
008909A0                            ; 		move.w	#vramCoinRed,d1
008909A0                            ;  		move.l	y_pos_coin(a6),d0
008909A0                            ;  		move.w	obj_x(a6),d0
008909A0                            ;  		swap	d0
008909A0                            ; 		bsr	Object_ExtSprite
008909A0                            		
008909A0 082E 0000 003E              		btst	#0,block_flags(a6)
008909A6 6600                        		bne.s	@stopblock
008909A8 223C 0000 0005             		move.l	#$0005,d1
008909AE 4841                       		swap	d1
008909B0 322E 0028                  		move.w	this_vram(a6),d1
008909B4 0041 8000                  		or.w	#$8000,d1
008909B8                            		
008909B8 302E 0008                  		move.w	obj_x(a6),d0
008909BC 4840                       		swap	d0
008909BE 302E 000C                  		move.w	obj_y(a6),d0
008909C2 6100 D654                  		bsr	Object_ExtSprite
008909C6 0687 0000 4000              		add.l	#$4000,d7
008909CC 4A87                        		tst.l	d7
008909CE 6B00                        		bmi.s	@minus2
008909D0 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
008909D6                            @minus2:
008909D6 DFAE 000C                  		add.l	d7,obj_y(a6)
008909DA                            @stopblock:
008909DA 0686 0000 4000              		add.l	#$4000,d6
008909E0 DDAE 0030                  		add.l	d6,y_pos_coin(a6)
008909E4                            		
008909E4 302E 000C                  		move.w	obj_y(a6),d0
008909E8 322E 0036                  		move.w	y_pos_main(a6),d1
008909EC B041                       		cmp.w	d1,d0
008909EE 6F00                       		ble.s	@return3
008909F0                            		
008909F0 202E 0024                   		move.l	this_pos(a6),d0
008909F4 6100 E8B0                  		bsr	Prize_Locate
008909F8                            ; 		move.b	#$F,d0
008909F8                            ; 		move.b	d0,(a3)
008909F8 6100 CF42                   		bsr	Level_ShowPrize
008909FC 08EE 0000 003E              		bset	#0,block_flags(a6)
00890A02 4EF9 0088 E0A6              		jmp	Object_Delete
00890A08                             		
00890A08                            @return3:
00890A08                            
00890A08                            ; 		move.w	y_pos_coin(a6),d0
00890A08                            ; 		move.w	y_pos_main(a6),d1
00890A08                            ; 		sub.w	#$10,d1
00890A08                            ; 		cmp.w	d1,d0
00890A08                            ; 		ble.s	@return2
00890A08                            ;   		jmp	Object_Delete
00890A08                            ;   		
00890A08                            ; @return2:
00890A08 2D46 002C                  		move.l	d6,y_coin_spd(a6)
00890A0C 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00890A10 4E75                        		rts
00890A12                             		
00890A12                            ; ------------------------------------------------
00890A12                            ; Bump block
00890A12                            ; ------------------------------------------------
00890A12                            
00890A12                            @bump_1up:
00890A12 223C 0000 0005             		move.l	#$0005,d1
00890A18 4841                       		swap	d1
00890A1A 323C C5B0                  		move.w	#vram1up,d1
00890A1E 202E 0030                   		move.l	y_pos_coin(a6),d0
00890A22 302E 0008                   		move.w	obj_x(a6),d0
00890A26 4840                        		swap	d0
00890A28 6100 D5EE                  		bsr	Object_ExtSprite
00890A2C 6000                       		bra.s	@from_coin_blue
00890A2E                            		
00890A2E                            @bump_coin_blue:
00890A2E 223C 0000 0005             		move.l	#$0005,d1
00890A34 4841                       		swap	d1
00890A36 323C C5AC                  		move.w	#vramCoinBlue,d1
00890A3A 202E 0030                   		move.l	y_pos_coin(a6),d0
00890A3E 302E 0008                   		move.w	obj_x(a6),d0
00890A42 4840                        		swap	d0
00890A44 6100 D5D2                  		bsr	Object_ExtSprite
00890A48 6000                       		bra.s	@from_coin_blue
00890A4A                            		
00890A4A                            @bump_coin:
00890A4A 223C 0000 0005             		move.l	#$0005,d1
00890A50 4841                       		swap	d1
00890A52 323C C5A8                  		move.w	#vramCoinRed,d1
00890A56 202E 0030                   		move.l	y_pos_coin(a6),d0
00890A5A 302E 0008                   		move.w	obj_x(a6),d0
00890A5E 4840                        		swap	d0
00890A60 6100 D5B6                  		bsr	Object_ExtSprite
00890A64                            		
00890A64                            @from_coin_blue:
00890A64 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00890A68 2C2E 002C                  		move.l	y_coin_spd(a6),d6
00890A6C                            		
00890A6C 082E 0000 003E              		btst	#0,block_flags(a6)
00890A72 6600                        		bne.s	@stopblock2
00890A74 223C 0000 0005             		move.l	#$0005,d1
00890A7A 4841                       		swap	d1
00890A7C 322E 0028                  		move.w	this_vram(a6),d1
00890A80 0041 8000                  		or.w	#$8000,d1
00890A84                            		
00890A84 302E 0008                  		move.w	obj_x(a6),d0
00890A88 4840                       		swap	d0
00890A8A 302E 000C                  		move.w	obj_y(a6),d0
00890A8E 6100 D588                  		bsr	Object_ExtSprite
00890A92 0687 0000 4000              		add.l	#$4000,d7
00890A98 4A87                        		tst.l	d7
00890A9A 6B00                        		bmi.s	@minus3
00890A9C 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00890AA2                            @minus3:
00890AA2 DFAE 000C                  		add.l	d7,obj_y(a6)
00890AA6                            @stopblock2:
00890AA6 0686 0000 4000              		add.l	#$4000,d6
00890AAC DDAE 0030                  		add.l	d6,y_pos_coin(a6)
00890AB0                            		
00890AB0 302E 000C                  		move.w	obj_y(a6),d0
00890AB4 322E 0036                  		move.w	y_pos_main(a6),d1
00890AB8 B041                       		cmp.w	d1,d0
00890ABA 6F00                       		ble.s	@return4
00890ABC                            		
00890ABC 202E 0024                   		move.l	this_pos(a6),d0
00890AC0 6100 E7E4                  		bsr	Prize_Locate
00890AC4 103C 000F                  		move.b	#$F,d0
00890AC8 1680                       		move.b	d0,(a3)
00890ACA 6100 CE70                   		bsr	Level_ShowPrize
00890ACE 08EE 0000 003E              		bset	#0,block_flags(a6)
00890AD4 4EF9 0088 E0A6              		jmp	Object_Delete
00890ADA                             		
00890ADA                            @return4:
00890ADA                            
00890ADA 302E 0030                  		move.w	y_pos_coin(a6),d0
00890ADE 322E 0036                  		move.w	y_pos_main(a6),d1
00890AE2 0441 0010                  		sub.w	#$10,d1
00890AE6 B041                       		cmp.w	d1,d0
00890AE8 6F00                       		ble.s	@return5
00890AEA 4EF9 0088 E0A6               		jmp	Object_Delete
00890AF0                              		
00890AF0                            @return5:
00890AF0 2D46 002C                  		move.l	d6,y_coin_spd(a6)
00890AF4 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00890AF8 4E75                       		rts
00890AFA                            		
00890AFA                            ; ------------------------------------------------
00890AFA                            ; Trampoline
00890AFA                            ; ------------------------------------------------
00890AFA                            
00890AFA                            @trampoline:
00890AFA 062E 0001 003C             		add.b	#1,tmr_1(a6)
00890B00 082E 0003 003C             		btst	#3,tmr_1(a6)
00890B06 6600                       		bne.s	@finish
00890B08                            ; 		cmp.b	#16,tmr_1(a6)
00890B08                            ; 		bge.s	@finish
00890B08                            		
00890B08 223C 0000 0005             		move.l	#$0005,d1
00890B0E 4841                       		swap	d1
00890B10 323C C598                  		move.w	#vramJmpBlock+4,d1
00890B14 302E 0008                   		move.w	obj_x(a6),d0
00890B18 4840                        		swap	d0
00890B1A 302E 000C                   		move.w	obj_y(a6),d0
00890B1E 6000 D4F8                  		bra	Object_ExtSprite
00890B22                            		
00890B22                            @finish:
00890B22 202E 0024                   		move.l	this_pos(a6),d0
00890B26 6100 CE14                  		bsr	Level_ShowPrize
00890B2A 4EF9 0088 E0A6               		jmp	Object_Delete
00890B30                              		
00890B30                            ; =================================================================
00890B30                            ; ------------------------------------------------
00890B30                            ; Subs
00890B30                            ; ------------------------------------------------
00890B30                            
00890B30                            		
00890B30                            ; =================================================================
00890B30                            		
00890B30                            		
00890B30                                		include	"engine/modes/level/data/objects/ball/code.asm" 
00890B30                            ; =================================================================
00890B30                            ; Object
00890B30                            ; 
00890B30                            ; A Ball
00890B30                            ; =================================================================
00890B30                            
00890B30                            ; =================================================================
00890B30                            ; ------------------------------------------------
00890B30                            ; Variables
00890B30                            ; ------------------------------------------------
00890B30                            
00890B30 =000044B8                  varVramBall	equ	$4000|$4B8
00890B30                            
00890B30                            ; =================================================================
00890B30                            ; ------------------------------------------------
00890B30                            ; Code start
00890B30                            ; ------------------------------------------------
00890B30                            
00890B30                            Obj_Ball:
00890B30 7000                        		moveq	#0,d0
00890B32 102E 001D                   		move.b	obj_index(a6),d0
00890B36 D040                        		add.w	d0,d0
00890B38 323B 0000                   		move.w	@Index(pc,d0.w),d1
00890B3C 4EBB 1000                   		jsr	@Index(pc,d1.w)
00890B40 6100 D794                   		bsr	Object_OffCheck
00890B44                             		
00890B44 203C 44B8 0000             		move.l	#(varVramBall<<16),d0
00890B4A 102E 0020                  		move.b	obj_frame(a6),d0
00890B4E 223C 0000 0000             		move.l	#map_Ball,d1
00890B54 6000 D440                   		bra	Object_Show
00890B58                             		
00890B58                            ; ------------------------------------------------
00890B58                            
00890B58                            @Index:
00890B58 0000                       		dc.w	@Init-@Index
00890B5A 0000                       		dc.w	@Main-@Index
00890B5C                            		even
00890B5C                            		
00890B5C                            ; =================================================================
00890B5C                            ; ------------------------------------------------
00890B5C                            ; Index $00: Init
00890B5C                            ; ------------------------------------------------
00890B5C                            
00890B5C                            @Init:
00890B5C 062E 0001 001D             		add.b	#1,obj_index(a6)
00890B62 2D7C 0101 0101 0004        		move.l	#$01010101,obj_size(a6)
00890B6A 2D7C 0000 6000 0014        		move.l	#$6000,obj_y_spd(a6)
00890B72 422E 0020                  		clr.b	obj_frame(a6)
00890B76 422E 001C                  		clr.b	obj_anim_spd(a6)
00890B7A 2D7C FFFE 8000 0010        		move.l	#-$18000,obj_x_spd(a6)
00890B82                            		
00890B82                            ; =================================================================
00890B82                            ; ------------------------------------------------                  
00890B82                            ; Index $01: Main
00890B82                            ; ------------------------------------------------
00890B82                            
00890B82                            @Main:
00890B82                            ; 		bsr.s	@move_ball
00890B82                            ; 		bra	@check_touch
00890B82                            		
00890B82                            ; =================================================================
00890B82                            ; ------------------------------------------------
00890B82                            ; Subs
00890B82                            ; ------------------------------------------------
00890B82                            
00890B82                            @move_ball:
00890B82 2C2E 0010                   		move.l	obj_x_spd(a6),d6
00890B86 2E2E 0014                   		move.l	obj_y_spd(a6),d7
00890B8A DDAE 0008                   		add.l	d6,obj_x(a6)
00890B8E DFAE 000C                   		add.l	d7,obj_y(a6)
00890B92                             		
00890B92 4AAE 0008                   		tst.l	obj_x(a6)
00890B96 6A00                        		bpl.s	@fine_x
00890B98 42AE 0008                   		clr.l	obj_x(a6)
00890B9C 2C3C 0002 0000             		move.l	#$20000,d6
00890BA2                            @fine_x:
00890BA2 7000                       		moveq	#0,d0
00890BA4 3039 FFFF BC30             		move.w	(RAM_LvlPlanes+lvl_size_x),d0
00890BAA E948                       		lsl.w	#4,d0
00890BAC 4840                       		swap	d0
00890BAE 222E 0008                  		move.l	obj_x(a6),d1
00890BB2 B280                       		cmp.l	d0,d1
00890BB4 6D00                       		blt.s	@fine_x_r
00890BB6 2C3C FFFE 0000             		move.l	#-$20000,d6
00890BBC                            @fine_x_r:
00890BBC                            	
00890BBC                            ; ----------------------------------
00890BBC                            
00890BBC 0687 0000 4000              		add.l	#$4000,d7
00890BC2 0C87 0008 0000              		cmp.l	#$80000,d7
00890BC8 6D00                        		blt.s	@low_y
00890BCA 2E3C 0008 0000              		move.l	#$80000,d7
00890BD0                            @low_y:
00890BD0                             		
00890BD0 4A87                        		tst.l	d7
00890BD2 6A00                        		bpl.s	@Freec
00890BD4 6100 D9B8                  		bsr	object_FindPrz_Ceiling
00890BD8 4A00                       		tst.b	d0
00890BDA 6600                       		bne.s	@FndCeilPrz
00890BDC 6100 DDA4                  		bsr	object_FindPrz_CeilingSides
00890BE0 4A00                       		tst.b	d0
00890BE2 6600                       		bne.s	@FndCeilPrz
00890BE4 2001                       		move.l	d1,d0
00890BE6 4A00                       		tst.b	d0
00890BE8 6600                       		bne.s	@FndCeilPrz
00890BEA                            		
00890BEA 6100 D9AE                  		bsr	object_FindCol_Ceiling
00890BEE 0800 0006                  		btst	#6,d0
00890BF2 6600                       		bne.s	@Freec
00890BF4 4A00                       		tst.b	d0
00890BF6 6600                       		bne.s	@FoundCeiling
00890BF8 6100 DD94                  		bsr	object_FindCol_CeilingSides
00890BFC 4A00                       		tst.b	d0
00890BFE 6600                       		bne.s	@FoundCeiling
00890C00 2001                       		move.l	d1,d0
00890C02 4A00                       		tst.b	d0
00890C04 6600                       		bne.s	@FoundCeiling
00890C06 6000                       		bra.s	@Freec
00890C08                            @FndCeilPrz:
00890C08 0800 0007                  		btst	#7,d0
00890C0C 6600                       		bne.s	@Freec
00890C0E                            @FoundCeiling:
00890C0E 0800 0006                  		btst	#6,d0
00890C12 6600                       		bne.s	@Freec
00890C14                            		
00890C14 6100 DF5A                  		bsr	object_SetCol_Ceiling
00890C18                            		
00890C18                            ; ----------------------------------
00890C18                            
00890C18                            @Freec:	
00890C18 4A87                        		tst.l	d7
00890C1A 6B00                        		bmi.s	@Free
00890C1C                             	
00890C1C 6100 D836                  		bsr	object_FindPrz_Floor
00890C20 0800 0007                  		btst	#7,d0
00890C24 6600                       		bne.s	@Free
00890C26 0800 0006                  		btst	#6,d0
00890C2A 6600                       		bne.s	@Free
00890C2C 4A00                       		tst.b	d0
00890C2E 6600                       		bne.s	@przflr
00890C30                            		
00890C30 6100 D82E                  		bsr	object_FindCol_Floor
00890C34 0800 0006                  		btst	#6,d0
00890C38 6600                       		bne.s	@Free
00890C3A 4A00                       		tst.b	d0
00890C3C 6700                       		beq.s	@Free
00890C3E                            
00890C3E                            @przflr:
00890C3E 6100 DEB6                  		bsr	object_SetCol_Floor
00890C42 2E3C FFFA 0000              		move.l	#-$60000,d7
00890C48                            
00890C48 203C 0000 0000               		move.l	#SndSfx_PING,d0
00890C4E 7202                         		moveq 	#2,d1
00890C50 7401                         		moveq	#1,d2
00890C52 6100 8D2E                    		bsr	Audio_Track_play
00890C56                            @Free:
00890C56                            
00890C56                            ; ----------------------------------------
00890C56                            
00890C56                            ;  		bsr	object_FindPrz_WallSides
00890C56                            ; ;  		tst.l	d6
00890C56                            ; ;  		bmi.s	@to_left
00890C56                            ; 		btst	#7,d0
00890C56                            ; 		bne.s	@FreeWall2
00890C56                            ; 		btst	#6,d0
00890C56                            ; 		bne.s	@FreeWall2
00890C56                            ; 		tst.b	d0
00890C56                            ; 		bne.s	@FoundW
00890C56                            ; 		bra.s	@FreeWall2
00890C56                            ; @to_left:
00890C56                            ; ; 		tst.l	d6
00890C56                            ; ; 		bpl.s	@FreeWall2
00890C56                            ; 		btst	#7,d1
00890C56                            ; 		bne.s	@FreeWall2
00890C56                            ; 		btst	#6,d1
00890C56                            ; 		bne.s	@FreeWall2
00890C56                            ; 		tst.b	d1
00890C56                            ; 		bne.s	@FoundW
00890C56                            ; 		
00890C56                            ; @FreeWall2:
00890C56 6100 DAC6                  		bsr	object_FindCol_WallSides
00890C5A 4A86                       		tst.l	d6
00890C5C 6B00                       		bmi.s	@dontlft
00890C5E 4A00                        		tst.b	d0
00890C60 6600                        		bne.s	@FoundW
00890C62                            @dontlft:
00890C62 4A86                       		tst.l	d6
00890C64 6A00                       		bpl.s	@FreeWall
00890C66 2001                       		move.l	d1,d0
00890C68 4A00                         		tst.b	d0
00890C6A 6600                        		bne.s	@FoundW
00890C6C 6000                       		bra.s	@FreeWall
00890C6E                            
00890C6E                            @FoundW:
00890C6E 0C00 0002                  		cmp.b	#2,d0
00890C72 6C00                       		bge.s	@FreeWall
00890C74                            ; 		bsr	object_SetCol_Wall
00890C74 4486                       		neg.l	d6
00890C76 086E 0000 001E             		bchg	#bitobj_flipH,obj_status(a6)
00890C7C                            @FreeWall:
00890C7C                            
00890C7C                            ; ------------------------------------
00890C7C                            
00890C7C 042E 0001 001C              		sub.b	#1,obj_anim_spd(a6)
00890C82 6A00                        		bpl.s	@plusanim
00890C84 1D7C 0007 001C              		move.b	#7,obj_anim_spd(a6)
00890C8A 062E 0001 0020               		add.b	#1,obj_frame(a6)
00890C90 022E 0003 0020              		and.b	#%11,obj_frame(a6)
00890C96                            @plusanim:
00890C96                            
00890C96                            ; ------------------------------------
00890C96                            
00890C96 2D46 0010                   		move.l	d6,obj_x_spd(a6)
00890C9A 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00890C9E                            ; 		rts
00890C9E                            		
00890C9E                            ; =================================================================
00890C9E                            ; ----------------------------------
00890C9E                            ; Check if touched
00890C9E                            ; ----------------------------------
00890C9E                            
00890C9E                            @check_touch:
00890C9E 6100 DF1A                  		bsr	objTouch_Top
00890CA2 4A00                       		tst.b	d0
00890CA4 6600                       		bne.s	@touch_flag
00890CA6 6100 DFB0                  		bsr	objTouch_Bottom
00890CAA 4A00                       		tst.b	d0
00890CAC 6600                       		bne.s	@touch_flag
00890CAE                            		
00890CAE 6100 E048                  		bsr	objTouch_Sides
00890CB2 4A00                       		tst.b	d0
00890CB4 6600                       		bne.s	@touch_flag
00890CB6 4840                       		swap	d0
00890CB8 4A00                       		tst.b	d0
00890CBA 6600                       		bne.s	@touch_flag
00890CBC 4E75                       		rts
00890CBE                            		
00890CBE                            ; -----------------------------------
00890CBE                            
00890CBE                            @touch_flag:
00890CBE 6100 E21C                  		bsr	objPlyrHurtKill
00890CC2 6700                       		beq.s	@return
00890CC4 323C 44B8                     		move.w	#varVramBall,d1
00890CC8 142E 0020                   		move.b	obj_frame(a6),d2
00890CCC 203C 0000 0000             		move.l	#map_Ball,d0
00890CD2 260C                       		move.l	a4,d3
00890CD4 6100 E5FA                  		bsr	objAction_SetStomp
00890CD8 6000 D5DC                  		bra	Object_IsGone
00890CDC                            @return:
00890CDC 4E75                       		rts
00890CDC 4E75                       		rts
00890CDE                               		include	"engine/modes/level/data/objects/endflag/code.asm"
00890CDE                            ; =================================================================
00890CDE                            ; Object
00890CDE                            ; 
00890CDE                            ; Level end flag
00890CDE                            ; =================================================================
00890CDE                            
00890CDE                            ; =================================================================
00890CDE                            ; ------------------------------------------------
00890CDE                            ; Variables
00890CDE                            ; ------------------------------------------------
00890CDE                            
00890CDE =00006540                  varEndFlagVRAM	equ	$6000|$540
00890CDE                            
00890CDE                            ; =================================================================
00890CDE                            ; ------------------------------------------------
00890CDE                            ; Code start
00890CDE                            ; ------------------------------------------------
00890CDE                            
00890CDE                            Obj_EndFlag:
00890CDE 7000                        		moveq	#0,d0
00890CE0 102E 001D                   		move.b	obj_index(a6),d0
00890CE4 D040                        		add.w	d0,d0
00890CE6 323B 0000                   		move.w	@Index(pc,d0.w),d1
00890CEA 4EBB 1000                   		jsr	@Index(pc,d1.w)
00890CEE                            		
00890CEE 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00890CF4 302E 0008                  		move.w	obj_x(a6),d0
00890CF8 0440 0140                  		sub.w	#320,d0
00890CFC 322C 0008                  		move.w	obj_x(a4),d1
00890D00 B240                       		cmp.w	d0,d1
00890D02 6D00                       		blt.s	@im_gone
00890D04                            		
00890D04 203C 6540 0000                 		move.l	#(varEndFlagVRAM<<16),d0
00890D0A 102E 0020                     		move.b	obj_frame(a6),d0	
00890D0E 223C 0000 0000              		move.l	#mapObj_EndFlag,d1
00890D14 6100 D280                    		bsr	Object_Show
00890D18                             		
00890D18 203C 6540 0000                		move.l	#(varEndFlagVRAM<<16),d0
00890D1E 102E 0020                     		move.b	obj_frame(a6),d0
00890D22 223C 0000 0000             		move.l	#dplcObj_EndFlag,d1
00890D28 243C 0000 0000             		move.l	#artObj_EndFlag,d2
00890D2E 6000 D20C                  		bra	Object_DPLC
00890D32                            		
00890D32                            @im_gone:
00890D32 4E75                       		rts
00890D34                            		
00890D34                            ; ------------------------------------------------
00890D34                            
00890D34                            @Index:
00890D34 0000                       		dc.w	@Init-@Index
00890D36 0000                       		dc.w	@Main-@Index
00890D38                            		even
00890D38                            		
00890D38                            ; =================================================================
00890D38                            ; ------------------------------------------------
00890D38                            ; Index $00: Init
00890D38                            ; ------------------------------------------------
00890D38                            
00890D38                            @Init:
00890D38 062E 0001 001D             		add.b	#1,obj_index(a6)
00890D3E 2D7C 0202 0303 0004        		move.l	#$02020303,obj_size(a6)
00890D46 4E75                       		rts
00890D48                            		
00890D48                            ; =================================================================
00890D48                            ; ------------------------------------------------                  
00890D48                            ; Index $01: Main
00890D48                            ; ------------------------------------------------
00890D48                            
00890D48                            @Main:
00890D48 042E 0001 001C             		sub.b	#1,obj_anim_spd(a6)
00890D4E 6A00                       		bpl.s	@plus
00890D50 1D7C 0006 001C             		move.b	#6,obj_anim_spd(a6)
00890D56 062E 0001 0020             		add.b	#1,obj_frame(a6)
00890D5C 0C2E 0003 0020             		cmp.b	#3,obj_frame(a6)
00890D62 6D00                       		blt.s	@plus
00890D64 422E 0020                  		clr.b	obj_frame(a6)
00890D68                            @plus:
00890D68 6100 DE36                  		bsr	objTouch
00890D6C 4A00                       		tst.b	d0
00890D6E 6700                       		beq.s	@return
00890D70                            
00890D70                            ;   		add.w	#1,(RAM_CurrLevel)
00890D70 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
00890D76 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
00890D7E                            @return:
00890D7E 4E75                       		rts
00890D80                            		
00890D80                            ; =================================================================
00890D80                            		
00890D80                            		
00890D80                                		include	"engine/modes/level/data/objects/actionscript/code.asm"  
00890D80                            ; =================================================================
00890D80                            ; Object (SPECIAL)
00890D80                            ; 
00890D80                            ; Action script
00890D80                            ; =================================================================
00890D80                            
00890D80                            ; =================================================================
00890D80                            ; ------------------------------------------------
00890D80                            ; Variables
00890D80                            ; ------------------------------------------------
00890D80                            
00890D80                            		rsset obj_ram
00890D80 =00000024                  gotMaps		rs.l 1
00890D80 =00000028                  gotVram		rs.w 1
00890D80 =0000002A                  gotFrame	rs.w 1 		;its a byte
00890D80 =0000002C                  gotWho		rs.l 1
00890D80                            
00890D80                            ; =================================================================
00890D80                            ; ------------------------------------------------
00890D80                            ; Code start
00890D80                            ; ------------------------------------------------
00890D80                            
00890D80                            obj_actionscript:
00890D80 7000                       		moveq	#0,d0
00890D82 102E 001D                  		move.b	obj_index(a6),d0
00890D86 D040                       		add.w	d0,d0
00890D88 323B 0000                  		move.w	@list(pc,d0.w),d1
00890D8C 4EFB 1000                  		jmp	@list(pc,d1.w)
00890D90                            	
00890D90                            ; ------------------------------------------------
00890D90                            
00890D90                            @list:
00890D90 0000                       		dc.w @killobj_init-@list
00890D92 0000                       		dc.w @killobj_main-@list
00890D94                            
00890D94 0000                       		dc.w 0
00890D96 0000                       		dc.w 0
00890D98                            		
00890D98                            ; ------------------------------------------------
00890D98                            ; Action: kill object
00890D98                            ; ------------------------------------------------
00890D98                            
00890D98                            @killobj_init:
00890D98 002E 0001 001D             		or.b	#1,obj_index(a6)
00890D9E 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
00890DA4 08AE 0006 001E             		bclr	#bitobj_hit,obj_status(a6)
00890DAA                            		
00890DAA 08EE 0001 001E             		bset	#bitobj_FlipV,obj_status(a6)
00890DB0 2D7C FFFC 0000 0014        		move.l	#-$40000,obj_y_spd(a6)
00890DB8                            
00890DB8                            		;Read player
00890DB8 202E 002C                  		move.l	gotWho(a6),d0
00890DBC 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
00890DC2 6600                       		bne.s	@notplayer
00890DC4 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00890DCA 297C FFFD 0000 0014        		move.l	#-$30000,obj_y_spd(a4)
00890DD2 197C 0002 001A              		move.b	#varPlyAniJump,obj_anim_id(a4)
00890DD8 08EC 0002 001E             		bset 	#bitobj_air,obj_status(a4)
00890DDE                            @notplayer:
00890DDE 203C 0000 0000               		move.l	#SndSfx_HitEnemy,d0
00890DE4 7202                         		moveq 	#2,d1
00890DE6 7401                         		moveq	#1,d2
00890DE8 6100 8B98                    		bsr	Audio_Track_play
00890DEC                              		
00890DEC                            ; --------------------------
00890DEC                            
00890DEC                            @killobj_main:
00890DEC 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00890DF0 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00890DF4 0687 0000 4000             		add.l	#$4000,d7
00890DFA DDAE 0008                  		add.l	d6,obj_x(a6)
00890DFE DFAE 000C                  		add.l	d7,obj_y(a6)
00890E02 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00890E06 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00890E0A                            		
00890E0A 6100 D4CA                   		bsr	Object_OffCheck
00890E0E 7000                       		moveq	#0,d0
00890E10 302E 0028                      		move.w	gotVram(a6),d0
00890E14 4840                           		swap	d0
00890E16 102E 002A                   		move.b	gotFrame(a6),d0
00890E1A 222E 0024                  		move.l	gotMaps(a6),d1
00890E1E 6000 D176                   		bra	Object_Show
00890E22                            		
00890E22                            ; ------------------------------------------------
00890E22                            ; Action: hurt the enemy
00890E22                            ; ------------------------------------------------
00890E22                            
00890E22                            ; =================================================================
00890E22                            ; =================================================================
00890E22                                		include	"engine/modes/level/data/objects/hudinfo/code.asm"  
00890E22                            ; =================================================================
00890E22                            ; Object
00890E22                            ; 
00890E22                            ; Level end flag
00890E22                            ; =================================================================
00890E22                            
00890E22                            ; =================================================================
00890E22                            ; ------------------------------------------------
00890E22                            ; Variables
00890E22                            ; ------------------------------------------------
00890E22                            
00890E22 =0000C580                  varHudBase	equ	$C000|$580
00890E22 =0000C5A8                  varVramHudCoinR	equ	$C000|$5A8
00890E22 =0000C5AC                  varVramHudCoinB	equ	$C000|$5AC
00890E22 =0000C5B0                  varHudLife	equ	$C000|$5B0
00890E22 =0000C5BC                  varHudLifeBar	equ	$C000|$5BC
00890E22 =0000C5C0                  varHudDigits	equ	$C000|$5C0
00890E22                            
00890E22                            		rsset obj_ram
00890E22 =00000024                  ramLastCoins	rs.w	1
00890E22 =00000026                  ramDecCoins 	rs.w	1
00890E22 =00000028                  ramLastLives	rs.w	1
00890E22 =0000002A                  ramDecLives 	rs.w	1
00890E22                            
00890E22                            ; =================================================================
00890E22                            ; ------------------------------------------------
00890E22                            ; Code start
00890E22                            ; ------------------------------------------------
00890E22                            
00890E22                            obj_HudInfo:
00890E22 7000                        		moveq	#0,d0
00890E24 102E 001D                   		move.b	obj_index(a6),d0
00890E28 D040                        		add.w	d0,d0
00890E2A 323B 0000                   		move.w	@Index(pc,d0.w),d1
00890E2E 4EFB 1000                   		jmp	@Index(pc,d1.w)
00890E32                             		
00890E32                            ; ------------------------------------------------
00890E32                            
00890E32                            @Index:
00890E32 0000                       		dc.w	@Init-@Index
00890E34 0000                       		dc.w	@Main-@Index
00890E36                            		even
00890E36                            		
00890E36                            ; =================================================================
00890E36                            ; ------------------------------------------------
00890E36                            ; Index $00: Init
00890E36                            ; ------------------------------------------------
00890E36                            
00890E36                            @Init:
00890E36 062E 0001 001D             		add.b	#1,obj_index(a6)
00890E3C 08EE 0007 001E              		bset	#bitobj_stay,obj_status(a6)
00890E42 3D7C 0000 0024             		move.w	#0,ramLastCoins(a6)
00890E48                            		
00890E48 3D7C 0001 0024             		move.w	#1,ramLastCoins(a6)
00890E4E 3D7C 0001 0028             		move.w	#1,ramLastLives(a6)
00890E54                            		
00890E54                            ; =================================================================
00890E54                            ; ------------------------------------------------                  
00890E54                            ; Index $01: Main
00890E54                            ; ------------------------------------------------
00890E54                            
00890E54                            @Main:
00890E54 203C 0008 0008             		move.l	#8<<16|8,d0
00890E5A 223C 0005 C5A8             		move.l	#5<<16|varVramHudCoinR,d1
00890E60 6100 D1B6                  		bsr	Object_ExtSprite
00890E64 203C 0008 0018             		move.l	#8<<16|24,d0
00890E6A 223C 0005 C5B0             		move.l	#5<<16|varHudLife,d1
00890E70 6100 D1A6                  		bsr	Object_ExtSprite
00890E74                            		
00890E74                            
00890E74 203C 0008 0030             		move.l	#8<<16|48,d0
00890E7A 223C 0000 C5BC             		move.l	#varHudLifeBar,d1
00890E80 3439 FFFF DC04             		move.w	(RAM_P1_Hits),d2
00890E86 0C42 0008                  		cmp.w	#8,d2
00890E8A 6D00                       		blt.s	@lower
00890E8C 343C 0008                  		move.w	#8,d2
00890E90                            @lower:
00890E90 4A42                       		tst.w	d2
00890E92 6700                       		beq.s	@dead
00890E94 0442 0001                  		sub.w	#1,d2
00890E98 4A42                       		tst.w	d2
00890E9A 6600                       		bne.s	@addbox
00890E9C 0641 0001                  		add.w	#1,d1
00890EA0                            @addbox:
00890EA0 6100 D176                  		bsr	Object_ExtSprite
00890EA4 0680 0008 0000             		add.l	#$80000,d0
00890EAA 51CA FFF4                  		dbf	d2,@addbox
00890EAE                            @dead:
00890EAE                            
00890EAE 7400                       		moveq	#0,d2
00890EB0 3439 FFFF DC02             		move.w	(RAM_P1_Coins),d2
00890EB6 B46E 0024                  		cmp.w	ramLastCoins(a6),d2
00890EBA 6700                       		beq.s	@dontupdc
00890EBC 3D42 0024                  		move.w	d2,ramLastCoins(a6)
00890EC0 6100 85CA                  		bsr	HexToDec
00890EC4 3D42 0026                  		move.w	d2,ramDecCoins(a6)
00890EC8                            @dontupdc:
00890EC8 203C 0018 0010             		move.l	#24<<16|16,d0
00890ECE 342E 0026                  		move.w	ramDecCoins(a6),d2
00890ED2 6100 0000                  		bsr	@showsprval
00890ED6                            		
00890ED6 7400                       		moveq	#0,d2
00890ED8 3439 FFFF DC00             		move.w	(RAM_P1_Lives),d2
00890EDE B46E 0028                  		cmp.w	ramLastLives(a6),d2
00890EE2 6700                       		beq.s	@dontupdlvs
00890EE4 3D42 0028                  		move.w	d2,ramLastLives(a6)
00890EE8 6100 85A2                  		bsr	HexToDec
00890EEC 3D42 002A                  		move.w	d2,ramDecLives(a6)
00890EF0                            @dontupdlvs:
00890EF0 203C 0018 0020             		move.l	#24<<16|32,d0
00890EF6 342E 002A                  		move.w	ramDecLives(a6),d2
00890EFA                            		
00890EFA                            ; -----------------------------
00890EFA                            
00890EFA                            @showsprval:
00890EFA 7601                       		moveq	#1,d3
00890EFC E89A                       		ror.l	#4,d2
00890EFE                            @nxtcoinnum:
00890EFE 7200                       		moveq	#0,d1
00890F00 1202                       		move.b	d2,d1
00890F02 0201 000F                  		and.b	#$F,d1
00890F06 0641 C5C0                  		add.w	#varHudDigits,d1
00890F0A E99A                       		rol.l	#4,d2
00890F0C 0680 0008 0000             		add.l	#$00080000,d0
00890F12 6100 D104                  		bsr	Object_ExtSprite	
00890F16 51CB FFE6                  		dbf	d3,@nxtcoinnum
00890F1A 4E75                       		rts
00890F1C                            		
00890F1C                            ; =================================================================
00890F1C                            		
00890F1C                            		
00890F1C                                		
00890F1C                                		
00890F1C                            		
00890F1C                            ; ====================================================================
00890F1C                            ; --------------------------------------------
00890F1C                            ; VBlank
00890F1C                            ; --------------------------------------------
00890F1C                            
00890F1C                            ; ====================================================================		
00890F1C                            ; --------------------------------------------
00890F1C                            ; HBlank
00890F1C                            ; --------------------------------------------
00890F1C                            		
00890F1C                            ; ====================================================================
00890F1C                            ; ====================================================================
00890F1C                            		
00890F1C                            		inform 0,"MARS IPL ends at: %h",*-marsipl
00010F1C                            	
00010F1C                            ; ====================================================================
00010F1C                            ; -------------------------------------------------
00010F1C                            ; DATA
00010F1C                            ; -------------------------------------------------
00010F1C                            
00910F1C                            THIS_BANK_1:
00910F1C                            		include	"engine/modes/title/data.asm"
00910F1C                            ; ====================================================================
00910F1C                            ; -------------------------------------------------
00910F1C                            ; Title DATA
00910F1C                            ; -------------------------------------------------
00910F1C                            		
00910F1C                            Pal_Title:	incbin	"engine/modes/title/data/pal.bin"
00910F3C                            		even
00910F3C                            Map_Title:	incbin	"engine/modes/title/data/map.bin"
009117FC                            		even
009117FC                            Art_Title:	incbin	"engine/modes/title/data/art.bin"
00913ADC                            Art_Title_End:	even
00913ADC                            
00913ADC                            ; Pal_Gen3:	incbin	"engine/modes/title/data/pal_2.bin"
00913ADC                            ; 		even
00913ADC                            ; Map_Gen3:	incbin	"engine/modes/title/data/map_2.bin"
00913ADC                            ; 		even
00913ADC                            ; Art_Gen3:	incbin	"engine/modes/title/data/art_2.bin"
00913ADC                            ; Art_Gen3_End:	even
00913ADC                            
00913ADC                            ; -------------------------------------------------
00913ADC                            				
00913ADC                            ; --------------------------
00913ADC                            ; SFX: COIN
00913ADC                            ; --------------------------
00913ADC                            
00913ADC                            Snd_TestNotes:
00913ADC 00FF                       		dc.b 0,-1
00913ADE 0000 0000                  		dc.l @notes
00913AE2 0000 0000                       		dc.l @ins
00913AE6 0001                            		dc.w 1
00913AE8 0240 800F                        		dc.b FM_3,64,$80,$F
00913AEC                            @notes:		incbin "engine/sound/testins.bin"
00913BA2 00                               		even
00913BA2 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins 
00913BA8 0001 0000                  @ymha:		dc.w 1,0
00913BAC 0000 0000                  		dc.l test_fm
00913BB0 0002 0000                  		dc.w 2,0
00913BB4 0000 0000                  		dc.l test_fm+$19
00913BB8 0003 0000                  		dc.w 3,0
00913BBC 0000 0000                  		dc.l test_fm
00913BC0 0004 0000                  		dc.w 4,0
00913BC4 0000 0000                  		dc.l test_fm
00913BC8 0005 0000                  		dc.w 5,0
00913BCC 0000 0000                  		dc.l test_fm
00913BD0 0006 0000                  		dc.w 6,0
00913BD4 0000 0000                  		dc.l test_fm
00913BD8                            	
00913BD8 0001 0004                  @noise:		dc.w 1,%100
00913BDC                            		even
00913BDC                            
00913BDC                            test_fm:	incbin	"engine/sound/instruments/FM/bass/bass_jazz.bin"
00913BF5                            		incbin	"engine/sound/instruments/FM/brass/brass_trumpet.bin"
00913C0E                            		even
00913C0E                            		
00913C0E                            ; -------------------------------------------------
00913C0E                            
00913C0E                            fmVoice_bell_1:
00913C0E                            		incbin	"engine/sound/instruments/fm/bell/bell_xmas.bin"
00913C28 00                         		even
00913C28                            fmVoice_piano_rave:
00913C28                            		incbin	"engine/sound/instruments/fm/piano/piano_rave_old.bin"
00913C42 00                         		even
00913C42                            fmVoice_bass_ambient:
00913C42                            		incbin	"engine/sound/instruments/fm/bass/bass_ambient.bin"
00913C5C 00                         		even
00913C5C                            fmVoice_bass_2:
00913C5C                            		incbin	"engine/sound/instruments/fm/bass/bass_low.bin"
00913C76 00                         		even
00913C76                            fmVoice_belllow:
00913C76                            		incbin	"engine/sound/instruments/fm/brass/brass_funny.bin"
00913C90 00                         		even
00913C90                            fmVoice_flaute_2:
00913C90                            		incbin	"engine/sound/instruments/fm/ding_1.bin"
00913CAA 00                         		even
00913CAA                            fmVoice_brass_trumpet:
00913CAA                            		incbin	"engine/sound/instruments/fm/brass/brass_trumpet.bin"
00913CC4 00                         		even
00913CC4                            fmVoice_bell_low:
00913CC4                            		incbin	"engine/sound/instruments/fm/bell/bell_low.bin"
00913CDE 00                         		even
00913CDE                            		
00913CDE                            fm_hatopen:
00913CDE                            		incbin	"engine/sound/instruments/fm/drums/fm3_openhat.bin"
00913CF8 00                         		even
00913CF8                            fm_hatclosed:
00913CF8                            		incbin	"engine/sound/instruments/fm/drums/fm3_closedhat.bin"
00913D12 00                         		even
00913D12                            
00913D12                            fmVoice_dolp_wha:
00913D12                            		incbin	"engine/sound/instruments/fm/fx/dolphin_wah.bin"
00913D90 00                         		even
00913D90                            fmVoice_openhat:
00913D90                            		incbin	"engine/sound/instruments/fm/wsb95_bullpen.bin"
00913E40 00                         		even
00913E40                            ; 		
00913E40                            ; 		cnop 0,$8000
00913E40                            ; wav_yobeats:	incbin	"engine/sound/instruments/dac/beat_yo.wav",$2C
00913E40                            ; wav_yobeats_e:	even
00913E40                            ; 
00913E40                            ; hrdcbyte:	incbin	"engine/sound/instruments/dac/hrdcbyte.wav",$2C
00913E40                            ; hrdcbyte_e:	even
00913E40                            ; 
00913E40                            ; dnceheye:	incbin	"engine/sound/instruments/dac/dnceheye.wav",$2C
00913E40                            ; dnceheye_e:	even
00913E40                            
00913E40                            ; 		if MCD|MARS=0
00913E40                            ; TEST_WAV:	incbin "ideas/test.wav",$2C,$200000
00913E40                            ; TEST_WAV_end:	even
00913E40                            ; 		endif
00913E40                            
00913E40                            wav_kick:	incbin	"engine/sound/instruments/dac/sauron_kick.wav",$2C
00914DCE                            wav_kick_e:
00914DCE                            wav_tom:	incbin	"engine/sound/instruments/dac/sauron_tom.wav",$2C
00915988                            wav_tom_e:
00915988                            wav_snare:	incbin	"engine/sound/instruments/dac/snare.wav",$2C
00916D5C                            wav_snare_e:
00916D5C                            		even
00916D5C                            		
00916D5C                            		
00916D5C                            		include "engine/modes/level/data.asm"
00916D5C                            ; =================================================================
00916D5C                            ; ------------------------------------------------
00916D5C                            ; DMA art
00916D5C                            ; ------------------------------------------------
00916D5C                            
00916D5C                            		cnop 0,$4000
00918000                            Art_Player:	incbin	"engine/modes/level/data/objects/player/data/art.bin"
009198C0                            		even
009198C0                            artObj_EndFlag:	incbin	"engine/modes/level/data/objects/endflag/data/art.bin"
0091A780                             		even
0091A780                            Art_AnimCoin:	incbin	"engine/modes/level/data/layouts/coin_art.bin"
0091AD80                            		even
0091AD80                            
0091AD80                            ; =================================================================
0091AD80                            ; ------------------------------------------------
0091AD80                            ; Non-DMA art
0091AD80                            ; ------------------------------------------------
0091AD80                            	
0091AD80                            ; ---------------------------
0091AD80                            ; Objects
0091AD80                            ; ---------------------------
0091AD80                            
0091AD80                            		cnop 0,$800
0091B000                            Art_dadou:	incbin	"engine/modes/level/data/objects/dadou/data/art.bin"
0091C100                            art_dadou_end:
0091C100                             		even
0091C100                            Art_pikudo:	incbin	"engine/modes/level/data/objects/pikudo/data/art.bin"
0091C9A0                            art_pikudo_end:
0091C9A0                             		even
0091C9A0                             		
0091C9A0                            artObj_Platform:
0091C9A0                            		incbin	"engine/modes/level/data/objects/platform/data/art.bin"
0091CA60                            artObj_Platform_e:
0091CA60                             		even
0091CA60                            artObj_Ball:	incbin	"engine/modes/level/data/objects/ball/data/art.bin"
0091CD60                            artObj_Ball_e:	even
0091CD60                             		
0091CD60                            ; =================================================================
0091CD60                            ; ------------------------------------------------
0091CD60                            ; Other stuff
0091CD60                            ; ------------------------------------------------
0091CD60                            
0091CD60                            ; ---------------------------
0091CD60                            ; Player
0091CD60                            ; ---------------------------
0091CD60                            
0091CD60                            Map_Player:	include	"engine/modes/level/data/objects/player/data/map.asm"
0091CD60                            @mappings:
0091CD60 0000                       		dc.w @frame_0-@mappings
0091CD62 0000                       		dc.w @frame_1-@mappings
0091CD64 0000                       		dc.w @frame_2-@mappings
0091CD66 0000                       		dc.w @frame_3-@mappings
0091CD68 0000                       		dc.w @frame_4-@mappings
0091CD6A 0000                       		dc.w @frame_5-@mappings
0091CD6C 0000                       		dc.w @frame_6-@mappings
0091CD6E 0000                       		dc.w @frame_7-@mappings
0091CD70 0000                       		dc.w @frame_8-@mappings
0091CD72 0000                       		dc.w @frame_9-@mappings
0091CD74 0000                       		dc.w @frame_10-@mappings
0091CD76 0000                       		dc.w @frame_11-@mappings
0091CD78 0000                       		dc.w @frame_12-@mappings
0091CD7A 0000                       		dc.w @frame_13-@mappings
0091CD7C 0000                       		dc.w @frame_14-@mappings
0091CD7E 0000                       		dc.w @frame_15-@mappings
0091CD80 0000                       		dc.w @frame_16-@mappings
0091CD82                            @frame_0:
0091CD82 03                         		dc.b $3
0091CD83                            
0091CD83 000C 0000 F0               		dc.b $0,$C,$0,$0,$F0
0091CD88 F005 0004 F8               		dc.b $F0,$5,$0,$4,$F8
0091CD8D 0804 0008 F8               		dc.b $8,$4,$0,$8,$F8
0091CD92                            		even
0091CD92                            @frame_1:
0091CD92 03                         		dc.b $3
0091CD93                            
0091CD93 000C 0000 F0               		dc.b $0,$C,$0,$0,$F0
0091CD98 F005 0004 F8               		dc.b $F0,$5,$0,$4,$F8
0091CD9D 0804 0008 F8               		dc.b $8,$4,$0,$8,$F8
0091CDA2                            		even
0091CDA2                            @frame_2:
0091CDA2 04                         		dc.b $4
0091CDA3                            
0091CDA3 0009 0000 F0               		dc.b $0,$9,$0,$0,$F0
0091CDA8 F005 0006 F8               		dc.b $F0,$5,$0,$6,$F8
0091CDAD F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0091CDB2 0800 000B 08               		dc.b $8,$0,$0,$B,$8
0091CDB8 00                         		even
0091CDB8                            @frame_3:
0091CDB8 03                         		dc.b $3
0091CDB9                            
0091CDB9 F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0091CDBE F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0091CDC3 0800 0009 08               		dc.b $8,$0,$0,$9,$8
0091CDC8                            		even
0091CDC8                            @frame_4:
0091CDC8 02                         		dc.b $2
0091CDC9                            
0091CDC9 F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0091CDCE F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0091CDD4 00                         		even
0091CDD4                            @frame_5:
0091CDD4 03                         		dc.b $3
0091CDD5                            
0091CDD5 080C 0000 F0               		dc.b $8,$C,$0,$0,$F0
0091CDDA F006 0004 F8               		dc.b $F0,$6,$0,$4,$F8
0091CDDF F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0091CDE4                            		even
0091CDE4                            @frame_6:
0091CDE4 04                         		dc.b $4
0091CDE5                            
0091CDE5 0009 0000 F0               		dc.b $0,$9,$0,$0,$F0
0091CDEA F005 0006 F8               		dc.b $F0,$5,$0,$6,$F8
0091CDEF F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0091CDF4 0800 000B 08               		dc.b $8,$0,$0,$B,$8
0091CDFA 00                         		even
0091CDFA                            @frame_7:
0091CDFA 03                         		dc.b $3
0091CDFB                            
0091CDFB F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0091CE00 F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0091CE05 0800 0009 08               		dc.b $8,$0,$0,$9,$8
0091CE0A                            		even
0091CE0A                            @frame_8:
0091CE0A 02                         		dc.b $2
0091CE0B                            
0091CE0B F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0091CE10 F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0091CE16 00                         		even
0091CE16                            @frame_9:
0091CE16 03                         		dc.b $3
0091CE17                            
0091CE17 080C 0000 F0               		dc.b $8,$C,$0,$0,$F0
0091CE1C F006 0004 F8               		dc.b $F0,$6,$0,$4,$F8
0091CE21 F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0091CE26                            		even
0091CE26                            @frame_10:
0091CE26 04                         		dc.b $4
0091CE27                            
0091CE27 F807 0000 F0               		dc.b $F8,$7,$0,$0,$F0
0091CE2C F008 0008 F8               		dc.b $F0,$8,$0,$8,$F8
0091CE31 F802 000B 00               		dc.b $F8,$2,$0,$B,$0
0091CE36 F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0091CE3C 00                         		even
0091CE3C                            @frame_11:
0091CE3C 04                         		dc.b $4
0091CE3D                            
0091CE3D F807 0000 F0               		dc.b $F8,$7,$0,$0,$F0
0091CE42 F008 0008 F8               		dc.b $F0,$8,$0,$8,$F8
0091CE47 F802 000B 00               		dc.b $F8,$2,$0,$B,$0
0091CE4C F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0091CE52 00                         		even
0091CE52                            @frame_12:
0091CE52 03                         		dc.b $3
0091CE53                            
0091CE53 F008 0000 F0               		dc.b $F0,$8,$0,$0,$F0
0091CE58 F803 0003 F8               		dc.b $F8,$3,$0,$3,$F8
0091CE5D F802 0007 00               		dc.b $F8,$2,$0,$7,$0
0091CE62                            		even
0091CE62                            @frame_13:
0091CE62 04                         		dc.b $4
0091CE63                            
0091CE63 F009 0000 F0               		dc.b $F0,$9,$0,$0,$F0
0091CE68 0002 0006 F8               		dc.b $0,$2,$0,$6,$F8
0091CE6D 0001 0009 00               		dc.b $0,$1,$0,$9,$0
0091CE72 F800 000B 08               		dc.b $F8,$0,$0,$B,$8
0091CE78 00                         		even
0091CE78                            @frame_14:
0091CE78 03                         		dc.b $3
0091CE79                            
0091CE79 F00D 0000 F0               		dc.b $F0,$D,$0,$0,$F0
0091CE7E 0005 0008 F8               		dc.b $0,$5,$0,$8,$F8
0091CE83 1000 000C 00               		dc.b $10,$0,$0,$C,$0
0091CE88                            		even
0091CE88                            @frame_15:
0091CE88 03                         		dc.b $3
0091CE89                            
0091CE89 F808 0000 F0               		dc.b $F8,$8,$0,$0,$F0
0091CE8E F008 0003 F8               		dc.b $F0,$8,$0,$3,$F8
0091CE93 0006 0006 F8               		dc.b $0,$6,$0,$6,$F8
0091CE98                            		even
0091CE98                            @frame_16:
0091CE98 05                         		dc.b $5
0091CE99                            
0091CE99 F80C 0000 E8               		dc.b $F8,$C,$0,$0,$E8
0091CE9E 000D 0004 F0               		dc.b $0,$D,$0,$4,$F0
0091CEA3 1000 000C 00               		dc.b $10,$0,$0,$C,$0
0091CEA8 F001 000D 08               		dc.b $F0,$1,$0,$D,$8
0091CEAD F801 000F 10               		dc.b $F8,$1,$0,$F,$10
0091CEB2                            		even
0091CEB2                            		even
0091CEB2                            		even
0091CEB2                            DPLC_Player:	include	"engine/modes/level/data/objects/player/data/plc.asm"
0091CEB2                            @dplc:
0091CEB2 0000                       		dc.w @frame_0-@dplc
0091CEB4 0000                       		dc.w @frame_1-@dplc
0091CEB6 0000                       		dc.w @frame_2-@dplc
0091CEB8 0000                       		dc.w @frame_3-@dplc
0091CEBA 0000                       		dc.w @frame_4-@dplc
0091CEBC 0000                       		dc.w @frame_5-@dplc
0091CEBE 0000                       		dc.w @frame_6-@dplc
0091CEC0 0000                       		dc.w @frame_7-@dplc
0091CEC2 0000                       		dc.w @frame_8-@dplc
0091CEC4 0000                       		dc.w @frame_9-@dplc
0091CEC6 0000                       		dc.w @frame_10-@dplc
0091CEC8 0000                       		dc.w @frame_11-@dplc
0091CECA 0000                       		dc.w @frame_12-@dplc
0091CECC 0000                       		dc.w @frame_13-@dplc
0091CECE 0000                       		dc.w @frame_14-@dplc
0091CED0 0000                       		dc.w @frame_15-@dplc
0091CED2 0000                       		dc.w @frame_16-@dplc
0091CED4                            @frame_0:
0091CED4 0003                       		dc.w $3
0091CED6                            
0091CED6 3000                       		dc.w $3000
0091CED8 3004                       		dc.w $3004
0091CEDA 1008                       		dc.w $1008
0091CEDC                            @frame_1:
0091CEDC 0003                       		dc.w $3
0091CEDE                            
0091CEDE 300A                       		dc.w $300A
0091CEE0 300E                       		dc.w $300E
0091CEE2 1012                       		dc.w $1012
0091CEE4                            @frame_2:
0091CEE4 0004                       		dc.w $4
0091CEE6                            
0091CEE6 5014                       		dc.w $5014
0091CEE8 301A                       		dc.w $301A
0091CEEA 001E                       		dc.w $1E
0091CEEC 001F                       		dc.w $1F
0091CEEE                            @frame_3:
0091CEEE 0003                       		dc.w $3
0091CEF0                            
0091CEF0 7020                       		dc.w $7020
0091CEF2 0028                       		dc.w $28
0091CEF4 0029                       		dc.w $29
0091CEF6                            @frame_4:
0091CEF6 0002                       		dc.w $2
0091CEF8                            
0091CEF8 702A                       		dc.w $702A
0091CEFA 0032                       		dc.w $32
0091CEFC                            @frame_5:
0091CEFC 0003                       		dc.w $3
0091CEFE                            
0091CEFE 3033                       		dc.w $3033
0091CF00 5037                       		dc.w $5037
0091CF02 003D                       		dc.w $3D
0091CF04                            @frame_6:
0091CF04 0004                       		dc.w $4
0091CF06                            
0091CF06 503E                       		dc.w $503E
0091CF08 3044                       		dc.w $3044
0091CF0A 0048                       		dc.w $48
0091CF0C 0049                       		dc.w $49
0091CF0E                            @frame_7:
0091CF0E 0003                       		dc.w $3
0091CF10                            
0091CF10 704A                       		dc.w $704A
0091CF12 0052                       		dc.w $52
0091CF14 0053                       		dc.w $53
0091CF16                            @frame_8:
0091CF16 0002                       		dc.w $2
0091CF18                            
0091CF18 7054                       		dc.w $7054
0091CF1A 005C                       		dc.w $5C
0091CF1C                            @frame_9:
0091CF1C 0003                       		dc.w $3
0091CF1E                            
0091CF1E 305D                       		dc.w $305D
0091CF20 5061                       		dc.w $5061
0091CF22 0067                       		dc.w $67
0091CF24                            @frame_10:
0091CF24 0004                       		dc.w $4
0091CF26                            
0091CF26 7068                       		dc.w $7068
0091CF28 2070                       		dc.w $2070
0091CF2A 2073                       		dc.w $2073
0091CF2C 0076                       		dc.w $76
0091CF2E                            @frame_11:
0091CF2E 0004                       		dc.w $4
0091CF30                            
0091CF30 7077                       		dc.w $7077
0091CF32 207F                       		dc.w $207F
0091CF34 2082                       		dc.w $2082
0091CF36 0085                       		dc.w $85
0091CF38                            @frame_12:
0091CF38 0003                       		dc.w $3
0091CF3A                            
0091CF3A 2086                       		dc.w $2086
0091CF3C 3089                       		dc.w $3089
0091CF3E 208D                       		dc.w $208D
0091CF40                            @frame_13:
0091CF40 0004                       		dc.w $4
0091CF42                            
0091CF42 5090                       		dc.w $5090
0091CF44 2096                       		dc.w $2096
0091CF46 1099                       		dc.w $1099
0091CF48 009B                       		dc.w $9B
0091CF4A                            @frame_14:
0091CF4A 0003                       		dc.w $3
0091CF4C                            
0091CF4C 709C                       		dc.w $709C
0091CF4E 30A4                       		dc.w $30A4
0091CF50 00A8                       		dc.w $A8
0091CF52                            @frame_15:
0091CF52 0003                       		dc.w $3
0091CF54                            
0091CF54 20A9                       		dc.w $20A9
0091CF56 20AC                       		dc.w $20AC
0091CF58 50AF                       		dc.w $50AF
0091CF5A                            @frame_16:
0091CF5A 0005                       		dc.w $5
0091CF5C                            
0091CF5C 30B5                       		dc.w $30B5
0091CF5E 70B9                       		dc.w $70B9
0091CF60 00C1                       		dc.w $C1
0091CF62 10C2                       		dc.w $10C2
0091CF64 10C4                       		dc.w $10C4
0091CF64 10C4                       		dc.w $10C4
0091CF66                            		even
0091CF66                            Pal_Player:	incbin	"engine/modes/level/data/objects/player/data/pal.bin"
0091CF86                            Pal_Player_End:
0091CF86                            		even
0091CF86                            
0091CF86                            ; ---------------------------
0091CF86                            ; Objects
0091CF86                            ; ---------------------------
0091CF86                            
0091CF86                            Map_dadou:	include	"engine/modes/level/data/objects/dadou/data/map.asm"
0091CF86                            @mappings:
0091CF86 0000                       		dc.w @frame_0-@mappings
0091CF88 0000                       		dc.w @frame_1-@mappings
0091CF8A 0000                       		dc.w @frame_2-@mappings
0091CF8C 0000                       		dc.w @frame_3-@mappings
0091CF8E 0000                       		dc.w @frame_4-@mappings
0091CF90 0000                       		dc.w @frame_5-@mappings
0091CF92 0000                       		dc.w @frame_6-@mappings
0091CF94 0000                       		dc.w @frame_7-@mappings
0091CF96 0000                       		dc.w @frame_8-@mappings
0091CF98 0000                       		dc.w @frame_9-@mappings
0091CF9A                            @frame_0:
0091CF9A 03                         		dc.b $3
0091CF9B                            
0091CF9B F80A 0000 F0               		dc.b $F8,$A,$0,$0,$F0
0091CFA0 F004 0009 00               		dc.b $F0,$4,$0,$9,$0
0091CFA5 F801 000B 08               		dc.b $F8,$1,$0,$B,$8
0091CFAA                            		even
0091CFAA                            @frame_1:
0091CFAA 03                         		dc.b $3
0091CFAB                            
0091CFAB F80A 000D F0               		dc.b $F8,$A,$0,$D,$F0
0091CFB0 F004 0016 00               		dc.b $F0,$4,$0,$16,$0
0091CFB5 F801 0018 08               		dc.b $F8,$1,$0,$18,$8
0091CFBA                            		even
0091CFBA                            @frame_2:
0091CFBA 02                         		dc.b $2
0091CFBB                            
0091CFBB F80A 001A F0               		dc.b $F8,$A,$0,$1A,$F0
0091CFC0 F801 0023 08               		dc.b $F8,$1,$0,$23,$8
0091CFC6 00                         		even
0091CFC6                            @frame_3:
0091CFC6 02                         		dc.b $2
0091CFC7                            
0091CFC7 F00E 0025 F0               		dc.b $F0,$E,$0,$25,$F0
0091CFCC 0808 0031 F8               		dc.b $8,$8,$0,$31,$F8
0091CFD2 00                         		even
0091CFD2                            @frame_4:
0091CFD2 02                         		dc.b $2
0091CFD3                            
0091CFD3 F00E 0034 F0               		dc.b $F0,$E,$0,$34,$F0
0091CFD8 0808 0040 F8               		dc.b $8,$8,$0,$40,$F8
0091CFDE 00                         		even
0091CFDE                            @frame_5:
0091CFDE 02                         		dc.b $2
0091CFDF                            
0091CFDF F00E 0043 F0               		dc.b $F0,$E,$0,$43,$F0
0091CFE4 0804 004F F8               		dc.b $8,$4,$0,$4F,$F8
0091CFEA 00                         		even
0091CFEA                            @frame_6:
0091CFEA 02                         		dc.b $2
0091CFEB                            
0091CFEB F80A 0051 F0               		dc.b $F8,$A,$0,$51,$F0
0091CFF0 F801 005A 08               		dc.b $F8,$1,$0,$5A,$8
0091CFF6 00                         		even
0091CFF6                            @frame_7:
0091CFF6 02                         		dc.b $2
0091CFF7                            
0091CFF7 F00E 005C F0               		dc.b $F0,$E,$0,$5C,$F0
0091CFFC 0804 0068 F8               		dc.b $8,$4,$0,$68,$F8
0091D002 00                         		even
0091D002                            @frame_8:
0091D002 02                         		dc.b $2
0091D003                            
0091D003 F00E 006A F0               		dc.b $F0,$E,$0,$6A,$F0
0091D008 0808 0076 F8               		dc.b $8,$8,$0,$76,$F8
0091D00E 00                         		even
0091D00E                            @frame_9:
0091D00E 02                         		dc.b $2
0091D00F                            
0091D00F F00E 0079 F0               		dc.b $F0,$E,$0,$79,$F0
0091D014 0808 0085 F8               		dc.b $8,$8,$0,$85,$F8
0091D01A 00                         		even
0091D01A 00                         		even
0091D01A                             		even
0091D01A                            Map_pikudo:	include	"engine/modes/level/data/objects/pikudo/data/map.asm"
0091D01A                            @mappings:
0091D01A 0000                       		dc.w @frame_0-@mappings
0091D01C 0000                       		dc.w @frame_1-@mappings
0091D01E 0000                       		dc.w @frame_2-@mappings
0091D020 0000                       		dc.w @frame_3-@mappings
0091D022 0000                       		dc.w @frame_4-@mappings
0091D024                            @frame_0:
0091D024 04                         		dc.b $4
0091D025                            
0091D025 F009 0000 F0               		dc.b $F0,$9,$0,$0,$F0
0091D02A E804 0006 F8               		dc.b $E8,$4,$0,$6,$F8
0091D02F 0009 0008 F8               		dc.b $0,$9,$0,$8,$F8
0091D034 F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0091D03A 00                         		even
0091D03A                            @frame_1:
0091D03A 04                         		dc.b $4
0091D03B                            
0091D03B F009 000F F0               		dc.b $F0,$9,$0,$F,$F0
0091D040 E804 0015 F8               		dc.b $E8,$4,$0,$15,$F8
0091D045 0009 0017 F8               		dc.b $0,$9,$0,$17,$F8
0091D04A F800 001D 08               		dc.b $F8,$0,$0,$1D,$8
0091D050 00                         		even
0091D050                            @frame_2:
0091D050 04                         		dc.b $4
0091D051                            
0091D051 F009 001E F0               		dc.b $F0,$9,$0,$1E,$F0
0091D056 E804 0024 F8               		dc.b $E8,$4,$0,$24,$F8
0091D05B 0009 0026 F8               		dc.b $0,$9,$0,$26,$F8
0091D060 F800 002C 08               		dc.b $F8,$0,$0,$2C,$8
0091D066 00                         		even
0091D066                            @frame_3:
0091D066 01                         		dc.b $1
0091D067                            
0091D067 F00B 002D F8               		dc.b $F0,$B,$0,$2D,$F8
0091D06C                            		even
0091D06C                            @frame_4:
0091D06C 01                         		dc.b $1
0091D06D                            
0091D06D F00B 0039 F8               		dc.b $F0,$B,$0,$39,$F8
0091D072                            		even
0091D072                            		even
0091D072                             		even
0091D072                            Map_ball:	include	"engine/modes/level/data/objects/ball/data/map.asm"
0091D072                            @mappings:
0091D072 0000                       		dc.w @frame_0-@mappings
0091D074 0000                       		dc.w @frame_1-@mappings
0091D076 0000                       		dc.w @frame_2-@mappings
0091D078 0000                       		dc.w @frame_3-@mappings
0091D07A                            @frame_0:
0091D07A 01                         		dc.b $1
0091D07B                            
0091D07B F806 0000 F8               		dc.b $F8,$6,$0,$0,$F8
0091D080                            		even
0091D080                            @frame_1:
0091D080 01                         		dc.b $1
0091D081                            
0091D081 F806 0006 F8               		dc.b $F8,$6,$0,$6,$F8
0091D086                            		even
0091D086                            @frame_2:
0091D086 01                         		dc.b $1
0091D087                            
0091D087 F806 000C F8               		dc.b $F8,$6,$0,$C,$F8
0091D08C                            		even
0091D08C                            @frame_3:
0091D08C 01                         		dc.b $1
0091D08D                            
0091D08D F806 0012 F8               		dc.b $F8,$6,$0,$12,$F8
0091D092                            		even
0091D092                            		even
0091D092                             		even
0091D092                            objMap_Platform:include	"engine/modes/level/data/objects/platform/data/map.asm"
0091D092                            @mappings:
0091D092 0000                       		dc.w @frame_0-@mappings
0091D094                            @frame_0:
0091D094 02                         		dc.b $2
0091D095                            
0091D095 F80C 0000 E8               		dc.b $F8,$C,$0,$0,$E8
0091D09A F804 0004 08               		dc.b $F8,$4,$0,$4,$8
0091D0A0 00                         		even
0091D0A0 00                         		even
0091D0A0                             		even
0091D0A0                            mapObj_EndFlag:	include	"engine/modes/level/data/objects/endflag/data/map.asm"
0091D0A0                            @mappings:
0091D0A0 0000                       		dc.w @frame_0-@mappings
0091D0A2 0000                       		dc.w @frame_1-@mappings
0091D0A4 0000                       		dc.w @frame_2-@mappings
0091D0A6                            @frame_0:
0091D0A6 07                         		dc.b $7
0091D0A7                            
0091D0A7 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
0091D0AC E00B 0004 E8               		dc.b $E0,$B,$0,$4,$E8
0091D0B1 0005 0010 E8               		dc.b $0,$5,$0,$10,$E8
0091D0B6 000C 0014 F8               		dc.b $0,$C,$0,$14,$F8
0091D0BB E80E 0018 00               		dc.b $E8,$E,$0,$18,$0
0091D0C0 E004 0024 08               		dc.b $E0,$4,$0,$24,$8
0091D0C5 0000 0026 18               		dc.b $0,$0,$0,$26,$18
0091D0CA                            		even
0091D0CA                            @frame_1:
0091D0CA 07                         		dc.b $7
0091D0CB                            
0091D0CB 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
0091D0D0 E00F 0004 E8               		dc.b $E0,$F,$0,$4,$E8
0091D0D5 0005 0014 E8               		dc.b $0,$5,$0,$14,$E8
0091D0DA 000C 0018 F8               		dc.b $0,$C,$0,$18,$F8
0091D0DF E80A 001C 08               		dc.b $E8,$A,$0,$1C,$8
0091D0E4 E000 0025 10               		dc.b $E0,$0,$0,$25,$10
0091D0E9 0000 0026 18               		dc.b $0,$0,$0,$26,$18
0091D0EE                            		even
0091D0EE                            @frame_2:
0091D0EE 07                         		dc.b $7
0091D0EF                            
0091D0EF 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
0091D0F4 E00F 0004 E8               		dc.b $E0,$F,$0,$4,$E8
0091D0F9 0005 0014 E8               		dc.b $0,$5,$0,$14,$E8
0091D0FE 000C 0018 F8               		dc.b $0,$C,$0,$18,$F8
0091D103 E007 001C 08               		dc.b $E0,$7,$0,$1C,$8
0091D108 E001 0024 18               		dc.b $E0,$1,$0,$24,$18
0091D10D F801 0026 18               		dc.b $F8,$1,$0,$26,$18
0091D112                            		even
0091D112                            		even
0091D112                             		even
0091D112                            dplcObj_EndFlag:include	"engine/modes/level/data/objects/endflag/data/plc.asm"
0091D112                            @dplc:
0091D112 0000                       		dc.w @frame_0-@dplc
0091D114 0000                       		dc.w @frame_1-@dplc
0091D116 0000                       		dc.w @frame_2-@dplc
0091D118                            @frame_0:
0091D118 0007                       		dc.w $7
0091D11A                            
0091D11A 3000                       		dc.w $3000
0091D11C B004                       		dc.w $B004
0091D11E 3010                       		dc.w $3010
0091D120 3014                       		dc.w $3014
0091D122 B018                       		dc.w $B018
0091D124 1024                       		dc.w $1024
0091D126 0026                       		dc.w $26
0091D128                            @frame_1:
0091D128 0007                       		dc.w $7
0091D12A                            
0091D12A 3027                       		dc.w $3027
0091D12C F02B                       		dc.w $F02B
0091D12E 303B                       		dc.w $303B
0091D130 303F                       		dc.w $303F
0091D132 8043                       		dc.w $8043
0091D134 004C                       		dc.w $4C
0091D136 004D                       		dc.w $4D
0091D138                            @frame_2:
0091D138 0007                       		dc.w $7
0091D13A                            
0091D13A 304E                       		dc.w $304E
0091D13C F052                       		dc.w $F052
0091D13E 3062                       		dc.w $3062
0091D140 3066                       		dc.w $3066
0091D142 706A                       		dc.w $706A
0091D144 1072                       		dc.w $1072
0091D146 1074                       		dc.w $1074
0091D146 1074                       		dc.w $1074
0091D148                            		even
0091D148                            		
0091D148                            ; ====================================================================
0091D148                            ; -------------------------------------------------
0091D148                            ; Level DATA
0091D148                            ; -------------------------------------------------
0091D148                            
0091D148                            LevelList:
0091D148 0000 0000                  		dc.l $01<<24|Lvl_Zone1		; Level data
0091D14C 0000 0000                  		dc.l Pal_LvlMain_Gray		; Palette
0091D150 0020 00F0                  		dc.w $20,$F0			; Player X/Y
0091D154 1100 0078                  		dc.w $1100,$78			; End flag X/Y
0091D158                            ; 		dc.l $01<<24|Lvl_Zone2
0091D158                            ; 		dc.l Pal_LvlMain_Gray
0091D158                            ; 		dc.w $20,$D0
0091D158                            ; 		dc.w 0,0
0091D158                            ; 		dc.l Lvl_Zone3
0091D158                            ; 		dc.l Pal_LvlMain_Gray
0091D158                            ; 		dc.w $28,$250
0091D158                            ; 		dc.w 0,0
0091D158                            ; 		dc.l Lvl_Zone1
0091D158                            ; 		dc.l Pal_LvlMain_Gray
0091D158                            ; 		dc.w $10,0
0091D158                            ; 		dc.w 0,0
0091D158                            ; 		dc.l Lvl_Zone1
0091D158                            ; 		dc.l Pal_LvlMain_Gray
0091D158                            ; 		dc.w $10,0
0091D158                            ; 		dc.w 0,0
0091D158                            ; 		even
0091D158                            		
0091D158                            artdata_Level_Test:
0091D158 0091 B000                   		dc.l art_dadou
0091D15C 6420                       		dc.w varVramDadou
0091D15E 043F                        		dc.w ((art_dadou_end-art_dadou)/4)-1
0091D160 0091 CA60                    		dc.l artObj_Ball
0091D164 44B8                       		dc.w varVramBall
0091D166 00BF                        		dc.w ((artObj_Ball_e-artObj_Ball)/4)-1
0091D168 0091 C100                   		dc.l Art_pikudo
0091D16C 04D0                       		dc.w varVramPikudo
0091D16E 0227                        		dc.w ((Art_pikudo_end-Art_pikudo)/4)-1
0091D170                             		
0091D170 0091 C9A0                   		dc.l artObj_Platform
0091D174 2530                        		dc.w varVramPlatfrm
0091D176 002F                        		dc.w ((artObj_Platform_e-artObj_Platform)/4)-1
0091D178                             		
0091D178 FFFF                        		dc.w -1
0091D17A                             		even
0091D17A                             		
0091D17A                            ; --------------------------------------------
0091D17A                            ; Levels
0091D17A                            ; --------------------------------------------
0091D17A                            
0091D17A 0118 0018                  Lvl_Zone1:	dc.w 280,24
0091D17E 0000 0000                  		dc.l @objects
0091D182 0000 0000 FFFF FFFF        		dc.l @FG_blk,-1			; Block VRAM / Prize VRAM (-1, use defaults) 
0091D18A 0000 0000 0000 0000        		dc.l @FG_lay_low,@FG_lay_hi	; Level layout hi/low
0091D192 0000 0000 0000 0000        		dc.l @FG_col,@FG_prz		; Collision / Prizes
0091D19A                            ; 		dc.w -1
0091D19A                            		
0091D19A                            @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/1/fg_lay_low.bin"
0091EBDA                             		even
0091EBDA                            @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/1/fg_lay_hi.bin"
0092061A                             		even	
0092061A                            @FG_col:	incbin	"engine/modes/level/data/layouts/main/1/fg_col.bin"
0092205A                             		even
0092205A                            @FG_prz:	incbin	"engine/modes/level/data/layouts/main/1/fg_prz.bin"
00922102                             		even 
00922102                            @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
00922902                             		even
00922902                            @objects:	include	"engine/modes/level/data/layouts/main/1/objlist.asm"
00922902 0089 0274                  		dc.l obj_dadou
00922906 01F8 00AC                  		dc.w 504,172
0092290A 00                         		dc.b 0
0092290B 00                         		dc.b 0
0092290C                            
0092290C 0089 06A4                  		dc.l obj_platform
00922910 0348 00E0                  		dc.w 840,224
00922914 00                         		dc.b 0
00922915 00                         		dc.b 0
00922916                            
00922916 0089 06A4                  		dc.l obj_platform
0092291A 03E8 00F8                  		dc.w 1000,248
0092291E 01                         		dc.b 1
0092291F 00                         		dc.b 0
00922920                            
00922920 0089 044A                  		dc.l obj_pikudo
00922924 049C 00DC                  		dc.w 1180,220
00922928 00                         		dc.b 0
00922929 00                         		dc.b 0
0092292A                            
0092292A 0089 06A4                  		dc.l obj_platform
0092292E 0358 0178                  		dc.w 856,376
00922932 01                         		dc.b 1
00922933 00                         		dc.b 0
00922934                            
00922934 0089 06A4                  		dc.l obj_platform
00922938 03E0 0168                  		dc.w 992,360
0092293C 00                         		dc.b 0
0092293D 00                         		dc.b 0
0092293E                            
0092293E 0089 06A4                  		dc.l obj_platform
00922942 0610 00C8                  		dc.w 1552,200
00922946 01                         		dc.b 1
00922947 00                         		dc.b 0
00922948                            
00922948 0089 0B30                  		dc.l obj_ball
0092294C 064C 0100                  		dc.w 1612,256
00922950 00                         		dc.b 0
00922951 00                         		dc.b 0
00922952                            
00922952 0089 0274                  		dc.l obj_dadou
00922956 080C 00CC                  		dc.w 2060,204
0092295A 00                         		dc.b 0
0092295B 00                         		dc.b 0
0092295C                            
0092295C 0089 044A                  		dc.l obj_pikudo
00922960 0648 0084                  		dc.w 1608,132
00922964 00                         		dc.b 0
00922965 00                         		dc.b 0
00922966                            
00922966 0089 0B30                  		dc.l obj_ball
0092296A 0900 0104                  		dc.w 2304,260
0092296E 00                         		dc.b 0
0092296F 00                         		dc.b 0
00922970                            
00922970 0089 0274                  		dc.l obj_dadou
00922974 09A8 00EC                  		dc.w 2472,236
00922978 00                         		dc.b 0
00922979 00                         		dc.b 0
0092297A                            
0092297A 0089 0274                  		dc.l obj_dadou
0092297E 0A94 0108                  		dc.w 2708,264
00922982 00                         		dc.b 0
00922983 00                         		dc.b 0
00922984                            
00922984 0089 06A4                  		dc.l obj_platform
00922988 09E8 0100                  		dc.w 2536,256
0092298C 02                         		dc.b 2
0092298D 00                         		dc.b 0
0092298E                            
0092298E 0089 0274                  		dc.l obj_dadou
00922992 0CB8 0140                  		dc.w 3256,320
00922996 00                         		dc.b 0
00922997 00                         		dc.b 0
00922998                            
00922998 0089 0274                  		dc.l obj_dadou
0092299C 0CC4 0080                  		dc.w 3268,128
009229A0 00                         		dc.b 0
009229A1 00                         		dc.b 0
009229A2                            
009229A2 0089 0274                  		dc.l obj_dadou
009229A6 0BFC 00C0                  		dc.w 3068,192
009229AA 80                         		dc.b 0x80
009229AB 00                         		dc.b 0
009229AC                            
009229AC 0089 0B30                  		dc.l obj_ball
009229B0 0F4C 0098                  		dc.w 3916,152
009229B4 00                         		dc.b 0
009229B5 00                         		dc.b 0
009229B6                            
009229B6 0089 044A                  		dc.l obj_pikudo
009229BA 0A38 00C0                  		dc.w 2616,192
009229BE 00                         		dc.b 0
009229BF 00                         		dc.b 0
009229C0                            
009229C0 0089 044A                  		dc.l obj_pikudo
009229C4 0FD4 0070                  		dc.w 4052,112
009229C8 00                         		dc.b 0
009229C9 00                         		dc.b 0
009229CA                            
009229CA 0089 044A                  		dc.l obj_pikudo
009229CE 1044 0090                  		dc.w 4164,144
009229D2 00                         		dc.b 0
009229D3 00                         		dc.b 0
009229D4                            
009229D4 0089 06A4                  		dc.l obj_platform
009229D8 0FD8 0168                  		dc.w 4056,360
009229DC 00                         		dc.b 0
009229DD 00                         		dc.b 0
009229DE                            
009229DE 0089 0274                  		dc.l obj_dadou
009229E2 0DEC 00F0                  		dc.w 3564,240
009229E6 80                         		dc.b 0x80
009229E7 00                         		dc.b 0
009229E8                            
009229E8 0089 06A4                  		dc.l obj_platform
009229EC 10C4 012C                  		dc.w 4292,300
009229F0 01                         		dc.b 1
009229F1 00                         		dc.b 0
009229F2                            
009229F2 0000 0000                  		dc.l 0
009229F2 0000 0000                  		dc.l 0
009229F6                             		even
009229F6                            
009229F6                            ; --------------------------------------------
009229F6                            
009229F6                            ; Lvl_Zone2:	dc.w 228,14
009229F6                            ; 		dc.l @objects
009229F6                            ; 		dc.l @FG_blk,-1			;Block VRAM / Prize VRAM (-1, use defaults) 
009229F6                            ; 		dc.l @FG_lay_low,@FG_lay_hi	;Level layout hi/low
009229F6                            ; 		dc.l @FG_col,@FG_prz		;Collision / Prizes
009229F6                            ; ; 		dc.w -1
009229F6                            ; 		
009229F6                            ; @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/2/fg_lay_low.bin"
009229F6                            ;  		even
009229F6                            ; @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/2/fg_lay_hi.bin"
009229F6                            ;  		even	
009229F6                            ; @FG_col:	incbin	"engine/modes/level/data/layouts/main/2/fg_col.bin"
009229F6                            ;  		even
009229F6                            ; @FG_prz:	incbin	"engine/modes/level/data/layouts/main/2/fg_prz.bin"
009229F6                            ;  		even 
009229F6                            ; @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
009229F6                            ;  		even
009229F6                            ; @objects:	include	"engine/modes/level/data/layouts/main/2/objlist.asm"
009229F6                            ;  		even
009229F6                             
009229F6                            ; --------------------------------------------
009229F6                            
009229F6                            ; Lvl_Zone3:	dc.w 20,40
009229F6                            ; 		dc.l @objects
009229F6                            ; 		dc.l @FG_blk,-1			;Block VRAM / Prize VRAM (-1, use defaults) 
009229F6                            ; 		dc.l @FG_lay_low,@FG_lay_hi	;Level layout hi/low
009229F6                            ; 		dc.l @FG_col,@FG_prz		;Collision / Prizes
009229F6                            ; ; 		dc.w -1
009229F6                            ; 		
009229F6                            ; @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/3/fg_lay_low.bin"
009229F6                            ;  		even
009229F6                            ; @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/3/fg_lay_hi.bin"
009229F6                            ;  		even	
009229F6                            ; @FG_col:	incbin	"engine/modes/level/data/layouts/main/3/fg_col.bin"
009229F6                            ;  		even
009229F6                            ; @FG_prz:	incbin	"engine/modes/level/data/layouts/main/3/fg_prz.bin"
009229F6                            ;  		even 
009229F6                            ; @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
009229F6                            ;  		even
009229F6                            ; @objects:	include	"engine/modes/level/data/layouts/main/3/objlist.asm"
009229F6                            ;  		even
009229F6                            
009229F6                            ; --------------------------------------------
009229F6                            
009229F6                            Pal_LvlMain_Gray:
009229F6                            		incbin	"engine/modes/level/data/layouts/main/lvl_pal.bin"
00922A16                            		incbin	"engine/modes/level/data/layouts/main/bg_pal.bin"
00922A36                            		even
00922A36                            		
00922A36                            Art_Lvl_Test:	incbin	"engine/modes/level/data/layouts/main/lvl_art.bin"
00926096                            Art_Lvl_Test_e:	even
00926096                            
00926096                            Art_LvlBG_Test:	incbin	"engine/modes/level/data/layouts/main/bg_art.bin"
0092AC56                            Art_LvlBG_Test_e:
0092AC56                            		even
0092AC56                            Map_LvlBG_Test:	incbin	"engine/modes/level/data/layouts/main/bg_map.bin"
0092BC56                            Map_LvlBG_Test_e:
0092BC56                            		even
0092BC56                            		
0092BC56                            ; --------------------------------------------
0092BC56                            
0092BC56                            Art_LvlPrizes:	incbin	"engine/modes/level/data/layouts/prizes_art.bin"
0092C856                            		even
0092C856                            Art_LvlPrizes_e:
0092C856                            
0092C856                            Pal_LvlCoinItms	incbin	"engine/modes/level/data/layouts/lvlitems_pal.bin"
0092C876                            		even
0092C876                            		
0092C876                            ; ====================================================================
0092C876                            ; -------------------------------------------------
0092C876                            ; Sound data
0092C876                            ; -------------------------------------------------
0092C876                            
0092C876                            ; --------------------------
0092C876                            ; MUSIC level 1
0092C876                            ; --------------------------
0092C876                            
0092C876                            Music_Level1:
0092C876 0B02                       		dc.b 11,2
0092C878 0000 0000                  		dc.l @notes
0092C87C 0000 0000                       		dc.l @ins
0092C880 000A                            		dc.w 10
0092C882 0040 800F                        		dc.b FM_1,64,$80,$0F
0092C886 0140 800F                        		dc.b FM_2,64,$80,$0F
0092C88A 0240 800F                        		dc.b FM_3,64,$80,$0F
0092C88E 0440 800F                  		dc.b FM_4,64,$80,$0F
0092C892 0540 800F                  		dc.b FM_5,64,$80,$0F
0092C896 0640 800F                   		dc.b FM_6,64,$80,$0F
0092C89A 8040 800F                   		dc.b PSG_1,64,$80,$0F
0092C89E A040 800F                   		dc.b PSG_2,64,$80,$0F
0092C8A2 C040 800F                   		dc.b PSG_3,64,$80,$0F
0092C8A6 E040 800F                   		dc.b NOISE,64,$80,$0F
0092C8AA                             		even
0092C8AA                            @notes:		incbin "engine/sound/music/level0.it",$50+$11B
0092DF90                                  		even
0092DF90 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins
0092DF96                            		even
0092DF96                            		
0092DF96 0001 0000                  @ymha: 		dc.w 1,0
0092DF9A 0000 0000                  		dc.l fmBass_jazz
0092DF9E 0042 0000                  		dc.w 2|$40,0
0092DFA2 0000 0000                  		dc.l fm3drum_tick
0092DFA6 38AB 3457                  		dc.w $00AB|$3800,$0457|$3000
0092DFAA 3511 2336                  		dc.w $0511|$3000,$0336|$2000
0092DFAE 0083 FFE8                    		dc.w 3|$80,-24
0092DFB2 0000 0000                    		dc.l wav_stKick
0092DFB6 0000 0000                   		dc.l wav_stKick_e
0092DFBA FFFF FFFF                   		dc.l -1
0092DFBE 0084 FFE8                    		dc.w 4|$80,-24
0092DFC2 0000 0000                    		dc.l wav_stSnare
0092DFC6 0000 0000                   		dc.l wav_stSnare_e
0092DFCA FFFF FFFF                   		dc.l -1
0092DFCE FFFF                       		dc.w -1
0092DFD0                            		even
0092DFD0                            
0092DFD0 0005 0004                  @noise: 	dc.w 5,%100
0092DFD4 FFFF                       		dc.w -1
0092DFD6                            		even
0092DFD6                            	
0092DFD6                            ; --------------------------
0092DFD6                            ; SFX: 1up
0092DFD6                            ; --------------------------
0092DFD6                            
0092DFD6 00FF                       SndSfx_OneUp:	dc.b 0,-1
0092DFD8 0000 0000                  		dc.l @pattr
0092DFDC 0000 0000                       		dc.l @ins
0092DFE0 0002                            		dc.w 2
0092DFE2 A040 800F                        		dc.b PSG_2,64,$80,$F
0092DFE6 C040 800F                        		dc.b PSG_3,64,$80,$F
0092DFEA                            @pattr:		incbin "engine/sound/sfx/oneup.it",$50+$DC
0092E10A                            		even
0092E10A FFFF FFFF FFFF FFFF        @ins: 		dc.w -1,-1,-1,-1
0092E112                            		even
0092E112                            				
0092E112                            ; --------------------------
0092E112                            ; SFX: BONK
0092E112                            ; --------------------------
0092E112                            
0092E112 00FF                       SndSfx_BONK:	dc.b 0,-1
0092E114 0000 0000                  		dc.l @pattern
0092E118 0000 0000                       		dc.l @instruments
0092E11C 0003                            		dc.w 3
0092E11E 0540 800E                        		dc.b FM_5,64,$80,%1110
0092E122 0640 800F                        		dc.b FM_6,64,$80,$F
0092E126 A040 800F                        		dc.b PSG_2,64,$80,$F
0092E12A                            @pattern:	incbin "engine/sound/sfx/bonk.it",$50+$FC+$28
0092E1CC                                  		even
0092E1CC                            
0092E1CC 0000                       @instruments: 	dc.w @ymha-@instruments
0092E1CE FFFF                       		dc.w -1
0092E1D0 0000                       		dc.w @noise-@instruments
0092E1D2 FFFF                       		dc.w -1
0092E1D4                            		even
0092E1D4                            		
0092E1D4 0002 0000                  @ymha: 		dc.w 2,0
0092E1D8 0000 0000                     		dc.l FMSfx_Bump
0092E1DC                            
0092E1DC 0083 FFF0                     		dc.w $80|3,-16
0092E1E0 0000 0000                     		dc.l WAVE_lwpnch
0092E1E4 0000 0000                     		dc.l WAVE_lwpnch_e
0092E1E8 FFFF FFFF                     		dc.l -1
0092E1EC                               		
0092E1EC FFFF                       		dc.w -1	;EOL
0092E1EE                            		even
0092E1EE 0002 0005                  @noise: 	dc.w 2,%101
0092E1F2 FFFF                       		dc.w -1
0092E1F4                            		even
0092E1F4                            		
0092E1F4                            ; --------------------------
0092E1F4                            ; SFX: Bonk a coin
0092E1F4                            ; --------------------------
0092E1F4                            
0092E1F4                            SndSfx_BonkCoin:
0092E1F4 00FF                       		dc.b 0,-1
0092E1F6 0000 0000                  		dc.l @pattern
0092E1FA 0000 0000                       		dc.l @instruments
0092E1FE 0004                            		dc.w 4
0092E200 0540 800E                        		dc.b FM_5,64,$80,%1110
0092E204 0640 800F                        		dc.b FM_6,64,$80,$F
0092E208 A040 800F                        		dc.b PSG_2,64,$80,$F
0092E20C C040 800F                        		dc.b PSG_3,64,$80,$F
0092E210                            @pattern:	incbin "engine/sound/sfx/bonkcoin.it",$50+$12C
0092E2DC 00                               		even
0092E2DC                            
0092E2DC 0000                       @instruments: 	dc.w @ymha-@instruments
0092E2DE FFFF                       		dc.w -1
0092E2E0 0000                       		dc.w @noise-@instruments
0092E2E2 FFFF                       		dc.w -1
0092E2E4                            		even
0092E2E4                            		
0092E2E4 0002 0000                  @ymha: 		dc.w 2,0
0092E2E8 0000 0000                     		dc.l FMSfx_Bump
0092E2EC                            
0092E2EC 0083 FFF0                     		dc.w $80|3,-16
0092E2F0 0000 0000                     		dc.l WAVE_lwpnch
0092E2F4 0000 0000                     		dc.l WAVE_lwpnch_e
0092E2F8 FFFF FFFF                     		dc.l -1
0092E2FC                               		
0092E2FC FFFF                       		dc.w -1	;EOL
0092E2FE                            		even
0092E2FE 0002 0005                  @noise: 	dc.w 2,%101
0092E302 FFFF                       		dc.w -1
0092E304                            		even
0092E304                            		
0092E304                            ; --------------------------
0092E304                            ; SFX: PUM
0092E304                            ; --------------------------
0092E304                            
0092E304                            SndSfx_PUM:
0092E304 00FF                       		dc.b 0,-1
0092E306 0000 0000                  		dc.l @pattern
0092E30A 0000 0000                       		dc.l @instruments
0092E30E 0003                            		dc.w 3
0092E310 0540 800F                        		dc.b FM_5,64,$80,$0F
0092E314 E040 800F                        		dc.b NOISE,64,$80,$0F
0092E318 0640 800F                        		dc.b FM_6,64,$80,$0F
0092E31C                            @pattern:	incbin "engine/sound/sfx/blkbump.it",$F4+$50+$20
0092E3BE                                  		even
0092E3BE                            
0092E3BE 0000                       @instruments:	dc.w @ymha-@instruments
0092E3C0 FFFF                       		dc.w -1
0092E3C2 0000                       		dc.w @noise-@instruments
0092E3C4                            		even
0092E3C4                            
0092E3C4 0001 0000                  @ymha: 		dc.w 1,0
0092E3C8 0000 0000                     		dc.l FMSfx_Punch
0092E3CC                               		
0092E3CC 0083 0000                     		dc.w $80|3,0
0092E3D0 0000 0000                     		dc.l WAVE_lwpnch
0092E3D4 0000 0000                     		dc.l WAVE_lwpnch_e
0092E3D8 FFFF FFFF                     		dc.l -1
0092E3DC                               		
0092E3DC FFFF                       		dc.w -1	;EOL
0092E3DE                            		even
0092E3DE                            @noise:
0092E3DE 0002 0006                   		dc.w 2,%110
0092E3E2 FFFF                       		dc.w -1
0092E3E4                            		even
0092E3E4                            
0092E3E4                            ; --------------------------
0092E3E4                            ; SFX: PING
0092E3E4                            ; --------------------------
0092E3E4                            
0092E3E4                            SndSfx_PING:
0092E3E4 00FF                       		dc.b 0,-1
0092E3E6 0000 0000                  		dc.l @notes
0092E3EA 0000 0000                       		dc.l @ins
0092E3EE 0002                            		dc.w 2
0092E3F0 E040 800F                        		dc.b NOISE,64,$80,$0F
0092E3F4 0640 800F                        		dc.b FM_6,64,$80,$0F
0092E3F8                            @notes:		incbin "engine/sound/sfx/pingball.it",$50+$DC
0092E492                                  		even
0092E492 0000                       @ins: 		dc.w @ymha-@ins
0092E494 FFFF                       		dc.w -1
0092E496 0000                       		dc.w @noise-@ins
0092E498                            		even
0092E498                            @noise:
0092E498 0001 0004                   		dc.w 1,%100
0092E49C FFFF                       		dc.w -1
0092E49E                            		even
0092E49E                            @ymha:
0092E49E 0081 0000                  		dc.w $80|1,0
0092E4A2 0000 0000                  		dc.l WAVE_sfxBall
0092E4A6 0000 0000                  		dc.l WAVE_sfxBall_e
0092E4AA FFFF FFFF                  		dc.l -1
0092E4AE                            		
0092E4AE FFFF                       		dc.w -1
0092E4B0                            		even
0092E4B0                            		
0092E4B0                            ; --------------------------
0092E4B0                            ; SFX: COIN
0092E4B0                            ; --------------------------
0092E4B0                            
0092E4B0                            SndSfx_COIN:
0092E4B0 00FF                       		dc.b 0,-1
0092E4B2 0000 0000                  		dc.l @notes
0092E4B6 0000 0000                       		dc.l @ins
0092E4BA 0002                            		dc.w 2
0092E4BC 8040 800F                        		dc.b PSG_1,64,$80,$F
0092E4C0 A040 800F                        		dc.b PSG_2,64,$80,$F
0092E4C4                            @notes:		incbin "engine/sound/sfx/coin.it",$50+$D4+8
0092E56A                                  		even
0092E56A FFFF                       @ins: 		dc.w -1
0092E56C FFFF                       		dc.w -1
0092E56E FFFF                       		dc.w -1
0092E570                            		even
0092E570                            		
0092E570                            ; --------------------------
0092E570                            ; SFX: COIN
0092E570                            ; --------------------------
0092E570                            
0092E570                            SndSfx_BEEBUZZ:
0092E570 00FF                       		dc.b 0,-1
0092E572 0000 0000                  		dc.l @notes
0092E576 0000 0000                       		dc.l @ins
0092E57A 0001                            		dc.w 1
0092E57C 0540 800F                        		dc.b FM_5,64,$80,$F
0092E580                            @notes:		incbin "engine/sound/sfx/beebuzz.it",$50+$D4
0092E630                                  		even
0092E630 0000                       @ins: 		dc.w @ymha-@ins
0092E632 FFFF                       		dc.w -1
0092E634 FFFF                       		dc.w -1
0092E636                            		even
0092E636                            @ymha:
0092E636 0001 0000                  		dc.w 1,0
0092E63A 0000 0000                  		dc.l fmSfx_BUZZ
0092E63E FFFF FFFF                  		dc.l -1
0092E642                            		
0092E642 FFFF                       		dc.w -1
0092E644                            		even
0092E644                            		
0092E644                            ; --------------------------
0092E644                            ; SFX: COIN
0092E644                            ; --------------------------
0092E644                            
0092E644                            SndSfx_PlyrJump:
0092E644 00FF                       		dc.b 0,-1
0092E646 0000 0000                  		dc.l @notes
0092E64A 0000 0000                       		dc.l @ins
0092E64E 0001                            		dc.w 1
0092E650 E040 800F                        		dc.b NOISE,64,$80,$F
0092E654                            @notes:		incbin "engine/sound/sfx/plyrjump.it",$50+$DC
0092E704 00                               		even
0092E704 FFFF FFFF 0000             @ins:		dc.w -1,-1,@noise-@ins
0092E70A 0001 0004                  @noise:		dc.w 1,%100
0092E70E                            		even
0092E70E                               
0092E70E                            ; --------------------------
0092E70E                            ; SFX: COIN
0092E70E                            ; --------------------------
0092E70E                            
0092E70E                            SndSfx_HitEnemy:
0092E70E 00FF                       		dc.b 0,-1
0092E710 0000 0000                  		dc.l @notes
0092E714 0000 0000                  		dc.l @ins
0092E718 0002                       		dc.w 2
0092E71A 0640 800F                  		dc.b FM_6,64,$80,$F
0092E71E E040 800F                  		dc.b NOISE,64,$80,$F
0092E722                            @notes:		incbin "engine/sound/sfx/bumpenemy.it",$50+$D4
0092E7CE 00                         		even
0092E7CE 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins
0092E7D4 0001 0000                  @ymha:		dc.w 1,0
0092E7D8 0000 0000                  		dc.l FMSfx_Punch
0092E7DC 0002 0006                  @noise:		dc.w 2,%110
0092E7E0                            		
0092E7E0                            ; --------------------------
0092E7E0                            ; instruments
0092E7E0                            ; --------------------------
0092E7E0                            
0092E7E0                            fmBass_jazz:	incbin	"engine/sound/instruments/FM/bass/bass_jazz.bin"
0092E7FA 00                         		even
0092E7FA                            fm3drum_tick: 	incbin	"engine/sound/instruments/fm/drums/fm3_tick.bin"
0092E814 00                         		even
0092E814                            		
0092E814                            FMSfx_Punch:	incbin	"engine/sound/instruments/FM/fmsfx_boomlong.bin"
0092E82E 00                         		even
0092E82E                            FMSfx_Bump:	incbin	"engine/sound/instruments/FM/fmsfx_bump.bin"
0092E848 00                         		even
0092E848                            fmSfx_BUZZ:	incbin	"engine/sound/instruments/FM/old/socket_voiceset.bin",$19*18,$19
0092E862 00                         		even
0092E862                            		
0092E862                            WAVE_lwbonk:	incbin	"engine/sound/instruments/DAC/sfxbonk.wav",$2C
0092FD28 00                         WAVE_lwbonk_e:	even
0092FD28                            WAVE_lwpnch:	incbin	"engine/sound/instruments/DAC/sfxhithard.wav",$2C
009318E0 00                         WAVE_lwpnch_e:	even
009318E0                            WAVE_sfxBall:	incbin	"engine/sound/instruments/DAC/sfxBallTick.wav",$2C
00933834                            WAVE_sfxBall_e:	even
00933834                            wav_stKick:	incbin	"engine/sound/instruments/DAC/stKick.wav",$2C
0093481C                            wav_stKick_e:	even
0093481C                            wav_stSnare:	incbin	"engine/sound/instruments/DAC/stSnare.wav",$2C
0093691C                            wav_stSnare_e:	even
0093691C                            wav_stSnare_e:	even
0093691C                            		
0093691C                            		inform 0,"This 68k BANK uses: %h",*-THIS_BANK_1
0003691C                            
0003691C                            ; ====================================================================
0003691C                            ; -------------------------------------------------
0003691C                            ; 68k DATA
0003691C                            ; -------------------------------------------------
0003691C                            
0003691C                            ; ====================================================================
0003691C                            ; -------------------------------------------------
0003691C                            ; MARS ONLY: sh2-ready DATA
0003691C                            ; -------------------------------------------------
0003691C                            
0003691C                            		obj *+$22000000
2203691C                            		
2203691C                            ; --------------------------------------------
2203691C                            	
2203691C 0000 0000 0000 0000 0000+  mdldata_cube:	dc.l @faces,@points,mdldata_material
22036928                            @faces:		incbin "ideas/models/cube_fce.bin"
22036970                            		align 4
22036970                            @points: 	incbin "ideas/models/cube_vrt.bin"
220369A0                            		align 4
220369A0                            		
220369A0 0000 0000 0000 0000 0000+  mdldata_sphere:	dc.l @faces,@points,mdldata_material
220369AC                            @faces:		incbin "ideas/models/sphere_fce.bin"
22036CCC                            		align 4
22036CCC                            @points: 	incbin "ideas/models/sphere_vrt.bin"
22036DC8                            		align 4
22036DC8                            
22036DC8 0000 0000 0000 0000 0000+  mdldata_field:	dc.l @faces,@points,mdldata_material
22036DD4                            @faces:		incbin "ideas/models/field_fce.bin"
220379D4                            		align 4
220379D4                            @points: 	incbin "ideas/models/field_vrt.bin"
2203809A 0000                       		align 4
2203809C                            
2203809C 0000 0000 0000 0000 0000+  mdldata_world:	dc.l @faces,@points,mdldata_material
220380A8                            @faces:		incbin "ideas/models/world_fce.bin"
2203A814                            		align 4
2203A814                            @points: 	incbin "ideas/models/world_vrt.bin"
2203BD2C                            		align 4
2203BD2C                            	
2203BD2C 0000 0000 0000 0000 0000+  mdldata_monkey:	dc.l @faces,@points,mdldata_material
2203BD38                            @faces:		incbin "ideas/models/monkey_fce.bin"
2203D468                            		align 4
2203D468                            @points: 	incbin "ideas/models/monkey_vrt.bin"
2203E04A 0000                       		align 4
2203E04C                            		
2203E04C                            ; --------------------------------------------
2203E04C                            
2203E04C                            mdldata_material:
2203E04C                            
2203E04C                            		;BETTY
2203E04C 8000 0000                         		dc.l $80000000|0		; ID
2203E050 0000 0000                    		dc.l texturepack+$312		; Texture address     | (-1) Solid color mode
2203E054 0140 0000                    		dc.l (320<<16)			; Texture Width+Entry | Solid color
2203E058 0000 0140 0000 0000          		dc.l 320,  0
2203E060 0000 0000 0000 0000          		dc.l   0,  0
2203E068 0000 0000 0000 00DF          		dc.l   0,223
2203E070 0000 0140 0000 00DF               		dc.l 320,223
2203E078                                   		
2203E078                                   		;ZACATE
2203E078                            ;		tex_01
2203E078 8000 0001                         		dc.l $80000000|1		; ID
2203E07C 0000 0000                    		dc.l texturepack+$312		; Texture address     | (-1) Solid color mode
2203E080 0140 0000                    		dc.l (320<<16)			; Texture Width+Entry | Solid color
2203E084 0000 003F 0000 00E0          		dc.l  63,224
2203E08C 0000 0000 0000 00E0          		dc.l   0,224
2203E094 0000 0000 0000 011F          		dc.l   0,287
2203E09C 0000 003F 0000 011F               		dc.l  63,287
2203E0A4                            
2203E0A4                                   		;CASAS
2203E0A4 8000 0002                         		dc.l $80000000|2		; ID
2203E0A8 0000 0000                    		dc.l texturepack+$312		; Texture address     | (-1) Solid color mode
2203E0AC 0140 0000                    		dc.l (320<<16)			; Texture Width+Entry | Solid color
2203E0B0 0000 007F 0000 0120          		dc.l 127,288
2203E0B8 0000 0000 0000 0120          		dc.l   0,288
2203E0C0 0000 0000 0000 016D          		dc.l   0,365
2203E0C8 0000 007F 0000 016D               		dc.l 127,365
2203E0D0                                   		
2203E0D0                                   		;CAMINO,left
2203E0D0 8000 0003                         		dc.l $80000000|3		; ID
2203E0D4 0000 0000                    		dc.l texturepack+$312		; Texture address     | (-1) Solid color mode
2203E0D8 0140 0000                    		dc.l (320<<16)			; Texture Width+Entry | Solid color
2203E0DC 0000 007F 0000 00E0          		dc.l 127,224
2203E0E4 0000 0040 0000 00E0          		dc.l  64,224
2203E0EC 0000 0040 0000 011F          		dc.l  64,287
2203E0F4 0000 007F 0000 011F               		dc.l 127,287
2203E0FC                                   		
2203E0FC                                   		;CAMINO, right
2203E0FC 8000 0004                         		dc.l $80000000|4		; ID
2203E100 0000 0000                    		dc.l texturepack+$312		; Texture address     | (-1) Solid color mode
2203E104 0140 0000                    		dc.l (320<<16)			; Texture Width+Entry | Solid color
2203E108 0000 00BF 0000 00E0          		dc.l 191,224
2203E110 0000 0080 0000 00E0          		dc.l 128,224
2203E118 0000 0080 0000 011F          		dc.l 128,287
2203E120 0000 00BF 0000 011F               		dc.l 191,287
2203E128                                   		
2203E128 FFFF FFFF                  		dc.l -1
2203E12C                            		align 4
2203E12C                            
2203E12C                            		cnop 0,$10000
22040000 4151 5549                  		dc.b "AQUI"
22040004                            texturepack:
22040004                            		incbin "ideas/textures.tga"
22058330                            		align 4
22058330                            		
22058330                            ; --------------------------------------------
22058330                            ; SOUND
22058330                            ; --------------------------------------------
22058330                            
22058330                            ; 		dc.b "LEFT"
22058330                            ; 		incbin "ideas/L.wav",$2C,$1C8000
22058330                            ; 
22058330                            ; 		dc.b "RGHT"
22058330                            ; 		incbin "ideas/R.wav",$2C,$1C8000
22058330                            
22058330                            ; --------------------------------------------
22058330                            
22058330                            		objend
00058330                            		
00058330                            ; ====================================================================
00058330                            ; -------------------------------------------------
00058330                            ; END
00058330                            ; -------------------------------------------------
00058330                            		
00058330                            ROM_END:
00058330                            		inform 0,"ROM Size: %h",ROM_END
00058330                            		cnop 0,$80000
