00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; GAME
00000000                            ; -------------------------------------------------
00000000                            
00000000                            		include	"system/macros.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Macros
00000000                            ; -------------------------------------------------
00000000                            
00000000                            align		macro
00000000                            		cnop 0,\1
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Pick ROM section
00000000                            ; --------------------------------------------
00000000                            
00000000                            romSection	macro where
00000000                            CODE		=	*+$880000
00000000                            DATA		=	*+marsbank
00000000                            RAM		=	$FF0000
00000000                            WRAM		=	$200000
00000000                            ; ---------------------------
00000000                            		if MCD|MARS == True
00000000                            		obj \1
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; ---------------------------
00000000                            
00000000                            romSectionEnd	macro
00000000                            		if MCD
00000000                            		objend
00000000                            		elseif MARS
00000000                            		objend
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Video
00000000                            ; --------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; dmaTask
00000000                            ; --------------------------------------------
00000000                            
00000000                            dmaTask		macro
00000000                            FILL		=	$C0000000+1
00000000                            COPY		=	$C0000000+2
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA FILL
00000000                            ; (FILL,byte,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		if \1=FILL
00000000                            		
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                            		move.w	#$9780,(vdp_ctrl)
00000000                            		move.l	#\3|$80,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait1\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait1\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA COPY
00000000                            ; (COPY,from,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		elseif \1=COPY
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\2>>1)&$FF00)>>8)|(($9500+((\2>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$97C0,(vdp_ctrl)
00000000                            		move.l	#\3|$C0,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait2\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait2\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA ROM/RAM to VDP
00000000                            ; (from,to,size)
00000000                            ; ---------------------------
00000000                            		else
00000000                            		;\1 from | \2 to | \3 size
00000000                             		move.l	#$9400+(((\3)&$FF00)>>9)|(($9300+(((\3)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\1>>1)&$FF00)>>8)|(($9500+((\1>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(vdp_ctrl)
00000000                            		
00000000                            ; 		move.l	#\2|$80,(vdp_ctrl)		;new attempt
00000000                            		move.w	#((\2&$FFFF))|$80,-(sp)
00000000                            		move.w	#(((\2)>>16)&$FFFF),-(sp)
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#$100,($A11100)
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100)
00000000                              		bne.s	@WaitZ80_\@
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#0,($A11100).l
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            
00000000                            fade		macro
00000000                            in = 1
00000000                            out = 0
00000000                            		if \1=in
00000000                             		move.l	#$0101003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		elseif \1=out
00000000                            		
00000000                            		move.l	#$0201003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            ; System
00000000                            ; --------------------------------------------
00000000                            
00000000                            z80		macro
00000000                            ON = 1
00000000                            OFF = 0
00000000                            		if \1=OFF
00000000                            		
00000000                             		move.w	#$100,($A11100).l
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100).l
00000000                              		bne.s	@WaitZ80_\@
00000000                            		elseif \1=ON
00000000                            		
00000000                              		move.w	#0,($A11100).l
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            		
00000000                            		include	"system/ram.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; RAM
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; ---------------------------
00000000                            ; Setup
00000000                            ; ---------------------------
00000000                            
00000000                                            rsset	$FFFFBC00
00000000 =FFFFBC00                  RAM_ModeBuffer	rs.b	$2000
00000000 =FFFFDC00                  RAM_Engine      rs.b	$200
00000000 =FFFFDE00                  RAM_System      rs.b	$80
00000000 =FFFFDE80                  RAM_Input	rs.b	$80
00000000 =FFFFDF00                  RAM_Video       rs.b	$1000
00000000 =FFFFEF00                  RAM_Audio       rs.b	$400
00000000 =FFFFF300                  endof_ram	rs.l	0
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            		include	"system/hardware/map.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Variables
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; I/O
00000000                            ; --------------------------------------------
00000000                            
00000000 =00A10001                  port_ver	equ	$A10001
00000000 =00A14000                  port_tmss	equ	$A14000
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; VDP
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00000                  vdp_data	equ	$C00000
00000000 =00C00004                  vdp_ctrl	equ	$C00004
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MD Audio
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00011                  sound_psg	equ	$C00011
00000000 =00A04000                  sound_ym_1	equ	$A04000
00000000 =00A04001                  sound_ym_2	equ	$A04001
00000000 =00A04002                  sound_ym_3	equ	$A04002
00000000 =00A04003                  sound_ym_4	equ	$A04003
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MARS only
00000000                            ; --------------------------------------------
00000000                            
00000000 =00840000                  framebuffer	equ	$840000
00000000 =00860000                  overwrite	equ	$860000
00000000 =00880000                  marsipl		equ	$880000
00000000 =00900000                  marsbank	equ	$900000
00000000 =00A130EC                  mars_ID		equ	$a130ec		; MARS ID "MARS"
00000000                            
00000000 =00A15100                  marsreg		equ	$a15100
00000000 =00000000                  access		equ	$00		; byte		; MARS VDP access control
00000000 =00000001                  adapter		equ	$01		; byte		; MARS adapter control
00000000 =00000003                  intctl		equ	$03		; byte		; SH2 interrupt control
00000000 =00000005                  bankctl		equ	$05		; byte		; BANK conterol
00000000 =00000007                  dreqctl		equ	$07		; byte		; DREQ control
00000000 =00000008                  dreqsource	equ	$08		; long		; 68 to SH DREQ source address
00000000 =0000000C                  dreqdest	equ	$0c		; long		; 68 to SH DREQ destination address
00000000 =00000010                  dreqlength	equ	$10		; word		; 68 to SH DREQ length
00000000 =00000012                  dreqfifo	equ	$12		; word		; 68 to SH DREQ FIFO
00000000 =0000001B                  segatv		equ	$1b		; byte		; SEGA TV Reg.
00000000 =00000020                  comm0		equ	$20		; 		; Communcation Reg.
00000000 =00000022                  comm2		equ	$22		; 		; Communcation Reg.
00000000 =00000024                  comm4		equ	$24		; 		; Communcation Reg.
00000000 =00000026                  comm6		equ	$26		; 		; Communcation Reg.
00000000 =00000028                  comm8		equ	$28		; 		; Communcation Reg.
00000000 =00000029                  comm9		equ	$29		; 		; Communcation Reg.
00000000 =0000002A                  comm10		equ	$2a		; 		; Communcation Reg.
00000000 =0000002C                  comm12		equ	$2c		; 		; Communcation Reg.
00000000 =0000002E                  comm14		equ	$2e		; 		; Communcation Reg.
00000000                            
00000000 =00000080                  tvmode		equ	$80		; byte		; NTSC/PAL
00000000 =00000081                  bitmapmode	equ	$81		; byte		; BitMap Mode Reg.
00000000 =00000083                  shift		equ	$83		; byte		; Packed Pixel Dot Shift
00000000 =00000085                  filllength	equ	$85		; byte		; DRAM Fill Length
00000000 =00000086                  fillstart	equ	$86		; word		; DRAM Fill Start Address
00000000 =00000088                  filldata	equ	$88		; word		; DRAM Fill Data
00000000 =0000008A                  vdpsts		equ	$8a		; byte		; VDP status
00000000 =0000008B                  framectl	equ	$8b		; byte		; Frame Buffer Control
00000000                            
00000000 =00A15200                  palette		equ	$a15200		; 256 words	; Palette Data
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; OTHER
00000000                            ; --------------------------------------------
00000000                            
00000000                            		
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Header / Init
00000000                            ; -------------------------------------------------
00000000                            
00000000                            		include	"system/hardware/md/head.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Header
00000000                            ; 
00000000                            ; MD
00000000                            ; -------------------------------------------------
00000000                            
00000000 0000 0000                  		dc.l 0
00000004 0000 0000                  		dc.l MD_Entry
00000008 0000 0000                  		dc.l MD_Err_Bus
0000000C 0000 0000                  		dc.l MD_Err_Addr
00000010 0000 0000                  		dc.l MD_Err_Illg
00000014 0000 0000                  		dc.l MD_Err_Div
00000018 0000 0000                  		dc.l MD_Err_CHK
0000001C 0000 0000                  		dc.l MD_Err_TRAPV
00000020 0000 0000                  		dc.l MD_Err_Privl
00000024 0000 0000                  		dc.l MD_Err_TRACE
00000028 0000 0000                  		dc.l MD_Err_EMU10
0000002C 0000 0000                  		dc.l MD_Err_EMU11
00000030 0000 0000 0000 0000 0000+  		align	$70
00000070 0000 0000                  		dc.l RAM_HintJumpTo
00000074 0000 0000                  		align	$78
00000078 0000 0000                  		dc.l RAM_VintJumpTo
0000007C 0000 0000 0000 0000 0000+  		align	$100
00000100 5345 4741 204D 4547 4120+  		dc.b "SEGA MEGA DRIVE "
00000110 0000 0000 0000 0000 0000+  		align	$120
00000120 4C61 7320 6176 656E 7475+  		dc.b "Las aventuras de Dominoe"
00000138 0000 0000 0000 0000 0000+  		align	$150
00000150 446F 6D69 6E6F 6520 4164+  		dc.b "Dominoe Adventures"
00000162 0000 0000 0000 0000 0000+  		align	$200
00000200                            
00000200                            ; ====================================================================
00000200                            ; -------------------------------------------------
00000200                            ; Entry
00000200                            ; -------------------------------------------------
00000200                            
00000200                            MD_Entry:
00000200 46FC 2700                  		move.w	#$2700,sr
00000204 4AB9 00A1 0008             		tst.l	($A10008).l		;Test Port A control
0000020A 6600                       		bne.s	@PortA_Ok
0000020C 4A79 00A1 000C             		tst.w	($A1000C).l		;Test Port C control
00000212                            @PortA_Ok:
00000212 6600 0000                  		bne	@Hot
00000216                            
00000216 1039 00A1 0001             		move.b	(port_ver),d0
0000021C 0200 000F                  		and.b	#%1111,d0
00000220 6700                       		beq.s	@Skip
00000222 23F9 0000 0100 00A1 4000   		move.l	($100),(port_tmss)
0000022C                            		
0000022C 41F9 FFFF 0000             		lea	($FFFF0000).l,a0
00000232 323C 7FFF                  		move.w	#$7FFF,d1
00000236                            @ClearRAM:
00000236 4258                       		clr.w	(a0)+
00000238 51C9 FFFC                  		dbf	d1,@ClearRAM
0000023C 4CF9 7FFF 00FF 0000        		movem.l	($FF0000).l,d0-a6
00000244                            		
00000244                            @Skip:
00000244 4A79 00C0 0004             		tst.w	(vdp_ctrl).l		;test if VDP works
0000024A                            @Hot:
0000024A 6000 0000                  		bra	MD_Main
0000024E                            		
0000024E                            ; ====================================================================
0000024E                            ; -------------------------------------------------
0000024E                            ; Error handler
0000024E                            ; -------------------------------------------------
0000024E                            
0000024E                            MD_Err_Bus:
0000024E 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrBus,($FFFFBBBC)
00000258 6000                       		bra.s	MD_Error
0000025A                            MD_Err_Addr:
0000025A 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrAddr,($FFFFBBBC)
00000264 6000                       		bra.s	MD_Error
00000266                            MD_Err_Illg:
00000266 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrIllg,($FFFFBBBC)
00000270 6000                       		bra.s	MD_Error
00000272                            MD_Err_Div:
00000272 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
0000027C 6000                       		bra.s	MD_Error
0000027E                            MD_Err_CHK:
0000027E 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
00000288 6000                       		bra.s	MD_Error
0000028A                            MD_Err_TRAPV:
0000028A 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
00000294 6000                       		bra.s	MD_Error
00000296                            MD_Err_Privl:
00000296 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
000002A0 6000                       		bra.s	MD_Error
000002A2                            MD_Err_TRACE:
000002A2 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
000002AC 6000                       		bra.s	MD_Error
000002AE                            MD_Err_EMU10:
000002AE 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
000002B8 6000                       		bra.s	MD_Error
000002BA                            MD_Err_EMU11:
000002BA 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
000002C4                            		
000002C4                            MD_Error:
000002C4 48F9 FFFF FFFF BBC0        		movem.l	d0-a7,($FFFFBBC0)
000002CC 46FC 2700                  		move.w	#$2700,sr
000002D0                            		
000002D0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_ctrl)
000002DA 33FC 0000 00C0 0000        		move.w	#$0000,(vdp_data)
000002E2                            
000002E2 4A79 0000 0000             		tst.w	(RAM_Palette+$1E)
000002E8 6600                       		bne.s	@alrdy2
000002EA 23FC C01E 0000 00C0 0004   		move.l	#$C01E0000,(vdp_ctrl)
000002F4 33FC 0EEE 00C0 0000        		move.w	#$0EEE,(vdp_data)
000002FC                            @alrdy2:
000002FC 23FC 5800 0003 00C0 0004   		move.l	#$58000003,(vdp_ctrl)
00000306 41F9 0000 0000             		lea	(Art_DebugFont),a0
0000030C 303C 0007                  		move.w	#(($20)/4)-1,d0
00000310                            @dbg_loop:
00000310 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
00000316 51C8 FFF8                  		dbf	d0,@dbg_loop
0000031A                            		
0000031A 207C 0000 0000             		movea.l	#AscErr_Base,a0
00000320 7002                       		moveq	#2,d0
00000322 223C 0000 0000             		move.l	#$00000000,d1
00000328 343C 8680                  		move.w	#$8680,d2
0000032C 6100 0000                  		bsr	Video_PrintText
00000330                            		
00000330 2079 FFFF BBBC             		movea.l	($FFFFBBBC),a0
00000336 7002                       		moveq	#2,d0
00000338 223C 0001 0001             		move.l	#$00010001,d1
0000033E 343C 8680                  		move.w	#$8680,d2
00000342 6100 0000                  		bsr	Video_PrintText
00000346                            		
00000346                            ; 		movea.l	($FFFFBBFC),a0
00000346                            ; 		moveq	#2,d0
00000346                            ; 		move.l	#$001B0003,d1
00000346                            ; 		move.l	-4(a0),d2
00000346                            ; 		move.w	#$680,d3
00000346                            ; 		moveq	#2,d4
00000346                            ; 		bsr	Video_PrintVal
00000346                            		
00000346 2E3C 0002 0007             		move.l	#$00020007,d7
0000034C 43F9 FFFF BBC0             		lea	($FFFFBBC0),a1
00000352                            @loopy:
00000352 7002                       		moveq	#2,d0
00000354 223C 0004 0000             		move.l	#$00040000,d1
0000035A 4847                       		swap	d7
0000035C 3207                       		move.w	d7,d1
0000035E 0647 0001                  		add.w	#1,d7
00000362 4847                       		swap	d7
00000364 2419                       		move.l	(a1)+,d2
00000366 363C 8680                  		move.w	#$8680,d3
0000036A 7802                       		moveq	#2,d4
0000036C 6100 0000                  		bsr	Video_PrintVal
00000370 51CF FFE0                  		dbf	d7,@loopy
00000374                            		
00000374 2E3C 0002 0007             		move.l	#$00020007,d7
0000037A 43F9 FFFF BBE0             		lea	($FFFFBBE0),a1
00000380                            @loopy2:
00000380 7002                       		moveq	#2,d0
00000382 223C 0010 0000             		move.l	#$00100000,d1
00000388 4847                       		swap	d7
0000038A 3207                       		move.w	d7,d1
0000038C 0647 0001                  		add.w	#1,d7
00000390 4847                       		swap	d7
00000392 2419                       		move.l	(a1)+,d2
00000394 363C 8680                  		move.w	#$8680,d3
00000398 7802                       		moveq	#2,d4
0000039A 6100 0000                  		bsr	Video_PrintVal
0000039E 51CF FFE0                  		dbf	d7,@loopy2
000003A2                            		
000003A2 23FC 8700 920A 00C0 0004   		move.l	#$8700920A,(vdp_ctrl)
000003AC 60FE                       		bra.s	*
000003AE                            
000003AE 4255 5320 4552 524F 5220+  Asc_ErrBus: 	dc.b "BUS ERROR                              ",0
000003D6                            		even
000003D6 4144 4452 4553 5320 4572+  Asc_ErrAddr: 	dc.b "ADDRESS Error (R/W to an odd address)  ",0
000003FE                            		even
000003FE 494C 4C45 4741 4C20 496E+  Asc_ErrIllg: 	dc.b "ILLEGAL Instruction / Unknown error    ",0
00000426                            		even
00000426 504F 4E4D 4520 5449 5455+  Asc_ErrTEMP: 	dc.b "PONME TITULO CUANDO PUEDAS MIJO        ",0
0000044E                            		even
0000044E                            		
0000044E                            AscErr_Base:
0000044E 2020 2020 2020 2020 2020+  		dc.b "                                        ",$A
00000477 2020 2020 2020 2020 2020+  		dc.b "                                        ",$A
000004A0 2044 3020 3030 3030 3030+  		dc.b " D0 00000000 A0 00000000                ",$A
000004C9 2044 3120 3030 3030 3030+  		dc.b " D1 00000000 A1 00000000                ",$A
000004F2 2044 3220 3030 3030 3030+  		dc.b " D2 00000000 A2 00000000                ",$A
0000051B 2044 3320 3030 3030 3030+  		dc.b " D3 00000000 A3 00000000                ",$A
00000544 2044 3420 3030 3030 3030+  		dc.b " D4 00000000 A4 00000000                ",$A
0000056D 2044 3520 3030 3030 3030+  		dc.b " D5 00000000 A5 00000000                ",$A
00000596 2044 3620 3030 3030 3030+  		dc.b " D6 00000000 A6 00000000                ",$A
000005BF 2044 3720 3030 3030 3030+  		dc.b " D7 00000000 SP 00000000                ",0
000005E8                            		even
000005E8                            		
000005E8                            		
000005E8                            		
000005E8                            ; ====================================================================
000005E8                            ; -------------------------------------------------
000005E8                            ; Subs
000005E8                            ; -------------------------------------------------
000005E8                            
000005E8                            		include	"system/video.asm"
000005E8                            ; ====================================================================
000005E8                            ; VDP
000005E8                            ; ====================================================================
000005E8                            
000005E8                            ; -------------------------------------------------
000005E8                            ; Variables
000005E8                            ; -------------------------------------------------
000005E8                            
000005E8                            		rsreset
000005E8 =00000000                  palFd_mode	rs.b 1
000005E8 =00000001                  palFd_delay	rs.b 1
000005E8 =00000002                  palFd_from	rs.b 1			;TODO: poner funcionar esto
000005E8 =00000003                  palFd_num	rs.b 1
000005E8 =00000004                  palFd_timer	rs.w 1
000005E8                            
000005E8                            		rsreset
000005E8 =00000000                  sprite_free	rs.l 1
000005E8 =00000004                  sprite_link	rs.w 1
000005E8 =00000006                  sprite_used	rs.w 1
000005E8                            
000005E8                            ; ====================================================================
000005E8                            ; -------------------------------------------------
000005E8                            ; RAM
000005E8                            ; -------------------------------------------------
000005E8                            
000005E8                            		rsset RAM_Video
000005E8 =FFFFDF00                  RAM_ScrlHor	rs.l 240
000005E8 =FFFFE2C0                  RAM_ScrlVer	rs.l $20			; Normal
000005E8 =FFFFE340                  RAM_Sprites	rs.l (80*2)			; Normal
000005E8 =FFFFE5C0                  RAM_SprControl	rs.l 2				; Normal
000005E8 =FFFFE5C8                  RAM_HSprites	rs.l (80*2)			; For HBlank
000005E8 =FFFFE848                  RAM_HScrlVer	rs.l $20			; For HBlank
000005E8 =FFFFE8C8                  RAM_HSprLast	rs.l 2				; For HBlank
000005E8 =FFFFE8D0                  RAM_Palette	rs.w 64				; Normal
000005E8 =FFFFE950                  RAM_HPalette	rs.w 64				; For HBlank
000005E8 =FFFFE9D0                  RAM_PalFade	rs.w 64				; Normal
000005E8 =FFFFEA50                  RAM_HPalFade	rs.w 64				; For HBlank
000005E8 =FFFFEAD0                  RAM_PalFadeSys	rs.l 8*2
000005E8 =FFFFEB10                  RAM_DMA_Buffer	rs.b $200
000005E8 =FFFFED10                  RAM_VidRegs	rs.b 16				; Unused regs included (always zero) | WINDOW and DMA regs ignored, use them separately
000005E8                            
000005E8 =FFFFED20                  sizeof_vid	rs.l 0
000005E8                            ;       		inform 0,"video ram: %h",(sizeof_vid-RAM_Video)
000005E8                            
000005E8                            ; ====================================================================
000005E8                            ; -------------------------------------------------
000005E8                            ; Subs
000005E8                            ; -------------------------------------------------
000005E8                            
000005E8                            ; -------------------------------------------------
000005E8                            ; Video control
000005E8                            ; -------------------------------------------------
000005E8                            
000005E8                            Video_init:
000005E8 41FA 0000                  		lea	reg_data(pc),a0
000005EC 43F9 FFFF ED10             		lea	(RAM_VidRegs),a1
000005F2 303C 8000                  		move.w	#$8000,d0
000005F6 7210                       		moveq	#17-1,d1
000005F8                            @reg_list:
000005F8 1018                       		move.b	(a0)+,d0
000005FA 12C0                       		move.b	d0,(a1)+
000005FC 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
00000602 0640 0100                  		add.w	#$100,d0
00000606 51C9 FFF0                  		dbf	d1,@reg_list
0000060A 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)	;WINDOW LEFT/TOP clear
00000614 23FC 9300 9400 00C0 0004   		move.l	#$93009400,(vdp_ctrl)	;DMA len low/high clear
0000061E 23FC 9500 9600 00C0 0004   		move.l	#$95009600,(vdp_ctrl)	;DMA addr mid/low clear
00000628 33FC 9700 00C0 0004        		move.w	#$9700,(vdp_ctrl)	;DMA addr high clear
00000630                              	
00000630                            ; --------------------------------------------
00000630                            ; Video_ClearAll
00000630                            ; --------------------------------------------
00000630                            
00000630                            Video_ClearAll:
00000630 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)
0000063A                            		
0000063A 6100                       		bsr.s	Video_ClrAllLyrs
0000063C 6100                       		bsr.s	Video_ClearScroll
0000063E 6100 0000                  		bsr	Sprites_Clear
00000642 6000 0000                  		bra	Sprites_Reset
00000646                            		
00000646                            Video_ClearSprites:
00000646 6100 0000                  		bsr	Sprites_Clear
0000064A 6000 0000                  		bra	Sprites_Reset
0000064E                            		
0000064E                            ; --------------------------------------------
0000064E                            ; Video_ClrAllLyrs
0000064E                            ; --------------------------------------------
0000064E                            
0000064E                            Video_ClrAllLyrs:
0000064E 203C 4000 0003             		move.l	#$40000003,d0
00000654 6100                       		bsr.s	Video_ClrLyr
00000656 203C 5000 0003             		move.l	#$50000003,d0
0000065C 6100                       		bsr.s	Video_ClrLyr
0000065E 203C 6000 0003             		move.l	#$60000003,d0
00000664                            ; 		bsr.s	Video_ClrLyr
00000664                            ; 		rts
00000664                            		
00000664                            ; --------------------------------------------
00000664                            ; Video_ClrLyr
00000664                            ; 
00000664                            ; d0 | LONG - VDP VRAM Command for the layer
00000664                            ; --------------------------------------------
00000664                            
00000664                            Video_ClrLyr:
00000664 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
0000066A 303C 07FF                  		move.w	#$7FF,d0
0000066E                            @loop:
0000066E 33FC 0000 00C0 0000        		move.w	#0,(vdp_data)
00000676 51C8 FFF6                  		dbf	d0,@loop
0000067A 4E75                       		rts
0000067C                            	
0000067C                            ; --------------------------------------------
0000067C                            ; Video_ClrHScrl
0000067C                            ; --------------------------------------------
0000067C                            
0000067C                            Video_ClrHScrl:
0000067C 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
00000682 303C 00DF                  		move.w	#224-1,d0
00000686 6000                       		bra.s	VidClrScrl_loop
00000688                            
00000688                            ; --------------------------------------------
00000688                            ; Video_ClearScroll
00000688                            ; --------------------------------------------
00000688                            
00000688                            Video_ClearScroll:
00000688 61F2                       		bsr.s	Video_ClrHScrl
0000068A 41F9 FFFF E2C0             		lea	(RAM_ScrlVer),a0
00000690 6100                       		bsr.s	Video_ClrVScrl
00000692 41F9 FFFF E848             		lea	(RAM_HScrlVer),a0
00000698                            ; 		bsr.s	Video_ClrVScrl
00000698                            		
00000698                            ; --------------------------------------------
00000698                            ; Video_ClrVScrl
00000698                            ; 
00000698                            ; a0 - Vertical scroll data
00000698                            ; --------------------------------------------
00000698                            
00000698                            Video_ClrVScrl:
00000698 303C 001F                  		move.w	#$20-1,d0
0000069C                            VidClrScrl_loop:
0000069C 4298                       		clr.l	(a0)+
0000069E 51C8 FFFC                  		dbf	d0,VidClrScrl_loop
000006A2 4E75                       		rts
000006A4                            		
000006A4                            ; ------------------------------------
000006A4                            
000006A4                            reg_data:
000006A4 04                         		dc.b %00000100			; $80: [4] HInt interrupt OFF | [2] ALWAYS ON | [1] HV Counter OFF
000006A5 74                         		dc.b %01110100			; $81: [6] Display ON, [5] Vint interrupt ON, [4] DMA OFF, [3] V28 (V30 PAL ONLY) | [2] ALWAYS ON
000006A6 30                         		dc.b ($C000>>10)&%00111000	; $82: Plane A pattern table
000006A7 34                         		dc.b ($D000>>10)&%00111110	; $83:  WINDOW pattern table (%00111110 H32, %00111100 H40)
000006A8 07                         		dc.b ($E000>>13)&%00000111	; $84: Plane B pattern table
000006A9 7C                         		dc.b ($F800>>09)&%01111111	; $85:  Sprite attribute table (%01111111 H32, %01111110 H40)
000006AA 00                         		dc.b 0				; $86: NOTHING
000006AB 00                         		dc.b 0				; $87: BG Color
000006AC 00                         		dc.b 0				; $88: NOTHING
000006AD 00                         		dc.b 0				; $89: NOTHING
000006AE 00                         		dc.b 0				; $8A: HInt counter
000006AF 03                         		dc.b %00000011			; $8B: [3] External interrupt OFF | [2] Vscrl: full | [1|0] Hscrl: full
000006B0 81                         		dc.b %10000001			; $8C: [7+0] H40 | [3] Prio/Shadow | [2|1] Interlace mode: None
000006B1 3F                         		dc.b ($FC00>>10)&%00111111	; $8D: Hscroll attribute table
000006B2 00                         		dc.b 0				; $8E: NOTHING
000006B3 02                         		dc.b 2				; $8F: VDP Auto increment
000006B4 01                         		dc.b %00000001			; $90: Plane size [5|4] Y size | [1|0] X size
000006B6 00                         		even
000006B6                            
000006B6                            ; -------------------------------------------------
000006B6                            ; Subs
000006B6                            ; -------------------------------------------------
000006B6                            
000006B6                            Video_Update:
000006B6 41F9 FFFF ED10             		lea	(RAM_VidRegs),a0
000006BC 303C 8000                  		move.w	#$8000,d0
000006C0 7210                       		moveq	#17-1,d1
000006C2                            @reg_list:
000006C2 1018                       		move.b	(a0)+,d0
000006C4 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
000006CA 0640 0100                  		add.w	#$100,d0
000006CE 51C9 FFF2                  		dbf	d1,@reg_list
000006D2 4E75                       		rts
000006D4                            		
000006D4                            ; --------------------------------------------
000006D4                            ; VDP_SendData_W, VDP_SendData_L
000006D4                            ;
000006D4                            ; Input:
000006D4                            ; a0 - Data address
000006D4                            ;
000006D4                            ; d0 | VRAM Address
000006D4                            ; d1 | Data size
000006D4                            ; --------------------------------------------
000006D4                            
000006D4                            VDP_SendData_W:
000006D4 EB48                       		lsl.w	#5,d0
000006D6 6100 0000                  		bsr	VDP_VramToCmd
000006DA 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
000006E0                            @Loop:
000006E0 33D8 00C0 0000             		move.w	(a0)+,(vdp_data).l
000006E6 51C9 FFF8                  		dbf	d1,@Loop
000006EA 4E75                       		rts
000006EC                            
000006EC                            VDP_SendData_L:
000006EC EB48                       		lsl.w	#5,d0
000006EE 6100 0000                  		bsr	VDP_VramToCmd
000006F2 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
000006F8                            @Loop:
000006F8 23D8 00C0 0000             		move.l	(a0)+,(vdp_data).l
000006FE 51C9 FFF8                  		dbf	d1,@Loop
00000702 4E75                       		rts
00000704                            		
00000704                            ; -----------------------
00000704                            ; Uses: d4 (LONG)
00000704                            ;       d5 (WORD)
00000704                            ; -----------------------
00000704                            
00000704                            vdpshv_findvdppos:
00000704                            		;Check plane to use
00000704 4845                       		swap	d5
00000706 3A00                       		move.w	d0,d5
00000708 7000                       		moveq	#0,d0
0000070A 1039 FFFF ED12             		move.b	(RAM_VidRegs+2),d0
00000710 0805 0001                  		btst	#1,d5				;%10? (WD)
00000714 6700                       		beq.s	@FG
00000716 1039 FFFF ED13             		move.b	(RAM_VidRegs+3),d0
0000071C                            @FG:
0000071C E148                       		lsl.w	#8,d0
0000071E E548                       		lsl.w	#2,d0
00000720 0805 0000                  		btst	#0,d5				;%01? (BG)
00000724 6700                       		beq.s	@FGWD
00000726 7000                       		moveq	#0,d0
00000728 1039 FFFF ED14             		move.b	(RAM_VidRegs+4),d0
0000072E E148                       		lsl.w	#8,d0
00000730 EB48                       		lsl.w	#5,d0
00000732                            @FGWD:
00000732                            
00000732                            		;Start Y
00000732 7800                       		moveq	#0,d4
00000734 3801                          		move.w	d1,d4
00000736 ED8C                         		lsl.l	#6,d4
00000738 0805 0001                   		btst	#1,d5
0000073C 6700                        		beq.s	@def_fgbg
0000073E                             		
0000073E                             		;TODO: WD resolution check
0000073E                            ;    		move.b	(RAM_VidRegs+vdpReg_HMode),d5
0000073E                            ;    		and.w	#%10000001,d5
0000073E                            ;    		bne.s	@Not128
0000073E E38C                           		lsl.l	#1,d4
00000740 6000                       		bra.s	@Not128
00000742                            @def_fgbg:
00000742 0839 0000 FFFF ED20         		btst	#0,(RAM_VidRegs+$10)
0000074A 6700                        		beq.s	@Not40
0000074C E38C                         		lsl.l	#1,d4
0000074E                            @Not40:
0000074E 0839 0001 FFFF ED20         		btst	#1,(RAM_VidRegs+$10)
00000756 6700                        		beq.s	@Not128
00000758 E38C                           		lsl.l	#1,d4
0000075A                            @Not128:
0000075A D044                        		add.w	d4,d0			;+Y Start
0000075C 4841                       		swap	d1
0000075E E349                       		lsl.w	#1,d1
00000760 D041                       		add.w	d1,d0			;+X Start
00000762 4845                       		swap	d5
00000764                            		
00000764                            ; --------------------------------------------
00000764                            ; VDP_VramToCmd
00000764                            ;
00000764                            ; Input:
00000764                            ; d0 | WORD - VRAM to convert
00000764                            ;
00000764                            ; Output:
00000764                            ; d0 | LONG - VDP Command (Write mode)
00000764                            ; --------------------------------------------
00000764                            
00000764                            VDP_VramToCmd:
00000764 0C40 4000                  		cmp.w	#$4000,d0
00000768 6500                       		bcs.s	@NoBank
0000076A 4840                       		swap	d0
0000076C 303C 0001                  		move.w	#1,d0
00000770 4840                       		swap	d0
00000772 0C40 8000                  		cmp.w	#$8000,d0
00000776 6500                       		bcs.s	@NoBank	
00000778 4840                       		swap	d0
0000077A 303C 0002                  		move.w	#2,d0
0000077E 4840                       		swap	d0
00000780 0C40 C000                  		cmp.w	#$C000,d0
00000784 6500                       		bcs.s	@NoBank	
00000786 4840                       		swap	d0
00000788 303C 0003                  		move.w	#3,d0
0000078C 4840                       		swap	d0
0000078E                            @NoBank:
0000078E 0240 3FFF                    		and.w	#$3FFF,d0
00000792 0040 4000                    		or.w	#$4000,d0
00000796 4840                          		swap	d0
00000798 4E75                       		rts
0000079A                            		
0000079A                            ; --------------------------------------------
0000079A                            ; VDP_LoadMaps
0000079A                            ; 
0000079A                            ; Input:
0000079A                            ; a0 - Pattern data
0000079A                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
0000079A                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
0000079A                            ; d2 | LONG - Value
0000079A                            ; d3 | WORD - VRAM (ASCII start)
0000079A                            ; d4 | WORD - Type:
0000079A                            ;             00 Byte | 01 Word | 02 Long HEX
0000079A                            ;             04 Byte | 05 Word | 06 Long DEC
0000079A                            ;             08 Byte | 09 Word | 0A Long DEC
0000079A                            ; Uses:
0000079A                            ; d4-d6
0000079A                            ; 
0000079A                            ; NOTE: clear d2 FIRST and then set the value
0000079A                            ; --------------------------------------------
0000079A                            
0000079A                            Video_PrintVal:
0000079A 0244 0007                  		and.w	#%111,d4
0000079E 0804 0002                  		btst	#2,d4
000007A2 6700                       		beq.s	@hexy
000007A4 6100 0000                  		bsr	HexToDec
000007A8                            @hexy:
000007A8 3A04                       		move.w	d4,d5
000007AA 6100 FF58                  		bsr	vdpshv_findvdppos
000007AE 3805                       		move.w	d5,d4
000007B0                            		
000007B0 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
000007B6 0643 0030                  		add.w	#"0",d3
000007BA                            		
000007BA 7A07                          		moveq	#(8)-1,d5
000007BC 0804 0001                  		btst	#1,d4
000007C0 6600                       		bne.s	@setit
000007C2 7A03                          		moveq	#(4)-1,d5
000007C4 4842                        		swap	d2
000007C6 1004                          		move.b	d4,d0
000007C8 0200 0003                     		and.b	#%11,d0
000007CC 4A00                        		tst.b	d0
000007CE 6600                        		bne.s	@setit
000007D0 7A01                        		moveq	#(2)-1,d5
000007D2 E19A                        		rol.l	#8,d2
000007D4                            @setit:
000007D4 0804 0002                  		btst	#2,d4
000007D8 6700                       		beq.s	@next
000007DA 0804 0001                  		btst	#1,d4
000007DE 6600                       		bne.s	@next
000007E0 E89A                       		ror.l	#4,d2
000007E2 0645 0001                  		add.w	#1,d5
000007E6                            @next:
000007E6 E99A                        		rol.l	#4,d2
000007E8 3002                       		move.w	d2,d0
000007EA 0240 000F                  		and.w	#$F,d0
000007EE 0C40 000A                  		cmp.w	#$A,d0
000007F2 6500                       		bcs.s	@lessF
000007F4 0640 0007                  		add.w	#7,d0
000007F8                            @lessF
000007F8 D043                       		add.w	d3,d0
000007FA 33C0 00C0 0000             		move.w	d0,(vdp_data)
00000800 51CD FFE4                  		dbf	d5,@next
00000804 4E75                       		rts
00000806                            
00000806                            ; --------------------------------------------
00000806                            ; Video_MakeMap
00000806                            ; 
00000806                            ; Input:
00000806                            ; a0 - Pattern data
00000806                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
00000806                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
00000806                            ; d2 | LONG - XSize (WORD) | YSize (WORD)
00000806                            ; d3 | WORD - VRAM
00000806                            ; 
00000806                            ; Uses:
00000806                            ; d4-d6
00000806                            ; --------------------------------------------
00000806                            
00000806                            Video_MakeMap:
00000806                            		;Check plane to use
00000806 6100 FEFC                  		bsr	vdpshv_findvdppos
0000080A                            		
0000080A 283C 0040 0000             		move.l	#$400000,d4
00000810 0839 0000 FFFF ED20        		btst	#0,(RAM_VidRegs+$10)
00000818 6700                       		beq.s	@JpNot40
0000081A E38C                        		lsl.l	#1,d4
0000081C                            @JpNot40:
0000081C 0839 0001 FFFF ED20        		btst	#1,(RAM_VidRegs+$10)
00000824 6700                       		beq.s	@Y_Loop
00000826 E38C                            		lsl.l	#1,d4
00000828                                 		
00000828                            @Y_Loop:
00000828 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l		; Set VDP location from d0
0000082E 4842                       		swap	d2
00000830 3A02                       		move.w	d2,d5	  		; Move X-pos value to d3
00000832 4842                       		swap	d2
00000834                            @X_Loop:
00000834 3C18                       		move.w	(a0)+,d6
00000836 DC43                                       add.w	d3,d6
00000838 4845                                       swap	d5
0000083A 1A39 FFFF ED1C                             move.b	(RAM_VidRegs+$C),d5
00000840 0245 0006                                  and.w	#%110,d5
00000844 6700                                       beq.s	@normal
00000846 E24E                                       lsr.w	#1,d6
00000848                            @normal:
00000848 4845                                       swap	d5
0000084A 33C6 00C0 0000                             move.w	d6,(vdp_data)		; Put data
00000850 51CD FFE2                  		dbf	d5,@X_Loop		; X-pos loop (from d1 to d3)
00000854 D084                       		add.l	d4,d0                   ; Next line
00000856 51CA FFD0                  		dbf	d2,@Y_Loop		; Y-pos loop
0000085A 4E75                       		rts
0000085C                            
0000085C                            ; --------------------------------------------
0000085C                            ; Video_PrintText
0000085C                            ;
0000085C                            ; Input:
0000085C                            ; a0 - String
0000085C                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
0000085C                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
0000085C                            ; d2 | VRAM
0000085C                            ; 
0000085C                            ; Uses:
0000085C                            ; d3-d4
0000085C                            ; --------------------------------------------
0000085C                            
0000085C                            Video_PrintText:
0000085C                            		;Check plane to use
0000085C 3A00                       		move.w	d0,d5
0000085E 6100 FEA4                  		bsr	vdpshv_findvdppos
00000862                            		
00000862 283C 0080 0000              		move.l	#$800000,d4
00000868                            ;  		cmp.w	#2,d5
00000868                            ;  		bne.s	@NotWindow
00000868                            ; 		
00000868                            ;  		tst.b	(RAM_VidRegs+$C)
00000868                            ;  		beq.s	@Reset
00000868                            ;  		lsl.l	#1,d4
00000868                            ; 		bra.s	@Reset
00000868                            ; 		
00000868                            ; @NotWindow:
00000868                            ; 		btst	#0,(RAM_VidRegs+$10)
00000868                            ; 		beq.s	@JpNot40
00000868                            ;  		lsl.l	#1,d4
00000868                            ; @JpNot40:
00000868                            ; 		btst	#1,(RAM_VidRegs+$10)
00000868                            ; 		beq.s	@Space
00000868                            ;      		lsl.l	#1,d4
00000868                                 		
00000868                            @Reset:
00000868 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l
0000086E                            @Next:
0000086E 7600                       		moveq	#0,d3
00000870 1618                       		move.b	(a0)+,d3
00000872 0C03 000A                  		cmp.b	#$A,d3
00000876 6700                       		beq.s	@Space
00000878 4A03                       		tst.b	d3
0000087A 6600                       		bne.s	@Char
0000087C 4E75                       		rts
0000087E                            @Char:
0000087E D642                       		add.w	d2,d3
00000880 33C3 00C0 0000             		move.w	d3,(vdp_data).l
00000886 60E6                       		bra.s	@Next
00000888                            @Space:
00000888 D084                       		add.l	d4,d0                   ; Next line
0000088A 60DC                       		bra.s	@Reset
0000088C                            @Exit:
0000088C 4E75                       		rts
0000088E                            		
0000088E                            ; --------------------------------------------
0000088E                            ; Video_VSync
0000088E                            ; 
0000088E                            ; Wait VBlank
0000088E                            ; --------------------------------------------
0000088E                            
0000088E                            Video_VSync:
0000088E 08F9 0000 0000 0000         		bset	#0,(RAM_IntFlags)
00000896                            @vint:
00000896 0839 0000 0000 0000        		btst	#0,(RAM_IntFlags)
0000089E 66F6                       		bne.s	@vint
000008A0 4E75                       		rts
000008A2                            
000008A2                            ; ====================================================================
000008A2                            ; ---------------------------------------------
000008A2                            ; Palette fading
000008A2                            ; ---------------------------------------------
000008A2                            
000008A2                            PalFade_Upd:
000008A2 4DF9 FFFF EAD0             		lea	(RAM_PalFadeSys),a6
000008A8 7C03                        		moveq	#4-1,d6
000008AA                            @NextPalReq:
000008AA 4A96                       		tst.l	(a6)
000008AC 6700                       		beq.s	@Unused
000008AE 4BF9 FFFF E8D0              		lea	(RAM_Palette),a5
000008B4 49F9 FFFF E9D0              		lea	(RAM_PalFade),a4
000008BA 6100 0000                    		bsr	@Active
000008BE                            @Unused:
000008BE DCFC 0008                   		adda	#8,a6
000008C2 51CE FFE6                   		dbf	d6,@NextPalReq
000008C6                            		
000008C6 7C03                       		moveq	#4-1,d6
000008C8                            @NextHPalReq:
000008C8 4A96                       		tst.l	(a6)
000008CA 6700                       		beq.s	@UnusedH
000008CC 4BF9 FFFF E950             		lea	(RAM_HPalette),a5
000008D2 49F9 FFFF EA50             		lea	(RAM_HPalFade),a4
000008D8 6100 0000                  		bsr	@Active
000008DC                            @UnusedH:
000008DC DCFC 0008                  		adda	#8,a6
000008E0 51CE FFE6                  		dbf	d6,@NextHPalReq
000008E4 4E75                       		rts
000008E6                            		
000008E6                            ; ---------------------------------
000008E6                            ; Active palette
000008E6                            ; ---------------------------------
000008E6                            
000008E6                            @Active:
000008E6 7000                       		moveq	#0,d0
000008E8 102E 0000                  		move.b	palFd_mode(a6),d0
000008EC D040                       		add.w	d0,d0
000008EE 323B 0000                  		move.w	@list(pc,d0.w),d1
000008F2 4EFB 1000                  		jmp	@list(pc,d1.w)
000008F6                            		
000008F6                            ; ---------------------------------
000008F6                            
000008F6                            @list:
000008F6 0000                       		dc.w fadeSet_Return-@list
000008F8 0000                       		dc.w fadeSet_in_timer-@list
000008FA 0000                       		dc.w fadeSet_out_timer-@list
000008FC 0000                       		dc.w fadeSet_in_single-@list
000008FE 0000                        		dc.w fadeSet_out_single-@list		
00000900                            		
00000900                            ; ---------------------------------
00000900                            
00000900                            fadeSet_in_timer:
00000900 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00000906 6A00 0000                  		bpl	fadeSet_Return
0000090A 7800                       		moveq	#0,d4
0000090C 7A00                       		moveq	#0,d5
0000090E 182E 0001                  		move.b 	palFd_delay(a6),d4
00000912 3D44 0004                  		move.w	d4,palFd_timer(a6)
00000916 182E 0003                  		move.b 	palFd_num(a6),d4
0000091A                            @next_in:
0000091A 3015                        		move.w	(a5),d0
0000091C 3214                        		move.w	(a4),d1
0000091E 3400                       		move.w	d0,d2
00000920 3601                        		move.w	d1,d3
00000922 0242 000E                   		and.w	#$00E,d2
00000926 0243 000E                   		and.w	#$00E,d3
0000092A B642                        		cmp.w	d2,d3
0000092C 6700                        		beq.s	@goodin_b
0000092E 0642 0002                  		add.w	#2,d2
00000932                            @goodin_b:
00000932 0240 0EE0                  		and.w	#$EE0,d0
00000936 8042                        		or.w	d2,d0
00000938                            		
00000938 3400                       		move.w	d0,d2
0000093A 3601                        		move.w	d1,d3
0000093C 0242 00E0                   		and.w	#$0E0,d2
00000940 0243 00E0                   		and.w	#$0E0,d3
00000944 B642                        		cmp.w	d2,d3
00000946 6700                        		beq.s	@goodin_g
00000948 0642 0020                  		add.w	#$020,d2
0000094C                            @goodin_g:
0000094C 0240 0E0E                  		and.w	#$E0E,d0
00000950 8042                        		or.w	d2,d0
00000952                              		
00000952 3400                       		move.w	d0,d2
00000954 3601                        		move.w	d1,d3
00000956 0242 0E00                   		and.w	#$E00,d2
0000095A 0243 0E00                   		and.w	#$E00,d3
0000095E B642                        		cmp.w	d2,d3
00000960 6700                        		beq.s	@goodin_r
00000962 0642 0200                  		add.w	#$200,d2
00000966                            @goodin_r:
00000966 0240 00EE                  		and.w	#$0EE,d0
0000096A 8042                        		or.w	d2,d0
0000096C                             		
0000096C 3AC0                        		move.w	d0,(a5)+
0000096E B05C                        		cmp.w	(a4)+,d0
00000970 6600                        		bne.s	@nonz_fdin
00000972 0645 0001                   		add.w	#1,d5
00000976                            @nonz_fdin:
00000976 51CC FFA2                  		dbf	d4,@next_in
0000097A                            		
0000097A 0445 0001                  		sub.w	#1,d5
0000097E BA2E 0003                  		cmp.b	palFd_num(a6),d5
00000982 6600                       		bne.s	fadeSet_Return
00000984 4296                       		clr.l	(a6)
00000986                            fadeSet_Return:
00000986 4E75                       		rts
00000988                            		
00000988                            ; ---------------------------------
00000988                            
00000988                            fadeSet_out_timer:
00000988 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
0000098E 6AF6                       		bpl.s	fadeSet_Return
00000990 7400                       		moveq	#0,d2
00000992 7600                       		moveq	#0,d3
00000994 142E 0001                  		move.b 	palFd_delay(a6),d2
00000998 3D42 0004                  		move.w	d2,palFd_timer(a6)
0000099C 142E 0003                  		move.b 	palFd_num(a6),d2
000009A0                            @setcol:
000009A0 3015                       		move.w	(a5),d0
000009A2 3200                       		move.w	d0,d1
000009A4 0241 000E                  		and.w	#$00E,d1
000009A8 6700                       		beq.s	@good_b
000009AA 0441 0002                  		sub.w	#2,d1
000009AE                            @good_b:
000009AE 0240 0EE0                  		and.w	#$EE0,d0
000009B2 8041                       		or.w	d1,d0
000009B4                            		
000009B4 3200                       		move.w	d0,d1
000009B6 0241 00E0                  		and.w	#$0E0,d1
000009BA 6700                       		beq.s	@good_g
000009BC 0441 0020                  		sub.w	#$020,d1
000009C0                            @good_g:
000009C0 0240 0E0E                  		and.w	#$E0E,d0
000009C4 8041                       		or.w	d1,d0
000009C6 3200                       		move.w	d0,d1
000009C8 0241 0E00                  		and.w	#$E00,d1
000009CC 6700                       		beq.s	@good_r
000009CE 0441 0200                  		sub.w	#$200,d1
000009D2                            @good_r:
000009D2 0240 00EE                  		and.w	#$0EE,d0
000009D6 8041                       		or.w	d1,d0
000009D8 3AC0                       		move.w	d0,(a5)+
000009DA 4A40                       		tst.w	d0
000009DC 6600                       		bne.s	@nonzero
000009DE 0643 0001                  		add.w	#1,d3
000009E2                            @nonzero:
000009E2 51CA FFBC                  		dbf	d2,@setcol
000009E6                            		
000009E6 0443 0001                  		sub.w	#1,d3
000009EA B62E 0003                  		cmp.b	palFd_num(a6),d3
000009EE 6696                       		bne.s	fadeSet_Return
000009F0 4296                       		clr.l	(a6)
000009F2 4E75                       		rts
000009F4                            		
000009F4                            ; ---------------------------------
000009F4                            ; fadeSet_in_single
000009F4                            ; 
000009F4                            ; palFd_delay:
000009F4                            ; RGBTTTTT - RGB increment bits
000009F4                            ;            TTTTT timer
000009F4                            ; ---------------------------------
000009F4                            
000009F4                            fadeSet_in_single:
000009F4 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
000009FA 6A00 FF8A                  		bpl	fadeSet_Return
000009FE                            
000009FE 7A00                       		moveq	#0,d5
00000A00 1A2E 0002                  		move.b	palFd_from(a6),d5
00000A04 E34D                       		lsl.w	#1,d5
00000A06 DAC5                       		adda	d5,a5
00000A08 162E 0001                  		move.b 	palFd_delay(a6),d3
00000A0C 0243 00E0                  		and.w	#$E0,d3
00000A10 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
00000A16                            		
00000A16 7800                       		moveq	#0,d4
00000A18 182E 0003                  		move.b 	palFd_num(a6),d4
00000A1C                            @next_in:
00000A1C 3015                        		move.w	(a5),d0
00000A1E 3400                       		move.w	d0,d2
00000A20 0242 000E                   		and.w	#$00E,d2
00000A24 0803 0005                  		btst	#5,d3
00000A28 6700                       		beq.s	@goodin_b
00000A2A 0C42 000E                   		cmp.w	#$00E,d2
00000A2E 6C00                        		bge.s	@goodin_b
00000A30 0642 0002                  		add.w	#2,d2
00000A34                            @goodin_b:
00000A34 0240 0EE0                  		and.w	#$EE0,d0
00000A38 8042                        		or.w	d2,d0
00000A3A                            
00000A3A 3400                       		move.w	d0,d2
00000A3C 0242 00E0                   		and.w	#$0E0,d2
00000A40 0803 0006                  		btst	#6,d3
00000A44 6700                       		beq.s	@goodin_g
00000A46 0C42 00E0                   		cmp.w	#$0E0,d2
00000A4A 6C00                        		bge.s	@goodin_g
00000A4C 0642 0020                  		add.w	#$020,d2
00000A50                            @goodin_g:
00000A50 0240 0E0E                  		and.w	#$E0E,d0
00000A54 8042                        		or.w	d2,d0
00000A56                            
00000A56 3400                       		move.w	d0,d2
00000A58 0242 0E00                   		and.w	#$E00,d2
00000A5C 0803 0007                  		btst	#7,d3
00000A60 6700                       		beq.s	@goodin_r
00000A62 0C42 0E00                   		cmp.w	#$E00,d2
00000A66 6C00                        		bge.s	@goodin_r
00000A68 0642 0200                  		add.w	#$200,d2
00000A6C                            @goodin_r:
00000A6C 0240 00EE                  		and.w	#$0EE,d0
00000A70 8042                        		or.w	d2,d0
00000A72                            
00000A72 3AC0                        		move.w	d0,(a5)+
00000A74 51CC FFA6                  		dbf	d4,@next_in
00000A78                            		
00000A78 102E 0001                  		move.b	palFd_delay(a6),d0
00000A7C 0240 001F                  		and.w	#$1F,d0
00000A80 0440 0001                  		sub.w	#1,d0
00000A84 6A00                       		bpl.s	fadeSet_Return_2
00000A86                            		
00000A86                            ; 		sub.w	#1,d5
00000A86                            ; 		cmp.b	palFd_num(a6),d5
00000A86                            ; 		bne.s	fadeSet_Return
00000A86 4296                       		clr.l	(a6)
00000A88 42AE 0004                  		clr.l	4(a6)
00000A8C                            		
00000A8C                            fadeSet_Return_2:
00000A8C 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
00000A92 812E 0001                  		or.b	d0,palFd_delay(a6)
00000A96 4E75                       		rts
00000A98                            		
00000A98                            ; ---------------------------------
00000A98                            ; fadeSet_out_single
00000A98                            ; 
00000A98                            ; palFd_delay:
00000A98                            ; RGBTTTTT - RGB increment bits
00000A98                            ;            TTTTT timer
00000A98                            ; ---------------------------------
00000A98                            
00000A98                            fadeSet_out_single:
00000A98 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00000A9E 6A00 FEE6                  		bpl	fadeSet_Return
00000AA2                            
00000AA2 7A00                       		moveq	#0,d5
00000AA4 1A2E 0002                  		move.b	palFd_from(a6),d5
00000AA8 E34D                       		lsl.w	#1,d5
00000AAA DAC5                       		adda	d5,a5
00000AAC 162E 0001                  		move.b 	palFd_delay(a6),d3
00000AB0 0243 00E0                  		and.w	#$E0,d3
00000AB4 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
00000ABA                            		
00000ABA 7800                       		moveq	#0,d4
00000ABC 182E 0003                  		move.b 	palFd_num(a6),d4
00000AC0                            @next_in:
00000AC0 3015                        		move.w	(a5),d0
00000AC2 3400                       		move.w	d0,d2
00000AC4 0242 000E                   		and.w	#$00E,d2
00000AC8 0803 0005                  		btst	#5,d3
00000ACC 6700                       		beq.s	@goodin_b
00000ACE                            ;  		tst.w	d2
00000ACE                            ;  		beq.s	@goodin_b
00000ACE 0442 0002                  		sub.w	#2,d2
00000AD2                            @goodin_b:
00000AD2 0240 0EE0                  		and.w	#$EE0,d0
00000AD6 8042                        		or.w	d2,d0
00000AD8                            
00000AD8 3400                       		move.w	d0,d2
00000ADA 0242 00E0                   		and.w	#$0E0,d2
00000ADE 0803 0006                  		btst	#6,d3
00000AE2 6700                       		beq.s	@goodin_g
00000AE4                            ;  		tst.w	d2
00000AE4                            ;  		beq.s	@goodin_g
00000AE4 0442 0020                  		sub.w	#$020,d2
00000AE8                            @goodin_g:
00000AE8 0240 0E0E                  		and.w	#$E0E,d0
00000AEC 8042                        		or.w	d2,d0
00000AEE                            
00000AEE 3400                       		move.w	d0,d2
00000AF0 0242 0E00                   		and.w	#$E00,d2
00000AF4 0803 0007                  		btst	#7,d3
00000AF8 6700                       		beq.s	@goodin_r
00000AFA                            ;  		tst.w	d2
00000AFA                            ;  		beq.s	@goodin_r
00000AFA 0442 0200                  		sub.w	#$200,d2
00000AFE                            @goodin_r:
00000AFE 0240 00EE                  		and.w	#$0EE,d0
00000B02 8042                        		or.w	d2,d0
00000B04                            
00000B04 3AC0                        		move.w	d0,(a5)+
00000B06 51CC FFB8                  		dbf	d4,@next_in
00000B0A                            		
00000B0A 102E 0001                  		move.b	palFd_delay(a6),d0
00000B0E 0240 001F                  		and.w	#$1F,d0
00000B12 0440 0001                  		sub.w	#1,d0
00000B16 6A00                       		bpl.s	@fadeSet_Return_2
00000B18                            		
00000B18                            ; 		sub.w	#1,d5
00000B18                            ; 		cmp.b	palFd_num(a6),d5
00000B18                            ; 		bne.s	fadeSet_Return
00000B18 4296                       		clr.l	(a6)
00000B1A 42AE 0004                  		clr.l	4(a6)
00000B1E                            		
00000B1E                            @fadeSet_Return_2:
00000B1E 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
00000B24 812E 0001                  		or.b	d0,palFd_delay(a6)
00000B28 4E75                       		rts
00000B2A                            		
00000B2A                            ; --------------------------------------------
00000B2A                            ; PalFade_Set
00000B2A                            ; --------------------------------------------
00000B2A                            
00000B2A                            PalFade_Set:
00000B2A 4E75                       		rts
00000B2C                            		
00000B2C                            ; ====================================================================
00000B2C                            ; ---------------------------------------------
00000B2C                            ; DMA
00000B2C                            ; ---------------------------------------------
00000B2C                            
00000B2C                            ; ROM data
00000B2C                            ; Size
00000B2C                            ; VRAM Destiantion
00000B2C                            
00000B2C                            DMA_Read:
00000B2C 4DF9 FFFF EB10              		lea	(RAM_DMA_Buffer),a6
00000B32                            ;  		move.w	#64,d3
00000B32 381E                         		move.w	(a6)+,d4
00000B34                            ;   		sub.w	d4,d3
00000B34                            ;   		bmi	@FinishList
00000B34 4A44                         		tst.w	d4
00000B36 6700 0000                    		beq	@FinishList
00000B3A 0444 0001                    		sub.w	#1,d4
00000B3E                            ; 		dma 	on
00000B3E                            @NextEntry:
00000B3E 2A1E                       		move.l	(a6)+,d5
00000B40                             		
00000B40 E28D                         		lsr.l	#1,d5
00000B42 2C3C 9600 9500              		move.l	#$96009500,d6
00000B48 1C05                        		move.b	d5,d6
00000B4A E08D                        		lsr.l	#8,d5
00000B4C 4846                        		swap	d6
00000B4E 1C05                        		move.b	d5,d6
00000B50 23C6 00C0 0004              		move.l	d6,(vdp_ctrl)
00000B56 3C3C 9700                   		move.w	#$9700,d6
00000B5A E08D                        		lsr.l	#8,d5
00000B5C 1C05                        		move.b	d5,d6
00000B5E 33C6 00C0 0004              		move.w	d6,(vdp_ctrl)
00000B64                             		
00000B64 2C3C 9400 9300               		move.l	#$94009300,d6		;Size
00000B6A 3A1E                         		move.w	(a6)+,d5
00000B6C 1C05                         		move.b	d5,d6
00000B6E 4846                        		swap	d6
00000B70 E04D                         		lsr.w	#8,d5
00000B72 1C05                         		move.b	d5,d6
00000B74 23C6 00C0 0004               		move.l	d6,(vdp_ctrl)
00000B7A                             		
00000B7A 3A1E                        		move.w	(a6)+,d5
00000B7C EB4D                        		lsl.w	#5,d5
00000B7E 3C05                        		move.w	d5,d6
00000B80 0245 3FFF                   		and.w	#$3FFF,d5
00000B84 0045 4000                   		or.w	#$4000,d5
00000B88 E04E                        		lsr.w	#8,d6
00000B8A EC4E                        		lsr.w	#6,d6
00000B8C 0246 0003                   		and.w	#%11,d6
00000B90 0046 0080                   		or.w	#$80,d6
00000B94 3F06                        		move.w	d6,-(sp)
00000B96 3F05                        		move.w	d5,-(sp)	
00000B98 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
00000B9E 33FC 0100 00A1 1100         		move.w	#$100,($A11100).l
00000BA6                            @hold_on:
00000BA6 0839 0000 00A1 1100         		btst	#0,($A11100).l
00000BAE 66F6                         		bne.s	@hold_on
00000BB0                              		
00000BB0 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
00000BB6 33FC 0000 00A1 1100          		move.w	#0,($A11100).l
00000BBE                               		
00000BBE 51CC FF7E                   		dbf	d4,@NextEntry
00000BC2                             		
00000BC2                            @FinishList:
00000BC2 4279 FFFF EB10             		clr.w	(RAM_DMA_Buffer)
00000BC8 4E75                        		rts
00000BCA                            
00000BCA                            @ResetAllList:
00000BCA 4E75                       		rts
00000BCC                            		
00000BCC                            ; -----------------------------------
00000BCC                            ; Set new entry to the list
00000BCC                            ; 
00000BCC                            ; Input:
00000BCC                            ; d0 - ROM Address
00000BCC                            ; d1 - Size
00000BCC                            ; d2 - VRAM
00000BCC                            ; 
00000BCC                            ; Uses:
00000BCC                            ; a2/d3
00000BCC                            ; -----------------------------------
00000BCC                            
00000BCC                            DMA_Set:
00000BCC 45F9 FFFF EB10             		lea	(RAM_DMA_Buffer),a2
00000BD2 0C52 0040                  		cmp.w	#64,(a2)
00000BD6 6C00                       		bge.s	@Return
00000BD8 3612                       		move.w	(a2),d3
00000BDA E74B                       		lsl.w	#3,d3			;Size: 8
00000BDC D4C3                       		adda 	d3,a2
00000BDE D4FC 0002                  		adda	#2,a2
00000BE2                            		
00000BE2 24C0                       		move.l	d0,(a2)+		;ROM Address
00000BE4 34C1                       		move.w	d1,(a2)+
00000BE6 34C2                       		move.w	d2,(a2)+
00000BE8 0679 0001 FFFF EB10        		add.w	#1,(RAM_DMA_Buffer)
00000BF0                            @Return:
00000BF0 4E75                       		rts
00000BF2                            		
00000BF2                            ; ====================================================================
00000BF2                            ; ---------------------------------------------
00000BF2                            ; Sprites system
00000BF2                            ; ---------------------------------------------
00000BF2                            
00000BF2                            ; ---------------------------------------------
00000BF2                            ; Sprites_Reset
00000BF2                            ; ---------------------------------------------
00000BF2                            
00000BF2                            Sprites_Clear:
00000BF2                            ;  		lea	(RAM_Sprites),a6
00000BF2                            ;  		move.w	#$4F,d6
00000BF2                            ; @clrit:
00000BF2 42B9 FFFF E340               		clr.l	(RAM_Sprites)
00000BF8 42B9 FFFF E344               		clr.l	(RAM_Sprites+4)
00000BFE 4E75                       		rts
00000C00                            		
00000C00                            ; ---------------------------------------------
00000C00                            ; Sprites_Reset
00000C00                            ; ---------------------------------------------
00000C00                            
00000C00                            Sprites_Reset:
00000C00 4DF9 FFFF E5C0             		lea	(RAM_SprControl),a6
00000C06 2A6E 0000                  		movea.l	sprite_free(a6),a5
00000C0A BAFC E340                  		cmpa	#((RAM_Sprites)&$FFFF),a5
00000C0E 6D00                       		blt.s	@Full
00000C10                            @NextEntry:
00000C10 BAFC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
00000C14 6E00                        		bgt.s	@Full
00000C16 429D                        		clr.l	(a5)+
00000C18 429D                         		clr.l	(a5)+
00000C1A BAFC E5C0                    		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
00000C1E 6DF0                         		blt.s	@NextEntry
00000C20                            @Full:
00000C20 2D7C FFFF E340 0000        		move.l	#RAM_Sprites,sprite_free(a6)
00000C28 3D7C 0001 0004             		move.w	#1,sprite_link(a6)
00000C2E                            @Return:
00000C2E 4E75                       		rts
00000C2E 4E75                       		rts
00000C30                            		include	"system/misc.asm"
00000C30                            ; ====================================================================
00000C30                            ; System
00000C30                            ; ====================================================================
00000C30                            
00000C30                            ; ====================================================================
00000C30                            ; -------------------------------------------------
00000C30                            ; RAM
00000C30                            ; -------------------------------------------------
00000C30                            
00000C30                                            rsset	RAM_System
00000C30 =FFFFDE00                  RAM_HintJumpTo	rs.w	1				; DONT
00000C30 =FFFFDE02                  RAM_HintAddr	rs.l	1				; SEPARATE
00000C30 =FFFFDE06                  RAM_VIntJumpTo	rs.w	1				; THESE
00000C30 =FFFFDE08                  RAM_VintAddr	rs.l	1				; ONES
00000C30 =FFFFDE0C                  RAM_VIntRegs	rs.l	16
00000C30 =FFFFDE4C                  RAM_ModeReset	rs.w	1
00000C30 =FFFFDE4E                  RAM_IntFlags	rs.b	1
00000C30 =FFFFDE4F                  RAM_GameMode	rs.b	1
00000C30                            
00000C30 =FFFFDE50                  sizeof_sys	rs.l	0
00000C30                            ; 		inform 0,"system ram: %h",(sizeof_sys-RAM_System)
00000C30                             				
00000C30                            ; ====================================================================
00000C30                            ; -------------------------------------------------
00000C30                            ; Variables
00000C30                            ; -------------------------------------------------
00000C30                            
00000C30                            ; --------------------------------------------
00000C30                            				
00000C30                            ; ====================================================================
00000C30                            ; -------------------------------------------------
00000C30                            ; Macros
00000C30                            ; -------------------------------------------------
00000C30                            
00000C30                            ; --------------------------------------------
00000C30                            
00000C30                            ; ====================================================================
00000C30                            ; -------------------------------------------------
00000C30                            ; Subs
00000C30                            ; -------------------------------------------------
00000C30                            
00000C30                            System_init:
00000C30 41F9 FFFF BC00             		lea	(RAM_ModeBuffer),a0
00000C36 303C 0BFF                  		move.w	#($1800/2)-1,d0
00000C3A                            @clear_buff:
00000C3A 4258                       		clr.w	(a0)+
00000C3C 51C8 FFFC                  		dbf	d0,@clear_buff
00000C40                            		
00000C40 23FC 0000 0000 FFFF DE08   		move.l	#MD_Vint,(RAM_VIntAddr)
00000C4A 23FC 0000 0000 FFFF DE02   		move.l	#MD_Hint,(RAM_HIntAddr)
00000C54 303C 4EF9                  		move.w	#$4EF9,d0
00000C58 33C0 FFFF DE06              		move.w	d0,(RAM_VIntJumpTo)
00000C5E 33C0 FFFF DE00             		move.w	d0,(RAM_HIntJumpTo)
00000C64                            		
00000C64 4239 FFFF DE4F              		clr.b	(RAM_GameMode)
00000C6A 4E75                       		rts
00000C6C                            		
00000C6C                            ; ---------------------------------------------
00000C6C                            ; SRAM
00000C6C                            ; ---------------------------------------------
00000C6C                            
00000C6C                            SRAM_Init:
00000C6C 13FC 0003 00A1 30F1        		move.b	#%11,($A130F1)		;read+write
00000C74 41F9 0020 0000             		lea	($200000),a0
00000C7A 0108 0001                  		movep.w	1(a0),d0
00000C7E 0C80 0000 4745             		cmp.l	#"GE",d0
00000C84 6700                       		beq.s	@exit
00000C86 43FA 0000                  		lea	@SramHead(pc),a1
00000C8A 7006                       		moveq	#7-1,d0
00000C8C                            @header:
00000C8C 1019                       		move.b	(a1)+,d0
00000C8E 1140 0001                  		move.b	d0,1(a0)
00000C92 D0FC 0002                  		adda	#2,a0
00000C96 51C8 FFF4                  		dbf	d0,@header
00000C9A                            @exit:
00000C9A 13FC 0000 00A1 30F1        		move.b	#0,($A130F1)
00000CA2 4E75                       		rts
00000CA4                            
00000CA4                            ; ---------------------------------------------
00000CA4                            
00000CA4 4745 4E59 5341 5645 00     @SramHead:	dc.b "GENYSAVE",0
00000CAE 00                         		even
00000CAE                            		
00000CAE                            ; ---------------------------------------------
00000CAE                            ; CalcSine
00000CAE                            ;
00000CAE                            ; Input:
00000CAE                            ; d0 | WORD
00000CAE                            ;
00000CAE                            ; Output:
00000CAE                            ; d0 | WORD
00000CAE                            ; d1 | WORD
00000CAE                            ; ---------------------------------------------
00000CAE                            
00000CAE                            CalcSine:
00000CAE 0240 00FF                  		and.w	#$FF,d0
00000CB2 D040                       		add.w	d0,d0
00000CB4 0640 0080                  		add.w	#$80,d0
00000CB8 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00000CBC 0440 0080                  		sub.w	#$80,d0
00000CC0 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00000CC4 4E75                       		rts	
00000CC6                            
00000CC6                            Sine_Data:
00000CC6 0000 0006 000C 0012 0019+  		dc.w 0,	6, $C, $12, $19, $1F, $25, $2B,	$31, $38, $3E
00000CDC 0044 004A 0050 0056 005C+  		dc.w $44, $4A, $50, $56, $5C, $61, $67,	$6D, $73, $78
00000CF0 007E 0083 0088 008E 0093+  		dc.w $7E, $83, $88, $8E, $93, $98, $9D,	$A2, $A7, $AB
00000D04 00B0 00B5 00B9 00BD 00C1+  		dc.w $B0, $B5, $B9, $BD, $C1, $C5, $C9,	$CD, $D1, $D4
00000D18 00D8 00DB 00DE 00E1 00E4+  		dc.w $D8, $DB, $DE, $E1, $E4, $E7, $EA,	$EC, $EE, $F1
00000D2C 00F3 00F4 00F6 00F8 00F9+  		dc.w $F3, $F4, $F6, $F8, $F9, $FB, $FC,	$FD, $FE, $FE
00000D40 00FF 00FF 00FF 0100 00FF+  		dc.w $FF, $FF, $FF, $100, $FF, $FF, $FF, $FE, $FE, $FD
00000D54 00FC 00FB 00F9 00F8 00F6+  		dc.w $FC, $FB, $F9, $F8, $F6, $F4, $F3,	$F1, $EE, $EC
00000D68 00EA 00E7 00E4 00E1 00DE+  		dc.w $EA, $E7, $E4, $E1, $DE, $DB, $D8,	$D4, $D1, $CD
00000D7C 00C9 00C5 00C1 00BD 00B9+  		dc.w $C9, $C5, $C1, $BD, $B9, $B5, $B0,	$AB, $A7, $A2
00000D90 009D 0098 0093 008E 0088+  		dc.w $9D, $98, $93, $8E, $88, $83, $7E,	$78, $73, $6D
00000DA4 0067 0061 005C 0056 0050+  		dc.w $67, $61, $5C, $56, $50, $4A, $44,	$3E, $38, $31
00000DB8 002B 0025 001F 0019 0012+  		dc.w $2B, $25, $1F, $19, $12, $C, 6, 0,	-6, -$C, -$12
00000DCE FFE7 FFE1 FFDB FFD5 FFCF+  		dc.w -$19, -$1F, -$25, -$2B, -$31, -$38, -$3E, -$44, -$4A
00000DE0 FFB0 FFAA FFA4 FF9F FF99+  		dc.w -$50, -$56, -$5C, -$61, -$67, -$6D, -$75, -$78, -$7E
00000DF2 FF7D FF78 FF72 FF6D FF68+  		dc.w -$83, -$88, -$8E, -$93, -$98, -$9D, -$A2, -$A7, -$AB
00000E04 FF50 FF4B FF47 FF43 FF3F+  		dc.w -$B0, -$B5, -$B9, -$BD, -$C1, -$C5, -$C9, -$CD, -$D1
00000E16 FF2C FF28 FF25 FF22 FF1F+  		dc.w -$D4, -$D8, -$DB, -$DE, -$E1, -$E4, -$E7, -$EA, -$EC
00000E28 FF12 FF0F FF0D FF0C FF0A+  		dc.w -$EE, -$F1, -$F3, -$F4, -$F6, -$F8, -$F9, -$FB, -$FC
00000E3A FF03 FF02 FF02 FF01 FF01+  		dc.w -$FD, -$FE, -$FE, -$FF, -$FF, -$FF, -$100,	-$FF, -$FF
00000E4C FF01 FF02 FF02 FF03 FF04+  		dc.w -$FF, -$FE, -$FE, -$FD, -$FC, -$FB, -$F9, -$F8, -$F6
00000E5E FF0C FF0D FF0F FF12 FF14+  		dc.w -$F4, -$F3, -$F1, -$EE, -$EC, -$EA, -$E7, -$E4, -$E1
00000E70 FF22 FF25 FF28 FF2C FF2F+  		dc.w -$DE, -$DB, -$D8, -$D4, -$D1, -$CD, -$C9, -$C5, -$C1
00000E82 FF43 FF47 FF4B FF50 FF55+  		dc.w -$BD, -$B9, -$B5, -$B0, -$AB, -$A7, -$A2, -$9D, -$98
00000E94 FF6D FF72 FF78 FF7D FF82+  		dc.w -$93, -$8E, -$88, -$83, -$7E, -$78, -$75, -$6D, -$67
00000EA6 FF9F FFA4 FFAA FFB0 FFB6+  		dc.w -$61, -$5C, -$56, -$50, -$4A, -$44, -$3E, -$38, -$31
00000EB8 FFD5 FFDB FFE1 FFE7 FFEE+  		dc.w -$2B, -$25, -$1F, -$19, -$12, -$C,	-6, 0, 6, $C, $12
00000ECE 0019 001F 0025 002B 0031+  		dc.w $19, $1F, $25, $2B, $31, $38, $3E,	$44, $4A, $50
00000EE2 0056 005C 0061 0067 006D+  		dc.w $56, $5C, $61, $67, $6D, $73, $78,	$7E, $83, $88
00000EF6 008E 0093 0098 009D 00A2+  		dc.w $8E, $93, $98, $9D, $A2, $A7, $AB,	$B0, $B5, $B9
00000F0A 00BD 00C1 00C5 00C9 00CD+  		dc.w $BD, $C1, $C5, $C9, $CD, $D1, $D4,	$D8, $DB, $DE
00000F1E 00E1 00E4 00E7 00EA 00EC+  		dc.w $E1, $E4, $E7, $EA, $EC, $EE, $F1,	$F3, $F4, $F6
00000F32 00F8 00F9 00FB 00FC 00FD+  		dc.w $F8, $F9, $FB, $FC, $FD, $FE, $FE,	$FF, $FF, $FF
00000F46                            		even
00000F46                            	
00000F46                            ; ---------------------------------------------
00000F46                            ; HexToByte_Byte
00000F46                            ; 
00000F46                            ; Uses:
00000F46                            ; d4-d5
00000F46                            ; ---------------------------------------------
00000F46                            
00000F46                            ; HexToDec_Byte:
00000F46                            ; 		move.w	d0,d4
00000F46                            ; 		and.w	#$FF,d4
00000F46                            ; 		clr.w	d0
00000F46                            ; @hexloop:
00000F46                            ; 		sub.w	#1,d4
00000F46                            ; 		bcs.s	@finish
00000F46                            ; 		add.w	#1,d0
00000F46                            ; 		move.w	d0,d5
00000F46                            ;  		and.w	#$F,d5
00000F46                            ; 		cmp.w	#$A,d5
00000F46                            ; 		bcs.s	@lowbyte1
00000F46                            ; 		add.w	#6,d0
00000F46                            ; @lowbyte1:
00000F46                            ; 		move.w	d0,d5
00000F46                            ;  		and.w	#$F0,d5
00000F46                            ; 		cmp.w	#$A0,d5
00000F46                            ; 		bcs.s	@lowbyte2
00000F46                            ; 		add.w	#$60,d0
00000F46                            ; @lowbyte2:
00000F46                            ; 		bra.s	@hexloop
00000F46                            ; @finish:
00000F46                            ; 		rts
00000F46                            
00000F46                            ; ---------------------------
00000F46                            ; Convert HEX to DEC
00000F46                            ; MAX: 65535 ($FFFF)
00000F46                            ; 
00000F46                            ; input:
00000F46                            ; d2
00000F46                            ; 
00000F46                            ; output:
00000F46                            ; d2
00000F46                            ; Uses:
00000F46                            ; d4 WORD (swapped)
00000F46                            ; d5 LONG
00000F46                            ; ---------------------------
00000F46                            
00000F46                            HexToDec:
00000F46 7A00                       		moveq	#0,d5
00000F48 4844                       		swap	d4
00000F4A                            
00000F4A 4842                       		swap	d2
00000F4C 3802                       		move.w	d2,d4
00000F4E 4842                       		swap	d2
00000F50 4A44                       		tst.w	d4
00000F52 6700 0000                  		beq	@jumpy
00000F56                            		
00000F56 3802                       		move.w	d2,d4
00000F58 E04C                       		lsr.w	#8,d4
00000F5A 0244 000F                  		and.w	#$F,d4
00000F5E D844                       		add.w	d4,d4
00000F60 3A3B 4000                  		move.w	@grab256(pc,d4.w),d5
00000F64 3802                       		move.w	d2,d4
00000F66 E04C                       		lsr.w	#8,d4
00000F68 E44C                       		lsr.w	#2,d4
00000F6A 0244 003C                  		and.w	#%111100,d4
00000F6E DABB 4000                  		add.l	@grab4096(pc,d4.w),d5
00000F72 6100 0000                  		bsr	@fixhexdec
00000F76 4842                       		swap	d2
00000F78 3802                       		move.w	d2,d4
00000F7A 4842                       		swap	d2
00000F7C E54C                       		lsl.w	#2,d4
00000F7E 0244 003C                  		and.w	#%111100,d4
00000F82 DABB 4000                  		add.l	@grab65536(pc,d4.w),d5
00000F86 6100 0000                  		bsr	@fixhexdec
00000F8A 6000 0000                  		bra	@jumpy
00000F8E                            ; --------------------------------
00000F8E 0000                       @grab256:	dc.w 0
00000F90 0256                       		dc.w $256
00000F92 0512                       		dc.w $512
00000F94 0768                       		dc.w $768
00000F96 1024                       		dc.w $1024
00000F98 1280                       		dc.w $1280
00000F9A 1536                       		dc.w $1536
00000F9C 1792                       		dc.w $1792
00000F9E 2048                       		dc.w $2048
00000FA0 2304                       		dc.w $2304
00000FA2 2560                       		dc.w $2560
00000FA4 2816                       		dc.w $2816
00000FA6 3072                       		dc.w $3072
00000FA8 3328                       		dc.w $3328
00000FAA 3584                       		dc.w $3584
00000FAC 3840                       		dc.w $3840
00000FAE                            		even
00000FAE 0000 0000                  @grab4096:	dc.l 0
00000FB2 0000 4096                  		dc.l $4096
00000FB6 0000 8192                  		dc.l $8192
00000FBA 0001 2288                  		dc.l $12288
00000FBE 0001 6384                  		dc.l $16384
00000FC2 0002 0480                  		dc.l $20480
00000FC6 0002 4576                  		dc.l $24576
00000FCA 0002 8672                  		dc.l $28672
00000FCE 0003 2768                  		dc.l $32768
00000FD2 0003 6864                  		dc.l $36864
00000FD6 0004 0960                  		dc.l $40960
00000FDA 0004 5056                  		dc.l $45056
00000FDE 0004 9152                  		dc.l $49152
00000FE2 0005 3248                  		dc.l $53248
00000FE6 0005 7344                  		dc.l $57344
00000FEA 0006 1440                  		dc.l $61440
00000FEE                            		even
00000FEE 0000 0000                  @grab65536: 	dc.l 0
00000FF2 0006 5536                  		dc.l $65536
00000FF6 0013 1072                  		dc.l $131072
00000FFA 0019 6608                  		dc.l $196608
00000FFE 0026 2144                  		dc.l $262144
00001002 0032 7680                  		dc.l $327680
00001006 0039 3216                  		dc.l $393216
0000100A 0045 8752                  		dc.l $458752
0000100E 0052 4288                  		dc.l $524288
00001012 0058 9824                  		dc.l $589824
00001016 0065 5360                  		dc.l $655360
0000101A 0072 0896                  		dc.l $720896
0000101E 0078 6432                  		dc.l $786432
00001022 0085 1968                  		dc.l $851968
00001026 0091 7504                  		dc.l $917504
0000102A 0098 3040                  		dc.l $983040
0000102E                            		even
0000102E                            ; --------------------------------
0000102E                            
0000102E                            @jumpy:
0000102E 0802 0007                  		btst	#7,d2
00001032 6700                       		beq.s	@not80
00001034 0685 0000 0128             		add.l	#$128,d5
0000103A 6100 0000                  		bsr	@fixhexdec
0000103E                            @not80:
0000103E 0282 0000 007F             		and.l	#$7F,d2
00001044 4A82                       		tst.l	d2
00001046 6700                       		beq.s	@lowrend
00001048 0442 0001                  		sub.w	#1,d2
0000104C                            @lelno:
0000104C 0685 0000 0001             		add.l	#1,d5
00001052 6100 0000                  		bsr	@fixhexdec
00001056 51CA FFF4                  		dbf	d2,@lelno
0000105A                            @lowrend:
0000105A 2405                       		move.l	d5,d2
0000105C 4844                       		swap	d4
0000105E 4E75                       		rts
00001060                            
00001060                            ; --------------------------------
00001060                            
00001060                            @fixhexdec:
00001060 3805                       		move.w	d5,d4
00001062 0244 000F                  		and.w	#$F,d4
00001066 0C44 000A                  		cmp.w	#$A,d4
0000106A 6D00                       		blt.s	@lowr1
0000106C 0685 0000 0006             		add.l	#6,d5
00001072                            @lowr1:
00001072 3805                       		move.w	d5,d4
00001074 0244 00F0                  		and.w	#$F0,d4
00001078 0C44 00A0                  		cmp.w	#$A0,d4
0000107C 6D00                       		blt.s	@lowr2
0000107E 0685 0000 0060             		add.l	#$60,d5
00001084                            @lowr2:
00001084 3805                       		move.w	d5,d4
00001086 0244 0F00                  		and.w	#$F00,d4
0000108A 0C44 0A00                  		cmp.w	#$A00,d4
0000108E 6D00                       		blt.s	@lowr3
00001090 0685 0000 0600             		add.l	#$600,d5
00001096                            @lowr3:
00001096 3805                       		move.w	d5,d4
00001098 0244 F000                  		and.w	#$F000,d4
0000109C 0C44 A000                  		cmp.w	#$A000,d4
000010A0 6500                       		bcs.s	@lowr4
000010A2 0685 0000 6000             		add.l	#$6000,d5
000010A8                            @lowr4:
000010A8 4845                       		swap	d5
000010AA 3805                       		move.w	d5,d4
000010AC 0244 000F                  		and.w	#$F,d4
000010B0 0C44 000A                  		cmp.w	#$A,d4
000010B4 6500                       		bcs.s	@lowr5
000010B6 0685 0000 0006             		add.l	#$6,d5
000010BC                            @lowr5:
000010BC 3805                       		move.w	d5,d4
000010BE 0244 00F0                  		and.w	#$F0,d4
000010C2 0C44 00A0                  		cmp.w	#$A0,d4
000010C6 6500                       		bcs.s	@lowr6
000010C8 0685 0000 0060             		add.l	#$60,d5
000010CE                            @lowr6:
000010CE 3805                       		move.w	d5,d4
000010D0 0244 0F00                  		and.w	#$F00,d4
000010D4 0C44 0A00                  		cmp.w	#$A00,d4
000010D8 6500                       		bcs.s	@lowr7
000010DA 0685 0000 0600             		add.l	#$600,d5
000010E0                            @lowr7:
000010E0 4845                       		swap	d5
000010E2 4E75                       		rts
000010E2 4E75                       		rts
000010E4                            		include	"system/input/code.asm"
000010E4                            ; ====================================================================
000010E4                            ; Input
000010E4                            ; ====================================================================
000010E4                            
000010E4                            		include	"system/input/map.asm"
000010E4                            ; ====================================================================
000010E4                            ; Input
000010E4                            ; ====================================================================
000010E4                            
000010E4                            ; ====================================================================
000010E4                            ; -------------------------------------------------
000010E4                            ; Variables
000010E4                            ; -------------------------------------------------
000010E4                            
000010E4 =00000001                  JoyUp		equ	%00000001
000010E4 =00000002                  JoyDown		equ	%00000010
000010E4 =00000004                  JoyLeft		equ	%00000100
000010E4 =00000008                  JoyRight	equ	%00001000
000010E4 =00000010                  JoyB		equ	%00010000
000010E4 =00000020                  JoyC		equ	%00100000
000010E4 =00000040                  JoyA		equ	%01000000
000010E4 =00000080                  JoyStart	equ	%10000000
000010E4 =00000000                  bitJoyUp	equ	0
000010E4 =00000001                  bitJoyDown	equ	1
000010E4 =00000002                  bitJoyLeft	equ	2
000010E4 =00000003                  bitJoyRight	equ	3
000010E4 =00000004                  bitJoyB		equ	4
000010E4 =00000005                  bitJoyC		equ	5
000010E4 =00000006                  bitJoyA		equ	6
000010E4 =00000007                  bitJoyStart	equ	7
000010E4                            
000010E4 =00000001                  JoyZ		equ	%00000001
000010E4 =00000002                  JoyY		equ	%00000010
000010E4 =00000004                  JoyX		equ	%00000100
000010E4 =00000008                  JoyMode		equ	%00001000
000010E4 =00000000                  bitJoyZ		equ	0
000010E4 =00000001                  bitJoyY		equ	1
000010E4 =00000002                  bitJoyX		equ	2
000010E4 =00000003                  bitJoyMode	equ	3
000010E4                            
000010E4                            ; --------------------------------------------
000010E4                            
000010E4                            		rsreset
000010E4 =00000000                  CtrlID		rs.b	1
000010E4 =00000001                  PadType		rs.b	1		;only TRUE $01 or FALSE $00
000010E4 =00000002                  ExOnHold	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
000010E4 =00000003                  OnHold		rs.b	1		;SACBRLDU
000010E4 =00000004                  ExOnPress	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
000010E4 =00000005                  OnPress		rs.b	1		;SACBRLDU
000010E4 =00000006                  MouseX		rs.w	1		;TODO
000010E4 =00000008                  MouseY		rs.w	1
000010E4 =0000000A                  sizeof_control	rs.l	0
000010E4                            
000010E4                            ; ====================================================================
000010E4                            ; -------------------------------------------------
000010E4                            ; RAM
000010E4                            ; -------------------------------------------------
000010E4                            
000010E4                                            rsset	RAM_Input
000010E4 =FFFFDE80                  RAM_Control_1	rs.b sizeof_control
000010E4 =FFFFDE8A                  RAM_Control_2	rs.b sizeof_control
000010E4                            
000010E4                            ; --------------------------------------------
000010E4                            
000010E4 =FFFFDE94                  sizeof_input	rs.l	0
000010E4                            ; 		inform 0,"input ram: %h",(sizeof_input-RAM_Input)
000010E4                             				
000010E4                            ; ====================================================================
000010E4                            ; -------------------------------------------------
000010E4                            ; Macros
000010E4                            ; -------------------------------------------------
000010E4                            
000010E4                            ; --------------------------------------------
000010E4                            ; --------------------------------------------
000010E4                            
000010E4                            ; ====================================================================
000010E4                            ; -------------------------------------------------
000010E4                            ; Read input
000010E4                            ; -------------------------------------------------
000010E4                            
000010E4                            Input_Read:
000010E4 4BF9 FFFF DE80             		lea	(RAM_Control_1),a5
000010EA 7000                       		moveq	#0,d0
000010EC 6100                       		bsr.s	@DoIt
000010EE 4BF9 FFFF DE8A             		lea	(RAM_Control_2),a5
000010F4 7001                       		moveq	#1,d0
000010F6 6100                       		bsr.s	@DoIt
000010F8 4E75                       		rts
000010FA                            
000010FA                            ; ---------------------------------------
000010FA                            
000010FA                            @DoIt:
000010FA 4DF9 00A1 0003             		lea	($A10003).l,a6
00001100 E348                       		lsl.w	#1,d0
00001102 DCC0                       		add.w	d0,a6			;Add result to port
00001104 6100 0000                  		bsr	@FindJoypad
00001108 1A80                       		move.b	d0,(a5)
0000110A                            
0000110A 0C00 000F                                  cmp.b	#$F,d0
0000110E 6700                                       beq.s	@End
00001110 0C00 000D                  		cmp.b	#$D,d0
00001114 6700                                       beq.s	@Controller
00001116 0C00 0007                    		cmp.b	#7,d0			;Multitap
0000111A 6700                                       beq.s	@End
0000111C 0C00 0003                  		cmp.b	#3,d0
00001120 6700 0000                                  beq	@Mouse
00001124                            
00001124                            @End:
00001124 4E75                       		rts
00001126                            
00001126                            ; ------------------------------------
00001126                            ; Controller
00001126                            ; ------------------------------------
00001126                            
00001126                            @Controller:
00001126 1D7C 0040 0006             		move.b	#$40,6(a6)
0000112C 4E71                       		nop
0000112E 4E71                       		nop
00001130 1CBC 0040                  		move.b	#$40,(a6)		; Show CB|RLDU
00001134 4E71                       		nop
00001136 4E71                       		nop
00001138 1CBC 0000                  		move.b	#$00,(a6)		; Show SA|RLDU
0000113C 4E71                       		nop
0000113E 4E71                       		nop
00001140 1CBC 0040                  		move.b	#$40,(a6)		; Show CB|RLDU
00001144 4E71                       		nop
00001146 4E71                       		nop
00001148 1CBC 0000                  		move.b	#$00,(a6)		; Show SA|RLDU
0000114C 4E71                       		nop
0000114E 4E71                       		nop
00001150 1CBC 0040                  		move.b	#$40,(a6)		; "Okay OKAY!, I have more buttons"
00001154 4E71                       		nop
00001156 4E71                       		nop
00001158 1016                       		move.b	(a6),d0
0000115A 1CBC 0000                   		move.b	#$00,(a6)		; "Heres my ID"
0000115E 4E71                         		nop
00001160 4E71                         		nop
00001162 1216                        		move.b	(a6),d1
00001164 1CBC 0040                   		move.b	#$40,(a6)
00001168 4E71                        		nop
0000116A 4E71                        		nop
0000116C                            		
0000116C 142D 0001                  		move.b	PadType(a5),d2
00001170 0882 0000                  		bclr	#0,d2
00001174 0241 000F                  		and.w	#$F,d1
00001178 0C41 000F                  		cmp.w	#$F,d1
0000117C 6600                       		bne.s	@Original
0000117E                            		
0000117E 08C2 0000                  		bset	#0,d2
00001182 7200                        		moveq	#0,d1
00001184 122D 0002                   		move.b	ExOnHold(a5),d1
00001188 4601                       		not.b	d1
0000118A B101                        		eor.b	d0,d1
0000118C C200                        		and.b	d0,d1
0000118E 0241 000F                   		and.w	#$F,d1
00001192 1B41 0004                   		move.b	d1,ExOnPress(a5)
00001196 4600                        		not.b	d0
00001198 0240 000F                   		and.w	#$F,d0
0000119C 1B40 0002                   		move.b	d0,ExOnHold(a5)
000011A0                             		
000011A0                            @Original:	
000011A0 1B42 0001                  		move.b	d2,PadType(a5)
000011A4                            	
000011A4 1CBC 0000                  		move.b	#0,(a6)
000011A8 4E71                       		nop
000011AA 4E71                       		nop
000011AC 1016                       		move.b	(a6),d0
000011AE E508                       		lsl.b	#2,d0
000011B0 0200 00C0                  		and.b	#$C0,d0	
000011B4 1CBC 0040                  		move.b	#$40,(a6)
000011B8 4E71                       		nop
000011BA 4E71                       		nop
000011BC 1216                       		move.b	(a6),d1
000011BE                            ; 		move.w	#0,($A11100)
000011BE 0201 003F                  		and.b	#$3F,d1
000011C2 8001                       		or.b	d1,d0
000011C4 4600                       		not.b	d0
000011C6 122D 0003                  		move.b	OnHold(a5),d1
000011CA B101                       		eor.b	d0,d1
000011CC 1B40 0003                  		move.b	d0,OnHold(a5)
000011D0 C200                       		and.b	d0,d1
000011D2 1B41 0005                  		move.b	d1,OnPress(a5)
000011D6 4E75                       		rts
000011D8                            
000011D8                            ; ; ------------------------------------
000011D8                            ; ; Multitap
000011D8                            ; ; ------------------------------------
000011D8                            ; 
000011D8                            ; @Multitap:
000011D8                            ; 		bra	@End
000011D8                            
000011D8                            ; ------------------------------------
000011D8                            ; Sega Mega Mouse
000011D8                            ;
000011D8                            ; in: d1 - port number
000011D8                            ; out: d0 - status
000011D8                            ;      d2
000011D8                            ; ------------------------------------
000011D8                            
000011D8                            @Mouse:
000011D8 7200                       		moveq	#0,d1
000011DA 6100 0000                  		bsr	@ReadIt
000011DE                            		
000011DE 2002                       		move.l	d2,d0
000011E0 4840                       		swap	d0
000011E2 0240 00FF                  		and.w	#$FF,d0
000011E6 122D 0003                  		move.b	OnHold(a5),d1
000011EA B101                       		eor.b	d0,d1
000011EC 1B40 0003                  		move.b	d0,OnHold(a5)
000011F0 C200                        		and.b	d0,d1
000011F2 1B41 0005                  		move.b	d1,OnPress(a5)
000011F6                            		
000011F6                            		;TODO
000011F6 3002                       		move.w	d2,d0
000011F8 0240 00FF                  		and.w	#$FF,d0
000011FC 4880                       		ext.w	d0
000011FE 4440                       		neg.w	d0
00001200 3B40 0008                   		move.w	d0,MouseY(a5)
00001204                             		
00001204 E04A                        		lsr.w	#8,d2
00001206 0242 00FF                   		and.w	#$FF,d2
0000120A 4882                       		ext.w	d2
0000120C 3B42 0006                   		move.w	d2,MouseX(a5)
00001210 6000 FF12                   		bra	@End
00001214                            
00001214                            ; ------------------------------------
00001214                            
00001214                            @ReadIt:
00001214                            ; 		movem.l	d1/d3/d4/d7/a6,-(sp)
00001214                            
00001214 7000                       		moveq	#0,d0			;Error flag
00001216 0C41 0002                  		cmp.w	#2,d1			;Control ID < 2?
0000121A 6200 0000                  		bhi	@Error
0000121E D241                       		add.w	d1,d1
00001220                            	;	lea	($A10003),a6
00001220                            @Connect:
00001220 1D7C 0060 0006             		move.b	#$60,6(a6)
00001226 4E71                                       nop
00001228 4E71                                       nop
0000122A 1CBC 0060                                  move.b	#$60,(a6)		;TH,TR=11 (END DATA)
0000122E 7400                                       moveq	#0,d2
00001230 7600                                       moveq	#0,d3
00001232                            @NotReady:
00001232 0816 0004                   		btst	#4,(a6)
00001236 67FA                        		beq.s	@NotReady
00001238 1816                        		move.b	(a6),d4			;d4.b = ? 1 1 1 | 0 0 0
0000123A 0204 000F                   		and.b	#$F,d4
0000123E 4A04                        		tst.b	d4
00001240 6600 0000                   		bne	@Error			;No mouse
00001244 1CBC 0020                   		move.b	#$20,(a6)		;Select t1 m1 1 1
00001248 3E3C 00FE                   		move.w	#$FE,d7
0000124C                            @lp1:
0000124C 0816 0004                  		btst.b	#4,(a6)
00001250 6600                       		bne.s	@Mouse_10
00001252 51CF FFF8                  		dbra	d7,@lp1
00001256 6000 0000                  		bra	@Error
0000125A                            		
0000125A                            @Mouse_10:
0000125A 1016                       		move.b	(a6),d0			;d0 = xxxx|xxxx|xxxx|t1 m1 1 1
0000125C E148                       		lsl.w	#8,d0			;d0 = xxxx|t1 m1 1 1|0000|0000
0000125E 1CBC 0000                  		move.b	#0,(a6)
00001262 4E71                       		nop
00001264                            @lp2:
00001264 0816 0004                  		btst	#4,(a6)
00001268 6700                       		beq.s	@Mouse_20
0000126A 51CF FFF8                  		dbra	d7,@lp2
0000126E 6000 0000                  		bra	@Error
00001272                            		
00001272                            @Mouse_20:
00001272 1616                       		move.b	(a6),d3
00001274 1CBC 0020                  		move.b	#$20,(a6)
00001278 E14B                       		lsl.w	#8,d3
0000127A                            @lp3:
0000127A 0816 0004                  		btst	#4,(a6)
0000127E 6600                       		bne.s	@Mouse_30
00001280 51CF FFF8                  		dbra	d7,@lp3
00001284 6000 0000                  		bra	@Error
00001288                            		
00001288                            @Mouse_30:
00001288 1616                       		move.b	(a6),d3
0000128A E90B                       		lsl.b	#4,d3
0000128C E84B                       		lsr.w	#4,d3
0000128E 1CBC 0000                  		move.b	#0,(a6)
00001292 8043                       		or.w	d3,d0
00001294 7600                       		moveq	#0,d3
00001296                            @lp4:
00001296 0816 0004                  		btst	#4,(a6)
0000129A 6700                                       beq.s	@Mouse_40
0000129C 51CF FFF8                                  dbra	d7,@lp4
000012A0 6000 0000                                  bra	@Error
000012A4                            
000012A4                            @Mouse_40:
000012A4 1416                       		move.b	(a6),d2
000012A6 1CBC 0020                  		move.b	#$20,(a6)
000012AA E14A                       		lsl.w	#8,d2
000012AC                            @lp5:
000012AC 0816 0004                  		btst	#4,(a6)
000012B0 6600                       		bne.s	@Mouse_50
000012B2 51CF FFF8                  		dbra	d7,@lp5
000012B6 6000 0000                  		bra	@Error
000012BA                            		
000012BA                            @Mouse_50:
000012BA 1416                       		move.b	(a6),d2
000012BC 1CBC 0000                  		move.b	#0,(a6)
000012C0 E90A                       		lsl.b	#4,d2
000012C2 E94A                       		lsl.w	#4,d2
000012C4                            @lp6:
000012C4 0816 0004                  		btst	#4,(a6)
000012C8 6700                       		beq.s	@Mouse_60
000012CA 51CF FFF8                  		dbra	d7,@lp6
000012CE 6000 0000                  		bra	@Error
000012D2                            
000012D2                            @Mouse_60:
000012D2 1416                       		move.b	(a6),d2
000012D4 1CBC 0020                  		move.b	#$20,(a6)
000012D8 E90A                       		lsl.b	#4,d2
000012DA E98A                       		lsl.l	#4,d2
000012DC                            @lp7:
000012DC 0816 0004                  		btst	#4,(a6)
000012E0 6600                       		bne.s	@Mouse_70
000012E2 51CF FFF8                  		dbra	d7,@lp7
000012E6 6000                       		bra.s	@Error
000012E8                            
000012E8                            @Mouse_70:
000012E8 1416                       		move.b	(a6),d2
000012EA 1CBC 0000                  		move.b	#0,(a6)
000012EE E90A                       		lsl.b	#4,d2
000012F0 E98A                       		lsl.l	#4,d2
000012F2                            @lp8:
000012F2 0816 0004                  		btst	#4,(a6)
000012F6 6700                       		beq.s	@Mouse_80
000012F8 51CF 0000                  		dbra	d7,@Mouse_80
000012FC 6000                       		bra.s	@Error
000012FE                            
000012FE                            @Mouse_80:
000012FE 1416                       		move.b	(a6),d2
00001300 1CBC 0020                  		move.b	#$20,(a6)
00001304 E90A                       		lsl.b	#4,d2
00001306 E98A                       		lsl.l	#4,d2
00001308                            @lp9:
00001308 0816 0004                  		btst	#4,(a6)
0000130C 6700                       		beq.s	@Mouse_90
0000130E 51CF FFF8                  		dbra	d7,@lp9
00001312 6000                       		bra.s	@Error
00001314                            
00001314                            @Mouse_90:
00001314 1416                       		move.b	(a6),d2
00001316 1CBC 0060                  		move.b	#$60,(a6)
0000131A E90A                       		lsl.b	#4,d2
0000131C E88A                       		lsr.l	#4,d2
0000131E                            @lp10:
0000131E 0816 0004                  		btst	#4,(a6)
00001322 67FA                       		beq.s	@lp10
00001324 0082 0000 0000             		or.l	#0,d2
0000132A                            @Exit:
0000132A 33FC 0000 00A1 1100        		move.w	#0,($A11100)
00001332                            ; 		movem.l	(sp)+,d1/d3/d4/d7/a6
00001332 4E75                       		rts
00001334                            
00001334                            @Error:
00001334 1CBC 0060                  		move.b	#$60,(a6)
00001338 4E71                       		nop
0000133A 4E71                       		nop
0000133C                            @erlp:
0000133C 1CBC 0004                  		move.b	#4,(a6)
00001340 67FA                       		beq.s	@erlp
00001342 0082 8000 0000             		or.l	#$80000000,d2
00001348 7000                       		moveq	#0,d0
0000134A 33FC 0000 00A1 1100        		move.w	#0,($A11100)
00001352                            ; 		movem.l	(sp)+,d1/d3/d4/d7/a6
00001352 4E75                       		rts
00001354                            
00001354                            ; ------------------------------------
00001354                            ; d0.w
00001354                            ; $0F - Nothing
00001354                            ; $0D - Controller
00001354                            ; $07 - Multitap
00001354                            ; $03 - Mouse
00001354                            ;
00001354                            ; d1.l
00001354                            ; $00xx00yy - Key presses
00001354                            ; ------------------------------------
00001354                            
00001354                            @FindJoypad:
00001354 7000                       		moveq	#0,d0
00001356 1CBC 0070                  		move.b	#$70,(a6)
0000135A 6100                       		bsr.s	@GetPress
0000135C 4841                       		swap	d1
0000135E 1CBC 0030                  		move.b	#$30,(a6)
00001362 D040                       		add.w	d0,d0
00001364                            
00001364                            @GetPress:
00001364 1216                       		move.b	(a6),d1
00001366 1401                       		move.b	d1,d2
00001368 0202 000C                  		and.b	#$C,d2
0000136C 6700                       		beq.s	@Nope1
0000136E 5240                       		addq.w	#1,d0
00001370                            
00001370                            @Nope1:
00001370 D040                       		add.w	d0,d0
00001372 1601                       		move.b	d1,d3
00001374 0243 0003                  		and.w	#3,d3
00001378 6700                       		beq.s	@Nope2
0000137A 5240                       		addq.w	#1,d0
0000137C                            
0000137C                            @Nope2:
0000137C 4E75                       		rts
0000137E                            		
0000137E                            ; ====================================================================
0000137E                            ; -------------------------------------------------
0000137E                            ; Subs
0000137E                            ; -------------------------------------------------
0000137E                            
0000137E                            Input_init:
0000137E                            ; 		move.w	#$100,($A11100).l
0000137E                            ; @WaitZ80:
0000137E                            ; 		btst	#0,($A11100).l
0000137E                            ; 		bne.s	@WaitZ80
0000137E                             
0000137E 7240                       		moveq	#$40,d1
00001380 13C1 00A1 0009             		move.b	d1,($A10009).l
00001386 13C1 00A1 000B             		move.b	d1,($A1000B).l
0000138C 13C1 00A1 000D             		move.b	d1,($A1000D).l
00001392                            
00001392                            ; 		move.w	#0,($A11100).l
00001392 4E75                       		rts
00001394                            		
00001394                            		
00001394                            		include	"system/sound/68k/main.asm"
00001394                            ; ================================================================
00001394                            ; SMEG Karasucia
00001394                            ; Sound and Music Engine for Genesis (also MCD* and 32X**)
00001394                            ;
00001394                            ; (C)2013-2017 GF64
00001394                            ; 
00001394                            ; Reads patterns from a ImpulseTracker file (.it)
00001394                            ;
00001394                            ; Ticks:
00001394                            ; 150 - NTSC
00001394                            ; 120 - PAL
00001394                            ;
00001394                            ; uses assembler settings:
00001394                            ; MCD     - for building to MCD (All the driver must be aligned
00001394                            ;              to WordRAM or PRG-RAM)
00001394                            ; MARS       - for building to 32x (CODE and
00001394                            ;              DATA(Music/Sfx/Voices/Z80 samples) must be aligned to
00001394                            ;              the 32x standards, uses bank 0 only,
00001394                            ;              PWM Samples can be anywhere in ROM)
00001394                            ; SMEG_Z80   - Use Z80, set to 0 while running from PRGRAM
00001394                            ;                 
00001394                            ; Limtations:
00001394                            ; (Driver) - Effects: only volume and panning (Xxx) works
00001394                            ; 
00001394                            ; (MCD) - You cant use Z80 samples if your program is running
00001394                            ;            on PRG-RAM (Z80 cant access RAM), if your program is
00001394                            ;            running on WORD-RAM, set the permission to
00001394                            ;            MainCPU (2M Mode) (not recommended)
00001394                            ;            
00001394                            ; * requires respective SubCPU code
00001394                            ; ** requires respective SH2 code
00001394                            ; ================================================================
00001394                            
00001394                            ;NOTE: Format
00001394                            ; SONGFILE:
00001394                            ; 		dc.b 12,0		; Numof_blocks, loop_block (-1 dont loop)
00001394                            ; 		dc.l @pattern		; Pattern data
00001394                            ;      		dc.l @instruments	; Instrument set
00001394                            ;      		dc.w 8			; Number of channel settings
00001394                            ;       	dc.b FM_6,64,$80,$0F	; Example of one (Channel,Vol,Pan,Extra)		
00001394                            ;		...
00001394                            ;
00001394                            ; Extra:
00001394                            ; FM: %????KEYS KEYS: FM Keys (ignored if not FM)
00001394                            ; PSG: (not yet)
00001394                            ; PCM/PWM: not yet
00001394                            ; 
00001394                            ; @instruments:
00001394                            ; 		dc.w @ymha-@instruments
00001394                            ; 		dc.w @psg-@instruments
00001394                            ; 		dc.w @noise-@instruments
00001394                            ; 		dc.w @psmpl-@instruments
00001394                            ; 		even
00001394                            ; @ymha:
00001394                            ; 		;FM
00001394                            ; 		dc.w INSTNUM,0
00001394                            ; 		dc.l fmVoice_bass_ambient
00001394                            ;    		
00001394                            ;    		;FM3
00001394                            ;    		dc.w $40|INSTNUM,0
00001394                            ;    		dc.l fm_hatopen
00001394                            ;    		dc.w $0511|$2000,$0328|$2000
00001394                            ;    		dc.w $005E|$2000,$0328|$2000
00001394                            ;    		
00001394                            ;    		;Samples
00001394                            ;   		dc.w $80|INSTNUM,12	; NUM,Pitch
00001394                            ;   		dc.l wav_kick		; WAV Start
00001394                            ;  		dc.l wav_kick_e		; WAV End
00001394                            ;  		dc.l -1			; WAV Loop sample (0: start -1: none)
00001394                            ;  		
00001394                            ; 		dc.w -1			; ENDOFLIST
00001394                            ; 		even
00001394                            ; @psmpl:
00001394                            ; 		dc.w -1			; Later
00001394                            ; 		even
00001394                            ; @psg:
00001394                            ; 		dc.w -1			; Later
00001394                            ; 		even
00001394                            ; @noise:
00001394                            ;  		dc.w 3,%101		; INSTNUM, PSG Noise setting
00001394                            ;  		
00001394                            ;  		dc.w 5,%101
00001394                            ;  		dc.w 7,%100
00001394                            ;  		
00001394                            ; 		dc.w -1
00001394                            ; 		even
00001394                            
00001394                            
00001394                            ; GEMS style tick
00001394                            ; 		dc.l fmSfx_Coin
00001394                            ; 		dc.w $00AB|$3800,$0457|$3000
00001394                            ; 		dc.w $0511|$3000,$0336|$2000
00001394                            ;
00001394                            ;    		dc.l fm_hatopen
00001394                            ;    		dc.w $0511|$2000,$0328|$2000
00001394                            ;    		dc.w $005E|$2000,$0328|$2000
00001394                            ;
00001394                            ;    		dc.l fm_hatclosed
00001394                            ;    		dc.w $051C|$2000,$0328|$2000
00001394                            ;    		dc.w $005E|$2000,$0328|$2000
00001394                            ;
00001394                            ;    		dc.l fm_hatclosed
00001394                            ;    		dc.w $051C|$2000,$0328|$2000
00001394                            ;    		dc.w $005E|$2000,$0328|$2000	
00001394                            
00001394                            ; ================================================================
00001394                            
00001394                            			rsreset
00001394 =00000000                  DrvStatus		rs.b 1		;Byte
00001394 =00000001                  snd_flags		rs.b 1		;Byte
00001394 =00000002                  PatternEnd		rs.b 1		;Byte
00001394 =00000003                  PatternLoop		rs.b 1		;Byte
00001394 =00000004                  SongRequest		rs.l 1 		;Long
00001394 =00000008                  SongStart		rs.l 1		;Long
00001394 =0000000C                  SongRead		rs.l 1		;Long
00001394 =00000010                  snd_instr		rs.l 1		;Long
00001394 =00000014                  SongPcmSamp		rs.l 1		;Long
00001394 =00000018                  TicksRequest		rs.w 1		;Word
00001394 =0000001A                  TicksRead		rs.w 1		;Word
00001394 =0000001C                  TicksSet		rs.w 1		;Word
00001394 =0000001E                  TempoRead 		rs.w 1		;Word
00001394 =00000020                  PattSize		rs.w 1		;Word
00001394 =00000022                  pattr_read		rs.w 1		;Word
00001394 =00000024                  CdOnlyFlags		rs.w 1		;Word
00001394 =00000026                  CurrPattern		rs.b 1		;Byte
00001394 =00000027                  PcmChnOnOff		rs.b 1		;Byte
00001394 =00000028                  PsgLast			rs.b 1		;Byte
00001394 =00000029                  snd_flagsBGM		rs.b 1		;Byte
00001394 =0000002A                  LastPattChn		rs.b 1		;Byte
00001394 =0000002B                  Psg_Vibrato		rs.b 1		;Byte
00001394 =0000002C                  Psg_AutoVol		rs.b 1		;Byte
00001394 =0000002E                  sizeof_SndBuff		rs.l 0
00001394                            
00001394                            ; --------------------------------------------
00001394                            ; Channel settings
00001394                            ; --------------------------------------------
00001394                            
00001394                            			rsreset
00001394 =00000000                  Chn_Freq		rs.w 1		;Word
00001394 =00000002                  Chn_Effect		rs.w 1		;Word
00001394 =00000004                  Chn_Portam		rs.w 1		;Word
00001394 =00000006                  Chn_Type		rs.b 1		;Byte
00001394 =00000007                  Chn_ID			rs.b 1		;Byte
00001394 =00000008                  Chn_Inst		rs.b 1		;Byte
00001394 =00000009                  Chn_Vol			rs.b 1		;Byte
00001394 =0000000A                  Chn_MainVol		rs.b 1		;Byte
00001394 =0000000B                  Chn_Note		rs.b 1		;Byte
00001394 =0000000C                  Chn_Pan			rs.b 1		;Byte
00001394 =0000000D                  Chn_FM_Key		rs.b 1		;Byte
00001394 =0000000E                  Chn_PCM_Pitch		rs.b 1		;Byte
00001394                            ; Chn_PSG_Vibrato		rs.b 1		;Byte
00001394 =0000000F                  Chn_Timer		rs.b 1
00001394 =00000010                  sizeof_Chn		rs.l 0
00001394                             
00001394                             
00001394                            			rsreset
00001394 =00000000                  instDYmha		rs.w 1
00001394 =00000002                  instDPsg		rs.w 1
00001394 =00000004                  instDNoise		rs.w 1
00001394 =00000006                  instDpsmpl		rs.w 1
00001394                            
00001394                            ; --------------------------------------------
00001394                            ; Bits
00001394                            ; --------------------------------------------
00001394                            
00001394 =00000000                  bitPriority		equ	0
00001394 =00000001                  bitSfxOn		equ	1
00001394 =00000002                  bitEnabled		equ	2
00001394                            
00001394                            ;Status
00001394 =00000000                  bitFmDac		equ	0
00001394 =00000001                  bitDacNote		equ	1
00001394 =00000002                  bitTone3		equ	2
00001394 =00000003                  bitSpecial3		equ	3
00001394                            
00001394                            ; --------------------------------------------
00001394                            ; Channel IDs
00001394                            ; --------------------------------------------
00001394                            
00001394 =00000000                  FM_1			equ	$00
00001394 =00000001                  FM_2			equ	$01
00001394 =00000002                  FM_3			equ	$02
00001394 =00000004                  FM_4			equ	$04
00001394 =00000005                  FM_5			equ	$05
00001394 =00000006                  FM_6			equ	$06
00001394 =00000080                  PSG_1			equ	$80
00001394 =000000A0                  PSG_2			equ	$A0
00001394 =000000C0                  PSG_3			equ	$C0
00001394 =000000E0                  NOISE			equ	$E0
00001394 =00000010                  PCM_1			equ	$10
00001394 =00000011                  PCM_2			equ	$11
00001394 =00000012                  PCM_3			equ	$12
00001394 =00000013                  PCM_4			equ	$13
00001394 =00000014                  PCM_5			equ	$14
00001394 =00000015                  PCM_6			equ	$15
00001394 =00000016                  PCM_7			equ	$16
00001394 =00000017                  PCM_8			equ	$17
00001394 =00000012                  max_chnl		equ	18
00001394                            
00001394                            ; --------------------------------------------
00001394                            ; .IT request ($80+) format
00001394                            ; --------------------------------------------
00001394                            
00001394 =00000000                  bitNote			equ	0
00001394 =00000001                  bitInst			equ	1
00001394 =00000002                  bitVolume		equ	2
00001394 =00000003                  bitEffect		equ	3
00001394 =00000004                  bitSameNote		equ	4
00001394 =00000005                  bitSameInst		equ	5
00001394 =00000006                  bitSameVol		equ	6
00001394 =00000007                  bitSameEffect		equ	7
00001394                            
00001394                            ; --------------------------------------------
00001394                            ; RAM
00001394                            ; 
00001394                            ; MAX: $400
00001394                            ; --------------------------------------------
00001394                            
00001394                            			rsset RAM_Audio
00001394 =FFFFEF00                  RAM_SMEG_Buffer		rs.b sizeof_SndBuff
00001394 =FFFFEF2E                  RAM_SMEG_SfxBuff	rs.b sizeof_SndBuff
00001394 =FFFFEF5C                  RAM_SMEG_PrioList	rs.b max_chnl
00001394 =FFFFEF6E                  RAM_SMEG_Chnls_BGM	rs.b $10*max_chnl
00001394 =FFFFF08E                  RAM_SMEG_Chnls_SFX	rs.b $10*max_chnl
00001394                            			
00001394 =FFFFF1AE                  sizeof_SMEG		rs.l 0
00001394                            ;      			inform 0,"SMEG Uses: %h",sizeof_SMEG-RAM_Audio
00001394                            			
00001394                            ; ================================================================
00001394                            ; -------------------------------------------
00001394                            ; Macros
00001394                            ; -------------------------------------------
00001394                            
00001394                            ; -----------------------------------------
00001394                            
00001394                            PCM_Entry	macro	cd_side,mars_side,loop,pitch
00001394                            		
00001394                            cdsize_size	= strlen(\cd_side)
00001394                            		if MCD
00001394                            		  if cdsize_size>$C
00001394                            		    inform 2,"(SMEG) CD FILENAME TOO LONG"
00001394                            		  elseif cdsize_size=$C
00001394                            		    dc.b \cd_side
00001394                            		  elseif cdsize_size<$C
00001394                            		    dc.b \cd_side
00001394                            		    rept $C-cdsize_size
00001394                            		      dc.b 0
00001394                            		    endr
00001394                            		  elseif cdsize_size<=0
00001394                            		    inform 2,"(SMEG) YOU FORGOT THE CD FILENAME"
00001394                            		  endif
00001394                            		  
00001394                            		elseif MARS
00001394                            		  dc.l mars_side
00001394                            		endif
00001394                            		
00001394                            		dc.w loop
00001394                            		dc.w pitch
00001394                            		endm
00001394                            
00001394                            ; 		inform 0,"%h",RAM_SMEG_Buffer
00001394                            
00001394                            ; ================================================================
00001394                            ; -------------------------------------------
00001394                            ; External Calls
00001394                            ; -------------------------------------------
00001394                            
00001394                            ;SegaPCM
00001394 =00000020                  CdTask_LoadPcm		equ	$20
00001394 =00000021                  CdTask_SetAddr		equ	$21
00001394 =00000022                  CdTask_SetFreq		equ	$22
00001394 =00000023                  CdTask_SetPan		equ	$23
00001394 =00000024                  CdTask_SetEnv		equ	$24
00001394 =00000025                  CdTask_SetOnOff		equ	$25
00001394 =00000026                  CdTask_ClearAllPcm	equ	$26
00001394                            
00001394                            ;MARS
00001394 =00000001                  marscall_Play		equ	1
00001394 =00000002                  marscall_Stop		equ	2
00001394 =00000003                  marscall_SetSmpl	equ	3
00001394 =00000004                  marscall_SetVol		equ	4
00001394 =00000005                  marscall_SetEntry	equ	5
00001394                            	
00001394                            ; ================================================================
00001394                            ; -------------------------------------------
00001394                            ; Init
00001394                            ; -------------------------------------------
00001394                            
00001394                            Audio_Init:
00001394 41F9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a0
0000139A 303C 02FF                  		move.w	#$2FF,d0
0000139E                            @ClrAll:
0000139E 4298                       		clr.l	(a0)+
000013A0 51C8 FFFC                  		dbf	d0,@ClrAll
000013A4                            		
000013A4                            ; -------------------------------------------
000013A4                            ; Z80
000013A4                            ; -------------------------------------------
000013A4                            
000013A4                            SMEG_Z80_Init:
000013A4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
000013AC 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
000013B4                            @WaitZ80:
000013B4 0839 0000 00A1 1100        		btst	#0,($A11100).l
000013BC 66F6                       		bne.s	@WaitZ80
000013BE                            
000013BE 41F9 00A0 0000             		lea	($A00000).l,a0
000013C4 303C 1FFF                  		move.w	#$1FFF,d0
000013C8                            @cleanup:
000013C8 4218                       		clr.b	(a0)+
000013CA 51C8 FFFC                  		dbf	d0,@cleanup
000013CE                            		
000013CE 41FA 0000                  		lea	Z80_Driver(pc),a0
000013D2 43F9 00A0 0000             		lea	($A00000).l,a1
000013D8 323C 0000                  		move.w	#Z80_DriverEnd-Z80_Driver,d1
000013DC                            @ToZ80:
000013DC 12D8                       		move.b	(a0)+,(a1)+
000013DE 51C9 FFFC                  		dbf	d1,@ToZ80
000013E2                            
000013E2                            ; -----------------------------------
000013E2                            
000013E2 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000013EA 4E71                       		nop
000013EC 4E71                       		nop
000013EE 4E71                       		nop
000013F0 4E71                       		nop
000013F2 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
000013FA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001402                            ; 		rts
00001402                            		
00001402                            ; -------------------------------------------
00001402                            ; Stop ALL Sound
00001402                            ; -------------------------------------------
00001402                            
00001402                            SMEG_StopSnd:
00001402 103C 002B                  		move.b	#$2B,d0
00001406 123C 0000                  		move.b	#$00,d1
0000140A 6100 0000                  		bsr	SMEG_Z80_Off
0000140E 6100 0000                  		bsr	FM_RegWrite_1
00001412 6100 0000                  		bsr	SMEG_Z80_On
00001416 6100 0000                  		bsr	Audio_Sample_Stop
0000141A                            		
0000141A 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
00001420 0896 0002                  		bclr	#bitEnabled,(a6)
00001424                            	
00001424 6100 0000                  		bsr	SMEG_FM_Reset
00001428 6100 0000                   		bsr	SMEG_PSG_Reset
0000142C 6000 0000                  		bra	SMEG_PCM_Reset
00001430                            		
00001430                            ; -------------------------------------------
00001430                            ; Play Song
00001430                            ; -------------------------------------------
00001430                            
00001430                            SMEG_PlaySong:
00001430 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
00001436 08D6 0002                  		bset	#bitEnabled,(a6)
0000143A 4E75                       		rts
0000143C                            		
0000143C                            ; -------------------------------------------
0000143C                            ; Load Song
0000143C                            ;
0000143C                            ; d0 - StartOfSong
0000143C                            ; d1 - Ticks
0000143C                            ; d2 - Type (0 - song, 1 - sfx)
0000143C                            ; -------------------------------------------
0000143C                            
0000143C                            Audio_Track_Play:
0000143C 4A42                       		tst.w	d2
0000143E 6600                       		bne.s	@Sfx
00001440                            		
00001440 23C0 FFFF EF04             		move.l	d0,(RAM_SMEG_Buffer+SongRequest)
00001446 33C1 FFFF EF18             		move.w	d1,(RAM_SMEG_Buffer+TicksRequest)
0000144C 4E75                       		rts
0000144E                            @Sfx:
0000144E                            ; 		clr.w	(RAM_SMEG_SfxBuff+pattr_read)
0000144E                            ; 		clr.w	(RAM_SMEG_SfxBuff+CurrPattern)
0000144E                            ; 		move.l	(RAM_SMEG_SfxBuff+SongStart),(RAM_SMEG_SfxBuff+SongRead)
0000144E                            ; 		cmp.l	(RAM_SMEG_SfxBuff+SongRequest),d0
0000144E                            ; 		bne.s	@SameSfx
0000144E                            		
0000144E 23C0 FFFF EF32             		move.l	d0,(RAM_SMEG_SfxBuff+SongRequest)
00001454 33C1 FFFF EF46             		move.w	d1,(RAM_SMEG_SfxBuff+TicksRequest)
0000145A                            @SameSfx:
0000145A 4E75                       		rts
0000145C                            		
0000145C                            ; ================================================================
0000145C                            ; -------------------------------------------
0000145C                            ; Run
0000145C                            ; -------------------------------------------
0000145C                            
0000145C                            Audio_Run:
0000145C 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
00001462 6100 0000                  		bsr	@RequestSong
00001466 0896 0000                  		bclr	#bitPriority,(a6)
0000146A 6100 0000                                  bsr	@ReadRow
0000146E                            
0000146E 4DF9 FFFF EF2E               		lea	(RAM_SMEG_SfxBuff),a6
00001474 6100 0000                   		bsr	@RequestSfx
00001478 08D6 0000                  		bset	#bitPriority,(a6)
0000147C 6100 0000                  		bsr	@ReadRow
00001480                            		
00001480                            ; -------------------------
00001480                            ; MARS ONLY
00001480                            ; Transfer 68k RAM using
00001480                            ; framebuffer (offside)
00001480                            ; -------------------------
00001480                            
00001480                            ; @marsturn:
00001480                            ; 		btst	#7,(marsreg)	
00001480                            ; 		bne.s	@busymars
00001480                            ; 		
00001480                            ; 		bchg	#0,($A1518B)
00001480                            ; @waitfb:	btst	#1,($A1518B)
00001480                            ; 		bne.s	@waitfb
00001480                            ; 		lea	(RAM_SMEG_Chnls_BGM),a0
00001480                            ; 		lea	(framebuffer+$14000),a1
00001480                            ; 		move.w	#$10*max_chnl,d0
00001480                            ; @copytomars:	
00001480                            ; 		move.b	(a0)+,(a1)+
00001480                            ; 		dbf	d0,@copytomars
00001480                            ; 		bchg	#0,($A1518B)
00001480                            ; @busymars:
00001480                            
00001480                            ; -------------------------
00001480                            
00001480                            @Wait:
00001480 4E75                       		rts
00001482                            
00001482                            ; -------------------------------------------
00001482                            ; Request song
00001482                            ; -------------------------------------------
00001482                            	
00001482                            @RequestSong:
00001482 4AAE 0004                  		tst.l	SongRequest(a6)
00001486 6700                       		beq.s	@Same
00001488 0896 0002                  		bclr	#bitEnabled,(a6)
0000148C 6100 FF74                   		bsr	SMEG_StopSnd			;d0-d1 are gone
00001490 4AAE 0004                   		tst.l	SongRequest(a6)
00001494 6B00                        		bmi.s	@Same
00001496                             		
00001496 422E 0026                  		clr.b	CurrPattern(a6)
0000149A 422E 0002                  		clr.b	PatternEnd(a6)
0000149E 426E 0020                  		clr.w	PattSize(a6)
000014A2 426E 0022                  		clr.w	pattr_read(a6)
000014A6 4BF9 FFFF EF6E             		lea	(RAM_SMEG_Chnls_BGM),a5
000014AC 422E 0027                  		clr.b	PcmChnOnOff(a6)
000014B0 422E 0000                                  clr.b	DrvStatus(a6)
000014B4 6100 0000                  		bsr	SMEG_Load_SetChnls
000014B8 6100 0000                   		bsr	SMEG_Load_SetExtChnls
000014BC 08D6 0002                  		bset	#bitEnabled,(a6)
000014C0                            
000014C0 426E 0018                  		clr.w	TicksRequest(a6)
000014C4 42AE 0004                  		clr.l	SongRequest(a6)
000014C8                            @Same:
000014C8 4E75                       		rts
000014CA                            		
000014CA                            ; -------------------------------------------
000014CA                            ; Request sfx
000014CA                            ; -------------------------------------------
000014CA                            
000014CA                            @RequestSfx:
000014CA 4AAE 0004                  		tst.l	SongRequest(a6)
000014CE 67F8                       		beq.s	@Same
000014D0 6BF6                       		bmi.s	@Same
000014D2                            		
000014D2 0896 0002                  		bclr	#bitEnabled,(a6)
000014D6 422E 0026                  		clr.b	CurrPattern(a6)
000014DA 422E 0002                  		clr.b	PatternEnd(a6)
000014DE 426E 0020                  		clr.w	PattSize(a6)
000014E2 426E 0022                  		clr.w	pattr_read(a6)
000014E6                            		
000014E6 422E 0027                  		clr.b	PcmChnOnOff(a6)
000014EA 422E 0000                                  clr.b	DrvStatus(a6)
000014EE                            ;                 bset	#bitSfxOn,(a6)
000014EE 4BF9 FFFF F08E             		lea	(RAM_SMEG_Chnls_SFX),a5
000014F4 6100 0000                  		bsr	SMEG_Load_SetChnls
000014F8 6100 0000                  		bsr	SMEG_Load_FixSfx
000014FC 08D6 0002                  		bset	#bitEnabled,(a6)
00001500                            		
00001500 426E 0018                  		clr.w	TicksRequest(a6)
00001504 42AE 0004                  		clr.l	SongRequest(a6)
00001508 4E75                       		rts
0000150A                            		
0000150A                            ; -------------------------------------------
0000150A                            ; Read row
0000150A                            ; -------------------------------------------
0000150A                            
0000150A                            @ReadRow:
0000150A 0816 0002                  		btst	#bitEnabled,(a6)
0000150E 6700 FF70                  		beq	@Wait
00001512                            
00001512 046E 0001 001A             		sub.w	#1,TicksRead(a6)
00001518 6A00 FF66                  		bpl	@Wait
0000151C 3D6E 001C 001A              		move.w	TicksSet(a6),TicksRead(a6)
00001522                            
00001522                            @NewRow:
00001522 286E 000C                                  movea.l	SongRead(a6),a4
00001526                            
00001526                            ; --------------------------------
00001526                            ; New pattern
00001526                            ; --------------------------------
00001526                            
00001526                            @Next:
00001526 7A00                       		moveq	#0,d5
00001528 7C00                       		moveq	#0,d6
0000152A 3C2E 0020                   		move.w	PattSize(a6),d6
0000152E 0446 0001                    		sub.w	#1,d6
00001532 3A2E 0022                    		move.w	pattr_read(a6),d5
00001536 BC85                        		cmp.l	d5,d6
00001538 6400                        		bcc.s	@NoNextRow
0000153A                             		
0000153A 426E 0022                  		clr.w	pattr_read(a6)
0000153E 7A00                       		moveq	#0,d5
00001540 7C00                       		moveq	#0,d6
00001542 1C2E 0002                  		move.b	PatternEnd(a6),d6
00001546 1A2E 0026                  		move.b	CurrPattern(a6),d5
0000154A BC45                       		cmp.w	d5,d6
0000154C 6E00                       		bgt.s	@NotEnd
0000154E                            		
0000154E 0C2E 00FF 0003             		cmp.b	#-1,PatternLoop(a6)
00001554 6700                       		beq.s	@exit
00001556                            		
00001556 286E 0008                  		movea.l	SongStart(a6),a4
0000155A 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
0000155E 1D5C 0020                   		move.b	(a4)+,PattSize(a6)
00001562 D8FC 0006                   		adda	#6,a4
00001566 2D4C 000C                  		move.l	a4,SongRead(a6)
0000156A 1D6E 0003 0026             		move.b	PatternLoop(a6),CurrPattern(a6)
00001570 426E 001A                  		clr.w	TicksRead(a6)
00001574 4E75                       		rts
00001576                            		
00001576                            @exit:
00001576 0896 0002                  		bclr	#bitEnabled,(a6)
0000157A 4E75                       		rts
0000157C                            
0000157C                            ; --------------------------------
0000157C                            
0000157C                            @NotEnd:
0000157C 062E 0001 0026             		add.b	#1,CurrPattern(a6)
00001582 7000                       		moveq	#0,d0
00001584 102E 0026                  		move.b	CurrPattern(a6),d0
00001588 B02E 0003                  		cmp.b	PatternLoop(a6),d0
0000158C 6600                       		bne.s	@DontSaveLoop
0000158E 2D4C 0008                  		move.l	a4,SongStart(a6)
00001592                            @DontSaveLoop:
00001592 7200                       		moveq	#0,d1
00001594 121C                       		move.b	(a4)+,d1
00001596 141C                       		move.b	(a4)+,d2
00001598 E14A                       		lsl.w	#8,d2
0000159A 8242                       		or	d2,d1
0000159C 3D41 0020                  		move.w	d1,PattSize(a6)
000015A0 D8FC 0006                  		adda	#6,a4
000015A4                            		
000015A4                            ; --------------------------------
000015A4                            ; Current pattern
000015A4                            ; --------------------------------
000015A4                            
000015A4                            @NoNextRow:
000015A4 7C00                       		moveq	#0,d6
000015A6 7000                       		moveq	#0,d0
000015A8 101C                       		move.b	(a4)+,d0
000015AA                            
000015AA 4A40                       		tst.w	d0
000015AC 6600                       		bne.s	@ValidNote
000015AE                            
000015AE 066E 0001 0022             		add.w	#1,pattr_read(a6)
000015B4 2D4C 000C                  		move.l	a4,SongRead(a6)
000015B8 4E75                       		rts
000015BA                            
000015BA                            @ValidNote:
000015BA 4A00                       		tst.b	d0
000015BC 6A00                       		bpl.s	@Not80
000015BE 066E 0001 0022             		add.w	#1,pattr_read(a6)
000015C4 0880 0007                  		bclr	#7,d0
000015C8 1C1C                       		move.b	(a4)+,d6
000015CA                            @Not80:
000015CA 066E 0001 0022             		add.w	#1,pattr_read(a6)
000015D0 0440 0001                  		sub.w	#1,d0
000015D4 1D40 002A                  		move.b	d0,LastPattChn(a6)
000015D8                            
000015D8 4BF9 FFFF EF6E             		lea 	(RAM_SMEG_Chnls_BGM),a5
000015DE 0816 0000                  		btst 	#bitPriority,(a6)
000015E2 6700                       		beq.s	@MusicPrio
000015E4 4BF9 FFFF F08E             		lea 	(RAM_SMEG_Chnls_SFX),a5	
000015EA                            @MusicPrio:
000015EA C0FC 0010                  		mulu.w	#sizeof_Chn,d0
000015EE DAC0                       		adda	d0,a5
000015F0                            		
000015F0 4A46                       		tst.w	d6
000015F2 6700                       		beq.s	@NotRest
000015F4 1B46 0006                  		move.b	d6,Chn_Type(a5)
000015F8                            @NotRest:
000015F8                            
000015F8                            ; SFX: Mark used channel
000015F8                            
000015F8 0816 0000                  		btst 	#bitPriority,(a6)
000015FC 6700                       		beq.s	@MusicPrio2
000015FE 6100 0000                  		bsr	SMEG_FindPrioSlot
00001602 16BC 0001                    		move.b	#1,(a3)
00001606                            @MusicPrio2:
00001606                             
00001606                            ; -------------
00001606                            ; Note
00001606                            ; -------------
00001606                            
00001606 082D 0004 0006             		btst	#bitSameNote,Chn_Type(a5)
0000160C 6600                       		bne.s	@PlayOnly
0000160E 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
00001614 6700                       		beq.s	@NoNote
00001616                            
00001616 426D 0004                  		clr.w	Chn_Portam(a5)
0000161A 1B5C 000B                                  move.b	(a4)+,Chn_Note(a5)
0000161E 066E 0001 0022             		add.w	#1,pattr_read(a6)
00001624                            
00001624                            @PlayOnly:
00001624                            ; 		bsr	SMEG_ChannelRest
00001624                            
00001624                            @NoNote:
00001624                            
00001624                            ; -------------
00001624                            ; Instrument
00001624                            ; -------------
00001624                            
00001624 082D 0005 0006              		btst	#bitSameInst,Chn_Type(a5)
0000162A 6600                       		bne.s	@SameInst
0000162C 082D 0001 0006             		btst	#bitInst,Chn_Type(a5)
00001632 6700                       		beq.s	@NoInst
00001634                            
00001634 1B5C 0008                  		move.b	(a4)+,Chn_Inst(a5)
00001638 066E 0001 0022             		add.w	#1,pattr_read(a6)
0000163E                            
0000163E                            @SameInst:
0000163E 6100 0000                  		bsr	SMEG_SetVoice
00001642                            @NoInst:
00001642                            
00001642                            ; -------------
00001642                            ; Volume
00001642                            ; -------------
00001642                            
00001642 082D 0006 0006              		btst	#bitSameVol,Chn_Type(a5)
00001648 6600                        		bne.s	@SameVol
0000164A 082D 0002 0006             		btst	#bitVolume,Chn_Type(a5)
00001650 6700                       		beq.s	@NoVolume
00001652                            
00001652 7000                       		moveq 	#0,d0
00001654 101C                       		move.b 	(a4)+,d0
00001656 1B40 0009                  		move.b	d0,chn_vol(a5)
0000165A 066E 0001 0022             		add.w 	#1,pattr_read(a6)
00001660                            @NoVolume:
00001660                            @SameVol:
00001660 6100 0000                   		bsr	@ChnVolume
00001664                             		
00001664                            ; -------------
00001664                            ; Effect
00001664                            ; -------------
00001664                            
00001664 082D 0007 0006              		btst	#bitSameEffect,Chn_Type(a5)
0000166A 6600                        		bne.s	@SameEffect
0000166C 082D 0003 0006             		btst	#bitEffect,Chn_Type(a5)
00001672 6700                       		beq.s	@NoEffect
00001674                            
00001674 1B5C 0002                  		move.b	(a4)+,Chn_Effect(a5)
00001678 066E 0001 0022             		add.w	#1,pattr_read(a6)
0000167E 1B5C 0003                  		move.b	(a4)+,Chn_Effect+1(a5)
00001682 066E 0001 0022             		add.w	#1,pattr_read(a6)
00001688                            @SameEffect:
00001688 6100 0000                  		bsr	@ChannelEffects
0000168C                            @NoEffect:
0000168C                            
0000168C                            ; --------------
0000168C                            ; Play the note
0000168C                            ; --------------
0000168C                            
0000168C 082D 0004 0006              		btst	#bitSameNote,Chn_Type(a5)
00001692 6600                        		bne.s	@SameNote
00001694 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
0000169A 6700 FE8A                  		beq	@Next
0000169E                            @SameNote:
0000169E 6100 0000                  		bsr	@ChannelPlay
000016A2 6000 FE82                  		bra	@Next
000016A6                            
000016A6                            ; ================================================================
000016A6                            ; -------------------------------
000016A6                            ; PCM Frequencies
000016A6                            ; -------------------------------
000016A6                            
000016A6                            		
000016A6                            ; ================================================================
000016A6                            ; -------------------------------
000016A6                            ; Set Volume
000016A6                            ; -------------------------------
000016A6                            
000016A6                            @ChnVolume:
000016A6 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
000016AC 6700 0000                  		beq	@Return
000016B0                            
000016B0 0816 0000                  		btst	#bitPriority,(a6)
000016B4 6600                       		bne.s	@SFX_ModeV
000016B6 6100 0000                  		bsr	SMEG_FindPrioSlot
000016BA 4A13                         		tst.b	(a3)
000016BC 6600 0000                    		bne	@Return
000016C0                            @SFX_ModeV:
000016C0                            
000016C0 4A2D 0007                  		tst.b	Chn_ID(a5)
000016C4 6B00 0000                  		bmi	@ChnVol_PSG
000016C8 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
000016CE 6C00 0000                  		bge	@ChnVol_PCM
000016D2                            		
000016D2 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
000016D8 6600                       		bne.s	@NotSmplChk
000016DA 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
000016E0 6600 0000                  		bne	@Return
000016E4                            @NotSmplChk:
000016E4                            
000016E4                            ; -------------------------------
000016E4                            ; FM Volume
000016E4                            ; -------------------------------
000016E4                            
000016E4 6100 0000                  		bsr	ChnlFM_srchIns
000016E8 223C 7F7F 7F7F             		move.l	#$7F7F7F7F,d1
000016EE 0C42 FFFF                  		cmp.w	#-1,d2
000016F2 6700 0000                  		beq	@ForceOff
000016F6 0802 0007                   		btst	#7,d2
000016FA 6600 0000                   		bne	@ForceOff
000016FE                             		
000016FE                            ;  		cmp.b	#64,chn_vol(a5)
000016FE                            ;  		bge	@Return
000016FE                            	
000016FE D6FC 0004                   		adda.w	#4,a3
00001702 2653                       		movea.l	(a3),a3
00001704 D6FC 0015                    		adda	#$15,a3
00001708                            		
00001708 203C 4C44 4840             		move.l	#$4C444840,d0
0000170E 7200                        		moveq	#0,d1
00001710 7400                        		moveq	#0,d2
00001712 7600                        		moveq	#0,d3
00001714 162D 0007                   		move.b	chn_id(a5),d3
00001718 0243 0003                   		and.w	#%11,d3
0000171C                            
0000171C                             		;TODO: checar bien los TL
0000171C 122B 0003                   		move.b	3(a3),d1
00001720 142D 0009                   		move.b	chn_vol(a5),d2
00001724 0402 0040                   		sub.b	#64,d2
00001728 9202                        		sub.b	d2,d1
0000172A E189                        		lsl.l	#8,d1
0000172C                             		
0000172C 122B 0002                   		move.b	2(a3),d1
00001730 142D 0009                   		move.b	chn_vol(a5),d2
00001734 0402 0040                   		sub.b	#64,d2
00001738 9202                        		sub.b	d2,d1
0000173A E189                         		lsl.l	#8,d1
0000173C                              		
0000173C 122B 0001                   		move.b	1(a3),d1
00001740 142D 0009                   		move.b	chn_vol(a5),d2
00001744 0402 0040                   		sub.b	#64,d2
00001748 9202                        		sub.b	d2,d1
0000174A E189                         		lsl.l	#8,d1
0000174C                              		
0000174C 1213                        		move.b	(a3),d1
0000174E 142D 0009                   		move.b	chn_vol(a5),d2
00001752 0402 0040                   		sub.b	#64,d2
00001756 9202                        		sub.b	d2,d1
00001758                            
00001758                            @ForceOff:
00001758 6100 0000                   		bsr	SMEG_Z80_OFF
0000175C                            ;  		or.b	d3,d0
0000175C                            ;  		bsr	SMEG_FM_FindWrite	;oops.
0000175C E088                        		lsr.l	#8,d0
0000175E E089                        		lsr.l	#8,d1
00001760 8003                        		or.b	d3,d0
00001762 6100 0000                    		bsr	SMEG_FM_FindWrite
00001766 E088                        		lsr.l	#8,d0
00001768 E089                        		lsr.l	#8,d1
0000176A                            ;  		or.b	d3,d0
0000176A                            ;   		bsr	SMEG_FM_FindWrite
0000176A E088                        		lsr.l	#8,d0
0000176C E089                        		lsr.l	#8,d1
0000176E 8003                        		or.b	d3,d0
00001770 6100 0000                   		bsr	SMEG_FM_FindWrite
00001774 6000 0000                   		bra	SMEG_Z80_On
00001778                             	
00001778                            ; -------------------------------
00001778                            ; PSG Volume
00001778                            ; -------------------------------
00001778                            
00001778                            @ChnVol_PSG:
00001778 162D 0007                  		move.b	Chn_ID(a5),d3
0000177C 0043 001F                  		or.w	#$1F,d3
00001780 102D 000B                  		move.b	chn_note(a5),d0
00001784 0C00 00FE                  		cmp.b	#-2,d0
00001788 6700 0000                  		beq	ChnPsg_Rest
0000178C 0C00 00FF                  		cmp.b	#-1,d0
00001790 6700 0000                  		beq	ChnPsg_Rest
00001794 6000 0000                  		bra	ChnPsg_SetVol
00001798                            @Return:
00001798 4E75                       		rts
0000179A                            
0000179A                            ; -------------------------------
0000179A                            ; PCM Volume
0000179A                            ; -------------------------------
0000179A                            
0000179A                            @ChnVol_PCM:
0000179A 4E75                       		rts
0000179C                            		
0000179C                            ; ================================================================
0000179C                            ; -------------------------------
0000179C                            ; Channel effect
0000179C                            ; -------------------------------
0000179C                            
0000179C                            @ChannelEffects:
0000179C 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
000017A2 6700 0000                  		beq	@Null
000017A6                            ; 		btst 	#bitPriority,(a6)
000017A6                            ; 		bne.s	@SFX_Eff
000017A6                            ; 		bsr	SMEG_FindPrioSlot
000017A6                            ;   		tst.b	(a3)
000017A6                            ;   		bne	@Return
000017A6                            ; @SFX_Eff:
000017A6                            
000017A6 7000                       		moveq	#0,d0
000017A8 102D 0002                  		move.b	Chn_Effect(a5),d0
000017AC D040                       		add.w	d0,d0
000017AE 323B 0000                  		move.w	@EffectList(pc,d0.w),d1
000017B2 4EFB 1000                  		jmp	@EffectList(pc,d1.w)
000017B6                            		
000017B6                            ; -------------------------------
000017B6                            
000017B6 0000                       @EffectList:	dc.w	@Null-@EffectList
000017B8 0000                       		dc.w	@Flag_A-@EffectList
000017BA 0000                       		dc.w	@Null-@EffectList
000017BC 0000                       		dc.w	@Null-@EffectList
000017BE 0000                       		dc.w	@Flag_D-@EffectList
000017C0 0000                       		dc.w	@Flag_E-@EffectList
000017C2 0000                       		dc.w	@Flag_F-@EffectList
000017C4 0000                       		dc.w	@Null-@EffectList
000017C6 0000                       		dc.w	@Null-@EffectList
000017C8 0000                       		dc.w	@Null-@EffectList
000017CA 0000                       		dc.w	@Null-@EffectList
000017CC 0000                       		dc.w	@Null-@EffectList
000017CE 0000                       		dc.w	@Null-@EffectList
000017D0 0000                       		dc.w	@Flag_M-@EffectList
000017D2 0000                       		dc.w	@Null-@EffectList
000017D4 0000                       		dc.w	@Null-@EffectList
000017D6 0000                       		dc.w	@Null-@EffectList
000017D8 0000                       		dc.w	@Null-@EffectList
000017DA 0000                       		dc.w	@Null-@EffectList
000017DC 0000                       		dc.w	@Null-@EffectList
000017DE 0000                       		dc.w	@Null-@EffectList
000017E0 0000                       		dc.w	@Null-@EffectList
000017E2 0000                       		dc.w	@Null-@EffectList
000017E4 0000                       		dc.w	@Null-@EffectList
000017E6 0000                       		dc.w	@Flag_X-@EffectList
000017E8 0000                       		dc.w	@Null-@EffectList
000017EA 0000                       		dc.w	@Flag_Z-@EffectList
000017EC                            		even
000017EC                            
000017EC                            ; -------------------------------
000017EC                            ; Null effect
000017EC                            ; -------------------------------
000017EC                            
000017EC                            @Null:
000017EC 4E75                       		rts
000017EE                            
000017EE                            ; -------------------------------
000017EE                            ; Flag A - Set Tick rate
000017EE                            ; -------------------------------
000017EE                            
000017EE                            @Flag_A:
000017EE 7000                       		moveq	#0,d0
000017F0 426E 001C                  		clr.w	TicksSet(a6)
000017F4 102D 0003                  		move.b	Chn_Effect+1(a5),d0
000017F8 0440 0001                  		sub.w	#1,d0
000017FC 1D40 001D                  		move.b	d0,TicksSet+1(a6)
00001800 4E75                       		rts
00001802                            
00001802                            ; -------------------------------
00001802                            ; Flag D - Volume slide
00001802                            ; -------------------------------
00001802                            
00001802                            @Flag_D:
00001802 4E75                        rts
00001804                            ; 		moveq	#0,d0
00001804                            ; 		moveq	#0,d1
00001804                            ; 		move.b	Chn_Effect+1(a5),d0
00001804                            ; 		tst.b	Chn_ID(a5)
00001804                            ; 		bpl	@NotPSG
00001804                            ; 		lsl.w	#4,d0
00001804                            ; @NotPSG:
00001804                            ; 		move.b	Chn_Vol(a5),d1
00001804                            ; 		add.b	d0,d1
00001804                            ; 		move.b	d1,Chn_Vol(a5)
00001804                            ; 		bra	@ChnVolume
00001804                            
00001804                            ; -------------------------------
00001804                            ; Flag E - Portametro down
00001804                            ; -------------------------------
00001804                            
00001804                            @Flag_E:
00001804 7000                       		moveq	#0,d0
00001806 102D 0003                  		move.b	Chn_Effect+1(a5),d0
0000180A 0640 0001                  		add.w	#1,d0
0000180E 4440                       		neg.w	d0
00001810 6000                       		bra.s	@DoPortam
00001812                            
00001812                            ; -------------------------------
00001812                            ; Flag F - Portametro up
00001812                            ; -------------------------------
00001812                            
00001812                            @Flag_F:
00001812 7000                       		moveq	#0,d0
00001814 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00001818 0640 0001                  		add.w	#1,d0
0000181C                            		
0000181C                            ; ---------------------
0000181C                            
0000181C                            @DoPortam:
0000181C 382D 0004                  		move.w	Chn_Portam(a5),d4
00001820 4A44                       		tst.w	d4
00001822 6700 FF74                  		beq	@return
00001826                            		
00001826 4A2D 0007                  		tst.b	Chn_ID(a5)
0000182A 6B00                       		bmi.s	@psg_mode
0000182C 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00001832 6C00                       		bge.s	@pcm_mode
00001834                            		
00001834 E548                       		lsl.w	#2,d0
00001836 D840                       		add.w	d0,d4
00001838 3B44 0004                  		move.w	d4,Chn_Portam(a5)
0000183C 6000 0000                  		bra	SMEG_SetFreqFM
00001840                            		
00001840                            @psg_mode:
00001840 D040                       		add.w	d0,d0
00001842 9840                       		sub.w	d0,d4
00001844 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00001848 3004                       		move.w	d4,d0
0000184A 122D 0007                  		move.b	Chn_ID(a5),d1
0000184E 6000 0000                  		bra	ChnPsg_NoteFreq
00001852                            		
00001852                            @pcm_mode:
00001852 4E75                       		rts
00001854                            		
00001854                            ; -------------------------------
00001854                            ; Flag M - Set Channel Volume
00001854                            ; -------------------------------
00001854                            
00001854                            @Flag_M:
00001854 4E75                        rts
00001856                             
00001856                            ; 		moveq	#0,d0
00001856                            ; 		move.b	Chn_Effect+1(a5),d0
00001856                            ; 	;	tst.b	Chn_ID(a5)
00001856                            ; 	;	bpl	@NotPSG_H
00001856                            ; 
00001856                            ; 		neg.w	d0
00001856                            ; 		sub.w	#$D0,d0
00001856                            ; ;@NotPSG_H:
00001856                            ; 		move.b	d0,Chn_MainVol(a5)
00001856                            ; 		bra	@ChnVolume
00001856                            
00001856                            ; -------------------------------
00001856                            ; Flag X - Stereo
00001856                            ; -------------------------------
00001856                            
00001856                            @Flag_X:
00001856                            ; 		tst.b	Chn_ID(a5)
00001856                            ; 		bmi	@Null
00001856                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
00001856                            ; 		bge	@PCM_Pan
00001856                            		
00001856 1B6D 0003 000C             		move.b	Chn_Effect+1(a5),Chn_Pan(a5)
0000185C 4E75                       		rts
0000185E                            		
0000185E                            ; 		moveq	#0,d0
0000185E                            ; 		move.w	#$C0,d0
0000185E                            ;                 cmp.b	#$80,Chn_Effect+1(a5)
0000185E                            ;                 beq.s	@SetPan
0000185E                            ; 		tst.b	Chn_Effect+1(a5)
0000185E                            ; 		bmi.s	@Right
0000185E                            ; 		bpl.s	@Left
0000185E                            ; @SetPan:
0000185E                            ; 		move.b	d0,Chn_Pan(a5)
0000185E                            ; 		rts
0000185E                            ; @Left:
0000185E                            ; 		move.w	#$80,d0
0000185E                            ; 		bra.s	@SetPan
0000185E                            ; @Right:
0000185E                            ; 		move.w	#$40,d0
0000185E                            ; 		bra.s	@SetPan
0000185E                            
0000185E                            ; ; -------------------------------
0000185E                            ; ; PCM Panning
0000185E                            ; ; -------------------------------
0000185E                            ; 
0000185E                            ; @PCM_Pan:
0000185E                            ; 		if MCD
0000185E                            ; 		
0000185E                            ; 		moveq	#0,d0
0000185E                            ; 		move.b	#%11001100,d0				;TODO: dejarlo así
0000185E                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
0000185E                            ; 		beq.s	@Return2
0000185E                            ;                  
0000185E                            ;  		tst.b	Chn_Effect+1(a5)
0000185E                            ;  		bmi.s	@Right2
0000185E                            ; 		bpl.s	@Left2
0000185E                            ; 		bra	@Return2
0000185E                            ; @Right2:
0000185E                            ;  		move.b	#%10000000,d0
0000185E                            ;  		bra	@Return2
0000185E                            ; @Left2:
0000185E                            ; 		move.b	#%00001000,d0
0000185E                            ; @Return2:
0000185E                            ; 		move.b	d0,Chn_Pan(a5)
0000185E                            ; 
0000185E                            ; ; -------------------------------------------------
0000185E                            ; 
0000185E                            ;  		elseif MARS
0000185E                            ;  
0000185E                            ; 		move.w	#%11000000,d0
0000185E                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
0000185E                            ; 		beq	@Cont
0000185E                            ;  		tst.b	Chn_Effect+1(a5)
0000185E                            ;  		bmi.s	@pwmRight
0000185E                            ; 		bpl.s	@pwmLeft
0000185E                            ; 		bra	@Cont
0000185E                            ;  		
0000185E                            ; @pwmRight:
0000185E                            ;  		move.w	#%01000000,d0
0000185E                            ;  		bra.s	@Cont
0000185E                            ; @pwmLeft:
0000185E                            ; 		move.w	#%10000000,d0
0000185E                            ; 
0000185E                            ; @Cont:
0000185E                            ; 		move.b	d0,Chn_Pan(a5)   		
0000185E                            ; 		endif
0000185E                            ; 		rts
0000185E                            
0000185E                            ; ======================================================
0000185E                            ; -------------------------------
0000185E                            ; Flag Z
0000185E                            ; -------------------------------
0000185E                            
0000185E                            @Flag_Z:
0000185E 7000                       		moveq	#0,d0
00001860 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00001864 E848                       		lsr.w	#4,d0
00001866 D040                       		add.w	d0,d0
00001868 323B 0000                  		move.w	@HashList(pc,d0.w),d1
0000186C 102D 0003                  		move.b	Chn_Effect+1(a5),d0		;d0 - $0-$F argument
00001870 0200 000F                  		and.b	#$F,d0
00001874 4EFB 1000                  		jmp	@HashList(pc,d1.w)
00001878                            
00001878 FF74                       @HashList:	dc.w	@Null-@HashList		;$00
0000187A 0000                       		dc.w	@FM_Key-@HashList		;$10 - FM Keys ON/OFF
0000187C FF74                       		dc.w	@Null-@HashList			;$20
0000187E FF74                       		dc.w	@Null-@HashList			;$30
00001880 0000                       		dc.w	@PSG-@HashList			;$40 - PSG Settings
00001882 FF74                       		dc.w	@Null-@HashList			;$50
00001884 FF74                       		dc.w	@Null-@HashList			;$60
00001886 FF74                       		dc.w	@Null-@HashList			;$70
00001888 FF74                       		dc.w	@Null-@HashList			;$80
0000188A FF74                       		dc.w	@Null-@HashList			;$90
0000188C FF74                       		dc.w	@Null-@HashList			;$A0
0000188E FF74                       		dc.w	@Null-@HashList			;$B0
00001890 FF74                       		dc.w	@Null-@HashList			;$C0
00001892 FF74                       		dc.w	@Null-@HashList			;$D0
00001894 FF74                       		dc.w	@Null-@HashList			;$E0
00001896 0000                       		dc.w	@FixSfx-@HashList		;$F0 - Finish SFX flag (SFX only)
00001898                            		even
00001898                            
00001898                            ; -------------------------------
00001898                            
00001898                            @DacStatus:
00001898 4E75                        rts
0000189A                            
0000189A                            ; -------------------------------
0000189A                            
0000189A                            @FM_Key:
0000189A 0240 000F                  		and.w	#$F,d0
0000189E E948                       		lsl.w	#4,d0
000018A0 1B40 000D                  		move.b	d0,Chn_FM_Key(a5)
000018A4 4E75                       		rts
000018A6                            
000018A6                            ; -------------------------------
000018A6                            
000018A6                            @PSG:
000018A6 4E75                        rts
000018A8                            
000018A8                            ; -------------------------------
000018A8                            
000018A8                            @FixSfx:
000018A8                            ;    		btst	#bitPriority,(a6)
000018A8                            ;   		bne	@Return
000018A8                            		
000018A8                            ;  		lea	(RAM_SMEG_Buffer),a3
000018A8                            ;  		move.b	snd_flagsBGM(a3),snd_flags(a3)
000018A8                            ; 		moveq 	#0,d0
000018A8                            ;  		move.b	PsgLast(a3),d0
000018A8                            ; 		add.w	#$E0,d0
000018A8                            ; 		bsr	@PutPSG
000018A8                            
000018A8                            ;  		moveq	#0,d0
000018A8                            ;  		move.b	LastPattChn(a6),d0
000018A8                            ; 		bsr	SMEG_FindPrioSlot
000018A8                            ;   		bclr	#0,(a3)
000018A8                             		
000018A8                            ;   		bclr	#bitSfxOn,(a6)				;SFX finished playing
000018A8 4E75                       		rts
000018AA                            		
000018AA                            ; ================================================================
000018AA                            ; -------------------------------
000018AA                            ; Channel play
000018AA                            ; -------------------------------
000018AA                            
000018AA                            @ChannelPlay:	
000018AA 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
000018B0 6700 0000                  		beq	@Disabled
000018B4                            		
000018B4                            ;                 moveq	#0,d0
000018B4                            ; 		move.b	Chn_Note(a5),d0
000018B4                            ; 		sub.w	#1,Chn_Portam(a5)
000018B4                            ; 		tst.b	Chn_Portam(a5)
000018B4                            ; 		beq.s	@NoUp
000018B4                            ; 		add.b	Chn_Portam(a5),d0
000018B4                            ; 		bra.s	@NoDown
000018B4                            ; @NoUp:
000018B4                            ; 		tst.b	Chn_Portam+1(a5)
000018B4                            ; 		beq.s	@NoDown
000018B4                            ; 		sub.b	Chn_Portam+1(a5),d0
000018B4                            ; @NoDown:
000018B4                            
000018B4                            ; --------------------------------
000018B4                            
000018B4                            ; BGM: Block channel
000018B4                            
000018B4 0816 0000                  		btst 	#bitPriority,(a6)
000018B8 6600                       		bne.s	@SFX_Check
000018BA 6100 0000                  		bsr	SMEG_FindPrioSlot
000018BE 4A13                         		tst.b	(a3)
000018C0 6600 FED6                    		bne	@Return
000018C4                              		
000018C4                            ; --------------------------------
000018C4                            
000018C4                            ; SFX: Check NoteOff/NoteCut
000018C4                            ; then clear flag
000018C4                            
000018C4                            @SFX_Check:
000018C4 0816 0000                  		btst 	#bitPriority,(a6)
000018C8 6700                       		beq.s	@NotSFX
000018CA                            ; 		cmp.b	#-1,chn_note(a5)
000018CA                            ; 		beq	@DoIt
000018CA 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
000018D0 6600 0000                  		bne	@NotSFX
000018D4                            @DoIt:
000018D4 6100 0000                  		bsr	SMEG_FindPrioSlot
000018D8 4213                         		clr.b	(a3)
000018DA                            @NotSFX:
000018DA                            
000018DA                            ; --------------------------------
000018DA                            
000018DA 4A2D 0007                  		tst.b	Chn_ID(a5)
000018DE 6B00 0000                  		bmi	Chnl_PSG
000018E2 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
000018E8 6C00 0000                  		bge	@ChannelPlay_PCM
000018EC 0C2D 0002 0007             		cmp.b	#FM_3,Chn_ID(a5)
000018F2 6700 0000                  		beq	@Chn3_ChkSpecial
000018F6 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
000018FC 6700 0000                  		beq	@Chn6_ChkSmpl
00001900 6000 0000                  		bra	@ChnPlay_FM
00001904                            		
00001904                            ; -------------------------------
00001904                            ; Play FM6 or DAC sample
00001904                            ; -------------------------------
00001904                            
00001904                            @Chn6_ChkSmpl:
00001904 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
0000190A 6700 0000                  		beq	@ChnPlay_FM6
0000190E 0C2D 00FF 000B             		cmp.b	#-1,chn_note(a5)
00001914 6700 0000                  		beq	@StopSmpl
00001918 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
0000191E 6700 0000                  		beq	@StopSmpl
00001922                            		
00001922 7028                       		moveq	#$28,d0
00001924 7206                       		moveq	#6,d1
00001926 6100 0000                   		bsr	SMEG_Z80_Off
0000192A 6100 0000                  		bsr	FM_RegWrite_1
0000192E 6100 0000                  		bsr	SMEG_FM_SetPan
00001932 6100 0000                  		bsr	SMEG_Z80_On
00001936                            		
00001936                            ; 		btst 	#bitPriority,(a6)
00001936                            ; 		beq.s	@MusicPrio3
00001936                            ; 		bsr	SMEG_FindPrioSlot
00001936                            ;   		btst	#0,(a3)
00001936                            ;   		bne	@return
00001936                            ; @MusicPrio3:
00001936 6000 0000                  		bra	Audio_Sample_Play
0000193A                            
0000193A                            ; Stop
0000193A                            
0000193A                            @StopSmpl:
0000193A                            ; 		btst 	#bitPriority,(a6)
0000193A                            ; 		bne.s	@NotSfxDAC
0000193A                            ; 		bsr	SMEG_FindPrioSlot
0000193A                            ;   		bclr	#0,(a3)
0000193A                            ; @NotSfxDAC:
0000193A 6000 0000                  		bra	Audio_Sample_Stop
0000193E                            		
0000193E                            ; -------------------------------
0000193E                            ; Play FM6 Normally
0000193E                            ; -------------------------------
0000193E                            
0000193E                            @ChnPlay_FM6:
0000193E 103C 002B                  		move.b	#$2B,d0
00001942 123C 0000                  		move.b	#$00,d1
00001946 6100 0000                  		bsr	SMEG_Z80_Off
0000194A 6100 0000                  		bsr	FM_RegWrite_1
0000194E 6100 0000                  		bsr	SMEG_Z80_On
00001952 6100 0000                  		bsr	Audio_Sample_Stop
00001956 6000 0000                  		bra	@ChnPlay_FM
0000195A                            		
0000195A                            ; -------------------------------
0000195A                            ; Play FM3 Normally
0000195A                            ; -------------------------------
0000195A                            
0000195A                            @Chn3_ChkSpecial:
0000195A 6100 0000                  		bsr	SMEG_Z80_Off
0000195E 6100 0000                  		bsr	SMEG_FM_SetPan
00001962 6100 0000                  		bsr	SMEG_Z80_On
00001966                            		
00001966 082E 0003 0001             		btst	#bitSpecial3,snd_flags(a6)
0000196C 6700 0000                  		beq	@NoSpecial3
00001970                            		
00001970 6100 0000                  		bsr	ChnlFM_srchIns
00001974 0C42 FFFF                  		cmp.w	#-1,d2
00001978 6700 0000                  		beq	@NoSpecial3
0000197C 0802 0006                   		btst	#6,d2
00001980 6700 0000                   		beq	@NoSpecial3
00001984                            		
00001984                            ;   		moveq	#$22,d0
00001984                            ;  		move.w	#%00001011,d1
00001984                            ; 		bsr	FM_RegWrite_1
00001984                            		
00001984 7027                         		moveq	#$27,d0		;CH3 enable
00001986 323C 0040                   		move.w	#%01000000,d1
0000198A 6100 0000                   		bsr	SMEG_Z80_Off
0000198E 6100 0000                  		bsr	FM_RegWrite_1
00001992 6100 0000                  		bsr	SMEG_Z80_On
00001996                            		
00001996 203C A9AD AAAE              		move.l	#$A9ADAAAE,d0
0000199C 322B 000E                   		move.w	$E(a3),d1
000019A0 E059                        		ror.w	#8,d1
000019A2 6100 0000                   		bsr	SMEG_Z80_Off
000019A6 6100 0000                  		bsr	FM_RegWrite_1
000019AA E088                       		lsr.l	#8,d0
000019AC E089                       		lsr.l	#8,d1
000019AE 6100 0000                  		bsr	FM_RegWrite_1
000019B2 E088                       		lsr.l	#8,d0
000019B4 322B 000C                   		move.w	$C(a3),d1
000019B8 E059                        		ror.w	#8,d1
000019BA 6100 0000                  		bsr	FM_RegWrite_1
000019BE E088                       		lsr.l	#8,d0
000019C0 E089                       		lsr.l	#8,d1
000019C2 6100 0000                  		bsr	FM_RegWrite_1	
000019C6 6100 0000                    		bsr	SMEG_Z80_On
000019CA                              		
000019CA 203C A2A6 A8AC              		move.l	#$A2A6A8AC,d0
000019D0 322B 000A                   		move.w	$A(a3),d1
000019D4 E059                        		ror.w	#8,d1
000019D6 6100 0000                   		bsr	SMEG_Z80_Off
000019DA 6100 0000                  		bsr	FM_RegWrite_1
000019DE E088                       		lsr.l	#8,d0
000019E0 E089                       		lsr.l	#8,d1
000019E2 6100 0000                  		bsr	FM_RegWrite_1
000019E6 E088                       		lsr.l	#8,d0
000019E8 322B 0008                   		move.w	8(a3),d1
000019EC E059                        		ror.w	#8,d1
000019EE 6100 0000                  		bsr	FM_RegWrite_1
000019F2 E088                       		lsr.l	#8,d0
000019F4 E089                       		lsr.l	#8,d1
000019F6 6100 0000                  		bsr	FM_RegWrite_1
000019FA 6100 0000                  		bsr	SMEG_Z80_On
000019FE                            		
000019FE 7028                       		moveq	#$28,d0
00001A00 7200                       		moveq	#0,d1
00001A02 122D 000D                  		move.b	Chn_FM_Key(a5),d1
00001A06 822D 0007                  		or.b	Chn_ID(a5),d1
00001A0A 6100 0000                  		bsr	SMEG_Z80_Off
00001A0E 6100 0000                  		bsr	FM_RegWrite_1
00001A12 6000 0000                   		bra	SMEG_Z80_On
00001A16                             		
00001A16                            @NoSpecial3:
00001A16 7200                       		moveq	#0,d1
00001A18 7027                         		moveq	#$27,d0
00001A1A 6100 0000                   		bsr	SMEG_Z80_Off
00001A1E 6100 0000                  		bsr	FM_RegWrite_1
00001A22 6100 0000                   		bsr	SMEG_Z80_On
00001A26                            		
00001A26                            ; -------------------------------
00001A26                            ; Play FM1-FM5 normally
00001A26                            ; -------------------------------
00001A26                            
00001A26                            @ChnPlay_FM:
00001A26 6100 0000                  		bsr	SMEG_Z80_Off
00001A2A 6100 0000                  		bsr	SMEG_FM_SetPan
00001A2E 6100 0000                  		bsr	SMEG_Z80_On
00001A32                            		
00001A32 7000                        		moveq	#0,d0
00001A34 102D 000B                  		move.b	chn_note(a5),d0
00001A38 0C00 00FF                  		cmp.b	#-1,d0
00001A3C 6700 0000                  		beq	SMEG_FM_KeysOff
00001A40 0C00 00FE                  		cmp.b	#-2,d0
00001A44 6700 0000                  		beq	SMEG_FM_TotLvlOff
00001A48                            		
00001A48 6100 0000                  		bsr	SMEG_FM_KeysOff
00001A4C                            		
00001A4C 7000                       		moveq	#0,d0
00001A4E 7200                       		moveq	#0,d1
00001A50 102D 000B                  		move.b	chn_note(a5),d0
00001A54 D040                       		add.w	d0,d0
00001A56 45F9 0000 0000              		lea	(FreqList_FM),a2
00001A5C 3832 0000                  		move.w	(a2,d0.w),d4
00001A60 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00001A64 6000 0000                  		bra	SMEG_SetFreqFM
00001A68                            @Disabled:
00001A68 4E75                       		rts
00001A6A                            
00001A6A                            ; -------------------------------
00001A6A                            ; Play PCM
00001A6A                            ; -------------------------------
00001A6A                            
00001A6A                            @ChannelPlay_PCM:	
00001A6A                            ; 		if MCD
00001A6A                            ; 		
00001A6A                            ; 		tst.l	SongPcmSamp(a6)
00001A6A                            ; 		beq.s	@ReturnPCM
00001A6A                            ; 		bmi.s	@ReturnPCM
00001A6A                            ; 		
00001A6A                            ;  		moveq	#0,d1
00001A6A                            ;  		move.b	Chn_ID(a5),d1
00001A6A                            ;    		and.w	#$F,d1
00001A6A                            ;  		move.b	d1,($A12000+CommDataM)
00001A6A                            ;  		move.b	Chn_Pan(a5),d1
00001A6A                            ;  		move.b	d1,($A12000+CommDataM+1)
00001A6A                            ;  		moveq	#CdTask_SetPan,d0
00001A6A                            ;  		bsr	SMEG_CD_Call
00001A6A                            ;  		
00001A6A                            ; 		moveq	#0,d1
00001A6A                            ; 		move.b	Chn_ID(a5),d1
00001A6A                            ; 		and.b	#$F,d1
00001A6A                            ; 		move.b	d1,($A12000+CommDataM)
00001A6A                            ; 		move.w	Chn_Freq(a5),($A12000+CommDataM+2)
00001A6A                            ; 		moveq	#CdTask_SetFreq,d0
00001A6A                            ; 		bsr	SMEG_CD_Call
00001A6A                            ; 		bset	d1,PcmChnOnOff(a6)
00001A6A                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
00001A6A                            ; 		moveq	#CdTask_SetOnOff,d0
00001A6A                            ; 		bsr	SMEG_CD_Call
00001A6A                            ; 		
00001A6A                            ; @ReturnPCM:
00001A6A                            ;  		elseif MARS
00001A6A                            ; 
00001A6A                            ; 		tst.l	SongPcmSamp(a6)
00001A6A                            ; 		beq.s	@ReturnPCM
00001A6A                            ; 		bmi.s	@ReturnPCM
00001A6A                            ; 		
00001A6A                            ;   		moveq	#0,d1
00001A6A                            ;   		moveq	#0,d2
00001A6A                            ;        		move.b	Chn_ID(a5),d1
00001A6A                            ;      		and.w	#$F,d1
00001A6A                            ;       		or.b	Chn_Pan(a5),d1
00001A6A                            ;       		move.b	Chn_Note(a5),d2
00001A6A                            ;   		move.b	d1,(marsreg+comm2)			; Pan+Channel set
00001A6A                            ;   		move.b	d2,(marsreg+comm2+1)			; Note
00001A6A                            ;   		moveq 	#marscall_Play,d0
00001A6A                            ;   		bsr	SMEG_MARS_Call
00001A6A                            ; @ReturnPCM:
00001A6A                            ;  		endif
00001A6A                             		
00001A6A 4E75                       		rts
00001A6C                            
00001A6C                            ; --------------------------
00001A6C                            ; Set FM Frequency
00001A6C                            ; autodetected channel
00001A6C                            ; 
00001A6C                            ; d4 - Freq
00001A6C                            ; --------------------------
00001A6C                            
00001A6C                            SMEG_SetFreqFM:
00001A6C 7A00                       		moveq	#0,d5
00001A6E 1A2D 0007                  		move.b	Chn_ID(a5),d5
00001A72 0C05 0004                  		cmp.b	#4,d5
00001A76 6D00                       		blt.s	@FirstFM
00001A78 0405 0004                  		sub.b	#4,d5
00001A7C                            @FirstFM:
00001A7C 303C 00A4                  		move.w	#$A4,d0
00001A80 D005                       		add.b	d5,d0
00001A82 7200                       		moveq	#0,d1
00001A84 E15C                       		rol.w	#8,d4
00001A86 1204                       		move.b	d4,d1
00001A88                            		
00001A88 6100 0000                  		bsr	SMEG_Z80_Off
00001A8C 6100 0000                  		bsr	SMEG_FM_FindWrite
00001A90 303C 00A0                  		move.w	#$A0,d0
00001A94 D005                       		add.b	d5,d0
00001A96 7200                       		moveq	#0,d1
00001A98 E15C                       		rol.w	#8,d4
00001A9A 1204                       		move.b	d4,d1
00001A9C 6100 0000                  		bsr	SMEG_FM_FindWrite
00001AA0                            
00001AA0 7028                       		moveq	#$28,d0
00001AA2 7200                       		moveq	#0,d1
00001AA4 122D 000D                  		move.b	Chn_FM_Key(a5),d1
00001AA8 822D 0007                  		or.b	Chn_ID(a5),d1
00001AAC 6100 0000                  		bsr	FM_RegWrite_1
00001AB0 6000 0000                  		bra	SMEG_Z80_On
00001AB4                            		
00001AB4                            ; Turn Total Level (the volume) off 
00001AB4                            
00001AB4                            SMEG_FM_TotLvlOff:
00001AB4 162D 0007                   		move.b	chn_id(a5),d3
00001AB8 0243 0003                   		and.w	#%11,d3
00001ABC 203C 4C44 4840             		move.l	#$4C444840,d0
00001AC2 323C 007F                  		move.w	#$7F,d1
00001AC6 6100 0000                   		bsr	SMEG_Z80_OFF
00001ACA 8003                        		or.b	d3,d0
00001ACC 6100 0000                   		bsr	SMEG_FM_FindWrite	;oops.
00001AD0 E088                        		lsr.l	#8,d0
00001AD2 8003                        		or.b	d3,d0
00001AD4 6100 0000                    		bsr	SMEG_FM_FindWrite
00001AD8 E088                        		lsr.l	#8,d0
00001ADA 8003                        		or.b	d3,d0
00001ADC 6100 0000                    		bsr	SMEG_FM_FindWrite
00001AE0 E088                        		lsr.l	#8,d0
00001AE2 8003                        		or.b	d3,d0
00001AE4 6100 0000                   		bsr	SMEG_FM_FindWrite
00001AE8 6100 0000                   		bsr	SMEG_Z80_On
00001AEC                             		
00001AEC                            ; Turn FM Keys off
00001AEC                            
00001AEC                            SMEG_FM_KeysOff:
00001AEC 7028                       		moveq	#$28,d0
00001AEE 7200                       		moveq	#0,d1
00001AF0 D22D 0007                  		add.b	Chn_ID(a5),d1
00001AF4 6100 0000                   		bsr	SMEG_Z80_Off
00001AF8 6100 0000                  		bsr	FM_RegWrite_1
00001AFC 6000 0000                  		bra	SMEG_Z80_On
00001B00                            		
00001B00                            ; ----------------------------
00001B00                            ; PSG Channels
00001B00                            ; ----------------------------
00001B00                            
00001B00                            Chnl_PSG:
00001B00 122D 0007                  		move.b	Chn_ID(a5),d1
00001B04 0C2D 00E0 0007             		cmp.b	#NOISE,Chn_ID(a5)
00001B0A 6700                       		beq.s	Chnl_Noise
00001B0C                            
00001B0C 3601                       		move.w	d1,d3
00001B0E 0043 001F                  		or.w	#$1F,d3
00001B12 102D 000B                  		move.b	chn_note(a5),d0
00001B16 0C00 00FE                  		cmp.b	#-2,d0
00001B1A 6700                       		beq.s	ChnPsg_Rest
00001B1C 0C00 00FF                  		cmp.b	#-1,d0
00001B20 6700                       		beq.s	ChnPsg_Rest
00001B22                            		
00001B22 45F9 0000 0000             		lea	(FreqList_PSG),a2
00001B28 D040                       		add.w	d0,d0
00001B2A 3032 0000                  		move.w	(a2,d0.w),d0
00001B2E 3B40 0004                  		move.w	d0,Chn_Portam(a5)
00001B32 6100 0000                  		bsr	ChnPsg_NoteFreq
00001B36                            		
00001B36                            ChnPsg_SetVol:
00001B36 0043 0010                  		or.w	#$10,d3
00001B3A 0043 000F                  		or.w	#$F,d3
00001B3E 4A2D 0009                  		tst.b	chn_vol(a5)
00001B42 6700                       		beq.s	ChnPsg_DoVol
00001B44 0243 00F0                  		and.w	#$F0,d3
00001B48 0C2D 0040 0009             		cmp.b	#64,chn_vol(a5)
00001B4E 6C00                         		bge.s	ChnPsg_DoVol
00001B50 7000                         		moveq	#0,d0
00001B52 102D 0009                     		move.b	chn_vol(a5),d0
00001B56 4440                        		neg.w	d0
00001B58 E448                          		lsr.w	#2,d0
00001B5A 0240 000F                    		and.w	#%1111,d0
00001B5E 8640                         		or.w	d0,d3
00001B60                            
00001B60                            
00001B60                            ChnPsg_DoVol:
00001B60 13C3 00C0 0011              		move.b	d3,(sound_psg)
00001B66                            Chnl_Return:
00001B66 4E75                       		rts
00001B68                            		
00001B68                            ChnPsg_Rest:
00001B68 61F6                        		bsr.s	ChnPsg_DoVol
00001B6A                            ; 		btst 	#bitPriority,(a6)
00001B6A                            ; 		bne.s	Chnl_Return
00001B6A                            ; 		bsr	SMEG_FindPrioSlot
00001B6A                            ;   		bclr	#0,(a3)
00001B6A 4E75                         		rts
00001B6C                              		
00001B6C                            ; ----------------------------
00001B6C                            ; PSG Noise channel
00001B6C                            ; ----------------------------
00001B6C                            
00001B6C                            Chnl_NOISE:
00001B6C 246E 0010                  		movea.l	snd_instr(a6),a2
00001B70 302A 0004                  		move.w	instDNoise(a2),d0
00001B74 D4C0                       		adda	d0,a2
00001B76                            		
00001B76 303C 0000                   		move.w	#%000,d0
00001B7A                            @next:
00001B7A 4A52                       		tst.w	(a2)
00001B7C 6B00                       		bmi.s	@default
00001B7E 7400                       		moveq	#0,d2
00001B80 142D 0008                  		move.b	chn_inst(a5),d2
00001B84 B452                       		cmp.w	(a2),d2
00001B86 6700                       		beq.s	@found
00001B88 D4FC 0004                  		adda	#4,a2
00001B8C 60EC                       		bra.s	@next
00001B8E                            @found:
00001B8E 302A 0002                   		move.w	2(a2),d0
00001B92                            
00001B92                            @default:
00001B92 323C 00E0                  		move.w	#$E0,d1
00001B96 3601                       		move.w	d1,d3
00001B98 0043 001F                  		or.w	#$1F,d3
00001B9C                            
00001B9C 142D 000B                  		move.b	chn_note(a5),d2
00001BA0 0C02 00FF                  		cmp.b	#-1,d2
00001BA4 67C2                       		beq.s	ChnPsg_Rest
00001BA6 0C02 00FE                  		cmp.b	#-2,d2
00001BAA 67BC                       		beq.s	ChnPsg_Rest
00001BAC                            		
00001BAC 08AE 0002 0001             		bclr	#bitTone3,snd_flags(a6)
00001BB2 0C40 0003                  		cmp.w	#%011,d0
00001BB6 6700                       		beq.s	@valdnoise
00001BB8 0C40 0007                  		cmp.w	#%111,d0
00001BBC 6600                       		bne.s	@deftone
00001BBE                            @valdnoise:
00001BBE 08EE 0002 0001             		bset	#bitTone3,snd_flags(a6)
00001BC4 13FC 00DF 00C0 0011        		move.b	#$C0|$1F,(sound_psg)
00001BCC 8240                       		or.w	d0,d1
00001BCE 13C1 00C0 0011             		move.b	d1,(sound_psg)
00001BD4                            		
00001BD4 102D 000B                  		move.b	chn_note(a5),d0
00001BD8 0C00 00FF                  		cmp.b	#-1,d0
00001BDC 6700 FF8A                  		beq	ChnPsg_Rest
00001BE0 0C00 00FE                  		cmp.b	#-2,d0
00001BE4 6700 FF82                  		beq	ChnPsg_Rest
00001BE8 0640 000C                  		add.w	#12,d0		; TODO: checar
00001BEC 323C 00C0                  		move.w	#$C0,d1		; PSG3 freq
00001BF0                            		
00001BF0 45F9 0000 0000             		lea	(FreqList_PSG),a2
00001BF6 D040                       		add.w	d0,d0
00001BF8 3032 0000                  		move.w	(a2,d0.w),d0
00001BFC 3B40 0004                  		move.w	d0,Chn_Portam(a5)
00001C00 6000 0000                  		bra	ChnPsg_NoteFreq
00001C04                            		
00001C04                            ; 		move.w	#$E0,d3		; NOISE volume
00001C04                            ; 		bra	ChnPsg_SetVol
00001C04                            		
00001C04                            @deftone:
00001C04 3601                       		move.w	d1,d3
00001C06 3400                       		move.w	d0,d2
00001C08 0242 0007                  		and.w	#%111,d2
00001C0C 8242                       		or.w	d2,d1
00001C0E 13C1 00C0 0011             		move.b	d1,(sound_psg)
00001C14 4E75                       		rts
00001C16                            		
00001C16                            ; 		move.w	#$E0,d3
00001C16                            ; 		bra	ChnPsg_SetVol
00001C16                            		
00001C16                            ; ----------------------------
00001C16                            ; PSG Noise channel Tone 3
00001C16                            ; 
00001C16                            ; input:
00001C16                            ; d0 - freq
00001C16                            ; d1 - channel
00001C16                            ; 
00001C16                            ; returns:
00001C16                            ; d3 - last psg freq | channel
00001C16                            ; ----------------------------
00001C16                            
00001C16                            ChnPsg_NoteFreq:
00001C16 3601                       		move.w	d1,d3
00001C18 3400                       		move.w	d0,d2
00001C1A 0242 000F                  		and.w	#%1111,d2
00001C1E 8242                       		or.w	d2,d1
00001C20 13C1 00C0 0011             		move.b	d1,(sound_psg)
00001C26 E848                       		lsr.w	#4,d0
00001C28 0240 003F                  		and.w	#%00111111,d0
00001C2C 13C0 00C0 0011             		move.b	d0,(sound_psg)
00001C32 4E75                       		rts
00001C34                            
00001C34                            ; -------------------------------
00001C34                            ; PSG Frequencies
00001C34                            ; -------------------------------
00001C34                            
00001C34                            FreqList_PSG:
00001C34 0000                       		dc.w 0		;C-0 $0
00001C36 0000                       		dc.w 0
00001C38 0000                       		dc.w 0
00001C3A 0000                       		dc.w 0
00001C3C 0000                       		dc.w 0
00001C3E 0000                       		dc.w 0
00001C40 0000                       		dc.w 0
00001C42 0000                       		dc.w 0
00001C44 0000                       		dc.w 0
00001C46 0000                       		dc.w 0
00001C48 0000                       		dc.w 0
00001C4A 0000                       		dc.w 0
00001C4C                            		
00001C4C 0000                       		dc.w 0		;C-1 $C
00001C4E 0000                       		dc.w 0
00001C50 0000                       		dc.w 0
00001C52 0000                       		dc.w 0
00001C54 0000                       		dc.w 0
00001C56 0000                       		dc.w 0
00001C58 0000                       		dc.w 0
00001C5A 0000                       		dc.w 0
00001C5C 0000                       		dc.w 0
00001C5E 0000                       		dc.w 0
00001C60 0000                       		dc.w 0
00001C62 0000                       		dc.w 0
00001C64                            		
00001C64 0000                       		dc.w 0		;C-2 $18
00001C66 0000                       		dc.w 0
00001C68 0000                       		dc.w 0
00001C6A 0000                       		dc.w 0
00001C6C 0000                       		dc.w 0
00001C6E 0000                       		dc.w 0
00001C70 0000                       		dc.w 0
00001C72 0000                       		dc.w 0
00001C74 0000                       		dc.w 0
00001C76 0000                       		dc.w 0
00001C78 0000                       		dc.w 0
00001C7A 0000                       		dc.w 0
00001C7C                            
00001C7C 0000                       		dc.w 0		;C-3 $24
00001C7E 0000                       		dc.w 0
00001C80 0000                       		dc.w 0
00001C82 0000                       		dc.w 0
00001C84 0000                       		dc.w 0
00001C86 0000                       		dc.w 0
00001C88 0000                       		dc.w 0
00001C8A 0000                       		dc.w 0
00001C8C 0000                       		dc.w 0
00001C8E 03F8                       		dc.w $3F8
00001C90 03BF                                       dc.w $3BF
00001C92 0389                                       dc.w $389
00001C94                                            
00001C94 0356                       		dc.w $356	;C-4 $30
00001C96 0326                                       dc.w $326
00001C98 02F9                                       dc.w $2F9
00001C9A 02CE                                       dc.w $2CE
00001C9C 02A5                                       dc.w $2A5
00001C9E 0280                                       dc.w $280
00001CA0 025C                                       dc.w $25C
00001CA2 023A                                       dc.w $23A
00001CA4 021A                                       dc.w $21A
00001CA6 01FB                       		dc.w $1FB
00001CA8 01DF                                       dc.w $1DF
00001CAA 01C4                                       dc.w $1C4
00001CAC                                            
00001CAC 01AB                                       dc.w $1AB	;C-5 $3C
00001CAE 0193                                       dc.w $193
00001CB0 017D                                       dc.w $17D
00001CB2 0167                                       dc.w $167
00001CB4 0153                                       dc.w $153
00001CB6 0140                                       dc.w $140
00001CB8 012E                       		dc.w $12E
00001CBA 011D                                       dc.w $11D
00001CBC 010D                                       dc.w $10D
00001CBE 00FE                                       dc.w $FE
00001CC0 00EF                                       dc.w $EF
00001CC2 00E2                                       dc.w $E2
00001CC4                                            
00001CC4 00D6                                       dc.w $D6	;C-6 $48
00001CC6 00C9                                       dc.w $C9
00001CC8 00BE                                       dc.w $BE
00001CCA 00B4                                       dc.w $B4
00001CCC 00A9                       		dc.w $A9
00001CCE 00A0                                       dc.w $A0
00001CD0 0097                                       dc.w $97
00001CD2 008F                                       dc.w $8F
00001CD4 0087                                       dc.w $87
00001CD6 007F                                       dc.w $7F
00001CD8 0078                                       dc.w $78
00001CDA 0071                                       dc.w $71
00001CDC                                            
00001CDC 006B                                       dc.w $6B	;C-7 $54
00001CDE 0065                                       dc.w $65
00001CE0 005F                       		dc.w $5F
00001CE2 005A                                       dc.w $5A
00001CE4 0055                                       dc.w $55
00001CE6 0050                                       dc.w $50
00001CE8 004B                                       dc.w $4B
00001CEA 0047                                       dc.w $47
00001CEC 0043                                       dc.w $43
00001CEE 0040                                       dc.w $40
00001CF0 003C                                       dc.w $3C
00001CF2 0039                                       dc.w $39
00001CF4                                            
00001CF4 0036                       		dc.w $36	;C-8 $60
00001CF6 0033                                       dc.w $33
00001CF8 0030                                       dc.w $30
00001CFA 002D                                       dc.w $2D
00001CFC 002B                                       dc.w $2B
00001CFE 0028                                       dc.w $28
00001D00 0026                                       dc.w $26
00001D02 0024                                       dc.w $24
00001D04 0022                                       dc.w $22
00001D06 0020                                       dc.w $20
00001D08 001F                       		dc.w $1F
00001D0A 001D                                       dc.w $1D
00001D0C                                            
00001D0C 001B                                       dc.w $1B	;C-9 $6C
00001D0E 001A                                       dc.w $1A
00001D10 0018                                       dc.w $18
00001D12 0017                                       dc.w $17
00001D14 0016                                       dc.w $16
00001D16 0015                                       dc.w $15
00001D18 0013                                       dc.w $13
00001D1A 0012                                       dc.w $12
00001D1C 0011                       		dc.w $11
00001D1E 0010                        		dc.w $10 ;Custom...
00001D20 0009                        		dc.w $9
00001D22 0008                        		dc.w $8
00001D24                            
00001D24                            		even
00001D24                            		
00001D24                            ; -------------------------------
00001D24                            ; FM Frequencies
00001D24                            ; -------------------------------
00001D24                            
00001D24                            FreqList_FM:
00001D24                            ; 		dc.w $269	;NULL
00001D24 028D                       		dc.w $28d	;C-0 $00
00001D26 02B4                       		dc.w $2b4
00001D28 02DD                       		dc.w $2dd
00001D2A 0309                       		dc.w $309
00001D2C 0337                       		dc.w $337
00001D2E 0368                       		dc.w $368
00001D30 039C                       		dc.w $39c
00001D32 03D3                       		dc.w $3d3
00001D34 040D                       		dc.w $40d
00001D36 044B                       		dc.w $44b
00001D38 048C                       		dc.w $48c
00001D3A 0269                       		dc.w $269
00001D3C 028D                       		dc.w $28d	;C-1 $0C
00001D3E 02B4                       		dc.w $2b4
00001D40 02DD                       		dc.w $2dd
00001D42 0309                       		dc.w $309
00001D44 0337                       		dc.w $337
00001D46 0368                       		dc.w $368
00001D48 039C                       		dc.w $39c
00001D4A 03D3                       		dc.w $3d3
00001D4C 040D                       		dc.w $40d
00001D4E 044B                       		dc.w $44b
00001D50 048C                       		dc.w $48c
00001D52 0A69                       		dc.w $a69
00001D54 0A8D                       		dc.w $a8d	;C-2 $18
00001D56 0AB4                       		dc.w $ab4
00001D58 0ADD                       		dc.w $add
00001D5A 0B09                       		dc.w $b09
00001D5C 0B37                       		dc.w $b37
00001D5E 0B68                       		dc.w $b68
00001D60 0B9C                       		dc.w $b9c
00001D62 0BD3                       		dc.w $bd3
00001D64 0C0D                       		dc.w $c0d
00001D66 0C4B                       		dc.w $c4b
00001D68 0C8C                       		dc.w $c8c
00001D6A 1269                       		dc.w $1269
00001D6C 128D                       		dc.w $128d	;C-3 $24
00001D6E 12B4                       		dc.w $12b4
00001D70 12DD                       		dc.w $12dd
00001D72 1309                       		dc.w $1309
00001D74 1337                       		dc.w $1337
00001D76 1368                       		dc.w $1368
00001D78 139C                       		dc.w $139c
00001D7A 13D3                       		dc.w $13d3
00001D7C 140D                       		dc.w $140d
00001D7E 144B                       		dc.w $144b
00001D80 148C                       		dc.w $148c
00001D82 1A69                       		dc.w $1a69
00001D84 1A8D                       		dc.w $1a8d	;C-4 $30
00001D86 1AB4                       		dc.w $1ab4
00001D88 1ADD                       		dc.w $1add
00001D8A 1B09                       		dc.w $1b09
00001D8C 1B37                       		dc.w $1b37
00001D8E 1B68                       		dc.w $1b68
00001D90 1B9C                       		dc.w $1b9c
00001D92 1BD3                       		dc.w $1bd3
00001D94 1C0D                       		dc.w $1c0d
00001D96 1C4B                       		dc.w $1c4b
00001D98 1C8C                       		dc.w $1c8c
00001D9A 2269                       		dc.w $2269
00001D9C 228D                       		dc.w $228d	;C-5 $3C
00001D9E 22B4                       		dc.w $22b4
00001DA0 22DD                       		dc.w $22dd
00001DA2 2309                       		dc.w $2309
00001DA4 2337                       		dc.w $2337
00001DA6 2368                       		dc.w $2368
00001DA8 239C                       		dc.w $239c
00001DAA 23D3                       		dc.w $23d3
00001DAC 240D                       		dc.w $240d
00001DAE 244B                       		dc.w $244b
00001DB0 248C                       		dc.w $248c
00001DB2 2A69                       		dc.w $2a69
00001DB4 2A8D                       		dc.w $2a8d	;C-6 $48
00001DB6 2AB4                       		dc.w $2ab4
00001DB8 2ADD                       		dc.w $2add
00001DBA 2B09                       		dc.w $2b09
00001DBC 2B37                       		dc.w $2b37
00001DBE 2B68                       		dc.w $2b68
00001DC0 2B9C                       		dc.w $2b9c
00001DC2 2BD3                       		dc.w $2bd3
00001DC4 2C0D                       		dc.w $2c0d
00001DC6 2C4B                       		dc.w $2c4b
00001DC8 2C8C                       		dc.w $2c8c
00001DCA 3269                       		dc.w $3269	;C-7 $54
00001DCC 328D                       		dc.w $328d
00001DCE 32B4                       		dc.w $32b4
00001DD0 32DD                       		dc.w $32dd
00001DD2 3309                       		dc.w $3309
00001DD4 3337                       		dc.w $3337
00001DD6 3368                       		dc.w $3368
00001DD8 339C                       		dc.w $339c
00001DDA 33D3                       		dc.w $33d3
00001DDC 340D                       		dc.w $340d
00001DDE 344B                       		dc.w $344b
00001DE0 348C                       		dc.w $348c
00001DE2                            		even
00001DE2                            		
00001DE2                            ; ; -------------------------------
00001DE2                            ; ; Mute/Rest channel
00001DE2                            ; ; -------------------------------
00001DE2                            ; 
00001DE2                            ; SMEG_ChannelRest:
00001DE2                            ; 		cmp.b	#$FF,Chn_ID(a5)
00001DE2                            ; 		beq	@Return
00001DE2                            ; 		
00001DE2                            ; ; 		btst	#bitPriority,(a6)
00001DE2                            ; ; 		beq.s	@SFX_Mode
00001DE2                            ; ; 		btst	#bitSfxOn,(RAM_SMEG_SfxBuff)
00001DE2                            ; ; 		beq.s	@SFX_Mode
00001DE2                            ; ;  		lea	(RAM_SMEG_PrioList),a3
00001DE2                            ; ;  		moveq	#0,d1
00001DE2                            ; ;  		move.b	LastPattChn(a6),d1
00001DE2                            ; ; 		btst	#0,(a3,d1.w)
00001DE2                            ; ; 		bne	@Return
00001DE2                            ; ; @SFX_Mode:
00001DE2                            ; 
00001DE2                            ; 		tst.b	Chn_ID(a5)
00001DE2                            ; 		bmi.s	@PSG_Rest
00001DE2                            ; 
00001DE2                            ;                 cmp.b	#6,Chn_ID(a5)
00001DE2                            ;                 bne.s	@NoChk6
00001DE2                            ; 		btst	#bitFmDac,snd_flags(a6)
00001DE2                            ; 		bne.s	@DAC_Rest
00001DE2                            ; 
00001DE2                            ; @NoChk6:
00001DE2                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
00001DE2                            ; 		bge	@PCM_Rest
00001DE2                            ; 		
00001DE2                            ; 		moveq	#$28,d0
00001DE2                            ;                 moveq	#0,d1
00001DE2                            ; 		move.b	Chn_ID(a5),d1
00001DE2                            ; 		bsr	SMEG_Z80_Off
00001DE2                            ; 		bsr	FM_RegWrite_1
00001DE2                            ; 		bsr	SMEG_Z80_On
00001DE2                            ; 
00001DE2                            ; @Return:
00001DE2                            ; 		rts
00001DE2                            ; 
00001DE2                            ; ; -------------------------------
00001DE2                            ; ; PSG Rest
00001DE2                            ; ; -------------------------------
00001DE2                            ; 
00001DE2                            ; @PSG_Rest:
00001DE2                            ; 		moveq	#0,d0
00001DE2                            ; 		move.b	Chn_ID(a5),d0
00001DE2                            ; 		add.b	#$1F,d0
00001DE2                            ; 		move.b	d0,($C00011)
00001DE2                            ; 
00001DE2                            ; @Disabled:
00001DE2                            ; 		rts
00001DE2                            ; 
00001DE2                            ; ; -------------------------------
00001DE2                            ; ; DAC Rest
00001DE2                            ; ; -------------------------------
00001DE2                            ; 
00001DE2                            ; @DAC_Rest:
00001DE2                            ;   		bsr	SMEG_Z80_Off
00001DE2                            ; 		moveq	#$2B,d0
00001DE2                            ;                 moveq	#0,d1
00001DE2                            ;   		bsr	FM_RegWrite_1
00001DE2                            ; 
00001DE2                            ; 		moveq	#0,d0
00001DE2                            ; 		move.b	d0,($A001E0+$D)
00001DE2                            ; 		bsr	SMEG_Z80_On
00001DE2                            ; 		rts
00001DE2                            ; 
00001DE2                            ; ; -------------------------------
00001DE2                            ; ; PCM Rest
00001DE2                            ; ; -------------------------------
00001DE2                            ; 
00001DE2                            ; @PCM_Rest:
00001DE2                            ;  		if MCD
00001DE2                            ;  		
00001DE2                            ; 		tst.l	SongPcmSamp(a6)
00001DE2                            ; 		beq.s	@ReturnPCM
00001DE2                            ; 		bmi.s	@ReturnPCM
00001DE2                            ; 		
00001DE2                            ; 		moveq	#0,d1
00001DE2                            ; 		move.b	Chn_ID(a5),d1
00001DE2                            ; 		and.b	#$F,d1
00001DE2                            ; 		bclr	d1,PcmChnOnOff(a6)
00001DE2                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
00001DE2                            ; 		moveq	#CdTask_SetOnOff,d0
00001DE2                            ; 		bsr	SMEG_CD_Call
00001DE2                            ; 		
00001DE2                            ;  		elseif MARS
00001DE2                            ;  		
00001DE2                            ; 		tst.l	SongPcmSamp(a6)
00001DE2                            ; 		beq.s	@ReturnPCM
00001DE2                            ; 		bmi.s	@ReturnPCM
00001DE2                            ; 		
00001DE2                            ;   		moveq	#0,d0
00001DE2                            ;   		move.b	Chn_ID(a5),d0
00001DE2                            ;   		and.w	#$F,d0
00001DE2                            ;   		move.b	d0,(marsreg+comm2)
00001DE2                            ;   		moveq	#marscall_Stop,d0
00001DE2                            ;   		bsr	SMEG_MARS_Call
00001DE2                            ;     		
00001DE2                            ; 		endif
00001DE2                            ; @ReturnPCM:
00001DE2                            ; 		rts
00001DE2                            		
00001DE2                            ; ================================================================
00001DE2                            ; Subs
00001DE2                            ; ================================================================
00001DE2                            
00001DE2                            ; -------------------------------------------
00001DE2                            ; Extra channels communication
00001DE2                            ; -------------------------------------------
00001DE2                            
00001DE2                            SMEG_CD_Call:
00001DE2 4E75                       		rts
00001DE4                            
00001DE4                            SMEG_MARS_Call:
00001DE4 4E75                        		rts
00001DE6                             		
00001DE6                            ; -------------------------------------------
00001DE6                            ; Set instrument
00001DE6                            ; -------------------------------------------
00001DE6                            
00001DE6                            SMEG_SetVoice:
00001DE6 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00001DEC 6700 0000                  		beq	@Return
00001DF0                            		
00001DF0 0816 0000                  		btst	#bitPriority,(a6)
00001DF4 6600                       		bne.s	@SFX_ModeV
00001DF6 6100 0000                  		bsr	SMEG_FindPrioSlot
00001DFA 4A13                         		tst.b	(a3)
00001DFC 6600 0000                    		bne	@Return
00001E00                            @SFX_ModeV:
00001E00                            
00001E00                            
00001E00 4AAE 0010                  		tst.l	snd_instr(a6)
00001E04 6700 0000                  		beq	@Return
00001E08                            		
00001E08 4A2D 0007                  		tst.b	Chn_ID(a5)
00001E0C 6B00                       		bmi.s	@Return
00001E0E 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00001E14 6C00 0000                  		bge	SMEG_SetVoice_PCM
00001E18 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
00001E1E 6700 0000                  		beq	SMEG_SetVoice_DAC
00001E22                            		
00001E22 6000 0000                   		bra	SetVoice_FM
00001E26                            @Return:
00001E26 4E75                        		rts
00001E28                            		
00001E28                            ; -------------------------------------------
00001E28                            ; Send DAC
00001E28                            ; -------------------------------------------
00001E28                            
00001E28                            SMEG_SetVoice_DAC:
00001E28 6100 0000                  		bsr	ChnlFM_srchIns
00001E2C 0C42 FFFF                  		cmp.w	#-1,d2
00001E30 6700                       		beq.s	@Return
00001E32                            		
00001E32 0802 0007                   		btst	#7,d2
00001E36 6600                        		bne.s	@Sample_Mode
00001E38 08AE 0000 0001             		bclr	#bitFmDac,snd_flags(a6)
00001E3E 6000 0000                  		bra	SetVoice_FM
00001E42                             		
00001E42                            @Sample_Mode:
00001E42 08EE 0000 0001             		bset	#bitFmDac,snd_flags(a6)
00001E48 202B 0004                  		move.l	4(a3),d0
00001E4C 222B 0008                  		move.l	8(a3),d1
00001E50 0481 0000 0001             		sub.l	#1,d1
00001E56 242B 000C                  		move.l	$C(a3),d2
00001E5A 7600                       		moveq	#0,d3
00001E5C 162D 000B                  		move.b	chn_note(a5),d3
00001E60 D66B 0002                   		add.w	2(a3),d3
00001E64 6000 0000                   		bra	Audio_Sample_Set
00001E68                            @Return:
00001E68 4E75                       		rts
00001E6A                            		
00001E6A                            ; -------------------------------------------
00001E6A                            ; Send FM
00001E6A                            ; -------------------------------------------
00001E6A                            
00001E6A                            SetVoice_FM:
00001E6A 6100 0000                  		bsr	ChnlFM_srchIns
00001E6E 08AE 0003 0001             		bclr	#bitSpecial3,snd_flags(a6)
00001E74 0C42 FFFF                  		cmp.w	#-1,d2
00001E78 6700 0000                  		beq	@Return
00001E7C 0802 0007                   		btst	#7,d2
00001E80 6600 0000                   		bne	@Return
00001E84 0802 0006                   		btst	#6,d2
00001E88 6700                        		beq.s	@notFM3
00001E8A 08EE 0003 0001              		bset	#bitSpecial3,snd_flags(a6)
00001E90                            @notFM3:
00001E90                            
00001E90                            ;  		adda.w	#4,a3
00001E90 266B 0004                  		movea.l	4(a3),a3
00001E94 7000                       		moveq	#0,d0
00001E96 102D 0007                  		move.b	Chn_ID(a5),d0
00001E9A 0C00 0004                  		cmp.b	#4,d0
00001E9E 6D00                       		blt.s	@Low3
00001EA0 0400 0004                  		sub.b	#4,d0
00001EA4                            @Low3:
00001EA4                            
00001EA4 4840                       		swap	d0
00001EA6 303C 0028                  		move.w	#$28,d0
00001EAA 7200                       		moveq	#0,d1
00001EAC 122D 0007                  		move.b	Chn_ID(a5),d1
00001EB0 6100 0000                  		bsr	SMEG_Z80_Off
00001EB4 6100 0000                  		bsr	FM_RegWrite_1
00001EB8 4840                       		swap	d0
00001EBA                            
00001EBA 45FA 0000                  		lea	SMEG_FM_RegList(pc),a2
00001EBE 3C00                       		move.w	d0,d6
00001EC0 7818                       		moveq	#$18,d4
00001EC2                            @Next:
00001EC2 3A06                       		move.w	d6,d5
00001EC4 101A                       		move.b	(a2)+,d0
00001EC6 3600                       		move.w	d0,d3
00001EC8 D045                       		add.w	d5,d0
00001ECA 121B                       		move.b	(a3)+,d1
00001ECC                            
00001ECC 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
00001ED2 6C00                       		bge.s	@Chn456
00001ED4 6100 0000                  		bsr	FM_RegWrite_1
00001ED8 51CC FFE8                  		dbf	d4,@Next
00001EDC 6000                       		bra.s	@BackZ80
00001EDE                            
00001EDE                            @Chn456:
00001EDE 6100 0000                  		bsr	FM_RegWrite_2
00001EE2 51CC FFDE                  		dbf	d4,@Next
00001EE6                            @BackZ80:
00001EE6 6100 0000                  		bsr	SMEG_Z80_On
00001EEA                            @Return:
00001EEA 4E75                       		rts
00001EEC                            
00001EEC                            ; -------------------------------------------
00001EEC                            ; Set FM panning
00001EEC                            ; -------------------------------------------
00001EEC                            
00001EEC                            SMEG_FM_SetPan:
00001EEC 4A2D 0007                  		tst.b	Chn_ID(a5)
00001EF0 6B00 0000                  		bmi	@Return
00001EF4                            		
00001EF4 7200                       		moveq	#0,d1
00001EF6 122D 000C                    		move.b	chn_pan(a5),d1
00001EFA EC49                         		lsr.w	#6,d1
00001EFC 0241 0003                    		and.w	#%11,d1
00001F00 123B 1000                    		move.b	@list(pc,d1.w),d1
00001F04 0241 00C0                    		and.w	#%11000000,d1
00001F08 303C 00B4                    		move.w	#$B4,d0
00001F0C 142D 0007                    		move.b	chn_id(a5),d2
00001F10 0242 0003                    		and.w	#%11,d2
00001F14 8042                         		or.w	d2,d0
00001F16 6000 0000                   		bra	SMEG_FM_FindWrite
00001F1A                            		
00001F1A 8080 C040                  @list:		dc.b $80,$80,$C0,$40
00001F1E                            		even
00001F1E                            		
00001F1E                            		
00001F1E 303C 00B4                  		move.w	#$B4,d0
00001F22 7400                       		moveq	#0,d2
00001F24 142D 0007                  		move.b	Chn_ID(a5),d2
00001F28 7200                       		moveq	#0,d1
00001F2A 122D 000C                  		move.b	Chn_Pan(a5),d1
00001F2E                            
00001F2E 6100 0000                  		bsr	SMEG_Z80_Off
00001F32 0C02 0003                  		cmp.b	#3,d2
00001F36 6E00                       		bgt.s	@SecondFM
00001F38 D042                       		add.w	d2,d0
00001F3A 6100 0000                  		bsr	FM_RegWrite_1
00001F3E 6000                       		bra.s	@BackZ80
00001F40                            @SecondFM:
00001F40 0442 0004                  		sub.w	#4,d2
00001F44 D042                       		add.w	d2,d0
00001F46 6100 0000                  		bsr	FM_RegWrite_2
00001F4A                            @BackZ80:
00001F4A 6100 0000                  		bsr	SMEG_Z80_On
00001F4E                            @Return:
00001F4E 4E75                       		rts
00001F50                            
00001F50                            ; ---------------------
00001F50                            
00001F50                            ChnlFM_srchIns:
00001F50 266E 0010                  		movea.l	snd_instr(a6),a3
00001F54 302B 0000                   		move.w	instDYmha(a3),d0
00001F58 D6C0                        		adda	d0,a3
00001F5A                            @next:
00001F5A 4841                       		swap	d1
00001F5C 4A53                       		tst.w	(a3)
00001F5E 6B00 0000                   		bmi	@NoteOff
00001F62 7000                        		moveq	#0,d0
00001F64 102D 0008                  		move.b	chn_inst(a5),d0
00001F68 3213                       		move.w	(a3),d1
00001F6A 3401                       		move.w	d1,d2
00001F6C 0241 003F                  		and.w	#$3F,d1
00001F70 B041                       		cmp.w	d1,d0
00001F72 6700                       		beq.s	@found
00001F74 D6FC 0008                  		adda	#8,a3		;inst,oct,firstlong
00001F78 0802 0007                  		btst	#7,d2
00001F7C 6600                       		bne.s	@doit
00001F7E 0802 0006                  		btst	#6,d2
00001F82 67D6                       		beq.s	@next
00001F84                            @doit:
00001F84 D6FC 0008                  		adda	#8,a3		;scndlong,thrdlong
00001F88 60D0                       		bra.s	@next
00001F8A                            @NoteOff:
00001F8A 4841                       		swap	d1
00001F8C 74FF                       		moveq	#-1,d2
00001F8E                            @found:
00001F8E 4E75                       		rts
00001F90                            		
00001F90                            ; --------------------------------------------
00001F90                            ; Play a sample
00001F90                            ;
00001F90                            ; Input:
00001F90                            ; d0 | LONG - Start
00001F90                            ; d1 | LONG - End
00001F90                            ; d2 | LONG - Loop point
00001F90                            ;              0 = From start
00001F90                            ;             -1 = No loop
00001F90                            ; d3 | WORD - Note ($3C - default)
00001F90                            ; --------------------------------------------
00001F90                            
00001F90                            Audio_Sample_Set:
00001F90 6100 0000                  		bsr	SMEG_Z80_Off
00001F94                            		
00001F94 41F9 00A0 0180             		lea	($A00180),a0
00001F9A E198                       		rol.l	#8,d0
00001F9C 10C0                       		move.b	d0,(a0)+
00001F9E E198                       		rol.l	#8,d0
00001FA0 10C0                       		move.b	d0,(a0)+		
00001FA2 E198                       		rol.l	#8,d0
00001FA4 10C0                       		move.b	d0,(a0)+
00001FA6 E198                       		rol.l	#8,d0
00001FA8 10C0                       		move.b	d0,(a0)+
00001FAA                            		
00001FAA 0481 0000 0001              		sub.l	#1,d1
00001FB0 E199                       		rol.l	#8,d1
00001FB2 10C1                       		move.b	d1,(a0)+
00001FB4 E199                       		rol.l	#8,d1
00001FB6 10C1                       		move.b	d1,(a0)+		
00001FB8 E199                       		rol.l	#8,d1
00001FBA 10C1                       		move.b	d1,(a0)+
00001FBC E199                       		rol.l	#8,d1
00001FBE 10C1                       		move.b	d1,(a0)+
00001FC0                            		
00001FC0 7200                       		moveq	#0,d1
00001FC2 2800                       		move.l	d0,d4
00001FC4 0C82 FFFF FFFF             		cmp.l	#-1,d2
00001FCA 6700                       		beq.s	@no_loop
00001FCC 7202                       		moveq	#2,d1
00001FCE 2800                       		move.l	d0,d4
00001FD0 D882                       		add.l	d2,d4
00001FD2                            @no_loop:
00001FD2 E19C                       		rol.l	#8,d4
00001FD4 10C4                       		move.b	d4,(a0)+
00001FD6 E19C                       		rol.l	#8,d4
00001FD8 10C4                       		move.b	d4,(a0)+		
00001FDA E19C                       		rol.l	#8,d4
00001FDC 10C4                       		move.b	d4,(a0)+
00001FDE E19C                       		rol.l	#8,d4
00001FE0 10C4                       		move.b	d4,(a0)+
00001FE2                            
00001FE2 1081                       		move.b	d1,(a0)
00001FE4                            		
00001FE4 3003                       		move.w	d3,d0
00001FE6 6000 0000                  		bra	AudioSmplNote_go
00001FEA                            
00001FEA                            ; --------------------------------------------
00001FEA                            ; Stop the current sample
00001FEA                            ; --------------------------------------------
00001FEA                            
00001FEA                            Audio_Sample_Play:
00001FEA 6100 0000                  		bsr	SMEG_Z80_Off
00001FEE                            		
00001FEE 1039 00A0 018C             		move.b	($A0018C).l,d0
00001FF4 08C0 0000                  		bset	#0,d0
00001FF8 13C0 00A0 018C             		move.b	d0,($A0018C).l
00001FFE                             		
00001FFE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00002006 4E75                       		rts
00002008                            		
00002008                            ; --------------------------------------------
00002008                            ; Stop the current sample
00002008                            ; --------------------------------------------
00002008                            
00002008                            Audio_Sample_Stop:
00002008 6100 0000                  		bsr	SMEG_Z80_Off
0000200C                            		
0000200C 13FC 0040 00A0 018C        		move.b	#$40,($A0018C).l
00002014                             		
00002014 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000201C 4E75                       		rts
0000201E                            		
0000201E                            ; --------------------------------------------
0000201E                            ; Modify sample note
0000201E                            ;
0000201E                            ; d3 | WORD - Note
0000201E                            ; --------------------------------------------
0000201E                            
0000201E                            Audio_Sample_Note:
0000201E 6100 0000                  		bsr	SMEG_Z80_Off
00002022                            		
00002022                            AudioSmplNote_go:
00002022                            ; 		sub.w	#24,d0			; skip 2 octaves
00002022 ED48                       		lsl.w	#6,d0
00002024 0640 01C0                   		add.w	#$1C0,d0
00002028 13C0 00A0 00DC             		move.b	d0,($A000DC)		; ld bc,(NEW ADDRESS)
0000202E E048                       		lsr.w	#8,d0			;
00002030 13C0 00A0 00DD              		move.b	d0,($A000DD)		;
00002036                             		
00002036 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000203E 4E75                       		rts
00002040                            
00002040                            ; -------------------------------------------
00002040                            ; Send PCM/PWM
00002040                            ; -------------------------------------------
00002040                            
00002040                            SMEG_SetVoice_PCM:
00002040                            @FinishList:
00002040 4E75                       		rts
00002042                            		
00002042                            ; -------------------------------------------
00002042                            ; Reset FM
00002042                            ; -------------------------------------------
00002042                            
00002042                            SMEG_FM_Reset:
00002042 6100 0000                  		bsr	SMEG_Z80_Off
00002046                            
00002046 7028                       		moveq	#$28,d0
00002048 7200                       		moveq	#0,d1
0000204A 6100 0000                  		bsr	FM_RegWrite_1
0000204E 7028                       		moveq	#$28,d0
00002050 7201                       		moveq	#1,d1
00002052 6100 0000                  		bsr	FM_RegWrite_1
00002056 7028                       		moveq	#$28,d0
00002058 7202                       		moveq	#2,d1
0000205A 6100 0000                  		bsr	FM_RegWrite_1
0000205E 7028                       		moveq	#$28,d0
00002060 7204                       		moveq	#4,d1
00002062 6100 0000                  		bsr	FM_RegWrite_1
00002066 7028                       		moveq	#$28,d0
00002068 7205                       		moveq	#5,d1
0000206A 6100 0000                  		bsr	FM_RegWrite_1
0000206E 7028                       		moveq	#$28,d0
00002070 7206                       		moveq	#6,d1
00002072 6100 0000                  		bsr	FM_RegWrite_1
00002076                            
00002076 6000 0000                  		bra	SMEG_Z80_On
0000207A                            
0000207A                            ; -------------------------------------------
0000207A                            ; Find FM
0000207A                            ; -------------------------------------------
0000207A                            
0000207A                            SMEG_FM_FindWrite:
0000207A 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
00002080 6C00                       		bge.s	@Second
00002082 6000 0000                  		bra	FM_RegWrite_1
00002086                            @Second:
00002086 6000 0000                  		bra	FM_RegWrite_2
0000208A                            
0000208A                            ; -------------------------------------------
0000208A                            ; Write to FM register
0000208A                            ; -------------------------------------------
0000208A                            
0000208A                            FM_RegWrite_1:
0000208A 1439 00A0 4000             		move.b	($A04000).l,d2
00002090 0802 0007                  		btst	#7,d2
00002094 66F4                       		bne.s	FM_RegWrite_1
00002096 13C0 00A0 4000             		move.b	d0,($A04000).l
0000209C                            @Loop:
0000209C 1439 00A0 4000             		move.b	($A04000).l,d2
000020A2 0802 0007                  		btst	#7,d2
000020A6 66F4                       		bne.s	@Loop
000020A8 13C1 00A0 4001             		move.b	d1,($A04001).l
000020AE 4E75                       		rts
000020B0                            
000020B0                            FM_RegWrite_2:
000020B0 1439 00A0 4000             		move.b	($A04000).l,d2
000020B6 0802 0007                  		btst	#7,d2
000020BA 66F4                       		bne.s	FM_RegWrite_2
000020BC 13C0 00A0 4002             		move.b	d0,($A04002).l
000020C2                            @Loop:
000020C2 1439 00A0 4000             		move.b	($A04000).l,d2
000020C8 0802 0007                  		btst	#7,d2
000020CC 66F4                       		bne.s	@Loop
000020CE 13C1 00A0 4003             		move.b	d1,($A04003).l
000020D4 4E75                       		rts
000020D6                            		
000020D6                            SMEG_Z80_Off:
000020D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
000020DE                            @WaitZ80;\@:
000020DE 0839 0000 00A1 1100        		btst	#0,($A11100).l
000020E6 66F6                       		bne.s	@WaitZ80;\@
000020E8 4E75                       		rts
000020EA                            		
000020EA                            ; USES d2
000020EA                            
000020EA                            SMEG_Z80_On:
000020EA 1439 00A0 018C             		move.b	($A0018C),d2
000020F0 0802 0007                  		btst	#7,d2
000020F4 6700                       		beq.s	@stopped;\@
000020F6                            @busywait;\@:
000020F6 1439 00A0 4000             		move.b	($A04000).l,d2
000020FC 0802 0007                  		btst	#7,d2
00002100 66F4                       		bne.s	@busywait;\@
00002102 13FC 002A 00A0 4000        		move.b	#$2A,(sound_ym_1)
0000210A 1439 00A0 018F             		move.b	($A0018F),d2
00002110 13C2 00A0 4001             		move.b	d2,(sound_ym_2)
00002116                            @stopped;\@:
00002116 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000211E 4E75                       		rts
00002120                            		
00002120                            ; -----------------------
00002120                            ; Setup channels
00002120                            ; -----------------------
00002120                            
00002120                            SMEG_Load_SetChnls:
00002120 286E 0004                  		movea.l	SongRequest(a6),a4				;a4 - Music data
00002124 3D6E 0018 001C             		move.w	TicksRequest(a6),TicksSet(a6)
0000212A                            
0000212A                            ; -----------------------
0000212A                            ; Get the
0000212A                            ; PatternEnd/PatternLoop
0000212A                            ; numbers
0000212A                            ; -----------------------
0000212A                            
0000212A 1D5C 0002                  		move.b	(a4)+,PatternEnd(a6)
0000212E 1D5C 0003                  		move.b	(a4)+,PatternLoop(a6)
00002132                            		
00002132                            ; -----------------------
00002132                            ; Get instruments
00002132                            ; -----------------------
00002132                            
00002132 2D5C 0008                  		move.l	(a4)+,SongStart(a6)
00002136 2D5C 0010                  		move.l	(a4)+,snd_instr(a6)
0000213A                            
0000213A                            ; -----------------------
0000213A                            ; Setup the channel IDs
0000213A                            ; -----------------------
0000213A                            
0000213A 303C 0011                  		move.w	#max_chnl-1,d0
0000213E 341C                       		move.w	(a4)+,d2
00002140 0442 0001                  		sub.w	#1,d2
00002144                            @SetId:
00002144 1B7C 0001 0006             		move.b	#1,Chn_Type(a5)
0000214A 1B7C 00FF 0007             		move.b	#-1,Chn_ID(a5)
00002150 4A42                       		tst.w	d2
00002152 6B00                       		bmi.s	@Disabled
00002154 0442 0001                  		sub.w	#1,d2
00002158 1B5C 0007                  		move.b	(a4)+,Chn_ID(a5)
0000215C 1B5C 0009                   		move.b	(a4)+,Chn_Vol(a5)
00002160 1B5C 000C                   		move.b	(a4)+,Chn_Pan(a5)
00002164 161C                        		move.b	(a4)+,d3
00002166 4A2D 0007                   		tst.b	chn_id(a5)
0000216A 6B00                        		bmi.s	@is_psg
0000216C 0C2D 0010 0007              		cmp.b	#PCM_1,chn_id(a5)
00002172 6C00                        		bge.s	@is_pcm
00002174                             		
00002174 E94B                        		lsl.w	#4,d3
00002176 1B43 000D                   		move.b	d3,Chn_FM_Key(a5)
0000217A 6000                       		bra.s	@Disabled
0000217C                            @is_pcm:
0000217C 4E71                       		nop 
0000217E 6000                       		bra.s	@Disabled
00002180                            		
00002180                            @is_psg:
00002180 122D 0007                  		move.b	Chn_ID(a5),d1
00002184 0001 001F                  		or.b	#$1F,d1
00002188 13C1 00C0 0011             		move.b	d1,(sound_psg)
0000218E                             		
0000218E                            @Disabled:
0000218E DAFC 0010                  		adda 	#sizeof_Chn,a5
00002192 51C8 FFB0                  		dbf	d0,@SetId
00002196                             		
00002196                            ; ; -----------------------
00002196                            ; ; Master volumes
00002196                            ; ; -----------------------
00002196                            ; 
00002196                            ; 		moveq	#(max_chnl)-1,d0
00002196                            ; @SetVol:
00002196                            ; 		move.b	(a4)+,Chn_MainVol(a5)
00002196                            ; 		adda 	#sizeof_Chn,a5
00002196                            ; 		dbf	d0,@SetVol
00002196                            
00002196                            ; -----------------------
00002196                            ; last steps
00002196                            ; -----------------------
00002196                            
00002196 286E 0008                  		movea.l	SongStart(a6),a4
0000219A 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
0000219E 1D5C 0020                  		move.b	(a4)+,PattSize(a6)
000021A2 426E 0022                  		clr.w	pattr_read(a6)
000021A6 D8FC 0006                  		adda	#6,a4
000021AA 2D4C 000C                  		move.l	a4,SongRead(a6)
000021AE 4E75                       		rts
000021B0                            		
000021B0                            ; -----------------------
000021B0                            ; Search used slot
000021B0                            ; 
000021B0                            ; Uses d3
000021B0                            ; -----------------------
000021B0                            
000021B0                            SMEG_FindPrioSlot:
000021B0 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
000021B6                            ;  		inform 0,"%h",RAM_SMEG_PrioList
000021B6                             		
000021B6 7600                        		moveq	#0,d3
000021B8 162D 0007                   		move.b	Chn_ID(a5),d3
000021BC 0803 0007                   		btst	#7,d3
000021C0 6600                        		bne.s	@PSG_slots
000021C2 0C03 0010                   		cmp.b	#PCM_1,d3
000021C6 6C00                        		bge.s	@PCM_Slots
000021C8 0C03 0004                   		cmp.b	#4,d3
000021CC 6D00                        		blt.s	@leftFM
000021CE 0443 0001                   		sub.w	#1,d3
000021D2                            @leftFM:
000021D2 6000                       		bra.s	@set_slot
000021D4                            
000021D4                            @PSG_slots:
000021D4 EA4B                       		lsr.w	#5,d3
000021D6 0243 0003                  		and.w	#%11,d3
000021DA 0643 0006                  		add.w	#6,d3
000021DE 6000                       		bra.s	@set_slot
000021E0                            
000021E0                            @PCM_Slots:
000021E0 0443 0010                  		sub.w	#PCM_1,d3
000021E4                            @set_slot:
000021E4 D6C3                       		add.w	d3,a3
000021E6 4E75                       		rts
000021E8                            		
000021E8                            ; -----------------------
000021E8                            ; Turn off the unused
000021E8                            ; channels
000021E8                            ; -----------------------
000021E8                            
000021E8                            SMEG_Load_FixSfx:
000021E8 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
000021EE                             		
000021EE                            ; FM Check
000021EE                            
000021EE 7605                        		moveq	#6-1,d3
000021F0 7028                        		moveq	#$28,d0
000021F2 7200                        		moveq	#0,d1
000021F4                            @chknextfm1:
000021F4 4A13                       		tst.b	(a3)
000021F6 6700                       		beq.s	@off_fm
000021F8 4213                       		clr.b	(a3)
000021FA                            		
000021FA 0C01 0006                  		cmp.b	#6,d1
000021FE 6600                       		bne.s	@notdac
00002200 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
00002206 6700                       		beq.s	@notdac
00002208                            		
00002208 6100 FDFE                  		bsr	Audio_Sample_Stop
0000220C 6000                       		bra.s	@off_fm
0000220E                            		
0000220E                            @notdac:
0000220E 6100 FEC6                  		bsr	SMEG_Z80_Off
00002212 6100 FE76                  		bsr	FM_RegWrite_1
00002216 6100 FED2                  		bsr	SMEG_Z80_On
0000221A                            @off_fm:
0000221A D6FC 0001                  		adda 	#1,a3
0000221E                            
0000221E 0641 0001                  		add.w	#1,d1
00002222 0C41 0003                  		cmp.w	#3,d1
00002226 6600                       		bne.s	@nope
00002228 0641 0001                  		add.w	#1,d1
0000222C                            @nope:
0000222C 51CB FFC6                  		dbf	d3,@chknextfm1
00002230                            		
00002230                            ; PSG check
00002230                            
00002230 323C 009F                  		move.w	#$9F,d1
00002234 303C 0003                  		move.w	#4-1,d0
00002238                            @chknextpsg:
00002238 4A13                       		tst.b	(a3)
0000223A 6700                       		beq.s	@off_psg
0000223C 4213                       		clr.b	(a3)
0000223E 13C1 00C0 0011             		move.b	d1,(sound_psg)
00002244                            @off_psg:
00002244 D6FC 0001                  		adda	#1,a3
00002248 0641 0020                  		add.w	#$20,d1
0000224C 51C8 FFEA                  		dbf	d0,@chknextpsg
00002250                            		
00002250                            ; TODO: PCM check
00002250                            
00002250                            ; 		lea	(RAM_SMEG_Chnls_BGM),a5
00002250                            ; 		moveq	#(max_chnl)-1,d4
00002250                            ; @SetId:
00002250                            ; 		move.b	#$80,Chn_Pan(a5)
00002250                            ; 
00002250                            ; 		tst.b	Chn_ID(a5)
00002250                            ; 		bmi.s	@NotFM
00002250                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
00002250                            ; 		bge.s	@NotFM
00002250                            ; 
00002250                            ; 		clr.b	Chn_FM_Key(a5)
00002250                            ; 		move.b	#%00001111,Chn_FM_Key(a5)
00002250                            ; 		move.b	#$C0,Chn_Pan(a5)
00002250                            ; 		bsr	SMEG_FM_SetPan
00002250                            ; @NotFM:
00002250                            ; 		adda 	#sizeof_Chn,a5
00002250                            ; 		dbf	d4,@SetId
00002250                            		
00002250                            ; 		bsr	SMEG_Z80_Off
00002250                            ; 		moveq	#$2B,d0
00002250                            ;                 moveq	#0,d1
00002250                            ;   		bsr	FM_RegWrite_1
00002250                            ;   		
00002250                            ; 		moveq	#0,d0
00002250                            ; 		move.b	d0,($A001E0+$D)
00002250                            ; 		bsr	SMEG_Z80_On
00002250                            		
00002250 4E75                       		rts
00002252                            		
00002252                            ; -----------------------
00002252                            ; Exclusive features
00002252                            ;
00002252                            ; TODO: creo que es
00002252                            ; mala idea hacer esperar
00002252                            ; al VBlank ya que moví
00002252                            ; la rutina esta
00002252                            ; -----------------------
00002252                            
00002252                            SMEG_Load_SetExtChnls:
00002252                            		
00002252                            @Return:
00002252 4E75                       		rts
00002254                            		
00002254                            ; -------------------------------------------
00002254                            ; Reset PSG
00002254                            ; -------------------------------------------
00002254                            
00002254                            SMEG_PSG_Reset:
00002254 13FC 009F 00C0 0011        		move.b	#$9F,($C00011).l
0000225C 13FC 00BF 00C0 0011        		move.b	#$BF,($C00011).l
00002264 13FC 00DF 00C0 0011        		move.b	#$DF,($C00011).l
0000226C 13FC 00FF 00C0 0011        		move.b	#$FF,($C00011).l
00002274 4E75                       		rts
00002276                            
00002276                            ; -------------------------------------------
00002276                            ; Reset PCM
00002276                            ; -------------------------------------------
00002276                            
00002276                            SMEG_PCM_Reset:
00002276 4AAE 0014                  		tst.l	SongPcmSamp(a6)
0000227A 6700                       		beq.s	@NoResetPCM
0000227C 6B00 0000                  		bmi	@NoResetPCM
00002280                            		
00002280                            
00002280                            @NoResetPCM:
00002280 4E75                       		rts
00002282                            
00002282                            ; ================================================================
00002282                            ; -------------------------------------------------
00002282                            ; Data
00002282                            ; -------------------------------------------------
00002282                            
00002282                            ; -------------------------------
00002282                            ; FM Register list
00002282                            ; -------------------------------
00002282                            
00002282                            SMEG_FM_RegList:
00002282 B0                         		dc.b $B0
00002283 3038 343C                  		dc.b $30,$38,$34,$3C
00002287 5058 545C                  		dc.b $50,$58,$54,$5C
0000228B 6068 646C                  		dc.b $60,$68,$64,$6C
0000228F 7078 747C                  		dc.b $70,$78,$74,$7C
00002293 8088 848C                  		dc.b $80,$88,$84,$8C
00002297 4048 444C                  		dc.b $40,$48,$44,$4C
0000229C 00                         		even
0000229C                            	
0000229C                            ; -------------------------------
0000229C                            ; Z80 Driver
0000229C                            ; -------------------------------
0000229C                            
0000229C                            Z80_Driver:	incbin	"system/sound/z80/main.bin"
0000339C                            Z80_DriverEnd:
0000339C                            		even
0000339C                            		
0000339C                            ; ---------------------------------------------------
0000339C                            ; ---------------------------------------------------
0000339C                            		
0000339C                            ; ====================================================================
0000339C                            ; -------------------------------------------------
0000339C                            ; Main
0000339C                            ; -------------------------------------------------
0000339C                            
0000339C                            		include	"engine/md.asm"
0000339C                            ; ====================================================================
0000339C                            ; Main engine
0000339C                            ; ====================================================================
0000339C                            
0000339C                            		include	"engine/ram.asm"
0000339C                            ; ====================================================================
0000339C                            ; -------------------------------------------------
0000339C                            ; RAM
0000339C                            ; 
0000339C                            ; Put your features here
0000339C                            ; (players lives, keys, current level, map, etc.)
0000339C                            ; -------------------------------------------------
0000339C                            
0000339C                                            rsset	RAM_Engine
0000339C =FFFFDC00                  RAM_P1_Lives	rs.w	1
0000339C =FFFFDC02                  RAM_P1_Coins	rs.w	1
0000339C =FFFFDC04                  RAM_P1_Hits	rs.w	1
0000339C =FFFFDC06                  RAM_CurrLevel	rs.w	1
0000339C =FFFFDC08                  sizeof_engine	rs.l	0
0000339C                            ; 		inform 0,"engine ram: %h",(sizeof_engine-RAM_Engine)
0000339C                            ; 		inform 0,"engine ram: %h",(sizeof_engine-RAM_Engine)
0000339C                            
0000339C                            ; ====================================================================
0000339C                            ; -------------------------------------------------
0000339C                            ; Engine Main loop
0000339C                            ; -------------------------------------------------
0000339C                            
0000339C                            MD_Main:
0000339C 6100 D892                  		bsr	System_Init		; init System
000033A0 6100 DFF2                  		bsr	Audio_Init		; init Audio
000033A4 6100 D242                  		bsr	Video_Init		; init Video
000033A8 6100 DFD4                   		bsr	Input_Init		; init Input
000033AC                            
000033AC                            ; -------------------------------------------------
000033AC                            
000033AC 46FC 2000                   		move.w	#$2000,sr
000033B0                            Main_Loop:
000033B0 7000                       		moveq	#0,d0
000033B2 1039 FFFF DE4F             		move.b	(RAM_GameMode),d0
000033B8 E548                       		lsl.w	#2,d0
000033BA 207B 0000                  		movea.l	@list(pc,d0.w),a0
000033BE 4E90                       		jsr	(a0)
000033C0                            		
000033C0 60EE                       		bra.s	Main_Loop
000033C2                            		
000033C2                            ; ====================================================================
000033C2                            ; -------------------------------------------------
000033C2                            ; Data
000033C2                            ; -------------------------------------------------
000033C2                            
000033C2                            @list:
000033C2 0000 0000                  		dc.l	mode_Title
000033C6 0000 0000                  		dc.l	mode_Level
000033CA 0000 0000                  		dc.l	mode_Title
000033CE 0000 0000                  		dc.l	mode_Title
000033D2 0000 0000                  		dc.l	mode_Title
000033D6 0000 0000                  		dc.l	mode_Title
000033DA 0000 0000                  		dc.l	mode_Title
000033DE 0000 0000                  		dc.l	mode_Title
000033E2                            		even
000033E2                            		
000033E2                            ; ====================================================================
000033E2                            ; -------------------------------------------------
000033E2                            ; Default interrupts
000033E2                            ; -------------------------------------------------
000033E2                            
000033E2                            		include	"system/ints.asm"
000033E2                            ; ====================================================================
000033E2                            ; -------------------------------------------------
000033E2                            ; VBlank
000033E2                            ; -------------------------------------------------
000033E2                            
000033E2                            MD_Vint:
000033E2 0839 0007 FFFF DE4E         		btst	#7,(RAM_IntFlags)
000033EA 6600 0000                   		bne	@nope
000033EE 08F9 0007 FFFF DE4E         		bset	#7,(RAM_IntFlags)
000033F6 48F9 7FFF FFFF DE0C        		movem.l	a0-a6/d0-d7,(RAM_VIntRegs)
000033FE                            		
000033FE 3039 00C0 0004             		move.w	(vdp_ctrl),d0
00003404 0800 0000                  		btst	#0,d0
00003408 6700                       		beq.s	@JapAme
0000340A 303C 06BC                  		move.w	#$6BC,d0
0000340E 51C8 FFFE                  		dbf	d0,*
00003412                            @JapAme:
00003412                            
00003412 6100 DCD0                   		bsr	Input_Read
00003416 6100 D48A                  		bsr	PalFade_Upd
0000341A 6100 D710                  		bsr	DMA_Read
0000341E                            		
00003546                            		
00003546 6100 DF14                   		bsr	Audio_run			; NO MOVERLO
0000354A 4CF9 7FFF FFFF DE0C        		movem.l	(RAM_VIntRegs),a0-a6/d0-d7
00003552 08F9 0001 FFFF DE4E         		bset	#1,(RAM_IntFlags)		; VBlank done flag
0000355A 08B9 0007 FFFF DE4E         		bclr	#7,(RAM_IntFlags)
00003562                             
00003562                            @nope:
00003562 08B9 0000 FFFF DE4E         		bclr	#0,(RAM_IntFlags)		; Frame done flag
0000356A 4E73                       		rte
0000356C                             		
0000356C                            ; ====================================================================
0000356C                            ; -------------------------------------------------
0000356C                            ; HBlank
0000356C                            ; -------------------------------------------------
0000356C                            
0000356C                            MD_HInt:
0000356C 4E73                       		rte
0000356C 4E73                       		rte
0000356E                            		
0000356E                            ; ====================================================================
0000356E                            ; -------------------------------------------------
0000356E                            ; CODE
0000356E                            ; -------------------------------------------------
0000356E                            
0000356E                            		;obj already set in MARS
0000356E                            		include	"engine/modes/title/md.asm"
0000356E                            ; ====================================================================
0000356E                            ; -------------------------------------------------
0000356E                            ; Title
0000356E                            ; -------------------------------------------------
0000356E                            
0000356E                            ; ====================================================================
0000356E                            ; --------------------------------------------
0000356E                            ; RAM
0000356E                            ; --------------------------------------------
0000356E                            
0000356E                            		rsset RAM_ModeBuffer
0000356E                            ; this_counter	rs.l 1
0000356E =FFFFBC00                  model_buff	rs.b $20
0000356E =FFFFBC20                  test_val	rs.l 1
0000356E                            
0000356E                            ; ====================================================================
0000356E                            ; --------------------------------------------
0000356E                            ; Init
0000356E                            ; --------------------------------------------
0000356E                            
0000356E                            mode_Title:
00003580 46FC 2700                  		move.w	#$2700,sr
00003584 6100 D0AA                  		bsr	Video_ClearAll
00003588 6100 DE78                    		bsr	SMEG_StopSnd
0000358C                              		
0000358C 23FC 5000 0003 00C0 0004   		move.l	#$50000003,(vdp_ctrl)
00003596 41F9 0000 0000             		lea	(Art_DebugFont),a0
0000359C 303C 0000                  		move.w	#((Art_DebugFont_e-Art_DebugFont)/4)-1,d0
000035A0                            @dbg_loop:
000035A0 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
000035A6 51C8 FFF8                  		dbf	d0,@dbg_loop
000035AA 43F9 FFFF E9D0              		lea	(RAM_PalFade),a1
000035B0 41F9 0000 0000             		lea	(Pal_Title),a0
000035B6 303C 000F                  		move.w	#16-1,d0
000035BA                            @pal_loop2:
000035BA 32D8                       		move.w	(a0)+,(a1)+
000035BC 51C8 FFFC                  		dbf	d0,@pal_loop2
000035C0 337C 0644 001C             		move.w	#$644,$1C(a1)
000035C6 337C 0EEE 001E             		move.w	#$EEE,$1E(a1)
000035CC                            		
000035CC                            ; MARS: Model viewer
000035CC                            		
000035CC                            ; 		if MARS
000035CC                            ; 		
000035CC                            ; 		lea	(Asc_MarsMdl),a0
000035CC                            ; 		moveq	#0,d0
000035CC                            ; 		move.l	#$00010001,d1
000035CC                            ; 		move.w	#$580|$2000,d2
000035CC                            ; 		bsr	Video_PrintText
000035CC                            ; 		bsr	MarsMdl_Init
000035CC                            ; 
000035CC                            ; ; Else: Text
000035CC                            ; 
000035CC                            ;    		else
000035CC                               		
000035CC 41F9 0000 0000             		lea	(Asc_Karasucia),a0
000035D2 7000                       		moveq	#0,d0
000035D4 223C 0001 0001             		move.l	#$00010001,d1
000035DA 343C 2680                  		move.w	#$680|$2000,d2
000035DE 6100 D27C                  		bsr	Video_PrintText
000035E2                            		
000035E2                            ; 		lea	(Map_Title),a0
000035E2                            ;  		moveq	#0,d0
000035E2                            ;  		move.l	#$00000000,d1
000035E2                            ;    		move.l	#$0027001B,d2
000035E2                            ;    		moveq	#1,d3
000035E2                            ;    		bsr	Video_MakeMap
000035E2                            ; 		move.l	#$40200000,(vdp_ctrl)
000035E2                            ; 		lea	(Art_Title),a0
000035E2                            ; 		move.w	#(Art_Title_End-Art_Title)/4,d0
000035E2                            ; @art_loop:
000035E2                            ; 		move.l	(a0)+,(vdp_data)
000035E2                            ; 		dbf	d0,@art_loop
000035E2                            		
000035E2                            ;     		endif
000035E2                               		
000035E2 13FC 0007 FFFF ED1B          		move.b	#%111,(RAM_VidRegs+$B)
000035EA 6100 D0CA                    		bsr	Video_Update
000035EE                               		
000035EE                            ;    		if MCD=0
000035EE                            ;  		move.l	#TEST_IT,d0
000035EE                            ;  		moveq 	#2,d1
000035EE                            ;  		moveq	#0,d2
000035EE                            ;   		bsr	Audio_Track_play
000035EE                            ;   		endif
000035EE                            ;   		move.l	#TEST_IT_2,d0
000035EE                            ;   		move.w 	#2,d1
000035EE                            ;   		moveq	#0,d2
000035EE                            ;   		bsr	Audio_Track_play
000035EE                            		
000035EE                            ;  		if MCD=0
000035EE                            ; 		move.l	#TEST_WAV,d0
000035EE                            ; 		move.l	#TEST_WAV_end,d1
000035EE                            ; 		moveq	#0,d2
000035EE                            ; 		move.w	#12*4,d3
000035EE                            ; 		bsr	Audio_Sample_Set
000035EE                            ; 		bsr	Audio_Sample_Play
000035EE                            ;  		endif
000035EE                            		
000035EE 46FC 2000                   		move.w	#$2000,sr
00003604                            		
00003604                            ; --------------------------------------------
00003604                            ; Loop
00003604                            ; --------------------------------------------
00003604                            
00003604                            ; 		move.l	#$300000,(test_val)
00003604                            @loop:
00003604 6100 D288                   		bsr	Video_vsync
00003608                            		
00003608                            ;  		moveq	#0,d0
00003608                            ; 		move.l	#$00080008,d1
00003608                            ; 		move.l	(test_val),d2
00003608                            ; 		move.w	#$680|$2000,d3
00003608                            ; 		moveq	#6,d4
00003608                            ; 		bsr	Video_PrintVal
00003608                            ; 
00003608                            ;  		moveq	#0,d0
00003608                            ; 		move.l	#$00080009,d1
00003608                            ; 		move.l	(test_val),d2
00003608                            ; 		move.w	#$680|$2000,d3
00003608                            ; 		moveq	#2,d4
00003608                            ; 		bsr	Video_PrintVal
00003608                            		
00003608                            ; 		add.l	#1,(test_val)
00003608                            
00003608                            ; 		if MARS
00003608                            ; 		bsr	MarsMdl_Upd
00003608                            ; 		endif
00003608                            
00003608                            ; ------------
00003608                            ; TESTING SFX
00003608                            ; ------------
00003608                            
00003608                            ; 		if MARS|MCD=0
00003608                            ; 		btst	#bitJoyA,(RAM_Control_1+OnPress)
00003608                            ;  		beq.s	@nope
00003608                            ;   		move.l	#SndSfx_OneUp,d0
00003608                            ;   		moveq 	#0,d1
00003608                            ;   		moveq	#1,d2
00003608                            ;   		bsr	Audio_Track_play
00003608                            ; @nope:
00003608                            ; 		endif
00003608                            		
00003608                            ; ------------
00003608                            
00003608 0839 0007 FFFF DE85        		btst	#bitJoyStart,(RAM_Control_1+OnPress)
00003610 6700 FFF2                   		beq	@loop
00003614 4279 FFFF DC06              		clr.w	(RAM_CurrLevel)
0000361A 13FC 0001 FFFF DE4F        		move.b	#1,(RAM_GameMode)
00003622 4E75                       		rts
00003624                            		
00003624                            ; ====================================================================
00003624                            ; --------------------------------------------
00003624                            ; Subs
00003624                            ; --------------------------------------------
00003624                            
00003624                            BG_DEFORM:
00003624 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
0000362A 3606                       		move.w	d6,d3
0000362C 343C 00DF                  		move.w	#224-1,d2
00003630                            @loop_hor:
00003630 3003                       		move.w	d3,d0
00003632 6100 D67A                  		bsr	CalcSine
00003636 E848                       		lsr.w	#4,d0
00003638 3080                       		move.w	d0,(a0)
0000363A D0FC 0004                  		adda	#4,a0
0000363E 0643 0001                  		add.w	#1,d3
00003642 51CA FFEC                  		dbf	d2,@loop_hor
00003646                            		
00003646 41F9 FFFF E2C0             		lea	(RAM_ScrlVer),a0
0000364C 3606                       		move.w	d6,d3
0000364E 343C 0013                  		move.w	#(320/16)-1,d2
00003652                            @loop_ver:
00003652 3003                       		move.w	d3,d0
00003654 6100 D658                  		bsr	CalcSine
00003658 E848                       		lsr.w	#4,d0
0000365A 3080                       		move.w	d0,(a0)
0000365C D0FC 0004                  		adda	#4,a0
00003660 0643 0002                  		add.w	#2,d3
00003664 51CA FFEC                  		dbf	d2,@loop_ver
00003668                            		
00003668 0646 0001                  		add.w	#1,d6
0000366C 4E75                       		rts
0000366E                            	
0000366E                            ; ; --------------------------------------------
0000366E                            ; ; MARS ONLY
0000366E                            ; ; 
0000366E                            ; ; 3d test
0000366E                            ; ; --------------------------------------------
0000366E                            ; 
0000366E                            ; 		if MARS
0000366E                            ; MarsMdl_Init:
0000366E                            ; 		clr.w	(model_buff+$10)
0000366E                            ; 		bsr	MarsMdl_Set
0000366E                            ; 
0000366E                            ; ; ------------------
0000366E                            ; ; Loop
0000366E                            ; ; ------------------
0000366E                            ; 
0000366E                            ; MarsMdl_Upd:
0000366E                            ; 		move.b	(RAM_Control_1+ExOnHold),d4
0000366E                            ; 		btst	#bitJoyX,d4
0000366E                            ;  		beq.s	@not_X
0000366E                            ;  		add.w	#1,(model_buff+4)
0000366E                            ; @not_X:
0000366E                            ; 		btst	#bitJoyY,d4
0000366E                            ;  		beq.s	@not_Y
0000366E                            ;  		sub.w	#1,(model_buff+4)
0000366E                            ; @not_Y:
0000366E                            ; 		move.b	(RAM_Control_1+OnHold),d4
0000366E                            ; 		btst	#bitJoyRight,d4
0000366E                            ;  		beq.s	@not_right
0000366E                            ;  		sub.w	#1,(model_buff)
0000366E                            ; @not_right:
0000366E                            ; 		btst	#bitJoyLeft,d4
0000366E                            ;  		beq.s	@not_left
0000366E                            ;  		add.w	#1,(model_buff)
0000366E                            ; @not_left:
0000366E                            ; 		btst	#bitJoyDown,d4
0000366E                            ;  		beq.s	@not_down
0000366E                            ;  		sub.w	#1,(model_buff+2)
0000366E                            ; @not_down:
0000366E                            ; 		btst	#bitJoyUp,d4
0000366E                            ;  		beq.s	@not_up
0000366E                            ;  		add.w	#1,(model_buff+2)
0000366E                            ; @not_up:
0000366E                            ; 
0000366E                            ; 
0000366E                            ; 		move.b	(RAM_Control_1+OnPress),d4
0000366E                            ; 		btst	#bitJoyB,d4
0000366E                            ;  		beq.s	@not_B
0000366E                            ;  		add.w	#1,(model_buff+$10)
0000366E                            ;  		bsr	MarsMdl_Set
0000366E                            ; @not_B:
0000366E                            ; 		btst	#bitJoyA,d4
0000366E                            ;  		beq.s	@not_A
0000366E                            ;  		sub.w	#1,(model_buff+$10)
0000366E                            ;  		bsr	MarsMdl_Set
0000366E                            ; @not_A:
0000366E                            ; 		btst	#bitJoyC,d4
0000366E                            ;  		beq.s	@not_C
0000366E                            ;  		clr.w	(model_buff)
0000366E                            ;  		clr.w	(model_buff+2)
0000366E                            ;  		move.w	#0,(model_buff+4)
0000366E                            ;  		clr.w	(model_buff+6)
0000366E                            ;  		clr.w	(model_buff+8)
0000366E                            ;  		clr.w	(model_buff+$A)
0000366E                            ; @not_C:
0000366E                            ; 
0000366E                            ; ; Contoller 2
0000366E                            ; 
0000366E                            ; 		move.b	(RAM_Control_2+OnHold),d4
0000366E                            ; 		btst	#bitJoyRight,d4
0000366E                            ;  		beq.s	@not_right2
0000366E                            ;  		add.w	#1,(model_buff+8)
0000366E                            ; @not_right2:
0000366E                            ; 		btst	#bitJoyLeft,d4
0000366E                            ;  		beq.s	@not_left2
0000366E                            ;  		sub.w	#1,(model_buff+8)
0000366E                            ; @not_left2:
0000366E                            ; 		btst	#bitJoyDown,d4
0000366E                            ;  		beq.s	@not_down2
0000366E                            ;  		add.w	#1,(model_buff+6)
0000366E                            ; @not_down2:
0000366E                            ; 		btst	#bitJoyUp,d4
0000366E                            ;  		beq.s	@not_up2
0000366E                            ;  		sub.w	#1,(model_buff+6)
0000366E                            ; @not_up2:
0000366E                            ; 
0000366E                            ; 		btst	#bitJoyB,d4
0000366E                            ;  		beq.s	@not_B2
0000366E                            ;  		add.w	#1,(model_buff+$A)
0000366E                            ; @not_B2:
0000366E                            ; 		btst	#bitJoyA,d4
0000366E                            ;  		beq.s	@not_A2
0000366E                            ;  		sub.w	#1,(model_buff+$A)
0000366E                            ; @not_A2:
0000366E                            ; 
0000366E                            ; ; ------------------------
0000366E                            ; ; Show values
0000366E                            ; ; ------------------------
0000366E                            ; 
0000366E                            ; 		lea	(model_buff),a1
0000366E                            ; 		moveq	#2,d6
0000366E                            ; 		move.l	#$00050002,d7
0000366E                            ; @next3:
0000366E                            ; 		moveq	#0,d0
0000366E                            ; 		move.l	d7,d1
0000366E                            ; 		move.w	(a1)+,d2
0000366E                            ; 		move.w	#$2000|$580,d3
0000366E                            ; 		moveq	#1,d4
0000366E                            ; 		bsr	Video_PrintVal
0000366E                            ; 		add.l	#$00050000,d7
0000366E                            ; 		dbf	d6,@next3
0000366E                            ; 		
0000366E                            ; 		lea	(model_buff+6),a1
0000366E                            ; 		moveq	#2,d6
0000366E                            ; 		move.l	#$00050003,d7
0000366E                            ; @next4:
0000366E                            ; 		moveq	#0,d0
0000366E                            ; 		move.l	d7,d1
0000366E                            ; 		move.w	(a1)+,d2
0000366E                            ; 		move.w	#$2000|$580,d3
0000366E                            ; 		moveq	#1,d4
0000366E                            ; 		bsr	Video_PrintVal
0000366E                            ; 		add.l	#$00050000,d7
0000366E                            ; 		dbf	d6,@next4
0000366E                            ; 		
0000366E                            ; 		moveq	#0,d0
0000366E                            ; 		move.l	#$0008001A,d1
0000366E                            ; 		move.w	(marsreg+comm14),d2
0000366E                            ; 		move.w	#$2000|$580,d3
0000366E                            ; 		moveq	#1,d4
0000366E                            ; 		bsr	Video_PrintVal
0000366E                            ; 
0000366E                            ; ; 		lea	(marsreg+comm0),a1
0000366E                            ; ; 		moveq	#3,d6
0000366E                            ; ; 		move.l	#$00010019,d7
0000366E                            ; ; @next:
0000366E                            ; ; 		moveq	#0,d0
0000366E                            ; ; 		move.l	d7,d1
0000366E                            ; ; 		move.w	(a1)+,d2
0000366E                            ; ; 		move.w	#$2000|$580,d3
0000366E                            ; ; 		moveq	#1,d4
0000366E                            ; ; 		bsr	Video_PrintVal
0000366E                            ; ; 		add.l	#$00050000,d7
0000366E                            ; ; 		dbf	d6,@next
0000366E                            ; ; 		
0000366E                            ; ; 		lea	(marsreg+comm8),a1
0000366E                            ; ; 		moveq	#3,d6
0000366E                            ; ; 		move.l	#$0001001A,d7
0000366E                            ; ; @next2:
0000366E                            ; ; 		moveq	#0,d0
0000366E                            ; ; 		move.l	d7,d1
0000366E                            ; ; 		move.w	(a1)+,d2
0000366E                            ; ; 		move.w	#$2000|$580,d3
0000366E                            ; ; 		moveq	#1,d4
0000366E                            ; ; 		bsr	Video_PrintVal
0000366E                            ; ; 		add.l	#$00050000,d7
0000366E                            ; ; 		dbf	d6,@next2
0000366E                            ; 		
0000366E                            ; ; ------------------------
0000366E                            ; ; Send data
0000366E                            ; ; ------------------------
0000366E                            ; 
0000366E                            ; @busy:		tst.b	(marsreg+comm0+1)
0000366E                            ; 		bne.s	@busy
0000366E                            ; 		clr.l	(marsreg+comm4)
0000366E                            ; 		clr.l	(marsreg+comm8)
0000366E                            ; 		move.w	#$14,(marsreg+comm0)
0000366E                            ; 		lea	(marsreg+comm4),a0
0000366E                            ; 		move.w	#0,(a0)+
0000366E                            ; 		move.w	(model_buff),(a0)+
0000366E                            ; 		move.w	(model_buff+2),(a0)+
0000366E                            ; 		move.w	(model_buff+4),(a0)+
0000366E                            ;  		bset	#0,(marsreg+intctl)
0000366E                            ;  		
0000366E                            ; @busy2:		tst.b	(marsreg+comm0+1)
0000366E                            ; 		bne.s	@busy2
0000366E                            ; 		clr.l	(marsreg+comm4)
0000366E                            ; 		clr.l	(marsreg+comm8)
0000366E                            ; 		move.w	#$15,(marsreg+comm0)
0000366E                            ; 		lea	(marsreg+comm4),a0
0000366E                            ; 		move.w	#0,(a0)+
0000366E                            ; 		move.w	(model_buff+6),(a0)+
0000366E                            ; 		move.w	(model_buff+8),(a0)+
0000366E                            ; 		move.w	(model_buff+$A),(a0)+
0000366E                            ;  		bset	#0,(marsreg+intctl)
0000366E                            ; 		rts
0000366E                            ; 		
0000366E                            ; ; ------------------------------------
0000366E                            ; 
0000366E                            ; MarsMdl_Set:
0000366E                            ; 		btst	#0,(marsreg+intctl)
0000366E                            ; 		bne.s	@busyinit
0000366E                            ; 		move.w	#$10,(marsreg+comm0)
0000366E                            ; 		lea	(marsreg+comm4),a0
0000366E                            ; 		move.w	(model_buff+$10),d0
0000366E                            ; 		lsl.w	#4,d0
0000366E                            ; 		move.l	List_Models(pc,d0.w),(a0)+
0000366E                            ; 		move.w	#0,(a0)+
0000366E                            ;  		bset	#0,(marsreg+intctl)
0000366E                            ;  		
0000366E                            ;  		clr.l	(model_buff)
0000366E                            ;  		move.w	#0,(model_buff+4)
0000366E                            ;  		
0000366E                            ;  		clr.l	(model_buff+6)
0000366E                            ; 		clr.w	(model_buff+$A)
0000366E                            ; 		
0000366E                            ; ; 		move.w	(model_buff+$10),d0
0000366E                            ; ; 		lsl.w	#4,d0
0000366E                            ; ;  		lea 	List_Models+4(pc,d0.w),a0
0000366E                            ; ; 		moveq	#0,d0
0000366E                            ; ; 		move.l	#$00170001,d1
0000366E                            ; ; 		move.w	#$580|$2000,d2
0000366E                            ; ; 		bsr	Video_PrintText
0000366E                            ;  		
0000366E                            ; @busyinit:
0000366E                            ; 		rts
0000366E                            ; 		
0000366E                            ; 		endif
0000366E                            		
0000366E                            ; ====================================================================
0000366E                            ; --------------------------------------------
0000366E                            ; VBlank
0000366E                            ; --------------------------------------------
0000366E                            
0000366E                            ; ====================================================================		
0000366E                            ; --------------------------------------------
0000366E                            ; HBlank
0000366E                            ; --------------------------------------------
0000366E                            		
0000366E                            ; ====================================================================		
0000366E                            ; --------------------------------------------
0000366E                            ; Data
0000366E                            ; --------------------------------------------
0000366E                            
0000366E                            		
0000366E 4F62 6A20 2D58 2D20 202D+  Asc_MarsMdl:	dc.b "Obj -X-  -Y-  -Z-  Wld -X-  -Y-  -Z- ",$A
00003694 2020 5020 3030 3030 2030+  		dc.b "  P 0000 0000 0000   P 0000 0000 0000",$A
000036BA 2020 5220 3030 3030 2030+  		dc.b "  R 0000 0000 0000   R 0000 0000 0000",$A
000036E0 0A                         		dc.b $A
000036E1 0A                         		dc.b $A
000036E2 0A                         		dc.b $A
000036E3 0A                         		dc.b $A
000036E4 0A                         		dc.b $A
000036E5 0A                         		dc.b $A
000036E6 0A                         		dc.b $A
000036E7 0A                         		dc.b $A
000036E8 0A                         		dc.b $A
000036E9 0A                         		dc.b $A
000036EA 0A                         		dc.b $A
000036EB 0A                         		dc.b $A
000036EC 0A                         		dc.b $A
000036ED 0A                         		dc.b $A
000036EE 0A                         		dc.b $A
000036EF 0A                         		dc.b $A
000036F0 0A                         		dc.b $A
000036F1 0A                         		dc.b $A
000036F2 0A                         		dc.b $A
000036F3 0A                         		dc.b $A
000036F4 0A                         		dc.b $A
000036F5 0A                         		dc.b $A
000036F6 4661 6365 733A 2030 3030+  		dc.b "Faces: 0000",$A
00003702 00                         		dc.b 0
00003704 00                         		even
00003704                            		
00003704                            Asc_Karasucia:
00003704 446F 6D69 6E6F 6520 4164+  		dc.b "Dominoe Adventures mini-game",$A
00003721 0A                         		dc.b $A
00003722 0A                         		dc.b $A
00003723 0A                         		dc.b $A
00003724 0A                         		dc.b $A
00003725 0A                         		dc.b $A
00003726 0A                         		dc.b $A
00003727 0A                         		dc.b $A
00003728 0A                         		dc.b $A
00003729 0A                         		dc.b $A
0000372A 0A                         		dc.b $A
0000372B 0A                         		dc.b $A
0000372C 0A                         		dc.b $A
0000372D 0A                         		dc.b $A
0000372E 0A                         		dc.b $A
0000372F 0A                         		dc.b $A
00003730 0A                         		dc.b $A
00003731 0A                         		dc.b $A
00003732 0A                         		dc.b $A
00003733 0A                         		dc.b $A
00003734 0A                         		dc.b $A
00003735 0A                         		dc.b $A
00003736 0A                         		dc.b $A
00003737 0A                         		dc.b $A
00003738 0A                         		dc.b $A
00003739 2843 2947 4636 3420 3230+  		dc.b "(C)GF64 2017"
00003745 00                         		dc.b 0
00003746                            		even
00003746                            		
00003746                            Art_DebugFont:	incbin "engine/shared/dbgfont.bin"
00004746                            Art_DebugFont_e:
00004746                            		even
00004746                            		
00004746                            		
00004746                            		include "engine/modes/level/md.asm"
00004746                            ; ====================================================================
00004746                            ; -------------------------------------------------
00004746                            ; Level
00004746                            ; 
00004746                            ; CODE ONLY
00004746                            ; -------------------------------------------------
00004746                            
00004746                            ; --------------------------------------------
00004746                            ; RAM
00004746                            ; --------------------------------------------
00004746                            
00004746                            		rsset RAM_ModeBuffer
00004746                            ;Prize data: $FF0000-$FF87FF
00004746 =FFFFBC00                  RAM_Level	rs.b $440
00004746 =FFFFC040                  RAM_ObjectSys	rs.b $1B80
00004746 =FFFFDBC0                  sizeof_lvl	rs.l 0
00004746                            ;       		inform 0,"Level mode uses: %h",(sizeof_lvl-RAM_ModeBuffer)
00004746                            		
00004746                            ; --------------------------------------------
00004746                            ; Init
00004746                            ; --------------------------------------------
00004746                            
00004746                            mode_Level:
00004758 46FC 2700                  		move.w	#$2700,sr
0000475C 4279 FFFF DC06             		clr.w	(RAM_CurrLevel)
00004762 6100 BECC                  		bsr	Video_ClearAll
00004766                            		
00004766                            ; --------------
00004766                            ; Load resources
00004766                            ; --------------
00004766                            
00004766 41F9 0000 0000             		lea	(Pal_LvlCoinItms),a0
0000476C 43F9 FFFF EA10             		lea	(RAM_PalFade+$40),a1
00004772 303C 000F                  		move.w	#16-1,d0
00004776                            @copyextpal:
00004776 32D8                       		move.w	(a0)+,(a1)+
00004778 51C8 FFFC                  		dbf	d0,@copyextpal
0000477C                            		
0000477C 41F9 0000 0000             		lea	(Pal_Player),a0
00004782 303C 000F                  		move.w	#16-1,d0
00004786                            @copychrpal:
00004786 32D8                       		move.w	(a0)+,(a1)+
00004788 51C8 FFFC                  		dbf	d0,@copychrpal
0000478C                            		
0000478C                            		;Same art for everything
0000478C 41F9 0000 0000             		lea	(Art_Lvl_Test),a0
00004792 23FC 4000 0000 00C0 0004   		move.l	#$40000000,(vdp_ctrl)
0000479C 303C 0000                  		move.w	#((Art_Lvl_Test_e-Art_Lvl_Test)/4)-1,d0
000047A0                            @copy_art:
000047A0 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
000047A6 51C8 FFF8                  		dbf	d0,@copy_art
000047AA                            		
000047AA 41F9 0000 0000             		lea	(Art_LvlBG_Test),a0
000047B0 23FC 7800 0000 00C0 0004   		move.l	#$78000000,(vdp_ctrl)
000047BA 303C 0000                  		move.w	#((Art_LvlBG_Test_e-Art_LvlBG_Test)/4)-1,d0
000047BE                            @dobgart:
000047BE 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
000047C4 51C8 FFF8                  		dbf	d0,@dobgart
000047C8                               				
000047C8 6100 0000                  		bsr	Level_Init
000047CC 43F9 0000 0000                		lea	(artdata_Level_Test),a1
000047D2 6100 0000                     		bsr	Level_LoadArtList
000047D6                            
000047D6                            ; **************
000047D6                            ; DEBUG ONLY
000047D6                            ; **************
000047D6                            
000047D6 23FC 5000 0003 00C0 0004   		move.l	#$50000003,(vdp_ctrl)
000047E0 41F9 0000 3746             		lea	(Art_DebugFont),a0
000047E6 303C 03FF                  		move.w	#((Art_DebugFont_e-Art_DebugFont)/4)-1,d0
000047EA                            @dbg_loop:
000047EA 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
000047F0 51C8 FFF8                  		dbf	d0,@dbg_loop
000047F4                            		
000047F4                            ;    		move.l	#$40800001,(vdp_ctrl)		
000047F4                            ;    		move.l	#$17100000,(vdp_data)
000047F4                            ;    		move.l	#$71700000,(vdp_data)
000047F4                            ;    		move.l	#$17100000,(vdp_data)
000047F4                            ;      		move.w	#1,(RAM_CurrLevel)
000047F4                                 		
000047F4                            ;      		if MCD=0
000047F4                            ;  		move.l	#TEST_IT,d0
000047F4                            ;  		moveq 	#7,d1
000047F4                            ;  		moveq	#0,d2
000047F4                            ;   		bsr	Audio_Track_play
000047F4                            ;   		endif
000047F4                            		
000047F4                            ; --------------
000047F4                            ; Restart
000047F4                            ; --------------
000047F4                            
000047F4                            @restart:
000047F4 6100 BE92                  		bsr	Video_ClearScroll
000047F8 6100 BE4C                  		bsr	Video_ClearSprites
000047FC 6100 0000                    		bsr	Objects_Init
00004800 6100 0000                  		bsr	Level_FromList
00004804 6100 0000                    		bsr	Level_Draw
00004808 6100 0000                     		bsr	Level_Run
0000480C                               		
0000480C 41F9 0000 0000             		lea	(Map_LvlBG_Test),a0
00004812 7001                        		moveq	#1,d0
00004814 223C 0000 0000              		move.l	#$00000000,d1
0000481A 243C 003F 001F                		move.l	#$003F001F,d2
00004820 363C 21C0                     		move.w	#$21C0,d3
00004824 6100 BFE0                     		bsr	Video_MakeMap
00004828                               		
00004828 203C 0000 0000               		move.l	#Music_Level1,d0
0000482E 7201                         		moveq 	#1,d1
00004830 7400                         		moveq	#0,d2
00004832 6100 CC08                    		bsr	Audio_Track_play
00004836                              		
00004836 46FC 2000                   		move.w	#$2000,sr
0000483A                             		
0000483A 6100 0000                    		bsr	Objects_Run
0000483E                            ; 		bsr	Level_DbgInit
00004850                             		
00004850                            ; --------------------------------------------
00004850                            ; Loop
00004850                            ; --------------------------------------------
00004850                            
00004850                            @loop:
00004850 6100 C03C                   		bsr	Video_vsync
00004854                             		
00004854 6100 0000                     		bsr	Level_BlockUpd	
00004858 6100 0000                    		bsr	Objects_Run
0000485C 6100 0000                     		bsr	Level_Run
00004860                            ;    		bsr	Level_Debug
00004860                            		
00004860                            ; -----------------------------------------
00004860                            
00004860                            ; 		btst	#bitJoyStart,(RAM_Control_1+OnPress)
00004860                            ;  		beq.s	@ignore_st
00004860                            ;  		clr.b	(RAM_GameMode)
00004860                            ;  		rts
00004860                            ; @ignore_st:
00004860                            ; 		btst	#bitJoyA,(RAM_Control_2+OnHold)
00004860                            ;  		beq.s	@ignore_d
00004860                            ;  		move.b	#1,(RAM_ModeReset)
00004860                            ;   		add.w	#1,(RAM_CurrLevel)
00004860                            ; 
00004860                            ; @ignore_d:
00004860 4A39 FFFF DE4C             		tst.b	(RAM_ModeReset)
00004866 6700 FFE8                  		beq	@loop
0000486A 4239 FFFF DE4C             		clr.b	(RAM_ModeReset)
00004870                            		
00004870 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
00004876 6700                       		beq.s	@gameover
00004878 4E75                       		rts
0000487A                            		
0000487A                            ;  		fade	out
0000487A                            ;  		move.w	#$2700,sr
0000487A                            ;  		bra	@Restart
0000487A                            
0000487A                            ; --------------------------------------------
0000487A                            ; Game Over
0000487A                            ; --------------------------------------------
0000487A                            
0000487A                            @gameover:
0000487A 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
00004880 4E75                       		rts
00004882                            		
00004882                            ; ====================================================================
00004882                            ; --------------------------------------------
00004882                            ; Subs
00004882                            ; --------------------------------------------
00004882                            
00004882                            Level_DbgInit:
00004882                            ; 		move.w	#$EEE,(RAM_PalFade+$42)
00004882 41FA 0000                  		lea	ascDebugTop(pc),a0
00004886 7002                       		moveq	#2,d0
00004888 223C 0000 0000             		move.l	#$00000000,d1
0000488E 343C 0680                  		move.w	#$680,d2
00004892 6100 BFC8                  		bsr	Video_PrintText
00004896                            		
00004896 23FC 9100 9201 00C0 0004   		move.l	#$91009201,(vdp_ctrl)
000048A0                            		
000048A0                            Level_Debug:
000048A0                            ;  		moveq	#2,d0
000048A0                            ; 		move.l	#$00060000,d1
000048A0                            ; 		moveq	#0,d2
000048A0                            ; 		move.w	(RAM_P1_Coins),d2
000048A0                            ; 		move.w	#$680,d3
000048A0                            ; 		moveq	#4,d4
000048A0                            ; 		bsr	Video_PrintVal
000048A0                            ; 
000048A0                            ;  		moveq	#2,d0
000048A0                            ; 		move.l	#$000F0000,d1
000048A0                            ; 		moveq	#0,d2
000048A0                            ; 		move.w	(RAM_P1_Hits),d2
000048A0                            ; 		move.w	#$680,d3
000048A0                            ; 		moveq	#4,d4
000048A0                            ; 		bsr	Video_PrintVal
000048A0                            
000048A0 7002                        		moveq	#2,d0
000048A2 223C 001B 0000             		move.l	#$001B0000,d1
000048A8 2439 0000 0000             		move.l	(RAM_ObjBuffer+obj_y_spd),d2
000048AE 363C 0680                  		move.w	#$680,d3
000048B2 7802                       		moveq	#2,d4
000048B4 6100 BEE4                  		bsr	Video_PrintVal
000048B8                            		
000048B8 7002                        		moveq	#2,d0
000048BA 223C 0018 0000             		move.l	#$00180000,d1
000048C0 7400                       		moveq	#0,d2
000048C2 1439 0000 0000             		move.b	(RAM_ObjBuffer+obj_col),d2
000048C8 363C 0680                  		move.w	#$680,d3
000048CC 7800                       		moveq	#0,d4
000048CE 6100 BECA                  		bsr	Video_PrintVal
000048D2                            		
000048D2 7002                        		moveq	#2,d0
000048D4 223C 000C 0000             		move.l	#$000C0000,d1
000048DA 7400                       		moveq	#0,d2
000048DC 1439 0000 0000             		move.b	(RAM_ObjBuffer+obj_status),d2
000048E2 363C 0680                  		move.w	#$680,d3
000048E6 7800                       		moveq	#0,d4
000048E8 6000 BEB0                  		bra	Video_PrintVal
000048EC                            		
000048EC                            ; -----------------------
000048EC                            
000048EC                            Level_FromList:
000048EC 3039 FFFF DC06             		move.w	(RAM_CurrLevel),d0
000048F2 E948                       		lsl.w	#4,d0
000048F4 49F9 0000 0000             		lea	(LevelList),a4
000048FA 2074 0000                  		movea.l	(a4,d0.w),a0
000048FE 6100 0000                  		bsr	Level_Load
00004902 43F9 0000 0000             		lea	(RAM_LvlPlanes),a1
00004908 1374 0000 0000             		move.b	(a4,d0.w),lvl_type(a1)
0000490E                            		
0000490E 41F9 0000 0000             		lea	(Pal_LvlMain_Gray),a0
00004914 43F9 FFFF E9D0             		lea	(RAM_PalFade),a1
0000491A 7000                       		moveq	#0,d0
0000491C 303C 001F                  		move.w	#32-1,d0
00004920                            @copy_pal:
00004920 32D8                       		move.w	(a0)+,(a1)+
00004922 51C8 FFFC                  		dbf	d0,@copy_pal
00004926                            		
00004926 3239 FFFF DC06             		move.w	(RAM_CurrLevel),d1
0000492C E949                       		lsl.w	#4,d1
0000492E                            		
0000492E 7000                       		moveq	#0,d0
00004930 3034 1008                   		move.w	8(a4,d1.w),d0
00004934 4840                        		swap	d0
00004936 3034 100A                     		move.w	$A(a4,d1.w),d0
0000493A 4239 0000 0000                 		clr.b	(RAM_ObjBuffer+obj_index)
00004940 23FC 0000 0000 0000 0000       		move.l	#Obj_Player,(RAM_ObjBuffer)
0000494A 6100 0000                      		bsr	Plyr_SetStartPos
0000494E                            		
0000494E 3239 FFFF DC06             		move.w	(RAM_CurrLevel),d1
00004954 E949                       		lsl.w	#4,d1
00004956 43F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*4)),a1
0000495C 3374 100C 0000              		move.w	$C(a4,d1.w),obj_x(a1)
00004962 3374 100E 0000                		move.w	$E(a4,d1.w),obj_y(a1)
00004968 237C 0000 0000 0000        		move.l	#Obj_EndFlag,obj_code(a1)
00004970 43F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*6)),a1	
00004976 237C 0000 0000 0000        		move.l	#Obj_HudInfo,obj_code(a1)
0000497E 337C 0000 0000             		move.w	#0,obj_x(a1)
00004984 337C 0000 0000             		move.w	#0,obj_y(a1)
0000498A 4E75                       		rts
0000498C                            		
0000498C 6F62 6A5F 7374 6174 7573+  ascDebugTop:	dc.b "obj_status: 00 obj_col: 00              ",0
000049B5                            ; 		dc.b "                              00000000",0
000049B6 00                         		even
000049B6                            		
000049B6                            ; --------------------------------------------
000049B6                            
000049B6                            		include	"engine/modes/level/subs/level.asm"
000049B6                            ; ====================================================================
000049B6                            ; ---------------------------------------------
000049B6                            ; Level system
000049B6                            ; ---------------------------------------------
000049B6                            
000049B6                            ; *** NOTES ***
000049B6                            ; MAX Prize size: $7FFF
000049B6                            
000049B6                            ; --------------------------------------------
000049B6                            ; Variables
000049B6                            ; --------------------------------------------
000049B6                            
000049B6                            		rsreset
000049B6 =00000000                  lvl_objects	rs.l 1
000049B6 =00000004                  lvl_blocks	rs.l 1
000049B6 =00000008                  lvl_przblocks	rs.l 1
000049B6 =0000000C                  lvl_layout	rs.l 1
000049B6 =00000010                  lvl_hilayout	rs.l 1
000049B6 =00000014                  lvl_collision	rs.l 1
000049B6 =00000018                  lvl_prizes	rs.l 1
000049B6 =0000001C                  lvl_x		rs.l 1
000049B6 =00000020                  lvl_y		rs.l 1
000049B6 =00000024                  lvl_x_camspd	rs.l 1
000049B6 =00000028                  lvl_y_camspd	rs.l 1
000049B6 =0000002C                  lvl_timer	rs.l 1
000049B6 =00000030                  lvl_size_x	rs.w 1
000049B6 =00000032                  lvl_size_y	rs.w 1
000049B6 =00000034                  lvl_maxcam_x	rs.w 1
000049B6 =00000036                  lvl_maxcam_y	rs.w 1
000049B6 =00000038                  lvl_camflags	rs.w 1
000049B6 =0000003A                  lvl_flags	rs.w 1
000049B6 =0000003C                  lvl_type	rs.w 1
000049B6 =0000003E                  lvl_lastx	rs.w 1
000049B6 =00000040                  lvl_lasty	rs.w 1
000049B6 =00000042                  sizeof_lvlpln	rs.l 0
000049B6                            
000049B6                            ; --------------------------------------------
000049B6                            
000049B6 =00000046                  max_lvlobj	equ	70
000049B6                            
000049B6 =00000000                  bitLvlDirR	equ	0
000049B6 =00000001                  bitLvlDirL	equ	1
000049B6 =00000002                  bitLvlDirD	equ	2
000049B6 =00000003                  bitLvlDirU	equ	3
000049B6 =00000004                  bitLvlDontUpd	equ	4
000049B6                            
000049B6                            ; RAM_LevelPrizes	equ	$FF0000
000049B6                            
000049B6                            ; --------------------------------------------
000049B6                            ; RAM
000049B6                            ; --------------------------------------------
000049B6                            
000049B6                            		rsset RAM_Level
000049B6 =FFFFBC00                  RAM_LvlPlanes	rs.b sizeof_lvlpln
000049B6 =FFFFBC42                  RAM_LevelObjPos	rs.w (max_lvlobj)*5
000049B6 =FFFFBEFE                  RAM_LvlAnim	rs.w 16
000049B6 =FFFFBF1E                  RAM_PrizeHide	rs.w 1+(2*16)
000049B6 =FFFFBF60                  RAM_PrizeShow	rs.w 1+(2*16)
000049B6 =FFFFBFA2                  RAM_PrizeUsed	rs.w 1+(2*16)
000049B6                            
000049B6 =FFFFBFE4                  sizeof_lvl2	rs.l 0
000049B6                            ;    		inform 0,"Level system uses: %h",(sizeof_lvl2-RAM_Level)
000049B6                            		
000049B6                            ; ====================================================================	
000049B6                            ; --------------------------------------------
000049B6                            ; Init
000049B6                            ; --------------------------------------------
000049B6                            
000049B6                            Level_Init:
000049B6 4279 FFFF DC02             		clr.w	(RAM_P1_Coins)
000049BC 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
000049C2 6600                       		bne.s	@firsttime
000049C4 33FC 0003 FFFF DC00        		move.w	#3,(RAM_P1_Lives)
000049CC                            @firsttime:
000049CC 13FC 0003 FFFF ED1B          		move.b	#%11,(RAM_VidRegs+$B)		; H: line V: full
000049D4                            ;      		move.b	#%10000111,(RAM_VidRegs+$C)	; H40 + Double interlace
000049D4 13FC 0001 FFFF ED20          		move.b	#1,(RAM_VidRegs+$10)		; 512x256 layer size
000049DC 6100 BCD8                    		bsr	Video_Update
000049E0                             		
000049E0 41F9 0000 0000             		lea	(Art_LvlPrizes),a0
000049E6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,(vdp_ctrl)
000049F0 303C 0000                  		move.w	#((Art_LvlPrizes_e-Art_LvlPrizes)/4)-1,d0
000049F4                            @doprzart:
000049F4 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
000049FA 51C8 FFF8                  		dbf	d0,@doprzart
000049FE                            		
000049FE                            ; 		move.w	#-1,(RAM_LvlPlanes+lvl_lastx)
000049FE                            ; 		move.w	#-1,(RAM_LvlPlanes+lvl_lasty)		
000049FE 4E75                       		rts
00004A00                            		
00004A00                            ; ====================================================================		
00004A00                            ; --------------------------------------------
00004A00                            ; Loop
00004A00                            ; --------------------------------------------
00004A00                            
00004A00                            Level_Run:
00004A00 4DF9 FFFF BC00             		lea	(RAM_LvlPlanes),a6
00004A06                            		
00004A06 6100 0000                   		bsr	Lvl_RefreshObj
00004A0A 6100 0000                  		bsr	Lvl_DrawScrl
00004A0E 6100 0000                  		bsr	Lvl_Animation
00004A12 6000 0000                  		bra	Lvl_Deform
00004A16                            		
00004A16                            ; -----------------------------------
00004A16                             
00004A16                            Level_BlockUpd:
00004A16 4DF9 FFFF BC00             		lea	(RAM_LvlPlanes),a6
00004A1C 4BF9 FFFF BF1E             		lea	(RAM_PrizeHide),a5
00004A22 3C15                       		move.w	(a5),d6
00004A24 425D                       		clr.w	(a5)+
00004A26 4A46                       		tst.w	d6
00004A28 6700                       		beq.s	@skip_hide
00004A2A 0446 0001                  		sub.w	#1,d6
00004A2E                            @next_hide:
00004A2E 2015                       		move.l	(a5),d0
00004A30 6100 0000                   		bsr	Lvl_DoHidePrz
00004A34 429D                        		clr.l	(a5)+
00004A36 51CE FFF6                   		dbf	d6,@next_hide
00004A3A                            @skip_hide:
00004A3A                            
00004A3A 4BF9 FFFF BF60             		lea	(RAM_PrizeShow),a5
00004A40 3C15                       		move.w	(a5),d6
00004A42 425D                       		clr.w	(a5)+
00004A44 4A46                       		tst.w	d6
00004A46 6700                       		beq.s	@skip_show
00004A48 0446 0001                  		sub.w	#1,d6
00004A4C                            @next_show:
00004A4C 2015                       		move.l	(a5),d0
00004A4E 6100 0000                   		bsr	Lvl_DoShowPrz
00004A52 429D                        		clr.l	(a5)+
00004A54 51CE FFF6                   		dbf	d6,@next_show
00004A58                            @skip_show:
00004A58                            		
00004A58 4E75                       		rts
00004A5A                            		
00004A5A                            ; ====================================================================
00004A5A                            ; --------------------------------------------
00004A5A                            ; Subs
00004A5A                            ; --------------------------------------------
00004A5A                            
00004A5A                            Lvl_DrawScrl:
00004A5A                            
00004A5A                            ; -----------------------------------
00004A5A                            ; RIGHT
00004A5A                            ; -----------------------------------
00004A5A                            
00004A5A 302E 003E                  		move.w	lvl_lastx(a6),d0
00004A5E 322E 001C                  		move.w	lvl_x(a6),d1
00004A62 B240                       		cmp.w	d0,d1
00004A64 6700 0000                  		beq	@dontupdL
00004A68 3D41 003E                  		move.w	d1,lvl_lastx(a6)
00004A6C                            		
00004A6C 082E 0000 003A             		btst	#bitLvlDirR,lvl_flags(a6)
00004A72 6700 0000                  		beq	@dontupdR
00004A76 08AE 0000 003A             		bclr	#bitLvlDirR,lvl_flags(a6)
00004A7C 303C 4000                  		move.w	#$4000,d0
00004A80 2A6E 000C                  		movea.l	lvl_layout(a6),a5
00004A84 286E 0010                  		movea.l lvl_hilayout(a6),a4
00004A88 266E 0018                  		movea.l	lvl_prizes(a6),a3
00004A8C                            		
00004A8C 382E 0020                  		move.w	lvl_y(a6),d4
00004A90 3404                       		move.w	d4,d2
00004A92 E84A                       		lsr.w	#4,d2
00004A94 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
00004A98 DAC2                        		adda	d2,a5
00004A9A D8C2                        		adda 	d2,a4
00004A9C D6C2                        		adda	d2,a3
00004A9E                             		
00004A9E 3604                        		move.w	d4,d3
00004AA0 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
00004AA4 0644 0150                  		add.w	#$150,d4
00004AA8 3204                       		move.w	d4,d1
00004AAA E849                       		lsr.w	#4,d1
00004AAC DAC1                        		adda	d1,a5
00004AAE D8C1                        		adda 	d1,a4
00004AB0 D6C1                        		adda	d1,a3
00004AB2                            
00004AB2 E44C                       		lsr.w	#2,d4
00004AB4 0244 007C                  		and.w	#$7C,d4
00004AB8 E94B                       		lsl.w	#4,d3			; VDP YPOS
00004ABA 0243 0F00                  		and.w	#$F00,d3
00004ABE D843                       		add.w	d3,d4
00004AC0 8840                       		or.w	d0,d4
00004AC2 4844                       		swap	d4
00004AC4 383C 0003                   		move.w	#3,d4
00004AC8                             		
00004AC8 363C 000F                   		move.w	#$F,d3
00004ACC                            ;   		move.l	#$00010001,d1
00004ACC                            @nextblkR:
00004ACC 7000                       		moveq	#0,d0
00004ACE 246E 0004                  		movea.l	lvl_blocks(a6),a2
00004AD2 1013                       		move.b	(a3),d0
00004AD4 4A00                        		tst.b	d0
00004AD6 6700                        		beq.s	@noPrzR
00004AD8 0800 0007                   		btst	#7,d0
00004ADC 6600                        		bne.s	@noPrzR
00004ADE 0240 007F                   		and.w	#$7F,d0
00004AE2 246E 0008                  		movea.l	lvl_przblocks(a6),a2
00004AE6 6000                       		bra.s	@hasprzR
00004AE8                            @noPrzR:
00004AE8 1015                       		move.b	(a5),d0
00004AEA 4A14                       		tst.b 	(a4)
00004AEC 6700                       		beq.s 	@hasprzR
00004AEE 1014                       		move.b 	(a4),d0
00004AF0                            @hasprzR:
00004AF0                            		
00004AF0 E748                       		lsl.w	#3,d0
00004AF2 3232 0002                  		move.w	2(a2,d0.w),d1
00004AF6 4841                       		swap	d1
00004AF8 3232 0000                  		move.w	(a2,d0.w),d1
00004AFC 3432 0006                   		move.w	6(a2,d0.w),d2
00004B00 4842                        		swap	d2
00004B02 3432 0004                   		move.w	4(a2,d0.w),d2
00004B06                            
00004B06 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00004B0C 0684 0080 0000              		add.l	#$00800000,d4
00004B12 0284 4FFE 0003               		and.l	#$4FFE0003,d4
00004B18                              		
00004B18 4843                         		swap	d3
00004B1A 1639 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d3
00004B20 0243 0006                   		and.w	#%110,d3
00004B24 6700                        		beq.s	@dontShftV_R
00004B26 E249                        		lsr.w	#1,d1
00004B28 E24A                        		lsr.w	#1,d2
00004B2A                            @dontShftV_R:
00004B2A 4843                       		swap	d3
00004B2C 4A14                       		tst.b 	(a4)
00004B2E 6700                       		beq.s 	@nohiprioR
00004B30 0041 8000                  		or.w 	#$8000,d1
00004B34 0042 8000                  		or.w 	#$8000,d2
00004B38                            @nohiprioR:
00004B38 33C1 00C0 0000              		move.w	d1,(vdp_data)
00004B3E 33C2 00C0 0000              		move.w	d2,(vdp_data)
00004B44                             		
00004B44 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
00004B4A 0241 0006                   		and.w	#%110,d1
00004B4E 6600                        		bne.s	@dontupdR_2
00004B50                             		
00004B50 4841                        		swap	d1
00004B52 4842                        		swap	d2
00004B54 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00004B5A 0684 0080 0000              		add.l	#$00800000,d4
00004B60 0284 4FFE 0003               		and.l	#$4FFE0003,d4
00004B66 4A14                         		tst.b 	(a4)
00004B68 6700                       		beq.s 	@nohiprioR_2
00004B6A 0041 8000                  		or.w 	#$8000,d1
00004B6E 0042 8000                  		or.w 	#$8000,d2
00004B72                            @nohiprioR_2:
00004B72 33C1 00C0 0000              		move.w	d1,(vdp_data)
00004B78 33C2 00C0 0000              		move.w	d2,(vdp_data)
00004B7E                             		
00004B7E                            @dontupdR_2:
00004B7E DAEE 0030                   		add.w	lvl_size_x(a6),a5
00004B82 D8EE 0030                   		add.w 	lvl_size_x(a6),a4
00004B86 D6EE 0030                   		add.w	lvl_size_x(a6),a3
00004B8A 51CB FF40                  		dbf	d3,@nextblkR
00004B8E                            @dontupdR:
00004B8E                            	
00004B8E                            ; -----------------------------------
00004B8E                            ; LEFT
00004B8E                            ; -----------------------------------
00004B8E                            
00004B8E 082E 0001 003A             		btst	#bitLvlDirL,lvl_flags(a6)
00004B94 6700 0000                  		beq	@dontupdL
00004B98 08AE 0001 003A             		bclr	#bitLvlDirL,lvl_flags(a6)
00004B9E 303C 4000                  		move.w	#$4000,d0
00004BA2 2A6E 000C                  		movea.l	lvl_layout(a6),a5
00004BA6 286E 0010                  		movea.l lvl_hilayout(a6),a4
00004BAA 266E 0018                  		movea.l	lvl_prizes(a6),a3
00004BAE                            		
00004BAE 382E 0020                  		move.w	lvl_y(a6),d4
00004BB2 3404                       		move.w	d4,d2
00004BB4 E84A                       		lsr.w	#4,d2
00004BB6 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
00004BBA DAC2                        		adda	d2,a5
00004BBC D8C2                        		adda	d2,a4
00004BBE D6C2                        		adda	d2,a3
00004BC0 3604                        		move.w	d4,d3
00004BC2                             		
00004BC2 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
00004BC6 0444 0010                       		sub.w	#$010,d4		; TODO CHECAR SI FUNCIONA BIEN
00004BCA 3204                       		move.w	d4,d1
00004BCC E849                       		lsr.w	#4,d1
00004BCE DAC1                        		adda	d1,a5
00004BD0 D8C1                        		adda	d1,a4
00004BD2 D6C1                        		adda	d1,a3
00004BD4                             		
00004BD4 E44C                       		lsr.w	#2,d4
00004BD6 0244 007C                  		and.w	#$7C,d4
00004BDA E94B                       		lsl.w	#4,d3			; VDP YPOS
00004BDC 0243 0F00                  		and.w	#$F00,d3
00004BE0 D843                       		add.w	d3,d4
00004BE2 8840                       		or.w	d0,d4
00004BE4 4844                       		swap	d4
00004BE6 383C 0003                   		move.w	#3,d4
00004BEA                             		
00004BEA 363C 000F                   		move.w	#$F,d3
00004BEE                            ;  		move.l	#$00010001,d1
00004BEE                            @nextblkL:
00004BEE 7000                       		moveq	#0,d0
00004BF0 246E 0004                  		movea.l	lvl_blocks(a6),a2
00004BF4 1013                       		move.b	(a3),d0
00004BF6 4A00                        		tst.b	d0
00004BF8 6700                        		beq.s	@noPrzL
00004BFA 0800 0007                   		btst	#7,d0
00004BFE 6600                        		bne.s	@noPrzL
00004C00 0240 007F                   		and.w	#$7F,d0
00004C04 246E 0008                  		movea.l	lvl_przblocks(a6),a2
00004C08 6000                       		bra.s	@hasprzL
00004C0A                            @noPrzL:
00004C0A 1015                       		move.b	(a5),d0
00004C0C 4A14                       		tst.b 	(a4)
00004C0E 6700                       		beq.s 	@hasprzL
00004C10 1014                       		move.b 	(a4),d0
00004C12                            @hasprzL:
00004C12 E748                       		lsl.w	#3,d0
00004C14 3232 0002                  		move.w	2(a2,d0.w),d1
00004C18 4841                       		swap	d1
00004C1A 3232 0000                  		move.w	(a2,d0.w),d1
00004C1E 3432 0006                   		move.w	6(a2,d0.w),d2
00004C22 4842                        		swap	d2
00004C24 3432 0004                   		move.w	4(a2,d0.w),d2
00004C28                            
00004C28 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00004C2E 0684 0080 0000              		add.l	#$00800000,d4
00004C34 0284 4FFE 0003               		and.l	#$4FFE0003,d4
00004C3A                              		
00004C3A 4843                         		swap	d3
00004C3C 1639 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d3
00004C42 0243 0006                   		and.w	#%110,d3
00004C46 6700                        		beq.s	@dontShftV_L
00004C48 E249                        		lsr.w	#1,d1
00004C4A E24A                        		lsr.w	#1,d2
00004C4C                            @dontShftV_L:
00004C4C 4843                       		swap	d3
00004C4E 4A14                       		tst.b 	(a4)
00004C50 6700                       		beq.s 	@nohiprioL
00004C52 0041 8000                  		or.w	#$8000,d1
00004C56 0042 8000                  		or.w 	#$8000,d2
00004C5A                            @nohiprioL:
00004C5A 33C1 00C0 0000              		move.w	d1,(vdp_data)
00004C60 33C2 00C0 0000              		move.w	d2,(vdp_data)
00004C66                             		
00004C66 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
00004C6C 0241 0006                   		and.w	#%110,d1
00004C70 6600                        		bne.s	@dontupdL_2
00004C72                             		
00004C72 4841                        		swap	d1
00004C74 4842                        		swap	d2
00004C76 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00004C7C 0684 0080 0000              		add.l	#$00800000,d4
00004C82 0284 4FFE 0003               		and.l	#$4FFE0003,d4
00004C88 4A14                       		tst.b 	(a4)
00004C8A 6700                       		beq.s 	@nohiprioL_2
00004C8C 0041 8000                  		or.w	#$8000,d1
00004C90 0042 8000                  		or.w 	#$8000,d2
00004C94                            @nohiprioL_2:
00004C94 33C1 00C0 0000              		move.w	d1,(vdp_data)
00004C9A 33C2 00C0 0000              		move.w	d2,(vdp_data)
00004CA0                             		
00004CA0                            @dontupdL_2:
00004CA0 DAEE 0030                   		add.w	lvl_size_x(a6),a5
00004CA4 D8EE 0030                   		add.w	lvl_size_x(a6),a4
00004CA8 D6EE 0030                   		add.w	lvl_size_x(a6),a3
00004CAC 51CB FF40                  		dbf	d3,@nextblkL
00004CB0                            @dontupdL:
00004CB0                            
00004CB0                            ; -----------------------------------
00004CB0                            ; DOWN
00004CB0                            ; -----------------------------------
00004CB0                            
00004CB0 302E 0040                  		move.w	lvl_lasty(a6),d0
00004CB4 322E 0020                  		move.w	lvl_y(a6),d1
00004CB8 B240                       		cmp.w	d0,d1
00004CBA 6700 0000                  		beq	@dontupdU
00004CBE 3D41 0040                  		move.w	d1,lvl_lasty(a6)
00004CC2                            		
00004CC2 082E 0002 003A             		btst	#bitLvlDirD,lvl_flags(a6)
00004CC8 6700 0000                  		beq	@dontupdD
00004CCC 08AE 0002 003A             		bclr	#bitLvlDirD,lvl_flags(a6)
00004CD2                            			
00004CD2 2A6E 000C                  		movea.l	lvl_layout(a6),a5
00004CD6 286E 0010                  		movea.l lvl_hilayout(a6),a4
00004CDA 266E 0018                  		movea.l	lvl_prizes(a6),a3
00004CDE                            
00004CDE 382E 0020                  		move.w	lvl_y(a6),d4
00004CE2 303C 4000                  		move.w	#$4000,d0
00004CE6 0644 00E0                  		add.w	#$0E0,d4
00004CEA 3404                       		move.w	d4,d2
00004CEC E84A                       		lsr.w	#4,d2
00004CEE C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
00004CF2 DAC2                        		adda	d2,a5
00004CF4 D8C2                        		adda	d2,a4
00004CF6 D6C2                        		adda	d2,a3
00004CF8 3604                        		move.w	d4,d3
00004CFA                            
00004CFA 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
00004CFE 3404                       		move.w	d4,d2
00004D00 3204                       		move.w	d4,d1
00004D02 E849                       		lsr.w	#4,d1
00004D04 DAC1                        		adda	d1,a5
00004D06 D8C1                        		adda 	d1,a4
00004D08 D6C1                        		adda	d1,a3
00004D0A E44C                       		lsr.w	#2,d4
00004D0C 0244 007C                  		and.w	#$7C,d4
00004D10 E94B                       		lsl.w	#4,d3			; VDP YPOS
00004D12 0243 0F00                  		and.w	#$F00,d3
00004D16 8843                       		or.w	d3,d4
00004D18 8840                       		or.w	d0,d4
00004D1A 4844                       		swap	d4
00004D1C 383C 0003                   		move.w	#3,d4
00004D20                            
00004D20 363C 0015                   		move.w	#$15,d3
00004D24                            ;  		move.l	#$00010001,d1
00004D24 2A04                        		move.l	d4,d5
00004D26 0285 4F80 0003              		and.l	#$4F800003,d5
00004D2C 0284 007E 0000              		and.l	#$007E0000,d4
00004D32                            @nextblkD:
00004D32                            
00004D32 7000                       		moveq	#0,d0
00004D34 246E 0004                  		movea.l	lvl_blocks(a6),a2
00004D38 1013                       		move.b	(a3),d0
00004D3A 4A00                       		tst.b	d0
00004D3C 6700                       		beq.s	@noPrzD
00004D3E 0800 0007                  		btst	#7,d0
00004D42 6600 0000                  		bne	@noPrzD
00004D46 0240 007F                  		and.w	#$7F,d0
00004D4A 246E 0008                  		movea.l	lvl_przblocks(a6),a2
00004D4E 6000                       		bra.s	@hasprzD
00004D50                            @noPrzD:
00004D50 1015                       		move.b	(a5),d0
00004D52 4A14                       		tst.b 	(a4)
00004D54 6700                       		beq.s 	@hasprzD
00004D56 1014                       		move.b 	(a4),d0
00004D58                            @hasprzD:
00004D58                            
00004D58                            
00004D58                            ; 		moveq	#0,d0
00004D58                            ; 		movea.l	lvl_przblocks(a6),a2
00004D58                            ; 		move.b	(a3),d0
00004D58                            ; 		tst.b	d0
00004D58                            ; 		bne.s	@hasprzD
00004D58                            ; 		movea.l	lvl_blocks(a6),a2
00004D58                            ; 		move.b	(a5),d0
00004D58                            ; 		tst.b 	(a4)
00004D58                            ; 		beq.s 	@hasprzD
00004D58                            ; 		move.b	(a4),d0
00004D58                            ; @hasprzD:
00004D58 E748                       		lsl.w	#3,d0
00004D5A                            		
00004D5A 3232 0000                  		move.w	(a2,d0.w),d1
00004D5E 4841                       		swap	d1
00004D60 3232 0004                  		move.w	4(a2,d0.w),d1
00004D64 3432 0002                   		move.w	2(a2,d0.w),d2
00004D68 4842                        		swap	d2
00004D6A 3432 0006                   		move.w	6(a2,d0.w),d2
00004D6E                             		
00004D6E 8885                       		or.l	d5,d4
00004D70 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00004D76                             		
00004D76                            *  		move.b	(RAM_VidRegs+$C),d2
00004D76                            *  		and.w	#%110,d2
00004D76                            *  		beq.s	@dontshftD
00004D76                            *  		swap 	d1
00004D76                            *  		move.w	d1,d2
00004D76                            *  		and.w	#$7FF,d2
00004D76                            *  		and.w	#$F800,d1
00004D76                            *  		lsr.w	#1,d2
00004D76                            *  		or.w	d2,d1
00004D76                            *  		swap 	d1
00004D76                            *  		move.w	d1,d2
00004D76                            *  		and.w	#$7FF,d2
00004D76                            *  		and.w	#$F800,d1
00004D76                            *  		lsr.w	#1,d2
00004D76                            *  		or.w	d2,d1
00004D76                            *  		
00004D76                            * @dontshftD:
00004D76                             		
00004D76 4A14                         		tst.b 	(a4)
00004D78 6700                        		beq.s	@nohiprioD
00004D7A 0081 8000 8000              		or.l	#$80008000,d1
00004D80                            @nohiprioD:
00004D80 23C1 00C0 0000              		move.l	d1,(vdp_data)
00004D86                            
00004D86                            *   		move.b	(RAM_VidRegs+$C),d0
00004D86                            *  		and.w	#%110,d0
00004D86                            *  		bne.s	@dontshftD_2
00004D86                             		
00004D86 2005                         		move.l	d5,d0
00004D88 8084                       		or.l	d4,d0
00004D8A 0680 0080 0000               		add.l	#$00800000,d0
00004D90 23C0 00C0 0004               		move.l	d0,(vdp_ctrl)
00004D96 4A14                         		tst.b 	(a4)
00004D98 6700                        		beq.s	@nohiprioD_2
00004D9A 0082 8000 8000              		or.l	#$80008000,d2
00004DA0                            @nohiprioD_2:
00004DA0 23C2 00C0 0000              		move.l	d2,(vdp_data)
00004DA6                             		
00004DA6                            @dontshftD_2:
00004DA6 0684 0004 0000              		add.l	#$040000,d4
00004DAC 0284 007E 0000               		and.l	#$7E0000,d4
00004DB2                              		
00004DB2 DAFC 0001                   		add.w	#1,a5
00004DB6 D8FC 0001                   		add.w	#1,a4
00004DBA D6FC 0001                   		add.w	#1,a3
00004DBE 51CB FF72                  		dbf	d3,@nextblkD
00004DC2                            @dontupdD:
00004DC2                            
00004DC2                            ; -----------------------------------
00004DC2                            ; UP
00004DC2                            ; -----------------------------------
00004DC2                            
00004DC2 082E 0003 003A             		btst	#bitLvlDirU,lvl_flags(a6)
00004DC8 6700 0000                  		beq	@dontupdU
00004DCC 08AE 0003 003A             		bclr	#bitLvlDirU,lvl_flags(a6)
00004DD2 2A6E 000C                  		movea.l	lvl_layout(a6),a5
00004DD6 286E 0010                  		movea.l lvl_hilayout(a6),a4
00004DDA 266E 0018                  		movea.l	lvl_prizes(a6),a3
00004DDE                            
00004DDE 303C 4000                  		move.w	#$4000,d0
00004DE2 382E 0020                  		move.w	lvl_y(a6),d4
00004DE6 3204                       		move.w	d4,d1
00004DE8 4841                       		swap	d1
00004DEA 3404                       		move.w	d4,d2
00004DEC E84A                       		lsr.w	#4,d2
00004DEE C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
00004DF2 DAC2                        		adda	d2,a5
00004DF4 D8C2                        		adda 	d2,a4
00004DF6 D6C2                        		adda	d2,a3
00004DF8 3604                        		move.w	d4,d3
00004DFA                             		
00004DFA 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
00004DFE 3404                       		move.w	d4,d2
00004E00 3204                       		move.w	d4,d1
00004E02 E849                       		lsr.w	#4,d1
00004E04 DAC1                        		adda	d1,a5
00004E06 D8C1                        		adda 	d1,a4
00004E08 D6C1                        		adda	d1,a3
00004E0A E44C                       		lsr.w	#2,d4
00004E0C 0244 007C                  		and.w	#$7C,d4
00004E10 E94B                       		lsl.w	#4,d3			; VDP YPOS
00004E12 0243 0F00                  		and.w	#$F00,d3
00004E16 8843                       		or.w	d3,d4
00004E18 8840                       		or.w	d0,d4
00004E1A 4844                       		swap	d4
00004E1C 383C 0003                   		move.w	#3,d4
00004E20                             		
00004E20 4841                        		swap	d1
00004E22 3401                        		move.w	d1,d2
00004E24 363C 0015                   		move.w	#$15,d3
00004E28                            ;  		move.l	#$00010001,d1
00004E28 2A04                        		move.l	d4,d5
00004E2A 0285 4F80 0003              		and.l	#$4F800003,d5
00004E30 0284 007E 0000              		and.l	#$007E0000,d4
00004E36                            @nextblkU:
00004E36 7000                       		moveq	#0,d0
00004E38 246E 0004                  		movea.l	lvl_blocks(a6),a2
00004E3C 1013                       		move.b	(a3),d0
00004E3E 4A00                       		tst.b	d0
00004E40 6700                       		beq.s	@noPrzU
00004E42 0800 0007                  		btst	#7,d0
00004E46 6600 0000                  		bne	@noPrzU
00004E4A 0240 007F                  		and.w	#$7F,d0
00004E4E 246E 0008                  		movea.l	lvl_przblocks(a6),a2
00004E52 6000                       		bra.s	@hasprzU
00004E54                            @noPrzU:
00004E54 1015                       		move.b	(a5),d0
00004E56 4A14                       		tst.b 	(a4)
00004E58 6700                       		beq.s 	@hasprzU
00004E5A 1014                       		move.b 	(a4),d0
00004E5C                            @hasprzU:
00004E5C                            
00004E5C                            ; 		moveq	#0,d0
00004E5C                            ; 		movea.l	lvl_przblocks(a6),a2
00004E5C                            ; 		move.b	(a3),d0
00004E5C                            ; 		tst.b	d0
00004E5C                            ; 		bne.s	@hasprzU
00004E5C                            ; 		movea.l	lvl_blocks(a6),a2
00004E5C                            ; 		move.b	(a5),d0
00004E5C                            ; 		tst.b 	(a4)
00004E5C                            ; 		beq.s 	@hasprzU
00004E5C                            ; 		move.b 	(a4),d0
00004E5C                            ; @hasprzU:
00004E5C E748                       		lsl.w	#3,d0
00004E5E                            		
00004E5E 3232 0000                  		move.w	(a2,d0.w),d1
00004E62 4841                       		swap	d1
00004E64 3232 0004                  		move.w	4(a2,d0.w),d1
00004E68 3432 0002                   		move.w	2(a2,d0.w),d2
00004E6C 4842                        		swap	d2
00004E6E 3432 0006                   		move.w	6(a2,d0.w),d2
00004E72                             		
00004E72 8885                       		or.l	d5,d4
00004E74 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00004E7A 4A14                        		tst.b 	(a4)
00004E7C 6700                        		beq.s	@nohiprioU
00004E7E 0081 8000 8000              		or.l	#$80008000,d1
00004E84                            @nohiprioU:
00004E84 23C1 00C0 0000              		move.l	d1,(vdp_data)
00004E8A 2005                         		move.l	d5,d0
00004E8C 8084                       		or.l	d4,d0
00004E8E 0680 0080 0000               		add.l	#$00800000,d0
00004E94 23C0 00C0 0004              		move.l	d0,(vdp_ctrl)
00004E9A 4A14                        		tst.b 	(a4)
00004E9C 6700                        		beq.s	@nohiprioU_2
00004E9E 0082 8000 8000              		or.l	#$80008000,d2
00004EA4                            @nohiprioU_2:
00004EA4 23C2 00C0 0000              		move.l	d2,(vdp_data)
00004EAA                             		
00004EAA                            @nohiprioU_3:
00004EAA 0684 0004 0000              		add.l	#$040000,d4
00004EB0 0284 007E 0000               		and.l	#$7E0000,d4
00004EB6                              		
00004EB6 DAFC 0001                   		add.w	#1,a5
00004EBA D8FC 0001                   		add.w 	#1,a4
00004EBE D6FC 0001                   		add.w	#1,a3
00004EC2 51CB FF72                  		dbf	d3,@nextblkU
00004EC6                            @dontupdU:
00004EC6 4E75                       		rts
00004EC8                            	
00004EC8                            ; --------------------------------------------
00004EC8                            ; Lvl_Animation
00004EC8                            ; --------------------------------------------
00004EC8                            
00004EC8                            Lvl_Animation:
00004EC8 4BF9 FFFF BEFE             		lea	(RAM_LvlAnim),a5
00004ECE                            ; 		lea	(Art_AnimCoin),a4
00004ECE                            		
00004ECE 0455 0001                  		sub.w	#1,(a5)
00004ED2 6A00 0000                  		bpl	@pluswait
00004ED6 3ABC 0005                  		move.w	#5,(a5)
00004EDA                            		
00004EDA 7200                       		moveq	#0,d1
00004EDC 7400                       		moveq	#0,d2
00004EDE 203C 0000 0000             		move.l	#Art_AnimCoin,d0
00004EE4 322D 0002                  		move.w	2(a5),d1
00004EE8 0641 0001                  		add.w	#1,d1
00004EEC 0C41 0006                  		cmp.w	#6,d1
00004EF0 6600                       		bne.s	@stay
00004EF2 4241                       		clr.w	d1
00004EF4                            @stay:
00004EF4 3B41 0002                  		move.w	d1,2(a5)
00004EF8 E149                       		lsl.w	#8,d1
00004EFA D081                       		add.l	d1,d0
00004EFC                            		
00004EFC 323C 0040                  		move.w	#$40,d1
00004F00 343C 05A0                  		move.w	#$5A0,d2
00004F04 6100 BCC6                  		bsr	DMA_Set
00004F08                            		
00004F08                            @pluswait:
00004F08 4E75                       		rts
00004F0A                            		
00004F0A                            ; --------------------------------------------
00004F0A                            ; Lvl_Deform
00004F0A                            ; --------------------------------------------
00004F0A                            
00004F0A                            Lvl_Deform:
00004F0A 302E 0020                  		move.w	lvl_y(a6),d0
00004F0E 33C0 FFFF E2C0             		move.w	d0,(RAM_ScrlVer)
00004F14 3800                       		move.w	d0,d4
00004F16 E844                       		asr.w	#4,d4
00004F18 33C4 FFFF E2C2             		move.w	d4,(RAM_ScrlVer+2)
00004F1E 7A00                       		moveq	#0,d5
00004F20 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
00004F26 362E 001C                  		move.w	lvl_x(a6),d3
00004F2A 4443                       		neg.w	d3
00004F2C                            		
00004F2C                            ; Sun
00004F2C 7000                       		moveq	#0,d0
00004F2E 343C 001B                  		move.w	#(28)-1,d2
00004F32 9444                       		sub.w	d4,d2
00004F34 6B00 0000                  		bmi	@rest_fg
00004F38                            @lyr1:
00004F38 30C3                       		move.w	d3,(a0)+
00004F3A 30C0                       		move.w	d0,(a0)+
00004F3C 0645 0001                  		add.w	#1,d5
00004F40 0C45 00E0                  		cmp.w	#224,d5
00004F44 6E00 0000                  		bgt	@exit_now
00004F48 51CA FFEE                  		dbf	d2,@lyr1
00004F4C                            		
00004F4C                            ; Clouds 1
00004F4C 3003                       		move.w	d3,d0
00004F4E E840                       		asr.w	#4,d0
00004F50 343C 001B                  		move.w	#(28)-1,d2
00004F54 0C44 001C                  		cmp.w	#28,d4
00004F58 6D00                       		blt.s	@lyr2
00004F5A 9444                       		sub.w	d4,d2
00004F5C 6B00                       		bmi.s	@rest_fg
00004F5E                            @lyr2:
00004F5E 30C3                       		move.w	d3,(a0)+
00004F60 30C0                       		move.w	d0,(a0)+
00004F62 0645 0001                  		add.w	#1,d5
00004F66 0C45 00E0                  		cmp.w	#224,d5
00004F6A 6E00                       		bgt.s	@exit_now
00004F6C 51CA FFF0                  		dbf	d2,@lyr2
00004F70                            		
00004F70                            ; Clouds 2
00004F70 3003                       		move.w	d3,d0
00004F72 EA40                       		asr.w	#5,d0
00004F74 343C 001F                  		move.w	#(32)-1,d2
00004F78                            ; 		cmp.w	#28,d4
00004F78                            ; 		blt.s	@lyr3
00004F78                            ; 		sub.w	d4,d2
00004F78                            ; 		bmi.s	@rest_fg
00004F78                            @lyr3:
00004F78 30C3                       		move.w	d3,(a0)+
00004F7A 30C0                       		move.w	d0,(a0)+
00004F7C 0645 0001                  		add.w	#1,d5
00004F80 0C45 00E0                  		cmp.w	#224,d5
00004F84 6E00                       		bgt.s	@exit_now
00004F86 51CA FFF0                  		dbf	d2,@lyr3
00004F8A                            
00004F8A                            ; Mountains 1
00004F8A 3003                       		move.w	d3,d0
00004F8C E840                       		asr.w	#4,d0
00004F8E 343C 0024                  		move.w	#(37)-1,d2
00004F92                            @lyr4:
00004F92 30C3                       		move.w	d3,(a0)+
00004F94 30C0                       		move.w	d0,(a0)+
00004F96 0645 0001                  		add.w	#1,d5
00004F9A 0C45 00E0                  		cmp.w	#224,d5
00004F9E 6E00                       		bgt.s	@exit_now
00004FA0 51CA FFF0                  		dbf	d2,@lyr4
00004FA4                            
00004FA4                            ; Mountains 2
00004FA4 3003                       		move.w	d3,d0
00004FA6 E640                       		asr.w	#3,d0
00004FA8 343C 0024                  		move.w	#(37)-1,d2
00004FAC                            @lyr5:
00004FAC 30C3                       		move.w	d3,(a0)+
00004FAE 30C0                       		move.w	d0,(a0)+
00004FB0 0645 0001                  		add.w	#1,d5
00004FB4 0C45 00E0                  		cmp.w	#224,d5
00004FB8 6E00                       		bgt.s	@exit_now
00004FBA 51CA FFF0                  		dbf	d2,@lyr5
00004FBE                            		
00004FBE                            ; Mountains 2
00004FBE 3003                       		move.w	d3,d0
00004FC0 E440                       		asr.w	#2,d0
00004FC2 343C 002F                  		move.w	#(48)-1,d2
00004FC6                            @lyr6:
00004FC6 30C3                       		move.w	d3,(a0)+
00004FC8 30C0                       		move.w	d0,(a0)+
00004FCA 0645 0001                  		add.w	#1,d5
00004FCE 0C45 00E0                  		cmp.w	#224,d5
00004FD2 6E00                       		bgt.s	@exit_now
00004FD4 51CA FFF0                  		dbf	d2,@lyr6
00004FD8                            		
00004FD8                            ; ----------------
00004FD8                            ; Rest of BG
00004FD8                            
00004FD8                            @rest_fg:
00004FD8 30C3                       		move.w	d3,(a0)+
00004FDA 4258                       		clr.w	(a0)+
00004FDC 0645 0001                  		add.w	#1,d5
00004FE0 0C45 00E0                  		cmp.w	#224,d5
00004FE4 6DF2                       		blt.s	@rest_fg
00004FE6                            
00004FE6                            @exit_now:
00004FE6 06AE 0000 0001 002C        		add.l	#1,lvl_timer(a6)
00004FEE 4E75                       		rts
00004FF0                            		
00004FF0                            ; 		lea	(RAM_ScrlHor),a0
00004FF0                            ; 		move.w	#224-1,d1
00004FF0                            ; @nxt_h:
00004FF0                            ; 		move.w	lvl_x(a6),d0
00004FF0                            ; 		neg.w	d0
00004FF0                            ; 		move.w	d0,(a0)+
00004FF0                            ; 		asr.w	#2,d0
00004FF0                            ; 		move.w	d0,(a0)+
00004FF0                            ; 		dbf	d1,@nxt_h
00004FF0                            ; 		
00004FF0                            ; 		move.w	lvl_y(a6),d0
00004FF0                            ; 		move.w	d0,(RAM_ScrlVer)
00004FF0                            ; 		asr.w	#2,d0
00004FF0                            ; 		move.w	d0,(RAM_ScrlVer+2)
00004FF0                            
00004FF0                            ; --------------------------------------------
00004FF0                            ; Level_Load
00004FF0                            ; 
00004FF0                            ; a0 | Data
00004FF0                            ; --------------------------------------------
00004FF0                            
00004FF0                            Level_Load:
00004FF0                            ; 		lea	(Level_Test),a0
00004FF0 43F9 00FF 0000             		lea	($FF0000),a1
00004FF6 303C 1FFF                  		move.w	#(($8000)/4)-1,d0
00004FFA                            @clrram:
00004FFA 4299                       		clr.l	(a1)+
00004FFC 51C8 FFFC                  		dbf	d0,@clrram
00005000                            		
00005000 43F9 FFFF BC00             		lea	(RAM_LvlPlanes),a1
00005006 4279 FFFF BF1E             		clr.w	(RAM_PrizeHide)
0000500C 4279 FFFF BF60             		clr.w	(RAM_PrizeShow)
00005012 4269 001C                  		clr.w	lvl_x(a1)
00005016 4269 0020                  		clr.w	lvl_y(a1)
0000501A 283C FFFF 0000             		move.l	#$FFFF0000,d4
00005020 3018                       		move.w	(a0)+,d0
00005022 3340 0030                  		move.w	d0,lvl_size_x(a1)
00005026 3340 0034                  		move.w	d0,lvl_maxcam_x(a1)
0000502A 3018                       		move.w	(a0)+,d0
0000502C 3340 0032                  		move.w	d0,lvl_size_y(a1)
00005030 3340 0036                  		move.w	d0,lvl_maxcam_y(a1)
00005034 2358 0000                  		move.l	(a0)+,lvl_objects(a1)
00005038                            @loop:
00005038                            ; 		tst.w	(a0)
00005038                            ; 		bmi.s	@exit
00005038                            		
00005038 2358 0004                  		move.l	(a0)+,lvl_blocks(a1)
0000503C 2018                       		move.l	(a0)+,d0
0000503E 4A80                       		tst.l	d0
00005040 6A00                       		bpl.s	@nullprz
00005042 237C 0000 0000 0008        		move.l	#vram_prizes,lvl_przblocks(a1)
0000504A                            @nullprz:
0000504A 2358 000C                  		move.l	(a0)+,lvl_layout(a1)
0000504E 2358 0010                  		move.l	(a0)+,lvl_hilayout(a1)
00005052                            		
00005052 2358 0014                  		move.l	(a0)+,lvl_collision(a1)
00005056 2344 0018                  		move.l	d4,lvl_prizes(a1)
0000505A 2458                       		movea.l	(a0)+,a2
0000505C 2644                       		movea.l	d4,a3
0000505E                            @nextrle:
0000505E 7000                       		moveq	#0,d0
00005060 7200                       		moveq	#0,d1
00005062 101A                       		move.b	(a2)+,d0
00005064 0C00 00FF                  		cmp.b	#-1,d0
00005068 6700                       		beq.s	@Finish
0000506A 121A                       		move.b	(a2)+,d1
0000506C 4A40                       		tst.w	d0
0000506E 6700                       		beq.s	@oops
00005070 0440 0001                  		sub.w	#1,d0
00005074                            @CopyIt:
00005074 16C1                       		move.b	d1,(a3)+
00005076 0684 0000 0001             		add.l	#1,d4
0000507C 51C8 FFF6                  		dbf	d0,@CopyIt
00005080                            @oops:
00005080 60DC                       		bra.s	@nextrle
00005082                            @Finish:
00005082                            ; 		adda	#sizeof_lvlpln,a1
00005082                            ; 		bra.s	@loop
00005082                            ; @exit:
00005082                            		
00005082                            ; ----------------------------------		
00005082                            ; Load object from the list
00005082                            ; ----------------------------------
00005082                            
00005082 47F9 FFFF BC42             		lea	(RAM_LevelObjPos),a3
00005088 323C 0045                  		move.w	#max_lvlobj-1,d1
0000508C                            @clrlist:
0000508C 429B                       		clr.l	(a3)+
0000508E 429B                       		clr.l	(a3)+
00005090 425B                       		clr.w	(a3)+
00005092 51C9 FFF8                  		dbf	d1,@clrlist
00005096                            		
00005096 2479 FFFF BC00             		movea.l	(RAM_LvlPlanes+lvl_objects),a2
0000509C 47F9 FFFF BC42             		lea	(RAM_LevelObjPos),a3
000050A2 323C 0045                  		move.w	#max_lvlobj-1,d1
000050A6                            @NextObj:
000050A6 4A92                       		tst.l	(a2)
000050A8 6700                       		beq.s	@Nothing
000050AA 201A                        		move.l	(a2)+,d0
000050AC 0280 00FF FFFF              		and.l 	#$FFFFFF,d0
000050B2 26C0                        		move.l	d0,(a3)+
000050B4 26DA                       		move.l	(a2)+,(a3)+
000050B6 36DA                       		move.w	(a2)+,(a3)+
000050B8 51C9 FFEC                  		dbf	d1,@NextObj
000050BC                            @Nothing:
000050BC 4E75                       		rts
000050BE                            		
000050BE                            ; --------------------------------------------
000050BE                            ; Draw the level on screen
000050BE                            ; 
000050BE                            ; Uses:
000050BE                            ; d0-d5/a2-a5
000050BE                            ; --------------------------------------------
000050BE                            
000050BE                            Level_Draw:
000050BE 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
000050C4 203C 4000 0003             		move.l	#$40000003,d0		; VDP Address
000050CA 322D 001C                    		move.w	lvl_x(a5),d1		; X pos
000050CE 342D 0020                    		move.w	lvl_y(a5),d2		; Y pos
000050D2 E84A                          		lsr.w	#4,d2			; Ypos: xxx0 > 0xxx
000050D4 0242 000F                     		and.w	#$F,d2			; 0xxx > 00xx
000050D8 E14A                          		lsl.w	#8,d2			; 00xx > xx00
000050DA 0242 3FFF                     		and.w	#$3FFF,d2
000050DE E849                          		lsr.w	#4,d1			; Xpos: xxx0 > 0xxx
000050E0 E549                           		lsl.w	#2,d1			; 0xxx * 2
000050E2 4840                           		swap	d0
000050E4 D042                          		add.w	d2,d0			; +Y VDP
000050E6 D001                         		add.b	d1,d0			; +X VDP
000050E8 0200 007F                         		and.b	#$7F,d0
000050EC 4840                             		swap	d0
000050EE                            		
000050EE 382D 0020                  		move.w	lvl_y(a5),d4
000050F2 E84C                       		lsr.w	#4,d4
000050F4 C8ED 0030                  		mulu.w	lvl_size_x(a5),d4
000050F8 3A2D 001C                  		move.w	lvl_x(a5),d5
000050FC E84D                       		lsr.w	#4,d5
000050FE DA44                       		add.w	d4,d5
00005100 0245 7FFF                  		and.w	#$7FFF,d5
00005104 4845                       		swap 	d5
00005106                            		
00005106 3A3C 0016                  		move.w	#$16,d5
0000510A                            @do_row:
0000510A 286D 000C                   		movea.l	lvl_layout(a5),a4
0000510E 266D 0010                   		movea.l	lvl_hilayout(a5),a3
00005112 246D 0018                   		movea.l	lvl_prizes(a5),a2
00005116 4845                        		swap	d5
00005118 D8C5                        		adda 	d5,a4
0000511A D6C5                        		adda 	d5,a3
0000511C D4C5                        		adda	d5,a2
0000511E 4845                        		swap 	d5
00005120                             		
00005120 2600                       		move.l	d0,d3
00005122 780F                        		moveq	#$F,d4
00005124                            ;  		move.b	(RAM_VidRegs+$C),d2
00005124                            ;   		and.w	#%110,d2
00005124                            ;   		beq.s	@block
00005124                            ;   		moveq	#$1F,d4
00005124                            ;  
00005124                            @block:
00005124 226D 0008                  		movea.l	lvl_przblocks(a5),a1
00005128 7400                        		moveq	#0,d2	
0000512A 1412                        		move.b	(a2),d2
0000512C 4A02                        		tst.b	d2
0000512E 6700                        		beq.s	@noprzblk
00005130 0802 0007                   		btst	#7,d2
00005134 6700                        		beq.s	@hasPrzDrw
00005136                            @noprzblk:
00005136 1414                         		move.b	(a4),d2
00005138 226D 0004                     		movea.l	lvl_blocks(a5),a1
0000513C 4A13                        		tst.b	(a3)
0000513E 6700                        		beq.s	@hasprzDrw
00005140 1413                        		move.b	(a3),d2
00005142                            @hasprzDrw:
00005142 E74A                       		lsl.w	#3,d2
00005144 3231 2000                  		move.w	(a1,d2.w),d1
00005148 4841                        		swap	d1
0000514A 3231 2004                   		move.w	4(a1,d2.w),d1
0000514E                             		
0000514E 4844                        		swap	d4
00005150 1839 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d4
00005156 0244 0006                   		and.w	#%110,d4
0000515A 6700                        		beq.s	@NoDouble
0000515C E249                        		lsr.w	#1,d1
0000515E 4841                        		swap	d1
00005160 E249                        		lsr.w	#1,d1
00005162 4841                        		swap	d1
00005164                            @NoDouble:
00005164 4844                       		swap	d4
00005166 23C3 00C0 0004              		move.l	d3,(vdp_ctrl)
0000516C 4A13                        		tst.b	(a3)
0000516E 6700                        		beq.s	@nohiprio
00005170 0081 8000 8000              		or.l 	#$80008000,d1
00005176                            @nohiprio:
00005176 23C1 00C0 0000              		move.l	d1,(vdp_data)
0000517C 0683 0080 0000              		add.l	#$00800000,d3
00005182                              		
00005182 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
00005188 0241 0006                   		and.w	#%110,d1
0000518C 6600                        		bne.s	@NoDouble2
0000518E 3231 2002                  		move.w	2(a1,d2.w),d1
00005192 4841                        		swap	d1
00005194 3231 2006                   		move.w	6(a1,d2.w),d1
00005198 23C3 00C0 0004             		move.l	d3,(vdp_ctrl)
0000519E 4A13                        		tst.b	(a3)
000051A0 6700                        		beq.s	@nohiprio2
000051A2 0081 8000 8000              		or.l 	#$80008000,d1
000051A8                            @nohiprio2:
000051A8 23C1 00C0 0000              		move.l	d1,(vdp_data)
000051AE 0683 0080 0000              		add.l	#$00800000,d3
000051B4 0283 4F7C 0003              		and.l	#$4F7C0003,d3
000051BA                            @NoDouble2:		
000051BA 322D 0030                  		move.w	lvl_size_x(a5),d1
000051BE D8C1                       		adda	d1,a4
000051C0 D6C1                       		adda	d1,a3
000051C2 D4C1                       		adda	d1,a2
000051C4 51CC FF5E                  		dbf	d4,@block
000051C8                            	
000051C8 0680 0004 0000             		add.l	#$40000,d0
000051CE 0280 4F7C 0003             		and.l	#$4F7C0003,d0
000051D4 4845                       		swap 	d5
000051D6 0645 0001                  		add.w	#1,d5
000051DA 4845                       		swap 	d5
000051DC 51CD FF2C                  		dbf	d5,@do_row
000051E0                            
000051E0                            ; ----------------------------------
000051E0                            ; Check for objects ON the
000051E0                            ; same screen as the player
000051E0                            ; ----------------------------------
000051E0                            
000051E0 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
000051E6 49F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*16)),a4	;Start of level objects
000051EC 7601                       		moveq	#1,d3			; Starting at 1
000051EE                            @next_obj:
000051EE 4A95                       		tst.l	(a5)
000051F0 6700 0000                  		beq	@finish
000051F4 0815 0007                   		btst	#7,(a5)			;ON SCREEN flag?
000051F8 6600 0000                   		bne	@next
000051FC                            @found_obj:
000051FC 7800                         		moveq	#(max_objects-8)-1,d4
000051FE                            @nxtav_obj:
000051FE 4AAC 0000                  		tst.l	obj_code(a4)	
00005202 6700                       		beq.s	@valid
00005204 D8FC 0000                  		adda	#sizeof_obj,a4
00005208 51CC FFF4                  		dbf	d4,@nxtav_obj
0000520C                            		
0000520C                            @valid:
0000520C 396D 0004 0000             		move.w	4(a5),obj_x(a4)
00005212 396D 0006 0000             		move.w	6(a5),obj_y(a4)
00005218 1943 0000                  		move.b	d3,obj_spwnindx(a4)
0000521C                            		
0000521C 7200                          		moveq	#0,d1
0000521E 122D 0008                      		move.b	8(a5),d1
00005222 422C 0000                      		clr.b	obj_status(a4)
00005226 0801 0007                      		btst	#7,d1
0000522A 6700                           		beq.s	@dont_flip_l
0000522C 08EC 0038 0000               		bset	#bitobj_flipH,obj_status(a4)
00005232                            @dont_flip_l:
00005232 0801 0006                      		btst	#6,d1
00005236 6700                           		beq.s	@dont_flip_d
00005238 08EC 0078 0000               		bset	#bitobj_flipV,obj_status(a4)
0000523E                            @dont_flip_d:
0000523E 122D 0008                   		move.b	8(a5),d1
00005242 0241 003F                   		and.w	#$3F,d1
00005246 1941 0000                  		move.b	d1,obj_subid(a4)
0000524A 2015                        		move.l	(a5),d0
0000524C 0280 00FF FFFF               		and.l 	#$FFFFFF,d0
00005252 2940 0000                   		move.l	d0,obj_code(a4)
00005256 08D5 0007                   		bset	#7,(a5)			;SET ON SCREEN flag
0000525A D8FC 0000                  		adda	#sizeof_obj,a4
0000525E                            @next:
0000525E 0643 0001                  		add.w	#1,d3
00005262 DAFC 000A                  		adda	#$A,a5
00005266 6000 FF86                  		bra	@next_obj
0000526A                            @finish:
0000526A 4E75                            		rts
0000526C                            		
0000526C                            ; ----------------------------------		
0000526C                            
0000526C                            Level_HidePrize:
0000526C 49F9 FFFF BF20             		lea	(RAM_PrizeHide+2),a4
00005272 3839 FFFF BF1E             		move.w	(RAM_PrizeHide),d4
00005278 E54C                       		lsl.w	#2,d4
0000527A D8C4                       		adda	d4,a4
0000527C                            ; @chknext:
0000527C                            ; 		tst.l	(a4)
0000527C                            ; 		beq.s	@free
0000527C                            ; 		adda	#4,a4
0000527C                            ; 		bra.s	@chknext
0000527C                            ; @free:
0000527C 2880                       		move.l	d0,(a4)
0000527E 0679 0001 FFFF BF1E        		add.w	#1,(RAM_PrizeHide)
00005286                            @same:
00005286 4E75                       		rts
00005288                            		
00005288                            ; ----------------------------------
00005288                            
00005288                            Level_ShowPrize:
00005288 49F9 FFFF BF62             		lea	(RAM_PrizeShow+2),a4
0000528E 3839 FFFF BF60             		move.w	(RAM_PrizeShow),d4
00005294 E54C                       		lsl.w	#2,d4
00005296 D8C4                       		adda	d4,a4
00005298                            ; @chknext:
00005298                            ; 		tst.l	(a4)
00005298                            ; 		beq.s	@free
00005298                            ; 		adda	#4,a4
00005298                            ; 		bra.s	@chknext
00005298                            ; @free:
00005298 2880                       		move.l	d0,(a4)
0000529A 0679 0001 FFFF BF60        		add.w	#1,(RAM_PrizeShow)
000052A2                            @same:
000052A2 4E75                       		rts
000052A4                            
000052A4                            ; ----------------------------------
000052A4                            
000052A4                            ; Level_CheckPrize:
000052A4                            ;  		moveq	#0,d4
000052A4                            ;  		lea	(RAM_PrizeHide),a3
000052A4                            ;  		move.w	(a3)+,d5
000052A4                            ;  		tst.w	d5
000052A4                            ;  		beq.s	@free
000052A4                            ; 		sub.w	#1,d5
000052A4                            ; @chknext:
000052A4                            ;  		cmp.l	(a3)+,d0
000052A4                            ;  		beq.s	@found
000052A4                            ;  		dbf	d5,@chknext
000052A4                            ;  		bra.s	@free
000052A4                            ; 
000052A4                            ; @found:
000052A4                            ;  nop
000052A4                            ; ;  		bra.s * ;moveq	#-1,d4
000052A4                            ;  		
000052A4                            ; @free:
000052A4                            ;  		tst.l	d4
000052A4                            ; 		rts
000052A4                            		
000052A4                            ; ----------------------------------		
000052A4                            ; load level objects while moving
000052A4                            ; ----------------------------------
000052A4                            
000052A4                            Lvl_RefreshObj:
000052A4 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
000052AA 49F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*16)),a4
000052B0 7601                       		moveq	#1,d3			; Starting at 1
000052B2                            @next_obj:
000052B2 4A95                       		tst.l	(a5)
000052B4 6700 0000                  		beq	@finish
000052B8 0815 0006                  		btst	#6,(a5)			; GONE flag?
000052BC 6600 0000                  		bne	@next
000052C0 0815 0007                   		btst	#7,(a5)			; ON SCREEN flag?
000052C4 6600 0000                   		bne	@next
000052C8                            		
000052C8 4843                       		swap	d3
000052CA                            
000052CA 302E 001C                     		move.w	lvl_x(a6),d0
000052CE 322D 0004                         		move.w	4(a5),d1
000052D2 3400                           		move.w	d0,d2
000052D4 0642 0140                      		add.w	#320,d2
000052D8                                		
000052D8 0642 0038                     		add.w	#$38,d2
000052DC B242                            		cmp.w	d2,d1
000052DE 6E00 0000                        		bgt	@tooright  		
000052E2 0442 0008                     		sub.w	#$8,d2
000052E6 B242                            		cmp.w	d2,d1
000052E8 6D00 0000                        		blt	@tooright
000052EC 363C 0001                        		move.w	#1,d3
000052F0                            @tooright:
000052F0 0440 0038                     		sub.w	#$38,d0
000052F4 B240                             		cmp.w	d0,d1
000052F6 6D00 0000                         		blt	@tooleft
000052FA 0640 0008                     		add.w	#$8,d0
000052FE B240                            		cmp.w	d0,d1
00005300 6C00 0000                        		bge	@tooleft
00005304 363C 0001                        		move.w	#1,d3
00005308                            @tooleft:
00005308                            
00005308                            		
00005308 302E 0020                      		move.w	lvl_y(a6),d0
0000530C 322D 0006                         		move.w	6(a5),d1
00005310 3400                            		move.w	d0,d2
00005312 0642 00E0                      		add.w	#224,d2
00005316                            		
00005316 0642 0058                     		add.w	#$58,d2
0000531A B242                            		cmp.w	d2,d1
0000531C 6C00 0000                        		bge	@toodown 		
00005320 0442 0008                     		sub.w	#$8,d2
00005324 B242                            		cmp.w	d2,d1
00005326 6D00 0000                        		blt	@toodown
0000532A 363C 0001                        		move.w	#1,d3
0000532E                            @toodown:
0000532E 0440 0058                     		sub.w	#$58,d0
00005332 B240                             		cmp.w	d0,d1
00005334 6D00 0000                         		blt	@tooup
00005338 0640 0008                     		add.w	#$8,d0
0000533C B240                            		cmp.w	d0,d1
0000533E 6C00 0000                        		bge	@tooup
00005342 363C 0001                        		move.w	#1,d3
00005346                            @tooup:
00005346                            
00005346                            
00005346 3003                       		move.w	d3,d0
00005348 4843                       		swap	d3
0000534A 4A40                       		tst.w	d0
0000534C 6700                       		beq.s	@next
0000534E                              		
0000534E                            @found_obj:
0000534E 7800                         		moveq	#(max_objects-16)-1,d4
00005350                            @nxtav_obj:
00005350 4AAC 0000                  		tst.l	obj_code(a4)
00005354 6700                       		beq.s	@valid
00005356 B62C 0000                  		cmp.b	obj_spwnindx(a4),d3
0000535A 6700                       		beq.s	@next
0000535C D8FC 0000                  		adda	#sizeof_obj,a4
00005360 51CC FFEE                  		dbf	d4,@nxtav_obj
00005364 6000                       		bra.s	@next
00005366                            		
00005366                            @valid:
00005366 264C                       		movea.l	a4,a3
00005368 323C 0000                  		move.w	#sizeof_obj,d1
0000536C                            @cleanup:
0000536C 421B                       		clr.b	(a3)+
0000536E 51C9 FFFC                  		dbf	d1,@cleanup
00005372                            		
00005372 396D 0004 0000             		move.w	4(a5),obj_x(a4)
00005378 396D 0006 0000             		move.w	6(a5),obj_y(a4)
0000537E 1943 0000                  		move.b	d3,obj_spwnindx(a4)
00005382                            		
00005382 7200                          		moveq	#0,d1
00005384 122D 0008                      		move.b	8(a5),d1
00005388 422C 0000                      		clr.b	obj_status(a4)
0000538C 0801 0007                      		btst	#7,d1
00005390 6700                           		beq.s	@dont_flip_l
00005392 08EC 0038 0000               		bset	#bitobj_flipH,obj_status(a4)
00005398                            
00005398                            @dont_flip_l:
00005398 0801 0006                      		btst	#6,d1
0000539C 6700                           		beq.s	@dont_flip_d
0000539E 08EC 0078 0000               		bset	#bitobj_flipV,obj_status(a4)
000053A4                            @dont_flip_d:
000053A4 122D 0008                   		move.b	8(a5),d1
000053A8 0241 003F                   		and.w	#$3F,d1
000053AC 1941 0000                  		move.b	d1,obj_subid(a4)
000053B0 2015                        		move.l	(a5),d0
000053B2 0280 00FF FFFF               		and.l 	#$FFFFFF,d0
000053B8 2940 0000                   		move.l	d0,obj_code(a4)
000053BC 08D5 0007                   		bset	#7,(a5)			;SET ON SCREEN flag
000053C0 D8FC 0000                  		adda	#sizeof_obj,a4
000053C4                            @next:
000053C4 0643 0001                  		add.w	#1,d3
000053C8 DAFC 000A                  		adda	#$A,a5
000053CC 6000 FEE4                  		bra	@next_obj
000053D0                            @finish:
000053D0 4E75                       		rts
000053D2                             	
000053D2                            ; ----------------------------------
000053D2                            ; d0 - ID
000053D2                            ; ----------------------------------
000053D2                            
000053D2                            Lvl_DoHidePrz:
000053D2                            		;TODO: Up/Left checks
000053D2 2800                       		move.l	d0,d4
000053D4 E88C                       		lsr.l	#4,d4
000053D6 0244 FFF0                  		and.w	#$FFF0,d4
000053DA 3A2E 0020                   		move.w	lvl_y(a6),d5
000053DE B845                        		cmp.w	d5,d4
000053E0 6D00                        		blt.s	LvlPrzReadRet
000053E2 2800                       		move.l	d0,d4
000053E4 4844                       		swap	d4
000053E6 0244 FFF0                  		and.w	#$FFF0,d4
000053EA 3A2E 001C                   		move.w	lvl_x(a6),d5
000053EE B845                        		cmp.w	d5,d4
000053F0 6D00                        		blt.s	LvlPrzReadRet
000053F2                             		
000053F2 2800                        		move.l	d0,d4			;Postion | XXX?????
000053F4 4844                        		swap	d4			;????XXX?
000053F6 E44C                        		lsr.w	#2,d4			;????0XXX
000053F8 0284 0000 007C              		and.l	#$7C,d4
000053FE 2A00                        		move.l	d0,d5			;???YYY??
00005400 0245 0F00                    		and.w	#$F00,d5
00005404 D845                          		add.w	d5,d4
00005406 2A3C 4000 0003              		move.l	#$40000003,d5
0000540C 4845                        		swap	d5
0000540E 8A44                        		or.w	d4,d5
00005410 4845                        		swap	d5
00005412                             		
00005412 286E 000C                    		movea.l	lvl_layout(a6),a4	;Layout data
00005416 2800                        		move.l	d0,d4
00005418 0284 000F FF00              		and.l	#$000FFF00,d4
0000541E E08C                        		lsr.l	#8,d4
00005420 0284 0000 0FFF              		and.l	#$FFF,d4
00005426 C8EE 0030                   		mulu.w	lvl_size_x(a6),d4
0000542A D8C4                        		adda	d4,a4	
0000542C 2800                         		move.l	d0,d4
0000542E 0284 FFF0 0000              		and.l	#$FFF00000,d4
00005434 4844                         		swap	d4
00005436 E84C                         		lsr.w	#4,d4
00005438 D8C4                          		add.w 	d4,a4
0000543A 7800                           		moveq	#0,d4
0000543C 1814                          		move.b	(a4),d4
0000543E 286E 0004                  		movea.l	lvl_blocks(a6),a4	;Draw blocks
00005442 6000                       		bra.s	LvlPrzReadBlk
00005444                            LvlPrzReadRet:
00005444 4E75                       		rts
00005446                            		
00005446                            ; ----------------------------------
00005446                            ; d0 - ID
00005446                            ; ----------------------------------
00005446                            
00005446                            Lvl_DoShowPrz:
00005446                            		;TODO: Up/Left checks
00005446 2800                       		move.l	d0,d4
00005448 E88C                       		lsr.l	#4,d4
0000544A 0244 FFF0                  		and.w	#$FFF0,d4
0000544E 3A2E 0020                   		move.w	lvl_y(a6),d5
00005452 B845                        		cmp.w	d5,d4
00005454 6DEE                        		blt.s	LvlPrzReadRet
00005456 2800                       		move.l	d0,d4
00005458 4844                       		swap	d4
0000545A 0244 FFF0                  		and.w	#$FFF0,d4
0000545E 3A2E 001C                   		move.w	lvl_x(a6),d5
00005462 B845                        		cmp.w	d5,d4
00005464 6DDE                        		blt.s	LvlPrzReadRet
00005466                             		
00005466 2800                        		move.l	d0,d4			;Postion | XXX?????
00005468 4844                        		swap	d4			;????XXX?
0000546A E44C                        		lsr.w	#2,d4			;????0XXX
0000546C 0284 0000 007C              		and.l	#$7C,d4
00005472 2A00                        		move.l	d0,d5			;???YYY??
00005474 0285 0000 0F00               		and.l	#$F00,d5
0000547A 8845                          		or.w	d5,d4
0000547C 2A3C 4000 0003              		move.l	#$40000003,d5
00005482 4845                        		swap	d5
00005484 8A44                        		or.w	d4,d5
00005486 4845                        		swap	d5 		
00005488 286E 0018                    		movea.l	lvl_prizes(a6),a4	;Layout data
0000548C 2800                        		move.l	d0,d4
0000548E 0284 000F FF00              		and.l	#$000FFF00,d4
00005494 E08C                        		lsr.l	#8,d4
00005496 0284 0000 0FFF              		and.l	#$FFF,d4
0000549C C8EE 0030                   		mulu.w	lvl_size_x(a6),d4
000054A0                            ;  		lsl.w	#1,d4
000054A0 D8C4                        		adda	d4,a4	
000054A2 2800                         		move.l	d0,d4
000054A4 0284 FFF0 0000              		and.l	#$FFF00000,d4
000054AA 4844                         		swap	d4
000054AC E84C                         		lsr.w	#4,d4
000054AE                            ;    		lsl.w	#1,d4
000054AE D8C4                          		add.w	d4,a4
000054B0 7800                           		moveq	#0,d4
000054B2 1814                          		move.b	(a4),d4
000054B4 286E 0008                  		movea.l	lvl_przblocks(a6),a4	;Draw blocks
000054B8                            		
000054B8                            LvlPrzReadBlk:
000054B8 E78C                         		lsl.l	#3,d4
000054BA 0284 0000 FFFF               		and.l	#$FFFF,d4
000054C0 D8C4                          		adda 	d4,a4
000054C2                               		
000054C2 23C5 00C0 0004              		move.l	d5,(vdp_ctrl).l
000054C8 3814                        		move.w	(a4),d4
000054CA 4844                        		swap	d4
000054CC 382C 0004                   		move.w	4(a4),d4
000054D0 23C4 00C0 0000              		move.l	d4,(vdp_data).l
000054D6 0685 0080 0000              		add.l	#$800000,d5
000054DC 23C5 00C0 0004              		move.l	d5,(vdp_ctrl).l
000054E2 382C 0002                   		move.w	2(a4),d4
000054E6 4844                        		swap	d4
000054E8 382C 0006                   		move.w	6(a4),d4
000054EC 23C4 00C0 0000              		move.l	d4,(vdp_data).l
000054F2                            @ignore:
000054F2 4E75                        		rts	
000054F4                            		
000054F4                            ; ----------------------------------		
000054F4                            ; Load art data
000054F4                            ; 
000054F4                            ; a1 - the list
000054F4                            ; ----------------------------------
000054F4                            
000054F4                            Level_LoadArtList:
000054F4 4A51                       		tst.w	(a1)
000054F6 6B00                       		bmi.s	@Finish
000054F8 2059                       		move.l	(a1)+,a0		;Addr
000054FA 3019                        		move.w	(a1)+,d0		;VRAM
000054FC 3219                        		move.w	(a1)+,d1		;Size
000054FE 6100 B1EC                   		bsr	VDP_SendData_L
00005502 60F0                        		bra.s	Level_LoadArtList
00005504                             		
00005504                            @Finish:
00005504 4E75                       		rts
00005506                            		
00005506                            ; =================================================================
00005506                            ; --------------------------------------------
00005506                            ; Data
00005506                            ; --------------------------------------------
00005506                            
00005506                            vram_prizes:
00005506 0000 0001 0000 0001        		dc.l $0001,$0001		; $00 FILLER
0000550E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $01 Breakable: normal
00005516 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $02  **  **  : 1 coin
0000551E 0580 0581 0582 0583         		dc.w $580,$581,$582,$583	; $03  **  **  : 10 coins
00005526 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $04  **  **  : ???
0000552E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $05  **  **  : ???
00005536 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $06  **  **  : ???
0000553E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $07  **  **  : 1 up
00005546 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $08 Block ! : 1 coin
0000554E 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $09  ****   : 10 coins
00005556 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0A  ****   : ???
0000555E 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0B  ****   : ???
00005566 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0C  ****   : ???
0000556E 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0D  ****   : ???
00005576 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0E  ****   : 1 up
0000557E 059C 059D 059E 059F        		dc.w $59C,$59D,$59E,$59F	; $0F Empty block
00005586                            		
00005586 4580 4581 4582 4583        		dc.w $4580,$4581,$4582,$4583	;$10+
0000558E 4580 4581 4582 4583        		dc.w $4580,$4581,$4582,$4583
00005596 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000559E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000055A6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000055AE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000055B6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000055BE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000055C6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
000055CE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000055D6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000055DE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000055E6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000055EE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000055F6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000055FE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005606                            
00005606 4594 4595 4596 4597        		dc.w $4594,$4595,$4596,$4597	;$20+ Bouncing block
0000560E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005616 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000561E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005626 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000562E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005636 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000563E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005646 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
0000564E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005656 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000565E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005666 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000566E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005676 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000567E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005686                            		
00005686 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	;$30+
0000568E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005696 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000569E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056A6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056AE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056B6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056BE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056C6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
000056CE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056D6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056DE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056E6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056EE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056F6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056FE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005706                            		
00005706 45A0 45A1 45A2 45A3        		dc.w $45A0,$45A1,$45A2,$45A3	;$40 - Coins
0000570E 45A4 45A5 45A6 45A7        		dc.w $45A4,$45A5,$45A6,$45A7
00005716                            		even
00005716                            
00005716                            ; --------------------------------------------
00005716                            
00005716                            col_SlopeData:
00005716 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00005726 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;$01
00005736 0F0E 0D0C 0B0A 0908 0706+  		dc.b $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00	;$02
00005746 0001 0203 0405 0607 0809+  		dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F	;$03
00005756                            		
00005756 0F0F 0E0E 0D0D 0C0C 0B0B+  		dc.b $0F,$0F,$0E,$0E,$0D,$0D,$0C,$0C,$0B,$0B,$0A,$0A,$09,$09,$08,$08
00005766 0707 0606 0505 0404 0303+  		dc.b $07,$07,$06,$06,$05,$05,$04,$04,$03,$03,$02,$02,$01,$01,$00,$00
00005776                            		
00005776 0000 0101 0202 0303 0404+  		dc.b $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
00005786 0808 0909 0A0A 0B0B 0C0C+  		dc.b $08,$08,$09,$09,$0A,$0A,$0B,$0B,$0C,$0C,$0D,$0D,$0E,$0E,$0F,$0F
00005796                            		
00005796 0F0F 0F0F 0E0E 0E0E 0D0D+  		dc.b $0F,$0F,$0F,$0F,$0E,$0E,$0E,$0E,$0D,$0D,$0D,$0D,$0C,$0C,$0C,$0C
000057A6 0B0B 0B0B 0A0A 0A0A 0909+  		dc.b $0B,$0B,$0B,$0B,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$08,$08,$08,$08
000057B6 0707 0707 0606 0606 0505+  		dc.b $07,$07,$07,$07,$06,$06,$06,$06,$05,$05,$05,$05,$04,$04,$04,$04
000057C6 0303 0303 0202 0202 0101+  		dc.b $03,$03,$03,$03,$02,$02,$02,$02,$01,$01,$01,$01,$00,$00,$00,$00
000057D6                            		
000057D6 0000 0000 0101 0101 0202+  		dc.b $00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03
000057E6 0404 0404 0505 0505 0606+  		dc.b $04,$04,$04,$04,$05,$05,$05,$05,$06,$06,$06,$06,$07,$07,$07,$07
000057F6 0808 0808 0909 0909 0A0A+  		dc.b $08,$08,$08,$08,$09,$09,$09,$09,$0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B
00005806 0C0C 0C0C 0D0D 0D0D 0E0E+  		dc.b $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D,$0E,$0E,$0E,$0E,$0F,$0F,$0F,$0F
00005816                            		even
00005816                            		
00005816                            		
00005816                            		include	"engine/modes/level/subs/objects.asm"
00005816                            ; ====================================================================
00005816                            ; -------------------------------------------------
00005816                            ; Objects system
00005816                            ; -------------------------------------------------
00005816                            
00005816                            ; NOTES:
00005816                            ; Current object Slots:
00005816                            ;   00   | Player 1 (HARD-CODED)
00005816                            ;   01   | PLANNED (Second player if needed)
00005816                            ;   02   | HUD (TODO)
00005816                            ;   03   | Eng flag
00005816                            ;   04   | FREE
00005816                            ;   05   | FREE
00005816                            ;   06   | FREE
00005816                            ;   07   | FREE
00005816                            ; 08-15  | Blocks+Action objects (Auto-arrangled)
00005816                            ; 16-MAX | Level objects (Auto-arrangled)
00005816                            
00005816                            ; --------------------------------------------
00005816                            ; Variables
00005816                            ; --------------------------------------------
00005816                            
00005816 =00000040                  max_objects	equ	64
00005816 =00000040                  max_microspr	equ	64
00005816                            
00005816                            ; --------------------------------------------
00005816                            
00005816                            		rsreset
00005816 =00000000                  obj_code	rs.l	1		; Object code 
00005816 =00000004                  obj_size	rs.l	1		; Object size (see below)
00005816                            
00005816 =00000008                  obj_x		rs.l	1		; Object X Position
00005816 =0000000C                  obj_y		rs.l	1		; Object Y Position
00005816 =00000010                  obj_x_spd	rs.l	1		; Object X Speed
00005816 =00000014                  obj_y_spd	rs.l	1		; Object Y Gravity
00005816                            ; obj_maps	rs.l	1
00005816                            
00005816 =00000018                  obj_anim_next	rs.w	1		; Object animation increment (obj_anim + obj_anim_next)
00005816 =0000001A                  obj_anim_id	rs.w	1		; Object animation to read (current|saved)
00005816                            ; obj_vram	rs.w	1		; Object VRAM
00005816 =0000001C                  obj_anim_spd	rs.b	1		; Object animation delay
00005816 =0000001D                  obj_index	rs.b	1		; Object code index
00005816 =0000001E                  obj_status	rs.b	1		; Object status
00005816 =0000001F                  obj_subid	rs.b	1		; Object SubID
00005816 =00000020                  obj_frame	rs.b	1		; Object display frame
00005816                            ; obj_frame_old	rs.b	1		; Object last frame (DMA)
00005816 =00000021                  obj_spwnindx	rs.b	1		; Object respawn index (this - 1)
00005816 =00000022                  obj_col		rs.b	1		; Object collision
00005816 =00000023                  obj_null	rs.b	1		; FILLER
00005816                            
00005816 =00000024                  obj_ram		rs.b	$40		; Object RAM
00005816 =00000064                  sizeof_obj	rs.l	0
00005816                            
00005816                            ; --------------------------------
00005816                            ; obj_size
00005816                            ; --------------------------------
00005816                            
00005816                            		rsreset
00005816 =00000000                  objsize_l	rs.b	1
00005816 =00000001                  objsize_r	rs.b	1
00005816 =00000002                  objsize_u	rs.b	1
00005816 =00000003                  objsize_d	rs.b	1
00005816                            
00005816                            ; --------------------------------
00005816                            ; obj_status
00005816                            ; --------------------------------
00005816                            
00005816 =00000000                  bitobj_flipH	equ	0		; set to flip Sprite Horizontally
00005816 =00000001                  bitobj_flipV	equ	1		; set to flip Sprite Vertically
00005816 =00000002                  bitobj_air	equ	2		; set if floating/jumping
00005816 =00000003                  bitobj_hurt	equ	3		; set if we are hurt (Touched by enemy or player)
00005816                            
00005816 =00000006                  bitobj_hit	equ	6		; set to we can hit objects
00005816 =00000007                  bitobj_stay	equ	7		; set to stay on-screen
00005816                            
00005816                            ; --------------------------------
00005816                            ; obj_col
00005816                            ; --------------------------------
00005816                            
00005816 =00000000                  bitcol_floor	equ	0		; Set for Touching floor
00005816 =00000001                  bitcol_ceiling	equ	1		; 
00005816 =00000002                  bitcol_wall_r	equ	2		; set for Touching floor/wall/Ceiling
00005816 =00000003                  bitcol_wall_l	equ	3		;
00005816 =00000004                  bitcol_obj	equ	4
00005816 =00000005                  bitcol_obju	equ	5
00005816 =00000006                  bitcol_objl	equ	6
00005816 =00000007                  bitcol_objr	equ	7
00005816                            
00005816                            ; =================================================================
00005816                            ; ------------------------------------------------
00005816                            ; RAM
00005816                            ; ------------------------------------------------
00005816                            
00005816                            		rsset RAM_ObjectSys
00005816 =FFFFC040                  RAM_ObjBuffer	rs.b (sizeof_obj*max_objects)
00005816 =FFFFD940                  RAM_ObjBackup	rs.l 2
00005816 =FFFFD948                  RAM_MicrSprBuff	rs.l max_microspr*2
00005816 =FFFFDB48                  RAM_ObjMaxCoins	rs.l 16
00005816 =FFFFDB88                  RAM_MicrSprCntr	rs.w 1
00005816 =FFFFDB8A                  RAM_ObjCount	rs.w 1
00005816 =FFFFDB8C                  sizeof_objbuff	rs.l 0
00005816                            ; 		inform 0,"Objects system uses: %h",sizeof_objbuff-RAM_ObjectSys
00005816                            		
00005816                            ; ====================================================================		
00005816                            ; --------------------------------------------
00005816                            ; Init
00005816                            ; --------------------------------------------
00005816                            
00005816                            Objects_Init:
00005816 41F9 FFFF C040              		lea	(RAM_ObjBuffer),a0
0000581C 303C 18FF                  		move.w	#(sizeof_obj*max_objects)-1,d0
00005820                            @ClrObjs:
00005820 4218                        		clr.b	(a0)+
00005822 51C8 FFFC                   		dbf	d0,@ClrObjs
00005826 4279 FFFF DB88              		clr.w	(RAM_MicrSprCntr)
0000582C 4E75                       		rts
0000582E                             
0000582E                            ; ====================================================================	
0000582E                            ; --------------------------------------------
0000582E                            ; Loop
0000582E                            ; --------------------------------------------
0000582E                            
0000582E                            Objects_Run:
0000582E 6100 B3D0                    		bsr	Sprites_Reset
00005832                            
00005832                            ; -----------------------------
00005832                            ; Run objects
00005832                            ; -----------------------------
00005832                            
00005832 4279 FFFF DB8A             		clr.w	(RAM_ObjCount)
00005838 4DF9 FFFF C040              		lea	(RAM_ObjBuffer),a6
0000583E 3E3C 003F                   		move.w	#max_objects-1,d7
00005842                            @Next:
00005842 4A96                        		tst.l	(a6)
00005844 6700                        		beq.s	@NoAddr
00005846                             		
00005846 48F9 4080 FFFF D940         		movem.l	a6/d7,(RAM_ObjBackup)
0000584E 2A6E 0000                    		movea.l	obj_code(a6),a5
00005852 4E95                         		jsr	(a5)
00005854 4CF9 4080 FFFF D940         		movem.l	(RAM_ObjBackup),a6/d7
0000585C 0679 0001 FFFF DB8A          		add.w	#1,(RAM_ObjCount)
00005864                            @NoAddr:
00005864 DCFC 0064                   		adda	#sizeof_obj,a6
00005868 51CF FFD8                   		dbf	d7,@Next
0000586C                             		
0000586C                            ; -----------------------------
0000586C                            ; Show the sprites
0000586C                            ; -----------------------------
0000586C                            
0000586C                            ; Object_DrawObjects:
0000586C 45F9 FFFF D948              		lea	(RAM_MicrSprBuff),a2
00005872                            @NextFrm:
00005872 4A92                        		tst.l	(a2)
00005874 6700                        		beq.s	@NoAddrFrm
00005876 6100 0000                   		bsr	Object_MicroToSpr
0000587A 429A                        		clr.l	(a2)+
0000587C 429A                        		clr.l	(a2)+
0000587E 60F2                         		bra.s	@NextFrm
00005880                            @NoAddrFrm:
00005880 4279 FFFF DB88               		clr.w	(RAM_MicrSprCntr)
00005886 4E75                       		rts
00005888                            ; 		inform 0,"%h",RAM_MicrSprBuff
00005888                            		
00005888                            ; ====================================================================
00005888                            ; ----------------------------------------------
00005888                            ; Subs
00005888                            ; ----------------------------------------------
00005888                            
00005888                            ; **********************************************
00005888                            ; Object display
00005888                            ; **********************************************
00005888                            
00005888                            ; ----------------------------------------------
00005888                            ; Object_DynArt
00005888                            ; 
00005888                            ; Input:
00005888                            ; d0 | LONG - VRAM|Frame
00005888                            ; d1 | LONG - DPLC data
00005888                            ; d2 | LONG - Art data
00005888                            ;
00005888                            ; Uses:
00005888                            ; a3/d3-d7
00005888                            ; ----------------------------------------------
00005888                             
00005888                            Object_DPLC:
00005888                            ; 		cmp.b	obj_frame_old(a6),d0
00005888                            ; 		beq.s	@EndAll
00005888 0240 00FF                  		and.w	#$FF,d0
0000588C                            ; 		move.b	d0,obj_frame_old(a6)
0000588C 2641                       		movea.l	d1,a3
0000588E E348                       		lsl.w	#1,d0
00005890 D6F3 0000                      		adda	(a3,d0.w),a3
00005894 7C00                          		moveq	#0,d6
00005896 3C1B                          		move.w	(a3)+,d6
00005898 6700 0000                     		beq	@EndAll
0000589C 0446 0001                     		sub.w	#1,d6
000058A0 4840                          		swap	d0
000058A2 0240 07FF                     		and.w	#$7FF,d0
000058A6 7A00                          		moveq	#0,d5
000058A8 3A00                          		move.w	d0,d5		;d5 - VRAM (base)
000058AA 2E02                          		move.l	d2,d7
000058AC                            @Next:
000058AC 3213                            		move.w	(a3),d1
000058AE E049                            		lsr.w	#8,d1
000058B0 3801                            		move.w	d1,d4
000058B2 E84C                            		lsr.w	#4,d4		;d4 - Next VRAM
000058B4 0244 000F                       		and.w	#$F,d4
000058B8 0644 0001                       		add.w	#1,d4
000058BC 0641 0010                       		add.w	#$10,d1		;Size + 1
000058C0 4841                            		swap	d1		;Size|ROM+Here
000058C2 321B                             		move.w	(a3)+,d1
000058C4 0241 0FFF                        		and.w	#$FFF,d1
000058C8 EB49                            		lsl.w	#5,d1
000058CA 2007                            		move.l	d7,d0
000058CC 7600                             		moveq	#0,d3
000058CE 3601                             		move.w	d1,d3
000058D0 D083                             		add.l	d3,d0		;ROM Addr + Cell number
000058D2                                 		
000058D2 4841                       		swap	d1		;(Broken)|Size
000058D4 3405                       		move.w	d5,d2
000058D6 6100 B2F4                      		bsr	DMA_Set		;** TODO **
000058DA DA44                       		add.w	d4,d5		;Next VRAM
000058DC 51CE FFCE                     		dbf	d6,@Next
000058E0                             
000058E0                            @EndAll:
000058E0 4E75                        		rts
000058E2                             
000058E2                            ; ----------------------------------------------
000058E2                            ; Object_Show
000058E2                            ; 
000058E2                            ; Input:
000058E2                            ; a6 - Current object
000058E2                            ; d0 - VRAM | Frame
000058E2                            ; 
000058E2                            ; Uses:
000058E2                            ; a3/d0-d1
000058E2                            ; 
000058E2                            ; WARNING: WITH THIS METHOD, OBJECTS MUST BE
000058E2                            ; AFTER $FF8000 SO IT CAN CORRECTLY
000058E2                            ; CHECK BETWEEN OBJECTS AND
000058E2                            ; SEPARATE SPRITES
000058E2                            ; ----------------------------------------------
000058E2                            
000058E2                            Object_Show:	
000058E2 47F9 FFFF D948             		lea	(RAM_MicrSprBuff),a3
000058E8 3439 FFFF DB88             		move.w	(RAM_MicrSprCntr),d2
000058EE E74A                       		lsl.w	#3,d2
000058F0 D6C2                       		adda	d2,a3
000058F2                            ; @next:		
000058F2                            ; 		tst.l	(a3)
000058F2                            ; 		beq.s	@free
000058F2                            ; 		adda	#8,a3
000058F2                            ; 		bra.s	@next
000058F2                            @free:
000058F2 B6FC DB48                   		cmpa.w	#(RAM_MicrSprBuff+($200))&$FFFF,a3	; TODO: mejor check
000058F6 6C00                        		bge.s	@full
000058F8                             		
000058F8 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
000058FE 342E 0008                   		move.w	obj_x(a6),d2
00005902 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00005908 6600                        		bne.s	@onscrn_X
0000590A 946D 001C                   		sub.w	lvl_x(a5),d2
0000590E                            @onscrn_X:
0000590E 0642 0080                   		add.w	#$80,d2
00005912 0C42 0040                    		cmp.w	#$40,d2
00005916 6D00 0000                    		blt	@full
0000591A 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
0000591E 6E00 0000                   		bgt	@full
00005922                            
00005922 4842                        		swap	d2
00005924 342E 000C                   		move.w	obj_y(a6),d2
00005928 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0000592E 6600                        		bne.s	@onscrn_Y
00005930 946D 0020                  		sub.w	lvl_y(a5),d2
00005934                            @onscrn_Y:
00005934 0642 0080                   		add.w	#$80,d2
00005938 0C42 0040                   		cmp.w	#$40,d2
0000593C 6D00 0000                   		blt	@full
00005940 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
00005944 6E00 0000                  		bgt	@full
00005948                                		
00005948 36CE                       		move.w	a6,(a3)+	; (Object_RAM & $FFFF)
0000594A 0240 00FF                  		and.w	#$FF,d0
0000594E E148                       		lsl.w	#8,d0
00005950 4840                       		swap	d0
00005952 36C0                       		move.w	d0,(a3)+	; VRAM
00005954 4240                       		clr.w	d0
00005956 8280                        		or.l	d0,d1	
00005958 26C1                       		move.l	d1,(a3)+	; Frame | Maps data
0000595A                            		
0000595A 0679 0001 FFFF DB88        		add.w	#1,(RAM_MicrSprCntr)
00005962                            @full:		
00005962 4E75                        		rts
00005964                            
00005964                            ; ----------------------------------------------
00005964                            ; Object_ExtSprite
00005964                            ; 
00005964                            ; Input:
00005964                            ; d0 -    X | Y
00005964                            ; d1 - Size | VRAM
00005964                            ; 
00005964                            ; Uses:
00005964                            ; d4-d5, a3
00005964                            ; ----------------------------------------------
00005964                            
00005964                            Object_ExtSprite:
00005964 47F9 FFFF D948             		lea	(RAM_MicrSprBuff),a3
0000596A 7800                       		moveq	#0,d4
0000596C 3839 FFFF DB88             		move.w	(RAM_MicrSprCntr),d4
00005972 E74C                       		lsl.w	#3,d4
00005974 D6C4                       		adda	d4,a3
00005976                            ; @next:		
00005976                            ; 		tst.l	(a3)
00005976                            ; 		beq.s	@free
00005976                            ; 		adda	#8,a3
00005976                            ; 		bra.s	@next
00005976                            @free:
00005976 B6FC DB48                   		cmpa.w	#(RAM_MicrSprBuff+($200))&$FFFF,a3	; TODO: mejor check
0000597A 6C00                        		bge.s	@full
0000597C                             		
0000597C 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005982                            		
00005982 2A00                       		move.l	d0,d5
00005984 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0000598A 6600                        		bne.s	@onscrn_Y
0000598C 9A6D 0020                    		sub.w	lvl_y(a5),d5
00005990                            @onscrn_Y:
00005990 0645 0080                    		add.w	#$80,d5
00005994 0C45 0040                   		cmp.w	#$40,d5
00005998 6D00 0000                   		blt	@full
0000599C 0C45 01A0                  		cmp.w	#(224+$80)+$40,d5
000059A0 6E00 0000                  		bgt	@full
000059A4 0245 7FFF                   		and.w	#$7FFF,d5
000059A8 3685                         		move.w	d5,(a3)
000059AA                            
000059AA 4845                       		swap	d5
000059AC 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
000059B2 6600                        		bne.s	@onscrn_X
000059B4 9A6D 001C                     		sub.w	lvl_x(a5),d5
000059B8                            @onscrn_X:
000059B8 0645 0080                    		add.w	#$80,d5
000059BC 0C45 0040                    		cmp.w	#$40,d5
000059C0 6D00 0000                    		blt	@full
000059C4 0C45 0200                   		cmp.w	#(320+$80)+$40,d5
000059C8 6E00 0000                   		bgt	@full
000059CC 0245 7FFF                  		and.w	#$7FFF,d5
000059D0 3745 0006                    		move.w	d5,6(a3)
000059D4                            
000059D4 2801                         		move.l	d1,d4
000059D6 3744 0004                   		move.w	d4,4(a3)
000059DA 4844                        		swap	d4
000059DC 3A04                        		move.w	d4,d5
000059DE 0245 000F                   		and.w	#$F,d5
000059E2 3745 0002                     		move.w	d5,2(a3)
000059E6 4844                          		swap	d4
000059E8                               		
000059E8 0679 0001 FFFF DB88           		add.w	#1,(RAM_MicrSprCntr)
000059F0                            @full:		
000059F0 4E75                        		rts
000059F2                             		
000059F2                            ; ----------------------------------------------
000059F2                            ; Object_Delete
000059F2                            ; 
000059F2                            ; Input:
000059F2                            ; a6 - Current object
000059F2                            ; ----------------------------------------------
000059F2                            
000059F2                            Object_Delete:
000059F2 7000                       		moveq	#0,d0
000059F4 102E 0021                  		move.b 	obj_spwnindx(a6),d0
000059F8 4A00                       		tst.b	d0
000059FA 6700                       		beq.s	@offindx
000059FC 0440 0001                  		sub.w	#1,d0
00005A00 C0FC 000A                  		mulu.w	#$A,d0
00005A04 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
00005A0A DAC0                       		adda	d0,a5
00005A0C 0895 0007                  		bclr	#7,(a5)			;Reset ON SCREEN flag
00005A10                            @offindx:
00005A10                            
00005A10                            ;  		clr.l	obj_code(a6)
00005A10                            ; 		clr.b	obj_index(a6)
00005A10                            		
00005A10 303C 0063                  		move.w	#sizeof_obj-1,d0
00005A14                            @delete:
00005A14 421E                       		clr.b	(a6)+
00005A16 51C8 FFFC                  		dbf	d0,@delete
00005A1A 4E75                        		rts
00005A1C                             		
00005A1C                            ; ----------------------------------------------
00005A1C                            ; Object_MicroToSpr
00005A1C                            ; 
00005A1C                            ; grab an entry from the microlist
00005A1C                            ; and convert it to sprites
00005A1C                            ; ----------------------------------------------
00005A1C                            
00005A1C                            Object_MicroToSpr:
00005A1C 7000                       		moveq	#0,d0
00005A1E 3012                       		move.w	(a2),d0
00005A20 4A40                       		tst.w	d0
00005A22 6B00                       		bmi.s	@FromObject
00005A24                            		
00005A24 4BF9 FFFF E5C0              		lea	(RAM_SprControl),a5
00005A2A 286D 0000                  		movea.l	sprite_free(a5),a4
00005A2E B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
00005A32 6E00 0000                   		bgt	Object_Return
00005A36                             		
00005A36 3412                         		move.w	(a2),d2
00005A38 0C42 0040                   		cmp.w	#$40,d2
00005A3C 6D00 0000                   		blt	@no_sprite
00005A40 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
00005A44 6E00 0000                  		bgt	@no_sprite
00005A48 3882                        		move.w	d2,(a4)
00005A4A 342A 0006                   		move.w	6(a2),d2
00005A4E 0C42 0040                    		cmp.w	#$40,d2
00005A52 6D00 0000                    		blt	@no_sprite
00005A56 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
00005A5A 6E00 0000                   		bgt	@no_sprite
00005A5E 3942 0006                   		move.w	d2,6(a4)
00005A62                            	
00005A62 342A 0002                  		move.w	2(a2),d2
00005A66 302D 0004                  		move.w	sprite_link(a5),d0
00005A6A 066D 0001 0004              		add.w	#1,sprite_link(a5)
00005A70 E14A                            		lsl.w	#8,d2
00005A72 0242 0F00                  		and.w	#$0F00,d2
00005A76 8042                       		or.w	d2,d0
00005A78 3940 0002                  		move.w	d0,2(a4)
00005A7C 396A 0004 0004             		move.w	4(a2),4(a4)
00005A82                             
00005A82 D8FC 0008                    		adda	#8,a4
00005A86 2B4C 0000                  		move.l	a4,sprite_free(a5)
00005A8A 4E75                       		rts
00005A8C                            
00005A8C                            @no_sprite:
00005A8C 4294                       		clr.l	(a4)
00005A8E 42AC 0004                  		clr.l	4(a4)
00005A92 4E75                       		rts
00005A94                            		
00005A94                            ; ----------------------------------------------
00005A94                            
00005A94                            @FromObject:
00005A94 0080 00FF 0000             		or.l	#$FF0000,d0
00005A9A 2C40                       		movea.l	d0,a6
00005A9C 302A 0002                   		move.w	2(a2),d0
00005AA0 4840                       		swap	d0
00005AA2 102A 0004                  		move.b	4(a2),d0
00005AA6 0240 00FF                  		and.w	#$FF,d0
00005AAA 222A 0004                  		move.l	4(a2),d1
00005AAE 0281 00FF FFFF             		and.l	#$FFFFFF,d1
00005AB4                            		
00005AB4 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005ABA 342E 0008                   		move.w	obj_x(a6),d2
00005ABE 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00005AC4 6600                        		bne.s	@onscrn_X_obj
00005AC6 946D 001C                   		sub.w	lvl_x(a5),d2
00005ACA                            @onscrn_X_obj:
00005ACA 0642 0080                   		add.w	#$80,d2
00005ACE 0C42 0040                    		cmp.w	#$40,d2
00005AD2 6D00 0000                    		blt	Object_Return
00005AD6 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
00005ADA 6E00 0000                   		bgt	Object_Return
00005ADE 4842                        		swap	d2
00005AE0 342E 000C                   		move.w	obj_y(a6),d2
00005AE4 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00005AEA 6600                        		bne.s	@onscrn_Y_obj
00005AEC 946D 0020                  		sub.w	lvl_y(a5),d2
00005AF0                            @onscrn_Y_obj:
00005AF0 0642 0080                   		add.w	#$80,d2
00005AF4 0C42 0040                   		cmp.w	#$40,d2
00005AF8 6D00 0000                   		blt	Object_Return
00005AFC 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
00005B00 6E00 0000                  		bgt	Object_Return
00005B04                            
00005B04 4243                       		clr.w	d3
00005B06 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00005B0C 6700                       		beq.s	@Right_LR
00005B0E 08C3 0000                  		bset	#0,d3
00005B12                            @Right_LR:
00005B12 082E 0001 001E             		btst	#bitobj_flipV,obj_status(a6)
00005B18 6700                       		beq.s	@Right_UD
00005B1A 08C3 0001                  		bset	#1,d3
00005B1E                            @Right_UD:
00005B1E                            
00005B1E                            ; ----------------------------------------------
00005B1E                            ; Object_BldSpr_List
00005B1E                            ; 
00005B1E                            ; Input:
00005B1E                            ; d0 - VRAM|Frame
00005B1E                            ; d1 - Mappings data address
00005B1E                            ; d2 - X-pos|Y-pos 
00005B1E                            ; d3 - Flags
00005B1E                            ;
00005B1E                            ; Output:
00005B1E                            ; d3 - New sprite link
00005B1E                            ; 
00005B1E                            ; Uses:
00005B1E                            ; a3-a5/d4
00005B1E                            ; ----------------------------------------------
00005B1E                            
00005B1E                            ; TODO: esto no checa el final
00005B1E                            
00005B1E                            Object_BldSpr_List:
00005B1E 4BF9 FFFF E5C0              		lea	(RAM_SprControl),a5
00005B24 286D 0000                  		movea.l	sprite_free(a5),a4
00005B28 B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
00005B2C 6E00 0000                   		bgt	Object_Return
00005B30                             		
00005B30 2641                        		movea.l	d1,a3
00005B32 E348                        		lsl.w	#1,d0
00005B34 D6F3 0000                   		adda	(a3,d0.w),a3
00005B38                             		
00005B38 0283 0000 FFFF             		and.l	#$FFFF,d3
00005B3E 7C00                        		moveq	#0,d6
00005B40 1C1B                        		move.b	(a3)+,d6
00005B42 6700 0000                   		beq	Object_Return
00005B46 0446 0001                   		sub.w	#1,d6
00005B4A                            @Next:
00005B4A                            
00005B4A                            ; ------------
00005B4A                            ; Ypos check
00005B4A                            ; ------------
00005B4A                            
00005B4A                            ; TODO: hacer el mismo fix de abajo despues
00005B4A                            
00005B4A 3202                       		move.w	d2,d1
00005B4C 1013                        		move.b	(a3),d0
00005B4E 4880                        		ext.w	d0
00005B50                             		
00005B50 0803 0001                     		btst	#1,d3		; VFlip flag?
00005B54 6700 0000                    		beq	@DontFlip
00005B58 182B 0001                   		move.b	1(a3),d4
00005B5C 0244 0003                    		and.w	#%11,d4
00005B60 E74C                         		lsl.w	#3,d4
00005B62 D044                         		add.w	d4,d0
00005B64 4440                       		neg.w	d0
00005B66                            @DontFlip:
00005B66 D240                        		add.w	d0,d1
00005B68 1039 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d0
00005B6E 0240 0006                   		and.w	#%00000110,d0
00005B72 6700                        		beq.s	@normal
00005B74 0641 0070                  		add.w	#$70,d1	
00005B78                            @normal:
00005B78 38C1                        		move.w	d1,(a4)+
00005B7A                            		
00005B7A                            ; ------------
00005B7A                            ; Size
00005B7A                            ; ------------
00005B7A                            
00005B7A 18EB 0001                   		move.b	1(a3),(a4)+		; Size
00005B7E 4240                        		clr.w	d0
00005B80 102D 0005                   		move.b	5(a5),d0
00005B84 D02D 0004                   		add.b	sprite_link(a5),d0
00005B88 18C0                        		move.b	d0,(a4)+		; Link
00005B8A 066D 0001 0004              		add.w	#1,sprite_link(a5)
00005B90                             
00005B90                            ; ------------
00005B90                            ; Vram
00005B90                            ; ------------
00005B90                            
00005B90 4240                         		clr.w	d0			; Vram
00005B92 102B 0002                    		move.b	2(a3),d0
00005B96 E148                         		lsl.w	#8,d0
00005B98 102B 0003                    		move.b	3(a3),d0
00005B9C 4840                         		swap	d0
00005B9E 3200                         		move.w	d0,d1
00005BA0 4840                         		swap	d0
00005BA2 D240                         		add.w	d0,d1
00005BA4                              	
00005BA4 0803 0000                     		btst	#0,d3			;Left flag?
00005BA8 6700                          		beq.s	@Right
00005BAA 0041 0800                     		or.w	#$800,d1
00005BAE                            @Right:
00005BAE 0803 0001                     		btst	#1,d3			;V flag?
00005BB2 6700                          		beq.s	@Down
00005BB4 0041 1000                     		or.w	#$1000,d1
00005BB8                            @Down:
00005BB8 38C1                         		move.w	d1,(a4)+
00005BBA                            		
00005BBA                            ; ------------
00005BBA                            ; Xpos check
00005BBA                            ; ------------
00005BBA                            
00005BBA 4240                        		clr.w	d0
00005BBC 7200                        		moveq	#0,d1
00005BBE 7800                        		moveq	#0,d4
00005BC0 4842                        		swap	d2
00005BC2 3202                        		move.w	d2,d1
00005BC4 4842                        		swap	d2
00005BC6                             		
00005BC6 102B 0004                   		move.b	4(a3),d0
00005BCA 4880                        		ext.w	d0
00005BCC 0803 0000                     		btst	#0,d3			;Left flag?
00005BD0 6700 0000                    		beq	@ContX
00005BD4                            
00005BD4 182B 0001                   		move.b	1(a3),d4
00005BD8 0244 000C                    		and.w	#%1100,d4
00005BDC E34C                         		lsl.w	#1,d4
00005BDE D044                         		add.w	d4,d0
00005BE0 4440                       		neg.w	d0
00005BE2 0440 0008                    		sub.w	#8,d0			;TODO: mala idea
00005BE6                            
00005BE6                            @ContX:
00005BE6 D240                        		add.w	d0,d1
00005BE8 38C1                        		move.w	d1,(a4)+
00005BEA D6FC 0005                   		adda 	#5,a3
00005BEE 51CE FF5A                   		dbf	d6,@Next
00005BF2 2B4C 0000                   		move.l	a4,sprite_free(a5)
00005BF6                             		
00005BF6 B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
00005BFA 6E00                        		bgt.s	Object_Return
00005BFC 429C                        		clr.l	(a4)+
00005BFE 429C                        		clr.l	(a4)+
00005C00                            Object_Return:
00005C00 4E75                        		rts
00005C02                             		
00005C02                            ; ----------------------------------------------
00005C02                            ; Object_IsGone
00005C02                            ; ----------------------------------------------
00005C02                            
00005C02                            Object_IsGone:
00005C02 7000                       		moveq	#0,d0
00005C04 102E 0021                  		move.b 	obj_spwnindx(a6),d0
00005C08 4A00                       		tst.b	d0
00005C0A 6700                       		beq.s	@offindx
00005C0C 0440 0001                  		sub.w	#1,d0
00005C10 C0FC 000A                  		mulu.w	#$A,d0
00005C14 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
00005C1A DAC0                       		adda	d0,a5
00005C1C 08D5 0006                  		bset	#6,(a5)			; Set GONE flag
00005C20                            @offindx:
00005C20 4E75                       		rts
00005C22                            		
00005C22                            ; ----------------------------------------------
00005C22                            ; Object_OffCheck
00005C22                            ; ----------------------------------------------
00005C22                            
00005C22                            Object_OffCheck:
00005C22 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005C28 49F9 FFFF BC42             		lea	(RAM_LevelObjPos),a4
00005C2E                            		
00005C2E 7000                       		moveq	#0,d0
00005C30 102E 0021                  		move.b 	obj_spwnindx(a6),d0
00005C34 4A00                       		tst.b	d0
00005C36 6700                       		beq.s	@return
00005C38 0440 0001                  		sub.w	#1,d0
00005C3C C0FC 000A                  		mulu.w	#$A,d0
00005C40 D8C0                       		adda	d0,a4
00005C42                            		
00005C42 302D 0020                     		move.w	lvl_y(a5),d0
00005C46 3400                          		move.w	d0,d2
00005C48 322E 000C                       		move.w	obj_y(a6),d1
00005C4C 0641 0060                       		add.w	#$60,d1
00005C50 B240                            		cmp.w	d0,d1
00005C52 6D00                            		blt.s	Object_OffDelete
00005C54 0642 0140                         		add.w	#224+$60,d2
00005C58 322E 000C                        		move.w	obj_y(a6),d1
00005C5C B242                             		cmp.w	d2,d1
00005C5E 6E00                             		bgt.s	Object_OffDelete
00005C60                                 		
00005C60 302D 001C                    		move.w	lvl_x(a5),d0
00005C64 3400                         		move.w	d0,d2
00005C66 322E 0008                      		move.w	obj_x(a6),d1
00005C6A 0641 0040                      		add.w	#$40,d1
00005C6E B240                           		cmp.w	d0,d1
00005C70 6D00                           		blt.s	Object_OffDelete
00005C72 0642 0180                        		add.w	#320+$40,d2		;TODO: horizontal mode 
00005C76 322E 0008                       		move.w	obj_x(a6),d1
00005C7A B242                            		cmp.w	d2,d1
00005C7C 6E00                            		bgt.s	Object_OffDelete
00005C7E                                 		
00005C7E                            ;      		; Check for suicide
00005C7E                            ; 		move.w	lvl_size_y(a5),d0		; Bottomless pit
00005C7E                            ; 		lsl.w	#4,d0
00005C7E                            ; 		move.w	obj_y(a6),d1
00005C7E                            ; 		moveq	#0,d2
00005C7E                            ; 		move.b	obj_size+2(a6),d2
00005C7E                            ; 		lsl.w	#3,d2
00005C7E                            ; 		sub.w	d2,d1
00005C7E                            ; 		cmp.w	d0,d1
00005C7E                            ; 		blt	@return
00005C7E                            ; 		
00005C7E                            ; 		bset	#7,(a4)
00005C7E                            ; 		clr.l	obj_code(a6)
00005C7E                            ; 		clr.b	obj_index(a6)
00005C7E                            @return:
00005C7E 4E75                       		rts
00005C80                            		
00005C80                            ; a4 - respawn slot of this object
00005C80                            
00005C80                            Object_OffDelete:
00005C80 0894 0007                  		bclr	#7,(a4)			; Reset ON SCREEN flag
00005C84                            @offindx:
00005C84                            
00005C84 42AE 0000                  		clr.l	obj_code(a6)
00005C88 422E 001D                  		clr.b	obj_index(a6)
00005C8C                            @Return:
00005C8C 4E75                        		rts
00005C8E                            		
00005C8E                            ; ----------------------------------------------
00005C8E                            ; Object animation
00005C8E                            ; 
00005C8E                            ; Input
00005C8E                            ; d1 | LONG - Animation data
00005C8E                            ; 
00005C8E                            ; Output
00005C8E                            ; d0 | WORD - Frame
00005C8E                            ; 
00005C8E                            ; Uses:
00005C8E                            ; d2
00005C8E                            ; ----------------------------------------------
00005C8E                             
00005C8E                            Object_Animate:
00005C8E 4A81                        		tst.l	d1
00005C90 6700                         		beq.s	@Return
00005C92 7400                        		moveq	#0,d2
00005C94 142E 001B                   		move.b	obj_anim_id+1(a6),d2
00005C98 B42E 001A                   		cmp.b	obj_anim_id(a6),d2
00005C9C 6700                        		beq.s	@SameThing
00005C9E 1D6E 001A 001B              		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
00005CA4 426E 0018                   		clr.w	obj_anim_next(a6)
00005CA8                            @SameThing:
00005CA8 142E 001A                   		move.b	obj_anim_id(a6),d2
00005CAC 0C02 00FF                   		cmp.b	#-1,d2
00005CB0 6700                        		beq.s	@Return
00005CB2 E34A                        		lsl.w	#1,d2
00005CB4 2041                       		movea.l	d1,a0
00005CB6 D0F0 2000                   		adda	(a0,d2.w),a0
00005CBA                             
00005CBA 1418                        		move.b	(a0)+,d2
00005CBC 0C02 00FF                   		cmp.b	#-1,d2
00005CC0 6700                        		beq.s	@keepspd
00005CC2 042E 0001 001C              		sub.b	#1,obj_anim_spd(a6)
00005CC8 6A00                        		bpl.s	@Return
00005CCA 1D42 001C                  		move.b	d2,obj_anim_spd(a6)
00005CCE                            @keepspd:
00005CCE 7200                        		moveq	#0,d1
00005CD0 342E 0018                   		move.w	obj_anim_next(a6),d2
00005CD4 1210                        		move.b	(a0),d1
00005CD6 D0C2                        		adda	d2,a0
00005CD8                             
00005CD8 0280 FFFF 0000              		and.l	#$FFFF0000,d0
00005CDE 1010                        		move.b	(a0),d0
00005CE0 0C00 00FF                   		cmp.b	#$FF,d0
00005CE4 6700                        		beq.s	@NoAnim
00005CE6 0C00 00FE                   		cmp.b	#$FE,d0
00005CEA 6700                        		beq.s	@GoToFrame
00005CEC 0C00 00FD                   		cmp.b	#$FD,d0
00005CF0 6700                        		beq.s	@LastFrame
00005CF2                             		
00005CF2 1D40 0020                   		move.b	d0,obj_frame(a6)
00005CF6 066E 0001 0018              		add.w	#1,obj_anim_next(a6)
00005CFC                            @Return:
00005CFC 4E75                        		rts
00005CFE                             
00005CFE                            @NoAnim:
00005CFE 3D7C 0001 0018              		move.w	#1,obj_anim_next(a6)
00005D04 3001                        		move.w	d1,d0
00005D06 1D40 0020                   		move.b	d0,obj_frame(a6)
00005D0A 4E75                       		rts
00005D0C                            @LastFrame:
00005D0C 422E 001C                   		clr.b	obj_anim_spd(a6)
00005D10 4E75                       		rts
00005D12                            @GoToFrame:
00005D12 426E 0018                  		clr.w	obj_anim_next(a6)
00005D16 1D68 0001 0019             		move.b	1(a0),obj_anim_next+1(a6)
00005D1C 4E75                       		rts
00005D1E                            	
00005D1E                            ; ------------------------------------------------
00005D1E                            
00005D1E                            Object_ShowPoints:
00005D1E 302E 0008                   		move.w	obj_x(a6),d0
00005D22 0440 0004                   		sub.w	#4,d0
00005D26 4840                        		swap	d0
00005D28 302E 000C                   		move.w	obj_y(a6),d0
00005D2C 0440 0004                   		sub.w	#4,d0
00005D30 7200                        		moveq	#0,d1
00005D32 323C 0587                   		move.w	#$587,d1
00005D36 6000 FC2C                   		bra	Object_ExtSprite
00005D3A                             		
00005D3A                             		
00005D3A 382E 000C                   		move.w	obj_y(a6),d4
00005D3E 7400                        		moveq	#0,d2
00005D40 142E 0007                   		move.b	obj_size+3(a6),d2
00005D44 E74A                        		lsl.w	#3,d2
00005D46 D842                        		add.w	d2,d4
00005D48 6100 0000                   		bsr	@leftright
00005D4C 382E 000C                   		move.w	obj_y(a6),d4
00005D50 7400                        		moveq	#0,d2
00005D52 142E 0006                   		move.b	obj_size+2(a6),d2
00005D56 E74A                        		lsl.w	#3,d2
00005D58 9842                        		sub.w	d2,d4
00005D5A                            
00005D5A                            ;  		rts
00005D5A                            @leftright:
00005D5A 302E 0008                   		move.w	obj_x(a6),d0
00005D5E 0440 0002                   		sub.w	#2,d0
00005D62 4840                        		swap	d0
00005D64 3004                        		move.w	d4,d0
00005D66 7200                        		moveq	#0,d1
00005D68 323C 0587                   		move.w	#$587,d1
00005D6C 6100 FBF6                   		bsr	Object_ExtSprite
00005D70                             		
00005D70 302E 0008                   		move.w	obj_x(a6),d0
00005D74 7400                        		moveq	#0,d2
00005D76 142E 0004                   		move.b	obj_size(a6),d2
00005D7A E74A                        		lsl.w	#3,d2
00005D7C 9042                        		sub.w	d2,d0
00005D7E 4840                        		swap	d0
00005D80 3004                        		move.w	d4,d0
00005D82 6100 FBE0                   		bsr	Object_ExtSprite
00005D86                             		
00005D86 302E 0008                   		move.w	obj_x(a6),d0
00005D8A 0440 0003                   		sub.w	#3,d0
00005D8E 7400                        		moveq	#0,d2
00005D90 142E 0005                   		move.b	obj_size+1(a6),d2
00005D94 E74A                        		lsl.w	#3,d2
00005D96 D042                        		add.w	d2,d0
00005D98 4840                        		swap	d0
00005D9A 3004                        		move.w	d4,d0
00005D9C 6000 FBC6                   		bra	Object_ExtSprite
00005DA0                             	
00005DA0                            ; **********************************************
00005DA0                            ; Object level collision
00005DA0                            ; **********************************************
00005DA0                            
00005DA0                            ; ************************
00005DA0                            ; Find floor collision
00005DA0                            ; CENTER
00005DA0                            ; 
00005DA0                            ; Input:
00005DA0                            ; a6 - Object to read
00005DA0                            ; a5 - Level buffer
00005DA0                            ; a4 - Layout data
00005DA0                            ; 
00005DA0                            ; Output:
00005DA0                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
00005DA0                            ; 
00005DA0                            ; Uses:
00005DA0                            ; a3-a4 | d4-d5
00005DA0                            ; ************************
00005DA0                            
00005DA0                            object_FindPrz_Floor:
00005DA0 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005DA6 286D 0018                    		movea.l	lvl_prizes(a5),a4
00005DAA 6000                         		bra.s	objSearchCol_Floor
00005DAC                              		
00005DAC                            object_FindCol_Floor:
00005DAC 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005DB2 286D 0014                    		movea.l	lvl_collision(a5),a4
00005DB6                            
00005DB6                            objSearchCol_Floor:
00005DB6 7000                       		moveq	#0,d0
00005DB8 7800                       		moveq	#0,d4
00005DBA 7A00                       		moveq	#0,d5
00005DBC 382E 000C                   		move.w	obj_y(a6),d4
00005DC0 1A2E 0007                   		move.b	obj_size+3(a6),d5
00005DC4 E74D                        		lsl.w	#3,d5
00005DC6 D845                        		add.w	d5,d4
00005DC8 4A44                        		tst.w	d4
00005DCA 6B00 0000                   		bmi	@no_col
00005DCE 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00005DD2 E94D                        		lsl.w	#4,d5
00005DD4 B845                        		cmp.w	d5,d4
00005DD6 6C00 0000                   		bge	@no_col
00005DDA 3A04                        		move.w	d4,d5
00005DDC E98D                          		lsl.l	#4,d5
00005DDE 2005                           		move.l	d5,d0
00005DE0 E84C                         		lsr.w	#4,d4
00005DE2 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
00005DE6 D8C4                         		adda	d4,a4
00005DE8                             		
00005DE8                            ; ------------------------
00005DE8                            ; X check
00005DE8                            ; ------------------------
00005DE8                            
00005DE8 264C                         		movea.l	a4,a3
00005DEA 382E 0008                   		move.w	obj_x(a6),d4
00005DEE 4A44                        		tst.w	d4
00005DF0 6B00                        		bmi.s	@force_on
00005DF2 3A2D 0030                   		move.w	lvl_size_x(a5),d5
00005DF6 E94D                        		lsl.w	#4,d5
00005DF8 B845                         		cmp.w	d5,d4
00005DFA 6C00                         		bge.s	@force_on
00005DFC E84C                        		lsr.w	#4,d4
00005DFE D6C4                        		adda 	d4,a3
00005E00                            ;  		btst	#7,(a3)
00005E00                            ;  		bne.s	@no_col
00005E00                            ;  		tst.b	(a3)
00005E00                            ;  		beq.s	@no_col
00005E00 E94C                        		lsl.w	#4,d4
00005E02 4844                        		swap	d4
00005E04 8084                        		or.l	d4,d0			;XXXYYY00
00005E06                               		
00005E06 1013                        		move.b	(a3),d0	
00005E08 4E75                        		rts
00005E0A                             		
00005E0A                            @force_on:
00005E0A 7001                        		moveq	#1,d0
00005E0C                            @no_col:
00005E0C 4E75                       		rts
00005E0E                            		
00005E0E                            ; ************************
00005E0E                            ; Find side collision
00005E0E                            ; CENTER
00005E0E                            ;
00005E0E                            ; Input:
00005E0E                            ; a6 - Object to read
00005E0E                            ; a5 - Level buffer
00005E0E                            ; a4 - Layout data
00005E0E                            ; 
00005E0E                            ; Output:
00005E0E                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
00005E0E                            ; 
00005E0E                            ; Uses:
00005E0E                            ; a3-a4 | d4-d5
00005E0E                            ; ************************
00005E0E                            
00005E0E                            object_FindPrz_Wall:
00005E0E 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005E14 286D 0018                    		movea.l	lvl_prizes(a5),a4
00005E18 6000                         		bra.s	objSearchCol_Wall
00005E1A                              		
00005E1A                            object_FindCol_Wall:
00005E1A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005E20 286D 0014                    		movea.l	lvl_collision(a5),a4
00005E24                            
00005E24                            objSearchCol_Wall:
00005E24 7000                       		moveq	#0,d0
00005E26 7800                       		moveq	#0,d4
00005E28 7A00                       		moveq	#0,d5
00005E2A 382E 000C                   		move.w	obj_y(a6),d4
00005E2E 1A2E 0007                   		move.b	obj_size+3(a6),d5
00005E32 E74D                        		lsl.w	#3,d5
00005E34 D845                        		add.w	d5,d4
00005E36 0444 0001                   		sub.w	#1,d4
00005E3A 4A44                        		tst.w	d4
00005E3C 6B00 0000                   		bmi	@no_col
00005E40 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00005E44 E94D                        		lsl.w	#4,d5
00005E46 B845                        		cmp.w	d5,d4
00005E48 6C00 0000                   		bge	@no_col
00005E4C E84C                        		lsr.w	#4,d4
00005E4E C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
00005E52 D8C4                        		adda	d4,a4
00005E54 E18C                        		lsl.l	#8,d4
00005E56 2004                        		move.l	d4,d0
00005E58                             		
00005E58                            ; ------------------------
00005E58                            ; X check
00005E58                            ; ------------------------
00005E58                            
00005E58 264C                        		movea.l	a4,a3
00005E5A 382E 0008                   		move.w	obj_x(a6),d4
00005E5E 4A44                        		tst.w	d4
00005E60 6B00                        		bmi.s	@force_on
00005E62 3A2D 0030                   		move.w	lvl_size_x(a5),d5
00005E66 E94D                        		lsl.w	#4,d5
00005E68 B845                         		cmp.w	d5,d4
00005E6A 6C00                         		bge.s	@force_on
00005E6C E84C                        		lsr.w	#4,d4
00005E6E D6C4                        		adda 	d4,a3
00005E70 E94C                        		lsl.w	#4,d4
00005E72 4844                        		swap	d4
00005E74                             		
00005E74 7A00                       		moveq	#0,d5
00005E76 382E 000C                     		move.w	obj_y(a6),d4
00005E7A 1A2E 0007                     		move.b	obj_size+3(a6),d5
00005E7E E74D                          		lsl.w	#3,d5
00005E80 D845                          		add.w	d5,d4
00005E82                               		
00005E82 0444 0001                     		sub.w	#1,d4
00005E86 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00005E8A E94D                        		lsl.w	#4,d5
00005E8C 4845                        		swap	d5
00005E8E 1A2E 0006                   		move.b	obj_size+2(a6),d5
00005E92 0245 00FF                    		and.w	#$FF,d5
00005E96 E24D                         		lsr.w	#1,d5
00005E98 4A45                          		tst.w	d5
00005E9A 6700                          		beq.s	@nxt_y
00005E9C 0445 0001                     		sub.w	#1,d5
00005EA0                            @nxt_y:
00005EA0 4845                       		swap	d5
00005EA2 4A44                        		tst.w	d4
00005EA4 6B00                        		bmi.s	@force_on
00005EA6 B845                        		cmp.w	d5,d4
00005EA8 6C00                        		bge.s	@zero_y
00005EAA 0813 0007                   		btst	#7,(a3)
00005EAE 6600                        		bne.s	@zero_y
00005EB0 4A13                       		tst.b	(a3)
00005EB2 6700                       		beq.s	@zero_y
00005EB4 8084                         		or.l	d4,d0
00005EB6 4844                         		swap	d4
00005EB8 E98C                         		lsl.l	#4,d4
00005EBA 0284 000F FF00               		and.l	#$000FFF00,d4
00005EC0 8084                         		or.l	d4,d0
00005EC2 1013                        		move.b	(a3),d0
00005EC4 4E75                        		rts
00005EC6                            @zero_y:
00005EC6 96ED 0030                   		suba	lvl_size_x(a5),a3
00005ECA 0444 0010                   		sub.w	#$10,d4
00005ECE 4845                       		swap	d5
00005ED0 51CD FFCE                    		dbf	d5,@nxt_y
00005ED4                            
00005ED4                            @force_on:
00005ED4 103C 0000                  		move.b	#0,d0
00005ED8                            @no_col:
00005ED8 4E75                       		rts
00005EDA                            
00005EDA                            ; ************************
00005EDA                            ; Find Ceiling collision
00005EDA                            ; CENTER
00005EDA                            ; 
00005EDA                            ; Input:
00005EDA                            ; a6 - Object to read
00005EDA                            ; a5 - Level buffer
00005EDA                            ; a4 - Layout data
00005EDA                            
00005EDA                            ; Output:
00005EDA                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
00005EDA                            ; 
00005EDA                            ; Uses:
00005EDA                            ; a3-a4 | d4-d5
00005EDA                            ; ************************
00005EDA                            
00005EDA                            object_FindPrz_Ceiling:
00005EDA 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005EE0 286D 0018                    		movea.l	lvl_prizes(a5),a4
00005EE4 6000                         		bra.s	objSearchCol_Ceiling
00005EE6                              		
00005EE6                            object_FindCol_Ceiling:
00005EE6 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005EEC 286D 0014                    		movea.l	lvl_collision(a5),a4
00005EF0                              		
00005EF0                            objSearchCol_Ceiling:
00005EF0 7000                       		moveq	#0,d0
00005EF2 7800                       		moveq	#0,d4
00005EF4 7A00                       		moveq	#0,d5
00005EF6 382E 000C                   		move.w	obj_y(a6),d4
00005EFA 1A2E 0006                      		move.b	obj_size+2(a6),d5
00005EFE E74D                           		lsl.w	#3,d5
00005F00 9845                           		sub.w	d5,d4			;UP SIZE
00005F02 4A44                        		tst.w	d4
00005F04 6B00 0000                   		bmi	@no_col
00005F08 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00005F0C E94D                        		lsl.w	#4,d5
00005F0E B845                        		cmp.w	d5,d4
00005F10 6C00 0000                   		bge	@no_col
00005F14 E84C                        		lsr.w	#4,d4
00005F16 0244 0FFF                   		and.w	#$FFF,d4
00005F1A 3004                        		move.w	d4,d0
00005F1C E188                        		lsl.l	#8,d0			;000YYY00
00005F1E C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
00005F22 D8C4                        		adda	d4,a4
00005F24                            		
00005F24                            ; ------------------------
00005F24                            ; X check
00005F24                            ; ------------------------
00005F24                            
00005F24 264C                        		movea.l	a4,a3
00005F26 382E 0008                   		move.w	obj_x(a6),d4
00005F2A 0444 0001                   		sub.w	#1,d4
00005F2E 4A44                        		tst.w	d4
00005F30 6B00                        		bmi.s	@no_col
00005F32 3A2D 0030                   		move.w	lvl_size_x(a5),d5
00005F36 E94D                        		lsl.w	#4,d5
00005F38 B845                          		cmp.w	d5,d4
00005F3A 6C00                          		bge.s	@no_col
00005F3C E84C                        		lsr.w	#4,d4
00005F3E D6C4                        		adda 	d4,a3
00005F40                            ;  		btst	#7,(a3)
00005F40                            ;  		bne.s	@no_col
00005F40                            ;  		tst.b	(a3)
00005F40                            ;  		beq.s	@no_col
00005F40 E94C                        		lsl.w	#4,d4
00005F42 4844                        		swap	d4
00005F44 8084                        		or.l	d4,d0			;XXXYYY00
00005F46 1013                        		move.b	(a3),d0	
00005F48                            @no_col:
00005F48 4E75                       		rts
00005F4A                            		
00005F4A                            ; ************************
00005F4A                            ; Find floor collision
00005F4A                            ; Left/Right points
00005F4A                            ;
00005F4A                            ; Input:
00005F4A                            ; a6 - Object to read
00005F4A                            ; a5 - Level buffer
00005F4A                            ; a4 - Layout data
00005F4A                            ; 
00005F4A                            ; Output:
00005F4A                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
00005F4A                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
00005F4A                            ; 
00005F4A                            ; Uses:
00005F4A                            ; a3 | d4-d5
00005F4A                            ; ************************
00005F4A                            
00005F4A                            object_FindPrz_FloorSides:
00005F4A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005F50 286D 0018                    		movea.l	lvl_prizes(a5),a4
00005F54 6000                       		bra.s	objSearchCol_FloorSides
00005F56                            		
00005F56                            object_FindCol_FloorSides:
00005F56 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005F5C 286D 0014                    		movea.l	lvl_collision(a5),a4
00005F60                              		
00005F60                            objSearchCol_FloorSides:
00005F60 7000                       		moveq	#0,d0
00005F62 7200                       		moveq	#0,d1
00005F64                            
00005F64 7800                       		moveq	#0,d4
00005F66 7A00                       		moveq	#0,d5
00005F68 382E 000C                   		move.w	obj_y(a6),d4
00005F6C 1A2E 0007                    		move.b	obj_size+3(a6),d5
00005F70 E74D                        		lsl.w	#3,d5
00005F72 D845                        		add.w	d5,d4
00005F74 4A44                        		tst.w	d4
00005F76 6B00 0000                   		bmi	@no_col
00005F7A 3A2D 0032                    		move.w	lvl_size_y(a5),d5
00005F7E E94D                         		lsl.w	#4,d5
00005F80 B845                         		cmp.w	d5,d4
00005F82 6C00 0000                    		bge	@no_col
00005F86 E84C                        		lsr.w	#4,d4
00005F88 3004                         		move.w	d4,d0
00005F8A 3204                         		move.w	d4,d1
00005F8C E188                         		lsl.l	#8,d0			; LEFT 000YYY00
00005F8E E189                         		lsl.l	#8,d1			;RIGHT 000YYY00
00005F90 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
00005F94 D8C4                        		adda	d4,a4
00005F96                            
00005F96                            ; ------------------------
00005F96                            ; X check
00005F96                            ; 
00005F96                            ; LEFT
00005F96                            ; ------------------------
00005F96                            
00005F96 7800                        		moveq	#0,d4
00005F98 7A00                       		moveq	#0,d5
00005F9A 3A2E 0008                    		move.w	obj_x(a6),d5
00005F9E 382D 0030                   		move.w	lvl_size_x(a5),d4
00005FA2 E94C                        		lsl.w	#4,d4
00005FA4 BA44                             		cmp.w	d4,d5
00005FA6 6D00                             		blt.s	@dontfix_l
00005FA8 0445 0001                        		sub.w	#1,d5
00005FAC                            @dontfix_l:
00005FAC 4A45                        		tst.w	d5
00005FAE 6B00                        		bmi.s	@zero_l
00005FB0                             		
00005FB0 3805                        		move.w	d5,d4
00005FB2 E84C                        		lsr.w	#4,d4
00005FB4 264C                        		movea.l	a4,a3
00005FB6 D6C4                        		adda 	d4,a3
00005FB8 4845                        		swap	d5		; d5 - XRead | Free
00005FBA 1A2E 0004                   		move.b	obj_size(a6),d5
00005FBE 0245 00FF                   		and.w	#$FF,d5		; d5 - XRead | Loop
00005FC2 4A45                        		tst.w	d5
00005FC4 6700                        		beq.s	@zero_l
00005FC6                            @Next_col_l:
00005FC6 4845                        		swap	d5		; d5 - Loop | Xread
00005FC8                             		
00005FC8 4A13                        		tst.b	(a3)
00005FCA 6700                        		beq.s	@No_col_l
00005FCC 0813 0007                   		btst	#7,(a3)
00005FD0 6600                        		bne.s	@No_col_l
00005FD2 3805                        		move.w	d5,d4
00005FD4 0244 FFF0                   		and.w	#$FFF0,d4
00005FD8 4844                        		swap	d4
00005FDA 8284                        		or.l	d4,d1		; LEFT XXXYYY00
00005FDC 1213                       		move.b	(a3),d1
00005FDE 6000                        		bra.s	@zero_l
00005FE0                            @No_col_l:
00005FE0                            
00005FE0 0445 0008                   		sub.w	#8,d5
00005FE4 6A00                          		bpl.s	@Fine_l
00005FE6 4245                          		clr.w	d5
00005FE8                            @Fine_l:
00005FE8 3805                        		move.w	d5,d4
00005FEA E84C                        		lsr.w	#4,d4
00005FEC 264C                        		movea.l	a4,a3
00005FEE D6C4                        		adda 	d4,a3
00005FF0 4845                        		swap	d5		; d5 - XRead | Loop
00005FF2 51CD FFD2                   		dbf	d5,@Next_col_l
00005FF6                            @zero_l:
00005FF6                            		
00005FF6                            ; ------------------------
00005FF6                            ; X check
00005FF6                            ; 
00005FF6                            ; RIGHT
00005FF6                            ; ------------------------
00005FF6                            
00005FF6 7800                        		moveq	#0,d4
00005FF8 7A00                        		moveq	#0,d5
00005FFA 3A2E 0008                   		move.w	obj_x(a6),d5
00005FFE 0445 0001                   		sub.w	#1,d5
00006002 4A45                        		tst.w	d5
00006004 6B00                        		bmi.s	@no_col
00006006 382D 0030                   		move.w	lvl_size_x(a5),d4
0000600A E94C                        		lsl.w	#4,d4
0000600C BA44                          		cmp.w	d4,d5
0000600E 6C00                           		bge.s	@no_col
00006010                            
00006010 3805                        		move.w	d5,d4
00006012 E84C                        		lsr.w	#4,d4
00006014 264C                        		movea.l	a4,a3
00006016 D6C4                        		adda 	d4,a3
00006018 4845                        		swap	d5		;d5 - XRead | Free
0000601A 1A2E 0005                   		move.b	obj_size+1(a6),d5
0000601E 0245 00FF                   		and.w	#$FF,d5		;d5 - XRead | Loop
00006022 4A45                        		tst.w	d5
00006024 6700                        		beq.s	@no_col
00006026                             		
00006026                            @Next_col_r:
00006026 4845                        		swap	d5		;d5 - Loop | Xread
00006028 4A13                        		tst.b	(a3)
0000602A 6700                        		beq.s	@No_col_r
0000602C 0813 0007                   		btst	#7,(a3)
00006030 6600                        		bne.s	@No_col_r
00006032 382D 0030                   		move.w	lvl_size_x(a5),d4
00006036 E94C                        		lsl.w	#4,d4
00006038 BA44                          		cmp.w	d4,d5
0000603A 6C00                           		bge.s	@no_col
0000603C                                		
0000603C 3805                        		move.w	d5,d4
0000603E 0244 FFF0                   		and.w	#$FFF0,d4
00006042 4844                        		swap	d4
00006044 8084                        		or.l	d4,d0		; RIGHT XXXYYY00
00006046 1013                       		move.b	(a3),d0
00006048 4E75                        		rts
0000604A                             		
0000604A                            @No_col_r:
0000604A 0645 0008                   		add.w	#8,d5
0000604E 3805                        		move.w	d5,d4
00006050 E84C                        		lsr.w	#4,d4
00006052 264C                        		movea.l	a4,a3
00006054 D6C4                        		adda 	d4,a3
00006056 4845                        		swap	d5		;d5 - XRead | Loop
00006058 51CD FFCC                   		dbf	d5,@Next_col_r
0000605C                             		
0000605C                            ; ------------------------
0000605C                            
0000605C                            @no_col:
0000605C 4E75                       		rts
0000605E                            
0000605E                            ; ************************
0000605E                            ; Find side collision
0000605E                            ; LEFT/RIGHT
0000605E                            ;
0000605E                            ; Input:
0000605E                            ; (Nothing)
0000605E                            ; 
0000605E                            ; Output:
0000605E                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
0000605E                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
0000605E                            ; 
0000605E                            ; Uses:
0000605E                            ; a3-a4 | d4-d5
0000605E                            ; ************************
0000605E                            
0000605E                            object_FindPrz_WallSides:
0000605E 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006064 286D 0018                    		movea.l	lvl_prizes(a5),a4
00006068 6000                         		bra.s	objSearchCol_WallSides
0000606A                              		
0000606A                            object_FindCol_WallSides:
0000606A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006070 286D 0014                    		movea.l	lvl_collision(a5),a4
00006074                              		
00006074                            objSearchCol_WallSides:
00006074 7000                        		moveq	#0,d0
00006076 7200                        		moveq	#0,d1
00006078 7800                        		moveq	#0,d4
0000607A 7A00                        		moveq	#0,d5
0000607C                            
0000607C                            ; ------------------------
0000607C                            ; Left
0000607C                            ; ------------------------
0000607C                            
0000607C 4A2E 0004                  		tst.b	obj_size(a6)
00006080 6700 0000                  		beq	@ignore_l
00006084                            			
00006084                            ; --------------
00006084                            ; LEFT DOWN
00006084                            ; --------------
00006084                            
00006084 3A2E 000C                    		move.w	obj_y(a6),d5
00006088 4A45                         		tst.w	d5
0000608A 6B00 0000                  		bmi	@ignore_l
0000608E 382D 0032                  		move.w	lvl_size_y(a5),d4
00006092 E94C                       		lsl.w	#4,d4
00006094 BA44                       		cmp.w	d4,d5
00006096 6C00 0000                  		bge	@ignore_l
0000609A 4845                         		swap	d5
0000609C 4245                         		clr.w	d5
0000609E 1A2E 0007                    		move.b	obj_size+3(a6),d5	
000060A2 4A45                         		tst.w	d5
000060A4 6700 0000                    		beq	@ignore_l
000060A8 0445 0001                    		sub.w	#1,d5
000060AC                            @next_passld:
000060AC 4845                       		swap	d5
000060AE 4A45                       		tst.w	d5
000060B0 6B00 0000                  		bmi	@ignore_l
000060B4 3805                       		move.w	d5,d4
000060B6 4844                       		swap	d4
000060B8 382E 0008                  		move.w	obj_x(a6),d4
000060BC 0444 0001                  		sub.w	#1,d4
000060C0 4245                       		clr.w	d5
000060C2 1A2E 0004                  		move.b	obj_size(a6),d5
000060C6 E74D                       		lsl.w	#3,d5
000060C8 9845                       		sub.w	d5,d4			; left X size
000060CA 4A44                       		tst.w	d4
000060CC 6B00 0000                  		bmi	@forceset_l
000060D0 E84C                       		lsr.w	#4,d4
000060D2 264C                        		movea.l	a4,a3
000060D4 D6C4                       		adda	d4,a3
000060D6 4844                       		swap	d4
000060D8 3A04                       		move.w	d4,d5
000060DA E84C                         		lsr.w	#4,d4
000060DC C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
000060E0 D6C4                         		adda	d4,a3
000060E2                              		
000060E2 0813 0007                    		btst	#7,(a3)
000060E6 6600                         		bne.s	@next_ld
000060E8 4A13                         		tst.b	(a3)
000060EA 6600 0000                    		bne	@found_l
000060EE                            @next_ld:
000060EE 0645 0008                  		add.w	#8,d5
000060F2 382D 0032                  		move.w	lvl_size_y(a5),d4
000060F6 E94C                       		lsl.w	#4,d4
000060F8 BA44                       		cmp.w	d4,d5
000060FA 6C00                       		bge.s	@gone_ld
000060FC                            		
000060FC 4845                       		swap	d5
000060FE 51CD FFAC                  		dbf	d5,@next_passld
00006102                            @gone_ld:
00006102                            
00006102                            ; --------------
00006102                            ; LEFT UP
00006102                            ; --------------
00006102                            
00006102 3A2E 000C                    		move.w	obj_y(a6),d5
00006106 4A45                         		tst.w	d5
00006108 6B00 0000                  		bmi	@ignore_l
0000610C 382D 0032                  		move.w	lvl_size_y(a5),d4
00006110 E94C                       		lsl.w	#4,d4
00006112 BA44                       		cmp.w	d4,d5
00006114 6C00 0000                  		bge	@ignore_l
00006118 4845                         		swap	d5
0000611A 4245                         		clr.w	d5
0000611C 1A2E 0006                    		move.b	obj_size+2(a6),d5	
00006120 4A45                         		tst.w	d5
00006122 6700                         		beq.s	@ignore_l
00006124 0445 0001                    		sub.w	#1,d5
00006128                            @next_passlu:
00006128 4845                       		swap	d5
0000612A 4A45                       		tst.w	d5
0000612C 6B00                       		bmi.s	@ignore_l
0000612E 3805                       		move.w	d5,d4
00006130 4844                       		swap	d4
00006132 382E 0008                  		move.w	obj_x(a6),d4
00006136 0444 0001                  		sub.w	#1,d4
0000613A 4245                       		clr.w	d5
0000613C 1A2E 0004                  		move.b	obj_size(a6),d5
00006140 E74D                       		lsl.w	#3,d5
00006142 9845                       		sub.w	d5,d4			; left X size
00006144 4A44                       		tst.w	d4
00006146 6B00                       		bmi.s	@forceset_l
00006148 E84C                       		lsr.w	#4,d4
0000614A 264C                        		movea.l	a4,a3
0000614C D6C4                       		adda	d4,a3
0000614E 4844                       		swap	d4
00006150 3A04                       		move.w	d4,d5
00006152 E84C                         		lsr.w	#4,d4
00006154 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
00006158 D6C4                         		adda	d4,a3
0000615A                              		
0000615A 0813 0007                    		btst	#7,(a3)
0000615E 6600                         		bne.s	@next_lu
00006160 4A13                         		tst.b	(a3)
00006162 6600                         		bne.s	@found_l	
00006164                            @next_lu:
00006164 0445 0008                  		sub.w	#8,d5
00006168 4A45                       		tst.w	d5
0000616A 6B00                       		bmi.s	@ignore_l
0000616C 4845                       		swap	d5
0000616E 51CD FFB8                  		dbf	d5,@next_passlu
00006172                            		
00006172 6000                       		bra.s	@ignore_l
00006174                            		
00006174                            ; --------------
00006174                            ; Found left
00006174                            ; --------------
00006174                            
00006174                            @forceset_l:
00006174 123C 0001                  		move.b	#1,d1
00006178 6000                       		bra.s	@ignore_l
0000617A                            		
0000617A                            @found_l:
0000617A 0285 0000 FFF0             		and.l	#$FFF0,d5
00006180 E98D                       		lsl.l	#4,d5
00006182 8285                       		or.l	d5,d1
00006184 7A00                        		moveq	#0,d5
00006186 382E 0008                  		move.w	obj_x(a6),d4
0000618A 0444 0001                  		sub.w	#1,d4
0000618E 1A2E 0004                  		move.b	obj_size(a6),d5
00006192 E74D                       		lsl.w	#3,d5
00006194 9845                       		sub.w	d5,d4
00006196 0284 0000 FFF0             		and.l	#$FFF0,d4
0000619C 4844                       		swap	d4
0000619E 8284                       		or.l	d4,d1
000061A0 1213                        		move.b	(a3),d1
000061A2                            @ignore_l:
000061A2                            
000061A2                            ; ------------------------
000061A2                            ; Right
000061A2                            ; ------------------------
000061A2                             
000061A2 4A2E 0005                  		tst.b	obj_size+1(a6)
000061A6 6700 0000                  		beq	@ignore_r
000061AA                            		
000061AA                            ; --------------
000061AA                            ; RIGHT DOWN
000061AA                            ; --------------
000061AA                            
000061AA 7A00                       		moveq	#0,d5
000061AC 3A2E 000C                    		move.w	obj_y(a6),d5
000061B0 4A45                         		tst.w	d5
000061B2 6B00 0000                  		bmi	@ignore_r
000061B6 382D 0032                  		move.w	lvl_size_y(a5),d4
000061BA E94C                       		lsl.w	#4,d4
000061BC BA44                       		cmp.w	d4,d5
000061BE 6C00 0000                  		bge	@ignore_r
000061C2 4845                         		swap	d5
000061C4 4245                         		clr.w	d5
000061C6 1A2E 0007                    		move.b	obj_size+3(a6),d5	
000061CA 4A45                         		tst.w	d5
000061CC 6700 0000                    		beq	@ignore_r
000061D0 0445 0001                    		sub.w	#1,d5
000061D4                            @next_passrd:
000061D4 4845                       		swap	d5
000061D6 4A45                       		tst.w	d5
000061D8 6B00 0000                  		bmi	@ignore_r
000061DC                            		
000061DC 3805                       		move.w	d5,d4
000061DE 4844                       		swap	d4
000061E0 382E 0008                  		move.w	obj_x(a6),d4
000061E4 4245                       		clr.w	d5
000061E6 1A2E 0005                  		move.b	obj_size+1(a6),d5
000061EA E74D                       		lsl.w	#3,d5
000061EC D845                       		add.w	d5,d4			; left X size
000061EE 3A2D 0030                  		move.w	lvl_size_x(a5),d5
000061F2 E94D                       		lsl.w	#4,d5
000061F4 B845                       		cmp.w	d5,d4
000061F6 6C00 0000                  		bge	@forceset_r
000061FA                            		
000061FA E84C                       		lsr.w	#4,d4
000061FC 264C                        		movea.l	a4,a3
000061FE D6C4                       		adda	d4,a3
00006200 4844                       		swap	d4
00006202 3A04                       		move.w	d4,d5
00006204 E84C                         		lsr.w	#4,d4
00006206 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0000620A D6C4                         		adda	d4,a3
0000620C                              		
0000620C 0813 0007                    		btst	#7,(a3)
00006210 6600                         		bne.s	@next_rd
00006212 4A13                         		tst.b	(a3)
00006214 6600 0000                    		bne	@found_r
00006218                            @next_rd:
00006218 0645 0008                  		add.w	#8,d5
0000621C 382D 0032                  		move.w	lvl_size_y(a5),d4
00006220 E94C                       		lsl.w	#4,d4
00006222 BA44                       		cmp.w	d4,d5
00006224 6C00                       		bge.s	@gone_rd
00006226 4845                       		swap	d5
00006228 51CD FFAA                  		dbf	d5,@next_passrd
0000622C                            @gone_rd:
0000622C                            
0000622C                            ; --------------
0000622C                            ; RIGHT UP
0000622C                            ; --------------
0000622C                            
0000622C 7A00                       		moveq	#0,d5
0000622E 3A2E 000C                    		move.w	obj_y(a6),d5
00006232 4A45                         		tst.w	d5
00006234 6B00 0000                  		bmi	@ignore_r
00006238 382D 0032                  		move.w	lvl_size_y(a5),d4
0000623C E94C                       		lsl.w	#4,d4
0000623E BA44                       		cmp.w	d4,d5
00006240 6C00 0000                  		bge	@ignore_r
00006244 4845                         		swap	d5
00006246 4245                         		clr.w	d5
00006248 1A2E 0006                    		move.b	obj_size+2(a6),d5	
0000624C 4A45                         		tst.w	d5
0000624E 6700                         		beq.s	@ignore_r
00006250 0445 0001                    		sub.w	#1,d5
00006254                            @next_passru:
00006254 4845                       		swap	d5
00006256 4A45                       		tst.w	d5
00006258 6B00                       		bmi.s	@ignore_r
0000625A                            		
0000625A 3805                       		move.w	d5,d4
0000625C 4844                       		swap	d4
0000625E 382E 0008                  		move.w	obj_x(a6),d4
00006262 4245                       		clr.w	d5
00006264 1A2E 0005                  		move.b	obj_size+1(a6),d5
00006268 E74D                       		lsl.w	#3,d5
0000626A D845                       		add.w	d5,d4			; left X size
0000626C 3A2D 0030                  		move.w	lvl_size_x(a5),d5
00006270 E94D                       		lsl.w	#4,d5
00006272 B845                       		cmp.w	d5,d4
00006274 6C00                       		bge.s	@forceset_r
00006276                            		
00006276 E84C                       		lsr.w	#4,d4
00006278 264C                        		movea.l	a4,a3
0000627A D6C4                       		adda	d4,a3
0000627C 4844                       		swap	d4
0000627E                            		
0000627E 3A04                       		move.w	d4,d5
00006280 E84C                         		lsr.w	#4,d4
00006282 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
00006286 D6C4                         		adda	d4,a3
00006288                              		
00006288 0813 0007                    		btst	#7,(a3)
0000628C 6600                         		bne.s	@next_ru
0000628E 4A13                         		tst.b	(a3)
00006290 6600                         		bne.s	@found_r
00006292                            @next_ru:
00006292 0445 0008                  		sub.w	#8,d5
00006296 4A45                       		tst.w	d5
00006298 6B00                       		bmi.s	@ignore_r
0000629A                            		
0000629A 4845                       		swap	d5
0000629C 51CD FFB6                  		dbf	d5,@next_passru
000062A0                            
000062A0 6000                       		bra.s	@ignore_r
000062A2                            
000062A2                            ; --------------
000062A2                            ; Found right
000062A2                            ; --------------
000062A2                            
000062A2                            @forceset_r:
000062A2 103C 0001                  		move.b	#1,d0
000062A6 6000                       		bra.s	@ignore_r
000062A8                            		
000062A8                            @found_r:
000062A8 0285 0000 FFF0             		and.l	#$FFF0,d5
000062AE E98D                       		lsl.l	#4,d5
000062B0 8085                       		or.l	d5,d0
000062B2 7A00                        		moveq	#0,d5
000062B4 382E 0008                  		move.w	obj_x(a6),d4
000062B8 1A2E 0005                  		move.b	obj_size+1(a6),d5
000062BC E74D                       		lsl.w	#3,d5
000062BE D845                       		add.w	d5,d4
000062C0 0284 0000 FFF0             		and.l	#$FFF0,d4
000062C6 4844                       		swap	d4
000062C8 8084                       		or.l	d4,d0
000062CA 1013                        		move.b	(a3),d0	
000062CC                            @ignore_r:
000062CC                            		
000062CC                            ; ------------------------
000062CC                            ; Finish checking
000062CC                            ; ------------------------
000062CC                            
000062CC 4E75                       		rts
000062CE                            		
000062CE                            ; ************************
000062CE                            ; Find ceiling collision
000062CE                            ; LEFT/RIGHT
000062CE                            ; 
000062CE                            ; Input:
000062CE                            ; (Nothing)
000062CE                            ; 
000062CE                            ; Output:
000062CE                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
000062CE                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
000062CE                            ; 
000062CE                            ; Uses:
000062CE                            ; a3-a4 | d4-d5
000062CE                            ; ************************
000062CE                            
000062CE                            object_FindPrz_CeilingSides:
000062CE 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
000062D4 286D 0018                    		movea.l	lvl_prizes(a5),a4
000062D8 6000                         		bra.s	objSearchCol_CeilingSides
000062DA                              		
000062DA                            object_FindCol_CeilingSides:
000062DA 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
000062E0 286D 0014                    		movea.l	lvl_collision(a5),a4
000062E4                              		
000062E4                            objSearchCol_CeilingSides:
000062E4 7000                       		moveq	#0,d0
000062E6 7200                       		moveq	#0,d1
000062E8 7800                        		moveq	#0,d4
000062EA 3A2E 000C                    		move.w	obj_y(a6),d5
000062EE                            ;   		add.w	#4,d5
000062EE 182E 0006                     		move.b	obj_size+2(a6),d4
000062F2 E74C                          		lsl.w	#3,d4
000062F4                            ;     		sub.w	#1,d4
000062F4 9A44                          		sub.w	d4,d5			;UP SIZE
000062F6 4A45                         		tst.w	d5
000062F8 6B00 0000                    		bmi	@no_col
000062FC 382D 0032                   		move.w	lvl_size_y(a5),d4
00006300 E94C                        		lsl.w	#4,d4
00006302 BA44                        		cmp.w	d4,d5
00006304 6C00 0000                   		bge	@no_col
00006308                             		
00006308 E84D                         		lsr.w	#4,d5
0000630A 3005                         		move.w	d5,d0
0000630C 3205                         		move.w	d5,d1
0000630E E188                         		lsl.l	#8,d0			; LEFT 000YYY00
00006310 E189                         		lsl.l	#8,d1			;RIGHT 000YYY00
00006312 CAED 0030                   		mulu.w	lvl_size_x(a5),d5
00006316 D8C5                         		adda	d5,a4
00006318                            
00006318                            ; ------------------------
00006318                            ; X check
00006318                            ; 
00006318                            ; LEFT
00006318                            ; ------------------------
00006318                            
00006318 7800                        		moveq	#0,d4
0000631A 7A00                       		moveq	#0,d5
0000631C 3A2E 0008                    		move.w	obj_x(a6),d5
00006320 382D 0030                   		move.w	lvl_size_x(a5),d4
00006324 E94C                        		lsl.w	#4,d4
00006326 BA44                             		cmp.w	d4,d5
00006328 6D00                             		blt.s	@dontfix_l
0000632A 0445 0001                        		sub.w	#1,d5
0000632E                            @dontfix_l:
0000632E 4A45                        		tst.w	d5
00006330 6B00                        		bmi.s	@zero_l
00006332 3805                        		move.w	d5,d4
00006334 E84C                        		lsr.w	#4,d4
00006336 264C                        		movea.l	a4,a3
00006338 D6C4                        		adda 	d4,a3
0000633A                             		
0000633A 4845                        		swap	d5		; d5 - XRead | Free
0000633C 1A2E 0004                   		move.b	obj_size(a6),d5
00006340 0245 00FF                   		and.w	#$FF,d5		; d5 - XRead | Loop
00006344 4A45                        		tst.w	d5
00006346 6700                        		beq.s	@zero_l
00006348                            @Next_col_l:
00006348 4845                        		swap	d5		; d5 - Loop | Xread
0000634A                             		
0000634A 4A13                        		tst.b	(a3)
0000634C 6700                        		beq.s	@No_col_l
0000634E 3805                        		move.w	d5,d4
00006350 0244 FFF0                   		and.w	#$FFF0,d4
00006354 4844                        		swap	d4
00006356 8284                        		or.l	d4,d1		; LEFT XXXYYY00
00006358 1213                       		move.b	(a3),d1
0000635A 6000                        		bra.s	@zero_l
0000635C                            @No_col_l:
0000635C                            
0000635C 0445 0008                   		sub.w	#8,d5
00006360 6A00                          		bpl.s	@Fine_l
00006362 4245                          		clr.w	d5
00006364                            @Fine_l:
00006364 3805                        		move.w	d5,d4
00006366 E84C                        		lsr.w	#4,d4
00006368 264C                        		movea.l	a4,a3
0000636A D6C4                        		adda 	d4,a3
0000636C 4845                        		swap	d5		; d5 - XRead | Loop
0000636E 51CD FFD8                   		dbf	d5,@Next_col_l
00006372                            @zero_l:
00006372                            		
00006372                            ; ------------------------
00006372                            ; X check
00006372                            ; 
00006372                            ; RIGHT
00006372                            ; ------------------------
00006372                            
00006372 7800                        		moveq	#0,d4
00006374 7A00                        		moveq	#0,d5
00006376 3A2E 0008                   		move.w	obj_x(a6),d5
0000637A 0445 0001                   		sub.w	#1,d5
0000637E 4A45                        		tst.w	d5
00006380 6B00                        		bmi.s	@no_col
00006382 382D 0030                   		move.w	lvl_size_x(a5),d4
00006386 E94C                        		lsl.w	#4,d4
00006388 BA44                          		cmp.w	d4,d5
0000638A 6C00                           		bge.s	@no_col
0000638C                            
0000638C 3805                        		move.w	d5,d4
0000638E E84C                        		lsr.w	#4,d4
00006390 264C                        		movea.l	a4,a3
00006392 D6C4                        		adda 	d4,a3
00006394                             		
00006394 4845                        		swap	d5		;d5 - XRead | Free
00006396 1A2E 0005                   		move.b	obj_size+1(a6),d5
0000639A 0245 00FF                   		and.w	#$FF,d5		;d5 - XRead | Loop
0000639E 4A45                        		tst.w	d5
000063A0 6700                        		beq.s	@no_col
000063A2                             		
000063A2                            @Next_col_r:
000063A2 4845                        		swap	d5		;d5 - Loop | Xread
000063A4 4A13                        		tst.b	(a3)
000063A6 6700                        		beq.s	@No_col_r
000063A8 382D 0030                   		move.w	lvl_size_x(a5),d4
000063AC E94C                        		lsl.w	#4,d4
000063AE BA44                          		cmp.w	d4,d5
000063B0 6C00                           		bge.s	@no_col
000063B2                                		
000063B2 3805                        		move.w	d5,d4
000063B4 0244 FFF0                   		and.w	#$FFF0,d4
000063B8 4844                        		swap	d4
000063BA 8084                        		or.l	d4,d0		; RIGHT XXXYYY00
000063BC 1013                       		move.b	(a3),d0
000063BE 4E75                        		rts
000063C0                             		
000063C0                            @No_col_r:
000063C0 0645 0008                   		add.w	#8,d5
000063C4 3805                        		move.w	d5,d4
000063C6 E84C                        		lsr.w	#4,d4
000063C8 264C                        		movea.l	a4,a3
000063CA D6C4                        		adda 	d4,a3
000063CC 4845                        		swap	d5		;d5 - XRead | Loop
000063CE 51CD FFD2                   		dbf	d5,@Next_col_r
000063D2                             		
000063D2                            ; ------------------------
000063D2                            
000063D2                            @no_col:
000063D2 4E75                       		rts
000063D4                             	
000063D4                            ; ************************
000063D4                            ; Find Center collision
000063D4                            ;
000063D4                            ; Input:
000063D4                            ; a6 - Object
000063D4                            ; a5 - RAM_LvlPlanes
000063D4                            ; a4 - Collision data
000063D4                            ; 
000063D4                            ; Output:
000063D4                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
000063D4                            ; 
000063D4                            ; Uses:
000063D4                            ; a3 | d4-d5
000063D4                            ; ************************
000063D4                            
000063D4                            ; TODO: no agarra los X/Y
000063D4                            
000063D4                            object_FindPrz_Center:
000063D4 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
000063DA 286D 0018                    		movea.l	lvl_prizes(a5),a4
000063DE 6000                         		bra.s	objSearchCol_Center
000063E0                              		
000063E0                            object_FindCol_Center:
000063E0 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
000063E6 286D 0014                    		movea.l	lvl_collision(a5),a4
000063EA                            
000063EA                            objSearchCol_Center:
000063EA 7000                       		moveq	#0,d0
000063EC 7800                       		moveq	#0,d4
000063EE 7A00                       		moveq	#0,d5
000063F0 382E 000C                   		move.w	obj_y(a6),d4
000063F4 4A44                        		tst.w	d4
000063F6 6B00 0000                   		bmi	@no_col
000063FA 3A2D 0032                   		move.w	lvl_size_y(a5),d5
000063FE E94D                        		lsl.w	#4,d5
00006400 B845                        		cmp.w	d5,d4
00006402 6C00 0000                   		bge	@no_col
00006406 E84C                         		lsr.w	#4,d4
00006408 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0000640C D8C4                         		adda	d4,a4
0000640E 0284 0000 0FFF               		and.l	#$FFF,d4
00006414 E18C                         		lsl.l	#8,d4
00006416 8084                          		or.l	d4,d0
00006418                            
00006418                            ; ------------------------
00006418                            		
00006418 264C                         		movea.l	a4,a3
0000641A 382E 0008                   		move.w	obj_x(a6),d4
0000641E 4A44                        		tst.w	d4
00006420 6B00                        		bmi.s	@force_on
00006422 3A2D 0030                   		move.w	lvl_size_x(a5),d5
00006426 E94D                         		lsl.w	#4,d5
00006428 B845                         		cmp.w	d5,d4
0000642A 6C00                         		bge.s	@force_on
0000642C 3A04                         		move.w	d4,d5
0000642E 4845                        		swap	d5
00006430 8085                        		or.l	d5,d0			; XXXYYY00
00006432 E84C                        		lsr.w	#4,d4
00006434 D6C4                        		adda 	d4,a3
00006436                              		
00006436 4A13                       		tst.b	(a3)
00006438 6700                       		beq.s	@no_col		
0000643A 1013                       		move.b	(a3),d0
0000643C 4E75                       		rts
0000643E                            @force_on:
0000643E 7000                       		moveq	#0,d0
00006440                            @no_col:
00006440 4E75                       		rts
00006442                            		
00006442                            ; ************************
00006442                            ; Sets a object in the floor
00006442                            ; DOWN/UP
00006442                            ; CENTER
00006442                            ; 
00006442                            ; Input:
00006442                            ; d0 - Floor ID
00006442                            ; (Object's current Ypos)
00006442                            ; 
00006442                            ; Output:
00006442                            ; d7 | LONG - Y speed result
00006442                            ; 
00006442                            ; Uses:
00006442                            ; a3-a4 | d3-d4
00006442                            ; ************************
00006442                            
00006442                            object_SetCol_Floor:
00006442 0800 0006                  		btst	#6,d0
00006446 6600 0000                  		bne	@check_special
0000644A 0C00 0001                  		cmp.b	#1,d0
0000644E 6700 0000                  		beq	@floorsolid
00006452 4A87                          		tst.l	d7
00006454 6B00                          		bmi.s	@NoCol
00006456                               		
00006456 222E 000C                     		move.l	obj_y(a6),d1
0000645A 2601                          		move.l	d1,d3
0000645C 47F9 0000 5716               		lea	(col_SlopeData),a3
00006462 0240 003F                    		and.w	#$3F,d0
00006466 3200                         		move.w	d0,d1
00006468 E949                         		lsl.w	#4,d1
0000646A D6C1                         		adda	d1,a3
0000646C 202E 0008                   		move.l	obj_x(a6),d0
00006470 4840                        		swap	d0
00006472 0240 000F                   		and.w	#$F,d0
00006476 1033 0000                   		move.b	(a3,d0.w),d0
0000647A 0280 0000 000F                 		and.l	#$F,d0
00006480 0281 FFF0 0000                 		and.l	#$FFF00000,d1
00006486 4840                         		swap	d0
00006488 D280                        		add.l	d0,d1
0000648A                             		
0000648A                            ; 		btst	#bitobj_air,obj_status(a6)
0000648A                            ; 		beq.s	@dontchk
0000648A D687                         		add.l	d7,d3
0000648C B681                         		cmp.l	d1,d3
0000648E 6D00                         		blt.s	@NoCol
00006490                            @dontchk:
00006490 2D41 000C                    		move.l	d1,obj_y(a6)	; TODO: REPARAME
00006494                              		
00006494 08AE 0002 001E                		bclr	#bitobj_air,obj_status(a6)
0000649A 4287                        		clr.l	d7
0000649C 4A86                            		tst.l	d6
0000649E 6700                            		beq.s	@NoCol
000064A0 2E3C 0001 0000                 		move.l	#$10000,d7
000064A6                            @NoCol:
000064A6 4E75                       		rts
000064A8                            
000064A8                            @floorsolid:
000064A8 08AE 0002 001E             		bclr	#bitobj_air,obj_status(a6)	
000064AE 02AE FFF8 0000 000C        		and.l	#$FFF80000,obj_y(a6)		; TODO: REPARAME
000064B6 4287                       		clr.l	d7
000064B8 4E75                       		rts
000064BA                            
000064BA                            ; ---------------------
000064BA                            ; Check $80+ collision
000064BA                            ; Floor
000064BA                            ; ---------------------
000064BA                            
000064BA                            @check_special:
000064BA 4E75                       		rts
000064BC                            		
000064BC                            ; ************************
000064BC                            ; Sets collision on the object
000064BC                            ; Ceiling
000064BC                            ; 
000064BC                            ; Input:
000064BC                            ; d0 - Floor ID
000064BC                            ; 
000064BC                            ; Output:
000064BC                            ; d7 | LONG - Y speed result
000064BC                            ; 
000064BC                            ; Uses:
000064BC                            ; a3-a4 | d3-d4
000064BC                            ; ************************
000064BC                            
000064BC                            object_SetCol_Ceiling:
000064BC 0800 0006                  		btst	#6,d0
000064C0 6600 0000                  		bne	@floorsolid
000064C4 0C00 0001                  		cmp.b	#1,d0
000064C8 6700 0000                  		beq	@floorsolid
000064CC                            ;    		tst.l	d7
000064CC                            ;    		bpl.s	@NoCol
000064CC                               		
000064CC                            ;    		move.l	obj_y(a6),d1
000064CC                            ;    		move.l	d1,d3
000064CC                            ;   		lea	(col_SlopeData),a3
000064CC                            ;   		and.w	#$3F,d0
000064CC                            ;   		move.w	d0,d1
000064CC                            ;   		lsl.w	#4,d1
000064CC                            ;   		adda	d1,a3
000064CC                            ;  		move.l	obj_x(a6),d0
000064CC                            ;  		swap	d0
000064CC                            ;  		and.w	#$F,d0
000064CC                            ;  		move.b	(a3,d0.w),d0
000064CC                            ;     		and.l	#$F,d0
000064CC                            ;     		and.l	#$FFF00000,d1
000064CC                            ;   		swap	d0
000064CC                            ;  		add.l	d0,d1
000064CC                            ;  		
000064CC                            ; ; 		btst	#bitobj_air,obj_status(a6)
000064CC                            ; ; 		beq.s	@dontchk
000064CC                            ;   		add.l	d7,d3
000064CC                            ;   		cmp.l	d1,d3
000064CC                            ;   		blt.s	@NoCol
000064CC                            ; @dontchk:
000064CC                            ;   		move.l	d1,obj_y(a6)	; TODO: REPARAME
000064CC                            ;   		
000064CC                            ;    		bclr	#bitobj_air,obj_status(a6)
000064CC                            ;  		clr.l	d7
000064CC                            ;      		tst.l	d6
000064CC                            ;      		beq.s	@NoCol
000064CC                            ;     		move.l	#$10000,d7
000064CC                            ; @NoCol:
000064CC                            ; 		rts
000064CC                            ; 
000064CC                            @floorsolid:
000064CC 4287                       		clr.l	d7
000064CE 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
000064D4 02AE FFF8 0000 000C        		and.l	#$FFF80000,obj_y(a6)
000064DC 7800                       		moveq	#0,d4
000064DE 182E 0007                  		move.b	obj_size+3(a6),d4
000064E2 E74C                       		lsl.w	#3,d4
000064E4 D96E 000C                  		add.w	d4,obj_y(a6)
000064E8                            @NoCol:
000064E8 4E75                       		rts
000064EA                            		
000064EA                            ; ************************
000064EA                            ; Sets a object in the wall
000064EA                            ; LEFT/RIGHT
000064EA                            ; CENTER
000064EA                            ; 
000064EA                            ; Input:
000064EA                            ; d0 - Floor ID
000064EA                            ; (Object's current Ypos)
000064EA                            ; 
000064EA                            ; Output:
000064EA                            ; d7 | LONG - Y speed result
000064EA                            ; 
000064EA                            ; Uses:
000064EA                            ; a3-a4 | d3-d4
000064EA                            ; ************************
000064EA                            
000064EA                            ; TODO: para que mierdas era esto
000064EA                            
000064EA                            object_SetCol_Wall:
000064EA                            ; 		move.w	obj_y(a6),d1		;TODO: REPARAME
000064EA                            ; 		sub.w	#1,d1
000064EA                            ; 		move.w	d1,d3
000064EA                            ; 		and.w	#$FFF0,d1 		
000064EA                            ;      		lea	(col_SlopeData),a3
000064EA                            ;       		and.w	#$FF,d0
000064EA                            ;      		lsl.w	#4,d0
000064EA                            ;       		adda	d0,a3
000064EA                            ;       		move.w	obj_x(a6),d0
000064EA                            ;       		and.w	#$F,d0
000064EA                            ;       		move.b	(a3,d0.w),d2
000064EA                            ;       		and.w	#$F,d2
000064EA                            ;       		add.w	d2,d1
000064EA                            ;       		
000064EA                            ;  		btst	#bitobj_air,obj_status(a6)
000064EA                            ; 		beq.s	@dontchkLR
000064EA                            ;   		cmp.w	d1,d3
000064EA                            ;   		blt.s	@NoCol_LR
000064EA                            ; @dontchkLR:
000064EA                            ;    		move.w	d1,obj_y(a6)		;TODO: REPARAME
000064EA                            
000064EA                            @NoCol_LR:
000064EA 4E75                       		rts
000064EC                            	
000064EC                            ; **********************************************
000064EC                            ; Object interaction
000064EC                            ; **********************************************
000064EC                            
000064EC                            ; ----------------------------------
000064EC                            ; objTouch
000064EC                            ; 
000064EC                            ; touch/hit detection
000064EC                            ; 
000064EC                            ; Uses: d0-d4
000064EC                            ; ----------------------------------
000064EC                            
000064EC                            objTouch:
000064EC 6100 0000                  		bsr	objTouch_Top
000064F0 3600                       		move.w	d0,d3
000064F2 6100 0000                  		bsr	objTouch_Bottom
000064F6 8640                       		or.w	d0,d3
000064F8 6100 0000                  		bsr	objTouch_Sides
000064FC 8640                       		or.w	d0,d3
000064FE 4840                       		swap	d0
00006500 8640                       		or.w	d0,d3
00006502 3003                       		move.w	d3,d0
00006504 4E75                       		rts
00006506                            		
00006506                            ; ---------------------------
00006506                            ; Seperate touches
00006506                            ; ---------------------------
00006506                            
00006506                            objTouch_Top:
00006506 4200                       		clr.b	d0
00006508 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0000650E 780F                       		moveq	#16-1,d4
00006510                            @check_again:
00006510 4AAC 0000                  		tst.l	obj_code(a4)
00006514 6700 0000                  		beq	@notfound
00006518 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
0000651E 6700                       		beq.s	@notfound
00006520                            		
00006520                            ;  		tst.l	obj_y_spd(a4)
00006520                            ;  		bmi.s	@lowrY
00006520                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
00006520                            ;  		bne.s	@lowrY
00006520 7200                       		moveq	#0,d1
00006522                            		
00006522                            		; Check LEFT
00006522 7400                          		moveq	#0,d2
00006524 322E 0008                     		move.w	obj_x(a6),d1
00006528 142E 0004                     		move.b	obj_size(a6),d2
0000652C E74A                          		lsl.w	#3,d2
0000652E 9242                          		sub.w	d2,d1
00006530 342C 0008                     		move.w	obj_x(a4),d2
00006534 4841                           		swap	d1
00006536 122C 0005                     		move.b	obj_size+1(a4),d1
0000653A E749                          		lsl.w	#3,d1
0000653C D441                             		add.w	d1,d2
0000653E 4841                           		swap	d1
00006540 B242                          		cmp.w	d2,d1
00006542 6C00                          		bge.s	@lowrY
00006544                               		; Check RIGHT
00006544 7400                          		moveq	#0,d2
00006546 322E 0008                     		move.w	obj_x(a6),d1
0000654A 142E 0005                     		move.b	obj_size+1(a6),d2
0000654E E74A                          		lsl.w	#3,d2
00006550 D242                          		add.w	d2,d1
00006552 342C 0008                     		move.w	obj_x(a4),d2
00006556 4841                           		swap	d1
00006558 122C 0004                     		move.b	obj_size(a4),d1
0000655C E749                          		lsl.w	#3,d1
0000655E 9441                       		sub.w	d1,d2
00006560 4841                           		swap	d1
00006562 B242                           		cmp.w	d2,d1
00006564 6F00                           		ble.s	@lowrY
00006566                            
00006566                                		; Check Top, and $C pixels more
00006566 322E 000C                     		move.w	obj_y(a6),d1
0000656A 7400                          		moveq	#0,d2
0000656C 142E 0006                     		move.b	obj_size+2(a6),d2
00006570 E74A                          		lsl.w	#3,d2
00006572 9242                          		sub.w	d2,d1
00006574 4841                          		swap	d1
00006576 342C 000C                     		move.w	obj_y(a4),d2
0000657A 122C 0007                     		move.b	obj_size+3(a4),d1
0000657E E749                          		lsl.w	#3,d1
00006580 D441                          		add.w	d1,d2
00006582 4841                          		swap	d1
00006584 B242                          		cmp.w	d2,d1
00006586 6E00                          		bgt.s	@lowrY
00006588 0641 000C                       		add.w	#$C,d1
0000658C B242                           		cmp.w	d2,d1
0000658E 6D00                           		blt.s	@lowrY
00006590                                		
00006590 103C 0001                     		move.b	#1,d0
00006594                            @lowrY:
00006594                            
00006594 4A00                       		tst.b	d0
00006596 6600 0000                  		bne	@wecanhurt
0000659A                            @notfound:
0000659A D8FC 0064                  		adda	#sizeof_obj,a4
0000659E 51CC FF70                  		dbf	d4,@check_again
000065A2                            @wecanhurt:
000065A2 4E75                          		rts
000065A4                               		
000065A4                            ; ----------------------------------
000065A4                            
000065A4                            objTouch_Bottom:
000065A4 4200                       		clr.b	d0
000065A6 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
000065AC 780F                       		moveq	#16-1,d4
000065AE                            @check_again:
000065AE 4AAC 0000                  		tst.l	obj_code(a4)
000065B2 6700 0000                  		beq	@notfound
000065B6 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
000065BC 6700 0000                  		beq	@notfound
000065C0                            		
000065C0                            ;  		tst.l	obj_y_spd(a4)
000065C0                            ;  		bmi.s	@lowrY
000065C0                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
000065C0                            ;  		bne.s	@lowrY
000065C0 7200                       		moveq	#0,d1
000065C2                            		
000065C2                            		; Check LEFT
000065C2 7400                          		moveq	#0,d2
000065C4 322E 0008                     		move.w	obj_x(a6),d1
000065C8 142E 0004                     		move.b	obj_size(a6),d2
000065CC E74A                          		lsl.w	#3,d2
000065CE 9242                          		sub.w	d2,d1
000065D0 342C 0008                     		move.w	obj_x(a4),d2
000065D4 4841                           		swap	d1
000065D6 122C 0005                     		move.b	obj_size+1(a4),d1
000065DA E749                          		lsl.w	#3,d1
000065DC D441                             		add.w	d1,d2
000065DE 4841                           		swap	d1
000065E0 B242                          		cmp.w	d2,d1
000065E2 6C00                          		bge.s	@lowrY
000065E4                               		; Check RIGHT
000065E4 7400                          		moveq	#0,d2
000065E6 322E 0008                     		move.w	obj_x(a6),d1
000065EA 142E 0005                     		move.b	obj_size+1(a6),d2
000065EE E74A                          		lsl.w	#3,d2
000065F0 D242                          		add.w	d2,d1
000065F2 342C 0008                     		move.w	obj_x(a4),d2
000065F6 4841                           		swap	d1
000065F8 122C 0004                     		move.b	obj_size(a4),d1
000065FC E749                          		lsl.w	#3,d1
000065FE 9441                       		sub.w	d1,d2
00006600 4841                           		swap	d1
00006602 B242                           		cmp.w	d2,d1
00006604 6F00                           		ble.s	@lowrY
00006606                            
00006606                                		; Check Top, and $C pixels more
00006606 322E 000C                     		move.w	obj_y(a6),d1
0000660A 7400                          		moveq	#0,d2
0000660C 142E 0007                     		move.b	obj_size+3(a6),d2
00006610 E74A                          		lsl.w	#3,d2
00006612 D242                          		add.w	d2,d1
00006614 4841                          		swap	d1
00006616 342C 000C                     		move.w	obj_y(a4),d2
0000661A 122C 0006                     		move.b	obj_size+2(a4),d1
0000661E E749                          		lsl.w	#3,d1
00006620 9441                          		sub.w	d1,d2
00006622 4841                          		swap	d1
00006624 B441                          		cmp.w	d1,d2
00006626 6E00                          		bgt.s	@lowrY
00006628 0441 000C                       		sub.w	#$C,d1
0000662C B441                           		cmp.w	d1,d2
0000662E 6D00                           		blt.s	@lowrY
00006630                                		
00006630 103C 0001                     		move.b	#1,d0
00006634                            @lowrY:
00006634                            
00006634 4A00                       		tst.b	d0
00006636 6600 0000                  		bne	@wecanhurt
0000663A                            @notfound:
0000663A D8FC 0064                  		adda	#sizeof_obj,a4
0000663E 51CC FF6E                  		dbf	d4,@check_again
00006642                            @wecanhurt:
00006642 4E75                          		rts
00006644                            
00006644                            ; ----------------------------------
00006644                            
00006644                            objTouch_Sides:
00006644 7000                       		moveq	#0,d0
00006646 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0000664C 780F                       		moveq	#16-1,d4
0000664E                            @check_again:
0000664E 4AAC 0000                  		tst.l	obj_code(a4)
00006652 6700 0000                  		beq	@notfound
00006656 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
0000665C 6700 0000                  		beq	@notfound
00006660                            		
00006660                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
00006660                            ;  		bne	@lowrY
00006660                             		
00006660 7200                            		moveq	#0,d1
00006662 7400                          		moveq	#0,d2
00006664 322E 000C                      		move.w	obj_y(a6),d1
00006668 7400                           		moveq	#0,d2
0000666A 142E 0006                      		move.b	obj_size+2(a6),d2
0000666E E74A                           		lsl.w	#3,d2
00006670 9242                           		sub.w	d2,d1
00006672 4841                           		swap	d1
00006674 342C 000C                      		move.w	obj_y(a4),d2
00006678 122C 0007                      		move.b	obj_size+3(a4),d1
0000667C E749                           		lsl.w	#3,d1
0000667E D441                           		add.w	d1,d2
00006680 4841                           		swap	d1
00006682 B242                           		cmp.w	d2,d1
00006684 6E00 0000                      		bgt	@lowrY
00006688                                		
00006688 322E 000C                      		move.w	obj_y(a6),d1
0000668C 7400                           		moveq	#0,d2
0000668E 142E 0007                      		move.b	obj_size+3(a6),d2
00006692 E74A                           		lsl.w	#3,d2
00006694 D242                           		add.w	d2,d1
00006696 4841                           		swap	d1
00006698 342C 000C                      		move.w	obj_y(a4),d2
0000669C 122C 0006                      		move.b	obj_size+2(a4),d1
000066A0 E749                           		lsl.w	#3,d1
000066A2 9441                           		sub.w	d1,d2
000066A4 4841                           		swap	d1
000066A6 B242                           		cmp.w	d2,d1
000066A8 6D00 0000                      		blt	@lowrY
000066AC                            
000066AC                                 		; X Sides check
000066AC 7200                            		moveq	#0,d1
000066AE 7400                          		moveq	#0,d2
000066B0 322E 0008                     		move.w	obj_x(a6),d1
000066B4 142E 0005                     		move.b	obj_size+1(a6),d2
000066B8 E74A                          		lsl.w	#3,d2
000066BA D242                          		add.w	d2,d1
000066BC 242C 0008                     		move.l	obj_x(a4),d2
000066C0 D4AC 0010                     		add.l	obj_x_spd(a4),d2
000066C4 4842                          		swap	d2
000066C6 4841                           		swap	d1
000066C8 122C 0004                      		move.b	obj_size(a4),d1
000066CC E749                            		lsl.w	#3,d1
000066CE 9441                            		sub.w	d1,d2
000066D0 4841                            		swap	d1
000066D2 B441                           		cmp.w	d1,d2
000066D4 6E00                           		bgt.s	@lowrY_L
000066D6 0441 0008                      		sub.w	#8,d1
000066DA B441                           		cmp.w	d1,d2
000066DC 6D00                           		blt.s	@lowrY_L 
000066DE 303C 0001                      		move.w	#1,d0
000066E2                            
000066E2                            @lowrY_L:
000066E2 4840                            		swap	d0
000066E4 7200                            		moveq	#0,d1
000066E6 7400                          		moveq	#0,d2
000066E8 322E 0008                     		move.w	obj_x(a6),d1
000066EC 142E 0004                     		move.b	obj_size(a6),d2
000066F0 E74A                          		lsl.w	#3,d2
000066F2 9242                          		sub.w	d2,d1
000066F4 342C 0008                     		move.w	obj_x(a4),d2
000066F8 4841                           		swap	d1
000066FA 122C 0005                      		move.b	obj_size+1(a4),d1
000066FE E749                           		lsl.w	#3,d1
00006700 D441                           		add.w	d1,d2
00006702 4841                           		swap	d1
00006704 B242                          		cmp.w	d2,d1
00006706 6E00                          		bgt.s	@lowrY
00006708 0641 0008                     		add.w	#8,d1
0000670C B242                          		cmp.w	d2,d1
0000670E 6D00                          		blt.s	@lowrY 
00006710 303C 0001                     		move.w	#1,d0
00006714                            @lowrY:
00006714                            		
00006714 4A80                       		tst.l	d0
00006716 6600 0000                  		bne	@wecanhurt
0000671A                            @notfound:
0000671A D8FC 0064                  		adda	#sizeof_obj,a4
0000671E 51CC FF2E                  		dbf	d4,@check_again
00006722                            @wecanhurt:
00006722 4E75                          		rts
00006724                               			
00006724                            ; ----------------------------------
00006724                            
00006724                            objPlyrSetFloor:
00006724 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0000672A 4AAC 0014                  		tst.l	obj_y_spd(a4)
0000672E 6B00                       		bmi.s	@return
00006730 082C 00C8 0000             		btst	#bitPlyrClimb,plyr_status(a4)
00006736 6600                       		bne.s	@return
00006738                            ; 		lea	(RAM_LvlPlanes),a5
00006738                            		
00006738 42AC 0014                     		clr.l	obj_y_spd(a4)
0000673C 302E 000C                   		move.w	obj_y(a6),d0
00006740 3200                        		move.w	d0,d1
00006742 7400                          		moveq	#0,d2
00006744 142E 0006                     		move.b	obj_size+2(a6),d2
00006748 E74A                          		lsl.w	#3,d2
0000674A 9042                          		sub.w	d2,d0
0000674C 7400                          		moveq	#0,d2
0000674E 142C 0007                     		move.b	obj_size+3(a4),d2
00006752 E74A                          		lsl.w	#3,d2
00006754 9042                          		sub.w	d2,d0
00006756                            ;    		cmp.w	d0,d1
00006756                            ;    		blt.s	@lowrY
00006756 297C 0001 0000 0014           		move.l	#$10000,obj_y_spd(a4)
0000675E                            ; @lowrY:
0000675E 3940 000C                     		move.w	d0,obj_y(a4)
00006762                               		
00006762                            ; 		bsr	object_PlyrFlgs_floor
00006762 08AC 0002 001E                  		bclr	#bitobj_air,obj_status(a4)
00006768 08EC 0004 0022                  		bset	#bitcol_obj,obj_col(a4)
0000676E 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
00006776 6600 0000                  		bne	@return
0000677A 397C 0000 0000                 		move.w	#varJumpTimer,plyr_jumptmr(a4)
00006780                            @return:
00006780 4E75                          		rts
00006782                              	
00006782                            ; ----------------------------------
00006782                            
00006782                            objPlyrSetCeiling:
00006782 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00006788 082C 00C8 0000             		btst	#bitPlyrClimb,plyr_status(a4)
0000678E 6600                       		bne.s	@return
00006790 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006796 42AC 0014                  		clr.l	obj_y_spd(a4)
0000679A 08EC 0002 001E                  		bset	#bitobj_air,obj_status(a4)
000067A0                            ;      		bset	#bitcol_obju,obj_col(a4)
000067A0                                 		
000067A0                            ;      		bset	#bitcol_floor,obj_col(a4)
000067A0                            ;  		move.w	obj_y(a6),d0
000067A0                            ;    		moveq	#0,d2
000067A0                            ;    		move.b	obj_size+2(a6),d2
000067A0                            ;    		lsl.w	#3,d2
000067A0                            ;    		sub.w	d2,d0
000067A0                            ;    		move.w	d0,obj_y(a4)
000067A0                            @return:
000067A0 4E75                          		rts
000067A2                               		
000067A2                            ; ----------------------------------
000067A2                            
000067A2                            objPlyrSetWall_R:
000067A2 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
000067A8 082C 00C8 0000             		btst	#bitPlyrClimb,plyr_status(a4)
000067AE 6600                       		bne.s	objPlyrColReturn
000067B0 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
000067B6 42AC 0010                  		clr.l	obj_x_spd(a4)
000067BA 08EC 0002 0022                  		bset	#bitcol_wall_r,obj_col(a4)
000067C0 302E 0008                   		move.w	obj_x(a6),d0
000067C4 7400                          		moveq	#0,d2
000067C6 142E 0004                     		move.b	obj_size(a6),d2
000067CA E74A                          		lsl.w	#3,d2
000067CC 9042                          		sub.w	d2,d0
000067CE 7400                          		moveq	#0,d2
000067D0 142C 0005                     		move.b	obj_size+1(a4),d2
000067D4 E74A                          		lsl.w	#3,d2
000067D6 9042                          		sub.w	d2,d0
000067D8 6000                          		bra.s	objPlyrSetWLX
000067DA                            		
000067DA                            ; ----------------------------------
000067DA                            
000067DA                            objPlyrSetWall_L:
000067DA 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
000067E0 082C 00C8 0000             		btst	#bitPlyrClimb,plyr_status(a4)
000067E6 6600                       		bne.s	objPlyrColReturn
000067E8 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
000067EE 42AC 0010                  		clr.l	obj_x_spd(a4)
000067F2 08EC 0003 0022                  		bset	#bitcol_wall_l,obj_col(a4)
000067F8 302E 0008                   		move.w	obj_x(a6),d0
000067FC                            ;  		add.w	#1,d0
000067FC 7400                          		moveq	#0,d2
000067FE 142E 0005                     		move.b	obj_size+1(a6),d2
00006802 E74A                          		lsl.w	#3,d2
00006804 D042                          		add.w	d2,d0
00006806                               		
00006806 7400                          		moveq	#0,d2
00006808 142C 0004                     		move.b	obj_size(a4),d2
0000680C E74A                          		lsl.w	#3,d2
0000680E D042                          		add.w	d2,d0
00006810                            objPlyrSetWLX:
00006810 4A40                          		tst.w	d0
00006812 6A00                          		bpl.s	@plus_x
00006814 4240                          		clr.w	d0
00006816                            @plus_x:
00006816 342D 0030                  		move.w	lvl_size_x(a5),d2
0000681A E94A                       		lsl.w	#4,d2
0000681C B042                       		cmp.w	d2,d0
0000681E 6D00                       		blt.s	@plusr_x
00006820 3002                       		move.w	d2,d0
00006822                            @plusr_x:
00006822 3940 0008                     		move.w	d0,obj_x(a4)
00006826                            objPlyrColReturn:
00006826 4E75                          		rts
00006828                               		
00006828                            ; ----------------------------------
00006828                            ; What to do if object touched the
00006828                            ; player
00006828                            ; 
00006828                            ; Input:
00006828                            ; a4 - Player object
00006828                            ; 
00006828                            ; Uses:
00006828                            ; d4
00006828                            ; 
00006828                            ; Returns:
00006828                            ; beq.s Nothing
00006828                            ; bne.s Touched
00006828                            ; ----------------------------------
00006828                            
00006828                            objPlyrHurtKill:
00006828 7800                       		moveq	#0,d4
0000682A 200C                       		move.l	a4,d0
0000682C 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0	; Player?
00006832 6600                       		bne.s	@settrue
00006834 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
0000683A 0C2C 0000 001D             		cmp.b	#varPlyrMdDead,obj_index(a4)
00006840 6700                       		beq.s	@return
00006842 08EC 0003 001E             		bset	#bitobj_hurt,obj_status(a4)
00006848 0C2C 0000 001A             		cmp.b	#varPlyAniJump,obj_anim_id(a4)
0000684E 6700                       		beq.s	@stomppikudo
00006850 082C 0002 001E              		btst	#bitobj_air,obj_status(a4)
00006856 6600                        		bne.s	@stomppikudo
00006858 6000                       		bra.s	@return
0000685A                            		
0000685A                            @stomppikudo:
0000685A 082C 0004 0022             		btst	#bitcol_obj,obj_col(a4)
00006860 66FE                       		bne.s	*;@return
00006862 4AAC 0014                   		tst.l	obj_y_spd(a4)
00006866 6B00                       		bmi.s	@return
00006868 6700                       		beq.s	@return	
0000686A                            @hurtanywy:
0000686A 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
00006870                            @settrue:
00006870 7801                       		moveq	#1,d4
00006872                            @return:
00006872 4A44                       		tst.w	d4
00006874 4E75                       		rts
00006876                            		
00006876                            ; Object_ChkPlyrHit:
00006876                            ; 		lea	(RAM_ObjBuffer),a4
00006876                            ; 		moveq	#0,d5
00006876                            ; 		cmp.b	#varPlyAniJump,obj_anim_id(a4)
00006876                            ; 		bne.s	@objhit
00006876                            ; 		moveq	#-1,d5
00006876                            ; @objhit:
00006876                            ; 		tst.w	d5
00006876                            ; 		rts
00006876                            
00006876                            ; ----------------------------------
00006876                            ; Prize ceiling action
00006876                            ; 
00006876                            ; Output:
00006876                            ; d4 - Collision out
00006876                            ; ----------------------------------
00006876                            
00006876                            Object_PrzActionCeil:
00006876 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0000687C 7A00                       		moveq	#0,d5
0000687E 1A00                       		move.b	d0,d5
00006880 0805 0007                  		btst	#7,d5
00006884 6600                       		bne.s	@its_hidden
00006886 DA45                       		add.w	d5,d5
00006888 3C3B 5000                  		move.w	@block_list(pc,d5.w),d6
0000688C 4EFB 6000                  		jmp	@block_list(pc,d6.w)
00006890                            		
00006890                            ; --------------------------
00006890                            ; Reveral hidden block
00006890                            ; --------------------------
00006890                            
00006890                            @its_hidden:
00006890 6100 0000                   		bsr	Prize_Locate
00006894 0200 007F                   		and.b	#$7F,d0
00006898 1680                        		move.b	d0,(a3)
0000689A                             		
0000689A                            ;  		bsr	Level_HidePrize
0000689A 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
000068A0 264C                       		movea.l	a4,a3
000068A2 323C 0007                  		move 	#8-1,d1
000068A6                            @chksame2:
000068A6 B0AB 0024                  		cmp.l	obj_ram(a3),d0
000068AA 6700 0000                  		beq	@solidblock
000068AE D6FC 0064                  		adda 	#sizeof_obj,a3
000068B2 51C9 FFF2                  		dbf	d1,@chksame2	
000068B6                            
000068B6 323C 0003                  		move 	#4-1,d1
000068BA                            @next_obj2:
000068BA 4AAC 0000                  		tst.l	obj_code(a4)
000068BE 6700                       		beq.s	@free2
000068C0 D8FC 0064                  		adda	#sizeof_obj,a4
000068C4 51C9 FFF4                  		dbf	d1,@next_obj2
000068C8 6000                       		bra.s	@ranout2
000068CA                            @free2:
000068CA 6100 0000                   		bsr	blkobj_setcoords
000068CE 197C 0001 001F             		move.b	#1,obj_subid(a4)
000068D4 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
000068DC 2940 0024                  		move.l	d0,obj_ram(a4)
000068E0                            		
000068E0 203C 0000 0000               		move.l	#SndSfx_BONK,d0
000068E6 323C 0003                    		move.w 	#3,d1
000068EA 7401                         		moveq	#1,d2
000068EC 6100 AB4E                    		bsr	Audio_Track_play
000068F0                            @ranout2:
000068F0                            ; 		moveq	#0,d4
000068F0 4E75                        		rts
000068F2                             		
000068F2                            ; ----------------------------------
000068F2                            
000068F2                            @block_list:
000068F2 0000                       		dc.w 0
000068F4 0000                       		dc.w @break_block-@block_list
000068F6 0000                       		dc.w @bump_1coin-@block_list
000068F8 0000                       		dc.w @bump_10coin-@block_list
000068FA 0000                       		dc.w @break_block-@block_list
000068FC 0000                       		dc.w @break_block-@block_list
000068FE 0000                       		dc.w @break_block-@block_list
00006900 0000                       		dc.w @bump_1up-@block_list
00006902 0000                       		dc.w @bump_1coin-@block_list
00006904 0000                       		dc.w @bump_10coin-@block_list
00006906 0000                       		dc.w @bump_1up-@block_list
00006908 0000                       		dc.w @bump_block-@block_list
0000690A 0000                       		dc.w @bump_block-@block_list
0000690C 0000                       		dc.w @bump_block-@block_list
0000690E 0000                       		dc.w @bump_block-@block_list
00006910 0000                       		dc.w @bump_block-@block_list
00006912                            		
00006912 0000                       		dc.w @break_block-@block_list	
00006914 0000                       		dc.w @break_block-@block_list
00006916 0000                       		dc.w @break_block-@block_list
00006918 0000                       		dc.w @break_block-@block_list
0000691A 0000                       		dc.w @break_block-@block_list
0000691C 0000                       		dc.w @break_block-@block_list
0000691E 0000                       		dc.w @break_block-@block_list
00006920 0000                       		dc.w @break_block-@block_list
00006922 0000                       		dc.w @break_block-@block_list
00006924 0000                       		dc.w @break_block-@block_list
00006926 0000                       		dc.w @break_block-@block_list
00006928 0000                       		dc.w @break_block-@block_list
0000692A 0000                       		dc.w @break_block-@block_list
0000692C 0000                       		dc.w @break_block-@block_list
0000692E 0000                       		dc.w @break_block-@block_list	
00006930 0000                       		dc.w @break_block-@block_list
00006932                            		
00006932 0000                       		dc.w @trampoline-@block_list	
00006934 0000                       		dc.w @break_block-@block_list
00006936 0000                       		dc.w @break_block-@block_list
00006938 0000                       		dc.w @break_block-@block_list
0000693A 0000                       		dc.w @break_block-@block_list
0000693C 0000                       		dc.w @break_block-@block_list
0000693E 0000                       		dc.w @break_block-@block_list
00006940 0000                       		dc.w @break_block-@block_list
00006942 0000                       		dc.w @break_block-@block_list
00006944 0000                       		dc.w @break_block-@block_list
00006946 0000                       		dc.w @break_block-@block_list
00006948 0000                       		dc.w @break_block-@block_list
0000694A 0000                       		dc.w @break_block-@block_list
0000694C 0000                       		dc.w @break_block-@block_list
0000694E 0000                       		dc.w @break_block-@block_list	
00006950 0000                       		dc.w @break_block-@block_list
00006952                            		
00006952 0000                       		dc.w @break_block-@block_list	
00006954 0000                       		dc.w @break_block-@block_list
00006956 0000                       		dc.w @break_block-@block_list
00006958 0000                       		dc.w @break_block-@block_list
0000695A 0000                       		dc.w @break_block-@block_list
0000695C 0000                       		dc.w @break_block-@block_list
0000695E 0000                       		dc.w @break_block-@block_list
00006960 0000                       		dc.w @break_block-@block_list
00006962 0000                       		dc.w @break_block-@block_list
00006964 0000                       		dc.w @break_block-@block_list
00006966 0000                       		dc.w @break_block-@block_list
00006968 0000                       		dc.w @break_block-@block_list
0000696A 0000                       		dc.w @break_block-@block_list
0000696C 0000                       		dc.w @break_block-@block_list
0000696E 0000                       		dc.w @break_block-@block_list	
00006970 0000                       		dc.w @break_block-@block_list
00006972                            		
00006972 0000                       		dc.w @coin_red-@block_list
00006974 0000                       		dc.w @coin_blue-@block_list
00006976                            		
00006976                            ; ----------------------------------
00006976                            ; Normal breakable block
00006976                            ; ----------------------------------
00006976                            
00006976                            @break_block:
00006976 6100 0000                  		bsr	@chk_breakblk
0000697A 6600                       		bne.s	@oops
0000697C 6100 0000                   		bsr	Prize_Delete
00006980 6100 0000                   		bsr	blkobj_overwrite
00006984                            		
00006984 6100 0000                  		bsr	blkobj_setcoords
00006988 2940 0024                  		move.l	d0,obj_ram(a4)
0000698C 422C 001F                  		clr.b	obj_subid(a4)
00006990 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00006998                            		
00006998 203C 0000 0000               		move.l	#SndSfx_PUM,d0
0000699E 323C 0004                    		move.w 	#4,d1
000069A2 7401                         		moveq	#1,d2
000069A4 6100 AA96                    		bsr	Audio_Track_play
000069A8                            @oops:
000069A8 7801                         		moveq	#1,d4
000069AA 2E3C 0001 0000               		move.l	#$10000,d7
000069B0 4E75                         		rts
000069B2                            		
000069B2                            ; ----------------------------------
000069B2                            ; BUMP block
000069B2                            ; ----------------------------------
000069B2                            
000069B2                            @bump_1coin:
000069B2 7601                       		moveq	#1,d3
000069B4 6000                       		bra.s	@bump_coinarg
000069B6                            @bump_10coin:
000069B6 760A                       		moveq	#10,d3
000069B8 6000                       		bra.s	@bump_coinarg
000069BA                            
000069BA                            ; ----------------------------------
000069BA                            
000069BA                            @bump_block:
000069BA 7600                       		moveq	#0,d3
000069BC                            @bump_coinarg:
000069BC 6100 0000                  		bsr	blkobj_chkdupl
000069C0 66E6                       		bne.s	@oops
000069C2                            
000069C2 6100 0000                  		bsr	blkobj_overwrite
000069C6 6100 0000                   		bsr	blkobj_setcoords
000069CA 2400                       		move.l	d0,d2
000069CC 2940 0024                  		move.l	d0,obj_ram(a4)
000069D0 197C 0001 001F             		move.b	#1,obj_subid(a4)
000069D6 4A03                       		tst.b	d3
000069D8 6700                       		beq.s	@noexsubid
000069DA 197C 0002 001F             		move.b	#2,obj_subid(a4)
000069E0 0C03 000A                  		cmp.b	#10,d3
000069E4 6600                       		bne.s	@noexsubid
000069E6 197C 0003 001F             		move.b	#3,obj_subid(a4)
000069EC                            @noexsubid:
000069EC                            
000069EC 0C02 000F                  		cmp.b	#$F,d2
000069F0 6700                       		beq.s	@SolidOnly
000069F2                            		
000069F2 D779 FFFF DC02             		add.w	d3,(RAM_P1_Coins)
000069F8 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
00006A00 6D00                         		blt.s	@SolidOnly
00006A02 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
00006A08 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
00006A10                              		
00006A10 203C 0000 0000               		move.l	#SndSfx_OneUp,d0
00006A16 7200                         		moveq 	#0,d1
00006A18 7401                         		moveq	#1,d2
00006A1A 6100 AA20                    		bsr	Audio_Track_play
00006A1E                              		
00006A1E 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00006A26                            		
00006A26 6000 0000                  		bra	@solidblock
00006A2A                            
00006A2A                            @SolidOnly:
00006A2A                            
00006A2A                            
00006A2A 203C 0000 0000               		move.l	#SndSfx_BonkCoin,d0
00006A30 7202                         		moveq 	#2,d1
00006A32                              		
00006A32 0C02 000F                  		cmp.b	#$F,d2
00006A36 6600                       		bne.s	@Alt_Sfx
00006A38 203C 0000 0000               		move.l	#SndSfx_BONK,d0
00006A3E 323C 0003                    		move.w 	#3,d1
00006A42 0C43 000A                    		cmp.w	#10,d3
00006A46 6600                         		bne.s	@Alt_Sfx
00006A48 7201                         		moveq	#1,d1
00006A4A                            @Alt_Sfx:
00006A4A 7401                       		moveq	#1,d2
00006A4C 6100 A9EE                    		bsr	Audio_Track_play
00006A50                              		
00006A50 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00006A58 6000                       		bra.s	@solidblock
00006A5A                            		
00006A5A                            ; ----------------------------------
00006A5A                            
00006A5A                            @bump_1up:
00006A5A 6100 0000                  		bsr	blkobj_chkdupl
00006A5E 6600 FF48                  		bne	@oops
00006A62                            
00006A62 6100 0000                  		bsr	blkobj_overwrite
00006A66 6100 0000                   		bsr	blkobj_setcoords
00006A6A 2400                       		move.l	d0,d2
00006A6C 2940 0024                  		move.l	d0,obj_ram(a4)
00006A70 197C 0004 001F             		move.b	#4,obj_subid(a4)
00006A76 0679 0001 FFFF DC00        		add.w	#1,(RAM_P1_Lives)
00006A7E 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00006A86                            		
00006A86 203C 0000 0000               		move.l	#SndSfx_OneUp,d0
00006A8C 7200                         		moveq 	#0,d1
00006A8E 7401                         		moveq	#1,d2
00006A90 6100 A9AA                    		bsr	Audio_Track_play
00006A94                            		
00006A94                            @solidblock:
00006A94 7801                         		moveq	#1,d4
00006A96 2E3C 0001 0000               		move.l	#$10000,d7
00006A9C 4E75                         		rts
00006A9E                              		
00006A9E                            ; ----------------------------------
00006A9E                            ; A Coin, from top
00006A9E                            ; ----------------------------------
00006A9E                            
00006A9E                            @coin_red:
00006A9E 7801                       		moveq	#1,d4
00006AA0 6000                       		bra.s	@setcoin
00006AA2                            @coin_blue:
00006AA2 7805                       		moveq	#5,d4
00006AA4                            @setcoin:
00006AA4 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
00006AAA 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
00006AB2 6D00                         		blt.s	@dontadd1up
00006AB4 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
00006ABA 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
00006AC2                              		
00006AC2 2800                         		move.l	d0,d4
00006AC4 203C 0000 0000               		move.l	#SndSfx_OneUp,d0
00006ACA 7200                         		moveq 	#0,d1
00006ACC 7401                         		moveq	#1,d2
00006ACE 6100 A96C                    		bsr	Audio_Track_play
00006AD2 2004                         		move.l	d4,d0
00006AD4                              		
00006AD4                            @dontadd1up:
00006AD4                              		
00006AD4 6100 0000                   		bsr	Prize_Delete
00006AD8 6100 E792                  		bsr	Level_HidePrize
00006ADC                              		
00006ADC 203C 0000 0000               		move.l	#SndSfx_COIN,d0
00006AE2 7202                         		moveq 	#2,d1
00006AE4 7401                         		moveq	#1,d2
00006AE6 6100 A954                    		bsr	Audio_Track_play
00006AEA 7800                       		moveq	#0,d4		
00006AEC 4E75                       		rts
00006AEE                            		
00006AEE                            ; ----------------------------------
00006AEE                            ; Normal breakable block
00006AEE                            ; ----------------------------------
00006AEE                            
00006AEE                            @trampoline:
00006AEE 6100 0000                  		bsr	goToTrampolineWhy
00006AF2                            		
00006AF2 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00006AF8 283C 0007 0000             		move.l	#$70000,d4
00006AFE 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
00006B06 6700                       		beq.s	@dontadd
00006B08 283C 0009 0000             		move.l	#$90000,d4
00006B0E                            @dontadd:
00006B0E 2E04                       		move.l	d4,d7
00006B10 4E75                       		rts
00006B12                            		
00006B12                            ; -------------------------------
00006B12                            ; check for active object
00006B12                            ; d2 - sub-id
00006B12                            ; -------------------------------
00006B12                            
00006B12                            @chk_breakblk:
00006B12 7401                       		moveq	#1,d2
00006B14 7800                       		moveq	#0,d4
00006B16 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00006B1C 264C                       		movea.l	a4,a3
00006B1E 7207                       		moveq 	#8-1,d1
00006B20                            @checkhdnbmp:
00006B20 0CAB 0000 0000 0000        		cmp.l	#obj_prize,obj_code(a3)
00006B28 6600                       		bne.s	@notprz
00006B2A B42B 001F                  		cmp.b	obj_subid(a3),d2
00006B2E 6600                       		bne.s	@notprz
00006B30 7801                       		moveq	#1,d4
00006B32 7200                       		moveq	#0,d1
00006B34                            @notprz:
00006B34 D6FC 0064                  		adda 	#sizeof_obj,a3
00006B38 51C9 FFE6                  		dbf	d1,@checkhdnbmp
00006B3C 4A44                       		tst.w	d4
00006B3E 4E75                       		rts
00006B40                            
00006B40                            ; -------------------------------
00006B40                            ; check for duplicate object
00006B40                            ; using obj_ram
00006B40                            ; -------------------------------
00006B40                            
00006B40                            blkobj_chkdupl:
00006B40 7800                       		moveq	#0,d4
00006B42 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00006B48 7207                       		moveq 	#8-1,d1
00006B4A                            @chksame234:
00006B4A B0AC 0024                   		cmp.l	obj_ram(a4),d0
00006B4E 6600                        		bne.s	@notequl
00006B50 0644 0001                   		add.w	#1,d4
00006B54                            @notequl:
00006B54 D8FC 0064                   		adda 	#sizeof_obj,a4
00006B58 51C9 FFF0                   		dbf	d1,@chksame234
00006B5C 4A44                        		tst.w	d4
00006B5E 4E75                        		rts
00006B60                             		
00006B60                            ; -------------------------------
00006B60                            ; Overwrite prize object if its
00006B60                            ; the same
00006B60                            ; -------------------------------
00006B60                            
00006B60                            blkobj_overwrite:
00006B60 7800                       		moveq	#0,d4
00006B62 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00006B68 7207                       		moveq 	#8-1,d1
00006B6A                            @chksame23:
00006B6A B0AC 0024                   		cmp.l	obj_ram(a4),d0
00006B6E 6600 0000                   		bne	@notsame
00006B72                             		
00006B72 264C                        		movea.l	a4,a3
00006B74 343C 0063                   		move.w	#sizeof_obj-1,d2
00006B78                            @delete:
00006B78 421B                        		clr.b	(a3)+
00006B7A 51CA FFFC                   		dbf	d2,@delete
00006B7E                            @notsame:
00006B7E 0CAC 0000 0000 0000        		cmp.l	#obj_prize,obj_code(a4)
00006B86 6600                       		bne.s	@found
00006B88 D8FC 0064                   		adda 	#sizeof_obj,a4
00006B8C 51C9 FFDC                   		dbf	d1,@chksame23
00006B90                            @found:
00006B90 4E75                       		rts
00006B92                            		
00006B92                            ; ----------------------------------
00006B92                            ; obj_coords
00006B92                            ; ----------------------------------
00006B92                            
00006B92                            blkobj_setcoords:
00006B92 2800                       		move.l	d0,d4
00006B94 E88C                       		lsr.l	#4,d4
00006B96 0244 FFF0                  		and.w	#$FFF0,d4
00006B9A 0644 0008                   		add.w	#8,d4
00006B9E 3944 000C                   		move.w	d4,obj_y(a4)
00006BA2 E08C                       		lsr.l	#8,d4
00006BA4 E88C                       		lsr.l	#4,d4
00006BA6 0244 FFF0                  		and.w	#$FFF0,d4
00006BAA 0644 0008                   		add.w	#8,d4
00006BAE 3944 0008                   		move.w	d4,obj_x(a4)
00006BB2                             		
00006BB2 206D 0008                  		movea.l	lvl_przblocks(a5),a0
00006BB6 3800                       		move.w	d0,d4
00006BB8 0244 00FF                  		and.w	#$FF,d4
00006BBC E74C                       		lsl.w	#3,d4
00006BBE 3830 4000                  		move.w	(a0,d4.w),d4
00006BC2 3944 0028                  		move.w	d4,obj_ram+4(a4)
00006BC6 4E75                        		rts
00006BC8                             	
00006BC8                            goToTrampolineWhy:
00006BC8 6100 FF76                  		bsr	blkobj_chkdupl
00006BCC 6600 0000                  		bne	@oopstr
00006BD0                            
00006BD0 6100 FF8E                  		bsr	blkobj_overwrite
00006BD4 6100 FFBC                   		bsr	blkobj_setcoords
00006BD8 2940 0024                  		move.l	d0,obj_ram(a4)
00006BDC 197C 0005 001F             		move.b	#5,obj_subid(a4)
00006BE2 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00006BEA 6100 E680                  		bsr	Level_HidePrize
00006BEE                            @oopstr:
00006BEE 7801                       		moveq	#1,d4
00006BF0 4E75                       		rts
00006BF2                            		
00006BF2                            ; ----------------------------------
00006BF2                            ; block subs
00006BF2                            ; 
00006BF2                            ; d0 - XXXYYYID
00006BF2                            ; a5 - RAM_LvlPlanes
00006BF2                            ; ----------------------------------
00006BF2                            
00006BF2                            Prize_Locate:
00006BF2 266D 0018                  		movea.l	lvl_prizes(a5),a3
00006BF6 2800                       		move.l	d0,d4
00006BF8 E08C                       		lsr.l	#8,d4
00006BFA 0284 0000 0FFF             		and.l	#$FFF,d4
00006C00 C8ED 0030                  		mulu.w	lvl_size_x(a5),d4
00006C04 D6C4                       		adda	d4,a3
00006C06 2800                       		move.l	d0,d4
00006C08 4844                       		swap	d4
00006C0A E84C                       		lsr.w	#4,d4
00006C0C 0284 0000 0FFF             		and.l	#$FFF,d4
00006C12 D6C4                       		adda	d4,a3
00006C14 4E75                       		rts
00006C16                            		
00006C16                            Prize_Delete:
00006C16 61DA                       		bsr.s	Prize_Locate
00006C18 4213                       		clr.b	(a3)
00006C1A 4E75                       		rts
00006C1C                            		
00006C1C                            ; **********************************************
00006C1C                            ; Object action
00006C1C                            ; **********************************************
00006C1C                            
00006C1C                            ; ---------------------------
00006C1C                            ; Object action: mark 
00006C1C                            ; stomped by player
00006C1C                            ; 
00006C1C                            ; Input:
00006C1C                            ; d0 | LONG - Mappings
00006C1C                            ; d1 | WORD - VRAM
00006C1C                            ; d2 | BYTE - Frame
00006C1C                            ; a4 | Object who touched it
00006C1C                            ; ---------------------------
00006C1C                            
00006C1C                            objAction_SetStomp:
00006C1C 422E 001D                  		clr.b	obj_index(a6)		; Clear index
00006C20 422E 001F                  		clr.b	obj_subid(a6)		; Subaction: Stomp
00006C24 2D40 0024                  		move.l	d0,obj_ram(a6)		; Last frame
00006C28 3D41 0028                  		move.w	d1,obj_ram+4(a6)
00006C2C 1D42 002A                  		move.b	d2,obj_ram+6(a6)
00006C30 2D43 002C                  		move.l	d3,obj_ram+8(a6)
00006C34 2D7C 0000 0000 0000        		move.l	#obj_actionscript,obj_code(a6)
00006C3C 4E75                       		rts
00006C3E                            		
00006C3E                            ; =================================================================
00006C3E                            ; --------------------------------------------
00006C3E                            ; Includes
00006C3E                            ; --------------------------------------------
00006C3E                            
00006C3E                              		include	"engine/modes/level/data/objects/player/code.asm"
00006C3E                            ; =================================================================
00006C3E                            ; Object
00006C3E                            ; 
00006C3E                            ; Player
00006C3E                            ; =================================================================
00006C3E                            
00006C3E                            ; =================================================================
00006C3E                            ; ------------------------------------------------
00006C3E                            ; Variables
00006C3E                            ; ------------------------------------------------
00006C3E                            
00006C3E =00006780                  varPlyrVRAM	equ	$6000|$780
00006C3E =00000140                  varScrlHor	equ	320
00006C3E =0000000B                  varJumpTimer	equ	11
00006C3E =00000060                  varHurtTimer	equ	96
00006C3E                            
00006C3E =00000002                  varPlyAniJump	equ	2
00006C3E =00000002                  varPlyrMdDead	equ	2
00006C3E                            
00006C3E =00000005                  bitPlyrClimb	equ	5
00006C3E =00000006                  bitPlyrCancelY	equ	6
00006C3E =00000007                  bitPlyrBusy	equ	7
00006C3E                            
00006C3E                            ; =================================================================
00006C3E                            ; ------------------------------------------------
00006C3E                            ; RAM
00006C3E                            ; ------------------------------------------------
00006C3E                            
00006C3E                            		rsset obj_ram
00006C3E =00000024                  plyr_lvltrgt	rs.w	1
00006C3E =00000026                  plyr_jumptmr	rs.w	1
00006C3E =00000028                  plyr_hits	rs.w	1
00006C3E =0000002A                  plyr_hittime	rs.w	1
00006C3E =0000002C                  plyr_spccol	rs.b	1		; %00000LCR
00006C3E =0000002D                  plyr_status	rs.b	1		; %000000FB
00006C3E                            
00006C3E                            ; =================================================================
00006C3E                            ; ------------------------------------------------
00006C3E                            ; Code start
00006C3E                            ; ------------------------------------------------
00006C3E                            
00006C3E                            Obj_Player:
00006C3E 7000                        		moveq	#0,d0
00006C40 102E 001D                   		move.b	obj_index(a6),d0
00006C44 D040                        		add.w	d0,d0
00006C46 323B 0000                   		move.w	@Index(pc,d0.w),d1
00006C4A 4EBB 1000                   		jsr	@Index(pc,d1.w)
00006C4E                             		
00006C4E                             		;Render
00006C4E 7000                        		moveq	#0,d0
00006C50 303C 6780                      		move.w	#varPlyrVRAM,d0
00006C54 0C2E 0002 001D             		cmp.b	#varPlyrMdDead,obj_index(a6)
00006C5A 6600                       		bne.s	@dontforce
00006C5C 0040 8000                  		or.w	#$8000,d0
00006C60                            @dontforce:
00006C60 4840                           		swap	d0
00006C62 102E 0020                     		move.b	obj_frame(a6),d0
00006C66 223C 0000 0000              		move.l	#ani_player,d1
00006C6C 6100 F020                  		bsr	Object_Animate
00006C70                            		
00006C70 082E 0000 002B             		btst	#0,plyr_hittime+1(a6)
00006C76 6600                       		bne.s	@return
00006C78                            		
00006C78 102E 0020                     		move.b	obj_frame(a6),d0	
00006C7C 223C 0000 0000              		move.l	#map_player,d1
00006C82 6100 EC5E                    		bsr	Object_Show
00006C86                             		
00006C86 203C 6780 0000                		move.l	#(varPlyrVRAM<<16),d0
00006C8C 102E 0020                     		move.b	obj_frame(a6),d0
00006C90 223C 0000 0000             		move.l	#dplc_player,d1
00006C96 243C 0000 0000             		move.l	#art_player,d2
00006C9C 6000 EBEA                  		bra	Object_DPLC
00006CA0                            
00006CA0                            @return:
00006CA0 4E75                       		rts
00006CA2                            		
00006CA2                            ; ------------------------------------------------
00006CA2                            
00006CA2                            @Index:
00006CA2 0000                       		dc.w ObjPlyr_Init-@Index
00006CA4 0000                       		dc.w ObjPlyr_Main-@Index
00006CA6 0000                       		dc.w ObjPlyr_Die-@Index
00006CA8                            		even
00006CA8                            
00006CA8                            ; =================================================================
00006CA8                            ; ------------------------------------------------
00006CA8                            ; Index $00: Init
00006CA8                            ; ------------------------------------------------
00006CA8                            
00006CA8                            ObjPlyr_Init:
00006CA8 062E 0001 001D             		add.b	#1,obj_index(a6)
00006CAE 2D7C 0101 0202 0004        		move.l	#$01010202,obj_size(a6)
00006CB6                            ; 		bset	#bitobj_flipV,obj_status(a6)
00006CB6                            		
00006CB6                            ; 		tst.w	(RAM_P1_Hits)
00006CB6                            ; 		beq.s	@iszerohits
00006CB6                            ; 		bpl.s	@dontresthit
00006CB6                            ; @iszerohits:
00006CB6 33FC 0003 FFFF DC04        		move.w	#3,(RAM_P1_Hits)
00006CBE                            @dontresthit:
00006CBE 426E 002A                  		clr.w	plyr_hittime(a6)
00006CC2 08EE 0006 001E              		bset	#bitobj_hit,obj_status(a6)
00006CC8                             		
00006CC8                            ; =================================================================
00006CC8                            ; ------------------------------------------------
00006CC8                            ; Index $01: Main
00006CC8                            ; ------------------------------------------------
00006CC8                            
00006CC8                            ObjPlyr_Main:
00006CC8                            ; 		btst	#bitJoyA,(RAM_Control_2+OnPress)
00006CC8                            ; 		beq.s	@NotDbg
00006CC8                            ; 		clr.l	obj_x(a6)
00006CC8                            ; 		clr.l	obj_y(a6)
00006CC8                            ; 		clr.l	obj_x_spd(a6)
00006CC8                            ; 		clr.l	obj_y_spd(a6)
00006CC8                            ; 		lea	(RAM_LvlPlanes),a5
00006CC8                            ; 		clr.w	lvl_x(a5)
00006CC8                            ; 		clr.w	lvl_y(a5)
00006CC8                            ; 		movem.l	a6,-(sp)
00006CC8                            ; 		bsr	Level_Draw
00006CC8                            ; 		movem.l	(sp)+,a6
00006CC8                            ; @NotDbg:
00006CC8                            ; 		btst	#bitJoyMode,(RAM_Control_1+ExOnHold)
00006CC8                            ; 		beq.s	@NotWnd
00006CC8                            ; 		bra	PlyrDebugMove
00006CC8                            ; @NotWnd:
00006CC8                            
00006CC8                            ; 		btst	#bitJoyX,(RAM_Control_1+ExOnPress)
00006CC8                            ; 		beq.s	@NotWnd3
00006CC8                            ; 		bchg	#3,(RAM_VidRegs+$C)
00006CC8                            ; 		bchg	#bitobj_flipH,obj_status(a6)
00006CC8                            ; 		bsr	Video_Update
00006CC8                            ; @NotWnd3:
00006CC8                            ; 		btst	#bitJoyY,(RAM_Control_1+ExOnPress)
00006CC8                            ; 		beq.s	@NotWnd2
00006CC8                            ; 		bchg	#bitobj_flipV,obj_status(a6)
00006CC8                            ; @NotWnd2:
00006CC8                            
00006CC8                            ; ----------------------------------
00006CC8                            ; Falling frame
00006CC8                            ; ----------------------------------
00006CC8                            
00006CC8                            ; 		btst	#bitobj_air,obj_status(a6)
00006CC8                            ; 		beq.s	@idleanim
00006CC8                            ; 		tst.l	obj_y_spd(a6)
00006CC8                            ; 		beq.s	@idleanim
00006CC8                            ; 		bmi.s	@idleanim
00006CC8                            ; 		move.b	#3,obj_anim_id(a6)
00006CC8                            ; @idleanim:
00006CC8                            
00006CC8 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006CCE 302D 0032                  		move.w	lvl_size_y(a5),d0		; Bottomless pit
00006CD2 E948                       		lsl.w	#4,d0
00006CD4 322E 000C                  		move.w	obj_y(a6),d1
00006CD8 7400                       		moveq	#0,d2
00006CDA 142E 0006                  		move.b	obj_size+2(a6),d2
00006CDE E74A                       		lsl.w	#3,d2
00006CE0 9242                       		sub.w	d2,d1
00006CE2 B240                       		cmp.w	d0,d1
00006CE4 6E00 0000                  		bgt	PlyrLevelReset
00006CE8                            		
00006CE8 4A6E 002A                  		tst.w	plyr_hittime(a6)
00006CEC 6600                       		bne.s	@counting
00006CEE 082E 0003 001E             		btst	#bitobj_hurt,obj_status(a6)
00006CF4 6700                       		beq.s	@no_action
00006CF6                            		
00006CF6 4A6E 002A                  		tst.w	plyr_hittime(a6)
00006CFA 6600                       		bne.s	@ignore
00006CFC 0479 0001 FFFF DC04        		sub.w	#1,(RAM_P1_Hits)
00006D04 3D7C 0060 002A             		move.w	#varHurtTimer,plyr_hittime(a6)
00006D0A                            		
00006D0A 4A79 FFFF DC04             		tst.w	(RAM_P1_Hits)
00006D10 6600                       		bne.s	@counting
00006D12 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00006D18 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
00006D1E 1D7C 0002 001D             		move.b	#2,obj_index(a6)		; Mode $02: dead
00006D24 1D7C 0005 001A             		move.b	#5,obj_anim_id(a6)		; Animation $05
00006D2A 2D7C 0001 0000 0010        		move.l	#$10000,obj_x_spd(a6)
00006D32 2D7C FFFC 0000 0014        		move.l	#-$40000,obj_y_spd(a6)
00006D3A                            @ignore:
00006D3A 4E75                       		rts
00006D3C                            		
00006D3C                            @counting:
00006D3C 046E 0001 002A             		sub.w	#1,plyr_hittime(a6)
00006D42 6600                       		bne.s	@no_action
00006D44 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
00006D4A                            @no_action:
00006D4A 6000 0000                  		bra	PlyrPhysics
00006D4E                            		
00006D4E                            ; =================================================================
00006D4E                            ; ------------------------------------------------
00006D4E                            ; Index $01: Main
00006D4E                            ; ------------------------------------------------
00006D4E                            
00006D4E                            ObjPlyr_Die:
00006D4E 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006D54 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00006D58 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00006D5C 0687 0000 4000             		add.l	#$4000,d7
00006D62                            		
00006D62 DDAE 0008                  		add.l	d6,obj_x(a6)
00006D66 DFAE 000C                  		add.l	d7,obj_y(a6)
00006D6A                            		
00006D6A 302D 0032                  		move.w	lvl_size_y(a5),d0
00006D6E E948                       		lsl.w	#4,d0
00006D70 322E 000C                  		move.w	obj_y(a6),d1
00006D74 7400                       		moveq	#0,d2
00006D76 142E 0006                  		move.b	obj_size+2(a6),d2
00006D7A E74A                       		lsl.w	#3,d2
00006D7C 9242                       		sub.w	d2,d1
00006D7E B240                       		cmp.w	d0,d1
00006D80 6E00                       		bgt.s	PlyrLevelReset
00006D82                            		
00006D82 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00006D86 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00006D8A 4E75                       		rts
00006D8C                            		
00006D8C                            ; =================================================================
00006D8C                            ; ----------------------------------
00006D8C                            ; Level reset
00006D8C                            ; ----------------------------------
00006D8C                            
00006D8C                            PlyrLevelReset:
00006D8C 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
00006D94                            		
00006D94 0479 0001 FFFF DC00        		sub.w	#1,(RAM_P1_Lives)
00006D9C 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
00006DA2 6600                       		bne.s	@ignore
00006DA4                            		;GAME OVER stuff goes here
00006DA4 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
00006DAA                            		
00006DAA                            @ignore:
00006DAA 4E75                       		rts
00006DAC                            		
00006DAC                            ; ----------------------------------
00006DAC                            
00006DAC                            PlyrDebugMove:
00006DAC 08AE 0005 002D             		bclr	#bitPlyrClimb,plyr_status(a6)
00006DB2 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
00006DB8 422E 0022                  		clr.b	obj_col(a6)
00006DBC                            		
00006DBC 0839 0003 FFFF DE83        		btst	#bitJoyRight,(RAM_Control_1+OnHold)
00006DC4 6700                       		beq.s	@DNotRight
00006DC6 06AE 0005 0000 0008        		add.l	#$50000,obj_x(a6)
00006DCE 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
00006DD4                            @DNotRight:
00006DD4 0839 0002 FFFF DE83        		btst	#bitJoyLeft,(RAM_Control_1+OnHold)
00006DDC 6700                       		beq.s	@DNotLeft
00006DDE 04AE 0005 0000 0008        		sub.l	#$50000,obj_x(a6)
00006DE6 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
00006DEC                            @DNotLeft:
00006DEC 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
00006DF4 6700                       		beq.s	@DNotDown
00006DF6 06AE 0005 0000 000C        		add.l	#$50000,obj_y(a6)
00006DFE                            @DNotDown:
00006DFE 0839 0000 FFFF DE83        		btst	#bitJoyUp,(RAM_Control_1+OnHold)
00006E06 6700                       		beq.s	@DNotUp
00006E08 04AE 0005 0000 000C        		sub.l	#$50000,obj_y(a6)
00006E10                            @DNotUp:
00006E10 2D7C 0000 0001 0010        		move.l	#1,obj_x_spd(a6)		;Temporal
00006E18 2D7C 0000 0001 0014        		move.l	#1,obj_y_spd(a6)
00006E20                            		
00006E20 6000 0000                    		bra	Plyr_LvlCamera
00006E24                              		
00006E24                            ; ----------------------------------
00006E24                            ; Player physics
00006E24                            ; ----------------------------------
00006E24                            
00006E24                            PlyrPhysics:
00006E24 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00006E28 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00006E2C                            
00006E2C                            ; ------------------------
00006E2C                            ; Animation ID
00006E2C                            ; ------------------------
00006E2C                            
00006E2C 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00006E32 6600                       		bne.s	@walking
00006E34 082E 0002 001E             		btst	#bitobj_air,obj_status(a6)
00006E3A 6600                       		bne.s	@walking
00006E3C                            
00006E3C 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
00006E42 4A86                       		tst.l	d6
00006E44 6600                       		bne.s	@walking
00006E46 422E 001A                  		clr.b	obj_anim_id(a6)
00006E4A                            @walking:
00006E4A                            
00006E4A                            ; ***************
00006E4A                            ; X Speed stuff
00006E4A                            ; ***************
00006E4A                            
00006E4A 6100 0000                  		bsr	@Player_Friction
00006E4E 6100 0000                  		bsr	@Player_Walk
00006E52 DDAE 0008                  		add.l	d6,obj_x(a6)			;X + X Speed
00006E56 6100 0000                  		bsr	PlyrColRead_Wall
00006E5A                            		
00006E5A                            ; ***************
00006E5A                            ; Y Speed stuff
00006E5A                            ; ***************
00006E5A                            ; 
00006E5A 6100 0000                  		bsr	@Player_Jump
00006E5E DFAE 000C                  		add.l	d7,obj_y(a6)			;Y + Y Speed
00006E62 6100 0000                    		bsr	PlyrColRead_Ceiling
00006E66 6100 0000                  		bsr	PlyrColRead_Floor
00006E6A                            
00006E6A                            ; ***************
00006E6A                            ; Save them
00006E6A                            ; ***************
00006E6A                            
00006E6A 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00006E6E 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00006E72                            		
00006E72 6000 0000                   		bra	Plyr_LvlCamera
00006E76                            	
00006E76                            ; =================================================================
00006E76                            ; ------------------------------------------------
00006E76                            ; Subs
00006E76                            ; ------------------------------------------------
00006E76                            
00006E76                            ; **********************************
00006E76                            ; Player Walk
00006E76                            ; **********************************
00006E76                            
00006E76                            @Player_Walk:
00006E76 2806                       		move.l	d6,d4
00006E78 0839 0003 FFFF DE83        		btst	#bitJoyRight,(RAM_Control_1+OnHold)
00006E80 6700                       		beq.s	@NotRight
00006E82 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00006E88 6600                       		bne.s	@NotMuchRight
00006E8A 7000                       		moveq	#0,d0
00006E8C 3039 FFFF BC34             		move.w	(RAM_LvlPlanes+lvl_maxcam_x),d0
00006E92 E948                       		lsl.w	#4,d0
00006E94 322E 0008                  		move.w	obj_x(a6),d1
00006E98 B240                       		cmp.w	d0,d1
00006E9A 6E00                       		bgt.s	@NotRight
00006E9C                            	
00006E9C                            ; 		tst.l	d4
00006E9C                            ; 		bpl.s	@NotRunningR
00006E9C 203C 0001 E000             		move.l	#$1E000,d0
00006EA2 0839 0004 FFFF DE83         		btst	#bitJoyB,(RAM_Control_1+OnHold)
00006EAA 6700                        		beq.s	@NotRunningR
00006EAC 203C 0002 8000              		move.l	#$28000,d0
00006EB2                            @NotRunningR:
00006EB2                            
00006EB2 0686 0000 4800             		add.l	#$4800,d6
00006EB8 BC80                       		cmp.l	d0,d6
00006EBA 6D00                       		blt.s	@NotMuchRight
00006EBC 2C00                       		move.l	d0,d6
00006EBE                            @NotMuchRight:
00006EBE 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
00006EC4                            
00006EC4                            @NotRight:
00006EC4 0839 0002 FFFF DE83        		btst	#bitJoyLeft,(RAM_Control_1+OnHold)
00006ECC 6700                       		beq.s	@NotLeft
00006ECE 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00006ED4 6600                       		bne.s	@NotMuchLeft
00006ED6 4AAE 0008                  		tst.l	obj_x(a6)
00006EDA 6700                       		beq.s	@NotLeft
00006EDC 6B00                       		bmi.s	@NotLeft
00006EDE                            		
00006EDE                            ; 		tst.l	d4
00006EDE                            ; 		bmi.s	@NotRunningL
00006EDE 203C FFFE 0000             		move.l	#-$20000,d0
00006EE4 0839 0004 FFFF DE83         		btst	#bitJoyB,(RAM_Control_1+OnHold)
00006EEC 6700                        		beq.s	@NotRunningL
00006EEE 203C FFFD 0000              		move.l	#-$30000,d0
00006EF4                            @NotRunningL:
00006EF4                            
00006EF4                            		
00006EF4 0486 0000 4800             		sub.l	#$4800,d6
00006EFA BC80                       		cmp.l	d0,d6
00006EFC 6E00                       		bgt.s	@NotMuchLeft
00006EFE 2C00                       		move.l	d0,d6
00006F00                            @NotMuchLeft:
00006F00 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
00006F06                            @NotLeft:		
00006F06 4E75                       		rts
00006F08                            		
00006F08                            ; **********************************
00006F08                            ; Player Friction
00006F08                            ; **********************************
00006F08                            
00006F08                            @Player_Friction:
00006F08 283C 0000 2400             		move.l	#$2400,d4			;Friction
00006F0E 4A86                       		tst.l	d6
00006F10 6700                       		beq.s	@FineSpeed
00006F12 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00006F18 6600                       		bne.s	@Left
00006F1A 9C84                       		sub.l	d4,d6
00006F1C 6A00                       		bpl.s	@FineSpeed
00006F1E 4286                       		clr.l	d6
00006F20 4E75                       		rts
00006F22                            @Left:
00006F22 DC84                       		add.l	d4,d6
00006F24 6B00                       		bmi.s	@FineSpeed
00006F26                            		
00006F26                            @ignoreR:
00006F26 4286                       		clr.l	d6
00006F28                            @FineSpeed:	
00006F28 4E75                       		rts
00006F2A                            
00006F2A                            ; **********************************
00006F2A                            ; Player jump
00006F2A                            ; **********************************
00006F2A                            
00006F2A                            @Player_Jump:
00006F2A 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00006F30 6600                       		bne.s	@JumpFromLadder
00006F32 082E 0006 002D             		btst	#bitPlyrCancelY,plyr_status(a6)
00006F38 6600                       		bne.s	@JumpFromLadder
00006F3A                            		
00006F3A 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
00006F42 6700 0000                  		beq	@IsFalling
00006F46                            		
00006F46 0C6E 000B 0026              		cmp.w	#varJumpTimer,plyr_jumptmr(a6)
00006F4C 6600                        		bne.s	@onair
00006F4E 082E 0004 0022               		btst	#bitcol_obj,obj_col(a6)
00006F54 6600                           		bne.s	@onair
00006F56 082E 0000 0022               		btst	#bitcol_floor,obj_col(a6)
00006F5C 6700                           		beq.s	@IsFalling
00006F5E                            @onair:
00006F5E                            
00006F5E 046E 0001 0026             		sub.w	#1,plyr_jumptmr(a6)
00006F64 6B00                       		bmi.s	@IsFalling
00006F66                            
00006F66 082E 0002 001E              		btst	#bitobj_air,obj_status(a6)
00006F6C 6600                        		bne.s	@onair2
00006F6E                            
00006F6E 1D7C 0002 001A              		move.b	#varPlyAniJump,obj_anim_id(a6)
00006F74 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
00006F7A 08AE 0000 0022                  		bclr	#bitcol_floor,obj_col(a6)
00006F80 08AE 0004 0022                  		bclr	#bitcol_obj,obj_col(a6)
00006F86 2E3C FFFB E000                		move.l	#-$42000,d7
00006F8C 2006                          		move.l	d6,d0
00006F8E E480                          		asr.l	#2,d0
00006F90 4A80                          		tst.l	d0
00006F92 6B00                          		bmi.s	@dontnegx
00006F94 4480                          		neg.l	d0
00006F96                            @dontnegx:
00006F96 DE80                       		add.l	d0,d7
00006F98                            		
00006F98 203C 0000 0000               		move.l	#SndSfx_PlyrJump,d0
00006F9E 7201                         		moveq 	#1,d1
00006FA0 7401                         		moveq	#1,d2
00006FA2 6100 A498                    		bsr	Audio_Track_play
00006FA6                            @onair2:
00006FA6 4E75                          		rts
00006FA8                              
00006FA8                            ; ----------------------------------
00006FA8                            
00006FA8                            @JumpFromLadder:
00006FA8 0839 0005 FFFF DE85        		btst	#bitJoyC,(RAM_Control_1+OnPress)
00006FB0 6700 0000                  		beq	@IsFalling
00006FB4                            		
00006FB4 08AE 0005 002D             		bclr	#bitPlyrClimb,plyr_status(a6)
00006FBA 08EE 0002 001E              		bset	#bitobj_air,obj_status(a6)
00006FC0 1D7C 0002 001A              		move.b	#2,obj_anim_id(a6)
00006FC6 4286                          		clr.l	d6
00006FC8 4287                          		clr.l	d7
00006FCA 4E75                        		rts
00006FCC                             		
00006FCC                            ; ----------------------------------
00006FCC                            
00006FCC                            @IsFalling:
00006FCC 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00006FD2 6600                       		bne.s	@low_fall
00006FD4 082E 0000 0022                		btst	#bitcol_floor,obj_col(a6)
00006FDA 6600                           		bne.s	@low_fall
00006FDC                            
00006FDC 0687 0000 4800              		add.l	#$4800,d7
00006FE2 0C87 0010 0000             		cmp.l	#$100000,d7
00006FE8 6D00                       		blt.s	@low_fall
00006FEA 2E3C 0010 0000             		move.l	#$100000,d7
00006FF0                            @low_fall:
00006FF0 4E75                       		rts
00006FF2                            		
00006FF2                            ; **********************************
00006FF2                            ; Object to Level layout collision
00006FF2                            ; **********************************
00006FF2                            
00006FF2                            ; ----------------------------------
00006FF2                            ; floor collision
00006FF2                            ; ----------------------------------
00006FF2                            
00006FF2                            PlyrColRead_Floor:
00006FF2 08AE 0000 0022              		bclr	#bitcol_floor,obj_col(a6)
00006FF8 08AE 0002 001E              		bclr	#bitobj_air,obj_status(a6)
00006FFE                             		
00006FFE 082E 0004 0022              		btst	#bitcol_obj,obj_col(a6)
00007004 6600                        		bne.s	@dont
00007006 08EE 0002 001E              		bset	#bitobj_air,obj_status(a6)
0000700C                            @dont:
0000700C 08AE 0004 0022              		bclr	#bitcol_obj,obj_col(a6)
00007012                             		
00007012 4A87                       		tst.l	d7
00007014 6B00                       		bmi.s	@going_up
00007016                            
00007016                            ; 		bsr	object_FindPrz_Floor		;TODO: no sirve en prizes
00007016                            ;  		btst	#7,d0
00007016                            ;  		beq.s	@cntrnrml
00007016                            ; 		clr.b	d0
00007016                            ; @cntrnrml:
00007016                            ; 		tst.b	d0
00007016                            ; 		bne	@przfloor_center
00007016                            
00007016 6100 EF32                   		bsr 	object_FindPrz_FloorSides
0000701A                             		
0000701A 4A00                       		tst.b	d0
0000701C 6600 0000                  		bne	@przfloor_right
00007020 2001                       		move.l	d1,d0
00007022 4A00                       		tst.b	d0
00007024 6600 0000                  		bne	@przfloor_left
00007028                            
00007028 6100 ED82                  		bsr	object_FindCol_Floor
0000702C 6100 0000                  		bsr	@center_special
00007030 4A00                       		tst.b	d0
00007032 6600                       		bne.s	@found_center
00007034 6100 EF20                   		bsr 	object_FindCol_FloorSides
00007038 6100 0000                  		bsr	@right_special
0000703C 4A00                       		tst.b	d0
0000703E 6600 0000                  		bne	@found_sides
00007042 2001                       		move.l	d1,d0
00007044 6100 0000                  		bsr	@left_special
00007048 4A00                       		tst.b	d0
0000704A 6600 0000                  		bne	@found_sides
0000704E                            @going_up:
0000704E                            
0000704E 4E75                       		rts
00007050                            		
00007050                            ; ----------------------------------
00007050                            
00007050                            @found_center:
00007050 0C00 0001                  		cmp.b	#1,d0
00007054 6700 0000                  		beq	@floorsolid
00007058                            
00007058 6000                       		bra.s	@SlopeCenter
0000705A                            		
0000705A                            ; ----------------------------------
0000705A                            
0000705A                            @found_sides:
0000705A 0C00 0001                  		cmp.b	#1,d0
0000705E 6700 0000                  		beq	@floorsolid
00007062 4E75                       		rts
00007064                            
00007064                            ; ----------------------------------
00007064                            
00007064                            @SlopeCenter:
00007064 4A87                          		tst.l	d7
00007066 6B00 0000                     		bmi	@NoCol
0000706A                               				
0000706A 222E 000C                     		move.l	obj_y(a6),d1
0000706E 2401                          		move.l	d1,d2
00007070 47F9 0000 5716               		lea	(col_SlopeData),a3
00007076 0240 00FF                    		and.w	#$FF,d0
0000707A 3200                         		move.w	d0,d1
0000707C E949                         		lsl.w	#4,d1
0000707E D6C1                         		adda	d1,a3
00007080 202E 0008                   		move.l	obj_x(a6),d0
00007084 4840                        		swap	d0
00007086 0240 000F                   		and.w	#$F,d0
0000708A 1033 0000                   		move.b	(a3,d0.w),d0
0000708E 0240 000F                      		and.w	#$F,d0
00007092 0281 FFF0 0000                 		and.l	#$FFF00000,d1
00007098 4840                         		swap	d0
0000709A 0280 FFFF 0000               		and.l	#$FFFF0000,d0
000070A0 D280                        		add.l	d0,d1
000070A2                             		
000070A2                             		;TODO: no recuerdo pa que
000070A2                             		;era este fix
000070A2                             		; tambien ver que pedo
000070A2                             		; porque dominou no
000070A2                             		; se queda pegado a los slopes
000070A2                             		
000070A2                            ;  		move.l	obj_x_spd(a6),d0
000070A2                            ;  		btst	#bitobj_flipH,obj_status(a6)
000070A2                            ;  		beq.s	@right
000070A2                            ;  		neg.l	d0
000070A2                            ; @right:
000070A2                            ; 		cmp.l	#$20000,d0
000070A2                            ; 		bge.s	@dontchk
000070A2 082E 0002 001E               		btst	#bitobj_air,obj_status(a6)
000070A8 6700                         		beq.s	@dontchk
000070AA B481                         		cmp.l	d1,d2
000070AC 6D00                         		blt.s	@NoCol
000070AE                            @dontchk:
000070AE 2E3C 0005 0000              		move.l	#$50000,d7
000070B4 2D41 000C                    		move.l	d1,obj_y(a6)
000070B8 6100 0000                     		bsr	@objFloorFlags
000070BC                            @NoCol:
000070BC 4E75                       		rts
000070BE                            		
000070BE                            ; ----------------------------------
000070BE                            ; Event block: on floor
000070BE                            ; ----------------------------------
000070BE                            
000070BE                            @center_special:
000070BE 0800 0006                  		btst	#6,d0
000070C2 6700                       		beq.s	@return
000070C4 6100 0000                  		bsr	plyrColEntry
000070C8 3814                       		move.w	(a4),d4
000070CA 6000 0000                  		bra	plyrColGo
000070CE                            		
000070CE                            @left_special:
000070CE 0800 0006                  		btst	#6,d0
000070D2 6700                       		beq.s	@return
000070D4 6100 0000                  		bsr	plyrColEntry
000070D8 382C 0002                  		move.w	2(a4),d4
000070DC 6000 0000                  		bra	plyrColGo
000070E0                            		
000070E0                            @right_special:
000070E0 0800 0006                  		btst	#6,d0
000070E4 6700                       		beq.s	@return
000070E6 6100 0000                  		bsr	plyrColEntry
000070EA 382C 0004                  		move.w	4(a4),d4
000070EE 6000 0000                  		bra	plyrColGo
000070F2                            @return:
000070F2 4E75                       		rts
000070F4                            
000070F4                            ; ----------------------------------
000070F4                            ; Prizes on floor
000070F4                            ; ----------------------------------
000070F4                            
000070F4                            @przfloor_center:
000070F4                            @przfloor_left:
000070F4                            @przfloor_right:
000070F4 7801                       		moveq	#1,d4
000070F6                            		
000070F6 0C00 0020                  		cmp.b	#$20,d0
000070FA 6700                       		beq.s	@trampoline
000070FC                            		
000070FC 0C00 0040                  		cmp.b	#$40,d0		;> $40?
00007100 6D00                       		blt.s	@a_coin
00007102 0200 003F                  		and.b	#$3F,d0
00007106 7801                       		moveq	#1,d4
00007108 4A00                       		tst.b	d0
0000710A 6700                       		beq.s	@setcoin
0000710C 7805                       		moveq	#5,d4
0000710E                            @setcoin:
0000710E D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
00007114 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
0000711C 6D00                         		blt.s	@dontadd1up
0000711E 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
00007124 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
0000712C                            @dontadd1up:
0000712C                            
0000712C 6100 FAE8                  		bsr	Prize_Delete
00007130 6100 E13A                  		bsr	Level_HidePrize
00007134                            		
00007134 203C 0000 0000               		move.l	#SndSfx_COIN,d0
0000713A 7202                         		moveq 	#2,d1
0000713C 7401                         		moveq	#1,d2
0000713E 6100 A2FC                    		bsr	Audio_Track_play
00007142 7800                       		moveq	#0,d4
00007144                            @a_coin:
00007144 4A44                       		tst.w	d4
00007146 6600                       		bne.s	@floorsolid
00007148 4E75                       		rts
0000714A                            		
0000714A                            ; $20
0000714A                            
0000714A                            @trampoline:
0000714A 6100 FA7C                  		bsr	goToTrampolineWhy
0000714E                            		
0000714E 283C FFF9 0000             		move.l	#-$70000,d4
00007154 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
0000715C 6700                       		beq.s	@dontadd
0000715E 283C FFF7 0000             		move.l	#-$90000,d4
00007164                            @dontadd:
00007164 2E04                       		move.l	d4,d7
00007166 7801                       		moveq	#1,d4
00007168 4E75                       		rts
0000716A                            		
0000716A                            ; ----------------------------------
0000716A                            
0000716A                            ; @check_prz_id:
0000716A                            ;    		bsr	Object_PrzActionCeil
0000716A                            ;   		tst.w	d4
0000716A                            ;   		bne	@ceilingsolid
0000716A                            ; 		rts
0000716A                            		
0000716A                            ;       	bsr	level_CheckPrize
0000716A                            ;        	bne	@floorsolid
0000716A                            ;        	rts
0000716A                            
0000716A                            ; ----------------------------------
0000716A                            		
0000716A                            @floorsolid:
0000716A 6100 0000                  		bsr	@objFloorFlags
0000716E 02AE FFF0 0000 000C         		and.l	#$FFF00000,obj_y(a6)
00007176 4287                       		clr.l	d7
00007178 4E75                       		rts
0000717A                            
0000717A                            ; ----------------------------------
0000717A                            
0000717A                            @objFloorFlags:
0000717A 08EE 0000 0022               		bset	#bitcol_floor,obj_col(a6)
00007180 08AE 0002 001E             		bclr	#bitobj_air,obj_status(a6)
00007186                            		
00007186 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
0000718E 6600 0000                  		bne	@onhold
00007192 3D7C 000B 0026                 		move.w	#varJumpTimer,plyr_jumptmr(a6)
00007198                            @onhold:
00007198 08AE 0005 002D              		bclr	#bitPlyrClimb,plyr_status(a6)
0000719E 08AE 0006 002D             		bclr	#bitPlyrCancelY,plyr_status(a6)
000071A4 4E75                       		rts
000071A6                            		
000071A6                            ; ----------------------------------
000071A6                            ; ceiling collision
000071A6                            ; ----------------------------------
000071A6                            
000071A6                            PlyrColRead_Ceiling:
000071A6 08AE 0001 0022             		bclr	#bitcol_ceiling,obj_col(a6)
000071AC 4A87                       		tst.l	d7
000071AE 6A00                       		bpl.s	@doing_down
000071B0                            		
000071B0 6100 F128                   		bsr 	object_FindCol_CeilingSides
000071B4 2400                        		move.l	d0,d2
000071B6 2601                        		move.l	d1,d3
000071B8 6100 F114                   		bsr 	object_FindPrz_CeilingSides
000071BC 4A00                       		tst.b	d0
000071BE 6600 0000                  		bne	@przceil_right
000071C2 2002                       		move.l	d2,d0
000071C4 6100 0000                  		bsr	@right_special
000071C8 4A00                       		tst.b	d0
000071CA 6600 0000                   		bne	@ceiling_sides
000071CE 2001                       		move.l	d1,d0
000071D0 4A00                       		tst.b	d0
000071D2 6600 0000                  		bne	@przceil_left
000071D6 2003                       		move.l	d3,d0
000071D8 6100 0000                  		bsr	@left_special
000071DC 4A00                       		tst.b	d0
000071DE 6600 0000                  		bne	@ceiling_sides
000071E2                            		
000071E2 6100 ECF6                  		bsr	object_FindPrz_Ceiling
000071E6 4A00                       		tst.b	d0
000071E8 6600 0000                  		bne	@przceil_center
000071EC 6100 ECF8                  		bsr	object_FindCol_Ceiling
000071F0 6100 0000                  		bsr	@center_special
000071F4 4A00                       		tst.b	d0
000071F6 6600                       		bne.s	@ceiling_center
000071F8                            		
000071F8                            @doing_down:
000071F8 4E75                       		rts
000071FA                            
000071FA                            ; ----------------------------------
000071FA                            
000071FA                            @ceiling_center:
000071FA                            @ceiling_sides:
000071FA 0C00 0001                  		cmp.b	#1,d0
000071FE 6700                       		beq.s	@ceilingsolid_stop
00007200 4E75                       		rts
00007202                            
00007202                            ; ----------------------------------
00007202                            
00007202                            @ceilingsolid_stop:
00007202 2E3C 0001 0000             		move.l	#$10000,d7
00007208 066E 0010 000C                     	add.w	#$10,obj_y(a6)
0000720E 02AE FFF0 0000 000C        		and.l	#$FFF00000,obj_y(a6)
00007216                            
00007216                            @ceilingsolid:
00007216 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
0000721C 08EE 0001 0022              		bset	#bitcol_ceiling,obj_col(a6)
00007222 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
00007228 4E75                        		rts
0000722A                            		
0000722A                            ; ----------------------------------
0000722A                            ; Event block: ceiling
0000722A                            ; ----------------------------------
0000722A                            
0000722A                            @center_special:
0000722A 0800 0006                  		btst	#6,d0
0000722E 6700                       		beq.s	@return
00007230 6100 0000                  		bsr	plyrColEntry
00007234 382C 000C                  		move.w	$C(a4),d4
00007238 6000 0000                  		bra	plyrColGo
0000723C                            		
0000723C                            @left_special:
0000723C 0800 0006                  		btst	#6,d0
00007240 6700                       		beq.s	@return
00007242 6100 0000                  		bsr	plyrColEntry
00007246 382C 000E                  		move.w	$E(a4),d4
0000724A 6000 0000                  		bra	plyrColGo
0000724E                            		
0000724E                            @right_special:
0000724E 0800 0006                  		btst	#6,d0
00007252 6700                       		beq.s	@return
00007254 6100 0000                  		bsr	plyrColEntry
00007258 382C 0010                  		move.w	$10(a4),d4
0000725C 6000 0000                  		bra	plyrColGo
00007260                            		
00007260                            @return:
00007260 4E75                       		rts
00007262                            		
00007262                            ; ----------------------------------
00007262                            
00007262                            @przceil_center:
00007262                            @przceil_left:
00007262                            @przceil_right:
00007262 6100 F612                     		bsr	Object_PrzActionCeil
00007266 4A44                         		tst.w	d4
00007268 6600 FFAC                    		bne	@ceilingsolid
0000726C 4E75                       		rts
0000726E                            		
0000726E                            ; ----------------------------------
0000726E                            ; d0 - LEFT
0000726E                            ; d1 - RIGHT
0000726E                            ; d2 - CENTER
0000726E                            ; ----------------------------------
0000726E                            
0000726E                            ; @prizes_ceiling:
0000726E                            ; 		move.l	d0,d3
0000726E                            ; 		btst	#bitobj_flipH,obj_status(a6)
0000726E                            ; 		beq.s	@itsleft
0000726E                            ; 		exg.l	d1,d3
0000726E                            ; @itsleft:
0000726E                            ; 
0000726E                            ;    		move.l	d2,d0
0000726E                            ;    		tst.b	d0
0000726E                            ;    		beq.s	@przc_no_c
0000726E                            ;   		bsr	Object_PrzActionCeil
0000726E                            ;  		tst.w	d4
0000726E                            ;  		bne	@ceilingsolid
0000726E                            ; @przc_no_c:
0000726E                            ; 
0000726E                            ; 		move.l	d1,d0
0000726E                            ; 		tst.b	d0
0000726E                            ; 		beq.s	@przc_no_r
0000726E                            ; 		bsr	Object_PrzActionCeil
0000726E                            ; 		tst.w	d4
0000726E                            ; 		bne	@ceilingsolid
0000726E                            ; @przc_no_r:
0000726E                            ;  		move.l	d3,d0
0000726E                            ;  		tst.b	d0
0000726E                            ;  		beq.s	@przc_no_l
0000726E                            ;  		bsr	Object_PrzActionCeil
0000726E                            ; 		tst.w	d4
0000726E                            ; 		bne	@ceilingsolid
0000726E                            ; @przc_no_l:
0000726E                            ; 		rts
0000726E                            		
0000726E                            ; **********************************
0000726E                            ; Wall collision
0000726E                            ; **********************************
0000726E                            
0000726E                            PlyrColRead_Wall:
0000726E 08AE 0002 0022             		bclr	#bitcol_wall_r,obj_col(a6)
00007274 08AE 0003 0022             		bclr	#bitcol_wall_l,obj_col(a6)
0000727A                            		
0000727A                            		; Ignorar PRIZEs si Player esta
0000727A                            		; en modo escalera
0000727A 082E 0005 002D              		btst	#bitPlyrClimb,plyr_status(a6)
00007280 6600                        		bne.s	@okaydntchk
00007282 6100 EB8A                  		bsr	object_FindPrz_Wall
00007286 2400                       		move.l	d0,d2
00007288 6100 EDD4                  		bsr	object_FindPrz_WallSides
0000728C 0800 0007                   		btst	#7,d0
00007290 6700                        		beq.s	@righthidn
00007292 4200                        		clr.b	d0
00007294                            @righthidn:
00007294 4A00                       		tst.b	d0
00007296 6600 0000                  		bne	@przwall_right
0000729A 2001                       		move.l	d1,d0
0000729C 0800 0007                   		btst	#7,d0
000072A0 6700                        		beq.s	@lefthidn
000072A2 4200                        		clr.b	d0
000072A4                            @lefthidn:
000072A4 4A00                       		tst.b	d0
000072A6 6600 0000                  		bne	@przwall_left
000072AA                            @okaydntchk:
000072AA                            
000072AA 6100 EB6E                  		bsr	object_FindCol_Wall
000072AE 6100 0000                  		bsr	@center_special
000072B2 4A00                       		tst.b	d0
000072B4 6600                       		bne.s	@wall_center
000072B6                            		
000072B6 6100 EDB2                   		bsr 	object_FindCol_WallSides
000072BA 6100 0000                  		bsr	@right_special
000072BE 4A00                       		tst.b	d0
000072C0 6600 0000                  		bne	@wall_right
000072C4                            		
000072C4 2001                       		move.l	d1,d0
000072C6 6100 0000                  		bsr	@left_special
000072CA 4A00                       		tst.b	d0
000072CC 6600 0000                  		bne	@wall_left
000072D0 4E75                       		rts
000072D2                            		
000072D2                            ; ----------------------------------
000072D2                            
000072D2                            @wall_center:
000072D2 0C40 0001                  		cmp.w	#1,d0
000072D6 6700 0000                   		beq	@wallsolid_slope
000072DA                            		
000072DA 4A87                       		tst.l	d7
000072DC 6B00                       		bmi.s	@NoCol_LR
000072DE 082E 0002 001E                		btst	#bitobj_air,obj_status(a6)
000072E4 6600                          		bne.s	@NoCol_LR
000072E6 4287                           		clr.l	d7	
000072E8 08AE 0002 001E                 		bclr	#bitobj_air,obj_status(a6)
000072EE                                		
000072EE 322E 000C                  		move.w	obj_y(a6),d1
000072F2 0441 0001                  		sub.w	#1,d1
000072F6 3601                       		move.w	d1,d3
000072F8 0241 FFF0                  		and.w	#$FFF0,d1 		
000072FC 47F9 0000 5716                  		lea	(col_SlopeData),a3
00007302 0240 00FF                        		and.w	#$FF,d0
00007306 E948                            		lsl.w	#4,d0
00007308 D6C0                             		adda	d0,a3
0000730A 302E 0008                        		move.w	obj_x(a6),d0
0000730E 0240 000F                        		and.w	#$F,d0
00007312 1433 0000                        		move.b	(a3,d0.w),d2
00007316 0242 000F                        		and.w	#$F,d2
0000731A D242                             		add.w	d2,d1
0000731C                                  		
0000731C 082E 0002 001E              		btst	#bitobj_air,obj_status(a6)
00007322 6700                       		beq.s	@dontchkLR
00007324 B641                         		cmp.w	d1,d3
00007326 6D00                         		blt.s	@NoCol_LR
00007328                            @dontchkLR:
00007328 3D41 000C                     		move.w	d1,obj_y(a6)
0000732C                            
0000732C                            @NoCol_LR:
0000732C 4E75                       		rts
0000732E                            
0000732E                            ; ----------------------------------
0000732E                            ; Prizes on walls
0000732E                            ; ----------------------------------	
0000732E                            
0000732E                            @przwall_left:
0000732E 6100 0000                  		bsr	@check_wll_prz
00007332 4A44                          		tst.w	d4
00007334 6600 0000                     		bne	@wallsolid_l
00007338 4E75                       		rts
0000733A                            @przwall_right:
0000733A 6100 0000                  		bsr	@check_wll_prz
0000733E 4A44                          		tst.w	d4
00007340 6600 0000                     		bne	@wallsolid_r
00007344 4E75                       		rts
00007346                            	
00007346                            ; ----------------------------------
00007346                            
00007346                            @check_wll_prz:
00007346 7801                       		moveq	#1,d4
00007348                            		
00007348 0C00 0020                  		cmp.b	#$20,d0
0000734C 6700                       		beq.s	@trampolinewll
0000734E                            		
0000734E 0C00 0040                  		cmp.b	#$40,d0		;> $40?
00007352 6D00                       		blt.s	@notcoin
00007354 0200 003F                  		and.b	#$3F,d0
00007358 7801                       		moveq	#1,d4
0000735A 4A00                       		tst.b	d0
0000735C 6700                       		beq.s	@setcoin
0000735E 7805                       		moveq	#5,d4
00007360                            @setcoin:
00007360 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
00007366 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
0000736E 6D00                         		blt.s	@dontadd1up2
00007370 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
00007376 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
0000737E                              		
0000737E 2800                         		move.l	d0,d4
00007380 203C 0000 0000               		move.l	#SndSfx_OneUp,d0
00007386 7200                         		moveq 	#0,d1
00007388 7401                         		moveq	#1,d2
0000738A 6100 A0B0                    		bsr	Audio_Track_play
0000738E 2004                         		move.l	d4,d0
00007390                            @dontadd1up2:
00007390                            
00007390 6100 F884                  		bsr	Prize_Delete
00007394 6100 DED6                  		bsr	Level_HidePrize
00007398                            ; 		move.l	d0,(RAM_LvlPlanes+lvl_przreq)
00007398                            ; 		bset	#bitLvlHidePrz,(RAM_LvlPlanes+lvl_flags)
00007398                            
00007398 203C 0000 0000               		move.l	#SndSfx_COIN,d0
0000739E 7202                         		moveq 	#2,d1
000073A0 7401                         		moveq	#1,d2
000073A2 6100 A098                    		bsr	Audio_Track_play
000073A6 7800                       		moveq	#0,d4
000073A8                            		
000073A8                            @notcoin:
000073A8 4E75                       		rts
000073AA                            		
000073AA                            @trampolinewll:
000073AA                            ; 		bsr	goToTrampolineWhy
000073AA                            
000073AA                            ; 		and.w	#$FFF8,obj_x(a6)
000073AA                            		
000073AA                            ; 		move.l	#-$80000,d0
000073AA                            ; 		btst	#bitobj_flipH,obj_status(a6)
000073AA                            ; 		bne.s	@lefty
000073AA                            ; 		tst.l	d6
000073AA                            ; 		bpl.s	@righy
000073AA                            ; @lefty:
000073AA                            ; 		neg.l	d0
000073AA                            ; @righy:
000073AA                            ; 		move.l	d0,d6
000073AA 7801                       		moveq	#1,d4
000073AC 4E75                       		rts
000073AE                            		
000073AE                            ; ----------------------------------
000073AE                            
000073AE                            @wall_right:
000073AE                            ; 		btst	#bitobj_flipH,obj_status(a6)
000073AE                            ; 		bne.s	@return_w
000073AE 0C00 0002                    		cmp.b	#2,d0
000073B2 6C00                         		bge.s	@return_w
000073B4 0C00 0001                   		cmp.b	#1,d0
000073B8 6700                         		beq.s	@wallsolid_r
000073BA 4E75                         		rts
000073BC                              		
000073BC                            @wall_left:
000073BC                            ; 		btst	#bitobj_flipH,obj_status(a6)
000073BC                            ; 		beq.s	@return_w
000073BC 0C00 0002                    		cmp.b	#2,d0
000073C0 6C00                         		bge.s	@return_w
000073C2 0C00 0001                    		cmp.b	#1,d0
000073C6 6700                         		beq.s	@wallsolid_l
000073C8                            @return_w:
000073C8 4E75                       		rts
000073CA                            		
000073CA                            ; ----------------------------------
000073CA                            
000073CA                            @wallsolid_r:
000073CA 026E FFF8 0008             		and.w	#$FFF8,obj_x(a6)
000073D0                            		
000073D0 4286                       		clr.l	d6
000073D2 08EE 0002 0022             		bset	#bitcol_wall_r,obj_col(a6)
000073D8 4E75                       		rts
000073DA                            
000073DA                            ; ----------------------------------
000073DA                            
000073DA                            @wallsolid_l:
000073DA 066E 0004 0008             		add.w	#4,obj_x(a6)
000073E0 026E FFF8 0008             		and.w	#$FFF8,obj_x(a6)
000073E6                            		
000073E6                            ; 		moveq	#0,d4
000073E6                            ; 		move.b	obj_size(a6),d4
000073E6                            ; 		lsl.w	#3,d4
000073E6                            ; 		move.w	obj_x(a6),d5
000073E6                            ; 		sub.w	#1,d5
000073E6                            ; 		sub.w	d4,d5
000073E6                            ; 		tst.w	d5
000073E6                            ; 		bpl.s	@noleftlvl
000073E6                            ; 		
000073E6                            ; 		moveq	#0,d0
000073E6                            ; 		add.w	d4,d0
000073E6                            ; 		move.w	d0,obj_x(a6)
000073E6                            ; 		bra.s	@leftend
000073E6                            ; @noleftlvl:
000073E6                            ; 		move.l	d0,d2
000073E6                            ; 		swap	d2
000073E6                            ; 		and.w	#$FFF0,d2
000073E6                            ; 		add.w	#$10,d2
000073E6                            ; 		add.w	#8,d2
000073E6                            ; 		move.w	d2,obj_x(a6)
000073E6                            ; @leftend:
000073E6 4286                       		clr.l	d6
000073E8 08EE 0003 0022             		bset	#bitcol_wall_l,obj_col(a6)
000073EE 4E75                       		rts
000073F0                            
000073F0                            ; ----------------------------------
000073F0                            
000073F0                            @wallsolid_slope:
000073F0 082E 0000 001E                  		btst	#bitobj_flipH,obj_status(a6)
000073F6 6600                       		bne.s	@wllflg_l
000073F8 08EE 0002 0022             		bset	#bitcol_wall_r,obj_col(a6)
000073FE 4E75                       		rts
00007400                            @wllflg_l:
00007400 08EE 0003 0022             		bset	#bitcol_wall_l,obj_col(a6)
00007406 4E75                       		rts
00007408                             		
00007408                            ; ----------------------------------
00007408                            ; Event block: on wall
00007408                            ; ----------------------------------
00007408                            
00007408                            @center_special:
00007408 0800 0006                  		btst	#6,d0
0000740C 6700                       		beq.s	@return
0000740E 6100 0000                  		bsr	plyrColEntry
00007412 382C 0006                  		move.w	6(a4),d4
00007416 6000 0000                  		bra	plyrColGo
0000741A                            		
0000741A                            @left_special:
0000741A 0800 0006                  		btst	#6,d0
0000741E 6700                       		beq.s	@return
00007420 6100 0000                  		bsr	plyrColEntry
00007424 382C 0008                  		move.w	8(a4),d4
00007428 6000 0000                  		bra	plyrColGo
0000742C                            		
0000742C                            @right_special:
0000742C 0800 0006                  		btst	#6,d0
00007430 6700                       		beq.s	@return
00007432 6100 0000                  		bsr	plyrColEntry
00007436 382C 000A                  		move.w	$A(a4),d4
0000743A 6000 0000                  		bra	plyrColGo
0000743E                            		
0000743E                            @return:
0000743E 4E75                       		rts
00007440                            		
00007440                            ; ---------------------------------------------
00007440                            ; EVENT BLOCKS ($80+)
00007440                            ; ---------------------------------------------
00007440                            
00007440                            plyrColEntry:
00007440 2800                       		move.l	d0,d4
00007442 0244 003F                  		and.w	#$3F,d4
00007446 C8FC 0012                  		mulu.w	#$12,d4
0000744A 49FA 0000                  		lea	plyEvnList(pc),a4
0000744E D8C4                       		adda	d4,a4
00007450 4E75                       		rts
00007452                            plyrColGo:
00007452 0284 0000 FFFF             		and.l	#$FFFF,d4
00007458 0684 0000 0000             		add.l	#plyEvnList,d4
0000745E 2844                       		movea.l	d4,a4
00007460 4ED4                       		jmp	(a4)
00007462                            	
00007462                            ; ---------------------------------------------
00007462                            ;   Floor Center |   Floor Left |   Floor Right
00007462                            ;    Wall Center |    Wall Left |    Wall Right
00007462                            ; Ceiling Center | Ceiling Left | Ceiling Right
00007462                            ; 
00007462                            ; d0 - Return collision (xpos|ypos|byte)
00007462                            ; DO NOT USE d1 WHILE CHECKING SIDES
00007462                            ; ---------------------------------------------
00007462                            
00007462                            plyEvnList:
00007462                            	; $40 - Exit level (old)
00007462 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
00007468 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
0000746E 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
00007474                            	; $41 - Ladder (climbing mode)
00007474 0000 0000 0000             	dc.w @event41_flr-plyEvnList,@event41_flrsd-plyEvnList,@event41_flrsd-plyEvnList
0000747A 0000 0000 0000             	dc.w @event41_wll-plyEvnList,       @unused-plyEvnList,       @unused-plyEvnList
00007480 0000 0000 0000             	dc.w      @unused-plyEvnList,       @unused-plyEvnList,       @unused-plyEvnList
00007486                            	; $42 - Spikes (Up)
00007486 0000 0000 0000             	dc.w @event42-plyEvnList,@event42-plyEvnList,@event42-plyEvnList
0000748C 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00007492 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00007498                            	;$83
00007498 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000749E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074A4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074AA                            	;$84
000074AA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074B0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074B6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074BC                            	;$85
000074BC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074C2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074C8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074CE                            	;$86
000074CE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074D4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074DA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074E0                            	;$87
000074E0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074E6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074EC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074F2                            	;$88
000074F2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074F8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074FE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007504                            	;$89
00007504 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000750A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007510 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007516                            	;$8A
00007516 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000751C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007522 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007528                            	;$8B
00007528 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000752E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007534 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000753A                            	;$8C
0000753A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007540 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007546 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000754C                            	;$8D
0000754C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007552 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007558 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000755E                            	;$8E
0000755E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007564 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000756A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007570                            	;$8F
00007570 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007576 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000757C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007582                            	
00007582                            	;$90
00007582 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
00007588 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
0000758E 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
00007594                            	;$91
00007594 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
0000759A 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
000075A0 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
000075A6                            	;$92
000075A6 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
000075AC 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
000075B2 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
000075B8                            	;$93
000075B8 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
000075BE 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
000075C4 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
000075CA                            	;$94
000075CA 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
000075D0 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
000075D6 0000 0000 0000             	dc.w @event54_cei-plyEvnList,@event54_cei-plyEvnList,@event54_cei-plyEvnList
000075DC                            	;$95
000075DC 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
000075E2 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
000075E8 0000 0000 0000             	dc.w @event55_cei-plyEvnList,@event55_cei-plyEvnList,@event55_cei-plyEvnList
000075EE                            	;$96
000075EE 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
000075F4 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
000075FA 0000 0000 0000             	dc.w @event56_cei-plyEvnList,@event56_cei-plyEvnList,@event56_cei-plyEvnList
00007600                            	;$97
00007600 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00007606 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0000760C 0000 0000 0000             	dc.w @event57_cei-plyEvnList,@event57_cei-plyEvnList,@event57_cei-plyEvnList
00007612                            	;$98
00007612 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007618 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000761E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007624                            	;$99
00007624 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000762A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007630 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007636                            	;$9A
00007636 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000763C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007642 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007648                            	;$9B
00007648 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000764E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007654 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000765A                            	;$9C
0000765A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007660 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007666 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000766C                            	;$9D
0000766C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007672 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007678 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000767E                            	;$9E
0000767E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007684 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000768A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007690                            	;$9F
00007690 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007696 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000769C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076A2                            
000076A2                            	;$A0
000076A2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076A8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076AE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076B4                            	;$A1
000076B4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076BA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076C0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076C6                            	;$A2
000076C6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076CC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076D2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076D8                            	;$A3
000076D8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076DE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076E4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076EA                            	;$A4
000076EA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076F0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076F6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076FC                            	;$A5
000076FC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007702 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007708 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000770E                            	;$A6
0000770E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007714 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000771A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007720                            	;$A7
00007720 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007726 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000772C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007732                            	;$A8
00007732 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007738 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000773E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007744                            	;$A9
00007744 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000774A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007750 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007756                            	;$AA
00007756 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000775C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007762 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007768                            	;$AB
00007768 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000776E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007774 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000777A                            	;$AC
0000777A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007780 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007786 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000778C                            	;$AD
0000778C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007792 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007798 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000779E                            	;$AE
0000779E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077A4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077AA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077B0                            	;$AF
000077B0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077B6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077BC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077C2                            		
000077C2                            ; ----------------------------------
000077C2                            ; EVENT $80
000077C2                            ; ----------------------------------
000077C2                            
000077C2                            @event40:
000077C2 4200                       		clr.b	d0
000077C4 4A39 FFFF DE4C             		tst.b	(RAM_ModeReset)
000077CA 6600                       		bne.s	@already
000077CC 0679 0001 FFFF DC06          		add.w	#1,(RAM_CurrLevel)
000077D4 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
000077DC                            @already:
000077DC 4E75                       		rts
000077DE                            		
000077DE                            ; ----------------------------------
000077DE                            ; EVENT $41
000077DE                            ; ----------------------------------
000077DE                            
000077DE                            @event41_flr:
000077DE 4282                       		clr.l	d2
000077E0 6100 EBFE                  		bsr	object_FindCol_Center
000077E4 0C00 0041                  		cmp.b	#$41,d0
000077E8 6700 0000                  		beq	@unused_flag
000077EC 7401                       		moveq	#1,d2	
000077EE                            @notclimb:
000077EE                            
000077EE                            		
000077EE 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
000077F6 6700 0000                  		beq	@unused_flag
000077FA                            		
000077FA 2400                       		move.l	d0,d2
000077FC 6100 E758                  		bsr	object_FindCol_FloorSides
00007800 0C00 0041                  		cmp.b	#$41,d0
00007804 6700                       		beq.s	@usethis
00007806 2001                       		move.l	d1,d0
00007808 0C00 0041                  		cmp.b	#$41,d0
0000780C 6700                       		beq.s	@usethis
0000780E 2002                       		move.l	d2,d0
00007810                            @usethis:
00007810 4286                       		clr.l	d6
00007812 4287                       		clr.l	d7
00007814 0280 FFF0 0000             		and.l	#$FFF00000,d0
0000781A 0680 0008 0000             		add.l	#$80000,d0
00007820 2D40 0008                  		move.l	d0,obj_x(a6)
00007824 08EE 0005 002D             		bset	#bitPlyrClimb,plyr_status(a6)
0000782A 08AE 0000 0022             		bclr	#bitcol_floor,obj_col(a6)
00007830 1D7C 0004 001A               		move.b	#4,obj_anim_id(a6)
00007836 1D7C 000C 0020              		move.b	#12,obj_frame(a6)		;FRAME 12
0000783C 066E 0008 000C             		add.w	#8,obj_y(a6)
00007842 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
00007848                            
00007848                            ; 		clr.l	d0
00007848 4E75                       		rts
0000784A                             		
0000784A                            ; --------------------
0000784A                            
0000784A                            @event41_flrsd:
0000784A                            ; 		clr.l	d0
0000784A                            ; 		rts
0000784A                            		
0000784A                            ; --------------------
0000784A                            
0000784A                            @event41_cei:
0000784A 4280                       		clr.l	d0
0000784C 4E75                       		rts
0000784E                            		
0000784E                            ; --------------------
0000784E                            
0000784E                            @event41_wll:
0000784E                            ;  		clr.l	d0
0000784E 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00007854 6700                       		beq.s	@notwaitclmb
00007856 1D7C 00FF 001A              		move.b	#-1,obj_anim_id(a6)
0000785C 4286                       		clr.l	d6
0000785E 4287                       		clr.l	d7
00007860                            @notwaitclmb:
00007860                            ; 		move.l	d0,d2
00007860 0839 0000 FFFF DE83         		btst	#bitJoyUp,(RAM_Control_1+OnHold)
00007868 6700                        		beq.s	@dontclimb
0000786A 1D7C 0004 001A               		move.b	#4,obj_anim_id(a6)
00007870 082E 0005 002D              		btst	#bitPlyrClimb,plyr_status(a6)
00007876 6600                        		bne.s	@alrdup
00007878                             		
00007878 6100 EB66                    		bsr	object_FindCol_Center
0000787C 0C00 0041                   		cmp.b	#$41,d0
00007880 6700                        		beq.s	@canclimb
00007882 6100 E528                     		bsr	object_FindCol_Floor
00007886 0C00 0041                   		cmp.b	#$41,d0
0000788A 6600                        		bne.s	@dontclimb
0000788C                            @canclimb:
0000788C 0280 FFF0 0000              		and.l	#$FFF00000,d0
00007892 0680 0008 0000               		add.l	#$80000,d0
00007898 2D40 0008                   		move.l	d0,obj_x(a6)
0000789C                             		
0000789C                            @alrdup:
0000789C 04AE 0001 6000 000C         		sub.l	#$16000,obj_y(a6)
000078A4 4286                        		clr.l	d6
000078A6 4287                        		clr.l	d7
000078A8 08EE 0005 002D               		bset	#bitPlyrClimb,plyr_status(a6)
000078AE 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
000078B4                             
000078B4                            @dontclimb:
000078B4 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
000078BC 6700                       		beq.s	@dontclimbd
000078BE                            		
000078BE 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
000078C4 6600                       		bne.s	@alrddwn
000078C6 6100 EB18                  		bsr	object_FindCol_Center
000078CA 0C00 0041                  		cmp.b	#$41,d0
000078CE 6600                       		bne.s	@dontclimbd
000078D0 0280 FFF0 0000             		and.l	#$FFF00000,d0
000078D6 0680 0008 0000              		add.l	#$80000,d0
000078DC 2D40 0008                  		move.l	d0,obj_x(a6)
000078E0                            @alrddwn:
000078E0 06AE 0001 6000 000C        		add.l	#$16000,obj_y(a6)
000078E8 4286                       		clr.l	d6
000078EA 4287                       		clr.l	d7
000078EC 08EE 0005 002D              		bset	#bitPlyrClimb,plyr_status(a6)
000078F2 1D7C 0004 001A              		move.b	#4,obj_anim_id(a6)
000078F8 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
000078FE                            @dontclimbd:
000078FE                            
000078FE 4280                       		clr.l	d0
00007900 4E75                       		rts
00007902                            
00007902                            ; --------------------
00007902                            
00007902                            @unused_flag:
00007902 1002                        		move.b	d2,d0
00007904 4E75                        		rts
00007906                            
00007906                            ; ----------------------------------
00007906                            ; EVENT $82
00007906                            ; ----------------------------------
00007906                            
00007906                            @event42:
00007906 08EE 0003 001E             		bset	#bitobj_hurt,obj_status(a6)
0000790C                            		
0000790C 103C 0001                  		move.b	#1,d0
00007910 4E75                       		rts
00007912                            		
00007912                            ; ----------------------------------
00007912                            ; EVENT $90
00007912                            ;
00007912                            ; CHECKS COLOR
00007912                            ; ----------------------------------
00007912                            
00007912                            @event50_check:
00007912 0C79 000E FFFF E8F6        		cmp.w	#$00E,(RAM_Palette+$26)
0000791A 6700 0000                  		beq	@event_solid
0000791E 6000 0000                  		bra	@unused
00007922                            
00007922                            ; ----------------------------------
00007922                            ; EVENT $91
00007922                            ;
00007922                            ; CHECKS COLOR
00007922                            ; ----------------------------------
00007922                            
00007922                            @event51_check:
00007922 0C79 0E00 FFFF E8FC        		cmp.w	#$E00,(RAM_Palette+$2C)
0000792A 6700 0000                  		beq	@event_solid
0000792E 6000 0000                  		bra	@unused
00007932                            		
00007932                            ; ----------------------------------
00007932                            ; EVENT $92
00007932                            ;
00007932                            ; CHECKS COLOR
00007932                            ; ----------------------------------
00007932                            
00007932                            @event52_check:
00007932 0C79 00E0 FFFF E902        		cmp.w	#$0E0,(RAM_Palette+$32)
0000793A 6700 0000                  		beq	@event_solid
0000793E 6000 0000                  		bra	@unused
00007942                            
00007942                            ; ----------------------------------
00007942                            ; EVENT $93
00007942                            ;
00007942                            ; CHECKS COLOR
00007942                            ; ----------------------------------
00007942                            
00007942                            @event53_check:
00007942 0C79 00EE FFFF E908        		cmp.w	#$0EE,(RAM_Palette+$38)
0000794A 6700 0000                  		beq	@event_solid
0000794E 6000 0000                  		bra	@unused
00007952                            		
00007952                            ; ----------------------------------
00007952                            ; EVENT $94
00007952                            ; 
00007952                            ; CHECKS COLOR
00007952                            ; ----------------------------------
00007952                            
00007952                            @event54_cei:
00007952 243C 0323 1102             		move.l	#$03231102,d2
00007958 0C79 000E FFFF E8F6        		cmp.w	#$00E,(RAM_Palette+$26)
00007960 6600                       		bne.s	@fade_this
00007962 243C 0423 1102             		move.l	#$04231102,d2
00007968                            @fade_this:
00007968 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
0000796E 6600                       		bne.s	@busy_pal
00007970 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
00007976                            @busy_pal:
00007976 103C 0001                  		move.b	#1,d0
0000797A 4E75                       		rts
0000797C                            
0000797C                            ; ----------------------------------
0000797C                            ; EVENT $95
0000797C                            ; 
0000797C                            ; CHECKS COLOR
0000797C                            ; ----------------------------------
0000797C                            
0000797C                            @event55_cei:
0000797C 243C 0383 1402             		move.l	#$03831402,d2
00007982 0C79 0E00 FFFF E8FC        		cmp.w	#$E00,(RAM_Palette+$2C)
0000798A 6600                       		bne.s	@fade_this_b
0000798C 243C 0483 1402             		move.l	#$04831402,d2
00007992                            @fade_this_b:
00007992 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00007998 6600                       		bne.s	@busy_pal_b
0000799A 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
000079A0                            @busy_pal_b:
000079A0 103C 0001                  		move.b	#1,d0
000079A4 4E75                       		rts
000079A6                            	
000079A6                            ; ----------------------------------
000079A6                            ; EVENT $96
000079A6                            ; 
000079A6                            ; CHECKS COLOR
000079A6                            ; ----------------------------------
000079A6                            
000079A6                            @event56_cei:
000079A6 243C 0343 1702             		move.l	#$03431702,d2
000079AC 0C79 00E0 FFFF E902        		cmp.w	#$0E0,(RAM_Palette+$32)
000079B4 6600                       		bne.s	@fade_this_g
000079B6 243C 0443 1702             		move.l	#$04431702,d2
000079BC                            @fade_this_g:
000079BC 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
000079C2 6600                       		bne.s	@busy_pal_g
000079C4 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
000079CA                            @busy_pal_g:
000079CA 103C 0001                  		move.b	#1,d0
000079CE 4E75                       		rts
000079D0                            
000079D0                            ; ----------------------------------
000079D0                            ; EVENT $97
000079D0                            ; 
000079D0                            ; CHECKS COLOR
000079D0                            ; ----------------------------------
000079D0                            
000079D0                            @event57_cei:
000079D0 243C 0363 1A02             		move.l	#$03631A02,d2
000079D6 0C79 00EE FFFF E908        		cmp.w	#$0EE,(RAM_Palette+$38)
000079DE 6600                       		bne.s	@fade_this_y
000079E0 243C 0463 1A02             		move.l	#$04631A02,d2
000079E6                            @fade_this_y:
000079E6 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
000079EC 6600                       		bne.s	@busy_pal_y
000079EE 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
000079F4                            @busy_pal_y:
000079F4 103C 0001                  		move.b	#1,d0
000079F8 4E75                       		rts
000079FA                            		
000079FA                            ; ----------------------------------
000079FA                            ; Full solid
000079FA                            ; ----------------------------------
000079FA                            
000079FA                            @event_solid:
000079FA 103C 0001                  		move.b	#1,d0
000079FE 4E75                       		rts
00007A00                            		
00007A00                            ; ----------------------------------
00007A00                            ; Return
00007A00                            ; ----------------------------------
00007A00                            
00007A00                            @unused:
00007A00 4280                       		clr.l	d0
00007A02 4E75                       		rts
00007A04                            		
00007A04                            ; ---------------------------------------------
00007A04                            ; Move level camera
00007A04                            ; ---------------------------------------------
00007A04                            
00007A04                            Plyr_LvlCamera:
00007A04 4BF9 FFFF BC00              		lea	(RAM_LvlPlanes),a5
00007A0A                             		
00007A0A                            ; 		move.b	lvl_settings(a5),d0
00007A0A                            ; 		and.w	#$F,d0
00007A0A                            ; 		add.w	d0,d0
00007A0A                            ; 		move.w	@ScrollTypes(pc,d0.w),d1
00007A0A                            ; 		jmp	@ScrollTypes(pc,d1.w)
00007A0A                            ; 		
00007A0A                            ; ; -----------------------------------
00007A0A                            ; 
00007A0A                            ; @ScrollTypes:
00007A0A                            ; 		dc.w @Scrl_Normal-@ScrollTypes
00007A0A                            ; 		dc.w @Scrl_Section-@Scrolltypes
00007A0A                            ; 		dc.w 0
00007A0A                            ; 		dc.w 0
00007A0A                            ; 		dc.w 0
00007A0A                            ; 		dc.w 0
00007A0A                            ; 		dc.w 0
00007A0A                            ; 		dc.w 0
00007A0A                            ; 		dc.w 0
00007A0A                            	
00007A0A                            ; -----------------------------------
00007A0A                            ; Default scroll
00007A0A                            ; 
00007A0A                            ; Autochecks the level size
00007A0A                            ; -----------------------------------
00007A0A                            
00007A0A                            @Scrl_Normal:
00007A0A 7400                       		moveq	#0,d2
00007A0C 7600                       		moveq	#0,d3
00007A0E                            		
00007A0E 383C 0140                  		move.w	#320,d4
00007A12 1039 FFFF ED1C             		move.b	(RAM_VidRegs+$C),d0
00007A18 0240 0081                  		and.w	#%10000001,d0
00007A1C 6600                       		bne.s	@normal_hor
00007A1E 383C 0100                  		move.w	#256,d4
00007A22                            @normal_hor:
00007A22 3004                       		move.w	d4,d0
00007A24 E848                       		lsr.w	#4,d0
00007A26 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00007A2A B240                       		cmp.w	d0,d1
00007A2C 6F00                       		ble.s	@DontScrollHor
00007A2E                            		
00007A2E 302E 0008                  		move.w	obj_x(a6),d0
00007A32 7A00                       		moveq	#0,d5
00007A34 3204                       		move.w	d4,d1
00007A36 E249                       		lsr.w	#1,d1
00007A38 9041                       		sub.w	d1,d0
00007A3A 6B00                       		bmi.s	@Wait_X
00007A3C 3A00                       		move.w	d0,d5
00007A3E                            		
00007A3E 322D 001C                   		move.w	lvl_x(a5),d1
00007A42 B245                        		cmp.w	d5,d1
00007A44 6700                        		beq.s	@Wait_X		
00007A46 7000                        		moveq	#bitLvlDirR,d0
00007A48 BA41                         		cmp.w	d1,d5
00007A4A 6E00                         		bgt.s	@RightDir
00007A4C 7001                         		moveq	#bitLvlDirL,d0	
00007A4E                            @RightDir:
00007A4E 01ED 003A                    		bset	d0,lvl_flags(a5)
00007A52                             		
00007A52                            @Wait_X:
00007A52 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00007A56 3004                       		move.w	d4,d0
00007A58 E848                       		lsr.w	#4,d0
00007A5A 9240                       		sub.w	d0,d1
00007A5C 3005                       		move.w	d5,d0
00007A5E 0440 0001                  		sub.w	#1,d0
00007A62 E949                       		lsl.w	#4,d1
00007A64 B041                       		cmp.w	d1,d0
00007A66 6D00                       		blt.s	@NotEnd_X
00007A68 3A01                       		move.w	d1,d5
00007A6A                            @NotEnd_X:
00007A6A 3005                       		move.w	d5,d0
00007A6C E848                       		lsr.w	#4,d0
00007A6E 3B45 001C                  		move.w	d5,lvl_x(a5)
00007A72                            
00007A72                            @DontScrollHor:
00007A72                            
00007A72                            ; ------------------------
00007A72                            ; Update Vertical
00007A72                            ; scrolling
00007A72                            ; ------------------------
00007A72                            
00007A72 0C6D 000E 0036              		cmp.w	#(224/16),lvl_maxcam_y(a5)
00007A78 6F00 0000                   		ble	@single_Y
00007A7C                             		
00007A7C 3A2D 0020                    		move.w	lvl_y(a5),d5
00007A80 382E 000C                    		move.w	obj_y(a6),d4
00007A84 986D 0020                    		sub.w	lvl_y(a5),d4
00007A88                              		
00007A88 0C44 0068                    		cmp.w	#(224/2)-8,d4
00007A8C 6D00                         		blt.s	@Do_Up
00007A8E 0C44 007E                    		cmp.w	#(224/2)+14,d4
00007A92 6F00                         		ble.s	@Set_Y
00007A94                              		
00007A94 302E 000C                  		move.w	obj_y(a6),d0
00007A98 0440 007E                  		sub.w	#(224/2)+14,d0
00007A9C 3A00                       		move.w	d0,d5
00007A9E 08ED 0002 003A                   		bset	#bitLvlDirD,lvl_flags(a5)
00007AA4 6000                             		bra.s	@Set_Y
00007AA6                                  		
00007AA6                            @Do_Up:
00007AA6 302E 000C                  		move.w	obj_y(a6),d0
00007AAA 0440 0068                  		sub.w	#(224/2)-8,d0
00007AAE 3A00                       		move.w	d0,d5
00007AB0 08ED 0003 003A                   		bset	#bitLvlDirU,lvl_flags(a5)
00007AB6                                  		
00007AB6 6000                       		bra.s	@Set_Y
00007AB8                            		
00007AB8                            @old_yscrl:
00007AB8 3A2E 000C                    		move.w	obj_y(a6),d5			; Old
00007ABC 383C 0080                   		move.w	#(224/2)+$10,d4
00007AC0 9A44                        		sub.w	d4,d5
00007AC2 08ED 0002 003A                  		bset	#bitLvlDirD,lvl_flags(a5)
00007AC8 08ED 0003 003A                  		bset	#bitLvlDirU,lvl_flags(a5)
00007ACE                                 		
00007ACE                            ;  		sub.w	#((224/2)+$10),d5
00007ACE                            ;  		move.w	obj_y(a6),d0			; New
00007ACE                            ;  		sub.w	#((224/2)+$20),d0
00007ACE                            ;  		add.w	lvl_y(a5),d0
00007ACE                            ;  		asr.w	#3,d0
00007ACE                            ;  		add.w	d0,d0
00007ACE                            ;  		move.w	d0,d5
00007ACE                             		
00007ACE                            ;  		moveq	#bitLvlDirD,d2
00007ACE                            ;    		cmp.w	d5,d1
00007ACE                            ;    		bgt.s	@drwydown
00007ACE                            ;    		bset	#bitLvlDirU,d2
00007ACE                            ; @drwydown:
00007ACE                            
00007ACE                            ;     		bset	#bitLvlDirD,lvl_flags(a5)
00007ACE                            ;     		bset	#bitLvlDirU,lvl_flags(a5)
00007ACE                               		
00007ACE                            ; --------------------------------
00007ACE                             	
00007ACE                            @Set_Y:
00007ACE 4A45                        		tst.w	d5
00007AD0 6A00                        		bpl.s	@onyplus
00007AD2 4245                        		clr.w	d5
00007AD4                            @onyplus:
00007AD4 7200                       		moveq	#0,d1
00007AD6 322D 0036                    		move.w	lvl_maxcam_y(a5),d1
00007ADA 0441 000E                    		sub.w	#(224/16),d1
00007ADE E949                         		lsl.w	#4,d1
00007AE0                            ;   		swap	d1
00007AE0 BA41                         		cmp.w	d1,d5
00007AE2 6D00                         		blt.s	@notbotmd
00007AE4 3A01                         		move.w	d1,d5
00007AE6                            @notbotmd:
00007AE6 3B45 0020                  		move.w	d5,lvl_y(a5)
00007AEA                            		
00007AEA                            @single_Y:
00007AEA 4E75                       		rts
00007AEC                            ; 		
00007AEC                            ; ; -----------------------------------
00007AEC                            ; ; Dungeon Scroll
00007AEC                            ; ; -----------------------------------
00007AEC                            ; 
00007AEC                            ; @Scrl_Section:
00007AEC                            ; 		btst	#bitobj_flipH,obj_status(a6)
00007AEC                            ; 		bne.s	@LeftCheck
00007AEC                            ; 		
00007AEC                            ; ; RIGHT
00007AEC                            ; 
00007AEC                            ;  		btst	#0,plyr_status(a6)
00007AEC                            ;  		bne.s	@MoveRight
00007AEC                            ;  		
00007AEC                            ; 		move.w	obj_x(a6),d1
00007AEC                            ; 		move.w	#320,d0
00007AEC                            ; 		move.w	d0,d2
00007AEC                            ; 		add.w	lvl_x(a5),d2
00007AEC                            ; 		move.w	d2,plyr_lvltrgt(a6)
00007AEC                            ; 		add.w	#8,d0
00007AEC                            ;  		add.w	lvl_x(a5),d0
00007AEC                            ;  		cmp.w	d0,d1
00007AEC                            ; 		blt.s	@UpDownChk
00007AEC                            ;  		
00007AEC                            ;  		bset	#0,plyr_status(a6)
00007AEC                            ;  		clr.l	obj_x_spd(a6)
00007AEC                            ;  		clr.l	obj_y_spd(a6)
00007AEC                            ; 
00007AEC                            ; @MoveRight:
00007AEC                            ;   		move.w	lvl_x(a5),d1
00007AEC                            ;  		lea	(RAM_ScrlHor),a4
00007AEC                            ;  		move.w	#224-1,d3
00007AEC                            ; @doline2:
00007AEC                            ;  		move.w	d1,d0
00007AEC                            ;  		neg.w	d0
00007AEC                            ;  		move.w	d0,(a4)+
00007AEC                            ;  		asr.w	#4,d0
00007AEC                            ;  		move.w	d0,(a4)+
00007AEC                            ;  		dbf	d3,@doline2
00007AEC                            ;  		
00007AEC                            ;   		move.w	plyr_lvltrgt(a6),d0
00007AEC                            ;   		move.w	lvl_x(a5),d1
00007AEC                            ;   		cmp.w 	d0,d1
00007AEC                            ;   		bcs.s	@KeepScrlR
00007AEC                            ;  		bclr	#0,plyr_status(a6)
00007AEC                            ;   		move.w	d1,lvl_x(a5)
00007AEC                            ; 		rts
00007AEC                            ; @KeepScrlR:
00007AEC                            ;  		add.w	#4,lvl_x(a5)
00007AEC                            ;       		bset	#bitLvlDirR,lvl_flags(a5)
00007AEC                            ;        		rts
00007AEC                            ; 		
00007AEC                            ; @LeftCheck:
00007AEC                            ;        		
00007AEC                            ; 		
00007AEC                            ; @UpDownChk:
00007AEC                            ;  		bclr	#0,plyr_status(a6)
00007AEC                            ; 		rts
00007AEC                            		
00007AEC                            ; =================================================================
00007AEC                            ; 
00007AEC                            Plyr_SetStartPos:
00007AEC 4DF9 FFFF C040               		lea	(RAM_ObjBuffer),a6
00007AF2 4BF9 FFFF BC00              		lea	(RAM_LvlPlanes),a5
00007AF8                             		
00007AF8 3D40 000C                   		move.w	d0,obj_y(a6)
00007AFC 4840                        		swap	d0
00007AFE 3D40 0008                   		move.w	d0,obj_x(a6)
00007B02                             		
00007B02                            ; ----------------------------------------
00007B02                             
00007B02 383C 0140                  		move.w	#320,d4
00007B06                            ; 		btst	#bit_hortype,lvl_prio(a5)
00007B06                            ; 		beq.s	@normal_hor
00007B06                            ; 		move.w	#256,d4
00007B06                            ; @normal_hor:
00007B06 3004                       		move.w	d4,d0
00007B08 E848                       		lsr.w	#4,d0
00007B0A 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00007B0E B240                       		cmp.w	d0,d1
00007B10 6F00                       		ble.s	@DontScrollHor
00007B12                            		
00007B12 362E 0008                  		move.w	obj_x(a6),d3
00007B16 7400                       		moveq	#0,d2
00007B18 3204                       		move.w	d4,d1
00007B1A E249                       		lsr.w	#1,d1
00007B1C 9641                       		sub.w	d1,d3
00007B1E 6B00                       		bmi.s	@Wait_X
00007B20 3403                       		move.w	d3,d2
00007B22                            @Wait_X:
00007B22 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00007B26 3004                       		move.w	d4,d0
00007B28 E848                       		lsr.w	#4,d0
00007B2A 9240                       		sub.w	d0,d1
00007B2C 3002                       		move.w	d2,d0
00007B2E 0440 0001                  		sub.w	#1,d0
00007B32 E949                       		lsl.w	#4,d1
00007B34 B041                       		cmp.w	d1,d0
00007B36 6D00                       		blt.s	@NotEnd_X
00007B38 3401                       		move.w	d1,d2
00007B3A                            @NotEnd_X:
00007B3A 3002                       		move.w	d2,d0
00007B3C E848                       		lsr.w	#4,d0
00007B3E 3B42 001C                  		move.w	d2,lvl_x(a5)
00007B42                            
00007B42                            @DontScrollHor:
00007B42                            
00007B42                            ; ----------------------------------------
00007B42                            
00007B42 426D 0020                  		clr.w	lvl_y(a5)
00007B46 0C6D 000E 0036              		cmp.w	#(224/16),lvl_maxcam_y(a5)
00007B4C 6F00                        		ble.s	@Return
00007B4E 362E 000C                  		move.w	obj_y(a6),d3
00007B52 7400                       		moveq	#0,d2
00007B54 0443 0084                  		sub.w	#((224/2)+$14),d3	;aprox
00007B58 6B00                       		bmi.s	@Wait_Y
00007B5A 3403                       		move.w	d3,d2
00007B5C                            @Wait_Y:
00007B5C 322D 0036                   		move.w	lvl_maxcam_y(a5),d1
00007B60 0441 000E                   		sub.w	#(224/16),d1
00007B64 3002                        		move.w	d2,d0
00007B66 0440 0001                   		sub.w	#1,d0
00007B6A E949                        		lsl.w	#4,d1
00007B6C B041                        		cmp.w	d1,d0
00007B6E 6D00                        		blt.s	@NotEnd_Y
00007B70 3401                        		move.w	d1,d2
00007B72                            @NotEnd_Y:
00007B72 3B42 0020                  		move.w	d2,lvl_y(a5)
00007B76                             		
00007B76                            @Return:
00007B76 4E75                        		rts
00007B78                            
00007B78                            ; =================================================================
00007B78                            ; ------------------------------------------------
00007B78                            ; EXTERNAL Routines for the player
00007B78                            ; ------------------------------------------------
00007B78                            
00007B78                            ; TODO
00007B78                            
00007B78                            ; =================================================================
00007B78                            ; ------------------------------------------------
00007B78                            ; Data
00007B78                            ; ------------------------------------------------
00007B78                            		
00007B78                            Ani_Player:
00007B78 0000                       		dc.w @Idle-Ani_Player		;$00
00007B7A 0000                       		dc.w @Walk-Ani_Player
00007B7C 0000                       		dc.w @Jump_1-Ani_Player
00007B7E 0000                        		dc.w @Jump_2-Ani_Player
00007B80 0000                        		dc.w @ClimbMove-Ani_Player	;$04
00007B82 0000                        		dc.w @Die-Ani_Player
00007B84                            		even
00007B84                            @Idle:
00007B84 06                          		dc.b 6
00007B85 0000 0000 0000 0000 0000+   		dc.b 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
00007BA1 FF                         		dc.b -1
00007BA2                            		even
00007BA2                            @Jump_1:	
00007BA2 04                          		dc.b 4
00007BA3 0A                          		dc.b $A
00007BA4 FF                         		dc.b -1
00007BA6 00                         		even
00007BA6                            @Jump_2:	
00007BA6 04                          		dc.b 4
00007BA7 0B                           		dc.b $B
00007BA8 FF                          		dc.b -1
00007BAA 00                          		even
00007BAA                            @Walk:
00007BAA 03                          		dc.b 3
00007BAB 0203 0405 0607 0809         		dc.b 2,3,4,5,6,7,8,9
00007BB3 FF                         		dc.b -1
00007BB4                            		even
00007BB4                            @ClimbMove:
00007BB4 04                         		dc.b 4
00007BB5 0C0D 0E0F 0E0D             		dc.b 12,13,14,15,14,13
00007BBB FF                         		dc.b -1
00007BBC                            		even	
00007BBC                            @Die:
00007BBC 04                         		dc.b 4
00007BBD 10                         		dc.b 16
00007BBE FF                         		dc.b -1
00007BC0 00                         		even
00007BC0 00                         		even
00007BC0                               		include	"engine/modes/level/data/objects/dadou/code.asm"
00007BC0                            ; =================================================================
00007BC0                            ; Object
00007BC0                            ; 
00007BC0                            ; Dadou
00007BC0                            ; =================================================================
00007BC0                            
00007BC0                            ; =================================================================
00007BC0                            ; ------------------------------------------------
00007BC0                            ; Variables
00007BC0                            ; ------------------------------------------------
00007BC0                            
00007BC0 =00006420                  varVramDadou	equ	$6000|$420
00007BC0                            
00007BC0                            ; =================================================================
00007BC0                            ; ------------------------------------------------
00007BC0                            ; RAM
00007BC0                            ; ------------------------------------------------
00007BC0                            
00007BC0                            		rsset Obj_Ram
00007BC0 =00000024                  timer_1		rs.w 1
00007BC0                            
00007BC0                            ; =================================================================
00007BC0                            ; ------------------------------------------------
00007BC0                            ; Code start
00007BC0                            ; ------------------------------------------------
00007BC0                            
00007BC0                            Obj_Dadou:
00007BC0 7000                        		moveq	#0,d0
00007BC2 102E 001D                   		move.b	obj_index(a6),d0
00007BC6 D040                        		add.w	d0,d0
00007BC8 323B 0000                   		move.w	@Index(pc,d0.w),d1
00007BCC 4EBB 1000                   		jsr	@Index(pc,d1.w)
00007BD0                             		
00007BD0 6100 E050                   		bsr	Object_OffCheck
00007BD4 203C 6420 0000                		move.l	#(varVramDadou<<16),d0
00007BDA 223C 0000 0000              		move.l	#ani_dadou,d1
00007BE0 6100 E0AC                  		bsr	Object_Animate
00007BE4                            		
00007BE4 203C 6420 0000                 		move.l	#(varVramDadou<<16),d0
00007BEA 102E 0020                   		move.b	obj_frame(a6),d0
00007BEE 223C 0000 0000             		move.l	#map_dadou,d1
00007BF4 6000 DCEC                   		bra	Object_Show
00007BF8                             		
00007BF8                            ; ------------------------------------------------
00007BF8                            
00007BF8                            @Index:
00007BF8 0000                       		dc.w @Init-@Index
00007BFA 0000                       		dc.w @Stand-@Index
00007BFC 0000                       		dc.w @Walk-@Index
00007BFE                            		even
00007BFE                            		
00007BFE                            ; =================================================================
00007BFE                            ; ------------------------------------------------
00007BFE                            ; Index $00: Init
00007BFE                            ; ------------------------------------------------
00007BFE                            
00007BFE                            @Init:
00007BFE 2D7C 0101 0102 0004        		move.l	#$01010102,obj_size(a6)
00007C06 2D7C 0000 8000 0014        		move.l	#$8000,obj_y_spd(a6)
00007C0E                            		
00007C0E 3D7C 00C0 0024             		move.w	#$C0,timer_1(a6)
00007C14 6100 0000                  		bsr	@Go_Stand
00007C18                            		
00007C18                            ; =================================================================
00007C18                            ; ------------------------------------------------                  
00007C18                            ; Index $01: Stand
00007C18                            ; ------------------------------------------------
00007C18                            
00007C18                            @Stand:
00007C18                            ; 		sub.w	#1,timer_1(a6)
00007C18                            ; 		bpl.s	@Pyhsics
00007C18                            ; 
00007C18                            ; 		move.w	#$C0,timer_1(a6)
00007C18 6000 0000                  		bra	@Go_Walk
00007C1C                            		
00007C1C                            ; =================================================================
00007C1C                            ; ------------------------------------------------                  
00007C1C                            ; Index $01: Walk
00007C1C                            ; ------------------------------------------------
00007C1C                            
00007C1C                            @Walk:
00007C1C                            ; 		sub.w	#1,timer_1(a6)
00007C1C                            ; 		bpl.s	@Pyhsics
00007C1C                            ; 		
00007C1C                            ; 		move.w	#$C0,timer_1(a6)
00007C1C                            ; 		bchg	#bitobj_flipH,obj_status(a6)
00007C1C                            ; 		bra	@Go_Stand
00007C1C                            		
00007C1C 6000 0000                  		bra	@Pyhsics
00007C20                            		
00007C20                            ; =================================================================
00007C20                            ; ------------------------------------------------
00007C20                            ; Subs
00007C20                            ; ------------------------------------------------
00007C20                            
00007C20                            @Go_Stand:
00007C20 42AE 0010                  		clr.l	obj_x_spd(a6)
00007C24 422E 001A                  		clr.b	obj_anim_id(a6)
00007C28 1D7C 0001 001D             		move.b	#1,obj_index(a6)
00007C2E 4E75                       		rts
00007C30                            	
00007C30                            ; --------------------------------------
00007C30                            
00007C30                            @Go_Walk:
00007C30 2D7C 0000 4000 0010        		move.l	#$4000,obj_x_spd(a6)
00007C38 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00007C3E 6600                       		bne.s	@right
00007C40 2D7C FFFF C000 0010        		move.l	#-$4000,obj_x_spd(a6)
00007C48                            @right:
00007C48 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
00007C4E 1D7C 0002 001D             		move.b	#2,obj_index(a6)
00007C54 4E75                       		rts
00007C56                            	
00007C56                            ; ------------------------------------------------
00007C56                            ; Pyhsics
00007C56                            ; ------------------------------------------------
00007C56                            
00007C56                            @Pyhsics:
00007C56 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00007C5C 2C2E 0010                   		move.l	obj_x_spd(a6),d6
00007C60 2E2E 0014                   		move.l	obj_y_spd(a6),d7
00007C64                             		
00007C64 DDAE 0008                   		add.l	d6,obj_x(a6)
00007C68 6100 0000                   		bsr	@WallCheck
00007C6C                            		
00007C6C                            ; ----------------------------------
00007C6C                            
00007C6C 0687 0000 8000               		add.l	#$8000,d7
00007C72 0C87 0004 0000               		cmp.l	#$40000,d7
00007C78 6D00                         		blt.s	@low_y
00007C7A 2E3C 0004 0000               		move.l	#$40000,d7
00007C80                            @low_y:
00007C80 DFAE 000C                    		add.l	d7,obj_y(a6)
00007C84                              		
00007C84                            ; 		lea	(RAM_LvlPlanes),a5
00007C84                            ; 		move.w	lvl_size_y(a5),d0
00007C84                            ; 		lsl.w	#4,d0
00007C84                            ; 		move.w	obj_y(a6),d1
00007C84                            ; 		moveq	#0,d2
00007C84                            ; 		move.b	obj_size+2(a6),d2
00007C84                            ; 		lsl.w	#3,d2
00007C84                            ; 		sub.w	d2,d1
00007C84                            ; 		cmp.w	d0,d1
00007C84                            ; 		bge	@delete
00007C84                            ; 		
00007C84 4A87                         		tst.l	d7
00007C86 6B00                         		bmi.s	@no_floor
00007C88                              
00007C88 6100 E116                  		bsr	object_FindPrz_Floor
00007C8C 2400                       		move.l	d0,d2
00007C8E 4A00                       		tst.b	d0
00007C90 6600                       		bne.s	@from_prize
00007C92 6100 E2B6                   		bsr 	object_FindPrz_FloorSides
00007C96 4A00                       		tst.b	d0
00007C98 6600 0000                  		bne	@from_prize;@swap_dir_wl
00007C9C 2001                       		move.l	d1,d0
00007C9E 4A00                       		tst.b	d0
00007CA0 6600 0000                  		bne	@from_prize
00007CA4                            		
00007CA4 6100 E106                  		bsr	object_FindCol_Floor
00007CA8 2400                       		move.l	d0,d2
00007CAA 4A00                       		tst.b	d0
00007CAC 6600                       		bne.s	@set_floor
00007CAE 6100 E2A6                   		bsr 	object_FindCol_FloorSides
00007CB2 4A00                       		tst.b	d0
00007CB4 6600 0000                  		bne	@set_floor;@swap_dir_wl
00007CB8 2001                       		move.l	d1,d0
00007CBA 4A00                       		tst.b	d0
00007CBC 6700 0000                  		beq	@no_floor
00007CC0                            		
00007CC0 6000                       		bra.s	@set_floor
00007CC2                            ; @swap_dir_wl:
00007CC2                            ; 		neg.l	d6
00007CC2                            ; 		bchg	#bitobj_flipH,obj_status(a6)
00007CC2                            ; 		bra.s	@no_floor
00007CC2                            
00007CC2                            @from_prize:
00007CC2 0C00 0040                  		cmp.b	#$40,d0
00007CC6 6C00                       		bge.s	@set_floor
00007CC8 103C 0001                  		move.b	#1,d0
00007CCC                            		
00007CCC                            @set_floor:
00007CCC 6100 E774                    		bsr 	object_SetCol_Floor
00007CD0                              		
00007CD0                            @no_floor:
00007CD0                            
00007CD0 2D46 0010                   		move.l	d6,obj_x_spd(a6)
00007CD4 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00007CD8                             		
00007CD8                            ; ----------------------------------
00007CD8                            ; Check if touched
00007CD8                            ; ----------------------------------
00007CD8                            
00007CD8                            @check_touch:
00007CD8 6100 E82C                  		bsr	objTouch_Top
00007CDC 4A00                       		tst.b	d0
00007CDE 6600                       		bne.s	@touch_flag
00007CE0 6100 E8C2                  		bsr	objTouch_Bottom
00007CE4 4A00                       		tst.b	d0
00007CE6 6600                       		bne.s	@touch_flag
00007CE8                            		
00007CE8 6100 E95A                  		bsr	objTouch_Sides
00007CEC 4A00                       		tst.b	d0
00007CEE 6600                       		bne.s	@touch_flag
00007CF0 4840                       		swap	d0
00007CF2 4A00                       		tst.b	d0
00007CF4 6600                       		bne.s	@touch_flag
00007CF6 4E75                       		rts
00007CF8                            		
00007CF8                            ; -----------------------------------
00007CF8                            
00007CF8                            @touch_flag:
00007CF8 6100 EB2E                  		bsr	objPlyrHurtKill
00007CFC 6700                       		beq.s	@return
00007CFE 323C 6420                     		move.w	#varVramDadou,d1
00007D02 142E 0020                   		move.b	obj_frame(a6),d2
00007D06 203C 0000 0000             		move.l	#map_dadou,d0
00007D0C 260C                       		move.l	a4,d3
00007D0E 6100 EF0C                  		bsr	objAction_SetStomp
00007D12 6000 DEEE                  		bra	Object_IsGone
00007D16                            @return:
00007D16 4E75                       		rts
00007D18                            		
00007D18                            ; =================================================================
00007D18                            
00007D18                            @WallCheck:
00007D18 6100 E0F4                     		bsr	object_FindPrz_Wall
00007D1C 4A00                          		tst.b	d0
00007D1E 6600                          		bne.s	@foundprzwl
00007D20 6100 E0F8                    		bsr	object_FindCol_Wall
00007D24 4A00                         		tst.b	d0
00007D26 6700                         		beq.s	@chk_right
00007D28                            @foundprzwl:
00007D28 0800 0006                    		btst	#6,d0
00007D2C 6600                         		bne.s	@chk_right
00007D2E                            ;    		cmp.b	#2,d0
00007D2E                            ;    		blt.s	@chk_right
00007D2E 6100 E7BA                    		bsr	object_SetCol_Wall
00007D32                            ;    		bra.s	@endchk
00007D32                            @chk_right:
00007D32                            
00007D32                            		;TODO: Prize check
00007D32                            ;   		bsr	object_FindPrz_WallSides
00007D32                            ;   		tst.b	d0
00007D32                            ;   		bne.s	@przrotx
00007D32                            ;   		move.l	d1,d0
00007D32                            ;   		tst.b	d0
00007D32                            ;   		bne.s	@przrotx
00007D32                            
00007D32 6100 E336                    		bsr	object_FindCol_WallSides
00007D36 0800 0006                    		btst	#6,d0
00007D3A 6600                         		bne.s	@endchk
00007D3C 0801 0006                    		btst	#6,d1
00007D40 6600                         		bne.s	@endchk
00007D42 4A00                         		tst.b	d0
00007D44 6600                         		bne.s	@leftws
00007D46 4A01                         		tst.b	d1
00007D48 6600                         		bne.s	@rightws
00007D4A 6000                          		bra.s	@endchk
00007D4C                            @przrotx:
00007D4C                            	
00007D4C                            @leftws:
00007D4C 0C01 0002                  		cmp.b	#2,d1
00007D50 6C00                       		bge.s	@endchk
00007D52 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00007D58 6700                       		beq.s	@endchk
00007D5A 6000                       		bra.s	@rotatex
00007D5C                            @rightws:
00007D5C 0C01 0002                  		cmp.b	#2,d1
00007D60 6C00                       		bge.s	@endchk
00007D62 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00007D68 6600                       		bne.s	@endchk
00007D6A                            @rotatex:
00007D6A 4486                        		neg.l	d6
00007D6C 086E 0000 001E              		bchg	#bitobj_flipH,obj_status(a6)
00007D72                            @endchk:
00007D72 4E75                       		rts
00007D74                            		
00007D74                            ; ------------------------------------------------
00007D74                            ; Data
00007D74                            ; ------------------------------------------------
00007D74                            		
00007D74                            ; ----------------------------------------
00007D74                            
00007D74                            ani_dadou:
00007D74 0000                       		dc.w @Idle-ani_dadou
00007D76 0000                       		dc.w @Walk-ani_dadou
00007D78                            		even
00007D78                            @Idle:
00007D78 08                          		dc.b 8
00007D79 0000 0000 0000 0000 0001+   		dc.b 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
00007D8A FF                         		dc.b $FF
00007D8C 00                         		even
00007D8C                            @Walk:
00007D8C 06                          		dc.b 6
00007D8D 0203 0405 0607 0809         		dc.b 2,3,4,5,6,7,8,9
00007D95 FF                         		dc.b $FF
00007D96                            		even	
00007D96                            		even	
00007D96                               		include	"engine/modes/level/data/objects/pikudo/code.asm"
00007D96                            ; =================================================================
00007D96                            ; Object
00007D96                            ; 
00007D96                            ; Pikudo
00007D96                            ; =================================================================
00007D96                            
00007D96                            ; =================================================================
00007D96                            ; ------------------------------------------------
00007D96                            ; Variables
00007D96                            ; ------------------------------------------------
00007D96                            
00007D96 =000004D0                  varVramPikudo	equ	$4D0
00007D96 =000000AA                  varTimerWait	equ	170
00007D96 =0000001E                  varTimerAttck	equ	30
00007D96                            
00007D96                            ; =================================================================
00007D96                            ; ------------------------------------------------
00007D96                            ; RAM
00007D96                            ; ------------------------------------------------
00007D96                            
00007D96                            		rsset Obj_Ram
00007D96 =00000024                  timerpik1	rs.w 1
00007D96 =00000026                  timerpik2	rs.w 1
00007D96 =00000028                  lastx		rs.w 1
00007D96 =0000002A                  lasty		rs.w 1
00007D96                            
00007D96                            ; =================================================================
00007D96                            ; ------------------------------------------------
00007D96                            ; Code start
00007D96                            ; ------------------------------------------------
00007D96                            
00007D96                            Obj_Pikudo:
00007D96 7000                        		moveq	#0,d0
00007D98 102E 001D                   		move.b	obj_index(a6),d0
00007D9C D040                        		add.w	d0,d0
00007D9E 323B 0000                   		move.w	@Index(pc,d0.w),d1
00007DA2 4EBB 1000                   		jsr	@Index(pc,d1.w)
00007DA6                             		
00007DA6 6100 DE7A                   		bsr	Object_OffCheck
00007DAA 203C 04D0 0000                		move.l	#(varVramPikudo<<16),d0
00007DB0 223C 0000 0000              		move.l	#ani_pikudo,d1
00007DB6 6100 DED6                  		bsr	Object_Animate
00007DBA                            		
00007DBA 203C 04D0 0000                 		move.l	#(varVramPikudo<<16),d0
00007DC0 102E 0020                   		move.b	obj_frame(a6),d0
00007DC4 223C 0000 0000             		move.l	#map_pikudo,d1
00007DCA 6000 DB16                   		bra	Object_Show
00007DCE                             		
00007DCE                            ; ------------------------------------------------
00007DCE                            
00007DCE                            @Index:
00007DCE 0000                       		dc.w @Init-@Index
00007DD0 0000                       		dc.w @Stand-@Index
00007DD2 0000                       		dc.w @Attack-@Index
00007DD4                            		even
00007DD4                            		
00007DD4                            ; =================================================================
00007DD4                            ; ------------------------------------------------
00007DD4                            ; Index $00: Init
00007DD4                            ; ------------------------------------------------
00007DD4                            
00007DD4                            @Init:
00007DD4 062E 0001 001D             		add.b	#1,obj_index(a6)
00007DDA 422E 001A                  		clr.b	obj_anim_id(a6)
00007DDE 422E 0020                  		clr.b	obj_frame(a6)
00007DE2 2D7C 0101 0202 0004        		move.l	#$01010202,obj_size(a6)
00007DEA 42AE 0010                  		clr.l	obj_x_spd(a6)
00007DEE 3D7C 00AA 0024             		move.w	#varTimerWait,timerpik1(a6)
00007DF4 3D6E 0008 0028             		move.w	obj_x(a6),lastx(a6)
00007DFA 3D6E 000C 002A             		move.w	obj_y(a6),lasty(a6)
00007E00                            		
00007E00                            ; =================================================================
00007E00                            ; ------------------------------------------------                  
00007E00                            ; Index $01: Stand
00007E00                            ; ------------------------------------------------
00007E00                            
00007E00                            @Stand:
00007E00 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00007E06 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
00007E0C 302C 0008                  		move.w	obj_x(a4),d0
00007E10 B06E 0008                  		cmp.w	obj_x(a6),d0
00007E14 6D00                       		blt.s	@leftside
00007E16 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
00007E1C                            @leftside:
00007E1C                            
00007E1C 6100 E0C8                  		bsr	object_FindCol_Ceiling
00007E20 4A00                       		tst.b	d0
00007E22 6600                       		bne.s	@ignore
00007E24 6100 E4B4                  		bsr	object_FindCol_CeilingSides
00007E28 4A00                       		tst.b	d0
00007E2A 6600                       		bne.s	@ignore	
00007E2C 4A01                       		tst.b	d1
00007E2E 6600                       		bne.s	@ignore
00007E30                            		
00007E30 302E 000C                  		move.w	obj_y(a6),d0
00007E34 B06E 002A                  		cmp.w	lasty(a6),d0
00007E38 6F00                       		ble.s	@ignore
00007E3A                            		
00007E3A                            ; 		
00007E3A                            ; 		bsr	object_FindPrz_CeilingSides
00007E3A                            ; 		move.l	d0,d2
00007E3A                            ; 		bsr	object_FindPrz_CeilingSides
00007E3A                            ; 		or.l	d1,d0
00007E3A                            ; 		or.l	d2,d0
00007E3A                            ; 		btst	#7,d0
00007E3A                            ; 		bne.s	@cont2
00007E3A                            ; 		btst	#6,d0
00007E3A                            ; 		bne.s	@cont2
00007E3A                            ; 		tst.b	d0
00007E3A                            ; 		bne.s	@ignore
00007E3A                            ; @cont2:
00007E3A                            
00007E3A 046E 0001 000C             		sub.w	#1,obj_y(a6)
00007E40                            @ignore:
00007E40                            
00007E40 046E 0001 0024             		sub.w	#1,timerpik1(a6)
00007E46 6A00                       		bpl.s	@waitpik1
00007E48                            		
00007E48 203C 0000 0000               		move.l	#SndSfx_BEEBUZZ,d0
00007E4E 7202                         		moveq 	#2,d1
00007E50 7401                         		moveq	#1,d2
00007E52 6100 95E8                    		bsr	Audio_Track_play
00007E56                              		
00007E56 1D7C 0002 001D             		move.b	#2,obj_index(a6)
00007E5C 3D7C 001E 0024             		move.w	#varTimerAttck,timerpik1(a6)
00007E62 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
00007E68 2D7C FFFE 1000 0010        		move.l	#-$1F000,obj_x_spd(a6)
00007E70 2D7C 0002 0000 0014        		move.l	#$20000,obj_y_spd(a6)
00007E78 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00007E7E 6700                       		beq.s	@waitpik1
00007E80 44AE 0010                  		neg.l	obj_x_spd(a6)
00007E84                            
00007E84                            @waitpik1:
00007E84 6000 0000                  		bra	@check_touch
00007E88                            		
00007E88                            ; =================================================================
00007E88                            ; ------------------------------------------------                  
00007E88                            ; Index $02: Attack
00007E88                            ; ------------------------------------------------
00007E88                            
00007E88                            @Attack:
00007E88 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00007E8C 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00007E90                            		
00007E90 DDAE 0008                  		add.l	d6,obj_x(a6)
00007E94 DFAE 000C                  		add.l	d7,obj_y(a6)
00007E98                            		
00007E98                            ; Check for floor or walls
00007E98                            
00007E98 6100 DF12                  		bsr	object_FindCol_Floor
00007E9C 4A00                       		tst.b	d0
00007E9E 6600                       		bne.s	@forceend
00007EA0 6100 DEFE                  		bsr	object_FindPrz_Floor
00007EA4 0800 0007                  		btst	#7,d0
00007EA8 6600                       		bne.s	@cont
00007EAA 0800 0006                  		btst	#6,d0
00007EAE 6600                       		bne.s	@cont	
00007EB0 4A00                       		tst.b	d0
00007EB2 6600                       		bne.s	@forceend
00007EB4                            @cont:
00007EB4                            
00007EB4 6100 DF64                  		bsr	object_FindCol_Wall
00007EB8 4A00                       		tst.b	d0
00007EBA 6684                       		bne.s	@ignore
00007EBC 6100 E1AC                  		bsr	object_FindCol_WallSides
00007EC0 4A00                       		tst.b	d0
00007EC2 6600 FF7C                  		bne	@ignore		
00007EC6 4A01                       		tst.b	d1
00007EC8 6600 FF76                  		bne	@ignore
00007ECC                            		
00007ECC 6100 E190                  		bsr	object_FindPrz_WallSides
00007ED0 2400                       		move.l	d0,d2
00007ED2 6100 E18A                  		bsr	object_FindPrz_WallSides
00007ED6 8081                       		or.l	d1,d0
00007ED8 8082                       		or.l	d2,d0
00007EDA 0800 0007                  		btst	#7,d0
00007EDE 6600                       		bne.s	@cont3
00007EE0 0800 0006                  		btst	#6,d0
00007EE4 6600                       		bne.s	@cont3
00007EE6 4A00                       		tst.b	d0
00007EE8 6600                       		bne.s	@forceend
00007EEA                            @cont3:
00007EEA                            
00007EEA 046E 0001 0024             		sub.w	#1,timerpik1(a6)
00007EF0 6A00                       		bpl.s	@waitpik2
00007EF2 6000                       		bra.s	@end2
00007EF4                            @forceend:
00007EF4 046E 0008 002A             		sub.w	#8,lasty(a6)
00007EFA                            @end2:
00007EFA                            
00007EFA 1D7C 0001 001D             		move.b	#1,obj_index(a6)
00007F00 3D7C 00AA 0024             		move.w	#varTimerWait,timerpik1(a6)
00007F06 422E 001A                  		clr.b	obj_anim_id(a6)
00007F0A 4286                       		clr.l	d6
00007F0C 4287                       		clr.l	d7
00007F0E                            @waitpik2:
00007F0E                            
00007F0E 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00007F12 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00007F16 6000 0000                  		bra	@check_touch
00007F1A                            		
00007F1A                            ; =================================================================
00007F1A                            ; ------------------------------------------------
00007F1A                            ; Subs
00007F1A                            ; ------------------------------------------------
00007F1A                            
00007F1A                            ; @Go_Stand:
00007F1A                            ; 		clr.l	obj_x_spd(a6)
00007F1A                            ; 		clr.b	obj_anim_id(a6)
00007F1A                            ; 		move.b	#1,obj_index(a6)
00007F1A                            ; 		rts
00007F1A                            ; 	
00007F1A                            ; ; --------------------------------------
00007F1A                            ; 
00007F1A                            ; @Go_Walk:
00007F1A                            ; 		move.l	#$4000,obj_x_spd(a6)
00007F1A                            ; 		btst	#bitobj_flipH,obj_status(a6)
00007F1A                            ; 		bne.s	@right
00007F1A                            ; 		move.l	#-$4000,obj_x_spd(a6)
00007F1A                            ; @right:
00007F1A                            ; 		move.b	#1,obj_anim_id(a6)
00007F1A                            ; 		move.b	#2,obj_index(a6)
00007F1A                            ; 		rts
00007F1A                            ; 	
00007F1A                            ; ; ------------------------------------------------
00007F1A                            ; ; Pyhsics
00007F1A                            ; ; ------------------------------------------------
00007F1A                            ; 
00007F1A                            ; @Pyhsics:
00007F1A                            ; 		lea	(RAM_LvlPlanes),a5
00007F1A                            ;  		move.l	obj_x_spd(a6),d6
00007F1A                            ;  		move.l	obj_y_spd(a6),d7
00007F1A                            ;  		
00007F1A                            ;  		add.l	d6,obj_x(a6)
00007F1A                            ;  		bsr	@WallCheck
00007F1A                            ; 		
00007F1A                            ; ; ----------------------------------
00007F1A                            ; 
00007F1A                            ;   		add.l	#$8000,d7
00007F1A                            ;   		cmp.l	#$40000,d7
00007F1A                            ;   		blt.s	@low_y
00007F1A                            ;   		move.l	#$40000,d7
00007F1A                            ; @low_y:
00007F1A                            ;   		add.l	d7,obj_y(a6)
00007F1A                            ;   		
00007F1A                            ; ; 		lea	(RAM_LvlPlanes),a5
00007F1A                            ; ; 		move.w	lvl_size_y(a5),d0
00007F1A                            ; ; 		lsl.w	#4,d0
00007F1A                            ; ; 		move.w	obj_y(a6),d1
00007F1A                            ; ; 		moveq	#0,d2
00007F1A                            ; ; 		move.b	obj_size+2(a6),d2
00007F1A                            ; ; 		lsl.w	#3,d2
00007F1A                            ; ; 		sub.w	d2,d1
00007F1A                            ; ; 		cmp.w	d0,d1
00007F1A                            ; ; 		bge	@delete
00007F1A                            ; ; 		
00007F1A                            ;   		tst.l	d7
00007F1A                            ;   		bmi.s	@no_floor
00007F1A                            ;   
00007F1A                            ; 		bsr	object_FindPrz_Floor
00007F1A                            ; 		move.l	d0,d2
00007F1A                            ; 		tst.b	d0
00007F1A                            ; 		bne.s	@from_prize
00007F1A                            ;  		bsr 	object_FindPrz_FloorSides
00007F1A                            ; 		tst.b	d0
00007F1A                            ; 		bne	@from_prize;@swap_dir_wl
00007F1A                            ; 		move.l	d1,d0
00007F1A                            ; 		tst.b	d0
00007F1A                            ; 		bne	@from_prize
00007F1A                            ; 		
00007F1A                            ; 		bsr	object_FindCol_Floor
00007F1A                            ; 		move.l	d0,d2
00007F1A                            ; 		tst.b	d0
00007F1A                            ; 		bne.s	@set_floor
00007F1A                            ;  		bsr 	object_FindCol_FloorSides
00007F1A                            ; 		tst.b	d0
00007F1A                            ; 		bne	@set_floor;@swap_dir_wl
00007F1A                            ; 		move.l	d1,d0
00007F1A                            ; 		tst.b	d0
00007F1A                            ; 		beq	@no_floor
00007F1A                            ; 		
00007F1A                            ; 		bra.s	@set_floor
00007F1A                            ; ; @swap_dir_wl:
00007F1A                            ; ; 		neg.l	d6
00007F1A                            ; ; 		bchg	#bitobj_flipH,obj_status(a6)
00007F1A                            ; ; 		bra.s	@no_floor
00007F1A                            ; 
00007F1A                            ; @from_prize:
00007F1A                            ; 		cmp.b	#$40,d0
00007F1A                            ; 		bge.s	@set_floor
00007F1A                            ; 		move.b	#1,d0
00007F1A                            ; 		
00007F1A                            ; @set_floor:
00007F1A                            ;   		bsr 	object_SetCol_Floor
00007F1A                            ;   		
00007F1A                            ; @no_floor:
00007F1A                            ; 
00007F1A                            ;  		move.l	d6,obj_x_spd(a6)
00007F1A                            ;  		move.l	d7,obj_y_spd(a6)
00007F1A                             		
00007F1A                            ; ----------------------------------
00007F1A                            ; Check if touched
00007F1A                            ; ----------------------------------
00007F1A                            
00007F1A                            @check_touch:
00007F1A 6100 E5EA                  		bsr	objTouch_Top
00007F1E 4A00                       		tst.b	d0
00007F20 6600                       		bne.s	@touch_flag
00007F22 6100 E680                  		bsr	objTouch_Bottom
00007F26 4A00                       		tst.b	d0
00007F28 6600                       		bne.s	@touch_flag
00007F2A                            		
00007F2A 6100 E718                  		bsr	objTouch_Sides
00007F2E 4A00                       		tst.b	d0
00007F30 6600                       		bne.s	@touch_flag;_side
00007F32 4840                       		swap	d0
00007F34 4A00                       		tst.b	d0
00007F36 6600                       		bne.s	@touch_flag;_side
00007F38 4E75                       		rts
00007F3A                            		
00007F3A                            ; -----------------------------------
00007F3A                            
00007F3A                            @touch_flag:
00007F3A 6100 E8EC                  		bsr	objPlyrHurtKill
00007F3E 6700                       		beq.s	@return
00007F40                            		
00007F40 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
00007F46 323C 04D0                     		move.w	#varVramPikudo,d1
00007F4A 142E 0020                   		move.b	obj_frame(a6),d2
00007F4E 203C 0000 0000             		move.l	#map_pikudo,d0
00007F54 260C                       		move.l	a4,d3
00007F56 6100 ECC4                  		bsr	objAction_SetStomp
00007F5A 6000 DCA6                  		bra	Object_IsGone
00007F5E                            @return:
00007F5E 4E75                       		rts
00007F60                            		
00007F60                            ; =================================================================
00007F60                            
00007F60                            @WallCheck:
00007F60 6100 DEAC                     		bsr	object_FindPrz_Wall
00007F64 4A00                          		tst.b	d0
00007F66 6600                          		bne.s	@foundprzwl
00007F68 6100 DEB0                    		bsr	object_FindCol_Wall
00007F6C 4A00                         		tst.b	d0
00007F6E 6700                         		beq.s	@chk_right
00007F70                            @foundprzwl:
00007F70 0800 0006                    		btst	#6,d0
00007F74 6600                         		bne.s	@chk_right
00007F76                            ;    		cmp.b	#2,d0
00007F76                            ;    		blt.s	@chk_right
00007F76 6100 E572                    		bsr	object_SetCol_Wall
00007F7A                            ;    		bra.s	@endchk
00007F7A                            @chk_right:
00007F7A                            
00007F7A                            		;TODO: Prize check
00007F7A                            ;   		bsr	object_FindPrz_WallSides
00007F7A                            ;   		tst.b	d0
00007F7A                            ;   		bne.s	@przrotx
00007F7A                            ;   		move.l	d1,d0
00007F7A                            ;   		tst.b	d0
00007F7A                            ;   		bne.s	@przrotx
00007F7A                            
00007F7A 6100 E0EE                    		bsr	object_FindCol_WallSides
00007F7E 0800 0006                    		btst	#6,d0
00007F82 6600                         		bne.s	@endchk
00007F84 0801 0006                    		btst	#6,d1
00007F88 6600                         		bne.s	@endchk
00007F8A 4A00                         		tst.b	d0
00007F8C 6600                         		bne.s	@leftws
00007F8E 4A01                         		tst.b	d1
00007F90 6600                         		bne.s	@rightws
00007F92 6000                          		bra.s	@endchk
00007F94                            @przrotx:
00007F94                            	
00007F94                            @leftws:
00007F94 0C01 0002                  		cmp.b	#2,d1
00007F98 6C00                       		bge.s	@endchk
00007F9A 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00007FA0 6700                       		beq.s	@endchk
00007FA2 6000                       		bra.s	@rotatex
00007FA4                            @rightws:
00007FA4 0C01 0002                  		cmp.b	#2,d1
00007FA8 6C00                       		bge.s	@endchk
00007FAA 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00007FB0 6600                       		bne.s	@endchk
00007FB2                            @rotatex:
00007FB2 4486                        		neg.l	d6
00007FB4 086E 0000 001E              		bchg	#bitobj_flipH,obj_status(a6)
00007FBA                            @endchk:
00007FBA 4E75                       		rts
00007FBC                            
00007FBC                            ; ------------------------------------------------
00007FBC                            ; Data
00007FBC                            ; ------------------------------------------------
00007FBC                            		
00007FBC                            ; ----------------------------------------
00007FBC                            
00007FBC                            ani_pikudo:
00007FBC 0000                       		dc.w @Idle-ani_pikudo
00007FBE 0000                       		dc.w @Attack-ani_pikudo
00007FC0                            		even
00007FC0                            @Idle:
00007FC0 03                          		dc.b 3
00007FC1 0001 0001 0001 0001 0001+   		dc.b 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2
00007FE0 0100 0100 0100 0100 0100+   		dc.b 1,0,1,0,1,0,1,0,1,0,1
00007FEB FF                         		dc.b $FF
00007FEC                            		even
00007FEC                            @Attack:
00007FEC 02                          		dc.b 2
00007FED 0304                        		dc.b 3,4
00007FEF FF                         		dc.b $FF
00007FF0                            		even
00007FF0                            		even
00007FF0                               		include	"engine/modes/level/data/objects/platform/code.asm"
00007FF0                            ; =================================================================
00007FF0                            ; Object
00007FF0                            ; 
00007FF0                            ; Platforms
00007FF0                            ; =================================================================
00007FF0                            
00007FF0                            ; =================================================================
00007FF0                            ; ------------------------------------------------
00007FF0                            ; Variables
00007FF0                            ; ------------------------------------------------
00007FF0                            
00007FF0 =00002530                  varVramPlatfrm	equ	$2000|$530
00007FF0                            
00007FF0                            ; =================================================================
00007FF0                            ; ------------------------------------------------
00007FF0                            ; RAM
00007FF0                            ; ------------------------------------------------
00007FF0                            
00007FF0                            		rsset obj_ram
00007FF0 =00000024                  last_x		rs.w	1
00007FF0 =00000026                  last_y		rs.w	1
00007FF0 =00000028                  tanvalue	rs.w	1
00007FF0                            
00007FF0                            ; =================================================================
00007FF0                            ; ------------------------------------------------
00007FF0                            ; Code start
00007FF0                            ; ------------------------------------------------
00007FF0                            
00007FF0                            Obj_Platform:
00007FF0 7000                        		moveq	#0,d0
00007FF2 102E 001D                   		move.b	obj_index(a6),d0
00007FF6 D040                        		add.w	d0,d0
00007FF8 323B 0000                   		move.w	@Index(pc,d0.w),d1
00007FFC 4EBB 1000                   		jsr	@Index(pc,d1.w)
00008000                             		
00008000                             		;TODO: si hago este check se 
00008000                             		;desincronizan
00008000                            ;  		bsr	Object_OffCheck
00008000                            
00008000                            ;    		move.l	#(varVramPlatfrm<<16),d0
00008000                            ;  		move.l	#ani_chamoy,d1
00008000                            ; 		bsr	Object_Animate
00008000 203C 2530 0000              		move.l	#(varVramPlatfrm<<16),d0
00008006 102E 0020                   		move.b	obj_frame(a6),d0
0000800A 223C 0000 0000             		move.l	#objMap_platform,d1
00008010 6000 D8D0                   		bra	Object_Show
00008014                             		
00008014                            ; =================================================================
00008014                            ; ------------------------------------------------
00008014                            ; Code index
00008014                            ; ------------------------------------------------
00008014                            
00008014                            @Index:
00008014 0000                       		dc.w	@Init-@Index
00008016 0000                       		dc.w	@Main-@Index
00008018                            		even
00008018                            		
00008018                            ; =================================================================
00008018                            ; ------------------------------------------------
00008018                            ; Sub-id
00008018                            ; ------------------------------------------------
00008018                            
00008018                            @id_list:
00008018 0000 0000                  		dc.w @left_right_sin-@id_list,0
0000801C 0303 0100                  		dc.l $03030100
00008020 0000 0000                  		dc.w @left_right_cos-@id_list,0
00008024 0303 0100                  		dc.l $03030100
00008028 0000 0000                  		dc.w @up_down_sin-@id_list,0
0000802C 0303 0100                  		dc.l $03030100
00008030 0000 0000                  		dc.w @up_down_cos-@id_list,0
00008034 0303 0100                  		dc.l $03030100
00008038 0000 0000                  		dc.w @rotate_right-@id_list,0
0000803C 0303 0100                  		dc.l $03030100
00008040 0000 0000                  		dc.w @rotate_left-@id_list,0
00008044 0303 0100                  		dc.l $03030100	
00008048 0000 0000                  		dc.w @stepfall-@id_list,0
0000804C 0303 0100                  		dc.l $03030100
00008050                            		
00008050                            ; =================================================================
00008050                            ; ------------------------------------------------
00008050                            ; Index $00: Init
00008050                            ; ------------------------------------------------
00008050                            
00008050                            @Init:
00008050 062E 0001 001D             		add.b	#1,obj_index(a6)
00008056 2D7C 0303 0001 0004        		move.l	#$03030001,obj_size(a6)		;failsafe
0000805E 2D7C 0000 8000 0014        		move.l	#$8000,obj_y_spd(a6)
00008066 3D6E 0008 0024             		move.w	obj_x(a6),last_x(a6)
0000806C 3D6E 000C 0026             		move.w	obj_y(a6),last_y(a6)
00008072 422E 0020                  		clr.b	obj_frame(a6)
00008076                            		
00008076                            ; =================================================================
00008076                            ; ------------------------------------------------                  
00008076                            ; Index $01: Main
00008076                            ; ------------------------------------------------
00008076                            
00008076                            @Main:
00008076 7A00                        		moveq	#0,d5
00008078                             		
00008078 7000                       		moveq	#0,d0
0000807A 102E 001F                  		move.b	obj_subid(a6),d0
0000807E E748                       		lsl.w	#3,d0
00008080 2D7B 009A 0004              		move.l	@id_list+4(pc,d0.w),obj_size(a6)
00008086 323B 0090                  		move.w	@id_list(pc,d0.w),d1
0000808A 4EBB 108C                  		jsr	@id_list(pc,d1.w)
0000808E                             		
0000808E 6100 E476                  		bsr	objTouch_Top
00008092 200C                       		move.l	a4,d0
00008094 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
0000809A 6600                       		bne.s	@return
0000809C 4A00                       		tst.b	d0
0000809E 6700                       		beq.s	@return
000080A0 0C2C 0002 001D             		cmp.b	#varPlyrMdDead,obj_index(a4)
000080A6 6700                       		beq.s	@return
000080A8 6100 E67A                  		bsr	objPlyrSetFloor
000080AC 4AAC 0014                  		tst.l	obj_y_spd(a4)
000080B0 6B00                       		bmi.s	@return
000080B2 9B6C 0008                     		sub.w	d5,obj_x(a4)
000080B6                            @return:
000080B6 4E75                       		rts
000080B8                             	
000080B8                            ; ---------------------------
000080B8                            ; Left/Right
000080B8                            ; ---------------------------
000080B8                            	
000080B8                            @left_right_cos:
000080B8 302E 0028                    		move.w	tanvalue(a6),d0
000080BC                            
000080BC 6000 0000                    		bra	@do_lr
000080C0                              
000080C0                            @left_right_sin:
000080C0 302E 0028                    		move.w	tanvalue(a6),d0
000080C4 4440                         		neg.w	d0
000080C6                              		
000080C6                            @do_lr:
000080C6 6100 8BE6                    		bsr	CalcSine
000080CA E640                         		asr.w	#3,d0
000080CC 342E 0024                    		move.w	last_x(a6),d2
000080D0 D440                         		add.w	d0,d2
000080D2 3A2E 0008                    		move.w	obj_x(a6),d5
000080D6 9A42                         		sub.w	d2,d5
000080D8 3D42 0008                    		move.w	d2,obj_x(a6)
000080DC                              		
000080DC 066E 0001 0028              		add.w	#1,tanvalue(a6)
000080E2 4E75                         		rts
000080E4                             
000080E4                            ; ---------------------------
000080E4                            ; Up/Down
000080E4                            ; ---------------------------
000080E4                            
000080E4                            @up_down_cos:
000080E4 302E 0028                  		move.w	tanvalue(a6),d0
000080E8 4440                       		neg.w	d0
000080EA 6000                       		bra.s	@do_ud
000080EC                            @up_down_sin:
000080EC 302E 0028                    		move.w	tanvalue(a6),d0
000080F0                            @do_ud:
000080F0 6100 8BBC                    		bsr	CalcSine
000080F4 E640                         		asr.w	#3,d0
000080F6 342E 0026                    		move.w	last_y(a6),d2
000080FA D440                         		add.w	d0,d2
000080FC                            ;   		move.w	obj_y(a6),d4
000080FC                            ;   		sub.w	d2,d4
000080FC 3D42 000C                     		move.w	d2,obj_y(a6)
00008100                            
00008100 066E 0001 0028              		add.w	#1,tanvalue(a6)
00008106 4E75                        		rts
00008108                             		
00008108                            ; ---------------------------
00008108                            ; rotate_right
00008108                            ; ---------------------------
00008108                            
00008108                            @rotate_right:
00008108                            ;   		move.w	#$20,d4
00008108                              		
00008108 302E 0028                    		move.w	tanvalue(a6),d0
0000810C 6100 8BA0                    		bsr	CalcSine
00008110 C1FC 0040                    		muls	#$40,d0
00008114 E080                         		asr.l	#8,d0
00008116 342E 0024                    		move.w	last_x(a6),d2
0000811A D440                         		add.w	d0,d2
0000811C 3A2E 0008                    		move.w	obj_x(a6),d5
00008120 9A42                         		sub.w	d2,d5
00008122 3D42 0008                    		move.w	d2,obj_x(a6)
00008126                               		
00008126 302E 0028                    		move.w	tanvalue(a6),d0
0000812A E348                         		lsl.w	#1,d0
0000812C 6100 8B80                    		bsr	CalcSine
00008130 C3FC 0030                    		muls	#$30,d1
00008134 E081                         		asr.l	#8,d1
00008136 342E 0026                    		move.w	last_y(a6),d2
0000813A D441                         		add.w	d1,d2
0000813C 3D42 000C                     		move.w	d2,obj_y(a6)
00008140                            
00008140 066E 0001 0028              		add.w	#1,tanvalue(a6)
00008146 4E75                        		rts
00008148                             		
00008148                            ; ---------------------------
00008148                            ; rotate_left
00008148                            ; ---------------------------
00008148                            
00008148                            @rotate_left:
00008148 066E 0001 0028              		add.w	#1,tanvalue(a6)
0000814E 4E75                        		rts
00008150                            
00008150                            ; ---------------------------
00008150                            ; StepFall
00008150                            ; ---------------------------
00008150                            
00008150                            @stepfall:
00008150 6100 E3B4                  		bsr	objTouch_Top
00008154 4A00                       		tst.b	d0
00008156 6700 FF5E                  		beq	@return
0000815A 200C                       		move.l	a4,d0
0000815C 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
00008162 6600 FF52                  		bne	@return
00008166 4AAC 0014                  		tst.l	obj_y_spd(a4)
0000816A 6B00 FF4A                  		bmi	@return
0000816E                            		
0000816E 066E 0003 000C             		add.w	#3,obj_y(a6)
00008174 4E75                       		rts
00008174 4E75                       		rts
00008176                               		include	"engine/modes/level/data/objects/prize/code.asm"
00008176                            ; =================================================================
00008176                            ; Object
00008176                            ; 
00008176                            ; The prize
00008176                            ; =================================================================
00008176                            
00008176                            ; =================================================================
00008176                            ; ------------------------------------------------
00008176                            ; Variables
00008176                            ; ------------------------------------------------
00008176                            
00008176 =0000C5A8                  vramCoinRed	equ	$C000|$5A8
00008176 =0000C5AC                  vramCoinBlue	equ	$C000|$5AC
00008176 =0000C5B0                  vram1up		equ	$C000|$5B0
00008176 =0000C594                  vramJmpBlock	equ	$C000|$594
00008176                            
00008176                            ; =================================================================
00008176                            ; ------------------------------------------------
00008176                            ; RAM
00008176                            ; ------------------------------------------------
00008176                            
00008176                            		rsset obj_ram
00008176 =00000024                  this_pos	rs.l 1			; Block type and X/Y position
00008176 =00000028                  this_vram	rs.w 1			; Vram (top left)
00008176 =0000002A                  this_counter	rs.w 1			; Counter (coins, etc.)
00008176                            
00008176 =0000002C                  y_coin_spd	rs.l 1
00008176 =00000030                  y_pos_coin	rs.l 1
00008176 =00000034                  x_pos_main	rs.w 1
00008176 =00000036                  y_pos_main	rs.w 1
00008176 =00000038                  x_pos_l		rs.w 1
00008176 =0000003A                  x_pos_r		rs.w 1
00008176 =0000003C                  tmr_1		rs.w 1
00008176 =0000003E                  block_flags	rs.b 1
00008176                            
00008176                            ; =================================================================
00008176                            ; ------------------------------------------------
00008176                            ; Code start
00008176                            ; ------------------------------------------------
00008176                            
00008176                            obj_prize:
00008176 7000                        		moveq	#0,d0
00008178 102E 001D                   		move.b	obj_index(a6),d0
0000817C D040                        		add.w	d0,d0
0000817E 323B 0000                   		move.w	@Index(pc,d0.w),d1
00008182 4EFB 1000                   		jmp	@Index(pc,d1.w)
00008186                             		
00008186                            ; ------------------------------------------------
00008186                            
00008186                            @Index:
00008186 0000                       		dc.w	@Init-@Index
00008188 0000                       		dc.w	@Main-@Index
0000818A                            		even
0000818A                            		
0000818A                            ; =================================================================
0000818A                            ; ------------------------------------------------
0000818A                            ; Index $00: Init
0000818A                            ; ------------------------------------------------
0000818A                            
0000818A                            @Init:
0000818A 062E 0001 001D             		add.b	#1,obj_index(a6)
00008190 202E 0024                  		move.l	this_pos(a6),d0
00008194 4840                        		swap	d0
00008196 0240 FFF0                   		and.w	#$FFF0,d0
0000819A 3D40 0008                   		move.w	d0,obj_x(a6)
0000819E 4840                        		swap	d0
000081A0 E848                        		lsr.w	#4,d0
000081A2 0240 FFF0                   		and.w	#$FFF0,d0
000081A6 3D40 000C                   		move.w	d0,obj_y(a6)
000081AA                            
000081AA 202E 0024                   		move.l	this_pos(a6),d0
000081AE 6100 D0BC                  		bsr	Level_HidePrize
000081B2                            
000081B2 2D7C FFFC 0000 0014         		move.l	#-$40000,obj_y_spd(a6)
000081BA 4A2E 001F                   		tst.b	obj_subid(a6)
000081BE 6700                        		beq.s	@not_brick
000081C0 2D7C FFFE 0000 0014         		move.l	#-$20000,obj_y_spd(a6)
000081C8                            @not_brick:
000081C8 3D6E 0008 0034              		move.w	obj_x(a6),x_pos_main(a6)
000081CE 302E 000C                   		move.w	obj_y(a6),d0
000081D2 3D40 0036                   		move.w	d0,y_pos_main(a6)
000081D6 0440 0010                   		sub.w	#$10,d0
000081DA 4840                        		swap	d0
000081DC 2D40 0030                   		move.l	d0,y_pos_coin(a6)
000081E0                             		
000081E0 3D6E 0008 0038              		move.w	obj_x(a6),x_pos_l(a6)
000081E6 3D6E 0008 003A              		move.w	obj_x(a6),x_pos_r(a6)
000081EC 066E 0008 003A              		add.w	#8,x_pos_r(a6)
000081F2 2D7C FFFC 0000 002C         		move.l	#-$40000,y_coin_spd(a6)
000081FA                             		
000081FA 2D7C 0101 0101 0004         		move.l	#$01010101,obj_size(a6)
00008202 08EE 0006 001E              		bset	#bitobj_hit,obj_status(a6)
00008208                             		
00008208                            ; =================================================================
00008208                            ; ------------------------------------------------                  
00008208                            ; Index $01: Main
00008208                            ; ------------------------------------------------
00008208                            
00008208                            @Main:
00008208 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0000820E 7000                        		moveq	#0,d0
00008210 102E 001F                   		move.b	obj_subid(a6),d0
00008214 0200 007F                   		and.b	#$7F,d0
00008218 D040                        		add.w	d0,d0
0000821A 323B 0000                   		move.w	@subtypes(pc,d0.w),d1
0000821E 4EFB 1000                   		jmp	@subtypes(pc,d1.w)
00008222                            		
00008222                            ; ------------------------------------------------
00008222                            ; Subs
00008222                            ; ------------------------------------------------
00008222                            
00008222                            @subtypes:
00008222 0000                       		dc.w @destroy-@subtypes		; $00 - Breakable block
00008224 0000                       		dc.w @bump_solid-@subtypes	; $01 - Bump, normal
00008226 0000                       		dc.w @bump_coin-@subtypes	; $02 - Bump, add red coin (1)
00008228 0000                       		dc.w @bump_coin_blue-@subtypes	; $03 - Bump, add blue coin (2)
0000822A 0000                       		dc.w @bump_1up-@subtypes	; $04 - Bump, add extra life
0000822C 0000                       		dc.w @trampoline-@subtypes	; $05 - Trampoline animation
0000822E                            		
0000822E                            ; ------------------------------------------------
0000822E                            ; Return
0000822E                            ; ------------------------------------------------
0000822E                            
0000822E                            @return:
0000822E 4E75                       		rts
00008230                            		
00008230                            ; ------------------------------------------------
00008230                            ; Destroy block
00008230                            ; ------------------------------------------------
00008230                            
00008230                            @destroy:
00008230 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00008234                            		
00008234 223C 0000 0000             		move.l	#$0000,d1
0000823A 4841                       		swap	d1
0000823C 322E 0028                  		move.w	this_vram(a6),d1
00008240 0041 8000                  		or.w	#$8000,d1
00008244                            		
00008244 362E 003A                  		move.w	x_pos_r(a6),d3
00008248 066E 0001 003A             		add.w	#1,x_pos_r(a6)
0000824E 4843                       		swap	d3
00008250 342E 0038                  		move.w	x_pos_l(a6),d2
00008254 046E 0001 0038             		sub.w	#1,x_pos_l(a6)
0000825A 4842                       		swap	d2
0000825C                            	
0000825C 2002                       		move.l	d2,d0
0000825E 302E 000C                  		move.w	obj_y(a6),d0
00008262 0480 0006 0000             		sub.l	#$60000,d0
00008268 0440 0010                  		sub.w	#$10,d0
0000826C 6100 D6F6                  		bsr	Object_ExtSprite
00008270 2003                       		move.l	d3,d0
00008272 0641 0002                   		add.w	#2,d1
00008276 302E 000C                  		move.w	obj_y(a6),d0
0000827A 0680 0004 0000             		add.l	#$40000,d0	
00008280 0440 0014                  		sub.w	#$14,d0
00008284 6100 D6DE                  		bsr	Object_ExtSprite
00008288 2002                       		move.l	d2,d0
0000828A 0441 0001                   		sub.w	#1,d1
0000828E 302E 000C                  		move.w	obj_y(a6),d0
00008292 0480 0001 0000             		sub.l	#$10000,d0
00008298 6100 D6CA                  		bsr	Object_ExtSprite
0000829C 2003                       		move.l	d3,d0
0000829E 0641 0002                   		add.w	#2,d1
000082A2 302E 000C                  		move.w	obj_y(a6),d0
000082A6 0680 0003 0000             		add.l	#$30000,d0
000082AC 0440 0004                  		sub.w	#4,d0
000082B0 6100 D6B2                  		bsr	Object_ExtSprite
000082B4                            		
000082B4 0687 0000 4000              		add.l	#$4000,d7
000082BA 4A87                        		tst.l	d7
000082BC 6B00                        		bmi.s	@minus
000082BE 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
000082C4                            @minus:
000082C4 DFAE 000C                  		add.l	d7,obj_y(a6)
000082C8                            		
000082C8 322E 000C                  		move.w	obj_y(a6),d1
000082CC 303C 0140                  		move.w	#320,d0
000082D0 D06D 0020                  		add.w	lvl_y(a5),d0
000082D4 B240                       		cmp.w	d0,d1
000082D6 6D00                       		blt.s	@lower_y
000082D8 4EF9 0000 59F2             		jmp	Object_Delete
000082DE                            @lower_y:
000082DE 2D47 0014                   		move.l	d7,obj_y_spd(a6)
000082E2 4E75                           		rts
000082E4                            		
000082E4                            ; ------------------------------------------------
000082E4                            ; Bump, nothing (or reveral hidden block)
000082E4                            ; ------------------------------------------------
000082E4                            
000082E4                            @bump_solid:
000082E4 2E2E 0014                  		move.l	obj_y_spd(a6),d7
000082E8 2C2E 002C                  		move.l	y_coin_spd(a6),d6
000082EC                            		
000082EC                            ; 		move.l	#$0005,d1
000082EC                            ; 		swap	d1
000082EC                            ; 		move.w	#vramCoinRed,d1
000082EC                            ;  		move.l	y_pos_coin(a6),d0
000082EC                            ;  		move.w	obj_x(a6),d0
000082EC                            ;  		swap	d0
000082EC                            ; 		bsr	Object_ExtSprite
000082EC                            		
000082EC 082E 0000 003E              		btst	#0,block_flags(a6)
000082F2 6600                        		bne.s	@stopblock
000082F4 223C 0000 0005             		move.l	#$0005,d1
000082FA 4841                       		swap	d1
000082FC 322E 0028                  		move.w	this_vram(a6),d1
00008300 0041 8000                  		or.w	#$8000,d1
00008304                            		
00008304 302E 0008                  		move.w	obj_x(a6),d0
00008308 4840                       		swap	d0
0000830A 302E 000C                  		move.w	obj_y(a6),d0
0000830E 6100 D654                  		bsr	Object_ExtSprite
00008312 0687 0000 4000              		add.l	#$4000,d7
00008318 4A87                        		tst.l	d7
0000831A 6B00                        		bmi.s	@minus2
0000831C 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00008322                            @minus2:
00008322 DFAE 000C                  		add.l	d7,obj_y(a6)
00008326                            @stopblock:
00008326 0686 0000 4000              		add.l	#$4000,d6
0000832C DDAE 0030                  		add.l	d6,y_pos_coin(a6)
00008330                            		
00008330 302E 000C                  		move.w	obj_y(a6),d0
00008334 322E 0036                  		move.w	y_pos_main(a6),d1
00008338 B041                       		cmp.w	d1,d0
0000833A 6F00                       		ble.s	@return3
0000833C                            		
0000833C 202E 0024                   		move.l	this_pos(a6),d0
00008340 6100 E8B0                  		bsr	Prize_Locate
00008344                            ; 		move.b	#$F,d0
00008344                            ; 		move.b	d0,(a3)
00008344 6100 CF42                   		bsr	Level_ShowPrize
00008348 08EE 0000 003E              		bset	#0,block_flags(a6)
0000834E 4EF9 0000 59F2              		jmp	Object_Delete
00008354                             		
00008354                            @return3:
00008354                            
00008354                            ; 		move.w	y_pos_coin(a6),d0
00008354                            ; 		move.w	y_pos_main(a6),d1
00008354                            ; 		sub.w	#$10,d1
00008354                            ; 		cmp.w	d1,d0
00008354                            ; 		ble.s	@return2
00008354                            ;   		jmp	Object_Delete
00008354                            ;   		
00008354                            ; @return2:
00008354 2D46 002C                  		move.l	d6,y_coin_spd(a6)
00008358 2D47 0014                   		move.l	d7,obj_y_spd(a6)
0000835C 4E75                        		rts
0000835E                             		
0000835E                            ; ------------------------------------------------
0000835E                            ; Bump block
0000835E                            ; ------------------------------------------------
0000835E                            
0000835E                            @bump_1up:
0000835E 223C 0000 0005             		move.l	#$0005,d1
00008364 4841                       		swap	d1
00008366 323C C5B0                  		move.w	#vram1up,d1
0000836A 202E 0030                   		move.l	y_pos_coin(a6),d0
0000836E 302E 0008                   		move.w	obj_x(a6),d0
00008372 4840                        		swap	d0
00008374 6100 D5EE                  		bsr	Object_ExtSprite
00008378 6000                       		bra.s	@from_coin_blue
0000837A                            		
0000837A                            @bump_coin_blue:
0000837A 223C 0000 0005             		move.l	#$0005,d1
00008380 4841                       		swap	d1
00008382 323C C5AC                  		move.w	#vramCoinBlue,d1
00008386 202E 0030                   		move.l	y_pos_coin(a6),d0
0000838A 302E 0008                   		move.w	obj_x(a6),d0
0000838E 4840                        		swap	d0
00008390 6100 D5D2                  		bsr	Object_ExtSprite
00008394 6000                       		bra.s	@from_coin_blue
00008396                            		
00008396                            @bump_coin:
00008396 223C 0000 0005             		move.l	#$0005,d1
0000839C 4841                       		swap	d1
0000839E 323C C5A8                  		move.w	#vramCoinRed,d1
000083A2 202E 0030                   		move.l	y_pos_coin(a6),d0
000083A6 302E 0008                   		move.w	obj_x(a6),d0
000083AA 4840                        		swap	d0
000083AC 6100 D5B6                  		bsr	Object_ExtSprite
000083B0                            		
000083B0                            @from_coin_blue:
000083B0 2E2E 0014                  		move.l	obj_y_spd(a6),d7
000083B4 2C2E 002C                  		move.l	y_coin_spd(a6),d6
000083B8                            		
000083B8 082E 0000 003E              		btst	#0,block_flags(a6)
000083BE 6600                        		bne.s	@stopblock2
000083C0 223C 0000 0005             		move.l	#$0005,d1
000083C6 4841                       		swap	d1
000083C8 322E 0028                  		move.w	this_vram(a6),d1
000083CC 0041 8000                  		or.w	#$8000,d1
000083D0                            		
000083D0 302E 0008                  		move.w	obj_x(a6),d0
000083D4 4840                       		swap	d0
000083D6 302E 000C                  		move.w	obj_y(a6),d0
000083DA 6100 D588                  		bsr	Object_ExtSprite
000083DE 0687 0000 4000              		add.l	#$4000,d7
000083E4 4A87                        		tst.l	d7
000083E6 6B00                        		bmi.s	@minus3
000083E8 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
000083EE                            @minus3:
000083EE DFAE 000C                  		add.l	d7,obj_y(a6)
000083F2                            @stopblock2:
000083F2 0686 0000 4000              		add.l	#$4000,d6
000083F8 DDAE 0030                  		add.l	d6,y_pos_coin(a6)
000083FC                            		
000083FC 302E 000C                  		move.w	obj_y(a6),d0
00008400 322E 0036                  		move.w	y_pos_main(a6),d1
00008404 B041                       		cmp.w	d1,d0
00008406 6F00                       		ble.s	@return4
00008408                            		
00008408 202E 0024                   		move.l	this_pos(a6),d0
0000840C 6100 E7E4                  		bsr	Prize_Locate
00008410 103C 000F                  		move.b	#$F,d0
00008414 1680                       		move.b	d0,(a3)
00008416 6100 CE70                   		bsr	Level_ShowPrize
0000841A 08EE 0000 003E              		bset	#0,block_flags(a6)
00008420 4EF9 0000 59F2              		jmp	Object_Delete
00008426                             		
00008426                            @return4:
00008426                            
00008426 302E 0030                  		move.w	y_pos_coin(a6),d0
0000842A 322E 0036                  		move.w	y_pos_main(a6),d1
0000842E 0441 0010                  		sub.w	#$10,d1
00008432 B041                       		cmp.w	d1,d0
00008434 6F00                       		ble.s	@return5
00008436 4EF9 0000 59F2               		jmp	Object_Delete
0000843C                              		
0000843C                            @return5:
0000843C 2D46 002C                  		move.l	d6,y_coin_spd(a6)
00008440 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00008444 4E75                       		rts
00008446                            		
00008446                            ; ------------------------------------------------
00008446                            ; Trampoline
00008446                            ; ------------------------------------------------
00008446                            
00008446                            @trampoline:
00008446 062E 0001 003C             		add.b	#1,tmr_1(a6)
0000844C 082E 0003 003C             		btst	#3,tmr_1(a6)
00008452 6600                       		bne.s	@finish
00008454                            ; 		cmp.b	#16,tmr_1(a6)
00008454                            ; 		bge.s	@finish
00008454                            		
00008454 223C 0000 0005             		move.l	#$0005,d1
0000845A 4841                       		swap	d1
0000845C 323C C598                  		move.w	#vramJmpBlock+4,d1
00008460 302E 0008                   		move.w	obj_x(a6),d0
00008464 4840                        		swap	d0
00008466 302E 000C                   		move.w	obj_y(a6),d0
0000846A 6000 D4F8                  		bra	Object_ExtSprite
0000846E                            		
0000846E                            @finish:
0000846E 202E 0024                   		move.l	this_pos(a6),d0
00008472 6100 CE14                  		bsr	Level_ShowPrize
00008476 4EF9 0000 59F2               		jmp	Object_Delete
0000847C                              		
0000847C                            ; =================================================================
0000847C                            ; ------------------------------------------------
0000847C                            ; Subs
0000847C                            ; ------------------------------------------------
0000847C                            
0000847C                            		
0000847C                            ; =================================================================
0000847C                            		
0000847C                            		
0000847C                                		include	"engine/modes/level/data/objects/ball/code.asm" 
0000847C                            ; =================================================================
0000847C                            ; Object
0000847C                            ; 
0000847C                            ; A Ball
0000847C                            ; =================================================================
0000847C                            
0000847C                            ; =================================================================
0000847C                            ; ------------------------------------------------
0000847C                            ; Variables
0000847C                            ; ------------------------------------------------
0000847C                            
0000847C =000044B8                  varVramBall	equ	$4000|$4B8
0000847C                            
0000847C                            ; =================================================================
0000847C                            ; ------------------------------------------------
0000847C                            ; Code start
0000847C                            ; ------------------------------------------------
0000847C                            
0000847C                            Obj_Ball:
0000847C 7000                        		moveq	#0,d0
0000847E 102E 001D                   		move.b	obj_index(a6),d0
00008482 D040                        		add.w	d0,d0
00008484 323B 0000                   		move.w	@Index(pc,d0.w),d1
00008488 4EBB 1000                   		jsr	@Index(pc,d1.w)
0000848C 6100 D794                   		bsr	Object_OffCheck
00008490                             		
00008490 203C 44B8 0000             		move.l	#(varVramBall<<16),d0
00008496 102E 0020                  		move.b	obj_frame(a6),d0
0000849A 223C 0000 0000             		move.l	#map_Ball,d1
000084A0 6000 D440                   		bra	Object_Show
000084A4                             		
000084A4                            ; ------------------------------------------------
000084A4                            
000084A4                            @Index:
000084A4 0000                       		dc.w	@Init-@Index
000084A6 0000                       		dc.w	@Main-@Index
000084A8                            		even
000084A8                            		
000084A8                            ; =================================================================
000084A8                            ; ------------------------------------------------
000084A8                            ; Index $00: Init
000084A8                            ; ------------------------------------------------
000084A8                            
000084A8                            @Init:
000084A8 062E 0001 001D             		add.b	#1,obj_index(a6)
000084AE 2D7C 0101 0101 0004        		move.l	#$01010101,obj_size(a6)
000084B6 2D7C 0000 6000 0014        		move.l	#$6000,obj_y_spd(a6)
000084BE 422E 0020                  		clr.b	obj_frame(a6)
000084C2 422E 001C                  		clr.b	obj_anim_spd(a6)
000084C6 2D7C FFFE 8000 0010        		move.l	#-$18000,obj_x_spd(a6)
000084CE                            		
000084CE                            ; =================================================================
000084CE                            ; ------------------------------------------------                  
000084CE                            ; Index $01: Main
000084CE                            ; ------------------------------------------------
000084CE                            
000084CE                            @Main:
000084CE                            ; 		bsr.s	@move_ball
000084CE                            ; 		bra	@check_touch
000084CE                            		
000084CE                            ; =================================================================
000084CE                            ; ------------------------------------------------
000084CE                            ; Subs
000084CE                            ; ------------------------------------------------
000084CE                            
000084CE                            @move_ball:
000084CE 2C2E 0010                   		move.l	obj_x_spd(a6),d6
000084D2 2E2E 0014                   		move.l	obj_y_spd(a6),d7
000084D6 DDAE 0008                   		add.l	d6,obj_x(a6)
000084DA DFAE 000C                   		add.l	d7,obj_y(a6)
000084DE                             		
000084DE 4AAE 0008                   		tst.l	obj_x(a6)
000084E2 6A00                        		bpl.s	@fine_x
000084E4 42AE 0008                   		clr.l	obj_x(a6)
000084E8 2C3C 0002 0000             		move.l	#$20000,d6
000084EE                            @fine_x:
000084EE 7000                       		moveq	#0,d0
000084F0 3039 FFFF BC30             		move.w	(RAM_LvlPlanes+lvl_size_x),d0
000084F6 E948                       		lsl.w	#4,d0
000084F8 4840                       		swap	d0
000084FA 222E 0008                  		move.l	obj_x(a6),d1
000084FE B280                       		cmp.l	d0,d1
00008500 6D00                       		blt.s	@fine_x_r
00008502 2C3C FFFE 0000             		move.l	#-$20000,d6
00008508                            @fine_x_r:
00008508                            	
00008508                            ; ----------------------------------
00008508                            
00008508 0687 0000 4000              		add.l	#$4000,d7
0000850E 0C87 0008 0000              		cmp.l	#$80000,d7
00008514 6D00                        		blt.s	@low_y
00008516 2E3C 0008 0000              		move.l	#$80000,d7
0000851C                            @low_y:
0000851C                             		
0000851C 4A87                        		tst.l	d7
0000851E 6A00                        		bpl.s	@Freec
00008520 6100 D9B8                  		bsr	object_FindPrz_Ceiling
00008524 4A00                       		tst.b	d0
00008526 6600                       		bne.s	@FndCeilPrz
00008528 6100 DDA4                  		bsr	object_FindPrz_CeilingSides
0000852C 4A00                       		tst.b	d0
0000852E 6600                       		bne.s	@FndCeilPrz
00008530 2001                       		move.l	d1,d0
00008532 4A00                       		tst.b	d0
00008534 6600                       		bne.s	@FndCeilPrz
00008536                            		
00008536 6100 D9AE                  		bsr	object_FindCol_Ceiling
0000853A 0800 0006                  		btst	#6,d0
0000853E 6600                       		bne.s	@Freec
00008540 4A00                       		tst.b	d0
00008542 6600                       		bne.s	@FoundCeiling
00008544 6100 DD94                  		bsr	object_FindCol_CeilingSides
00008548 4A00                       		tst.b	d0
0000854A 6600                       		bne.s	@FoundCeiling
0000854C 2001                       		move.l	d1,d0
0000854E 4A00                       		tst.b	d0
00008550 6600                       		bne.s	@FoundCeiling
00008552 6000                       		bra.s	@Freec
00008554                            @FndCeilPrz:
00008554 0800 0007                  		btst	#7,d0
00008558 6600                       		bne.s	@Freec
0000855A                            @FoundCeiling:
0000855A 0800 0006                  		btst	#6,d0
0000855E 6600                       		bne.s	@Freec
00008560                            		
00008560 6100 DF5A                  		bsr	object_SetCol_Ceiling
00008564                            		
00008564                            ; ----------------------------------
00008564                            
00008564                            @Freec:	
00008564 4A87                        		tst.l	d7
00008566 6B00                        		bmi.s	@Free
00008568                             	
00008568 6100 D836                  		bsr	object_FindPrz_Floor
0000856C 0800 0007                  		btst	#7,d0
00008570 6600                       		bne.s	@Free
00008572 0800 0006                  		btst	#6,d0
00008576 6600                       		bne.s	@Free
00008578 4A00                       		tst.b	d0
0000857A 6600                       		bne.s	@przflr
0000857C                            		
0000857C 6100 D82E                  		bsr	object_FindCol_Floor
00008580 0800 0006                  		btst	#6,d0
00008584 6600                       		bne.s	@Free
00008586 4A00                       		tst.b	d0
00008588 6700                       		beq.s	@Free
0000858A                            
0000858A                            @przflr:
0000858A 6100 DEB6                  		bsr	object_SetCol_Floor
0000858E 2E3C FFFA 0000              		move.l	#-$60000,d7
00008594                            
00008594 203C 0000 0000               		move.l	#SndSfx_PING,d0
0000859A 7202                         		moveq 	#2,d1
0000859C 7401                         		moveq	#1,d2
0000859E 6100 8E9C                    		bsr	Audio_Track_play
000085A2                            @Free:
000085A2                            
000085A2                            ; ----------------------------------------
000085A2                            
000085A2                            ;  		bsr	object_FindPrz_WallSides
000085A2                            ; ;  		tst.l	d6
000085A2                            ; ;  		bmi.s	@to_left
000085A2                            ; 		btst	#7,d0
000085A2                            ; 		bne.s	@FreeWall2
000085A2                            ; 		btst	#6,d0
000085A2                            ; 		bne.s	@FreeWall2
000085A2                            ; 		tst.b	d0
000085A2                            ; 		bne.s	@FoundW
000085A2                            ; 		bra.s	@FreeWall2
000085A2                            ; @to_left:
000085A2                            ; ; 		tst.l	d6
000085A2                            ; ; 		bpl.s	@FreeWall2
000085A2                            ; 		btst	#7,d1
000085A2                            ; 		bne.s	@FreeWall2
000085A2                            ; 		btst	#6,d1
000085A2                            ; 		bne.s	@FreeWall2
000085A2                            ; 		tst.b	d1
000085A2                            ; 		bne.s	@FoundW
000085A2                            ; 		
000085A2                            ; @FreeWall2:
000085A2 6100 DAC6                  		bsr	object_FindCol_WallSides
000085A6 4A86                       		tst.l	d6
000085A8 6B00                       		bmi.s	@dontlft
000085AA 4A00                        		tst.b	d0
000085AC 6600                        		bne.s	@FoundW
000085AE                            @dontlft:
000085AE 4A86                       		tst.l	d6
000085B0 6A00                       		bpl.s	@FreeWall
000085B2 2001                       		move.l	d1,d0
000085B4 4A00                         		tst.b	d0
000085B6 6600                        		bne.s	@FoundW
000085B8 6000                       		bra.s	@FreeWall
000085BA                            
000085BA                            @FoundW:
000085BA 0C00 0002                  		cmp.b	#2,d0
000085BE 6C00                       		bge.s	@FreeWall
000085C0                            ; 		bsr	object_SetCol_Wall
000085C0 4486                       		neg.l	d6
000085C2 086E 0000 001E             		bchg	#bitobj_flipH,obj_status(a6)
000085C8                            @FreeWall:
000085C8                            
000085C8                            ; ------------------------------------
000085C8                            
000085C8 042E 0001 001C              		sub.b	#1,obj_anim_spd(a6)
000085CE 6A00                        		bpl.s	@plusanim
000085D0 1D7C 0007 001C              		move.b	#7,obj_anim_spd(a6)
000085D6 062E 0001 0020               		add.b	#1,obj_frame(a6)
000085DC 022E 0003 0020              		and.b	#%11,obj_frame(a6)
000085E2                            @plusanim:
000085E2                            
000085E2                            ; ------------------------------------
000085E2                            
000085E2 2D46 0010                   		move.l	d6,obj_x_spd(a6)
000085E6 2D47 0014                   		move.l	d7,obj_y_spd(a6)
000085EA                            ; 		rts
000085EA                            		
000085EA                            ; =================================================================
000085EA                            ; ----------------------------------
000085EA                            ; Check if touched
000085EA                            ; ----------------------------------
000085EA                            
000085EA                            @check_touch:
000085EA 6100 DF1A                  		bsr	objTouch_Top
000085EE 4A00                       		tst.b	d0
000085F0 6600                       		bne.s	@touch_flag
000085F2 6100 DFB0                  		bsr	objTouch_Bottom
000085F6 4A00                       		tst.b	d0
000085F8 6600                       		bne.s	@touch_flag
000085FA                            		
000085FA 6100 E048                  		bsr	objTouch_Sides
000085FE 4A00                       		tst.b	d0
00008600 6600                       		bne.s	@touch_flag
00008602 4840                       		swap	d0
00008604 4A00                       		tst.b	d0
00008606 6600                       		bne.s	@touch_flag
00008608 4E75                       		rts
0000860A                            		
0000860A                            ; -----------------------------------
0000860A                            
0000860A                            @touch_flag:
0000860A 6100 E21C                  		bsr	objPlyrHurtKill
0000860E 6700                       		beq.s	@return
00008610 323C 44B8                     		move.w	#varVramBall,d1
00008614 142E 0020                   		move.b	obj_frame(a6),d2
00008618 203C 0000 0000             		move.l	#map_Ball,d0
0000861E 260C                       		move.l	a4,d3
00008620 6100 E5FA                  		bsr	objAction_SetStomp
00008624 6000 D5DC                  		bra	Object_IsGone
00008628                            @return:
00008628 4E75                       		rts
00008628 4E75                       		rts
0000862A                               		include	"engine/modes/level/data/objects/endflag/code.asm"
0000862A                            ; =================================================================
0000862A                            ; Object
0000862A                            ; 
0000862A                            ; Level end flag
0000862A                            ; =================================================================
0000862A                            
0000862A                            ; =================================================================
0000862A                            ; ------------------------------------------------
0000862A                            ; Variables
0000862A                            ; ------------------------------------------------
0000862A                            
0000862A =00006540                  varEndFlagVRAM	equ	$6000|$540
0000862A                            
0000862A                            ; =================================================================
0000862A                            ; ------------------------------------------------
0000862A                            ; Code start
0000862A                            ; ------------------------------------------------
0000862A                            
0000862A                            Obj_EndFlag:
0000862A 7000                        		moveq	#0,d0
0000862C 102E 001D                   		move.b	obj_index(a6),d0
00008630 D040                        		add.w	d0,d0
00008632 323B 0000                   		move.w	@Index(pc,d0.w),d1
00008636 4EBB 1000                   		jsr	@Index(pc,d1.w)
0000863A                            		
0000863A 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00008640 302E 0008                  		move.w	obj_x(a6),d0
00008644 0440 0140                  		sub.w	#320,d0
00008648 322C 0008                  		move.w	obj_x(a4),d1
0000864C B240                       		cmp.w	d0,d1
0000864E 6D00                       		blt.s	@im_gone
00008650                            		
00008650 203C 6540 0000                 		move.l	#(varEndFlagVRAM<<16),d0
00008656 102E 0020                     		move.b	obj_frame(a6),d0	
0000865A 223C 0000 0000              		move.l	#mapObj_EndFlag,d1
00008660 6100 D280                    		bsr	Object_Show
00008664                             		
00008664 203C 6540 0000                		move.l	#(varEndFlagVRAM<<16),d0
0000866A 102E 0020                     		move.b	obj_frame(a6),d0
0000866E 223C 0000 0000             		move.l	#dplcObj_EndFlag,d1
00008674 243C 0000 0000             		move.l	#artObj_EndFlag,d2
0000867A 6000 D20C                  		bra	Object_DPLC
0000867E                            		
0000867E                            @im_gone:
0000867E 4E75                       		rts
00008680                            		
00008680                            ; ------------------------------------------------
00008680                            
00008680                            @Index:
00008680 0000                       		dc.w	@Init-@Index
00008682 0000                       		dc.w	@Main-@Index
00008684                            		even
00008684                            		
00008684                            ; =================================================================
00008684                            ; ------------------------------------------------
00008684                            ; Index $00: Init
00008684                            ; ------------------------------------------------
00008684                            
00008684                            @Init:
00008684 062E 0001 001D             		add.b	#1,obj_index(a6)
0000868A 2D7C 0202 0303 0004        		move.l	#$02020303,obj_size(a6)
00008692 4E75                       		rts
00008694                            		
00008694                            ; =================================================================
00008694                            ; ------------------------------------------------                  
00008694                            ; Index $01: Main
00008694                            ; ------------------------------------------------
00008694                            
00008694                            @Main:
00008694 042E 0001 001C             		sub.b	#1,obj_anim_spd(a6)
0000869A 6A00                       		bpl.s	@plus
0000869C 1D7C 0006 001C             		move.b	#6,obj_anim_spd(a6)
000086A2 062E 0001 0020             		add.b	#1,obj_frame(a6)
000086A8 0C2E 0003 0020             		cmp.b	#3,obj_frame(a6)
000086AE 6D00                       		blt.s	@plus
000086B0 422E 0020                  		clr.b	obj_frame(a6)
000086B4                            @plus:
000086B4 6100 DE36                  		bsr	objTouch
000086B8 4A00                       		tst.b	d0
000086BA 6700                       		beq.s	@return
000086BC                            
000086BC                            ;   		add.w	#1,(RAM_CurrLevel)
000086BC 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
000086C2 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
000086CA                            @return:
000086CA 4E75                       		rts
000086CC                            		
000086CC                            ; =================================================================
000086CC                            		
000086CC                            		
000086CC                                		include	"engine/modes/level/data/objects/actionscript/code.asm"  
000086CC                            ; =================================================================
000086CC                            ; Object (SPECIAL)
000086CC                            ; 
000086CC                            ; Action script
000086CC                            ; =================================================================
000086CC                            
000086CC                            ; =================================================================
000086CC                            ; ------------------------------------------------
000086CC                            ; Variables
000086CC                            ; ------------------------------------------------
000086CC                            
000086CC                            		rsset obj_ram
000086CC =00000024                  gotMaps		rs.l 1
000086CC =00000028                  gotVram		rs.w 1
000086CC =0000002A                  gotFrame	rs.w 1 		;its a byte
000086CC =0000002C                  gotWho		rs.l 1
000086CC                            
000086CC                            ; =================================================================
000086CC                            ; ------------------------------------------------
000086CC                            ; Code start
000086CC                            ; ------------------------------------------------
000086CC                            
000086CC                            obj_actionscript:
000086CC 7000                       		moveq	#0,d0
000086CE 102E 001D                  		move.b	obj_index(a6),d0
000086D2 D040                       		add.w	d0,d0
000086D4 323B 0000                  		move.w	@list(pc,d0.w),d1
000086D8 4EFB 1000                  		jmp	@list(pc,d1.w)
000086DC                            	
000086DC                            ; ------------------------------------------------
000086DC                            
000086DC                            @list:
000086DC 0000                       		dc.w @killobj_init-@list
000086DE 0000                       		dc.w @killobj_main-@list
000086E0                            
000086E0 0000                       		dc.w 0
000086E2 0000                       		dc.w 0
000086E4                            		
000086E4                            ; ------------------------------------------------
000086E4                            ; Action: kill object
000086E4                            ; ------------------------------------------------
000086E4                            
000086E4                            @killobj_init:
000086E4 002E 0001 001D             		or.b	#1,obj_index(a6)
000086EA 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
000086F0 08AE 0006 001E             		bclr	#bitobj_hit,obj_status(a6)
000086F6                            		
000086F6 08EE 0001 001E             		bset	#bitobj_FlipV,obj_status(a6)
000086FC 2D7C FFFC 0000 0014        		move.l	#-$40000,obj_y_spd(a6)
00008704                            
00008704                            		;Read player
00008704 202E 002C                  		move.l	gotWho(a6),d0
00008708 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
0000870E 6600                       		bne.s	@notplayer
00008710 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00008716 297C FFFD 0000 0014        		move.l	#-$30000,obj_y_spd(a4)
0000871E 197C 0002 001A              		move.b	#varPlyAniJump,obj_anim_id(a4)
00008724 08EC 0002 001E             		bset 	#bitobj_air,obj_status(a4)
0000872A                            @notplayer:
0000872A 203C 0000 0000               		move.l	#SndSfx_HitEnemy,d0
00008730 7202                         		moveq 	#2,d1
00008732 7401                         		moveq	#1,d2
00008734 6100 8D06                    		bsr	Audio_Track_play
00008738                              		
00008738                            ; --------------------------
00008738                            
00008738                            @killobj_main:
00008738 2C2E 0010                  		move.l	obj_x_spd(a6),d6
0000873C 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00008740 0687 0000 4000             		add.l	#$4000,d7
00008746 DDAE 0008                  		add.l	d6,obj_x(a6)
0000874A DFAE 000C                  		add.l	d7,obj_y(a6)
0000874E 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00008752 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00008756                            		
00008756 6100 D4CA                   		bsr	Object_OffCheck
0000875A 7000                       		moveq	#0,d0
0000875C 302E 0028                      		move.w	gotVram(a6),d0
00008760 4840                           		swap	d0
00008762 102E 002A                   		move.b	gotFrame(a6),d0
00008766 222E 0024                  		move.l	gotMaps(a6),d1
0000876A 6000 D176                   		bra	Object_Show
0000876E                            		
0000876E                            ; ------------------------------------------------
0000876E                            ; Action: hurt the enemy
0000876E                            ; ------------------------------------------------
0000876E                            
0000876E                            ; =================================================================
0000876E                            ; =================================================================
0000876E                                		include	"engine/modes/level/data/objects/hudinfo/code.asm"  
0000876E                            ; =================================================================
0000876E                            ; Object
0000876E                            ; 
0000876E                            ; Level end flag
0000876E                            ; =================================================================
0000876E                            
0000876E                            ; =================================================================
0000876E                            ; ------------------------------------------------
0000876E                            ; Variables
0000876E                            ; ------------------------------------------------
0000876E                            
0000876E =0000C580                  varHudBase	equ	$C000|$580
0000876E =0000C5A8                  varVramHudCoinR	equ	$C000|$5A8
0000876E =0000C5AC                  varVramHudCoinB	equ	$C000|$5AC
0000876E =0000C5B0                  varHudLife	equ	$C000|$5B0
0000876E =0000C5BC                  varHudLifeBar	equ	$C000|$5BC
0000876E =0000C5C0                  varHudDigits	equ	$C000|$5C0
0000876E                            
0000876E                            		rsset obj_ram
0000876E =00000024                  ramLastCoins	rs.w	1
0000876E =00000026                  ramDecCoins 	rs.w	1
0000876E =00000028                  ramLastLives	rs.w	1
0000876E =0000002A                  ramDecLives 	rs.w	1
0000876E                            
0000876E                            ; =================================================================
0000876E                            ; ------------------------------------------------
0000876E                            ; Code start
0000876E                            ; ------------------------------------------------
0000876E                            
0000876E                            obj_HudInfo:
0000876E 7000                        		moveq	#0,d0
00008770 102E 001D                   		move.b	obj_index(a6),d0
00008774 D040                        		add.w	d0,d0
00008776 323B 0000                   		move.w	@Index(pc,d0.w),d1
0000877A 4EFB 1000                   		jmp	@Index(pc,d1.w)
0000877E                             		
0000877E                            ; ------------------------------------------------
0000877E                            
0000877E                            @Index:
0000877E 0000                       		dc.w	@Init-@Index
00008780 0000                       		dc.w	@Main-@Index
00008782                            		even
00008782                            		
00008782                            ; =================================================================
00008782                            ; ------------------------------------------------
00008782                            ; Index $00: Init
00008782                            ; ------------------------------------------------
00008782                            
00008782                            @Init:
00008782 062E 0001 001D             		add.b	#1,obj_index(a6)
00008788 08EE 0007 001E              		bset	#bitobj_stay,obj_status(a6)
0000878E 3D7C 0000 0024             		move.w	#0,ramLastCoins(a6)
00008794                            		
00008794 3D7C 0001 0024             		move.w	#1,ramLastCoins(a6)
0000879A 3D7C 0001 0028             		move.w	#1,ramLastLives(a6)
000087A0                            		
000087A0                            ; =================================================================
000087A0                            ; ------------------------------------------------                  
000087A0                            ; Index $01: Main
000087A0                            ; ------------------------------------------------
000087A0                            
000087A0                            @Main:
000087A0 203C 0008 0008             		move.l	#8<<16|8,d0
000087A6 223C 0005 C5A8             		move.l	#5<<16|varVramHudCoinR,d1
000087AC 6100 D1B6                  		bsr	Object_ExtSprite
000087B0 203C 0008 0018             		move.l	#8<<16|24,d0
000087B6 223C 0005 C5B0             		move.l	#5<<16|varHudLife,d1
000087BC 6100 D1A6                  		bsr	Object_ExtSprite
000087C0                            		
000087C0                            
000087C0 203C 0008 0030             		move.l	#8<<16|48,d0
000087C6 223C 0000 C5BC             		move.l	#varHudLifeBar,d1
000087CC 3439 FFFF DC04             		move.w	(RAM_P1_Hits),d2
000087D2 0C42 0008                  		cmp.w	#8,d2
000087D6 6D00                       		blt.s	@lower
000087D8 343C 0008                  		move.w	#8,d2
000087DC                            @lower:
000087DC 4A42                       		tst.w	d2
000087DE 6700                       		beq.s	@dead
000087E0 0442 0001                  		sub.w	#1,d2
000087E4 4A42                       		tst.w	d2
000087E6 6600                       		bne.s	@addbox
000087E8 0641 0001                  		add.w	#1,d1
000087EC                            @addbox:
000087EC 6100 D176                  		bsr	Object_ExtSprite
000087F0 0680 0008 0000             		add.l	#$80000,d0
000087F6 51CA FFF4                  		dbf	d2,@addbox
000087FA                            @dead:
000087FA                            
000087FA 7400                       		moveq	#0,d2
000087FC 3439 FFFF DC02             		move.w	(RAM_P1_Coins),d2
00008802 B46E 0024                  		cmp.w	ramLastCoins(a6),d2
00008806 6700                       		beq.s	@dontupdc
00008808 3D42 0024                  		move.w	d2,ramLastCoins(a6)
0000880C 6100 8738                  		bsr	HexToDec
00008810 3D42 0026                  		move.w	d2,ramDecCoins(a6)
00008814                            @dontupdc:
00008814 203C 0018 0010             		move.l	#24<<16|16,d0
0000881A 342E 0026                  		move.w	ramDecCoins(a6),d2
0000881E 6100 0000                  		bsr	@showsprval
00008822                            		
00008822 7400                       		moveq	#0,d2
00008824 3439 FFFF DC00             		move.w	(RAM_P1_Lives),d2
0000882A B46E 0028                  		cmp.w	ramLastLives(a6),d2
0000882E 6700                       		beq.s	@dontupdlvs
00008830 3D42 0028                  		move.w	d2,ramLastLives(a6)
00008834 6100 8710                  		bsr	HexToDec
00008838 3D42 002A                  		move.w	d2,ramDecLives(a6)
0000883C                            @dontupdlvs:
0000883C 203C 0018 0020             		move.l	#24<<16|32,d0
00008842 342E 002A                  		move.w	ramDecLives(a6),d2
00008846                            		
00008846                            ; -----------------------------
00008846                            
00008846                            @showsprval:
00008846 7601                       		moveq	#1,d3
00008848 E89A                       		ror.l	#4,d2
0000884A                            @nxtcoinnum:
0000884A 7200                       		moveq	#0,d1
0000884C 1202                       		move.b	d2,d1
0000884E 0201 000F                  		and.b	#$F,d1
00008852 0641 C5C0                  		add.w	#varHudDigits,d1
00008856 E99A                       		rol.l	#4,d2
00008858 0680 0008 0000             		add.l	#$00080000,d0
0000885E 6100 D104                  		bsr	Object_ExtSprite	
00008862 51CB FFE6                  		dbf	d3,@nxtcoinnum
00008866 4E75                       		rts
00008868                            		
00008868                            ; =================================================================
00008868                            		
00008868                            		
00008868                                		
00008868                                		
00008868                            		
00008868                            ; ====================================================================
00008868                            ; --------------------------------------------
00008868                            ; VBlank
00008868                            ; --------------------------------------------
00008868                            
00008868                            ; ====================================================================		
00008868                            ; --------------------------------------------
00008868                            ; HBlank
00008868                            ; --------------------------------------------
00008868                            		
00008868                            ; ====================================================================
00008868                            ; ====================================================================
00008868                            		
00008868                            	
00008868                            ; ====================================================================
00008868                            ; -------------------------------------------------
00008868                            ; DATA
00008868                            ; -------------------------------------------------
00008868                            
00008868                            THIS_BANK_1:
00008868                            		include	"engine/modes/title/data.asm"
00008868                            ; ====================================================================
00008868                            ; -------------------------------------------------
00008868                            ; Title DATA
00008868                            ; -------------------------------------------------
00008868                            		
00008868                            Pal_Title:	incbin	"engine/modes/title/data/pal.bin"
00008888                            		even
00008888                            Map_Title:	incbin	"engine/modes/title/data/map.bin"
00009148                            		even
00009148                            Art_Title:	incbin	"engine/modes/title/data/art.bin"
0000B428                            Art_Title_End:	even
0000B428                            
0000B428                            ; Pal_Gen3:	incbin	"engine/modes/title/data/pal_2.bin"
0000B428                            ; 		even
0000B428                            ; Map_Gen3:	incbin	"engine/modes/title/data/map_2.bin"
0000B428                            ; 		even
0000B428                            ; Art_Gen3:	incbin	"engine/modes/title/data/art_2.bin"
0000B428                            ; Art_Gen3_End:	even
0000B428                            
0000B428                            ; -------------------------------------------------
0000B428                            				
0000B428                            ; --------------------------
0000B428                            ; SFX: COIN
0000B428                            ; --------------------------
0000B428                            
0000B428                            Snd_TestNotes:
0000B428 00FF                       		dc.b 0,-1
0000B42A 0000 0000                  		dc.l @notes
0000B42E 0000 0000                       		dc.l @ins
0000B432 0001                            		dc.w 1
0000B434 0240 800F                        		dc.b FM_3,64,$80,$F
0000B438                            @notes:		incbin "engine/sound/testins.bin"
0000B4EE 00                               		even
0000B4EE 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins 
0000B4F4 0001 0000                  @ymha:		dc.w 1,0
0000B4F8 0000 0000                  		dc.l test_fm
0000B4FC 0002 0000                  		dc.w 2,0
0000B500 0000 0000                  		dc.l test_fm+$19
0000B504 0003 0000                  		dc.w 3,0
0000B508 0000 0000                  		dc.l test_fm
0000B50C 0004 0000                  		dc.w 4,0
0000B510 0000 0000                  		dc.l test_fm
0000B514 0005 0000                  		dc.w 5,0
0000B518 0000 0000                  		dc.l test_fm
0000B51C 0006 0000                  		dc.w 6,0
0000B520 0000 0000                  		dc.l test_fm
0000B524                            	
0000B524 0001 0004                  @noise:		dc.w 1,%100
0000B528                            		even
0000B528                            
0000B528                            test_fm:	incbin	"engine/sound/instruments/FM/bass/bass_jazz.bin"
0000B541                            		incbin	"engine/sound/instruments/FM/brass/brass_trumpet.bin"
0000B55A                            		even
0000B55A                            		
0000B55A                            ; -------------------------------------------------
0000B55A                            
0000B55A                            fmVoice_bell_1:
0000B55A                            		incbin	"engine/sound/instruments/fm/bell/bell_xmas.bin"
0000B574 00                         		even
0000B574                            fmVoice_piano_rave:
0000B574                            		incbin	"engine/sound/instruments/fm/piano/piano_rave_old.bin"
0000B58E 00                         		even
0000B58E                            fmVoice_bass_ambient:
0000B58E                            		incbin	"engine/sound/instruments/fm/bass/bass_ambient.bin"
0000B5A8 00                         		even
0000B5A8                            fmVoice_bass_2:
0000B5A8                            		incbin	"engine/sound/instruments/fm/bass/bass_low.bin"
0000B5C2 00                         		even
0000B5C2                            fmVoice_belllow:
0000B5C2                            		incbin	"engine/sound/instruments/fm/brass/brass_funny.bin"
0000B5DC 00                         		even
0000B5DC                            fmVoice_flaute_2:
0000B5DC                            		incbin	"engine/sound/instruments/fm/ding_1.bin"
0000B5F6 00                         		even
0000B5F6                            fmVoice_brass_trumpet:
0000B5F6                            		incbin	"engine/sound/instruments/fm/brass/brass_trumpet.bin"
0000B610 00                         		even
0000B610                            fmVoice_bell_low:
0000B610                            		incbin	"engine/sound/instruments/fm/bell/bell_low.bin"
0000B62A 00                         		even
0000B62A                            		
0000B62A                            fm_hatopen:
0000B62A                            		incbin	"engine/sound/instruments/fm/drums/fm3_openhat.bin"
0000B644 00                         		even
0000B644                            fm_hatclosed:
0000B644                            		incbin	"engine/sound/instruments/fm/drums/fm3_closedhat.bin"
0000B65E 00                         		even
0000B65E                            
0000B65E                            fmVoice_dolp_wha:
0000B65E                            		incbin	"engine/sound/instruments/fm/fx/dolphin_wah.bin"
0000B6DC 00                         		even
0000B6DC                            fmVoice_openhat:
0000B6DC                            		incbin	"engine/sound/instruments/fm/wsb95_bullpen.bin"
0000B78C 00                         		even
0000B78C                            ; 		
0000B78C                            ; 		cnop 0,$8000
0000B78C                            ; wav_yobeats:	incbin	"engine/sound/instruments/dac/beat_yo.wav",$2C
0000B78C                            ; wav_yobeats_e:	even
0000B78C                            ; 
0000B78C                            ; hrdcbyte:	incbin	"engine/sound/instruments/dac/hrdcbyte.wav",$2C
0000B78C                            ; hrdcbyte_e:	even
0000B78C                            ; 
0000B78C                            ; dnceheye:	incbin	"engine/sound/instruments/dac/dnceheye.wav",$2C
0000B78C                            ; dnceheye_e:	even
0000B78C                            
0000B78C                            ; 		if MCD|MARS=0
0000B78C                            ; TEST_WAV:	incbin "ideas/test.wav",$2C,$200000
0000B78C                            ; TEST_WAV_end:	even
0000B78C                            ; 		endif
0000B78C                            
0000B78C                            wav_kick:	incbin	"engine/sound/instruments/dac/sauron_kick.wav",$2C
0000C71A                            wav_kick_e:
0000C71A                            wav_tom:	incbin	"engine/sound/instruments/dac/sauron_tom.wav",$2C
0000D2D4                            wav_tom_e:
0000D2D4                            wav_snare:	incbin	"engine/sound/instruments/dac/snare.wav",$2C
0000E6A8                            wav_snare_e:
0000E6A8                            		even
0000E6A8                            		
0000E6A8                            		
0000E6A8                            		include "engine/modes/level/data.asm"
0000E6A8                            ; =================================================================
0000E6A8                            ; ------------------------------------------------
0000E6A8                            ; DMA art
0000E6A8                            ; ------------------------------------------------
0000E6A8                            
0000E6A8                            		cnop 0,$4000
00010000                            Art_Player:	incbin	"engine/modes/level/data/objects/player/data/art.bin"
000118C0                            		even
000118C0                            artObj_EndFlag:	incbin	"engine/modes/level/data/objects/endflag/data/art.bin"
00012780                             		even
00012780                            Art_AnimCoin:	incbin	"engine/modes/level/data/layouts/coin_art.bin"
00012D80                            		even
00012D80                            
00012D80                            ; =================================================================
00012D80                            ; ------------------------------------------------
00012D80                            ; Non-DMA art
00012D80                            ; ------------------------------------------------
00012D80                            	
00012D80                            ; ---------------------------
00012D80                            ; Objects
00012D80                            ; ---------------------------
00012D80                            
00012D80                            		cnop 0,$800
00013000                            Art_dadou:	incbin	"engine/modes/level/data/objects/dadou/data/art.bin"
00014100                            art_dadou_end:
00014100                             		even
00014100                            Art_pikudo:	incbin	"engine/modes/level/data/objects/pikudo/data/art.bin"
000149A0                            art_pikudo_end:
000149A0                             		even
000149A0                             		
000149A0                            artObj_Platform:
000149A0                            		incbin	"engine/modes/level/data/objects/platform/data/art.bin"
00014A60                            artObj_Platform_e:
00014A60                             		even
00014A60                            artObj_Ball:	incbin	"engine/modes/level/data/objects/ball/data/art.bin"
00014D60                            artObj_Ball_e:	even
00014D60                             		
00014D60                            ; =================================================================
00014D60                            ; ------------------------------------------------
00014D60                            ; Other stuff
00014D60                            ; ------------------------------------------------
00014D60                            
00014D60                            ; ---------------------------
00014D60                            ; Player
00014D60                            ; ---------------------------
00014D60                            
00014D60                            Map_Player:	include	"engine/modes/level/data/objects/player/data/map.asm"
00014D60                            @mappings:
00014D60 0000                       		dc.w @frame_0-@mappings
00014D62 0000                       		dc.w @frame_1-@mappings
00014D64 0000                       		dc.w @frame_2-@mappings
00014D66 0000                       		dc.w @frame_3-@mappings
00014D68 0000                       		dc.w @frame_4-@mappings
00014D6A 0000                       		dc.w @frame_5-@mappings
00014D6C 0000                       		dc.w @frame_6-@mappings
00014D6E 0000                       		dc.w @frame_7-@mappings
00014D70 0000                       		dc.w @frame_8-@mappings
00014D72 0000                       		dc.w @frame_9-@mappings
00014D74 0000                       		dc.w @frame_10-@mappings
00014D76 0000                       		dc.w @frame_11-@mappings
00014D78 0000                       		dc.w @frame_12-@mappings
00014D7A 0000                       		dc.w @frame_13-@mappings
00014D7C 0000                       		dc.w @frame_14-@mappings
00014D7E 0000                       		dc.w @frame_15-@mappings
00014D80 0000                       		dc.w @frame_16-@mappings
00014D82                            @frame_0:
00014D82 03                         		dc.b $3
00014D83                            
00014D83 000C 0000 F0               		dc.b $0,$C,$0,$0,$F0
00014D88 F005 0004 F8               		dc.b $F0,$5,$0,$4,$F8
00014D8D 0804 0008 F8               		dc.b $8,$4,$0,$8,$F8
00014D92                            		even
00014D92                            @frame_1:
00014D92 03                         		dc.b $3
00014D93                            
00014D93 000C 0000 F0               		dc.b $0,$C,$0,$0,$F0
00014D98 F005 0004 F8               		dc.b $F0,$5,$0,$4,$F8
00014D9D 0804 0008 F8               		dc.b $8,$4,$0,$8,$F8
00014DA2                            		even
00014DA2                            @frame_2:
00014DA2 04                         		dc.b $4
00014DA3                            
00014DA3 0009 0000 F0               		dc.b $0,$9,$0,$0,$F0
00014DA8 F005 0006 F8               		dc.b $F0,$5,$0,$6,$F8
00014DAD F800 000A 08               		dc.b $F8,$0,$0,$A,$8
00014DB2 0800 000B 08               		dc.b $8,$0,$0,$B,$8
00014DB8 00                         		even
00014DB8                            @frame_3:
00014DB8 03                         		dc.b $3
00014DB9                            
00014DB9 F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
00014DBE F800 0008 08               		dc.b $F8,$0,$0,$8,$8
00014DC3 0800 0009 08               		dc.b $8,$0,$0,$9,$8
00014DC8                            		even
00014DC8                            @frame_4:
00014DC8 02                         		dc.b $2
00014DC9                            
00014DC9 F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
00014DCE F800 0008 08               		dc.b $F8,$0,$0,$8,$8
00014DD4 00                         		even
00014DD4                            @frame_5:
00014DD4 03                         		dc.b $3
00014DD5                            
00014DD5 080C 0000 F0               		dc.b $8,$C,$0,$0,$F0
00014DDA F006 0004 F8               		dc.b $F0,$6,$0,$4,$F8
00014DDF F800 000A 08               		dc.b $F8,$0,$0,$A,$8
00014DE4                            		even
00014DE4                            @frame_6:
00014DE4 04                         		dc.b $4
00014DE5                            
00014DE5 0009 0000 F0               		dc.b $0,$9,$0,$0,$F0
00014DEA F005 0006 F8               		dc.b $F0,$5,$0,$6,$F8
00014DEF F800 000A 08               		dc.b $F8,$0,$0,$A,$8
00014DF4 0800 000B 08               		dc.b $8,$0,$0,$B,$8
00014DFA 00                         		even
00014DFA                            @frame_7:
00014DFA 03                         		dc.b $3
00014DFB                            
00014DFB F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
00014E00 F800 0008 08               		dc.b $F8,$0,$0,$8,$8
00014E05 0800 0009 08               		dc.b $8,$0,$0,$9,$8
00014E0A                            		even
00014E0A                            @frame_8:
00014E0A 02                         		dc.b $2
00014E0B                            
00014E0B F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
00014E10 F800 0008 08               		dc.b $F8,$0,$0,$8,$8
00014E16 00                         		even
00014E16                            @frame_9:
00014E16 03                         		dc.b $3
00014E17                            
00014E17 080C 0000 F0               		dc.b $8,$C,$0,$0,$F0
00014E1C F006 0004 F8               		dc.b $F0,$6,$0,$4,$F8
00014E21 F800 000A 08               		dc.b $F8,$0,$0,$A,$8
00014E26                            		even
00014E26                            @frame_10:
00014E26 04                         		dc.b $4
00014E27                            
00014E27 F807 0000 F0               		dc.b $F8,$7,$0,$0,$F0
00014E2C F008 0008 F8               		dc.b $F0,$8,$0,$8,$F8
00014E31 F802 000B 00               		dc.b $F8,$2,$0,$B,$0
00014E36 F800 000E 08               		dc.b $F8,$0,$0,$E,$8
00014E3C 00                         		even
00014E3C                            @frame_11:
00014E3C 04                         		dc.b $4
00014E3D                            
00014E3D F807 0000 F0               		dc.b $F8,$7,$0,$0,$F0
00014E42 F008 0008 F8               		dc.b $F0,$8,$0,$8,$F8
00014E47 F802 000B 00               		dc.b $F8,$2,$0,$B,$0
00014E4C F800 000E 08               		dc.b $F8,$0,$0,$E,$8
00014E52 00                         		even
00014E52                            @frame_12:
00014E52 03                         		dc.b $3
00014E53                            
00014E53 F008 0000 F0               		dc.b $F0,$8,$0,$0,$F0
00014E58 F803 0003 F8               		dc.b $F8,$3,$0,$3,$F8
00014E5D F802 0007 00               		dc.b $F8,$2,$0,$7,$0
00014E62                            		even
00014E62                            @frame_13:
00014E62 04                         		dc.b $4
00014E63                            
00014E63 F009 0000 F0               		dc.b $F0,$9,$0,$0,$F0
00014E68 0002 0006 F8               		dc.b $0,$2,$0,$6,$F8
00014E6D 0001 0009 00               		dc.b $0,$1,$0,$9,$0
00014E72 F800 000B 08               		dc.b $F8,$0,$0,$B,$8
00014E78 00                         		even
00014E78                            @frame_14:
00014E78 03                         		dc.b $3
00014E79                            
00014E79 F00D 0000 F0               		dc.b $F0,$D,$0,$0,$F0
00014E7E 0005 0008 F8               		dc.b $0,$5,$0,$8,$F8
00014E83 1000 000C 00               		dc.b $10,$0,$0,$C,$0
00014E88                            		even
00014E88                            @frame_15:
00014E88 03                         		dc.b $3
00014E89                            
00014E89 F808 0000 F0               		dc.b $F8,$8,$0,$0,$F0
00014E8E F008 0003 F8               		dc.b $F0,$8,$0,$3,$F8
00014E93 0006 0006 F8               		dc.b $0,$6,$0,$6,$F8
00014E98                            		even
00014E98                            @frame_16:
00014E98 05                         		dc.b $5
00014E99                            
00014E99 F80C 0000 E8               		dc.b $F8,$C,$0,$0,$E8
00014E9E 000D 0004 F0               		dc.b $0,$D,$0,$4,$F0
00014EA3 1000 000C 00               		dc.b $10,$0,$0,$C,$0
00014EA8 F001 000D 08               		dc.b $F0,$1,$0,$D,$8
00014EAD F801 000F 10               		dc.b $F8,$1,$0,$F,$10
00014EB2                            		even
00014EB2                            		even
00014EB2                            		even
00014EB2                            DPLC_Player:	include	"engine/modes/level/data/objects/player/data/plc.asm"
00014EB2                            @dplc:
00014EB2 0000                       		dc.w @frame_0-@dplc
00014EB4 0000                       		dc.w @frame_1-@dplc
00014EB6 0000                       		dc.w @frame_2-@dplc
00014EB8 0000                       		dc.w @frame_3-@dplc
00014EBA 0000                       		dc.w @frame_4-@dplc
00014EBC 0000                       		dc.w @frame_5-@dplc
00014EBE 0000                       		dc.w @frame_6-@dplc
00014EC0 0000                       		dc.w @frame_7-@dplc
00014EC2 0000                       		dc.w @frame_8-@dplc
00014EC4 0000                       		dc.w @frame_9-@dplc
00014EC6 0000                       		dc.w @frame_10-@dplc
00014EC8 0000                       		dc.w @frame_11-@dplc
00014ECA 0000                       		dc.w @frame_12-@dplc
00014ECC 0000                       		dc.w @frame_13-@dplc
00014ECE 0000                       		dc.w @frame_14-@dplc
00014ED0 0000                       		dc.w @frame_15-@dplc
00014ED2 0000                       		dc.w @frame_16-@dplc
00014ED4                            @frame_0:
00014ED4 0003                       		dc.w $3
00014ED6                            
00014ED6 3000                       		dc.w $3000
00014ED8 3004                       		dc.w $3004
00014EDA 1008                       		dc.w $1008
00014EDC                            @frame_1:
00014EDC 0003                       		dc.w $3
00014EDE                            
00014EDE 300A                       		dc.w $300A
00014EE0 300E                       		dc.w $300E
00014EE2 1012                       		dc.w $1012
00014EE4                            @frame_2:
00014EE4 0004                       		dc.w $4
00014EE6                            
00014EE6 5014                       		dc.w $5014
00014EE8 301A                       		dc.w $301A
00014EEA 001E                       		dc.w $1E
00014EEC 001F                       		dc.w $1F
00014EEE                            @frame_3:
00014EEE 0003                       		dc.w $3
00014EF0                            
00014EF0 7020                       		dc.w $7020
00014EF2 0028                       		dc.w $28
00014EF4 0029                       		dc.w $29
00014EF6                            @frame_4:
00014EF6 0002                       		dc.w $2
00014EF8                            
00014EF8 702A                       		dc.w $702A
00014EFA 0032                       		dc.w $32
00014EFC                            @frame_5:
00014EFC 0003                       		dc.w $3
00014EFE                            
00014EFE 3033                       		dc.w $3033
00014F00 5037                       		dc.w $5037
00014F02 003D                       		dc.w $3D
00014F04                            @frame_6:
00014F04 0004                       		dc.w $4
00014F06                            
00014F06 503E                       		dc.w $503E
00014F08 3044                       		dc.w $3044
00014F0A 0048                       		dc.w $48
00014F0C 0049                       		dc.w $49
00014F0E                            @frame_7:
00014F0E 0003                       		dc.w $3
00014F10                            
00014F10 704A                       		dc.w $704A
00014F12 0052                       		dc.w $52
00014F14 0053                       		dc.w $53
00014F16                            @frame_8:
00014F16 0002                       		dc.w $2
00014F18                            
00014F18 7054                       		dc.w $7054
00014F1A 005C                       		dc.w $5C
00014F1C                            @frame_9:
00014F1C 0003                       		dc.w $3
00014F1E                            
00014F1E 305D                       		dc.w $305D
00014F20 5061                       		dc.w $5061
00014F22 0067                       		dc.w $67
00014F24                            @frame_10:
00014F24 0004                       		dc.w $4
00014F26                            
00014F26 7068                       		dc.w $7068
00014F28 2070                       		dc.w $2070
00014F2A 2073                       		dc.w $2073
00014F2C 0076                       		dc.w $76
00014F2E                            @frame_11:
00014F2E 0004                       		dc.w $4
00014F30                            
00014F30 7077                       		dc.w $7077
00014F32 207F                       		dc.w $207F
00014F34 2082                       		dc.w $2082
00014F36 0085                       		dc.w $85
00014F38                            @frame_12:
00014F38 0003                       		dc.w $3
00014F3A                            
00014F3A 2086                       		dc.w $2086
00014F3C 3089                       		dc.w $3089
00014F3E 208D                       		dc.w $208D
00014F40                            @frame_13:
00014F40 0004                       		dc.w $4
00014F42                            
00014F42 5090                       		dc.w $5090
00014F44 2096                       		dc.w $2096
00014F46 1099                       		dc.w $1099
00014F48 009B                       		dc.w $9B
00014F4A                            @frame_14:
00014F4A 0003                       		dc.w $3
00014F4C                            
00014F4C 709C                       		dc.w $709C
00014F4E 30A4                       		dc.w $30A4
00014F50 00A8                       		dc.w $A8
00014F52                            @frame_15:
00014F52 0003                       		dc.w $3
00014F54                            
00014F54 20A9                       		dc.w $20A9
00014F56 20AC                       		dc.w $20AC
00014F58 50AF                       		dc.w $50AF
00014F5A                            @frame_16:
00014F5A 0005                       		dc.w $5
00014F5C                            
00014F5C 30B5                       		dc.w $30B5
00014F5E 70B9                       		dc.w $70B9
00014F60 00C1                       		dc.w $C1
00014F62 10C2                       		dc.w $10C2
00014F64 10C4                       		dc.w $10C4
00014F64 10C4                       		dc.w $10C4
00014F66                            		even
00014F66                            Pal_Player:	incbin	"engine/modes/level/data/objects/player/data/pal.bin"
00014F86                            Pal_Player_End:
00014F86                            		even
00014F86                            
00014F86                            ; ---------------------------
00014F86                            ; Objects
00014F86                            ; ---------------------------
00014F86                            
00014F86                            Map_dadou:	include	"engine/modes/level/data/objects/dadou/data/map.asm"
00014F86                            @mappings:
00014F86 0000                       		dc.w @frame_0-@mappings
00014F88 0000                       		dc.w @frame_1-@mappings
00014F8A 0000                       		dc.w @frame_2-@mappings
00014F8C 0000                       		dc.w @frame_3-@mappings
00014F8E 0000                       		dc.w @frame_4-@mappings
00014F90 0000                       		dc.w @frame_5-@mappings
00014F92 0000                       		dc.w @frame_6-@mappings
00014F94 0000                       		dc.w @frame_7-@mappings
00014F96 0000                       		dc.w @frame_8-@mappings
00014F98 0000                       		dc.w @frame_9-@mappings
00014F9A                            @frame_0:
00014F9A 03                         		dc.b $3
00014F9B                            
00014F9B F80A 0000 F0               		dc.b $F8,$A,$0,$0,$F0
00014FA0 F004 0009 00               		dc.b $F0,$4,$0,$9,$0
00014FA5 F801 000B 08               		dc.b $F8,$1,$0,$B,$8
00014FAA                            		even
00014FAA                            @frame_1:
00014FAA 03                         		dc.b $3
00014FAB                            
00014FAB F80A 000D F0               		dc.b $F8,$A,$0,$D,$F0
00014FB0 F004 0016 00               		dc.b $F0,$4,$0,$16,$0
00014FB5 F801 0018 08               		dc.b $F8,$1,$0,$18,$8
00014FBA                            		even
00014FBA                            @frame_2:
00014FBA 02                         		dc.b $2
00014FBB                            
00014FBB F80A 001A F0               		dc.b $F8,$A,$0,$1A,$F0
00014FC0 F801 0023 08               		dc.b $F8,$1,$0,$23,$8
00014FC6 00                         		even
00014FC6                            @frame_3:
00014FC6 02                         		dc.b $2
00014FC7                            
00014FC7 F00E 0025 F0               		dc.b $F0,$E,$0,$25,$F0
00014FCC 0808 0031 F8               		dc.b $8,$8,$0,$31,$F8
00014FD2 00                         		even
00014FD2                            @frame_4:
00014FD2 02                         		dc.b $2
00014FD3                            
00014FD3 F00E 0034 F0               		dc.b $F0,$E,$0,$34,$F0
00014FD8 0808 0040 F8               		dc.b $8,$8,$0,$40,$F8
00014FDE 00                         		even
00014FDE                            @frame_5:
00014FDE 02                         		dc.b $2
00014FDF                            
00014FDF F00E 0043 F0               		dc.b $F0,$E,$0,$43,$F0
00014FE4 0804 004F F8               		dc.b $8,$4,$0,$4F,$F8
00014FEA 00                         		even
00014FEA                            @frame_6:
00014FEA 02                         		dc.b $2
00014FEB                            
00014FEB F80A 0051 F0               		dc.b $F8,$A,$0,$51,$F0
00014FF0 F801 005A 08               		dc.b $F8,$1,$0,$5A,$8
00014FF6 00                         		even
00014FF6                            @frame_7:
00014FF6 02                         		dc.b $2
00014FF7                            
00014FF7 F00E 005C F0               		dc.b $F0,$E,$0,$5C,$F0
00014FFC 0804 0068 F8               		dc.b $8,$4,$0,$68,$F8
00015002 00                         		even
00015002                            @frame_8:
00015002 02                         		dc.b $2
00015003                            
00015003 F00E 006A F0               		dc.b $F0,$E,$0,$6A,$F0
00015008 0808 0076 F8               		dc.b $8,$8,$0,$76,$F8
0001500E 00                         		even
0001500E                            @frame_9:
0001500E 02                         		dc.b $2
0001500F                            
0001500F F00E 0079 F0               		dc.b $F0,$E,$0,$79,$F0
00015014 0808 0085 F8               		dc.b $8,$8,$0,$85,$F8
0001501A 00                         		even
0001501A 00                         		even
0001501A                             		even
0001501A                            Map_pikudo:	include	"engine/modes/level/data/objects/pikudo/data/map.asm"
0001501A                            @mappings:
0001501A 0000                       		dc.w @frame_0-@mappings
0001501C 0000                       		dc.w @frame_1-@mappings
0001501E 0000                       		dc.w @frame_2-@mappings
00015020 0000                       		dc.w @frame_3-@mappings
00015022 0000                       		dc.w @frame_4-@mappings
00015024                            @frame_0:
00015024 04                         		dc.b $4
00015025                            
00015025 F009 0000 F0               		dc.b $F0,$9,$0,$0,$F0
0001502A E804 0006 F8               		dc.b $E8,$4,$0,$6,$F8
0001502F 0009 0008 F8               		dc.b $0,$9,$0,$8,$F8
00015034 F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0001503A 00                         		even
0001503A                            @frame_1:
0001503A 04                         		dc.b $4
0001503B                            
0001503B F009 000F F0               		dc.b $F0,$9,$0,$F,$F0
00015040 E804 0015 F8               		dc.b $E8,$4,$0,$15,$F8
00015045 0009 0017 F8               		dc.b $0,$9,$0,$17,$F8
0001504A F800 001D 08               		dc.b $F8,$0,$0,$1D,$8
00015050 00                         		even
00015050                            @frame_2:
00015050 04                         		dc.b $4
00015051                            
00015051 F009 001E F0               		dc.b $F0,$9,$0,$1E,$F0
00015056 E804 0024 F8               		dc.b $E8,$4,$0,$24,$F8
0001505B 0009 0026 F8               		dc.b $0,$9,$0,$26,$F8
00015060 F800 002C 08               		dc.b $F8,$0,$0,$2C,$8
00015066 00                         		even
00015066                            @frame_3:
00015066 01                         		dc.b $1
00015067                            
00015067 F00B 002D F8               		dc.b $F0,$B,$0,$2D,$F8
0001506C                            		even
0001506C                            @frame_4:
0001506C 01                         		dc.b $1
0001506D                            
0001506D F00B 0039 F8               		dc.b $F0,$B,$0,$39,$F8
00015072                            		even
00015072                            		even
00015072                             		even
00015072                            Map_ball:	include	"engine/modes/level/data/objects/ball/data/map.asm"
00015072                            @mappings:
00015072 0000                       		dc.w @frame_0-@mappings
00015074 0000                       		dc.w @frame_1-@mappings
00015076 0000                       		dc.w @frame_2-@mappings
00015078 0000                       		dc.w @frame_3-@mappings
0001507A                            @frame_0:
0001507A 01                         		dc.b $1
0001507B                            
0001507B F806 0000 F8               		dc.b $F8,$6,$0,$0,$F8
00015080                            		even
00015080                            @frame_1:
00015080 01                         		dc.b $1
00015081                            
00015081 F806 0006 F8               		dc.b $F8,$6,$0,$6,$F8
00015086                            		even
00015086                            @frame_2:
00015086 01                         		dc.b $1
00015087                            
00015087 F806 000C F8               		dc.b $F8,$6,$0,$C,$F8
0001508C                            		even
0001508C                            @frame_3:
0001508C 01                         		dc.b $1
0001508D                            
0001508D F806 0012 F8               		dc.b $F8,$6,$0,$12,$F8
00015092                            		even
00015092                            		even
00015092                             		even
00015092                            objMap_Platform:include	"engine/modes/level/data/objects/platform/data/map.asm"
00015092                            @mappings:
00015092 0000                       		dc.w @frame_0-@mappings
00015094                            @frame_0:
00015094 02                         		dc.b $2
00015095                            
00015095 F80C 0000 E8               		dc.b $F8,$C,$0,$0,$E8
0001509A F804 0004 08               		dc.b $F8,$4,$0,$4,$8
000150A0 00                         		even
000150A0 00                         		even
000150A0                             		even
000150A0                            mapObj_EndFlag:	include	"engine/modes/level/data/objects/endflag/data/map.asm"
000150A0                            @mappings:
000150A0 0000                       		dc.w @frame_0-@mappings
000150A2 0000                       		dc.w @frame_1-@mappings
000150A4 0000                       		dc.w @frame_2-@mappings
000150A6                            @frame_0:
000150A6 07                         		dc.b $7
000150A7                            
000150A7 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
000150AC E00B 0004 E8               		dc.b $E0,$B,$0,$4,$E8
000150B1 0005 0010 E8               		dc.b $0,$5,$0,$10,$E8
000150B6 000C 0014 F8               		dc.b $0,$C,$0,$14,$F8
000150BB E80E 0018 00               		dc.b $E8,$E,$0,$18,$0
000150C0 E004 0024 08               		dc.b $E0,$4,$0,$24,$8
000150C5 0000 0026 18               		dc.b $0,$0,$0,$26,$18
000150CA                            		even
000150CA                            @frame_1:
000150CA 07                         		dc.b $7
000150CB                            
000150CB 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
000150D0 E00F 0004 E8               		dc.b $E0,$F,$0,$4,$E8
000150D5 0005 0014 E8               		dc.b $0,$5,$0,$14,$E8
000150DA 000C 0018 F8               		dc.b $0,$C,$0,$18,$F8
000150DF E80A 001C 08               		dc.b $E8,$A,$0,$1C,$8
000150E4 E000 0025 10               		dc.b $E0,$0,$0,$25,$10
000150E9 0000 0026 18               		dc.b $0,$0,$0,$26,$18
000150EE                            		even
000150EE                            @frame_2:
000150EE 07                         		dc.b $7
000150EF                            
000150EF 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
000150F4 E00F 0004 E8               		dc.b $E0,$F,$0,$4,$E8
000150F9 0005 0014 E8               		dc.b $0,$5,$0,$14,$E8
000150FE 000C 0018 F8               		dc.b $0,$C,$0,$18,$F8
00015103 E007 001C 08               		dc.b $E0,$7,$0,$1C,$8
00015108 E001 0024 18               		dc.b $E0,$1,$0,$24,$18
0001510D F801 0026 18               		dc.b $F8,$1,$0,$26,$18
00015112                            		even
00015112                            		even
00015112                             		even
00015112                            dplcObj_EndFlag:include	"engine/modes/level/data/objects/endflag/data/plc.asm"
00015112                            @dplc:
00015112 0000                       		dc.w @frame_0-@dplc
00015114 0000                       		dc.w @frame_1-@dplc
00015116 0000                       		dc.w @frame_2-@dplc
00015118                            @frame_0:
00015118 0007                       		dc.w $7
0001511A                            
0001511A 3000                       		dc.w $3000
0001511C B004                       		dc.w $B004
0001511E 3010                       		dc.w $3010
00015120 3014                       		dc.w $3014
00015122 B018                       		dc.w $B018
00015124 1024                       		dc.w $1024
00015126 0026                       		dc.w $26
00015128                            @frame_1:
00015128 0007                       		dc.w $7
0001512A                            
0001512A 3027                       		dc.w $3027
0001512C F02B                       		dc.w $F02B
0001512E 303B                       		dc.w $303B
00015130 303F                       		dc.w $303F
00015132 8043                       		dc.w $8043
00015134 004C                       		dc.w $4C
00015136 004D                       		dc.w $4D
00015138                            @frame_2:
00015138 0007                       		dc.w $7
0001513A                            
0001513A 304E                       		dc.w $304E
0001513C F052                       		dc.w $F052
0001513E 3062                       		dc.w $3062
00015140 3066                       		dc.w $3066
00015142 706A                       		dc.w $706A
00015144 1072                       		dc.w $1072
00015146 1074                       		dc.w $1074
00015146 1074                       		dc.w $1074
00015148                            		even
00015148                            		
00015148                            ; ====================================================================
00015148                            ; -------------------------------------------------
00015148                            ; Level DATA
00015148                            ; -------------------------------------------------
00015148                            
00015148                            LevelList:
00015148 0000 0000                  		dc.l $01<<24|Lvl_Zone1		; Level data
0001514C 0000 0000                  		dc.l Pal_LvlMain_Gray		; Palette
00015150 0020 00F0                  		dc.w $20,$F0			; Player X/Y
00015154 1100 0078                  		dc.w $1100,$78			; End flag X/Y
00015158                            ; 		dc.l $01<<24|Lvl_Zone2
00015158                            ; 		dc.l Pal_LvlMain_Gray
00015158                            ; 		dc.w $20,$D0
00015158                            ; 		dc.w 0,0
00015158                            ; 		dc.l Lvl_Zone3
00015158                            ; 		dc.l Pal_LvlMain_Gray
00015158                            ; 		dc.w $28,$250
00015158                            ; 		dc.w 0,0
00015158                            ; 		dc.l Lvl_Zone1
00015158                            ; 		dc.l Pal_LvlMain_Gray
00015158                            ; 		dc.w $10,0
00015158                            ; 		dc.w 0,0
00015158                            ; 		dc.l Lvl_Zone1
00015158                            ; 		dc.l Pal_LvlMain_Gray
00015158                            ; 		dc.w $10,0
00015158                            ; 		dc.w 0,0
00015158                            ; 		even
00015158                            		
00015158                            artdata_Level_Test:
00015158 0001 3000                   		dc.l art_dadou
0001515C 6420                       		dc.w varVramDadou
0001515E 043F                        		dc.w ((art_dadou_end-art_dadou)/4)-1
00015160 0001 4A60                    		dc.l artObj_Ball
00015164 44B8                       		dc.w varVramBall
00015166 00BF                        		dc.w ((artObj_Ball_e-artObj_Ball)/4)-1
00015168 0001 4100                   		dc.l Art_pikudo
0001516C 04D0                       		dc.w varVramPikudo
0001516E 0227                        		dc.w ((Art_pikudo_end-Art_pikudo)/4)-1
00015170                             		
00015170 0001 49A0                   		dc.l artObj_Platform
00015174 2530                        		dc.w varVramPlatfrm
00015176 002F                        		dc.w ((artObj_Platform_e-artObj_Platform)/4)-1
00015178                             		
00015178 FFFF                        		dc.w -1
0001517A                             		even
0001517A                             		
0001517A                            ; --------------------------------------------
0001517A                            ; Levels
0001517A                            ; --------------------------------------------
0001517A                            
0001517A 0118 0018                  Lvl_Zone1:	dc.w 280,24
0001517E 0000 0000                  		dc.l @objects
00015182 0000 0000 FFFF FFFF        		dc.l @FG_blk,-1			; Block VRAM / Prize VRAM (-1, use defaults) 
0001518A 0000 0000 0000 0000        		dc.l @FG_lay_low,@FG_lay_hi	; Level layout hi/low
00015192 0000 0000 0000 0000        		dc.l @FG_col,@FG_prz		; Collision / Prizes
0001519A                            ; 		dc.w -1
0001519A                            		
0001519A                            @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/1/fg_lay_low.bin"
00016BDA                             		even
00016BDA                            @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/1/fg_lay_hi.bin"
0001861A                             		even	
0001861A                            @FG_col:	incbin	"engine/modes/level/data/layouts/main/1/fg_col.bin"
0001A05A                             		even
0001A05A                            @FG_prz:	incbin	"engine/modes/level/data/layouts/main/1/fg_prz.bin"
0001A102                             		even 
0001A102                            @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
0001A902                             		even
0001A902                            @objects:	include	"engine/modes/level/data/layouts/main/1/objlist.asm"
0001A902 0000 7BC0                  		dc.l obj_dadou
0001A906 01F8 00AC                  		dc.w 504,172
0001A90A 00                         		dc.b 0
0001A90B 00                         		dc.b 0
0001A90C                            
0001A90C 0000 7FF0                  		dc.l obj_platform
0001A910 0348 00E0                  		dc.w 840,224
0001A914 00                         		dc.b 0
0001A915 00                         		dc.b 0
0001A916                            
0001A916 0000 7FF0                  		dc.l obj_platform
0001A91A 03E8 00F8                  		dc.w 1000,248
0001A91E 01                         		dc.b 1
0001A91F 00                         		dc.b 0
0001A920                            
0001A920 0000 7D96                  		dc.l obj_pikudo
0001A924 049C 00DC                  		dc.w 1180,220
0001A928 00                         		dc.b 0
0001A929 00                         		dc.b 0
0001A92A                            
0001A92A 0000 7FF0                  		dc.l obj_platform
0001A92E 0358 0178                  		dc.w 856,376
0001A932 01                         		dc.b 1
0001A933 00                         		dc.b 0
0001A934                            
0001A934 0000 7FF0                  		dc.l obj_platform
0001A938 03E0 0168                  		dc.w 992,360
0001A93C 00                         		dc.b 0
0001A93D 00                         		dc.b 0
0001A93E                            
0001A93E 0000 7FF0                  		dc.l obj_platform
0001A942 0610 00C8                  		dc.w 1552,200
0001A946 01                         		dc.b 1
0001A947 00                         		dc.b 0
0001A948                            
0001A948 0000 847C                  		dc.l obj_ball
0001A94C 064C 0100                  		dc.w 1612,256
0001A950 00                         		dc.b 0
0001A951 00                         		dc.b 0
0001A952                            
0001A952 0000 7BC0                  		dc.l obj_dadou
0001A956 080C 00CC                  		dc.w 2060,204
0001A95A 00                         		dc.b 0
0001A95B 00                         		dc.b 0
0001A95C                            
0001A95C 0000 7D96                  		dc.l obj_pikudo
0001A960 0648 0084                  		dc.w 1608,132
0001A964 00                         		dc.b 0
0001A965 00                         		dc.b 0
0001A966                            
0001A966 0000 847C                  		dc.l obj_ball
0001A96A 0900 0104                  		dc.w 2304,260
0001A96E 00                         		dc.b 0
0001A96F 00                         		dc.b 0
0001A970                            
0001A970 0000 7BC0                  		dc.l obj_dadou
0001A974 09A8 00EC                  		dc.w 2472,236
0001A978 00                         		dc.b 0
0001A979 00                         		dc.b 0
0001A97A                            
0001A97A 0000 7BC0                  		dc.l obj_dadou
0001A97E 0A94 0108                  		dc.w 2708,264
0001A982 00                         		dc.b 0
0001A983 00                         		dc.b 0
0001A984                            
0001A984 0000 7FF0                  		dc.l obj_platform
0001A988 09E8 0100                  		dc.w 2536,256
0001A98C 02                         		dc.b 2
0001A98D 00                         		dc.b 0
0001A98E                            
0001A98E 0000 7BC0                  		dc.l obj_dadou
0001A992 0CB8 0140                  		dc.w 3256,320
0001A996 00                         		dc.b 0
0001A997 00                         		dc.b 0
0001A998                            
0001A998 0000 7BC0                  		dc.l obj_dadou
0001A99C 0CC4 0080                  		dc.w 3268,128
0001A9A0 00                         		dc.b 0
0001A9A1 00                         		dc.b 0
0001A9A2                            
0001A9A2 0000 7BC0                  		dc.l obj_dadou
0001A9A6 0BFC 00C0                  		dc.w 3068,192
0001A9AA 80                         		dc.b 0x80
0001A9AB 00                         		dc.b 0
0001A9AC                            
0001A9AC 0000 847C                  		dc.l obj_ball
0001A9B0 0F4C 0098                  		dc.w 3916,152
0001A9B4 00                         		dc.b 0
0001A9B5 00                         		dc.b 0
0001A9B6                            
0001A9B6 0000 7D96                  		dc.l obj_pikudo
0001A9BA 0A38 00C0                  		dc.w 2616,192
0001A9BE 00                         		dc.b 0
0001A9BF 00                         		dc.b 0
0001A9C0                            
0001A9C0 0000 7D96                  		dc.l obj_pikudo
0001A9C4 0FD4 0070                  		dc.w 4052,112
0001A9C8 00                         		dc.b 0
0001A9C9 00                         		dc.b 0
0001A9CA                            
0001A9CA 0000 7D96                  		dc.l obj_pikudo
0001A9CE 1044 0090                  		dc.w 4164,144
0001A9D2 00                         		dc.b 0
0001A9D3 00                         		dc.b 0
0001A9D4                            
0001A9D4 0000 7FF0                  		dc.l obj_platform
0001A9D8 0FD8 0168                  		dc.w 4056,360
0001A9DC 00                         		dc.b 0
0001A9DD 00                         		dc.b 0
0001A9DE                            
0001A9DE 0000 7BC0                  		dc.l obj_dadou
0001A9E2 0DEC 00F0                  		dc.w 3564,240
0001A9E6 80                         		dc.b 0x80
0001A9E7 00                         		dc.b 0
0001A9E8                            
0001A9E8 0000 7FF0                  		dc.l obj_platform
0001A9EC 10C4 012C                  		dc.w 4292,300
0001A9F0 01                         		dc.b 1
0001A9F1 00                         		dc.b 0
0001A9F2                            
0001A9F2 0000 0000                  		dc.l 0
0001A9F2 0000 0000                  		dc.l 0
0001A9F6                             		even
0001A9F6                            
0001A9F6                            ; --------------------------------------------
0001A9F6                            
0001A9F6                            ; Lvl_Zone2:	dc.w 228,14
0001A9F6                            ; 		dc.l @objects
0001A9F6                            ; 		dc.l @FG_blk,-1			;Block VRAM / Prize VRAM (-1, use defaults) 
0001A9F6                            ; 		dc.l @FG_lay_low,@FG_lay_hi	;Level layout hi/low
0001A9F6                            ; 		dc.l @FG_col,@FG_prz		;Collision / Prizes
0001A9F6                            ; ; 		dc.w -1
0001A9F6                            ; 		
0001A9F6                            ; @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/2/fg_lay_low.bin"
0001A9F6                            ;  		even
0001A9F6                            ; @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/2/fg_lay_hi.bin"
0001A9F6                            ;  		even	
0001A9F6                            ; @FG_col:	incbin	"engine/modes/level/data/layouts/main/2/fg_col.bin"
0001A9F6                            ;  		even
0001A9F6                            ; @FG_prz:	incbin	"engine/modes/level/data/layouts/main/2/fg_prz.bin"
0001A9F6                            ;  		even 
0001A9F6                            ; @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
0001A9F6                            ;  		even
0001A9F6                            ; @objects:	include	"engine/modes/level/data/layouts/main/2/objlist.asm"
0001A9F6                            ;  		even
0001A9F6                             
0001A9F6                            ; --------------------------------------------
0001A9F6                            
0001A9F6                            ; Lvl_Zone3:	dc.w 20,40
0001A9F6                            ; 		dc.l @objects
0001A9F6                            ; 		dc.l @FG_blk,-1			;Block VRAM / Prize VRAM (-1, use defaults) 
0001A9F6                            ; 		dc.l @FG_lay_low,@FG_lay_hi	;Level layout hi/low
0001A9F6                            ; 		dc.l @FG_col,@FG_prz		;Collision / Prizes
0001A9F6                            ; ; 		dc.w -1
0001A9F6                            ; 		
0001A9F6                            ; @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/3/fg_lay_low.bin"
0001A9F6                            ;  		even
0001A9F6                            ; @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/3/fg_lay_hi.bin"
0001A9F6                            ;  		even	
0001A9F6                            ; @FG_col:	incbin	"engine/modes/level/data/layouts/main/3/fg_col.bin"
0001A9F6                            ;  		even
0001A9F6                            ; @FG_prz:	incbin	"engine/modes/level/data/layouts/main/3/fg_prz.bin"
0001A9F6                            ;  		even 
0001A9F6                            ; @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
0001A9F6                            ;  		even
0001A9F6                            ; @objects:	include	"engine/modes/level/data/layouts/main/3/objlist.asm"
0001A9F6                            ;  		even
0001A9F6                            
0001A9F6                            ; --------------------------------------------
0001A9F6                            
0001A9F6                            Pal_LvlMain_Gray:
0001A9F6                            		incbin	"engine/modes/level/data/layouts/main/lvl_pal.bin"
0001AA16                            		incbin	"engine/modes/level/data/layouts/main/bg_pal.bin"
0001AA36                            		even
0001AA36                            		
0001AA36                            Art_Lvl_Test:	incbin	"engine/modes/level/data/layouts/main/lvl_art.bin"
0001E096                            Art_Lvl_Test_e:	even
0001E096                            
0001E096                            Art_LvlBG_Test:	incbin	"engine/modes/level/data/layouts/main/bg_art.bin"
00022C56                            Art_LvlBG_Test_e:
00022C56                            		even
00022C56                            Map_LvlBG_Test:	incbin	"engine/modes/level/data/layouts/main/bg_map.bin"
00023C56                            Map_LvlBG_Test_e:
00023C56                            		even
00023C56                            		
00023C56                            ; --------------------------------------------
00023C56                            
00023C56                            Art_LvlPrizes:	incbin	"engine/modes/level/data/layouts/prizes_art.bin"
00024856                            		even
00024856                            Art_LvlPrizes_e:
00024856                            
00024856                            Pal_LvlCoinItms	incbin	"engine/modes/level/data/layouts/lvlitems_pal.bin"
00024876                            		even
00024876                            		
00024876                            ; ====================================================================
00024876                            ; -------------------------------------------------
00024876                            ; Sound data
00024876                            ; -------------------------------------------------
00024876                            
00024876                            ; --------------------------
00024876                            ; MUSIC level 1
00024876                            ; --------------------------
00024876                            
00024876                            Music_Level1:
00024876 0B02                       		dc.b 11,2
00024878 0000 0000                  		dc.l @notes
0002487C 0000 0000                       		dc.l @ins
00024880 000A                            		dc.w 10
00024882 0040 800F                        		dc.b FM_1,64,$80,$0F
00024886 0140 800F                        		dc.b FM_2,64,$80,$0F
0002488A 0240 800F                        		dc.b FM_3,64,$80,$0F
0002488E 0440 800F                  		dc.b FM_4,64,$80,$0F
00024892 0540 800F                  		dc.b FM_5,64,$80,$0F
00024896 0640 800F                   		dc.b FM_6,64,$80,$0F
0002489A 8040 800F                   		dc.b PSG_1,64,$80,$0F
0002489E A040 800F                   		dc.b PSG_2,64,$80,$0F
000248A2 C040 800F                   		dc.b PSG_3,64,$80,$0F
000248A6 E040 800F                   		dc.b NOISE,64,$80,$0F
000248AA                             		even
000248AA                            @notes:		incbin "engine/sound/music/level0.it",$50+$11B
00025F90                                  		even
00025F90 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins
00025F96                            		even
00025F96                            		
00025F96 0001 0000                  @ymha: 		dc.w 1,0
00025F9A 0000 0000                  		dc.l fmBass_jazz
00025F9E 0042 0000                  		dc.w 2|$40,0
00025FA2 0000 0000                  		dc.l fm3drum_tick
00025FA6 38AB 3457                  		dc.w $00AB|$3800,$0457|$3000
00025FAA 3511 2336                  		dc.w $0511|$3000,$0336|$2000
00025FAE 0083 FFE8                    		dc.w 3|$80,-24
00025FB2 0000 0000                    		dc.l wav_stKick
00025FB6 0000 0000                   		dc.l wav_stKick_e
00025FBA FFFF FFFF                   		dc.l -1
00025FBE 0084 FFE8                    		dc.w 4|$80,-24
00025FC2 0000 0000                    		dc.l wav_stSnare
00025FC6 0000 0000                   		dc.l wav_stSnare_e
00025FCA FFFF FFFF                   		dc.l -1
00025FCE FFFF                       		dc.w -1
00025FD0                            		even
00025FD0                            
00025FD0 0005 0004                  @noise: 	dc.w 5,%100
00025FD4 FFFF                       		dc.w -1
00025FD6                            		even
00025FD6                            	
00025FD6                            ; --------------------------
00025FD6                            ; SFX: 1up
00025FD6                            ; --------------------------
00025FD6                            
00025FD6 00FF                       SndSfx_OneUp:	dc.b 0,-1
00025FD8 0000 0000                  		dc.l @pattr
00025FDC 0000 0000                       		dc.l @ins
00025FE0 0002                            		dc.w 2
00025FE2 A040 800F                        		dc.b PSG_2,64,$80,$F
00025FE6 C040 800F                        		dc.b PSG_3,64,$80,$F
00025FEA                            @pattr:		incbin "engine/sound/sfx/oneup.it",$50+$DC
0002610A                            		even
0002610A FFFF FFFF FFFF FFFF        @ins: 		dc.w -1,-1,-1,-1
00026112                            		even
00026112                            				
00026112                            ; --------------------------
00026112                            ; SFX: BONK
00026112                            ; --------------------------
00026112                            
00026112 00FF                       SndSfx_BONK:	dc.b 0,-1
00026114 0000 0000                  		dc.l @pattern
00026118 0000 0000                       		dc.l @instruments
0002611C 0003                            		dc.w 3
0002611E 0540 800E                        		dc.b FM_5,64,$80,%1110
00026122 0640 800F                        		dc.b FM_6,64,$80,$F
00026126 A040 800F                        		dc.b PSG_2,64,$80,$F
0002612A                            @pattern:	incbin "engine/sound/sfx/bonk.it",$50+$FC+$28
000261CC                                  		even
000261CC                            
000261CC 0000                       @instruments: 	dc.w @ymha-@instruments
000261CE FFFF                       		dc.w -1
000261D0 0000                       		dc.w @noise-@instruments
000261D2 FFFF                       		dc.w -1
000261D4                            		even
000261D4                            		
000261D4 0002 0000                  @ymha: 		dc.w 2,0
000261D8 0000 0000                     		dc.l FMSfx_Bump
000261DC                            
000261DC 0083 FFF0                     		dc.w $80|3,-16
000261E0 0000 0000                     		dc.l WAVE_lwpnch
000261E4 0000 0000                     		dc.l WAVE_lwpnch_e
000261E8 FFFF FFFF                     		dc.l -1
000261EC                               		
000261EC FFFF                       		dc.w -1	;EOL
000261EE                            		even
000261EE 0002 0005                  @noise: 	dc.w 2,%101
000261F2 FFFF                       		dc.w -1
000261F4                            		even
000261F4                            		
000261F4                            ; --------------------------
000261F4                            ; SFX: Bonk a coin
000261F4                            ; --------------------------
000261F4                            
000261F4                            SndSfx_BonkCoin:
000261F4 00FF                       		dc.b 0,-1
000261F6 0000 0000                  		dc.l @pattern
000261FA 0000 0000                       		dc.l @instruments
000261FE 0004                            		dc.w 4
00026200 0540 800E                        		dc.b FM_5,64,$80,%1110
00026204 0640 800F                        		dc.b FM_6,64,$80,$F
00026208 A040 800F                        		dc.b PSG_2,64,$80,$F
0002620C C040 800F                        		dc.b PSG_3,64,$80,$F
00026210                            @pattern:	incbin "engine/sound/sfx/bonkcoin.it",$50+$12C
000262DC 00                               		even
000262DC                            
000262DC 0000                       @instruments: 	dc.w @ymha-@instruments
000262DE FFFF                       		dc.w -1
000262E0 0000                       		dc.w @noise-@instruments
000262E2 FFFF                       		dc.w -1
000262E4                            		even
000262E4                            		
000262E4 0002 0000                  @ymha: 		dc.w 2,0
000262E8 0000 0000                     		dc.l FMSfx_Bump
000262EC                            
000262EC 0083 FFF0                     		dc.w $80|3,-16
000262F0 0000 0000                     		dc.l WAVE_lwpnch
000262F4 0000 0000                     		dc.l WAVE_lwpnch_e
000262F8 FFFF FFFF                     		dc.l -1
000262FC                               		
000262FC FFFF                       		dc.w -1	;EOL
000262FE                            		even
000262FE 0002 0005                  @noise: 	dc.w 2,%101
00026302 FFFF                       		dc.w -1
00026304                            		even
00026304                            		
00026304                            ; --------------------------
00026304                            ; SFX: PUM
00026304                            ; --------------------------
00026304                            
00026304                            SndSfx_PUM:
00026304 00FF                       		dc.b 0,-1
00026306 0000 0000                  		dc.l @pattern
0002630A 0000 0000                       		dc.l @instruments
0002630E 0003                            		dc.w 3
00026310 0540 800F                        		dc.b FM_5,64,$80,$0F
00026314 E040 800F                        		dc.b NOISE,64,$80,$0F
00026318 0640 800F                        		dc.b FM_6,64,$80,$0F
0002631C                            @pattern:	incbin "engine/sound/sfx/blkbump.it",$F4+$50+$20
000263BE                                  		even
000263BE                            
000263BE 0000                       @instruments:	dc.w @ymha-@instruments
000263C0 FFFF                       		dc.w -1
000263C2 0000                       		dc.w @noise-@instruments
000263C4                            		even
000263C4                            
000263C4 0001 0000                  @ymha: 		dc.w 1,0
000263C8 0000 0000                     		dc.l FMSfx_Punch
000263CC                               		
000263CC 0083 0000                     		dc.w $80|3,0
000263D0 0000 0000                     		dc.l WAVE_lwpnch
000263D4 0000 0000                     		dc.l WAVE_lwpnch_e
000263D8 FFFF FFFF                     		dc.l -1
000263DC                               		
000263DC FFFF                       		dc.w -1	;EOL
000263DE                            		even
000263DE                            @noise:
000263DE 0002 0006                   		dc.w 2,%110
000263E2 FFFF                       		dc.w -1
000263E4                            		even
000263E4                            
000263E4                            ; --------------------------
000263E4                            ; SFX: PING
000263E4                            ; --------------------------
000263E4                            
000263E4                            SndSfx_PING:
000263E4 00FF                       		dc.b 0,-1
000263E6 0000 0000                  		dc.l @notes
000263EA 0000 0000                       		dc.l @ins
000263EE 0002                            		dc.w 2
000263F0 E040 800F                        		dc.b NOISE,64,$80,$0F
000263F4 0640 800F                        		dc.b FM_6,64,$80,$0F
000263F8                            @notes:		incbin "engine/sound/sfx/pingball.it",$50+$DC
00026492                                  		even
00026492 0000                       @ins: 		dc.w @ymha-@ins
00026494 FFFF                       		dc.w -1
00026496 0000                       		dc.w @noise-@ins
00026498                            		even
00026498                            @noise:
00026498 0001 0004                   		dc.w 1,%100
0002649C FFFF                       		dc.w -1
0002649E                            		even
0002649E                            @ymha:
0002649E 0081 0000                  		dc.w $80|1,0
000264A2 0000 0000                  		dc.l WAVE_sfxBall
000264A6 0000 0000                  		dc.l WAVE_sfxBall_e
000264AA FFFF FFFF                  		dc.l -1
000264AE                            		
000264AE FFFF                       		dc.w -1
000264B0                            		even
000264B0                            		
000264B0                            ; --------------------------
000264B0                            ; SFX: COIN
000264B0                            ; --------------------------
000264B0                            
000264B0                            SndSfx_COIN:
000264B0 00FF                       		dc.b 0,-1
000264B2 0000 0000                  		dc.l @notes
000264B6 0000 0000                       		dc.l @ins
000264BA 0002                            		dc.w 2
000264BC 8040 800F                        		dc.b PSG_1,64,$80,$F
000264C0 A040 800F                        		dc.b PSG_2,64,$80,$F
000264C4                            @notes:		incbin "engine/sound/sfx/coin.it",$50+$D4+8
0002656A                                  		even
0002656A FFFF                       @ins: 		dc.w -1
0002656C FFFF                       		dc.w -1
0002656E FFFF                       		dc.w -1
00026570                            		even
00026570                            		
00026570                            ; --------------------------
00026570                            ; SFX: COIN
00026570                            ; --------------------------
00026570                            
00026570                            SndSfx_BEEBUZZ:
00026570 00FF                       		dc.b 0,-1
00026572 0000 0000                  		dc.l @notes
00026576 0000 0000                       		dc.l @ins
0002657A 0001                            		dc.w 1
0002657C 0540 800F                        		dc.b FM_5,64,$80,$F
00026580                            @notes:		incbin "engine/sound/sfx/beebuzz.it",$50+$D4
00026630                                  		even
00026630 0000                       @ins: 		dc.w @ymha-@ins
00026632 FFFF                       		dc.w -1
00026634 FFFF                       		dc.w -1
00026636                            		even
00026636                            @ymha:
00026636 0001 0000                  		dc.w 1,0
0002663A 0000 0000                  		dc.l fmSfx_BUZZ
0002663E FFFF FFFF                  		dc.l -1
00026642                            		
00026642 FFFF                       		dc.w -1
00026644                            		even
00026644                            		
00026644                            ; --------------------------
00026644                            ; SFX: COIN
00026644                            ; --------------------------
00026644                            
00026644                            SndSfx_PlyrJump:
00026644 00FF                       		dc.b 0,-1
00026646 0000 0000                  		dc.l @notes
0002664A 0000 0000                       		dc.l @ins
0002664E 0001                            		dc.w 1
00026650 E040 800F                        		dc.b NOISE,64,$80,$F
00026654                            @notes:		incbin "engine/sound/sfx/plyrjump.it",$50+$DC
00026704 00                               		even
00026704 FFFF FFFF 0000             @ins:		dc.w -1,-1,@noise-@ins
0002670A 0001 0004                  @noise:		dc.w 1,%100
0002670E                            		even
0002670E                               
0002670E                            ; --------------------------
0002670E                            ; SFX: COIN
0002670E                            ; --------------------------
0002670E                            
0002670E                            SndSfx_HitEnemy:
0002670E 00FF                       		dc.b 0,-1
00026710 0000 0000                  		dc.l @notes
00026714 0000 0000                  		dc.l @ins
00026718 0002                       		dc.w 2
0002671A 0640 800F                  		dc.b FM_6,64,$80,$F
0002671E E040 800F                  		dc.b NOISE,64,$80,$F
00026722                            @notes:		incbin "engine/sound/sfx/bumpenemy.it",$50+$D4
000267CE 00                         		even
000267CE 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins
000267D4 0001 0000                  @ymha:		dc.w 1,0
000267D8 0000 0000                  		dc.l FMSfx_Punch
000267DC 0002 0006                  @noise:		dc.w 2,%110
000267E0                            		
000267E0                            ; --------------------------
000267E0                            ; instruments
000267E0                            ; --------------------------
000267E0                            
000267E0                            fmBass_jazz:	incbin	"engine/sound/instruments/FM/bass/bass_jazz.bin"
000267FA 00                         		even
000267FA                            fm3drum_tick: 	incbin	"engine/sound/instruments/fm/drums/fm3_tick.bin"
00026814 00                         		even
00026814                            		
00026814                            FMSfx_Punch:	incbin	"engine/sound/instruments/FM/fmsfx_boomlong.bin"
0002682E 00                         		even
0002682E                            FMSfx_Bump:	incbin	"engine/sound/instruments/FM/fmsfx_bump.bin"
00026848 00                         		even
00026848                            fmSfx_BUZZ:	incbin	"engine/sound/instruments/FM/old/socket_voiceset.bin",$19*18,$19
00026862 00                         		even
00026862                            		
00026862                            WAVE_lwbonk:	incbin	"engine/sound/instruments/DAC/sfxbonk.wav",$2C
00027D28 00                         WAVE_lwbonk_e:	even
00027D28                            WAVE_lwpnch:	incbin	"engine/sound/instruments/DAC/sfxhithard.wav",$2C
000298E0 00                         WAVE_lwpnch_e:	even
000298E0                            WAVE_sfxBall:	incbin	"engine/sound/instruments/DAC/sfxBallTick.wav",$2C
0002B834                            WAVE_sfxBall_e:	even
0002B834                            wav_stKick:	incbin	"engine/sound/instruments/DAC/stKick.wav",$2C
0002C81C                            wav_stKick_e:	even
0002C81C                            wav_stSnare:	incbin	"engine/sound/instruments/DAC/stSnare.wav",$2C
0002E91C                            wav_stSnare_e:	even
0002E91C                            wav_stSnare_e:	even
0002E91C                            		
0002E91C                            
0002E91C                            ; ====================================================================
0002E91C                            ; -------------------------------------------------
0002E91C                            ; 68k DATA
0002E91C                            ; -------------------------------------------------
0002E91C                            
0002E91C                            ; ====================================================================
0002E91C                            ; -------------------------------------------------
0002E91C                            ; MARS ONLY: sh2-ready DATA
0002E91C                            ; -------------------------------------------------
0002E91C                            
0002E91C                            		
0002E91C                            ; ====================================================================
0002E91C                            ; -------------------------------------------------
0002E91C                            ; END
0002E91C                            ; -------------------------------------------------
0002E91C                            		
0002E91C                            ROM_END:
0002E91C                            		inform 0,"ROM Size: %h",ROM_END
0002E91C                            		cnop 0,$80000
