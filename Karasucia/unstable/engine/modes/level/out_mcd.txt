00000000                            ; ====================================================================
00000000                            ; --------------------------------------------
00000000                            ; Include
00000000                            ; --------------------------------------------
00000000                            
00000000                            		include	"system/macros.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Macros
00000000                            ; -------------------------------------------------
00000000                            
00000000                            align		macro
00000000                            		cnop 0,\1
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Pick ROM section
00000000                            ; --------------------------------------------
00000000                            
00000000                            romSection	macro where
00000000                            CODE		=	*+$880000
00000000                            DATA		=	*+marsbank
00000000                            RAM		=	$FF0000
00000000                            WRAM		=	$200000
00000000                            ; ---------------------------
00000000                            		if MCD|MARS == True
00000000                            		obj \1
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; ---------------------------
00000000                            
00000000                            romSectionEnd	macro
00000000                            		if MCD
00000000                            		objend
00000000                            		elseif MARS
00000000                            		objend
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Video
00000000                            ; --------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; dmaTask
00000000                            ; --------------------------------------------
00000000                            
00000000                            dmaTask		macro
00000000                            FILL		=	$C0000000+1
00000000                            COPY		=	$C0000000+2
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA FILL
00000000                            ; (FILL,byte,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		if \1=FILL
00000000                            		
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                            		move.w	#$9780,(vdp_ctrl)
00000000                            		move.l	#\3|$80,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait1\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait1\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA COPY
00000000                            ; (COPY,from,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		elseif \1=COPY
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\2>>1)&$FF00)>>8)|(($9500+((\2>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$97C0,(vdp_ctrl)
00000000                            		move.l	#\3|$C0,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait2\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait2\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA ROM/RAM to VDP
00000000                            ; (from,to,size)
00000000                            ; ---------------------------
00000000                            		else
00000000                            		;\1 from | \2 to | \3 size
00000000                             		move.l	#$9400+(((\3)&$FF00)>>9)|(($9300+(((\3)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\1>>1)&$FF00)>>8)|(($9500+((\1>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(vdp_ctrl)
00000000                            		
00000000                            ; 		move.l	#\2|$80,(vdp_ctrl)		;new attempt
00000000                            		move.w	#((\2&$FFFF))|$80,-(sp)
00000000                            		move.w	#(((\2)>>16)&$FFFF),-(sp)
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#$100,($A11100)
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100)
00000000                              		bne.s	@WaitZ80_\@
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#0,($A11100).l
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            
00000000                            fade		macro
00000000                            in = 1
00000000                            out = 0
00000000                            		if \1=in
00000000                             		move.l	#$0101003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		elseif \1=out
00000000                            		
00000000                            		move.l	#$0201003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            ; System
00000000                            ; --------------------------------------------
00000000                            
00000000                            z80		macro
00000000                            ON = 1
00000000                            OFF = 0
00000000                            		if \1=OFF
00000000                            		
00000000                             		move.w	#$100,($A11100).l
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100).l
00000000                              		bne.s	@WaitZ80_\@
00000000                            		elseif \1=ON
00000000                            		
00000000                              		move.w	#0,($A11100).l
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            		
00000000                            		include	"system/ram.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; RAM
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; ---------------------------
00000000                            ; Setup
00000000                            ; ---------------------------
00000000                            
00000000                                            rsset	$FFFFBC00
00000000 =FFFFBC00                  RAM_ModeBuffer	rs.b	$2000
00000000 =FFFFDC00                  RAM_Engine      rs.b	$200
00000000 =FFFFDE00                  RAM_System      rs.b	$80
00000000 =FFFFDE80                  RAM_Input	rs.b	$80
00000000 =FFFFDF00                  RAM_Video       rs.b	$1000
00000000 =FFFFEF00                  RAM_Audio       rs.b	$400
00000000 =FFFFF300                  endof_ram	rs.l	0
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            		include	"engine/ram.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; RAM
00000000                            ; 
00000000                            ; Put your features here
00000000                            ; (players lives, keys, current level, map, etc.)
00000000                            ; -------------------------------------------------
00000000                            
00000000                                            rsset	RAM_Engine
00000000 =FFFFDC00                  RAM_P1_Lives	rs.w	1
00000000 =FFFFDC02                  RAM_P1_Coins	rs.w	1
00000000 =FFFFDC04                  RAM_P1_Hits	rs.w	1
00000000 =FFFFDC06                  RAM_CurrLevel	rs.w	1
00000000 =FFFFDC08                  sizeof_engine	rs.l	0
00000000                            ; 		inform 0,"engine ram: %h",(sizeof_engine-RAM_Engine)
00000000                            ; 		inform 0,"engine ram: %h",(sizeof_engine-RAM_Engine)
00000000                            		include	"system/hardware/map.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Variables
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; I/O
00000000                            ; --------------------------------------------
00000000                            
00000000 =00A10001                  port_ver	equ	$A10001
00000000 =00A14000                  port_tmss	equ	$A14000
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; VDP
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00000                  vdp_data	equ	$C00000
00000000 =00C00004                  vdp_ctrl	equ	$C00004
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MD Audio
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00011                  sound_psg	equ	$C00011
00000000 =00A04000                  sound_ym_1	equ	$A04000
00000000 =00A04001                  sound_ym_2	equ	$A04001
00000000 =00A04002                  sound_ym_3	equ	$A04002
00000000 =00A04003                  sound_ym_4	equ	$A04003
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MARS only
00000000                            ; --------------------------------------------
00000000                            
00000000 =00840000                  framebuffer	equ	$840000
00000000 =00860000                  overwrite	equ	$860000
00000000 =00880000                  marsipl		equ	$880000
00000000 =00900000                  marsbank	equ	$900000
00000000 =00A130EC                  mars_ID		equ	$a130ec		; MARS ID "MARS"
00000000                            
00000000 =00A15100                  marsreg		equ	$a15100
00000000 =00000000                  access		equ	$00		; byte		; MARS VDP access control
00000000 =00000001                  adapter		equ	$01		; byte		; MARS adapter control
00000000 =00000003                  intctl		equ	$03		; byte		; SH2 interrupt control
00000000 =00000005                  bankctl		equ	$05		; byte		; BANK conterol
00000000 =00000007                  dreqctl		equ	$07		; byte		; DREQ control
00000000 =00000008                  dreqsource	equ	$08		; long		; 68 to SH DREQ source address
00000000 =0000000C                  dreqdest	equ	$0c		; long		; 68 to SH DREQ destination address
00000000 =00000010                  dreqlength	equ	$10		; word		; 68 to SH DREQ length
00000000 =00000012                  dreqfifo	equ	$12		; word		; 68 to SH DREQ FIFO
00000000 =0000001B                  segatv		equ	$1b		; byte		; SEGA TV Reg.
00000000 =00000020                  comm0		equ	$20		; 		; Communcation Reg.
00000000 =00000022                  comm2		equ	$22		; 		; Communcation Reg.
00000000 =00000024                  comm4		equ	$24		; 		; Communcation Reg.
00000000 =00000026                  comm6		equ	$26		; 		; Communcation Reg.
00000000 =00000028                  comm8		equ	$28		; 		; Communcation Reg.
00000000 =00000029                  comm9		equ	$29		; 		; Communcation Reg.
00000000 =0000002A                  comm10		equ	$2a		; 		; Communcation Reg.
00000000 =0000002C                  comm12		equ	$2c		; 		; Communcation Reg.
00000000 =0000002E                  comm14		equ	$2e		; 		; Communcation Reg.
00000000                            
00000000 =00000080                  tvmode		equ	$80		; byte		; NTSC/PAL
00000000 =00000081                  bitmapmode	equ	$81		; byte		; BitMap Mode Reg.
00000000 =00000083                  shift		equ	$83		; byte		; Packed Pixel Dot Shift
00000000 =00000085                  filllength	equ	$85		; byte		; DRAM Fill Length
00000000 =00000086                  fillstart	equ	$86		; word		; DRAM Fill Start Address
00000000 =00000088                  filldata	equ	$88		; word		; DRAM Fill Data
00000000 =0000008A                  vdpsts		equ	$8a		; byte		; VDP status
00000000 =0000008B                  framectl	equ	$8b		; byte		; Frame Buffer Control
00000000                            
00000000 =00A15200                  palette		equ	$a15200		; 256 words	; Palette Data
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; OTHER
00000000                            ; --------------------------------------------
00000000                            
00000000                            		include	"system/hardware/mcd/map.asm"
00000000                            ; =================================================================
00000000                            ; ----------------------------------------
00000000                            ; Shared vars
00000000                            ; ----------------------------------------
00000000                            
00000000                            ; -------------
00000000                            ; bits
00000000                            ; -------------
00000000                            
00000000 =00000002                  bitWRamMode	equ	2		;2M | 1M
00000000                            
00000000                            ; -------------
00000000                            ; Registers
00000000                            ; -------------
00000000                            
00000000 =00000002                  MemoryMode	equ	$02		;WORD
00000000 =0000000E                  CommMain	equ	$0E		;BYTE
00000000 =0000000F                  CommSub		equ	$0F		;BYTE
00000000 =00000010                  CommDataM	equ	$10		;Array (size: $E)
00000000 =00000020                  CommDataS	equ	$20		;Array (size: $E)
00000000                            
00000000                            ; =================================================================
00000000                            ; ----------------------------------------
00000000                            ; MAIN CPU ONLY
00000000                            ; ----------------------------------------
00000000                            
00000000 =FFFF6600                  RAM_CdShared	equ	$FFFF6600
00000000                            
00000000                            		rsset   RAM_CdShared
00000000 =FFFF6600                  RAM_Wait_Buff	rs.b	$40
00000000 =FFFF6640                  RAM_Wait_Code	rs.b	$180
00000000 =FFFF67C0                  RAM_GoToHint	rs.w	3		; Sega CD HBlank jump ( jmp (thisaddr).l )
00000000                            
00000000 =00006600                  sizeof_prg	equ	$6600
00000000                            
00000000                            ; =================================================================
00000000                            ; ----------------------------------------
00000000                            ; SUB CPU ONLY
00000000                            ; ----------------------------------------
00000000                            
00000000                            ; -------------
00000000                            ; PCM
00000000                            ; -------------
00000000                            
00000000 =00FF0000                  PCM		equ	$FF0000
00000000 =00000001                  ENV		equ	$01		; Envelope
00000000 =00000003                  PAN		equ	$03		; Panning (%RRRRLLLL, and negative)
00000000 =00000005                  FDL		equ	$05		; Sample rate $00xx
00000000 =00000007                  FDH		equ	$07		; Sample rate $xx00
00000000 =00000009                  LSL		equ	$09		; Loop address $xx00
00000000 =0000000B                  LSH		equ	$0B		; Loop address $00xx
00000000 =0000000D                  ST		equ	$0D		; Start address (only $x0, $x000)
00000000 =0000000F                  Ctrl		equ	$0F		; Control register ($80 - Bank select, $C0 - Channel select)
00000000 =00000011                  OnOff		equ	$11		; Channel On/Off (BITS: 1 - off, 0 - on)
00000000                            
00000000                            ; =================================================================
00000000                            ; =================================================================
00000000                            		
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Level
00000000                            ; 
00000000                            ; MEGA CD ONLY
00000000                            ; -------------------------------------------------
00000000                            
00000000                            		obj $200000
00200000 23FC 0000 0000 FFFF FD0E       		move.l	#RAM_HintJumpTo,($FFFFFD0E)
0020000A 23FC 0000 0000 FFFF FD08       		move.l	#RAM_VintJumpTo,($FFFFFD08)
00200014 4EF9 0000 0000             		jmp	MD_Main
0020001A                            		
0020001A                            ; ====================================================================
0020001A                            ; -------------------------------------------------
0020001A                            ; Subs
0020001A                            ; -------------------------------------------------
0020001A                            
0020001A                            		include	"system/video.asm"
0020001A                            ; ====================================================================
0020001A                            ; VDP
0020001A                            ; ====================================================================
0020001A                            
0020001A                            ; -------------------------------------------------
0020001A                            ; Variables
0020001A                            ; -------------------------------------------------
0020001A                            
0020001A                            		rsreset
0020001A =00000000                  palFd_mode	rs.b 1
0020001A =00000001                  palFd_delay	rs.b 1
0020001A =00000002                  palFd_from	rs.b 1			;TODO: poner funcionar esto
0020001A =00000003                  palFd_num	rs.b 1
0020001A =00000004                  palFd_timer	rs.w 1
0020001A                            
0020001A                            		rsreset
0020001A =00000000                  sprite_free	rs.l 1
0020001A =00000004                  sprite_link	rs.w 1
0020001A =00000006                  sprite_used	rs.w 1
0020001A                            
0020001A                            ; ====================================================================
0020001A                            ; -------------------------------------------------
0020001A                            ; RAM
0020001A                            ; -------------------------------------------------
0020001A                            
0020001A                            		rsset RAM_Video
0020001A =FFFFDF00                  RAM_ScrlHor	rs.l 240
0020001A =FFFFE2C0                  RAM_ScrlVer	rs.l $20			; Normal
0020001A =FFFFE340                  RAM_Sprites	rs.l (80*2)			; Normal
0020001A =FFFFE5C0                  RAM_SprControl	rs.l 2				; Normal
0020001A =FFFFE5C8                  RAM_HSprites	rs.l (80*2)			; For HBlank
0020001A =FFFFE848                  RAM_HScrlVer	rs.l $20			; For HBlank
0020001A =FFFFE8C8                  RAM_HSprLast	rs.l 2				; For HBlank
0020001A =FFFFE8D0                  RAM_Palette	rs.w 64				; Normal
0020001A =FFFFE950                  RAM_HPalette	rs.w 64				; For HBlank
0020001A =FFFFE9D0                  RAM_PalFade	rs.w 64				; Normal
0020001A =FFFFEA50                  RAM_HPalFade	rs.w 64				; For HBlank
0020001A =FFFFEAD0                  RAM_PalFadeSys	rs.l 8*2
0020001A =FFFFEB10                  RAM_DMA_Buffer	rs.b $200
0020001A =FFFFED10                  RAM_VidRegs	rs.b 16				; Unused regs included (always zero) | WINDOW and DMA regs ignored, use them separately
0020001A                            
0020001A =FFFFED20                  sizeof_vid	rs.l 0
0020001A                            ;       		inform 0,"video ram: %h",(sizeof_vid-RAM_Video)
0020001A                            
0020001A                            ; ====================================================================
0020001A                            ; -------------------------------------------------
0020001A                            ; Subs
0020001A                            ; -------------------------------------------------
0020001A                            
0020001A                            ; -------------------------------------------------
0020001A                            ; Video control
0020001A                            ; -------------------------------------------------
0020001A                            
0020001A                            Video_init:
0020001A 41FA 0000                  		lea	reg_data(pc),a0
0020001E 43F9 FFFF ED10             		lea	(RAM_VidRegs),a1
00200024 303C 8000                  		move.w	#$8000,d0
00200028 7210                       		moveq	#17-1,d1
0020002A                            @reg_list:
0020002A 1018                       		move.b	(a0)+,d0
0020002C 12C0                       		move.b	d0,(a1)+
0020002E 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
00200034 0640 0100                  		add.w	#$100,d0
00200038 51C9 FFF0                  		dbf	d1,@reg_list
0020003C 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)	;WINDOW LEFT/TOP clear
00200046 23FC 9300 9400 00C0 0004   		move.l	#$93009400,(vdp_ctrl)	;DMA len low/high clear
00200050 23FC 9500 9600 00C0 0004   		move.l	#$95009600,(vdp_ctrl)	;DMA addr mid/low clear
0020005A 33FC 9700 00C0 0004        		move.w	#$9700,(vdp_ctrl)	;DMA addr high clear
00200062                              	
00200062                            ; --------------------------------------------
00200062                            ; Video_ClearAll
00200062                            ; --------------------------------------------
00200062                            
00200062                            Video_ClearAll:
00200062 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)
0020006C                            		
0020006C 6100                       		bsr.s	Video_ClrAllLyrs
0020006E 6100                       		bsr.s	Video_ClearScroll
00200070 6100 0000                  		bsr	Sprites_Clear
00200074 6000 0000                  		bra	Sprites_Reset
00200078                            		
00200078                            Video_ClearSprites:
00200078 6100 0000                  		bsr	Sprites_Clear
0020007C 6000 0000                  		bra	Sprites_Reset
00200080                            		
00200080                            ; --------------------------------------------
00200080                            ; Video_ClrAllLyrs
00200080                            ; --------------------------------------------
00200080                            
00200080                            Video_ClrAllLyrs:
00200080 203C 4000 0003             		move.l	#$40000003,d0
00200086 6100                       		bsr.s	Video_ClrLyr
00200088 203C 5000 0003             		move.l	#$50000003,d0
0020008E 6100                       		bsr.s	Video_ClrLyr
00200090 203C 6000 0003             		move.l	#$60000003,d0
00200096                            ; 		bsr.s	Video_ClrLyr
00200096                            ; 		rts
00200096                            		
00200096                            ; --------------------------------------------
00200096                            ; Video_ClrLyr
00200096                            ; 
00200096                            ; d0 | LONG - VDP VRAM Command for the layer
00200096                            ; --------------------------------------------
00200096                            
00200096                            Video_ClrLyr:
00200096 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
0020009C 303C 07FF                  		move.w	#$7FF,d0
002000A0                            @loop:
002000A0 33FC 0000 00C0 0000        		move.w	#0,(vdp_data)
002000A8 51C8 FFF6                  		dbf	d0,@loop
002000AC 4E75                       		rts
002000AE                            	
002000AE                            ; --------------------------------------------
002000AE                            ; Video_ClrHScrl
002000AE                            ; --------------------------------------------
002000AE                            
002000AE                            Video_ClrHScrl:
002000AE 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
002000B4 303C 00DF                  		move.w	#224-1,d0
002000B8 6000                       		bra.s	VidClrScrl_loop
002000BA                            
002000BA                            ; --------------------------------------------
002000BA                            ; Video_ClearScroll
002000BA                            ; --------------------------------------------
002000BA                            
002000BA                            Video_ClearScroll:
002000BA 61F2                       		bsr.s	Video_ClrHScrl
002000BC 41F9 FFFF E2C0             		lea	(RAM_ScrlVer),a0
002000C2 6100                       		bsr.s	Video_ClrVScrl
002000C4 41F9 FFFF E848             		lea	(RAM_HScrlVer),a0
002000CA                            ; 		bsr.s	Video_ClrVScrl
002000CA                            		
002000CA                            ; --------------------------------------------
002000CA                            ; Video_ClrVScrl
002000CA                            ; 
002000CA                            ; a0 - Vertical scroll data
002000CA                            ; --------------------------------------------
002000CA                            
002000CA                            Video_ClrVScrl:
002000CA 303C 001F                  		move.w	#$20-1,d0
002000CE                            VidClrScrl_loop:
002000CE 4298                       		clr.l	(a0)+
002000D0 51C8 FFFC                  		dbf	d0,VidClrScrl_loop
002000D4 4E75                       		rts
002000D6                            		
002000D6                            ; ------------------------------------
002000D6                            
002000D6                            reg_data:
002000D6 04                         		dc.b %00000100			; $80: [4] HInt interrupt OFF | [2] ALWAYS ON | [1] HV Counter OFF
002000D7 74                         		dc.b %01110100			; $81: [6] Display ON, [5] Vint interrupt ON, [4] DMA OFF, [3] V28 (V30 PAL ONLY) | [2] ALWAYS ON
002000D8 30                         		dc.b ($C000>>10)&%00111000	; $82: Plane A pattern table
002000D9 34                         		dc.b ($D000>>10)&%00111110	; $83:  WINDOW pattern table (%00111110 H32, %00111100 H40)
002000DA 07                         		dc.b ($E000>>13)&%00000111	; $84: Plane B pattern table
002000DB 7C                         		dc.b ($F800>>09)&%01111111	; $85:  Sprite attribute table (%01111111 H32, %01111110 H40)
002000DC 00                         		dc.b 0				; $86: NOTHING
002000DD 00                         		dc.b 0				; $87: BG Color
002000DE 00                         		dc.b 0				; $88: NOTHING
002000DF 00                         		dc.b 0				; $89: NOTHING
002000E0 00                         		dc.b 0				; $8A: HInt counter
002000E1 03                         		dc.b %00000011			; $8B: [3] External interrupt OFF | [2] Vscrl: full | [1|0] Hscrl: full
002000E2 81                         		dc.b %10000001			; $8C: [7+0] H40 | [3] Prio/Shadow | [2|1] Interlace mode: None
002000E3 3F                         		dc.b ($FC00>>10)&%00111111	; $8D: Hscroll attribute table
002000E4 00                         		dc.b 0				; $8E: NOTHING
002000E5 02                         		dc.b 2				; $8F: VDP Auto increment
002000E6 01                         		dc.b %00000001			; $90: Plane size [5|4] Y size | [1|0] X size
002000E8 00                         		even
002000E8                            
002000E8                            ; -------------------------------------------------
002000E8                            ; Subs
002000E8                            ; -------------------------------------------------
002000E8                            
002000E8                            Video_Update:
002000E8 41F9 FFFF ED10             		lea	(RAM_VidRegs),a0
002000EE 303C 8000                  		move.w	#$8000,d0
002000F2 7210                       		moveq	#17-1,d1
002000F4                            @reg_list:
002000F4 1018                       		move.b	(a0)+,d0
002000F6 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
002000FC 0640 0100                  		add.w	#$100,d0
00200100 51C9 FFF2                  		dbf	d1,@reg_list
00200104 4E75                       		rts
00200106                            		
00200106                            ; --------------------------------------------
00200106                            ; VDP_SendData_W, VDP_SendData_L
00200106                            ;
00200106                            ; Input:
00200106                            ; a0 - Data address
00200106                            ;
00200106                            ; d0 | VRAM Address
00200106                            ; d1 | Data size
00200106                            ; --------------------------------------------
00200106                            
00200106                            VDP_SendData_W:
00200106 EB48                       		lsl.w	#5,d0
00200108 6100 0000                  		bsr	VDP_VramToCmd
0020010C 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
00200112                            @Loop:
00200112 33D8 00C0 0000             		move.w	(a0)+,(vdp_data).l
00200118 51C9 FFF8                  		dbf	d1,@Loop
0020011C 4E75                       		rts
0020011E                            
0020011E                            VDP_SendData_L:
0020011E EB48                       		lsl.w	#5,d0
00200120 6100 0000                  		bsr	VDP_VramToCmd
00200124 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
0020012A                            @Loop:
0020012A 23D8 00C0 0000             		move.l	(a0)+,(vdp_data).l
00200130 51C9 FFF8                  		dbf	d1,@Loop
00200134 4E75                       		rts
00200136                            		
00200136                            ; -----------------------
00200136                            ; Uses: d4 (LONG)
00200136                            ;       d5 (WORD)
00200136                            ; -----------------------
00200136                            
00200136                            vdpshv_findvdppos:
00200136                            		;Check plane to use
00200136 4845                       		swap	d5
00200138 3A00                       		move.w	d0,d5
0020013A 7000                       		moveq	#0,d0
0020013C 1039 FFFF ED12             		move.b	(RAM_VidRegs+2),d0
00200142 0805 0001                  		btst	#1,d5				;%10? (WD)
00200146 6700                       		beq.s	@FG
00200148 1039 FFFF ED13             		move.b	(RAM_VidRegs+3),d0
0020014E                            @FG:
0020014E E148                       		lsl.w	#8,d0
00200150 E548                       		lsl.w	#2,d0
00200152 0805 0000                  		btst	#0,d5				;%01? (BG)
00200156 6700                       		beq.s	@FGWD
00200158 7000                       		moveq	#0,d0
0020015A 1039 FFFF ED14             		move.b	(RAM_VidRegs+4),d0
00200160 E148                       		lsl.w	#8,d0
00200162 EB48                       		lsl.w	#5,d0
00200164                            @FGWD:
00200164                            
00200164                            		;Start Y
00200164 7800                       		moveq	#0,d4
00200166 3801                          		move.w	d1,d4
00200168 ED8C                         		lsl.l	#6,d4
0020016A 0805 0001                   		btst	#1,d5
0020016E 6700                        		beq.s	@def_fgbg
00200170                             		
00200170                             		;TODO: WD resolution check
00200170                            ;    		move.b	(RAM_VidRegs+vdpReg_HMode),d5
00200170                            ;    		and.w	#%10000001,d5
00200170                            ;    		bne.s	@Not128
00200170 E38C                           		lsl.l	#1,d4
00200172 6000                       		bra.s	@Not128
00200174                            @def_fgbg:
00200174 0839 0000 FFFF ED20         		btst	#0,(RAM_VidRegs+$10)
0020017C 6700                        		beq.s	@Not40
0020017E E38C                         		lsl.l	#1,d4
00200180                            @Not40:
00200180 0839 0001 FFFF ED20         		btst	#1,(RAM_VidRegs+$10)
00200188 6700                        		beq.s	@Not128
0020018A E38C                           		lsl.l	#1,d4
0020018C                            @Not128:
0020018C D044                        		add.w	d4,d0			;+Y Start
0020018E 4841                       		swap	d1
00200190 E349                       		lsl.w	#1,d1
00200192 D041                       		add.w	d1,d0			;+X Start
00200194 4845                       		swap	d5
00200196                            		
00200196                            ; --------------------------------------------
00200196                            ; VDP_VramToCmd
00200196                            ;
00200196                            ; Input:
00200196                            ; d0 | WORD - VRAM to convert
00200196                            ;
00200196                            ; Output:
00200196                            ; d0 | LONG - VDP Command (Write mode)
00200196                            ; --------------------------------------------
00200196                            
00200196                            VDP_VramToCmd:
00200196 0C40 4000                  		cmp.w	#$4000,d0
0020019A 6500                       		bcs.s	@NoBank
0020019C 4840                       		swap	d0
0020019E 303C 0001                  		move.w	#1,d0
002001A2 4840                       		swap	d0
002001A4 0C40 8000                  		cmp.w	#$8000,d0
002001A8 6500                       		bcs.s	@NoBank	
002001AA 4840                       		swap	d0
002001AC 303C 0002                  		move.w	#2,d0
002001B0 4840                       		swap	d0
002001B2 0C40 C000                  		cmp.w	#$C000,d0
002001B6 6500                       		bcs.s	@NoBank	
002001B8 4840                       		swap	d0
002001BA 303C 0003                  		move.w	#3,d0
002001BE 4840                       		swap	d0
002001C0                            @NoBank:
002001C0 0240 3FFF                    		and.w	#$3FFF,d0
002001C4 0040 4000                    		or.w	#$4000,d0
002001C8 4840                          		swap	d0
002001CA 4E75                       		rts
002001CC                            		
002001CC                            ; --------------------------------------------
002001CC                            ; VDP_LoadMaps
002001CC                            ; 
002001CC                            ; Input:
002001CC                            ; a0 - Pattern data
002001CC                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
002001CC                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
002001CC                            ; d2 | LONG - Value
002001CC                            ; d3 | WORD - VRAM (ASCII start)
002001CC                            ; d4 | WORD - Type:
002001CC                            ;             00 Byte | 01 Word | 02 Long HEX
002001CC                            ;             04 Byte | 05 Word | 06 Long DEC
002001CC                            ;             08 Byte | 09 Word | 0A Long DEC
002001CC                            ; Uses:
002001CC                            ; d4-d6
002001CC                            ; 
002001CC                            ; NOTE: clear d2 FIRST and then set the value
002001CC                            ; --------------------------------------------
002001CC                            
002001CC                            Video_PrintVal:
002001CC 0244 0007                  		and.w	#%111,d4
002001D0 0804 0002                  		btst	#2,d4
002001D4 6700                       		beq.s	@hexy
002001D6 6100 0000                  		bsr	HexToDec
002001DA                            @hexy:
002001DA 3A04                       		move.w	d4,d5
002001DC 6100 FF58                  		bsr	vdpshv_findvdppos
002001E0 3805                       		move.w	d5,d4
002001E2                            		
002001E2 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
002001E8 0643 0030                  		add.w	#"0",d3
002001EC                            		
002001EC 7A07                          		moveq	#(8)-1,d5
002001EE 0804 0001                  		btst	#1,d4
002001F2 6600                       		bne.s	@setit
002001F4 7A03                          		moveq	#(4)-1,d5
002001F6 4842                        		swap	d2
002001F8 1004                          		move.b	d4,d0
002001FA 0200 0003                     		and.b	#%11,d0
002001FE 4A00                        		tst.b	d0
00200200 6600                        		bne.s	@setit
00200202 7A01                        		moveq	#(2)-1,d5
00200204 E19A                        		rol.l	#8,d2
00200206                            @setit:
00200206 0804 0002                  		btst	#2,d4
0020020A 6700                       		beq.s	@next
0020020C 0804 0001                  		btst	#1,d4
00200210 6600                       		bne.s	@next
00200212 E89A                       		ror.l	#4,d2
00200214 0645 0001                  		add.w	#1,d5
00200218                            @next:
00200218 E99A                        		rol.l	#4,d2
0020021A 3002                       		move.w	d2,d0
0020021C 0240 000F                  		and.w	#$F,d0
00200220 0C40 000A                  		cmp.w	#$A,d0
00200224 6500                       		bcs.s	@lessF
00200226 0640 0007                  		add.w	#7,d0
0020022A                            @lessF
0020022A D043                       		add.w	d3,d0
0020022C 33C0 00C0 0000             		move.w	d0,(vdp_data)
00200232 51CD FFE4                  		dbf	d5,@next
00200236 4E75                       		rts
00200238                            
00200238                            ; --------------------------------------------
00200238                            ; Video_MakeMap
00200238                            ; 
00200238                            ; Input:
00200238                            ; a0 - Pattern data
00200238                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
00200238                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
00200238                            ; d2 | LONG - XSize (WORD) | YSize (WORD)
00200238                            ; d3 | WORD - VRAM
00200238                            ; 
00200238                            ; Uses:
00200238                            ; d4-d6
00200238                            ; --------------------------------------------
00200238                            
00200238                            Video_MakeMap:
00200238                            		;Check plane to use
00200238 6100 FEFC                  		bsr	vdpshv_findvdppos
0020023C                            		
0020023C 283C 0040 0000             		move.l	#$400000,d4
00200242 0839 0000 FFFF ED20        		btst	#0,(RAM_VidRegs+$10)
0020024A 6700                       		beq.s	@JpNot40
0020024C E38C                        		lsl.l	#1,d4
0020024E                            @JpNot40:
0020024E 0839 0001 FFFF ED20        		btst	#1,(RAM_VidRegs+$10)
00200256 6700                       		beq.s	@Y_Loop
00200258 E38C                            		lsl.l	#1,d4
0020025A                                 		
0020025A                            @Y_Loop:
0020025A 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l		; Set VDP location from d0
00200260 4842                       		swap	d2
00200262 3A02                       		move.w	d2,d5	  		; Move X-pos value to d3
00200264 4842                       		swap	d2
00200266                            @X_Loop:
00200266 3C18                       		move.w	(a0)+,d6
00200268 DC43                                       add.w	d3,d6
0020026A 4845                                       swap	d5
0020026C 1A39 FFFF ED1C                             move.b	(RAM_VidRegs+$C),d5
00200272 0245 0006                                  and.w	#%110,d5
00200276 6700                                       beq.s	@normal
00200278 E24E                                       lsr.w	#1,d6
0020027A                            @normal:
0020027A 4845                                       swap	d5
0020027C 33C6 00C0 0000                             move.w	d6,(vdp_data)		; Put data
00200282 51CD FFE2                  		dbf	d5,@X_Loop		; X-pos loop (from d1 to d3)
00200286 D084                       		add.l	d4,d0                   ; Next line
00200288 51CA FFD0                  		dbf	d2,@Y_Loop		; Y-pos loop
0020028C 4E75                       		rts
0020028E                            
0020028E                            ; --------------------------------------------
0020028E                            ; Video_PrintText
0020028E                            ;
0020028E                            ; Input:
0020028E                            ; a0 - String
0020028E                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
0020028E                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
0020028E                            ; d2 | VRAM
0020028E                            ; 
0020028E                            ; Uses:
0020028E                            ; d3-d4
0020028E                            ; --------------------------------------------
0020028E                            
0020028E                            Video_PrintText:
0020028E                            		;Check plane to use
0020028E 3A00                       		move.w	d0,d5
00200290 6100 FEA4                  		bsr	vdpshv_findvdppos
00200294                            		
00200294 283C 0080 0000              		move.l	#$800000,d4
0020029A                            ;  		cmp.w	#2,d5
0020029A                            ;  		bne.s	@NotWindow
0020029A                            ; 		
0020029A                            ;  		tst.b	(RAM_VidRegs+$C)
0020029A                            ;  		beq.s	@Reset
0020029A                            ;  		lsl.l	#1,d4
0020029A                            ; 		bra.s	@Reset
0020029A                            ; 		
0020029A                            ; @NotWindow:
0020029A                            ; 		btst	#0,(RAM_VidRegs+$10)
0020029A                            ; 		beq.s	@JpNot40
0020029A                            ;  		lsl.l	#1,d4
0020029A                            ; @JpNot40:
0020029A                            ; 		btst	#1,(RAM_VidRegs+$10)
0020029A                            ; 		beq.s	@Space
0020029A                            ;      		lsl.l	#1,d4
0020029A                                 		
0020029A                            @Reset:
0020029A 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l
002002A0                            @Next:
002002A0 7600                       		moveq	#0,d3
002002A2 1618                       		move.b	(a0)+,d3
002002A4 0C03 000A                  		cmp.b	#$A,d3
002002A8 6700                       		beq.s	@Space
002002AA 4A03                       		tst.b	d3
002002AC 6600                       		bne.s	@Char
002002AE 4E75                       		rts
002002B0                            @Char:
002002B0 D642                       		add.w	d2,d3
002002B2 33C3 00C0 0000             		move.w	d3,(vdp_data).l
002002B8 60E6                       		bra.s	@Next
002002BA                            @Space:
002002BA D084                       		add.l	d4,d0                   ; Next line
002002BC 60DC                       		bra.s	@Reset
002002BE                            @Exit:
002002BE 4E75                       		rts
002002C0                            		
002002C0                            ; --------------------------------------------
002002C0                            ; Video_VSync
002002C0                            ; 
002002C0                            ; Wait VBlank
002002C0                            ; --------------------------------------------
002002C0                            
002002C0                            Video_VSync:
002002C0 08F9 0000 0000 0000         		bset	#0,(RAM_IntFlags)
002002C8                            @vint:
002002C8 0839 0000 0000 0000        		btst	#0,(RAM_IntFlags)
002002D0 66F6                       		bne.s	@vint
002002D2 4E75                       		rts
002002D4                            
002002D4                            ; ====================================================================
002002D4                            ; ---------------------------------------------
002002D4                            ; Palette fading
002002D4                            ; ---------------------------------------------
002002D4                            
002002D4                            PalFade_Upd:
002002D4 4DF9 FFFF EAD0             		lea	(RAM_PalFadeSys),a6
002002DA 7C03                        		moveq	#4-1,d6
002002DC                            @NextPalReq:
002002DC 4A96                       		tst.l	(a6)
002002DE 6700                       		beq.s	@Unused
002002E0 4BF9 FFFF E8D0              		lea	(RAM_Palette),a5
002002E6 49F9 FFFF E9D0              		lea	(RAM_PalFade),a4
002002EC 6100 0000                    		bsr	@Active
002002F0                            @Unused:
002002F0 DCFC 0008                   		adda	#8,a6
002002F4 51CE FFE6                   		dbf	d6,@NextPalReq
002002F8                            		
002002F8 7C03                       		moveq	#4-1,d6
002002FA                            @NextHPalReq:
002002FA 4A96                       		tst.l	(a6)
002002FC 6700                       		beq.s	@UnusedH
002002FE 4BF9 FFFF E950             		lea	(RAM_HPalette),a5
00200304 49F9 FFFF EA50             		lea	(RAM_HPalFade),a4
0020030A 6100 0000                  		bsr	@Active
0020030E                            @UnusedH:
0020030E DCFC 0008                  		adda	#8,a6
00200312 51CE FFE6                  		dbf	d6,@NextHPalReq
00200316 4E75                       		rts
00200318                            		
00200318                            ; ---------------------------------
00200318                            ; Active palette
00200318                            ; ---------------------------------
00200318                            
00200318                            @Active:
00200318 7000                       		moveq	#0,d0
0020031A 102E 0000                  		move.b	palFd_mode(a6),d0
0020031E D040                       		add.w	d0,d0
00200320 323B 0000                  		move.w	@list(pc,d0.w),d1
00200324 4EFB 1000                  		jmp	@list(pc,d1.w)
00200328                            		
00200328                            ; ---------------------------------
00200328                            
00200328                            @list:
00200328 0000                       		dc.w fadeSet_Return-@list
0020032A 0000                       		dc.w fadeSet_in_timer-@list
0020032C 0000                       		dc.w fadeSet_out_timer-@list
0020032E 0000                       		dc.w fadeSet_in_single-@list
00200330 0000                        		dc.w fadeSet_out_single-@list		
00200332                            		
00200332                            ; ---------------------------------
00200332                            
00200332                            fadeSet_in_timer:
00200332 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00200338 6A00 0000                  		bpl	fadeSet_Return
0020033C 7800                       		moveq	#0,d4
0020033E 7A00                       		moveq	#0,d5
00200340 182E 0001                  		move.b 	palFd_delay(a6),d4
00200344 3D44 0004                  		move.w	d4,palFd_timer(a6)
00200348 182E 0003                  		move.b 	palFd_num(a6),d4
0020034C                            @next_in:
0020034C 3015                        		move.w	(a5),d0
0020034E 3214                        		move.w	(a4),d1
00200350 3400                       		move.w	d0,d2
00200352 3601                        		move.w	d1,d3
00200354 0242 000E                   		and.w	#$00E,d2
00200358 0243 000E                   		and.w	#$00E,d3
0020035C B642                        		cmp.w	d2,d3
0020035E 6700                        		beq.s	@goodin_b
00200360 0642 0002                  		add.w	#2,d2
00200364                            @goodin_b:
00200364 0240 0EE0                  		and.w	#$EE0,d0
00200368 8042                        		or.w	d2,d0
0020036A                            		
0020036A 3400                       		move.w	d0,d2
0020036C 3601                        		move.w	d1,d3
0020036E 0242 00E0                   		and.w	#$0E0,d2
00200372 0243 00E0                   		and.w	#$0E0,d3
00200376 B642                        		cmp.w	d2,d3
00200378 6700                        		beq.s	@goodin_g
0020037A 0642 0020                  		add.w	#$020,d2
0020037E                            @goodin_g:
0020037E 0240 0E0E                  		and.w	#$E0E,d0
00200382 8042                        		or.w	d2,d0
00200384                              		
00200384 3400                       		move.w	d0,d2
00200386 3601                        		move.w	d1,d3
00200388 0242 0E00                   		and.w	#$E00,d2
0020038C 0243 0E00                   		and.w	#$E00,d3
00200390 B642                        		cmp.w	d2,d3
00200392 6700                        		beq.s	@goodin_r
00200394 0642 0200                  		add.w	#$200,d2
00200398                            @goodin_r:
00200398 0240 00EE                  		and.w	#$0EE,d0
0020039C 8042                        		or.w	d2,d0
0020039E                             		
0020039E 3AC0                        		move.w	d0,(a5)+
002003A0 B05C                        		cmp.w	(a4)+,d0
002003A2 6600                        		bne.s	@nonz_fdin
002003A4 0645 0001                   		add.w	#1,d5
002003A8                            @nonz_fdin:
002003A8 51CC FFA2                  		dbf	d4,@next_in
002003AC                            		
002003AC 0445 0001                  		sub.w	#1,d5
002003B0 BA2E 0003                  		cmp.b	palFd_num(a6),d5
002003B4 6600                       		bne.s	fadeSet_Return
002003B6 4296                       		clr.l	(a6)
002003B8                            fadeSet_Return:
002003B8 4E75                       		rts
002003BA                            		
002003BA                            ; ---------------------------------
002003BA                            
002003BA                            fadeSet_out_timer:
002003BA 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
002003C0 6AF6                       		bpl.s	fadeSet_Return
002003C2 7400                       		moveq	#0,d2
002003C4 7600                       		moveq	#0,d3
002003C6 142E 0001                  		move.b 	palFd_delay(a6),d2
002003CA 3D42 0004                  		move.w	d2,palFd_timer(a6)
002003CE 142E 0003                  		move.b 	palFd_num(a6),d2
002003D2                            @setcol:
002003D2 3015                       		move.w	(a5),d0
002003D4 3200                       		move.w	d0,d1
002003D6 0241 000E                  		and.w	#$00E,d1
002003DA 6700                       		beq.s	@good_b
002003DC 0441 0002                  		sub.w	#2,d1
002003E0                            @good_b:
002003E0 0240 0EE0                  		and.w	#$EE0,d0
002003E4 8041                       		or.w	d1,d0
002003E6                            		
002003E6 3200                       		move.w	d0,d1
002003E8 0241 00E0                  		and.w	#$0E0,d1
002003EC 6700                       		beq.s	@good_g
002003EE 0441 0020                  		sub.w	#$020,d1
002003F2                            @good_g:
002003F2 0240 0E0E                  		and.w	#$E0E,d0
002003F6 8041                       		or.w	d1,d0
002003F8 3200                       		move.w	d0,d1
002003FA 0241 0E00                  		and.w	#$E00,d1
002003FE 6700                       		beq.s	@good_r
00200400 0441 0200                  		sub.w	#$200,d1
00200404                            @good_r:
00200404 0240 00EE                  		and.w	#$0EE,d0
00200408 8041                       		or.w	d1,d0
0020040A 3AC0                       		move.w	d0,(a5)+
0020040C 4A40                       		tst.w	d0
0020040E 6600                       		bne.s	@nonzero
00200410 0643 0001                  		add.w	#1,d3
00200414                            @nonzero:
00200414 51CA FFBC                  		dbf	d2,@setcol
00200418                            		
00200418 0443 0001                  		sub.w	#1,d3
0020041C B62E 0003                  		cmp.b	palFd_num(a6),d3
00200420 6696                       		bne.s	fadeSet_Return
00200422 4296                       		clr.l	(a6)
00200424 4E75                       		rts
00200426                            		
00200426                            ; ---------------------------------
00200426                            ; fadeSet_in_single
00200426                            ; 
00200426                            ; palFd_delay:
00200426                            ; RGBTTTTT - RGB increment bits
00200426                            ;            TTTTT timer
00200426                            ; ---------------------------------
00200426                            
00200426                            fadeSet_in_single:
00200426 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
0020042C 6A00 FF8A                  		bpl	fadeSet_Return
00200430                            
00200430 7A00                       		moveq	#0,d5
00200432 1A2E 0002                  		move.b	palFd_from(a6),d5
00200436 E34D                       		lsl.w	#1,d5
00200438 DAC5                       		adda	d5,a5
0020043A 162E 0001                  		move.b 	palFd_delay(a6),d3
0020043E 0243 00E0                  		and.w	#$E0,d3
00200442 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
00200448                            		
00200448 7800                       		moveq	#0,d4
0020044A 182E 0003                  		move.b 	palFd_num(a6),d4
0020044E                            @next_in:
0020044E 3015                        		move.w	(a5),d0
00200450 3400                       		move.w	d0,d2
00200452 0242 000E                   		and.w	#$00E,d2
00200456 0803 0005                  		btst	#5,d3
0020045A 6700                       		beq.s	@goodin_b
0020045C 0C42 000E                   		cmp.w	#$00E,d2
00200460 6C00                        		bge.s	@goodin_b
00200462 0642 0002                  		add.w	#2,d2
00200466                            @goodin_b:
00200466 0240 0EE0                  		and.w	#$EE0,d0
0020046A 8042                        		or.w	d2,d0
0020046C                            
0020046C 3400                       		move.w	d0,d2
0020046E 0242 00E0                   		and.w	#$0E0,d2
00200472 0803 0006                  		btst	#6,d3
00200476 6700                       		beq.s	@goodin_g
00200478 0C42 00E0                   		cmp.w	#$0E0,d2
0020047C 6C00                        		bge.s	@goodin_g
0020047E 0642 0020                  		add.w	#$020,d2
00200482                            @goodin_g:
00200482 0240 0E0E                  		and.w	#$E0E,d0
00200486 8042                        		or.w	d2,d0
00200488                            
00200488 3400                       		move.w	d0,d2
0020048A 0242 0E00                   		and.w	#$E00,d2
0020048E 0803 0007                  		btst	#7,d3
00200492 6700                       		beq.s	@goodin_r
00200494 0C42 0E00                   		cmp.w	#$E00,d2
00200498 6C00                        		bge.s	@goodin_r
0020049A 0642 0200                  		add.w	#$200,d2
0020049E                            @goodin_r:
0020049E 0240 00EE                  		and.w	#$0EE,d0
002004A2 8042                        		or.w	d2,d0
002004A4                            
002004A4 3AC0                        		move.w	d0,(a5)+
002004A6 51CC FFA6                  		dbf	d4,@next_in
002004AA                            		
002004AA 102E 0001                  		move.b	palFd_delay(a6),d0
002004AE 0240 001F                  		and.w	#$1F,d0
002004B2 0440 0001                  		sub.w	#1,d0
002004B6 6A00                       		bpl.s	fadeSet_Return_2
002004B8                            		
002004B8                            ; 		sub.w	#1,d5
002004B8                            ; 		cmp.b	palFd_num(a6),d5
002004B8                            ; 		bne.s	fadeSet_Return
002004B8 4296                       		clr.l	(a6)
002004BA 42AE 0004                  		clr.l	4(a6)
002004BE                            		
002004BE                            fadeSet_Return_2:
002004BE 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
002004C4 812E 0001                  		or.b	d0,palFd_delay(a6)
002004C8 4E75                       		rts
002004CA                            		
002004CA                            ; ---------------------------------
002004CA                            ; fadeSet_out_single
002004CA                            ; 
002004CA                            ; palFd_delay:
002004CA                            ; RGBTTTTT - RGB increment bits
002004CA                            ;            TTTTT timer
002004CA                            ; ---------------------------------
002004CA                            
002004CA                            fadeSet_out_single:
002004CA 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
002004D0 6A00 FEE6                  		bpl	fadeSet_Return
002004D4                            
002004D4 7A00                       		moveq	#0,d5
002004D6 1A2E 0002                  		move.b	palFd_from(a6),d5
002004DA E34D                       		lsl.w	#1,d5
002004DC DAC5                       		adda	d5,a5
002004DE 162E 0001                  		move.b 	palFd_delay(a6),d3
002004E2 0243 00E0                  		and.w	#$E0,d3
002004E6 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
002004EC                            		
002004EC 7800                       		moveq	#0,d4
002004EE 182E 0003                  		move.b 	palFd_num(a6),d4
002004F2                            @next_in:
002004F2 3015                        		move.w	(a5),d0
002004F4 3400                       		move.w	d0,d2
002004F6 0242 000E                   		and.w	#$00E,d2
002004FA 0803 0005                  		btst	#5,d3
002004FE 6700                       		beq.s	@goodin_b
00200500                            ;  		tst.w	d2
00200500                            ;  		beq.s	@goodin_b
00200500 0442 0002                  		sub.w	#2,d2
00200504                            @goodin_b:
00200504 0240 0EE0                  		and.w	#$EE0,d0
00200508 8042                        		or.w	d2,d0
0020050A                            
0020050A 3400                       		move.w	d0,d2
0020050C 0242 00E0                   		and.w	#$0E0,d2
00200510 0803 0006                  		btst	#6,d3
00200514 6700                       		beq.s	@goodin_g
00200516                            ;  		tst.w	d2
00200516                            ;  		beq.s	@goodin_g
00200516 0442 0020                  		sub.w	#$020,d2
0020051A                            @goodin_g:
0020051A 0240 0E0E                  		and.w	#$E0E,d0
0020051E 8042                        		or.w	d2,d0
00200520                            
00200520 3400                       		move.w	d0,d2
00200522 0242 0E00                   		and.w	#$E00,d2
00200526 0803 0007                  		btst	#7,d3
0020052A 6700                       		beq.s	@goodin_r
0020052C                            ;  		tst.w	d2
0020052C                            ;  		beq.s	@goodin_r
0020052C 0442 0200                  		sub.w	#$200,d2
00200530                            @goodin_r:
00200530 0240 00EE                  		and.w	#$0EE,d0
00200534 8042                        		or.w	d2,d0
00200536                            
00200536 3AC0                        		move.w	d0,(a5)+
00200538 51CC FFB8                  		dbf	d4,@next_in
0020053C                            		
0020053C 102E 0001                  		move.b	palFd_delay(a6),d0
00200540 0240 001F                  		and.w	#$1F,d0
00200544 0440 0001                  		sub.w	#1,d0
00200548 6A00                       		bpl.s	@fadeSet_Return_2
0020054A                            		
0020054A                            ; 		sub.w	#1,d5
0020054A                            ; 		cmp.b	palFd_num(a6),d5
0020054A                            ; 		bne.s	fadeSet_Return
0020054A 4296                       		clr.l	(a6)
0020054C 42AE 0004                  		clr.l	4(a6)
00200550                            		
00200550                            @fadeSet_Return_2:
00200550 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
00200556 812E 0001                  		or.b	d0,palFd_delay(a6)
0020055A 4E75                       		rts
0020055C                            		
0020055C                            ; --------------------------------------------
0020055C                            ; PalFade_Set
0020055C                            ; --------------------------------------------
0020055C                            
0020055C                            PalFade_Set:
0020055C 4E75                       		rts
0020055E                            		
0020055E                            ; ====================================================================
0020055E                            ; ---------------------------------------------
0020055E                            ; DMA
0020055E                            ; ---------------------------------------------
0020055E                            
0020055E                            ; ROM data
0020055E                            ; Size
0020055E                            ; VRAM Destiantion
0020055E                            
0020055E                            DMA_Read:
0020055E 4DF9 FFFF EB10              		lea	(RAM_DMA_Buffer),a6
00200564                            ;  		move.w	#64,d3
00200564 381E                         		move.w	(a6)+,d4
00200566                            ;   		sub.w	d4,d3
00200566                            ;   		bmi	@FinishList
00200566 4A44                         		tst.w	d4
00200568 6700 0000                    		beq	@FinishList
0020056C 0444 0001                    		sub.w	#1,d4
00200570                            ; 		dma 	on
00200570                            @NextEntry:
00200570 2A1E                       		move.l	(a6)+,d5
00200572 0685 0000 0002              		add.l	#2,d5
00200578                             		
00200578 E28D                         		lsr.l	#1,d5
0020057A 2C3C 9600 9500              		move.l	#$96009500,d6
00200580 1C05                        		move.b	d5,d6
00200582 E08D                        		lsr.l	#8,d5
00200584 4846                        		swap	d6
00200586 1C05                        		move.b	d5,d6
00200588 23C6 00C0 0004              		move.l	d6,(vdp_ctrl)
0020058E 3C3C 9700                   		move.w	#$9700,d6
00200592 E08D                        		lsr.l	#8,d5
00200594 1C05                        		move.b	d5,d6
00200596 33C6 00C0 0004              		move.w	d6,(vdp_ctrl)
0020059C                             		
0020059C 2C3C 9400 9300               		move.l	#$94009300,d6		;Size
002005A2 3A1E                         		move.w	(a6)+,d5
002005A4 1C05                         		move.b	d5,d6
002005A6 4846                        		swap	d6
002005A8 E04D                         		lsr.w	#8,d5
002005AA 1C05                         		move.b	d5,d6
002005AC 23C6 00C0 0004               		move.l	d6,(vdp_ctrl)
002005B2                             		
002005B2 3A1E                        		move.w	(a6)+,d5
002005B4 EB4D                        		lsl.w	#5,d5
002005B6 3C05                        		move.w	d5,d6
002005B8 0245 3FFF                   		and.w	#$3FFF,d5
002005BC 0045 4000                   		or.w	#$4000,d5
002005C0 E04E                        		lsr.w	#8,d6
002005C2 EC4E                        		lsr.w	#6,d6
002005C4 0246 0003                   		and.w	#%11,d6
002005C8 0046 0080                   		or.w	#$80,d6
002005CC 3F06                        		move.w	d6,-(sp)
002005CE 3F05                        		move.w	d5,-(sp)	
002005D0 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
002005D6 33FC 0100 00A1 1100         		move.w	#$100,($A11100).l
002005DE                            @hold_on:
002005DE 0839 0000 00A1 1100         		btst	#0,($A11100).l
002005E6 66F6                         		bne.s	@hold_on
002005E8                              		
002005E8 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
002005EE 33FC 0000 00A1 1100          		move.w	#0,($A11100).l
002005F6                               		
002005F6 51CC FF78                   		dbf	d4,@NextEntry
002005FA                             		
002005FA                            @FinishList:
002005FA 4279 FFFF EB10             		clr.w	(RAM_DMA_Buffer)
00200600 4E75                        		rts
00200602                            
00200602                            @ResetAllList:
00200602 4E75                       		rts
00200604                            		
00200604                            ; -----------------------------------
00200604                            ; Set new entry to the list
00200604                            ; 
00200604                            ; Input:
00200604                            ; d0 - ROM Address
00200604                            ; d1 - Size
00200604                            ; d2 - VRAM
00200604                            ; 
00200604                            ; Uses:
00200604                            ; a2/d3
00200604                            ; -----------------------------------
00200604                            
00200604                            DMA_Set:
00200604 45F9 FFFF EB10             		lea	(RAM_DMA_Buffer),a2
0020060A 0C52 0040                  		cmp.w	#64,(a2)
0020060E 6C00                       		bge.s	@Return
00200610 3612                       		move.w	(a2),d3
00200612 E74B                       		lsl.w	#3,d3			;Size: 8
00200614 D4C3                       		adda 	d3,a2
00200616 D4FC 0002                  		adda	#2,a2
0020061A                            		
0020061A 24C0                       		move.l	d0,(a2)+		;ROM Address
0020061C 34C1                       		move.w	d1,(a2)+
0020061E 34C2                       		move.w	d2,(a2)+
00200620 0679 0001 FFFF EB10        		add.w	#1,(RAM_DMA_Buffer)
00200628                            @Return:
00200628 4E75                       		rts
0020062A                            		
0020062A                            ; ====================================================================
0020062A                            ; ---------------------------------------------
0020062A                            ; Sprites system
0020062A                            ; ---------------------------------------------
0020062A                            
0020062A                            ; ---------------------------------------------
0020062A                            ; Sprites_Reset
0020062A                            ; ---------------------------------------------
0020062A                            
0020062A                            Sprites_Clear:
0020062A                            ;  		lea	(RAM_Sprites),a6
0020062A                            ;  		move.w	#$4F,d6
0020062A                            ; @clrit:
0020062A 42B9 FFFF E340               		clr.l	(RAM_Sprites)
00200630 42B9 FFFF E344               		clr.l	(RAM_Sprites+4)
00200636 4E75                       		rts
00200638                            		
00200638                            ; ---------------------------------------------
00200638                            ; Sprites_Reset
00200638                            ; ---------------------------------------------
00200638                            
00200638                            Sprites_Reset:
00200638 4DF9 FFFF E5C0             		lea	(RAM_SprControl),a6
0020063E 2A6E 0000                  		movea.l	sprite_free(a6),a5
00200642 BAFC E340                  		cmpa	#((RAM_Sprites)&$FFFF),a5
00200646 6D00                       		blt.s	@Full
00200648                            @NextEntry:
00200648 BAFC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
0020064C 6E00                        		bgt.s	@Full
0020064E 429D                        		clr.l	(a5)+
00200650 429D                         		clr.l	(a5)+
00200652 BAFC E5C0                    		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
00200656 6DF0                         		blt.s	@NextEntry
00200658                            @Full:
00200658 2D7C FFFF E340 0000        		move.l	#RAM_Sprites,sprite_free(a6)
00200660 3D7C 0001 0004             		move.w	#1,sprite_link(a6)
00200666                            @Return:
00200666 4E75                       		rts
00200666 4E75                       		rts
00200668                            		include	"system/sound/68k/main.asm"
00200668                            ; ================================================================
00200668                            ; SMEG Karasucia
00200668                            ; Sound and Music Engine for Genesis (also MCD* and 32X**)
00200668                            ;
00200668                            ; (C)2013-2017 GF64
00200668                            ; 
00200668                            ; Reads patterns from a ImpulseTracker file (.it)
00200668                            ;
00200668                            ; Ticks:
00200668                            ; 150 - NTSC
00200668                            ; 120 - PAL
00200668                            ;
00200668                            ; uses assembler settings:
00200668                            ; MCD     - for building to MCD (All the driver must be aligned
00200668                            ;              to WordRAM or PRG-RAM)
00200668                            ; MARS       - for building to 32x (CODE and
00200668                            ;              DATA(Music/Sfx/Voices/Z80 samples) must be aligned to
00200668                            ;              the 32x standards, uses bank 0 only,
00200668                            ;              PWM Samples can be anywhere in ROM)
00200668                            ; SMEG_Z80   - Use Z80, set to 0 while running from PRGRAM
00200668                            ;                 
00200668                            ; Limtations:
00200668                            ; (Driver) - Effects: only volume and panning (Xxx) works
00200668                            ; 
00200668                            ; (MCD) - You cant use Z80 samples if your program is running
00200668                            ;            on PRG-RAM (Z80 cant access RAM), if your program is
00200668                            ;            running on WORD-RAM, set the permission to
00200668                            ;            MainCPU (2M Mode) (not recommended)
00200668                            ;            
00200668                            ; * requires respective SubCPU code
00200668                            ; ** requires respective SH2 code
00200668                            ; ================================================================
00200668                            
00200668                            ;NOTE: Format
00200668                            ; SONGFILE:
00200668                            ; 		dc.b 12,0		; Numof_blocks, loop_block (-1 dont loop)
00200668                            ; 		dc.l @pattern		; Pattern data
00200668                            ;      		dc.l @instruments	; Instrument set
00200668                            ;      		dc.w 8			; Number of channel settings
00200668                            ;       	dc.b FM_6,64,$80,$0F	; Example of one (Channel,Vol,Pan,Extra)		
00200668                            ;		...
00200668                            ;
00200668                            ; Extra:
00200668                            ; FM: %????KEYS KEYS: FM Keys (ignored if not FM)
00200668                            ; PSG: (not yet)
00200668                            ; PCM/PWM: not yet
00200668                            ; 
00200668                            ; @instruments:
00200668                            ; 		dc.w @ymha-@instruments
00200668                            ; 		dc.w @psg-@instruments
00200668                            ; 		dc.w @noise-@instruments
00200668                            ; 		dc.w @psmpl-@instruments
00200668                            ; 		even
00200668                            ; @ymha:
00200668                            ; 		;FM
00200668                            ; 		dc.w INSTNUM,0
00200668                            ; 		dc.l fmVoice_bass_ambient
00200668                            ;    		
00200668                            ;    		;FM3
00200668                            ;    		dc.w $40|INSTNUM,0
00200668                            ;    		dc.l fm_hatopen
00200668                            ;    		dc.w $0511|$2000,$0328|$2000
00200668                            ;    		dc.w $005E|$2000,$0328|$2000
00200668                            ;    		
00200668                            ;    		;Samples
00200668                            ;   		dc.w $80|INSTNUM,12	; NUM,Pitch
00200668                            ;   		dc.l wav_kick		; WAV Start
00200668                            ;  		dc.l wav_kick_e		; WAV End
00200668                            ;  		dc.l -1			; WAV Loop sample (0: start -1: none)
00200668                            ;  		
00200668                            ; 		dc.w -1			; ENDOFLIST
00200668                            ; 		even
00200668                            ; @psmpl:
00200668                            ; 		dc.w -1			; Later
00200668                            ; 		even
00200668                            ; @psg:
00200668                            ; 		dc.w -1			; Later
00200668                            ; 		even
00200668                            ; @noise:
00200668                            ;  		dc.w 3,%101		; INSTNUM, PSG Noise setting
00200668                            ;  		
00200668                            ;  		dc.w 5,%101
00200668                            ;  		dc.w 7,%100
00200668                            ;  		
00200668                            ; 		dc.w -1
00200668                            ; 		even
00200668                            
00200668                            
00200668                            ; GEMS style tick
00200668                            ; 		dc.l fmSfx_Coin
00200668                            ; 		dc.w $00AB|$3800,$0457|$3000
00200668                            ; 		dc.w $0511|$3000,$0336|$2000
00200668                            ;
00200668                            ;    		dc.l fm_hatopen
00200668                            ;    		dc.w $0511|$2000,$0328|$2000
00200668                            ;    		dc.w $005E|$2000,$0328|$2000
00200668                            ;
00200668                            ;    		dc.l fm_hatclosed
00200668                            ;    		dc.w $051C|$2000,$0328|$2000
00200668                            ;    		dc.w $005E|$2000,$0328|$2000
00200668                            ;
00200668                            ;    		dc.l fm_hatclosed
00200668                            ;    		dc.w $051C|$2000,$0328|$2000
00200668                            ;    		dc.w $005E|$2000,$0328|$2000	
00200668                            
00200668                            ; ================================================================
00200668                            
00200668                            			rsreset
00200668 =00000000                  DrvStatus		rs.b 1		;Byte
00200668 =00000001                  snd_flags		rs.b 1		;Byte
00200668 =00000002                  PatternEnd		rs.b 1		;Byte
00200668 =00000003                  PatternLoop		rs.b 1		;Byte
00200668 =00000004                  SongRequest		rs.l 1 		;Long
00200668 =00000008                  SongStart		rs.l 1		;Long
00200668 =0000000C                  SongRead		rs.l 1		;Long
00200668 =00000010                  snd_instr		rs.l 1		;Long
00200668 =00000014                  SongPcmSamp		rs.l 1		;Long
00200668 =00000018                  TicksRequest		rs.w 1		;Word
00200668 =0000001A                  TicksRead		rs.w 1		;Word
00200668 =0000001C                  TicksSet		rs.w 1		;Word
00200668 =0000001E                  TempoRead 		rs.w 1		;Word
00200668 =00000020                  PattSize		rs.w 1		;Word
00200668 =00000022                  pattr_read		rs.w 1		;Word
00200668 =00000024                  CdOnlyFlags		rs.w 1		;Word
00200668 =00000026                  CurrPattern		rs.b 1		;Byte
00200668 =00000027                  PcmChnOnOff		rs.b 1		;Byte
00200668 =00000028                  PsgLast			rs.b 1		;Byte
00200668 =00000029                  snd_flagsBGM		rs.b 1		;Byte
00200668 =0000002A                  LastPattChn		rs.b 1		;Byte
00200668 =0000002B                  Psg_Vibrato		rs.b 1		;Byte
00200668 =0000002C                  Psg_AutoVol		rs.b 1		;Byte
00200668 =0000002E                  sizeof_SndBuff		rs.l 0
00200668                            
00200668                            ; --------------------------------------------
00200668                            ; Channel settings
00200668                            ; --------------------------------------------
00200668                            
00200668                            			rsreset
00200668 =00000000                  Chn_Freq		rs.w 1		;Word
00200668 =00000002                  Chn_Effect		rs.w 1		;Word
00200668 =00000004                  Chn_Portam		rs.w 1		;Word
00200668 =00000006                  Chn_Type		rs.b 1		;Byte
00200668 =00000007                  Chn_ID			rs.b 1		;Byte
00200668 =00000008                  Chn_Inst		rs.b 1		;Byte
00200668 =00000009                  Chn_Vol			rs.b 1		;Byte
00200668 =0000000A                  Chn_MainVol		rs.b 1		;Byte
00200668 =0000000B                  Chn_Note		rs.b 1		;Byte
00200668 =0000000C                  Chn_Pan			rs.b 1		;Byte
00200668 =0000000D                  Chn_FM_Key		rs.b 1		;Byte
00200668 =0000000E                  Chn_PCM_Pitch		rs.b 1		;Byte
00200668                            ; Chn_PSG_Vibrato		rs.b 1		;Byte
00200668 =0000000F                  Chn_Timer		rs.b 1
00200668 =00000010                  sizeof_Chn		rs.l 0
00200668                             
00200668                             
00200668                            			rsreset
00200668 =00000000                  instDYmha		rs.w 1
00200668 =00000002                  instDPsg		rs.w 1
00200668 =00000004                  instDNoise		rs.w 1
00200668 =00000006                  instDpsmpl		rs.w 1
00200668                            
00200668                            ; --------------------------------------------
00200668                            ; Bits
00200668                            ; --------------------------------------------
00200668                            
00200668 =00000000                  bitPriority		equ	0
00200668 =00000001                  bitSfxOn		equ	1
00200668 =00000002                  bitEnabled		equ	2
00200668                            
00200668                            ;Status
00200668 =00000000                  bitFmDac		equ	0
00200668 =00000001                  bitDacNote		equ	1
00200668 =00000002                  bitTone3		equ	2
00200668 =00000003                  bitSpecial3		equ	3
00200668                            
00200668                            ; --------------------------------------------
00200668                            ; Channel IDs
00200668                            ; --------------------------------------------
00200668                            
00200668 =00000000                  FM_1			equ	$00
00200668 =00000001                  FM_2			equ	$01
00200668 =00000002                  FM_3			equ	$02
00200668 =00000004                  FM_4			equ	$04
00200668 =00000005                  FM_5			equ	$05
00200668 =00000006                  FM_6			equ	$06
00200668 =00000080                  PSG_1			equ	$80
00200668 =000000A0                  PSG_2			equ	$A0
00200668 =000000C0                  PSG_3			equ	$C0
00200668 =000000E0                  NOISE			equ	$E0
00200668 =00000010                  PCM_1			equ	$10
00200668 =00000011                  PCM_2			equ	$11
00200668 =00000012                  PCM_3			equ	$12
00200668 =00000013                  PCM_4			equ	$13
00200668 =00000014                  PCM_5			equ	$14
00200668 =00000015                  PCM_6			equ	$15
00200668 =00000016                  PCM_7			equ	$16
00200668 =00000017                  PCM_8			equ	$17
00200668 =00000012                  max_chnl		equ	18
00200668                            
00200668                            ; --------------------------------------------
00200668                            ; .IT request ($80+) format
00200668                            ; --------------------------------------------
00200668                            
00200668 =00000000                  bitNote			equ	0
00200668 =00000001                  bitInst			equ	1
00200668 =00000002                  bitVolume		equ	2
00200668 =00000003                  bitEffect		equ	3
00200668 =00000004                  bitSameNote		equ	4
00200668 =00000005                  bitSameInst		equ	5
00200668 =00000006                  bitSameVol		equ	6
00200668 =00000007                  bitSameEffect		equ	7
00200668                            
00200668                            ; --------------------------------------------
00200668                            ; RAM
00200668                            ; 
00200668                            ; MAX: $400
00200668                            ; --------------------------------------------
00200668                            
00200668                            			rsset RAM_Audio
00200668 =FFFFEF00                  RAM_SMEG_Buffer		rs.b sizeof_SndBuff
00200668 =FFFFEF2E                  RAM_SMEG_SfxBuff	rs.b sizeof_SndBuff
00200668 =FFFFEF5C                  RAM_SMEG_PrioList	rs.b max_chnl
00200668 =FFFFEF6E                  RAM_SMEG_Chnls_BGM	rs.b $10*max_chnl
00200668 =FFFFF08E                  RAM_SMEG_Chnls_SFX	rs.b $10*max_chnl
00200668 =FFFFF1AE                  RAM_SMEG_PcmList	rs.l 64
00200668                            			
00200668 =FFFFF2AE                  sizeof_SMEG		rs.l 0
00200668                            ;      			inform 0,"SMEG Uses: %h",sizeof_SMEG-RAM_Audio
00200668                            			
00200668                            ; ================================================================
00200668                            ; -------------------------------------------
00200668                            ; Macros
00200668                            ; -------------------------------------------
00200668                            
00200668                            ; -----------------------------------------
00200668                            
00200668                            PCM_Entry	macro	cd_side,mars_side,loop,pitch
00200668                            		
00200668                            cdsize_size	= strlen(\cd_side)
00200668                            		if MCD
00200668                            		  if cdsize_size>$C
00200668                            		    inform 2,"(SMEG) CD FILENAME TOO LONG"
00200668                            		  elseif cdsize_size=$C
00200668                            		    dc.b \cd_side
00200668                            		  elseif cdsize_size<$C
00200668                            		    dc.b \cd_side
00200668                            		    rept $C-cdsize_size
00200668                            		      dc.b 0
00200668                            		    endr
00200668                            		  elseif cdsize_size<=0
00200668                            		    inform 2,"(SMEG) YOU FORGOT THE CD FILENAME"
00200668                            		  endif
00200668                            		  
00200668                            		elseif MARS
00200668                            		  dc.l mars_side
00200668                            		endif
00200668                            		
00200668                            		dc.w loop
00200668                            		dc.w pitch
00200668                            		endm
00200668                            
00200668                            ; 		inform 0,"%h",RAM_SMEG_Buffer
00200668                            
00200668                            ; ================================================================
00200668                            ; -------------------------------------------
00200668                            ; External Calls
00200668                            ; -------------------------------------------
00200668                            
00200668                            ;SegaPCM
00200668 =00000020                  CdTask_LoadPcm		equ	$20
00200668 =00000021                  CdTask_SetAddr		equ	$21
00200668 =00000022                  CdTask_SetFreq		equ	$22
00200668 =00000023                  CdTask_SetPan		equ	$23
00200668 =00000024                  CdTask_SetEnv		equ	$24
00200668 =00000025                  CdTask_SetOnOff		equ	$25
00200668 =00000026                  CdTask_ClearAllPcm	equ	$26
00200668                            
00200668                            ;MARS
00200668 =00000001                  marscall_Play		equ	1
00200668 =00000002                  marscall_Stop		equ	2
00200668 =00000003                  marscall_SetSmpl	equ	3
00200668 =00000004                  marscall_SetVol		equ	4
00200668 =00000005                  marscall_SetEntry	equ	5
00200668                            	
00200668                            ; ================================================================
00200668                            ; -------------------------------------------
00200668                            ; Init
00200668                            ; -------------------------------------------
00200668                            
00200668                            Audio_Init:
00200668 41F9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a0
0020066E 303C 02FF                  		move.w	#$2FF,d0
00200672                            @ClrAll:
00200672 4298                       		clr.l	(a0)+
00200674 51C8 FFFC                  		dbf	d0,@ClrAll
00200678                            		
00200678                            ; -------------------------------------------
00200678                            ; Z80
00200678                            ; -------------------------------------------
00200678                            
00200678                            SMEG_Z80_Init:
00200678 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00200680 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
00200688                            @WaitZ80:
00200688 0839 0000 00A1 1100        		btst	#0,($A11100).l
00200690 66F6                       		bne.s	@WaitZ80
00200692                            
00200692 41F9 00A0 0000             		lea	($A00000).l,a0
00200698 303C 1FFF                  		move.w	#$1FFF,d0
0020069C                            @cleanup:
0020069C 4218                       		clr.b	(a0)+
0020069E 51C8 FFFC                  		dbf	d0,@cleanup
002006A2                            		
002006A2 41FA 0000                  		lea	Z80_Driver(pc),a0
002006A6 43F9 00A0 0000             		lea	($A00000).l,a1
002006AC 323C 0000                  		move.w	#Z80_DriverEnd-Z80_Driver,d1
002006B0                            @ToZ80:
002006B0 12D8                       		move.b	(a0)+,(a1)+
002006B2 51C9 FFFC                  		dbf	d1,@ToZ80
002006B6                            
002006B6                            ; -----------------------------------
002006B6                            
002006B6 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
002006BE 4E71                       		nop
002006C0 4E71                       		nop
002006C2 4E71                       		nop
002006C4 4E71                       		nop
002006C6 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
002006CE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
002006D6                            ; 		rts
002006D6                            		
002006D6                            ; -------------------------------------------
002006D6                            ; Stop ALL Sound
002006D6                            ; -------------------------------------------
002006D6                            
002006D6                            SMEG_StopSnd:
002006D6 103C 002B                  		move.b	#$2B,d0
002006DA 123C 0000                  		move.b	#$00,d1
002006DE 6100 0000                  		bsr	SMEG_Z80_Off
002006E2 6100 0000                  		bsr	FM_RegWrite_1
002006E6 6100 0000                  		bsr	SMEG_Z80_On
002006EA 6100 0000                  		bsr	Audio_Sample_Stop
002006EE                            		
002006EE 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
002006F4 0896 0002                  		bclr	#bitEnabled,(a6)
002006F8                            	
002006F8 6100 0000                  		bsr	SMEG_FM_Reset
002006FC 6100 0000                   		bsr	SMEG_PSG_Reset
00200700 6000 0000                  		bra	SMEG_PCM_Reset
00200704                            		
00200704                            ; -------------------------------------------
00200704                            ; Play Song
00200704                            ; -------------------------------------------
00200704                            
00200704                            SMEG_PlaySong:
00200704 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
0020070A 08D6 0002                  		bset	#bitEnabled,(a6)
0020070E 4E75                       		rts
00200710                            		
00200710                            ; -------------------------------------------
00200710                            ; Load Song
00200710                            ;
00200710                            ; d0 - StartOfSong
00200710                            ; d1 - Ticks
00200710                            ; d2 - Type (0 - song, 1 - sfx)
00200710                            ; -------------------------------------------
00200710                            
00200710                            Audio_Track_Play:
00200710 4A42                       		tst.w	d2
00200712 6600                       		bne.s	@Sfx
00200714                            		
00200714 23C0 FFFF EF04             		move.l	d0,(RAM_SMEG_Buffer+SongRequest)
0020071A 33C1 FFFF EF18             		move.w	d1,(RAM_SMEG_Buffer+TicksRequest)
00200720 4E75                       		rts
00200722                            @Sfx:
00200722                            ; 		clr.w	(RAM_SMEG_SfxBuff+pattr_read)
00200722                            ; 		clr.w	(RAM_SMEG_SfxBuff+CurrPattern)
00200722                            ; 		move.l	(RAM_SMEG_SfxBuff+SongStart),(RAM_SMEG_SfxBuff+SongRead)
00200722                            ; 		cmp.l	(RAM_SMEG_SfxBuff+SongRequest),d0
00200722                            ; 		bne.s	@SameSfx
00200722                            		
00200722 23C0 FFFF EF32             		move.l	d0,(RAM_SMEG_SfxBuff+SongRequest)
00200728 33C1 FFFF EF46             		move.w	d1,(RAM_SMEG_SfxBuff+TicksRequest)
0020072E                            @SameSfx:
0020072E 4E75                       		rts
00200730                            		
00200730                            ; ================================================================
00200730                            ; -------------------------------------------
00200730                            ; Run
00200730                            ; -------------------------------------------
00200730                            
00200730                            Audio_Run:
00200730 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
00200736 6100 0000                  		bsr	@RequestSong
0020073A 0896 0000                  		bclr	#bitPriority,(a6)
0020073E 6100 0000                                  bsr	@ReadRow
00200742                            
00200742 4DF9 FFFF EF2E               		lea	(RAM_SMEG_SfxBuff),a6
00200748 6100 0000                   		bsr	@RequestSfx
0020074C 08D6 0000                  		bset	#bitPriority,(a6)
00200750 6100 0000                  		bsr	@ReadRow
00200754                            		
00200754                            ; -------------------------
00200754                            ; MARS ONLY
00200754                            ; Transfer 68k RAM using
00200754                            ; framebuffer (offside)
00200754                            ; -------------------------
00200754                            
00200754                            ; @marsturn:
00200754                            ; 		btst	#7,(marsreg)	
00200754                            ; 		bne.s	@busymars
00200754                            ; 		
00200754                            ; 		bchg	#0,($A1518B)
00200754                            ; @waitfb:	btst	#1,($A1518B)
00200754                            ; 		bne.s	@waitfb
00200754                            ; 		lea	(RAM_SMEG_Chnls_BGM),a0
00200754                            ; 		lea	(framebuffer+$14000),a1
00200754                            ; 		move.w	#$10*max_chnl,d0
00200754                            ; @copytomars:	
00200754                            ; 		move.b	(a0)+,(a1)+
00200754                            ; 		dbf	d0,@copytomars
00200754                            ; 		bchg	#0,($A1518B)
00200754                            ; @busymars:
00200754                            
00200754                            ; -------------------------
00200754                            
00200754                            @Wait:
00200754 4E75                       		rts
00200756                            
00200756                            ; -------------------------------------------
00200756                            ; Request song
00200756                            ; -------------------------------------------
00200756                            	
00200756                            @RequestSong:
00200756 4AAE 0004                  		tst.l	SongRequest(a6)
0020075A 6700                       		beq.s	@Same
0020075C 0896 0002                  		bclr	#bitEnabled,(a6)
00200760 6100 FF74                   		bsr	SMEG_StopSnd			;d0-d1 are gone
00200764 4AAE 0004                   		tst.l	SongRequest(a6)
00200768 6B00                        		bmi.s	@Same
0020076A                             		
0020076A 422E 0026                  		clr.b	CurrPattern(a6)
0020076E 422E 0002                  		clr.b	PatternEnd(a6)
00200772 426E 0020                  		clr.w	PattSize(a6)
00200776 426E 0022                  		clr.w	pattr_read(a6)
0020077A 4BF9 FFFF EF6E             		lea	(RAM_SMEG_Chnls_BGM),a5
00200780 422E 0027                  		clr.b	PcmChnOnOff(a6)
00200784 422E 0000                                  clr.b	DrvStatus(a6)
00200788 6100 0000                  		bsr	SMEG_Load_SetChnls
0020078C 6100 0000                   		bsr	SMEG_Load_SetExtChnls
00200790 08D6 0002                  		bset	#bitEnabled,(a6)
00200794                            
00200794 426E 0018                  		clr.w	TicksRequest(a6)
00200798 42AE 0004                  		clr.l	SongRequest(a6)
0020079C                            @Same:
0020079C 4E75                       		rts
0020079E                            		
0020079E                            ; -------------------------------------------
0020079E                            ; Request sfx
0020079E                            ; -------------------------------------------
0020079E                            
0020079E                            @RequestSfx:
0020079E 4AAE 0004                  		tst.l	SongRequest(a6)
002007A2 67F8                       		beq.s	@Same
002007A4 6BF6                       		bmi.s	@Same
002007A6                            		
002007A6 0896 0002                  		bclr	#bitEnabled,(a6)
002007AA 422E 0026                  		clr.b	CurrPattern(a6)
002007AE 422E 0002                  		clr.b	PatternEnd(a6)
002007B2 426E 0020                  		clr.w	PattSize(a6)
002007B6 426E 0022                  		clr.w	pattr_read(a6)
002007BA                            		
002007BA 422E 0027                  		clr.b	PcmChnOnOff(a6)
002007BE 422E 0000                                  clr.b	DrvStatus(a6)
002007C2                            ;                 bset	#bitSfxOn,(a6)
002007C2 4BF9 FFFF F08E             		lea	(RAM_SMEG_Chnls_SFX),a5
002007C8 6100 0000                  		bsr	SMEG_Load_SetChnls
002007CC 6100 0000                  		bsr	SMEG_Load_FixSfx
002007D0 08D6 0002                  		bset	#bitEnabled,(a6)
002007D4                            		
002007D4 426E 0018                  		clr.w	TicksRequest(a6)
002007D8 42AE 0004                  		clr.l	SongRequest(a6)
002007DC 4E75                       		rts
002007DE                            		
002007DE                            ; -------------------------------------------
002007DE                            ; Read row
002007DE                            ; -------------------------------------------
002007DE                            
002007DE                            @ReadRow:
002007DE 0816 0002                  		btst	#bitEnabled,(a6)
002007E2 6700 FF70                  		beq	@Wait
002007E6                            
002007E6 046E 0001 001A             		sub.w	#1,TicksRead(a6)
002007EC 6A00 FF66                  		bpl	@Wait
002007F0 3D6E 001C 001A              		move.w	TicksSet(a6),TicksRead(a6)
002007F6                            
002007F6                            @NewRow:
002007F6 286E 000C                                  movea.l	SongRead(a6),a4
002007FA                            
002007FA                            ; --------------------------------
002007FA                            ; New pattern
002007FA                            ; --------------------------------
002007FA                            
002007FA                            @Next:
002007FA 7A00                       		moveq	#0,d5
002007FC 7C00                       		moveq	#0,d6
002007FE 3C2E 0020                   		move.w	PattSize(a6),d6
00200802 0446 0001                    		sub.w	#1,d6
00200806 3A2E 0022                    		move.w	pattr_read(a6),d5
0020080A BC85                        		cmp.l	d5,d6
0020080C 6400                        		bcc.s	@NoNextRow
0020080E                             		
0020080E 426E 0022                  		clr.w	pattr_read(a6)
00200812 7A00                       		moveq	#0,d5
00200814 7C00                       		moveq	#0,d6
00200816 1C2E 0002                  		move.b	PatternEnd(a6),d6
0020081A 1A2E 0026                  		move.b	CurrPattern(a6),d5
0020081E BC45                       		cmp.w	d5,d6
00200820 6E00                       		bgt.s	@NotEnd
00200822                            		
00200822 0C2E 00FF 0003             		cmp.b	#-1,PatternLoop(a6)
00200828 6700                       		beq.s	@exit
0020082A                            		
0020082A 286E 0008                  		movea.l	SongStart(a6),a4
0020082E 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
00200832 1D5C 0020                   		move.b	(a4)+,PattSize(a6)
00200836 D8FC 0006                   		adda	#6,a4
0020083A 2D4C 000C                  		move.l	a4,SongRead(a6)
0020083E 1D6E 0003 0026             		move.b	PatternLoop(a6),CurrPattern(a6)
00200844 426E 001A                  		clr.w	TicksRead(a6)
00200848 4E75                       		rts
0020084A                            		
0020084A                            @exit:
0020084A 0896 0002                  		bclr	#bitEnabled,(a6)
0020084E 4E75                       		rts
00200850                            
00200850                            ; --------------------------------
00200850                            
00200850                            @NotEnd:
00200850 062E 0001 0026             		add.b	#1,CurrPattern(a6)
00200856 7000                       		moveq	#0,d0
00200858 102E 0026                  		move.b	CurrPattern(a6),d0
0020085C B02E 0003                  		cmp.b	PatternLoop(a6),d0
00200860 6600                       		bne.s	@DontSaveLoop
00200862 2D4C 0008                  		move.l	a4,SongStart(a6)
00200866                            @DontSaveLoop:
00200866 7200                       		moveq	#0,d1
00200868 121C                       		move.b	(a4)+,d1
0020086A 141C                       		move.b	(a4)+,d2
0020086C E14A                       		lsl.w	#8,d2
0020086E 8242                       		or	d2,d1
00200870 3D41 0020                  		move.w	d1,PattSize(a6)
00200874 D8FC 0006                  		adda	#6,a4
00200878                            		
00200878                            ; --------------------------------
00200878                            ; Current pattern
00200878                            ; --------------------------------
00200878                            
00200878                            @NoNextRow:
00200878 7C00                       		moveq	#0,d6
0020087A 7000                       		moveq	#0,d0
0020087C 101C                       		move.b	(a4)+,d0
0020087E                            
0020087E 4A40                       		tst.w	d0
00200880 6600                       		bne.s	@ValidNote
00200882                            
00200882 066E 0001 0022             		add.w	#1,pattr_read(a6)
00200888 2D4C 000C                  		move.l	a4,SongRead(a6)
0020088C 4E75                       		rts
0020088E                            
0020088E                            @ValidNote:
0020088E 4A00                       		tst.b	d0
00200890 6A00                       		bpl.s	@Not80
00200892 066E 0001 0022             		add.w	#1,pattr_read(a6)
00200898 0880 0007                  		bclr	#7,d0
0020089C 1C1C                       		move.b	(a4)+,d6
0020089E                            @Not80:
0020089E 066E 0001 0022             		add.w	#1,pattr_read(a6)
002008A4 0440 0001                  		sub.w	#1,d0
002008A8 1D40 002A                  		move.b	d0,LastPattChn(a6)
002008AC                            
002008AC 4BF9 FFFF EF6E             		lea 	(RAM_SMEG_Chnls_BGM),a5
002008B2 0816 0000                  		btst 	#bitPriority,(a6)
002008B6 6700                       		beq.s	@MusicPrio
002008B8 4BF9 FFFF F08E             		lea 	(RAM_SMEG_Chnls_SFX),a5	
002008BE                            @MusicPrio:
002008BE C0FC 0010                  		mulu.w	#sizeof_Chn,d0
002008C2 DAC0                       		adda	d0,a5
002008C4                            		
002008C4 4A46                       		tst.w	d6
002008C6 6700                       		beq.s	@NotRest
002008C8 1B46 0006                  		move.b	d6,Chn_Type(a5)
002008CC                            @NotRest:
002008CC                            
002008CC                            ; SFX: Mark used channel
002008CC                            
002008CC 0816 0000                  		btst 	#bitPriority,(a6)
002008D0 6700                       		beq.s	@MusicPrio2
002008D2 6100 0000                  		bsr	SMEG_FindPrioSlot
002008D6 16BC 0001                    		move.b	#1,(a3)
002008DA                            @MusicPrio2:
002008DA                             
002008DA                            ; -------------
002008DA                            ; Note
002008DA                            ; -------------
002008DA                            
002008DA 082D 0004 0006             		btst	#bitSameNote,Chn_Type(a5)
002008E0 6600                       		bne.s	@PlayOnly
002008E2 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
002008E8 6700                       		beq.s	@NoNote
002008EA                            
002008EA 426D 0004                  		clr.w	Chn_Portam(a5)
002008EE 1B5C 000B                                  move.b	(a4)+,Chn_Note(a5)
002008F2 066E 0001 0022             		add.w	#1,pattr_read(a6)
002008F8                            
002008F8                            @PlayOnly:
002008F8                            ; 		bsr	SMEG_ChannelRest
002008F8                            
002008F8                            @NoNote:
002008F8                            
002008F8                            ; -------------
002008F8                            ; Instrument
002008F8                            ; -------------
002008F8                            
002008F8 082D 0005 0006              		btst	#bitSameInst,Chn_Type(a5)
002008FE 6600                       		bne.s	@SameInst
00200900 082D 0001 0006             		btst	#bitInst,Chn_Type(a5)
00200906 6700                       		beq.s	@NoInst
00200908                            
00200908 1B5C 0008                  		move.b	(a4)+,Chn_Inst(a5)
0020090C 066E 0001 0022             		add.w	#1,pattr_read(a6)
00200912                            
00200912                            @SameInst:
00200912 6100 0000                  		bsr	SMEG_SetVoice
00200916                            @NoInst:
00200916                            
00200916                            ; -------------
00200916                            ; Volume
00200916                            ; -------------
00200916                            
00200916 082D 0006 0006              		btst	#bitSameVol,Chn_Type(a5)
0020091C 6600                        		bne.s	@SameVol
0020091E 082D 0002 0006             		btst	#bitVolume,Chn_Type(a5)
00200924 6700                       		beq.s	@NoVolume
00200926                            
00200926 7000                       		moveq 	#0,d0
00200928 101C                       		move.b 	(a4)+,d0
0020092A 1B40 0009                  		move.b	d0,chn_vol(a5)
0020092E 066E 0001 0022             		add.w 	#1,pattr_read(a6)
00200934                            @NoVolume:
00200934                            @SameVol:
00200934 6100 0000                   		bsr	@ChnVolume
00200938                             		
00200938                            ; -------------
00200938                            ; Effect
00200938                            ; -------------
00200938                            
00200938 082D 0007 0006              		btst	#bitSameEffect,Chn_Type(a5)
0020093E 6600                        		bne.s	@SameEffect
00200940 082D 0003 0006             		btst	#bitEffect,Chn_Type(a5)
00200946 6700                       		beq.s	@NoEffect
00200948                            
00200948 1B5C 0002                  		move.b	(a4)+,Chn_Effect(a5)
0020094C 066E 0001 0022             		add.w	#1,pattr_read(a6)
00200952 1B5C 0003                  		move.b	(a4)+,Chn_Effect+1(a5)
00200956 066E 0001 0022             		add.w	#1,pattr_read(a6)
0020095C                            @SameEffect:
0020095C 6100 0000                  		bsr	@ChannelEffects
00200960                            @NoEffect:
00200960                            
00200960                            ; --------------
00200960                            ; Play the note
00200960                            ; --------------
00200960                            
00200960 082D 0004 0006              		btst	#bitSameNote,Chn_Type(a5)
00200966 6600                        		bne.s	@SameNote
00200968 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
0020096E 6700 FE8A                  		beq	@Next
00200972                            @SameNote:
00200972 6100 0000                  		bsr	@ChannelPlay
00200976 6000 FE82                  		bra	@Next
0020097A                            
0020097A                            ; ================================================================
0020097A                            ; -------------------------------
0020097A                            ; PCM Frequencies
0020097A                            ; -------------------------------
0020097A                            
0020097A                            @Notes_PCM:
0020097A 0000 0000 0000 0000 0000+   		dc.w     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0	;0
00200992 0000 0000 0000 0000 0000+   		dc.w     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0	;1
002009AA 0000 0000 0000 0000 0000+  		dc.w     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0	;2
002009C2 00F6 0104 0113 0124 0135+  		dc.w $00F6,$0104,$0113,$0124,$0135,$0148,$015B,$0170,$0186,$019D,$01B5,$01D0	;3
002009DA 01EB 0208 0228 0248 026B+  		dc.w $01EB,$0208,$0228,$0248,$026B,$0291,$02B8,$02E1,$030E,$033C,$036E,$03A3	;4 16000hz
002009F2 03DA 0415 0454 0497 04DD+  		dc.w $03DA,$0415,$0454,$0497,$04DD,$0528,$0578,$05CB,$0625,$0684,$06E8,$0753	;5
00200A0A 07C4 083B 08B0 093D 09C7+  		dc.w $07C4,$083B,$08B0,$093D,$09C7,$0A60,$0AF8,$0BA8,$0C55,$0D10,$0DE2,$0EBE	;6
00200A22 0FA4 107A 1186 1280 1396+  		dc.w $0FA4,$107A,$1186,$1280,$1396,$14CC,$1624,$1746,$18DE,$1A38,$1BE0,$1D94	;7
00200A3A 1F65 20FF 2330 2526 2753+  		dc.w $1F65,$20FF,$2330,$2526,$2753,$29B7,$2C63,$2F63,$31E0,$347B,$377B,$3B41	;8
00200A52 3EE8 4206 4684 4A5A 4EB5+  		dc.w $3EE8,$4206,$4684,$4A5A,$4EB5,$5379,$58E1,$5DE0,$63C0,$68FF,$6EFF,$783C	;9
00200A6A 7FC2 83FC 8D14 9780 9D80+  		dc.w $7FC2,$83FC,$8D14,$9780,$9D80,$AA5D,$B1F9,$BBBA,$CC77,$D751,$E333,$F0B5
00200A82 0000 0000 0000 0000 0000+  		dc.w     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
00200A9A                            		even
00200A9A                            		
00200A9A                            		
00200A9A                            ; ================================================================
00200A9A                            ; -------------------------------
00200A9A                            ; Set Volume
00200A9A                            ; -------------------------------
00200A9A                            
00200A9A                            @ChnVolume:
00200A9A 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00200AA0 6700 0000                  		beq	@Return
00200AA4                            
00200AA4 0816 0000                  		btst	#bitPriority,(a6)
00200AA8 6600                       		bne.s	@SFX_ModeV
00200AAA 6100 0000                  		bsr	SMEG_FindPrioSlot
00200AAE 4A13                         		tst.b	(a3)
00200AB0 6600 0000                    		bne	@Return
00200AB4                            @SFX_ModeV:
00200AB4                            
00200AB4 4A2D 0007                  		tst.b	Chn_ID(a5)
00200AB8 6B00 0000                  		bmi	@ChnVol_PSG
00200ABC 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00200AC2 6C00 0000                  		bge	@ChnVol_PCM
00200AC6                            		
00200AC6 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
00200ACC 6600                       		bne.s	@NotSmplChk
00200ACE 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
00200AD4 6600 0000                  		bne	@Return
00200AD8                            @NotSmplChk:
00200AD8                            
00200AD8                            ; -------------------------------
00200AD8                            ; FM Volume
00200AD8                            ; -------------------------------
00200AD8                            
00200AD8 6100 0000                  		bsr	ChnlFM_srchIns
00200ADC 223C 7F7F 7F7F             		move.l	#$7F7F7F7F,d1
00200AE2 0C42 FFFF                  		cmp.w	#-1,d2
00200AE6 6700 0000                  		beq	@ForceOff
00200AEA 0802 0007                   		btst	#7,d2
00200AEE 6600 0000                   		bne	@ForceOff
00200AF2                             		
00200AF2                            ;  		cmp.b	#64,chn_vol(a5)
00200AF2                            ;  		bge	@Return
00200AF2                            	
00200AF2 D6FC 0004                   		adda.w	#4,a3
00200AF6 2653                       		movea.l	(a3),a3
00200AF8 D6FC 0015                    		adda	#$15,a3
00200AFC                            		
00200AFC 203C 4C44 4840             		move.l	#$4C444840,d0
00200B02 7200                        		moveq	#0,d1
00200B04 7400                        		moveq	#0,d2
00200B06 7600                        		moveq	#0,d3
00200B08 162D 0007                   		move.b	chn_id(a5),d3
00200B0C 0243 0003                   		and.w	#%11,d3
00200B10                            
00200B10                             		;TODO: checar bien los TL
00200B10 122B 0003                   		move.b	3(a3),d1
00200B14 142D 0009                   		move.b	chn_vol(a5),d2
00200B18 0402 0040                   		sub.b	#64,d2
00200B1C 9202                        		sub.b	d2,d1
00200B1E E189                        		lsl.l	#8,d1
00200B20                             		
00200B20 122B 0002                   		move.b	2(a3),d1
00200B24 142D 0009                   		move.b	chn_vol(a5),d2
00200B28 0402 0040                   		sub.b	#64,d2
00200B2C 9202                        		sub.b	d2,d1
00200B2E E189                         		lsl.l	#8,d1
00200B30                              		
00200B30 122B 0001                   		move.b	1(a3),d1
00200B34 142D 0009                   		move.b	chn_vol(a5),d2
00200B38 0402 0040                   		sub.b	#64,d2
00200B3C 9202                        		sub.b	d2,d1
00200B3E E189                         		lsl.l	#8,d1
00200B40                              		
00200B40 1213                        		move.b	(a3),d1
00200B42 142D 0009                   		move.b	chn_vol(a5),d2
00200B46 0402 0040                   		sub.b	#64,d2
00200B4A 9202                        		sub.b	d2,d1
00200B4C                            
00200B4C                            @ForceOff:
00200B4C 6100 0000                   		bsr	SMEG_Z80_OFF
00200B50                            ;  		or.b	d3,d0
00200B50                            ;  		bsr	SMEG_FM_FindWrite	;oops.
00200B50 E088                        		lsr.l	#8,d0
00200B52 E089                        		lsr.l	#8,d1
00200B54 8003                        		or.b	d3,d0
00200B56 6100 0000                    		bsr	SMEG_FM_FindWrite
00200B5A E088                        		lsr.l	#8,d0
00200B5C E089                        		lsr.l	#8,d1
00200B5E                            ;  		or.b	d3,d0
00200B5E                            ;   		bsr	SMEG_FM_FindWrite
00200B5E E088                        		lsr.l	#8,d0
00200B60 E089                        		lsr.l	#8,d1
00200B62 8003                        		or.b	d3,d0
00200B64 6100 0000                   		bsr	SMEG_FM_FindWrite
00200B68 6000 0000                   		bra	SMEG_Z80_On
00200B6C                             	
00200B6C                            ; -------------------------------
00200B6C                            ; PSG Volume
00200B6C                            ; -------------------------------
00200B6C                            
00200B6C                            @ChnVol_PSG:
00200B6C 162D 0007                  		move.b	Chn_ID(a5),d3
00200B70 0043 001F                  		or.w	#$1F,d3
00200B74 102D 000B                  		move.b	chn_note(a5),d0
00200B78 0C00 00FE                  		cmp.b	#-2,d0
00200B7C 6700 0000                  		beq	ChnPsg_Rest
00200B80 0C00 00FF                  		cmp.b	#-1,d0
00200B84 6700 0000                  		beq	ChnPsg_Rest
00200B88 6000 0000                  		bra	ChnPsg_SetVol
00200B8C                            @Return:
00200B8C 4E75                       		rts
00200B8E                            
00200B8E                            ; -------------------------------
00200B8E                            ; PCM Volume
00200B8E                            ; -------------------------------
00200B8E                            
00200B8E                            @ChnVol_PCM:
00200B8E                            		
00200B8E 7400                        		moveq	#0,d2
00200B90 7200                        		moveq	#0,d1
00200B92 143C 00FF                   		move.b	#$FF,d2				;$xx00
00200B96                            ;     		move.b	Chn_MainVol(a5),d1
00200B96                            ;       	lsr.w	#4,d1
00200B96                            ;      		lsl.w	#4,d1
00200B96                            ;    		sub.b	d1,d2
00200B96 122D 0009                      		move.b	Chn_Vol(a5),d1
00200B9A E849                             		lsr.w	#4,d1
00200B9C E949                            		lsl.w	#4,d1
00200B9E 9401                           		sub.b	d1,d2
00200BA0                               		
00200BA0 7200                        		moveq	#0,d1
00200BA2 122D 0007                   		move.b	Chn_ID(a5),d1
00200BA6 0241 000F                   		and.w	#$F,d1
00200BAA 13C1 00A1 2010              		move.b	d1,($A12000+CommDataM)
00200BB0 13C2 00A1 2011              		move.b	d2,($A12000+CommDataM+1)
00200BB6 7024                        		moveq	#CdTask_SetEnv,d0
00200BB8 6100 0000                   		bsr	SMEG_CD_Call
00200BBC                            
00200BBC 4E75                       		rts
00200BBE                            		
00200BBE                            ; ================================================================
00200BBE                            ; -------------------------------
00200BBE                            ; Channel effect
00200BBE                            ; -------------------------------
00200BBE                            
00200BBE                            @ChannelEffects:
00200BBE 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00200BC4 6700 0000                  		beq	@Null
00200BC8                            ; 		btst 	#bitPriority,(a6)
00200BC8                            ; 		bne.s	@SFX_Eff
00200BC8                            ; 		bsr	SMEG_FindPrioSlot
00200BC8                            ;   		tst.b	(a3)
00200BC8                            ;   		bne	@Return
00200BC8                            ; @SFX_Eff:
00200BC8                            
00200BC8 7000                       		moveq	#0,d0
00200BCA 102D 0002                  		move.b	Chn_Effect(a5),d0
00200BCE D040                       		add.w	d0,d0
00200BD0 323B 0000                  		move.w	@EffectList(pc,d0.w),d1
00200BD4 4EFB 1000                  		jmp	@EffectList(pc,d1.w)
00200BD8                            		
00200BD8                            ; -------------------------------
00200BD8                            
00200BD8 0000                       @EffectList:	dc.w	@Null-@EffectList
00200BDA 0000                       		dc.w	@Flag_A-@EffectList
00200BDC 0000                       		dc.w	@Null-@EffectList
00200BDE 0000                       		dc.w	@Null-@EffectList
00200BE0 0000                       		dc.w	@Flag_D-@EffectList
00200BE2 0000                       		dc.w	@Flag_E-@EffectList
00200BE4 0000                       		dc.w	@Flag_F-@EffectList
00200BE6 0000                       		dc.w	@Null-@EffectList
00200BE8 0000                       		dc.w	@Null-@EffectList
00200BEA 0000                       		dc.w	@Null-@EffectList
00200BEC 0000                       		dc.w	@Null-@EffectList
00200BEE 0000                       		dc.w	@Null-@EffectList
00200BF0 0000                       		dc.w	@Null-@EffectList
00200BF2 0000                       		dc.w	@Flag_M-@EffectList
00200BF4 0000                       		dc.w	@Null-@EffectList
00200BF6 0000                       		dc.w	@Null-@EffectList
00200BF8 0000                       		dc.w	@Null-@EffectList
00200BFA 0000                       		dc.w	@Null-@EffectList
00200BFC 0000                       		dc.w	@Null-@EffectList
00200BFE 0000                       		dc.w	@Null-@EffectList
00200C00 0000                       		dc.w	@Null-@EffectList
00200C02 0000                       		dc.w	@Null-@EffectList
00200C04 0000                       		dc.w	@Null-@EffectList
00200C06 0000                       		dc.w	@Null-@EffectList
00200C08 0000                       		dc.w	@Flag_X-@EffectList
00200C0A 0000                       		dc.w	@Null-@EffectList
00200C0C 0000                       		dc.w	@Flag_Z-@EffectList
00200C0E                            		even
00200C0E                            
00200C0E                            ; -------------------------------
00200C0E                            ; Null effect
00200C0E                            ; -------------------------------
00200C0E                            
00200C0E                            @Null:
00200C0E 4E75                       		rts
00200C10                            
00200C10                            ; -------------------------------
00200C10                            ; Flag A - Set Tick rate
00200C10                            ; -------------------------------
00200C10                            
00200C10                            @Flag_A:
00200C10 7000                       		moveq	#0,d0
00200C12 426E 001C                  		clr.w	TicksSet(a6)
00200C16 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00200C1A 0440 0001                  		sub.w	#1,d0
00200C1E 1D40 001D                  		move.b	d0,TicksSet+1(a6)
00200C22 4E75                       		rts
00200C24                            
00200C24                            ; -------------------------------
00200C24                            ; Flag D - Volume slide
00200C24                            ; -------------------------------
00200C24                            
00200C24                            @Flag_D:
00200C24 4E75                        rts
00200C26                            ; 		moveq	#0,d0
00200C26                            ; 		moveq	#0,d1
00200C26                            ; 		move.b	Chn_Effect+1(a5),d0
00200C26                            ; 		tst.b	Chn_ID(a5)
00200C26                            ; 		bpl	@NotPSG
00200C26                            ; 		lsl.w	#4,d0
00200C26                            ; @NotPSG:
00200C26                            ; 		move.b	Chn_Vol(a5),d1
00200C26                            ; 		add.b	d0,d1
00200C26                            ; 		move.b	d1,Chn_Vol(a5)
00200C26                            ; 		bra	@ChnVolume
00200C26                            
00200C26                            ; -------------------------------
00200C26                            ; Flag E - Portametro down
00200C26                            ; -------------------------------
00200C26                            
00200C26                            @Flag_E:
00200C26 7000                       		moveq	#0,d0
00200C28 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00200C2C 0640 0001                  		add.w	#1,d0
00200C30 4440                       		neg.w	d0
00200C32 6000                       		bra.s	@DoPortam
00200C34                            
00200C34                            ; -------------------------------
00200C34                            ; Flag F - Portametro up
00200C34                            ; -------------------------------
00200C34                            
00200C34                            @Flag_F:
00200C34 7000                       		moveq	#0,d0
00200C36 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00200C3A 0640 0001                  		add.w	#1,d0
00200C3E                            		
00200C3E                            ; ---------------------
00200C3E                            
00200C3E                            @DoPortam:
00200C3E 382D 0004                  		move.w	Chn_Portam(a5),d4
00200C42 4A44                       		tst.w	d4
00200C44 6700 FF46                  		beq	@return
00200C48                            		
00200C48 4A2D 0007                  		tst.b	Chn_ID(a5)
00200C4C 6B00                       		bmi.s	@psg_mode
00200C4E 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00200C54 6C00                       		bge.s	@pcm_mode
00200C56                            		
00200C56 E548                       		lsl.w	#2,d0
00200C58 D840                       		add.w	d0,d4
00200C5A 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00200C5E 6000 0000                  		bra	SMEG_SetFreqFM
00200C62                            		
00200C62                            @psg_mode:
00200C62 D040                       		add.w	d0,d0
00200C64 9840                       		sub.w	d0,d4
00200C66 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00200C6A 3004                       		move.w	d4,d0
00200C6C 122D 0007                  		move.b	Chn_ID(a5),d1
00200C70 6000 0000                  		bra	ChnPsg_NoteFreq
00200C74                            		
00200C74                            @pcm_mode:
00200C74 4E75                       		rts
00200C76                            		
00200C76                            ; -------------------------------
00200C76                            ; Flag M - Set Channel Volume
00200C76                            ; -------------------------------
00200C76                            
00200C76                            @Flag_M:
00200C76 4E75                        rts
00200C78                             
00200C78                            ; 		moveq	#0,d0
00200C78                            ; 		move.b	Chn_Effect+1(a5),d0
00200C78                            ; 	;	tst.b	Chn_ID(a5)
00200C78                            ; 	;	bpl	@NotPSG_H
00200C78                            ; 
00200C78                            ; 		neg.w	d0
00200C78                            ; 		sub.w	#$D0,d0
00200C78                            ; ;@NotPSG_H:
00200C78                            ; 		move.b	d0,Chn_MainVol(a5)
00200C78                            ; 		bra	@ChnVolume
00200C78                            
00200C78                            ; -------------------------------
00200C78                            ; Flag X - Stereo
00200C78                            ; -------------------------------
00200C78                            
00200C78                            @Flag_X:
00200C78                            ; 		tst.b	Chn_ID(a5)
00200C78                            ; 		bmi	@Null
00200C78                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
00200C78                            ; 		bge	@PCM_Pan
00200C78                            		
00200C78 1B6D 0003 000C             		move.b	Chn_Effect+1(a5),Chn_Pan(a5)
00200C7E 4E75                       		rts
00200C80                            		
00200C80                            ; 		moveq	#0,d0
00200C80                            ; 		move.w	#$C0,d0
00200C80                            ;                 cmp.b	#$80,Chn_Effect+1(a5)
00200C80                            ;                 beq.s	@SetPan
00200C80                            ; 		tst.b	Chn_Effect+1(a5)
00200C80                            ; 		bmi.s	@Right
00200C80                            ; 		bpl.s	@Left
00200C80                            ; @SetPan:
00200C80                            ; 		move.b	d0,Chn_Pan(a5)
00200C80                            ; 		rts
00200C80                            ; @Left:
00200C80                            ; 		move.w	#$80,d0
00200C80                            ; 		bra.s	@SetPan
00200C80                            ; @Right:
00200C80                            ; 		move.w	#$40,d0
00200C80                            ; 		bra.s	@SetPan
00200C80                            
00200C80                            ; ; -------------------------------
00200C80                            ; ; PCM Panning
00200C80                            ; ; -------------------------------
00200C80                            ; 
00200C80                            ; @PCM_Pan:
00200C80                            ; 		if MCD
00200C80                            ; 		
00200C80                            ; 		moveq	#0,d0
00200C80                            ; 		move.b	#%11001100,d0				;TODO: dejarlo así
00200C80                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
00200C80                            ; 		beq.s	@Return2
00200C80                            ;                  
00200C80                            ;  		tst.b	Chn_Effect+1(a5)
00200C80                            ;  		bmi.s	@Right2
00200C80                            ; 		bpl.s	@Left2
00200C80                            ; 		bra	@Return2
00200C80                            ; @Right2:
00200C80                            ;  		move.b	#%10000000,d0
00200C80                            ;  		bra	@Return2
00200C80                            ; @Left2:
00200C80                            ; 		move.b	#%00001000,d0
00200C80                            ; @Return2:
00200C80                            ; 		move.b	d0,Chn_Pan(a5)
00200C80                            ; 
00200C80                            ; ; -------------------------------------------------
00200C80                            ; 
00200C80                            ;  		elseif MARS
00200C80                            ;  
00200C80                            ; 		move.w	#%11000000,d0
00200C80                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
00200C80                            ; 		beq	@Cont
00200C80                            ;  		tst.b	Chn_Effect+1(a5)
00200C80                            ;  		bmi.s	@pwmRight
00200C80                            ; 		bpl.s	@pwmLeft
00200C80                            ; 		bra	@Cont
00200C80                            ;  		
00200C80                            ; @pwmRight:
00200C80                            ;  		move.w	#%01000000,d0
00200C80                            ;  		bra.s	@Cont
00200C80                            ; @pwmLeft:
00200C80                            ; 		move.w	#%10000000,d0
00200C80                            ; 
00200C80                            ; @Cont:
00200C80                            ; 		move.b	d0,Chn_Pan(a5)   		
00200C80                            ; 		endif
00200C80                            ; 		rts
00200C80                            
00200C80                            ; ======================================================
00200C80                            ; -------------------------------
00200C80                            ; Flag Z
00200C80                            ; -------------------------------
00200C80                            
00200C80                            @Flag_Z:
00200C80 7000                       		moveq	#0,d0
00200C82 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00200C86 E848                       		lsr.w	#4,d0
00200C88 D040                       		add.w	d0,d0
00200C8A 323B 0000                  		move.w	@HashList(pc,d0.w),d1
00200C8E 102D 0003                  		move.b	Chn_Effect+1(a5),d0		;d0 - $0-$F argument
00200C92 0200 000F                  		and.b	#$F,d0
00200C96 4EFB 1000                  		jmp	@HashList(pc,d1.w)
00200C9A                            
00200C9A FF74                       @HashList:	dc.w	@Null-@HashList		;$00
00200C9C 0000                       		dc.w	@FM_Key-@HashList		;$10 - FM Keys ON/OFF
00200C9E FF74                       		dc.w	@Null-@HashList			;$20
00200CA0 FF74                       		dc.w	@Null-@HashList			;$30
00200CA2 0000                       		dc.w	@PSG-@HashList			;$40 - PSG Settings
00200CA4 FF74                       		dc.w	@Null-@HashList			;$50
00200CA6 FF74                       		dc.w	@Null-@HashList			;$60
00200CA8 FF74                       		dc.w	@Null-@HashList			;$70
00200CAA FF74                       		dc.w	@Null-@HashList			;$80
00200CAC FF74                       		dc.w	@Null-@HashList			;$90
00200CAE FF74                       		dc.w	@Null-@HashList			;$A0
00200CB0 FF74                       		dc.w	@Null-@HashList			;$B0
00200CB2 FF74                       		dc.w	@Null-@HashList			;$C0
00200CB4 FF74                       		dc.w	@Null-@HashList			;$D0
00200CB6 FF74                       		dc.w	@Null-@HashList			;$E0
00200CB8 0000                       		dc.w	@FixSfx-@HashList		;$F0 - Finish SFX flag (SFX only)
00200CBA                            		even
00200CBA                            
00200CBA                            ; -------------------------------
00200CBA                            
00200CBA                            @DacStatus:
00200CBA 4E75                        rts
00200CBC                            
00200CBC                            ; -------------------------------
00200CBC                            
00200CBC                            @FM_Key:
00200CBC 0240 000F                  		and.w	#$F,d0
00200CC0 E948                       		lsl.w	#4,d0
00200CC2 1B40 000D                  		move.b	d0,Chn_FM_Key(a5)
00200CC6 4E75                       		rts
00200CC8                            
00200CC8                            ; -------------------------------
00200CC8                            
00200CC8                            @PSG:
00200CC8 4E75                        rts
00200CCA                            
00200CCA                            ; -------------------------------
00200CCA                            
00200CCA                            @FixSfx:
00200CCA                            ;    		btst	#bitPriority,(a6)
00200CCA                            ;   		bne	@Return
00200CCA                            		
00200CCA                            ;  		lea	(RAM_SMEG_Buffer),a3
00200CCA                            ;  		move.b	snd_flagsBGM(a3),snd_flags(a3)
00200CCA                            ; 		moveq 	#0,d0
00200CCA                            ;  		move.b	PsgLast(a3),d0
00200CCA                            ; 		add.w	#$E0,d0
00200CCA                            ; 		bsr	@PutPSG
00200CCA                            
00200CCA                            ;  		moveq	#0,d0
00200CCA                            ;  		move.b	LastPattChn(a6),d0
00200CCA                            ; 		bsr	SMEG_FindPrioSlot
00200CCA                            ;   		bclr	#0,(a3)
00200CCA                             		
00200CCA                            ;   		bclr	#bitSfxOn,(a6)				;SFX finished playing
00200CCA 4E75                       		rts
00200CCC                            		
00200CCC                            ; ================================================================
00200CCC                            ; -------------------------------
00200CCC                            ; Channel play
00200CCC                            ; -------------------------------
00200CCC                            
00200CCC                            @ChannelPlay:	
00200CCC 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00200CD2 6700 0000                  		beq	@Disabled
00200CD6                            		
00200CD6                            ;                 moveq	#0,d0
00200CD6                            ; 		move.b	Chn_Note(a5),d0
00200CD6                            ; 		sub.w	#1,Chn_Portam(a5)
00200CD6                            ; 		tst.b	Chn_Portam(a5)
00200CD6                            ; 		beq.s	@NoUp
00200CD6                            ; 		add.b	Chn_Portam(a5),d0
00200CD6                            ; 		bra.s	@NoDown
00200CD6                            ; @NoUp:
00200CD6                            ; 		tst.b	Chn_Portam+1(a5)
00200CD6                            ; 		beq.s	@NoDown
00200CD6                            ; 		sub.b	Chn_Portam+1(a5),d0
00200CD6                            ; @NoDown:
00200CD6                            
00200CD6                            ; --------------------------------
00200CD6                            
00200CD6                            ; BGM: Block channel
00200CD6                            
00200CD6 0816 0000                  		btst 	#bitPriority,(a6)
00200CDA 6600                       		bne.s	@SFX_Check
00200CDC 6100 0000                  		bsr	SMEG_FindPrioSlot
00200CE0 4A13                         		tst.b	(a3)
00200CE2 6600 FEA8                    		bne	@Return
00200CE6                              		
00200CE6                            ; --------------------------------
00200CE6                            
00200CE6                            ; SFX: Check NoteOff/NoteCut
00200CE6                            ; then clear flag
00200CE6                            
00200CE6                            @SFX_Check:
00200CE6 0816 0000                  		btst 	#bitPriority,(a6)
00200CEA 6700                       		beq.s	@NotSFX
00200CEC                            ; 		cmp.b	#-1,chn_note(a5)
00200CEC                            ; 		beq	@DoIt
00200CEC 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
00200CF2 6600 0000                  		bne	@NotSFX
00200CF6                            @DoIt:
00200CF6 6100 0000                  		bsr	SMEG_FindPrioSlot
00200CFA 4213                         		clr.b	(a3)
00200CFC                            @NotSFX:
00200CFC                            
00200CFC                            ; --------------------------------
00200CFC                            
00200CFC 4A2D 0007                  		tst.b	Chn_ID(a5)
00200D00 6B00 0000                  		bmi	Chnl_PSG
00200D04 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00200D0A 6C00 0000                  		bge	@ChannelPlay_PCM
00200D0E 0C2D 0002 0007             		cmp.b	#FM_3,Chn_ID(a5)
00200D14 6700 0000                  		beq	@Chn3_ChkSpecial
00200D18 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
00200D1E 6700 0000                  		beq	@Chn6_ChkSmpl
00200D22 6000 0000                  		bra	@ChnPlay_FM
00200D26                            		
00200D26                            ; -------------------------------
00200D26                            ; Play FM6 or DAC sample
00200D26                            ; -------------------------------
00200D26                            
00200D26                            @Chn6_ChkSmpl:
00200D26 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
00200D2C 6700 0000                  		beq	@ChnPlay_FM6
00200D30 0C2D 00FF 000B             		cmp.b	#-1,chn_note(a5)
00200D36 6700 0000                  		beq	@StopSmpl
00200D3A 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
00200D40 6700 0000                  		beq	@StopSmpl
00200D44                            		
00200D44 7028                       		moveq	#$28,d0
00200D46 7206                       		moveq	#6,d1
00200D48 6100 0000                   		bsr	SMEG_Z80_Off
00200D4C 6100 0000                  		bsr	FM_RegWrite_1
00200D50 6100 0000                  		bsr	SMEG_FM_SetPan
00200D54 6100 0000                  		bsr	SMEG_Z80_On
00200D58                            		
00200D58                            ; 		btst 	#bitPriority,(a6)
00200D58                            ; 		beq.s	@MusicPrio3
00200D58                            ; 		bsr	SMEG_FindPrioSlot
00200D58                            ;   		btst	#0,(a3)
00200D58                            ;   		bne	@return
00200D58                            ; @MusicPrio3:
00200D58 6000 0000                  		bra	Audio_Sample_Play
00200D5C                            
00200D5C                            ; Stop
00200D5C                            
00200D5C                            @StopSmpl:
00200D5C                            ; 		btst 	#bitPriority,(a6)
00200D5C                            ; 		bne.s	@NotSfxDAC
00200D5C                            ; 		bsr	SMEG_FindPrioSlot
00200D5C                            ;   		bclr	#0,(a3)
00200D5C                            ; @NotSfxDAC:
00200D5C 6000 0000                  		bra	Audio_Sample_Stop
00200D60                            		
00200D60                            ; -------------------------------
00200D60                            ; Play FM6 Normally
00200D60                            ; -------------------------------
00200D60                            
00200D60                            @ChnPlay_FM6:
00200D60 103C 002B                  		move.b	#$2B,d0
00200D64 123C 0000                  		move.b	#$00,d1
00200D68 6100 0000                  		bsr	SMEG_Z80_Off
00200D6C 6100 0000                  		bsr	FM_RegWrite_1
00200D70 6100 0000                  		bsr	SMEG_Z80_On
00200D74 6100 0000                  		bsr	Audio_Sample_Stop
00200D78 6000 0000                  		bra	@ChnPlay_FM
00200D7C                            		
00200D7C                            ; -------------------------------
00200D7C                            ; Play FM3 Normally
00200D7C                            ; -------------------------------
00200D7C                            
00200D7C                            @Chn3_ChkSpecial:
00200D7C 6100 0000                  		bsr	SMEG_Z80_Off
00200D80 6100 0000                  		bsr	SMEG_FM_SetPan
00200D84 6100 0000                  		bsr	SMEG_Z80_On
00200D88                            		
00200D88 082E 0003 0001             		btst	#bitSpecial3,snd_flags(a6)
00200D8E 6700 0000                  		beq	@NoSpecial3
00200D92                            		
00200D92 6100 0000                  		bsr	ChnlFM_srchIns
00200D96 0C42 FFFF                  		cmp.w	#-1,d2
00200D9A 6700 0000                  		beq	@NoSpecial3
00200D9E 0802 0006                   		btst	#6,d2
00200DA2 6700 0000                   		beq	@NoSpecial3
00200DA6                            		
00200DA6                            ;   		moveq	#$22,d0
00200DA6                            ;  		move.w	#%00001011,d1
00200DA6                            ; 		bsr	FM_RegWrite_1
00200DA6                            		
00200DA6 7027                         		moveq	#$27,d0		;CH3 enable
00200DA8 323C 0040                   		move.w	#%01000000,d1
00200DAC 6100 0000                   		bsr	SMEG_Z80_Off
00200DB0 6100 0000                  		bsr	FM_RegWrite_1
00200DB4 6100 0000                  		bsr	SMEG_Z80_On
00200DB8                            		
00200DB8 203C A9AD AAAE              		move.l	#$A9ADAAAE,d0
00200DBE 322B 000E                   		move.w	$E(a3),d1
00200DC2 E059                        		ror.w	#8,d1
00200DC4 6100 0000                   		bsr	SMEG_Z80_Off
00200DC8 6100 0000                  		bsr	FM_RegWrite_1
00200DCC E088                       		lsr.l	#8,d0
00200DCE E089                       		lsr.l	#8,d1
00200DD0 6100 0000                  		bsr	FM_RegWrite_1
00200DD4 E088                       		lsr.l	#8,d0
00200DD6 322B 000C                   		move.w	$C(a3),d1
00200DDA E059                        		ror.w	#8,d1
00200DDC 6100 0000                  		bsr	FM_RegWrite_1
00200DE0 E088                       		lsr.l	#8,d0
00200DE2 E089                       		lsr.l	#8,d1
00200DE4 6100 0000                  		bsr	FM_RegWrite_1	
00200DE8 6100 0000                    		bsr	SMEG_Z80_On
00200DEC                              		
00200DEC 203C A2A6 A8AC              		move.l	#$A2A6A8AC,d0
00200DF2 322B 000A                   		move.w	$A(a3),d1
00200DF6 E059                        		ror.w	#8,d1
00200DF8 6100 0000                   		bsr	SMEG_Z80_Off
00200DFC 6100 0000                  		bsr	FM_RegWrite_1
00200E00 E088                       		lsr.l	#8,d0
00200E02 E089                       		lsr.l	#8,d1
00200E04 6100 0000                  		bsr	FM_RegWrite_1
00200E08 E088                       		lsr.l	#8,d0
00200E0A 322B 0008                   		move.w	8(a3),d1
00200E0E E059                        		ror.w	#8,d1
00200E10 6100 0000                  		bsr	FM_RegWrite_1
00200E14 E088                       		lsr.l	#8,d0
00200E16 E089                       		lsr.l	#8,d1
00200E18 6100 0000                  		bsr	FM_RegWrite_1
00200E1C 6100 0000                  		bsr	SMEG_Z80_On
00200E20                            		
00200E20 7028                       		moveq	#$28,d0
00200E22 7200                       		moveq	#0,d1
00200E24 122D 000D                  		move.b	Chn_FM_Key(a5),d1
00200E28 822D 0007                  		or.b	Chn_ID(a5),d1
00200E2C 6100 0000                  		bsr	SMEG_Z80_Off
00200E30 6100 0000                  		bsr	FM_RegWrite_1
00200E34 6000 0000                   		bra	SMEG_Z80_On
00200E38                             		
00200E38                            @NoSpecial3:
00200E38 7200                       		moveq	#0,d1
00200E3A 7027                         		moveq	#$27,d0
00200E3C 6100 0000                   		bsr	SMEG_Z80_Off
00200E40 6100 0000                  		bsr	FM_RegWrite_1
00200E44 6100 0000                   		bsr	SMEG_Z80_On
00200E48                            		
00200E48                            ; -------------------------------
00200E48                            ; Play FM1-FM5 normally
00200E48                            ; -------------------------------
00200E48                            
00200E48                            @ChnPlay_FM:
00200E48 6100 0000                  		bsr	SMEG_Z80_Off
00200E4C 6100 0000                  		bsr	SMEG_FM_SetPan
00200E50 6100 0000                  		bsr	SMEG_Z80_On
00200E54                            		
00200E54 7000                        		moveq	#0,d0
00200E56 102D 000B                  		move.b	chn_note(a5),d0
00200E5A 0C00 00FF                  		cmp.b	#-1,d0
00200E5E 6700 0000                  		beq	SMEG_FM_KeysOff
00200E62 0C00 00FE                  		cmp.b	#-2,d0
00200E66 6700 0000                  		beq	SMEG_FM_TotLvlOff
00200E6A                            		
00200E6A 6100 0000                  		bsr	SMEG_FM_KeysOff
00200E6E                            		
00200E6E 7000                       		moveq	#0,d0
00200E70 7200                       		moveq	#0,d1
00200E72 102D 000B                  		move.b	chn_note(a5),d0
00200E76 D040                       		add.w	d0,d0
00200E78 45F9 0000 0000              		lea	(FreqList_FM),a2
00200E7E 3832 0000                  		move.w	(a2,d0.w),d4
00200E82 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00200E86 6000 0000                  		bra	SMEG_SetFreqFM
00200E8A                            @Disabled:
00200E8A 4E75                       		rts
00200E8C                            
00200E8C                            ; -------------------------------
00200E8C                            ; Play PCM
00200E8C                            ; -------------------------------
00200E8C                            
00200E8C                            @ChannelPlay_PCM:	
00200E8C                            ; 		if MCD
00200E8C                            ; 		
00200E8C                            ; 		tst.l	SongPcmSamp(a6)
00200E8C                            ; 		beq.s	@ReturnPCM
00200E8C                            ; 		bmi.s	@ReturnPCM
00200E8C                            ; 		
00200E8C                            ;  		moveq	#0,d1
00200E8C                            ;  		move.b	Chn_ID(a5),d1
00200E8C                            ;    		and.w	#$F,d1
00200E8C                            ;  		move.b	d1,($A12000+CommDataM)
00200E8C                            ;  		move.b	Chn_Pan(a5),d1
00200E8C                            ;  		move.b	d1,($A12000+CommDataM+1)
00200E8C                            ;  		moveq	#CdTask_SetPan,d0
00200E8C                            ;  		bsr	SMEG_CD_Call
00200E8C                            ;  		
00200E8C                            ; 		moveq	#0,d1
00200E8C                            ; 		move.b	Chn_ID(a5),d1
00200E8C                            ; 		and.b	#$F,d1
00200E8C                            ; 		move.b	d1,($A12000+CommDataM)
00200E8C                            ; 		move.w	Chn_Freq(a5),($A12000+CommDataM+2)
00200E8C                            ; 		moveq	#CdTask_SetFreq,d0
00200E8C                            ; 		bsr	SMEG_CD_Call
00200E8C                            ; 		bset	d1,PcmChnOnOff(a6)
00200E8C                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
00200E8C                            ; 		moveq	#CdTask_SetOnOff,d0
00200E8C                            ; 		bsr	SMEG_CD_Call
00200E8C                            ; 		
00200E8C                            ; @ReturnPCM:
00200E8C                            ;  		elseif MARS
00200E8C                            ; 
00200E8C                            ; 		tst.l	SongPcmSamp(a6)
00200E8C                            ; 		beq.s	@ReturnPCM
00200E8C                            ; 		bmi.s	@ReturnPCM
00200E8C                            ; 		
00200E8C                            ;   		moveq	#0,d1
00200E8C                            ;   		moveq	#0,d2
00200E8C                            ;        		move.b	Chn_ID(a5),d1
00200E8C                            ;      		and.w	#$F,d1
00200E8C                            ;       		or.b	Chn_Pan(a5),d1
00200E8C                            ;       		move.b	Chn_Note(a5),d2
00200E8C                            ;   		move.b	d1,(marsreg+comm2)			; Pan+Channel set
00200E8C                            ;   		move.b	d2,(marsreg+comm2+1)			; Note
00200E8C                            ;   		moveq 	#marscall_Play,d0
00200E8C                            ;   		bsr	SMEG_MARS_Call
00200E8C                            ; @ReturnPCM:
00200E8C                            ;  		endif
00200E8C                             		
00200E8C 4E75                       		rts
00200E8E                            
00200E8E                            ; --------------------------
00200E8E                            ; Set FM Frequency
00200E8E                            ; autodetected channel
00200E8E                            ; 
00200E8E                            ; d4 - Freq
00200E8E                            ; --------------------------
00200E8E                            
00200E8E                            SMEG_SetFreqFM:
00200E8E 7A00                       		moveq	#0,d5
00200E90 1A2D 0007                  		move.b	Chn_ID(a5),d5
00200E94 0C05 0004                  		cmp.b	#4,d5
00200E98 6D00                       		blt.s	@FirstFM
00200E9A 0405 0004                  		sub.b	#4,d5
00200E9E                            @FirstFM:
00200E9E 303C 00A4                  		move.w	#$A4,d0
00200EA2 D005                       		add.b	d5,d0
00200EA4 7200                       		moveq	#0,d1
00200EA6 E15C                       		rol.w	#8,d4
00200EA8 1204                       		move.b	d4,d1
00200EAA                            		
00200EAA 6100 0000                  		bsr	SMEG_Z80_Off
00200EAE 6100 0000                  		bsr	SMEG_FM_FindWrite
00200EB2 303C 00A0                  		move.w	#$A0,d0
00200EB6 D005                       		add.b	d5,d0
00200EB8 7200                       		moveq	#0,d1
00200EBA E15C                       		rol.w	#8,d4
00200EBC 1204                       		move.b	d4,d1
00200EBE 6100 0000                  		bsr	SMEG_FM_FindWrite
00200EC2                            
00200EC2 7028                       		moveq	#$28,d0
00200EC4 7200                       		moveq	#0,d1
00200EC6 122D 000D                  		move.b	Chn_FM_Key(a5),d1
00200ECA 822D 0007                  		or.b	Chn_ID(a5),d1
00200ECE 6100 0000                  		bsr	FM_RegWrite_1
00200ED2 6000 0000                  		bra	SMEG_Z80_On
00200ED6                            		
00200ED6                            ; Turn Total Level (the volume) off 
00200ED6                            
00200ED6                            SMEG_FM_TotLvlOff:
00200ED6 162D 0007                   		move.b	chn_id(a5),d3
00200EDA 0243 0003                   		and.w	#%11,d3
00200EDE 203C 4C44 4840             		move.l	#$4C444840,d0
00200EE4 323C 007F                  		move.w	#$7F,d1
00200EE8 6100 0000                   		bsr	SMEG_Z80_OFF
00200EEC 8003                        		or.b	d3,d0
00200EEE 6100 0000                   		bsr	SMEG_FM_FindWrite	;oops.
00200EF2 E088                        		lsr.l	#8,d0
00200EF4 8003                        		or.b	d3,d0
00200EF6 6100 0000                    		bsr	SMEG_FM_FindWrite
00200EFA E088                        		lsr.l	#8,d0
00200EFC 8003                        		or.b	d3,d0
00200EFE 6100 0000                    		bsr	SMEG_FM_FindWrite
00200F02 E088                        		lsr.l	#8,d0
00200F04 8003                        		or.b	d3,d0
00200F06 6100 0000                   		bsr	SMEG_FM_FindWrite
00200F0A 6100 0000                   		bsr	SMEG_Z80_On
00200F0E                             		
00200F0E                            ; Turn FM Keys off
00200F0E                            
00200F0E                            SMEG_FM_KeysOff:
00200F0E 7028                       		moveq	#$28,d0
00200F10 7200                       		moveq	#0,d1
00200F12 D22D 0007                  		add.b	Chn_ID(a5),d1
00200F16 6100 0000                   		bsr	SMEG_Z80_Off
00200F1A 6100 0000                  		bsr	FM_RegWrite_1
00200F1E 6000 0000                  		bra	SMEG_Z80_On
00200F22                            		
00200F22                            ; ----------------------------
00200F22                            ; PSG Channels
00200F22                            ; ----------------------------
00200F22                            
00200F22                            Chnl_PSG:
00200F22 122D 0007                  		move.b	Chn_ID(a5),d1
00200F26 0C2D 00E0 0007             		cmp.b	#NOISE,Chn_ID(a5)
00200F2C 6700                       		beq.s	Chnl_Noise
00200F2E                            
00200F2E 3601                       		move.w	d1,d3
00200F30 0043 001F                  		or.w	#$1F,d3
00200F34 102D 000B                  		move.b	chn_note(a5),d0
00200F38 0C00 00FE                  		cmp.b	#-2,d0
00200F3C 6700                       		beq.s	ChnPsg_Rest
00200F3E 0C00 00FF                  		cmp.b	#-1,d0
00200F42 6700                       		beq.s	ChnPsg_Rest
00200F44                            		
00200F44 45F9 0000 0000             		lea	(FreqList_PSG),a2
00200F4A D040                       		add.w	d0,d0
00200F4C 3032 0000                  		move.w	(a2,d0.w),d0
00200F50 3B40 0004                  		move.w	d0,Chn_Portam(a5)
00200F54 6100 0000                  		bsr	ChnPsg_NoteFreq
00200F58                            		
00200F58                            ChnPsg_SetVol:
00200F58 0043 0010                  		or.w	#$10,d3
00200F5C 0043 000F                  		or.w	#$F,d3
00200F60 4A2D 0009                  		tst.b	chn_vol(a5)
00200F64 6700                       		beq.s	ChnPsg_DoVol
00200F66 0243 00F0                  		and.w	#$F0,d3
00200F6A 0C2D 0040 0009             		cmp.b	#64,chn_vol(a5)
00200F70 6C00                         		bge.s	ChnPsg_DoVol
00200F72 7000                         		moveq	#0,d0
00200F74 102D 0009                     		move.b	chn_vol(a5),d0
00200F78 4440                        		neg.w	d0
00200F7A E448                          		lsr.w	#2,d0
00200F7C 0240 000F                    		and.w	#%1111,d0
00200F80 8640                         		or.w	d0,d3
00200F82                            
00200F82                            
00200F82                            ChnPsg_DoVol:
00200F82 13C3 00C0 0011              		move.b	d3,(sound_psg)
00200F88                            Chnl_Return:
00200F88 4E75                       		rts
00200F8A                            		
00200F8A                            ChnPsg_Rest:
00200F8A 61F6                        		bsr.s	ChnPsg_DoVol
00200F8C                            ; 		btst 	#bitPriority,(a6)
00200F8C                            ; 		bne.s	Chnl_Return
00200F8C                            ; 		bsr	SMEG_FindPrioSlot
00200F8C                            ;   		bclr	#0,(a3)
00200F8C 4E75                         		rts
00200F8E                              		
00200F8E                            ; ----------------------------
00200F8E                            ; PSG Noise channel
00200F8E                            ; ----------------------------
00200F8E                            
00200F8E                            Chnl_NOISE:
00200F8E 246E 0010                  		movea.l	snd_instr(a6),a2
00200F92 302A 0004                  		move.w	instDNoise(a2),d0
00200F96 D4C0                       		adda	d0,a2
00200F98                            		
00200F98 303C 0000                   		move.w	#%000,d0
00200F9C                            @next:
00200F9C 4A52                       		tst.w	(a2)
00200F9E 6B00                       		bmi.s	@default
00200FA0 7400                       		moveq	#0,d2
00200FA2 142D 0008                  		move.b	chn_inst(a5),d2
00200FA6 B452                       		cmp.w	(a2),d2
00200FA8 6700                       		beq.s	@found
00200FAA D4FC 0004                  		adda	#4,a2
00200FAE 60EC                       		bra.s	@next
00200FB0                            @found:
00200FB0 302A 0002                   		move.w	2(a2),d0
00200FB4                            
00200FB4                            @default:
00200FB4 323C 00E0                  		move.w	#$E0,d1
00200FB8 3601                       		move.w	d1,d3
00200FBA 0043 001F                  		or.w	#$1F,d3
00200FBE                            
00200FBE 142D 000B                  		move.b	chn_note(a5),d2
00200FC2 0C02 00FF                  		cmp.b	#-1,d2
00200FC6 67C2                       		beq.s	ChnPsg_Rest
00200FC8 0C02 00FE                  		cmp.b	#-2,d2
00200FCC 67BC                       		beq.s	ChnPsg_Rest
00200FCE                            		
00200FCE 08AE 0002 0001             		bclr	#bitTone3,snd_flags(a6)
00200FD4 0C40 0003                  		cmp.w	#%011,d0
00200FD8 6700                       		beq.s	@valdnoise
00200FDA 0C40 0007                  		cmp.w	#%111,d0
00200FDE 6600                       		bne.s	@deftone
00200FE0                            @valdnoise:
00200FE0 08EE 0002 0001             		bset	#bitTone3,snd_flags(a6)
00200FE6 13FC 00DF 00C0 0011        		move.b	#$C0|$1F,(sound_psg)
00200FEE 8240                       		or.w	d0,d1
00200FF0 13C1 00C0 0011             		move.b	d1,(sound_psg)
00200FF6                            		
00200FF6 102D 000B                  		move.b	chn_note(a5),d0
00200FFA 0C00 00FF                  		cmp.b	#-1,d0
00200FFE 6700 FF8A                  		beq	ChnPsg_Rest
00201002 0C00 00FE                  		cmp.b	#-2,d0
00201006 6700 FF82                  		beq	ChnPsg_Rest
0020100A 0640 000C                  		add.w	#12,d0		; TODO: checar
0020100E 323C 00C0                  		move.w	#$C0,d1		; PSG3 freq
00201012                            		
00201012 45F9 0000 0000             		lea	(FreqList_PSG),a2
00201018 D040                       		add.w	d0,d0
0020101A 3032 0000                  		move.w	(a2,d0.w),d0
0020101E 3B40 0004                  		move.w	d0,Chn_Portam(a5)
00201022 6000 0000                  		bra	ChnPsg_NoteFreq
00201026                            		
00201026                            ; 		move.w	#$E0,d3		; NOISE volume
00201026                            ; 		bra	ChnPsg_SetVol
00201026                            		
00201026                            @deftone:
00201026 3601                       		move.w	d1,d3
00201028 3400                       		move.w	d0,d2
0020102A 0242 0007                  		and.w	#%111,d2
0020102E 8242                       		or.w	d2,d1
00201030 13C1 00C0 0011             		move.b	d1,(sound_psg)
00201036 4E75                       		rts
00201038                            		
00201038                            ; 		move.w	#$E0,d3
00201038                            ; 		bra	ChnPsg_SetVol
00201038                            		
00201038                            ; ----------------------------
00201038                            ; PSG Noise channel Tone 3
00201038                            ; 
00201038                            ; input:
00201038                            ; d0 - freq
00201038                            ; d1 - channel
00201038                            ; 
00201038                            ; returns:
00201038                            ; d3 - last psg freq | channel
00201038                            ; ----------------------------
00201038                            
00201038                            ChnPsg_NoteFreq:
00201038 3601                       		move.w	d1,d3
0020103A 3400                       		move.w	d0,d2
0020103C 0242 000F                  		and.w	#%1111,d2
00201040 8242                       		or.w	d2,d1
00201042 13C1 00C0 0011             		move.b	d1,(sound_psg)
00201048 E848                       		lsr.w	#4,d0
0020104A 0240 003F                  		and.w	#%00111111,d0
0020104E 13C0 00C0 0011             		move.b	d0,(sound_psg)
00201054 4E75                       		rts
00201056                            
00201056                            ; -------------------------------
00201056                            ; PSG Frequencies
00201056                            ; -------------------------------
00201056                            
00201056                            FreqList_PSG:
00201056 0000                       		dc.w 0		;C-0 $0
00201058 0000                       		dc.w 0
0020105A 0000                       		dc.w 0
0020105C 0000                       		dc.w 0
0020105E 0000                       		dc.w 0
00201060 0000                       		dc.w 0
00201062 0000                       		dc.w 0
00201064 0000                       		dc.w 0
00201066 0000                       		dc.w 0
00201068 0000                       		dc.w 0
0020106A 0000                       		dc.w 0
0020106C 0000                       		dc.w 0
0020106E                            		
0020106E 0000                       		dc.w 0		;C-1 $C
00201070 0000                       		dc.w 0
00201072 0000                       		dc.w 0
00201074 0000                       		dc.w 0
00201076 0000                       		dc.w 0
00201078 0000                       		dc.w 0
0020107A 0000                       		dc.w 0
0020107C 0000                       		dc.w 0
0020107E 0000                       		dc.w 0
00201080 0000                       		dc.w 0
00201082 0000                       		dc.w 0
00201084 0000                       		dc.w 0
00201086                            		
00201086 0000                       		dc.w 0		;C-2 $18
00201088 0000                       		dc.w 0
0020108A 0000                       		dc.w 0
0020108C 0000                       		dc.w 0
0020108E 0000                       		dc.w 0
00201090 0000                       		dc.w 0
00201092 0000                       		dc.w 0
00201094 0000                       		dc.w 0
00201096 0000                       		dc.w 0
00201098 0000                       		dc.w 0
0020109A 0000                       		dc.w 0
0020109C 0000                       		dc.w 0
0020109E                            
0020109E 0000                       		dc.w 0		;C-3 $24
002010A0 0000                       		dc.w 0
002010A2 0000                       		dc.w 0
002010A4 0000                       		dc.w 0
002010A6 0000                       		dc.w 0
002010A8 0000                       		dc.w 0
002010AA 0000                       		dc.w 0
002010AC 0000                       		dc.w 0
002010AE 0000                       		dc.w 0
002010B0 03F8                       		dc.w $3F8
002010B2 03BF                                       dc.w $3BF
002010B4 0389                                       dc.w $389
002010B6                                            
002010B6 0356                       		dc.w $356	;C-4 $30
002010B8 0326                                       dc.w $326
002010BA 02F9                                       dc.w $2F9
002010BC 02CE                                       dc.w $2CE
002010BE 02A5                                       dc.w $2A5
002010C0 0280                                       dc.w $280
002010C2 025C                                       dc.w $25C
002010C4 023A                                       dc.w $23A
002010C6 021A                                       dc.w $21A
002010C8 01FB                       		dc.w $1FB
002010CA 01DF                                       dc.w $1DF
002010CC 01C4                                       dc.w $1C4
002010CE                                            
002010CE 01AB                                       dc.w $1AB	;C-5 $3C
002010D0 0193                                       dc.w $193
002010D2 017D                                       dc.w $17D
002010D4 0167                                       dc.w $167
002010D6 0153                                       dc.w $153
002010D8 0140                                       dc.w $140
002010DA 012E                       		dc.w $12E
002010DC 011D                                       dc.w $11D
002010DE 010D                                       dc.w $10D
002010E0 00FE                                       dc.w $FE
002010E2 00EF                                       dc.w $EF
002010E4 00E2                                       dc.w $E2
002010E6                                            
002010E6 00D6                                       dc.w $D6	;C-6 $48
002010E8 00C9                                       dc.w $C9
002010EA 00BE                                       dc.w $BE
002010EC 00B4                                       dc.w $B4
002010EE 00A9                       		dc.w $A9
002010F0 00A0                                       dc.w $A0
002010F2 0097                                       dc.w $97
002010F4 008F                                       dc.w $8F
002010F6 0087                                       dc.w $87
002010F8 007F                                       dc.w $7F
002010FA 0078                                       dc.w $78
002010FC 0071                                       dc.w $71
002010FE                                            
002010FE 006B                                       dc.w $6B	;C-7 $54
00201100 0065                                       dc.w $65
00201102 005F                       		dc.w $5F
00201104 005A                                       dc.w $5A
00201106 0055                                       dc.w $55
00201108 0050                                       dc.w $50
0020110A 004B                                       dc.w $4B
0020110C 0047                                       dc.w $47
0020110E 0043                                       dc.w $43
00201110 0040                                       dc.w $40
00201112 003C                                       dc.w $3C
00201114 0039                                       dc.w $39
00201116                                            
00201116 0036                       		dc.w $36	;C-8 $60
00201118 0033                                       dc.w $33
0020111A 0030                                       dc.w $30
0020111C 002D                                       dc.w $2D
0020111E 002B                                       dc.w $2B
00201120 0028                                       dc.w $28
00201122 0026                                       dc.w $26
00201124 0024                                       dc.w $24
00201126 0022                                       dc.w $22
00201128 0020                                       dc.w $20
0020112A 001F                       		dc.w $1F
0020112C 001D                                       dc.w $1D
0020112E                                            
0020112E 001B                                       dc.w $1B	;C-9 $6C
00201130 001A                                       dc.w $1A
00201132 0018                                       dc.w $18
00201134 0017                                       dc.w $17
00201136 0016                                       dc.w $16
00201138 0015                                       dc.w $15
0020113A 0013                                       dc.w $13
0020113C 0012                                       dc.w $12
0020113E 0011                       		dc.w $11
00201140 0010                        		dc.w $10 ;Custom...
00201142 0009                        		dc.w $9
00201144 0008                        		dc.w $8
00201146                            
00201146                            		even
00201146                            		
00201146                            ; -------------------------------
00201146                            ; FM Frequencies
00201146                            ; -------------------------------
00201146                            
00201146                            FreqList_FM:
00201146                            ; 		dc.w $269	;NULL
00201146 028D                       		dc.w $28d	;C-0 $00
00201148 02B4                       		dc.w $2b4
0020114A 02DD                       		dc.w $2dd
0020114C 0309                       		dc.w $309
0020114E 0337                       		dc.w $337
00201150 0368                       		dc.w $368
00201152 039C                       		dc.w $39c
00201154 03D3                       		dc.w $3d3
00201156 040D                       		dc.w $40d
00201158 044B                       		dc.w $44b
0020115A 048C                       		dc.w $48c
0020115C 0269                       		dc.w $269
0020115E 028D                       		dc.w $28d	;C-1 $0C
00201160 02B4                       		dc.w $2b4
00201162 02DD                       		dc.w $2dd
00201164 0309                       		dc.w $309
00201166 0337                       		dc.w $337
00201168 0368                       		dc.w $368
0020116A 039C                       		dc.w $39c
0020116C 03D3                       		dc.w $3d3
0020116E 040D                       		dc.w $40d
00201170 044B                       		dc.w $44b
00201172 048C                       		dc.w $48c
00201174 0A69                       		dc.w $a69
00201176 0A8D                       		dc.w $a8d	;C-2 $18
00201178 0AB4                       		dc.w $ab4
0020117A 0ADD                       		dc.w $add
0020117C 0B09                       		dc.w $b09
0020117E 0B37                       		dc.w $b37
00201180 0B68                       		dc.w $b68
00201182 0B9C                       		dc.w $b9c
00201184 0BD3                       		dc.w $bd3
00201186 0C0D                       		dc.w $c0d
00201188 0C4B                       		dc.w $c4b
0020118A 0C8C                       		dc.w $c8c
0020118C 1269                       		dc.w $1269
0020118E 128D                       		dc.w $128d	;C-3 $24
00201190 12B4                       		dc.w $12b4
00201192 12DD                       		dc.w $12dd
00201194 1309                       		dc.w $1309
00201196 1337                       		dc.w $1337
00201198 1368                       		dc.w $1368
0020119A 139C                       		dc.w $139c
0020119C 13D3                       		dc.w $13d3
0020119E 140D                       		dc.w $140d
002011A0 144B                       		dc.w $144b
002011A2 148C                       		dc.w $148c
002011A4 1A69                       		dc.w $1a69
002011A6 1A8D                       		dc.w $1a8d	;C-4 $30
002011A8 1AB4                       		dc.w $1ab4
002011AA 1ADD                       		dc.w $1add
002011AC 1B09                       		dc.w $1b09
002011AE 1B37                       		dc.w $1b37
002011B0 1B68                       		dc.w $1b68
002011B2 1B9C                       		dc.w $1b9c
002011B4 1BD3                       		dc.w $1bd3
002011B6 1C0D                       		dc.w $1c0d
002011B8 1C4B                       		dc.w $1c4b
002011BA 1C8C                       		dc.w $1c8c
002011BC 2269                       		dc.w $2269
002011BE 228D                       		dc.w $228d	;C-5 $3C
002011C0 22B4                       		dc.w $22b4
002011C2 22DD                       		dc.w $22dd
002011C4 2309                       		dc.w $2309
002011C6 2337                       		dc.w $2337
002011C8 2368                       		dc.w $2368
002011CA 239C                       		dc.w $239c
002011CC 23D3                       		dc.w $23d3
002011CE 240D                       		dc.w $240d
002011D0 244B                       		dc.w $244b
002011D2 248C                       		dc.w $248c
002011D4 2A69                       		dc.w $2a69
002011D6 2A8D                       		dc.w $2a8d	;C-6 $48
002011D8 2AB4                       		dc.w $2ab4
002011DA 2ADD                       		dc.w $2add
002011DC 2B09                       		dc.w $2b09
002011DE 2B37                       		dc.w $2b37
002011E0 2B68                       		dc.w $2b68
002011E2 2B9C                       		dc.w $2b9c
002011E4 2BD3                       		dc.w $2bd3
002011E6 2C0D                       		dc.w $2c0d
002011E8 2C4B                       		dc.w $2c4b
002011EA 2C8C                       		dc.w $2c8c
002011EC 3269                       		dc.w $3269	;C-7 $54
002011EE 328D                       		dc.w $328d
002011F0 32B4                       		dc.w $32b4
002011F2 32DD                       		dc.w $32dd
002011F4 3309                       		dc.w $3309
002011F6 3337                       		dc.w $3337
002011F8 3368                       		dc.w $3368
002011FA 339C                       		dc.w $339c
002011FC 33D3                       		dc.w $33d3
002011FE 340D                       		dc.w $340d
00201200 344B                       		dc.w $344b
00201202 348C                       		dc.w $348c
00201204                            		even
00201204                            		
00201204                            ; ; -------------------------------
00201204                            ; ; Mute/Rest channel
00201204                            ; ; -------------------------------
00201204                            ; 
00201204                            ; SMEG_ChannelRest:
00201204                            ; 		cmp.b	#$FF,Chn_ID(a5)
00201204                            ; 		beq	@Return
00201204                            ; 		
00201204                            ; ; 		btst	#bitPriority,(a6)
00201204                            ; ; 		beq.s	@SFX_Mode
00201204                            ; ; 		btst	#bitSfxOn,(RAM_SMEG_SfxBuff)
00201204                            ; ; 		beq.s	@SFX_Mode
00201204                            ; ;  		lea	(RAM_SMEG_PrioList),a3
00201204                            ; ;  		moveq	#0,d1
00201204                            ; ;  		move.b	LastPattChn(a6),d1
00201204                            ; ; 		btst	#0,(a3,d1.w)
00201204                            ; ; 		bne	@Return
00201204                            ; ; @SFX_Mode:
00201204                            ; 
00201204                            ; 		tst.b	Chn_ID(a5)
00201204                            ; 		bmi.s	@PSG_Rest
00201204                            ; 
00201204                            ;                 cmp.b	#6,Chn_ID(a5)
00201204                            ;                 bne.s	@NoChk6
00201204                            ; 		btst	#bitFmDac,snd_flags(a6)
00201204                            ; 		bne.s	@DAC_Rest
00201204                            ; 
00201204                            ; @NoChk6:
00201204                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
00201204                            ; 		bge	@PCM_Rest
00201204                            ; 		
00201204                            ; 		moveq	#$28,d0
00201204                            ;                 moveq	#0,d1
00201204                            ; 		move.b	Chn_ID(a5),d1
00201204                            ; 		bsr	SMEG_Z80_Off
00201204                            ; 		bsr	FM_RegWrite_1
00201204                            ; 		bsr	SMEG_Z80_On
00201204                            ; 
00201204                            ; @Return:
00201204                            ; 		rts
00201204                            ; 
00201204                            ; ; -------------------------------
00201204                            ; ; PSG Rest
00201204                            ; ; -------------------------------
00201204                            ; 
00201204                            ; @PSG_Rest:
00201204                            ; 		moveq	#0,d0
00201204                            ; 		move.b	Chn_ID(a5),d0
00201204                            ; 		add.b	#$1F,d0
00201204                            ; 		move.b	d0,($C00011)
00201204                            ; 
00201204                            ; @Disabled:
00201204                            ; 		rts
00201204                            ; 
00201204                            ; ; -------------------------------
00201204                            ; ; DAC Rest
00201204                            ; ; -------------------------------
00201204                            ; 
00201204                            ; @DAC_Rest:
00201204                            ;   		bsr	SMEG_Z80_Off
00201204                            ; 		moveq	#$2B,d0
00201204                            ;                 moveq	#0,d1
00201204                            ;   		bsr	FM_RegWrite_1
00201204                            ; 
00201204                            ; 		moveq	#0,d0
00201204                            ; 		move.b	d0,($A001E0+$D)
00201204                            ; 		bsr	SMEG_Z80_On
00201204                            ; 		rts
00201204                            ; 
00201204                            ; ; -------------------------------
00201204                            ; ; PCM Rest
00201204                            ; ; -------------------------------
00201204                            ; 
00201204                            ; @PCM_Rest:
00201204                            ;  		if MCD
00201204                            ;  		
00201204                            ; 		tst.l	SongPcmSamp(a6)
00201204                            ; 		beq.s	@ReturnPCM
00201204                            ; 		bmi.s	@ReturnPCM
00201204                            ; 		
00201204                            ; 		moveq	#0,d1
00201204                            ; 		move.b	Chn_ID(a5),d1
00201204                            ; 		and.b	#$F,d1
00201204                            ; 		bclr	d1,PcmChnOnOff(a6)
00201204                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
00201204                            ; 		moveq	#CdTask_SetOnOff,d0
00201204                            ; 		bsr	SMEG_CD_Call
00201204                            ; 		
00201204                            ;  		elseif MARS
00201204                            ;  		
00201204                            ; 		tst.l	SongPcmSamp(a6)
00201204                            ; 		beq.s	@ReturnPCM
00201204                            ; 		bmi.s	@ReturnPCM
00201204                            ; 		
00201204                            ;   		moveq	#0,d0
00201204                            ;   		move.b	Chn_ID(a5),d0
00201204                            ;   		and.w	#$F,d0
00201204                            ;   		move.b	d0,(marsreg+comm2)
00201204                            ;   		moveq	#marscall_Stop,d0
00201204                            ;   		bsr	SMEG_MARS_Call
00201204                            ;     		
00201204                            ; 		endif
00201204                            ; @ReturnPCM:
00201204                            ; 		rts
00201204                            		
00201204                            ; ================================================================
00201204                            ; Subs
00201204                            ; ================================================================
00201204                            
00201204                            ; -------------------------------------------
00201204                            ; Extra channels communication
00201204                            ; -------------------------------------------
00201204                            
00201204                            SMEG_CD_Call:
00201204                            ; 		bra	SubCpu_Task_Wait
00201204 4E75                       		rts
00201206                            
00201206                            SMEG_MARS_Call:
00201206 4E75                        		rts
00201208                             		
00201208                            ; -------------------------------------------
00201208                            ; Set instrument
00201208                            ; -------------------------------------------
00201208                            
00201208                            SMEG_SetVoice:
00201208 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
0020120E 6700 0000                  		beq	@Return
00201212                            		
00201212 0816 0000                  		btst	#bitPriority,(a6)
00201216 6600                       		bne.s	@SFX_ModeV
00201218 6100 0000                  		bsr	SMEG_FindPrioSlot
0020121C 4A13                         		tst.b	(a3)
0020121E 6600 0000                    		bne	@Return
00201222                            @SFX_ModeV:
00201222                            
00201222                            
00201222 4AAE 0010                  		tst.l	snd_instr(a6)
00201226 6700 0000                  		beq	@Return
0020122A                            		
0020122A 4A2D 0007                  		tst.b	Chn_ID(a5)
0020122E 6B00                       		bmi.s	@Return
00201230 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00201236 6C00 0000                  		bge	SMEG_SetVoice_PCM
0020123A 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
00201240 6700 0000                  		beq	SMEG_SetVoice_DAC
00201244                            		
00201244 6000 0000                   		bra	SetVoice_FM
00201248                            @Return:
00201248 4E75                        		rts
0020124A                            		
0020124A                            ; -------------------------------------------
0020124A                            ; Send DAC
0020124A                            ; -------------------------------------------
0020124A                            
0020124A                            SMEG_SetVoice_DAC:
0020124A 6100 0000                  		bsr	ChnlFM_srchIns
0020124E 0C42 FFFF                  		cmp.w	#-1,d2
00201252 6700                       		beq.s	@Return
00201254                            		
00201254 0802 0007                   		btst	#7,d2
00201258 6600                        		bne.s	@Sample_Mode
0020125A 08AE 0000 0001             		bclr	#bitFmDac,snd_flags(a6)
00201260 6000 0000                  		bra	SetVoice_FM
00201264                             		
00201264                            @Sample_Mode:
00201264 08EE 0000 0001             		bset	#bitFmDac,snd_flags(a6)
0020126A 202B 0004                  		move.l	4(a3),d0
0020126E 222B 0008                  		move.l	8(a3),d1
00201272 0481 0000 0001             		sub.l	#1,d1
00201278 242B 000C                  		move.l	$C(a3),d2
0020127C 7600                       		moveq	#0,d3
0020127E 162D 000B                  		move.b	chn_note(a5),d3
00201282 D66B 0002                   		add.w	2(a3),d3
00201286 6000 0000                   		bra	Audio_Sample_Set
0020128A                            @Return:
0020128A 4E75                       		rts
0020128C                            		
0020128C                            ; -------------------------------------------
0020128C                            ; Send FM
0020128C                            ; -------------------------------------------
0020128C                            
0020128C                            SetVoice_FM:
0020128C 6100 0000                  		bsr	ChnlFM_srchIns
00201290 08AE 0003 0001             		bclr	#bitSpecial3,snd_flags(a6)
00201296 0C42 FFFF                  		cmp.w	#-1,d2
0020129A 6700 0000                  		beq	@Return
0020129E 0802 0007                   		btst	#7,d2
002012A2 6600 0000                   		bne	@Return
002012A6 0802 0006                   		btst	#6,d2
002012AA 6700                        		beq.s	@notFM3
002012AC 08EE 0003 0001              		bset	#bitSpecial3,snd_flags(a6)
002012B2                            @notFM3:
002012B2                            
002012B2                            ;  		adda.w	#4,a3
002012B2 266B 0004                  		movea.l	4(a3),a3
002012B6 7000                       		moveq	#0,d0
002012B8 102D 0007                  		move.b	Chn_ID(a5),d0
002012BC 0C00 0004                  		cmp.b	#4,d0
002012C0 6D00                       		blt.s	@Low3
002012C2 0400 0004                  		sub.b	#4,d0
002012C6                            @Low3:
002012C6                            
002012C6 4840                       		swap	d0
002012C8 303C 0028                  		move.w	#$28,d0
002012CC 7200                       		moveq	#0,d1
002012CE 122D 0007                  		move.b	Chn_ID(a5),d1
002012D2 6100 0000                  		bsr	SMEG_Z80_Off
002012D6 6100 0000                  		bsr	FM_RegWrite_1
002012DA 4840                       		swap	d0
002012DC                            
002012DC 45FA 0000                  		lea	SMEG_FM_RegList(pc),a2
002012E0 3C00                       		move.w	d0,d6
002012E2 7818                       		moveq	#$18,d4
002012E4                            @Next:
002012E4 3A06                       		move.w	d6,d5
002012E6 101A                       		move.b	(a2)+,d0
002012E8 3600                       		move.w	d0,d3
002012EA D045                       		add.w	d5,d0
002012EC 121B                       		move.b	(a3)+,d1
002012EE                            
002012EE 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
002012F4 6C00                       		bge.s	@Chn456
002012F6 6100 0000                  		bsr	FM_RegWrite_1
002012FA 51CC FFE8                  		dbf	d4,@Next
002012FE 6000                       		bra.s	@BackZ80
00201300                            
00201300                            @Chn456:
00201300 6100 0000                  		bsr	FM_RegWrite_2
00201304 51CC FFDE                  		dbf	d4,@Next
00201308                            @BackZ80:
00201308 6100 0000                  		bsr	SMEG_Z80_On
0020130C                            @Return:
0020130C 4E75                       		rts
0020130E                            
0020130E                            ; -------------------------------------------
0020130E                            ; Set FM panning
0020130E                            ; -------------------------------------------
0020130E                            
0020130E                            SMEG_FM_SetPan:
0020130E 4A2D 0007                  		tst.b	Chn_ID(a5)
00201312 6B00 0000                  		bmi	@Return
00201316                            		
00201316 7200                       		moveq	#0,d1
00201318 122D 000C                    		move.b	chn_pan(a5),d1
0020131C EC49                         		lsr.w	#6,d1
0020131E 0241 0003                    		and.w	#%11,d1
00201322 123B 1000                    		move.b	@list(pc,d1.w),d1
00201326 0241 00C0                    		and.w	#%11000000,d1
0020132A 303C 00B4                    		move.w	#$B4,d0
0020132E 142D 0007                    		move.b	chn_id(a5),d2
00201332 0242 0003                    		and.w	#%11,d2
00201336 8042                         		or.w	d2,d0
00201338 6000 0000                   		bra	SMEG_FM_FindWrite
0020133C                            		
0020133C 8080 C040                  @list:		dc.b $80,$80,$C0,$40
00201340                            		even
00201340                            		
00201340                            		
00201340 303C 00B4                  		move.w	#$B4,d0
00201344 7400                       		moveq	#0,d2
00201346 142D 0007                  		move.b	Chn_ID(a5),d2
0020134A 7200                       		moveq	#0,d1
0020134C 122D 000C                  		move.b	Chn_Pan(a5),d1
00201350                            
00201350 6100 0000                  		bsr	SMEG_Z80_Off
00201354 0C02 0003                  		cmp.b	#3,d2
00201358 6E00                       		bgt.s	@SecondFM
0020135A D042                       		add.w	d2,d0
0020135C 6100 0000                  		bsr	FM_RegWrite_1
00201360 6000                       		bra.s	@BackZ80
00201362                            @SecondFM:
00201362 0442 0004                  		sub.w	#4,d2
00201366 D042                       		add.w	d2,d0
00201368 6100 0000                  		bsr	FM_RegWrite_2
0020136C                            @BackZ80:
0020136C 6100 0000                  		bsr	SMEG_Z80_On
00201370                            @Return:
00201370 4E75                       		rts
00201372                            
00201372                            ; ---------------------
00201372                            
00201372                            ChnlFM_srchIns:
00201372 266E 0010                  		movea.l	snd_instr(a6),a3
00201376 302B 0000                   		move.w	instDYmha(a3),d0
0020137A D6C0                        		adda	d0,a3
0020137C                            @next:
0020137C 4841                       		swap	d1
0020137E 4A53                       		tst.w	(a3)
00201380 6B00 0000                   		bmi	@NoteOff
00201384 7000                        		moveq	#0,d0
00201386 102D 0008                  		move.b	chn_inst(a5),d0
0020138A 3213                       		move.w	(a3),d1
0020138C 3401                       		move.w	d1,d2
0020138E 0241 003F                  		and.w	#$3F,d1
00201392 B041                       		cmp.w	d1,d0
00201394 6700                       		beq.s	@found
00201396 D6FC 0008                  		adda	#8,a3		;inst,oct,firstlong
0020139A 0802 0007                  		btst	#7,d2
0020139E 6600                       		bne.s	@doit
002013A0 0802 0006                  		btst	#6,d2
002013A4 67D6                       		beq.s	@next
002013A6                            @doit:
002013A6 D6FC 0008                  		adda	#8,a3		;scndlong,thrdlong
002013AA 60D0                       		bra.s	@next
002013AC                            @NoteOff:
002013AC 4841                       		swap	d1
002013AE 74FF                       		moveq	#-1,d2
002013B0                            @found:
002013B0 4E75                       		rts
002013B2                            		
002013B2                            ; --------------------------------------------
002013B2                            ; Play a sample
002013B2                            ;
002013B2                            ; Input:
002013B2                            ; d0 | LONG - Start
002013B2                            ; d1 | LONG - End
002013B2                            ; d2 | LONG - Loop point
002013B2                            ;              0 = From start
002013B2                            ;             -1 = No loop
002013B2                            ; d3 | WORD - Note ($3C - default)
002013B2                            ; --------------------------------------------
002013B2                            
002013B2                            Audio_Sample_Set:
002013B2 6100 0000                  		bsr	SMEG_Z80_Off
002013B6                            		
002013B6 41F9 00A0 0180             		lea	($A00180),a0
002013BC E198                       		rol.l	#8,d0
002013BE 10C0                       		move.b	d0,(a0)+
002013C0 E198                       		rol.l	#8,d0
002013C2 10C0                       		move.b	d0,(a0)+		
002013C4 E198                       		rol.l	#8,d0
002013C6 10C0                       		move.b	d0,(a0)+
002013C8 E198                       		rol.l	#8,d0
002013CA 10C0                       		move.b	d0,(a0)+
002013CC                            		
002013CC 0481 0000 0001              		sub.l	#1,d1
002013D2 E199                       		rol.l	#8,d1
002013D4 10C1                       		move.b	d1,(a0)+
002013D6 E199                       		rol.l	#8,d1
002013D8 10C1                       		move.b	d1,(a0)+		
002013DA E199                       		rol.l	#8,d1
002013DC 10C1                       		move.b	d1,(a0)+
002013DE E199                       		rol.l	#8,d1
002013E0 10C1                       		move.b	d1,(a0)+
002013E2                            		
002013E2 7200                       		moveq	#0,d1
002013E4 2800                       		move.l	d0,d4
002013E6 0C82 FFFF FFFF             		cmp.l	#-1,d2
002013EC 6700                       		beq.s	@no_loop
002013EE 7202                       		moveq	#2,d1
002013F0 2800                       		move.l	d0,d4
002013F2 D882                       		add.l	d2,d4
002013F4                            @no_loop:
002013F4 E19C                       		rol.l	#8,d4
002013F6 10C4                       		move.b	d4,(a0)+
002013F8 E19C                       		rol.l	#8,d4
002013FA 10C4                       		move.b	d4,(a0)+		
002013FC E19C                       		rol.l	#8,d4
002013FE 10C4                       		move.b	d4,(a0)+
00201400 E19C                       		rol.l	#8,d4
00201402 10C4                       		move.b	d4,(a0)+
00201404                            
00201404 1081                       		move.b	d1,(a0)
00201406                            		
00201406 3003                       		move.w	d3,d0
00201408 6000 0000                  		bra	AudioSmplNote_go
0020140C                            
0020140C                            ; --------------------------------------------
0020140C                            ; Stop the current sample
0020140C                            ; --------------------------------------------
0020140C                            
0020140C                            Audio_Sample_Play:
0020140C 6100 0000                  		bsr	SMEG_Z80_Off
00201410                            		
00201410 1039 00A0 018C             		move.b	($A0018C).l,d0
00201416 08C0 0000                  		bset	#0,d0
0020141A 13C0 00A0 018C             		move.b	d0,($A0018C).l
00201420                             		
00201420 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00201428 4E75                       		rts
0020142A                            		
0020142A                            ; --------------------------------------------
0020142A                            ; Stop the current sample
0020142A                            ; --------------------------------------------
0020142A                            
0020142A                            Audio_Sample_Stop:
0020142A 6100 0000                  		bsr	SMEG_Z80_Off
0020142E                            		
0020142E 13FC 0040 00A0 018C        		move.b	#$40,($A0018C).l
00201436                             		
00201436 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0020143E 4E75                       		rts
00201440                            		
00201440                            ; --------------------------------------------
00201440                            ; Modify sample note
00201440                            ;
00201440                            ; d3 | WORD - Note
00201440                            ; --------------------------------------------
00201440                            
00201440                            Audio_Sample_Note:
00201440 6100 0000                  		bsr	SMEG_Z80_Off
00201444                            		
00201444                            AudioSmplNote_go:
00201444                            ; 		sub.w	#24,d0			; skip 2 octaves
00201444 ED48                       		lsl.w	#6,d0
00201446 0640 01C0                   		add.w	#$1C0,d0
0020144A 13C0 00A0 00DC             		move.b	d0,($A000DC)		; ld bc,(NEW ADDRESS)
00201450 E048                       		lsr.w	#8,d0			;
00201452 13C0 00A0 00DD              		move.b	d0,($A000DD)		;
00201458                             		
00201458 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00201460 4E75                       		rts
00201462                            
00201462                            ; -------------------------------------------
00201462                            ; Send PCM/PWM
00201462                            ; -------------------------------------------
00201462                            
00201462                            SMEG_SetVoice_PCM:
00201462                               		
00201462 7200                       		moveq	#0,d1
00201464 7400                          		moveq	#0,d2
00201466 4AAE 0014                  		tst.l	SongPcmSamp(a6)
0020146A 6700                       		beq.s	@FinishList
0020146C 6B00                       		bmi.s	@FinishList
0020146E 266E 0014                  		movea.l	SongPcmSamp(a6),a3
00201472 122D 0008                  		move.b	Chn_Inst(a5),d1
00201476                            @NextPcm:
00201476 4A53                       		tst.w	(a3)
00201478 6B00                       		bmi.s	@GiveUp
0020147A 1413                       		move.b	(a3),d2
0020147C B401                       		cmp.b	d1,d2
0020147E 6700                       		beq.s	@FoundPcm
00201480 D6FC 0002                  		adda	#2,a3
00201484 60F0                       		bra.s	@NextPcm
00201486                            @FoundPcm:
00201486 7200                       		moveq	#0,d1
00201488 122B 0001                  		move.b	1(a3),d1
0020148C                            @GiveUp:
0020148C 0441 0001                  		sub.w	#1,d1
00201490 E549                       		lsl.w	#2,d1
00201492 47F9 FFFF F1AE             		lea	(RAM_SMEG_PcmList),a3
00201498 D6C1                       		adda	d1,a3
0020149A                               		
0020149A 1B6B 0001 000E             		move.b	1(a3),Chn_PCM_Pitch(a5)
002014A0 13ED 0007 00A1 2010        		move.b	Chn_ID(a5),($A12000+CommDataM)
002014A8 13D3 00A1 2011             		move.b	(a3),($A12000+CommDataM+1)
002014AE 33EB 0002 00A1 2012        		move.w	2(a3),($A12000+CommDataM+2)
002014B6 7021                       		moveq	#CdTask_SetAddr,d0
002014B8 6100 FD4A                  		bsr	SMEG_CD_Call
002014BC                            
002014BC                            ; ---------------------------------
002014BC                            
002014BC                            @FinishList:
002014BC 4E75                       		rts
002014BE                            		
002014BE                            ; -------------------------------------------
002014BE                            ; Reset FM
002014BE                            ; -------------------------------------------
002014BE                            
002014BE                            SMEG_FM_Reset:
002014BE 6100 0000                  		bsr	SMEG_Z80_Off
002014C2                            
002014C2 7028                       		moveq	#$28,d0
002014C4 7200                       		moveq	#0,d1
002014C6 6100 0000                  		bsr	FM_RegWrite_1
002014CA 7028                       		moveq	#$28,d0
002014CC 7201                       		moveq	#1,d1
002014CE 6100 0000                  		bsr	FM_RegWrite_1
002014D2 7028                       		moveq	#$28,d0
002014D4 7202                       		moveq	#2,d1
002014D6 6100 0000                  		bsr	FM_RegWrite_1
002014DA 7028                       		moveq	#$28,d0
002014DC 7204                       		moveq	#4,d1
002014DE 6100 0000                  		bsr	FM_RegWrite_1
002014E2 7028                       		moveq	#$28,d0
002014E4 7205                       		moveq	#5,d1
002014E6 6100 0000                  		bsr	FM_RegWrite_1
002014EA 7028                       		moveq	#$28,d0
002014EC 7206                       		moveq	#6,d1
002014EE 6100 0000                  		bsr	FM_RegWrite_1
002014F2                            
002014F2 6000 0000                  		bra	SMEG_Z80_On
002014F6                            
002014F6                            ; -------------------------------------------
002014F6                            ; Find FM
002014F6                            ; -------------------------------------------
002014F6                            
002014F6                            SMEG_FM_FindWrite:
002014F6 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
002014FC 6C00                       		bge.s	@Second
002014FE 6000 0000                  		bra	FM_RegWrite_1
00201502                            @Second:
00201502 6000 0000                  		bra	FM_RegWrite_2
00201506                            
00201506                            ; -------------------------------------------
00201506                            ; Write to FM register
00201506                            ; -------------------------------------------
00201506                            
00201506                            FM_RegWrite_1:
00201506 1439 00A0 4000             		move.b	($A04000).l,d2
0020150C 0802 0007                  		btst	#7,d2
00201510 66F4                       		bne.s	FM_RegWrite_1
00201512 13C0 00A0 4000             		move.b	d0,($A04000).l
00201518                            @Loop:
00201518 1439 00A0 4000             		move.b	($A04000).l,d2
0020151E 0802 0007                  		btst	#7,d2
00201522 66F4                       		bne.s	@Loop
00201524 13C1 00A0 4001             		move.b	d1,($A04001).l
0020152A 4E75                       		rts
0020152C                            
0020152C                            FM_RegWrite_2:
0020152C 1439 00A0 4000             		move.b	($A04000).l,d2
00201532 0802 0007                  		btst	#7,d2
00201536 66F4                       		bne.s	FM_RegWrite_2
00201538 13C0 00A0 4002             		move.b	d0,($A04002).l
0020153E                            @Loop:
0020153E 1439 00A0 4000             		move.b	($A04000).l,d2
00201544 0802 0007                  		btst	#7,d2
00201548 66F4                       		bne.s	@Loop
0020154A 13C1 00A0 4003             		move.b	d1,($A04003).l
00201550 4E75                       		rts
00201552                            		
00201552                            SMEG_Z80_Off:
00201552 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0020155A                            @WaitZ80;\@:
0020155A 0839 0000 00A1 1100        		btst	#0,($A11100).l
00201562 66F6                       		bne.s	@WaitZ80;\@
00201564 4E75                       		rts
00201566                            		
00201566                            ; USES d2
00201566                            
00201566                            SMEG_Z80_On:
00201566 1439 00A0 018C             		move.b	($A0018C),d2
0020156C 0802 0007                  		btst	#7,d2
00201570 6700                       		beq.s	@stopped;\@
00201572                            @busywait;\@:
00201572 1439 00A0 4000             		move.b	($A04000).l,d2
00201578 0802 0007                  		btst	#7,d2
0020157C 66F4                       		bne.s	@busywait;\@
0020157E 13FC 002A 00A0 4000        		move.b	#$2A,(sound_ym_1)
00201586 1439 00A0 018F             		move.b	($A0018F),d2
0020158C 13C2 00A0 4001             		move.b	d2,(sound_ym_2)
00201592                            @stopped;\@:
00201592 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0020159A 4E75                       		rts
0020159C                            		
0020159C                            ; -----------------------
0020159C                            ; Setup channels
0020159C                            ; -----------------------
0020159C                            
0020159C                            SMEG_Load_SetChnls:
0020159C 286E 0004                  		movea.l	SongRequest(a6),a4				;a4 - Music data
002015A0 3D6E 0018 001C             		move.w	TicksRequest(a6),TicksSet(a6)
002015A6                            
002015A6                            ; -----------------------
002015A6                            ; Get the
002015A6                            ; PatternEnd/PatternLoop
002015A6                            ; numbers
002015A6                            ; -----------------------
002015A6                            
002015A6 1D5C 0002                  		move.b	(a4)+,PatternEnd(a6)
002015AA 1D5C 0003                  		move.b	(a4)+,PatternLoop(a6)
002015AE                            		
002015AE                            ; -----------------------
002015AE                            ; Get instruments
002015AE                            ; -----------------------
002015AE                            
002015AE 2D5C 0008                  		move.l	(a4)+,SongStart(a6)
002015B2 2D5C 0010                  		move.l	(a4)+,snd_instr(a6)
002015B6                            
002015B6                            ; -----------------------
002015B6                            ; Setup the channel IDs
002015B6                            ; -----------------------
002015B6                            
002015B6 303C 0011                  		move.w	#max_chnl-1,d0
002015BA 341C                       		move.w	(a4)+,d2
002015BC 0442 0001                  		sub.w	#1,d2
002015C0                            @SetId:
002015C0 1B7C 0001 0006             		move.b	#1,Chn_Type(a5)
002015C6 1B7C 00FF 0007             		move.b	#-1,Chn_ID(a5)
002015CC 4A42                       		tst.w	d2
002015CE 6B00                       		bmi.s	@Disabled
002015D0 0442 0001                  		sub.w	#1,d2
002015D4 1B5C 0007                  		move.b	(a4)+,Chn_ID(a5)
002015D8 1B5C 0009                   		move.b	(a4)+,Chn_Vol(a5)
002015DC 1B5C 000C                   		move.b	(a4)+,Chn_Pan(a5)
002015E0 161C                        		move.b	(a4)+,d3
002015E2 4A2D 0007                   		tst.b	chn_id(a5)
002015E6 6B00                        		bmi.s	@is_psg
002015E8 0C2D 0010 0007              		cmp.b	#PCM_1,chn_id(a5)
002015EE 6C00                        		bge.s	@is_pcm
002015F0                             		
002015F0 E94B                        		lsl.w	#4,d3
002015F2 1B43 000D                   		move.b	d3,Chn_FM_Key(a5)
002015F6 6000                       		bra.s	@Disabled
002015F8                            @is_pcm:
002015F8 4E71                       		nop 
002015FA 6000                       		bra.s	@Disabled
002015FC                            		
002015FC                            @is_psg:
002015FC 122D 0007                  		move.b	Chn_ID(a5),d1
00201600 0001 001F                  		or.b	#$1F,d1
00201604 13C1 00C0 0011             		move.b	d1,(sound_psg)
0020160A                             		
0020160A                            @Disabled:
0020160A DAFC 0010                  		adda 	#sizeof_Chn,a5
0020160E 51C8 FFB0                  		dbf	d0,@SetId
00201612                             		
00201612                            ; ; -----------------------
00201612                            ; ; Master volumes
00201612                            ; ; -----------------------
00201612                            ; 
00201612                            ; 		moveq	#(max_chnl)-1,d0
00201612                            ; @SetVol:
00201612                            ; 		move.b	(a4)+,Chn_MainVol(a5)
00201612                            ; 		adda 	#sizeof_Chn,a5
00201612                            ; 		dbf	d0,@SetVol
00201612                            
00201612                            ; -----------------------
00201612                            ; last steps
00201612                            ; -----------------------
00201612                            
00201612 286E 0008                  		movea.l	SongStart(a6),a4
00201616 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
0020161A 1D5C 0020                  		move.b	(a4)+,PattSize(a6)
0020161E 426E 0022                  		clr.w	pattr_read(a6)
00201622 D8FC 0006                  		adda	#6,a4
00201626 2D4C 000C                  		move.l	a4,SongRead(a6)
0020162A 4E75                       		rts
0020162C                            		
0020162C                            ; -----------------------
0020162C                            ; Search used slot
0020162C                            ; 
0020162C                            ; Uses d3
0020162C                            ; -----------------------
0020162C                            
0020162C                            SMEG_FindPrioSlot:
0020162C 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
00201632                            ;  		inform 0,"%h",RAM_SMEG_PrioList
00201632                             		
00201632 7600                        		moveq	#0,d3
00201634 162D 0007                   		move.b	Chn_ID(a5),d3
00201638 0803 0007                   		btst	#7,d3
0020163C 6600                        		bne.s	@PSG_slots
0020163E 0C03 0010                   		cmp.b	#PCM_1,d3
00201642 6C00                        		bge.s	@PCM_Slots
00201644 0C03 0004                   		cmp.b	#4,d3
00201648 6D00                        		blt.s	@leftFM
0020164A 0443 0001                   		sub.w	#1,d3
0020164E                            @leftFM:
0020164E 6000                       		bra.s	@set_slot
00201650                            
00201650                            @PSG_slots:
00201650 EA4B                       		lsr.w	#5,d3
00201652 0243 0003                  		and.w	#%11,d3
00201656 0643 0006                  		add.w	#6,d3
0020165A 6000                       		bra.s	@set_slot
0020165C                            
0020165C                            @PCM_Slots:
0020165C 0443 0010                  		sub.w	#PCM_1,d3
00201660                            @set_slot:
00201660 D6C3                       		add.w	d3,a3
00201662 4E75                       		rts
00201664                            		
00201664                            ; -----------------------
00201664                            ; Turn off the unused
00201664                            ; channels
00201664                            ; -----------------------
00201664                            
00201664                            SMEG_Load_FixSfx:
00201664 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
0020166A                             		
0020166A                            ; FM Check
0020166A                            
0020166A 7605                        		moveq	#6-1,d3
0020166C 7028                        		moveq	#$28,d0
0020166E 7200                        		moveq	#0,d1
00201670                            @chknextfm1:
00201670 4A13                       		tst.b	(a3)
00201672 6700                       		beq.s	@off_fm
00201674 4213                       		clr.b	(a3)
00201676                            		
00201676 0C01 0006                  		cmp.b	#6,d1
0020167A 6600                       		bne.s	@notdac
0020167C 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
00201682 6700                       		beq.s	@notdac
00201684                            		
00201684 6100 FDA4                  		bsr	Audio_Sample_Stop
00201688 6000                       		bra.s	@off_fm
0020168A                            		
0020168A                            @notdac:
0020168A 6100 FEC6                  		bsr	SMEG_Z80_Off
0020168E 6100 FE76                  		bsr	FM_RegWrite_1
00201692 6100 FED2                  		bsr	SMEG_Z80_On
00201696                            @off_fm:
00201696 D6FC 0001                  		adda 	#1,a3
0020169A                            
0020169A 0641 0001                  		add.w	#1,d1
0020169E 0C41 0003                  		cmp.w	#3,d1
002016A2 6600                       		bne.s	@nope
002016A4 0641 0001                  		add.w	#1,d1
002016A8                            @nope:
002016A8 51CB FFC6                  		dbf	d3,@chknextfm1
002016AC                            		
002016AC                            ; PSG check
002016AC                            
002016AC 323C 009F                  		move.w	#$9F,d1
002016B0 303C 0003                  		move.w	#4-1,d0
002016B4                            @chknextpsg:
002016B4 4A13                       		tst.b	(a3)
002016B6 6700                       		beq.s	@off_psg
002016B8 4213                       		clr.b	(a3)
002016BA 13C1 00C0 0011             		move.b	d1,(sound_psg)
002016C0                            @off_psg:
002016C0 D6FC 0001                  		adda	#1,a3
002016C4 0641 0020                  		add.w	#$20,d1
002016C8 51C8 FFEA                  		dbf	d0,@chknextpsg
002016CC                            		
002016CC                            ; TODO: PCM check
002016CC                            
002016CC                            ; 		lea	(RAM_SMEG_Chnls_BGM),a5
002016CC                            ; 		moveq	#(max_chnl)-1,d4
002016CC                            ; @SetId:
002016CC                            ; 		move.b	#$80,Chn_Pan(a5)
002016CC                            ; 
002016CC                            ; 		tst.b	Chn_ID(a5)
002016CC                            ; 		bmi.s	@NotFM
002016CC                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
002016CC                            ; 		bge.s	@NotFM
002016CC                            ; 
002016CC                            ; 		clr.b	Chn_FM_Key(a5)
002016CC                            ; 		move.b	#%00001111,Chn_FM_Key(a5)
002016CC                            ; 		move.b	#$C0,Chn_Pan(a5)
002016CC                            ; 		bsr	SMEG_FM_SetPan
002016CC                            ; @NotFM:
002016CC                            ; 		adda 	#sizeof_Chn,a5
002016CC                            ; 		dbf	d4,@SetId
002016CC                            		
002016CC                            ; 		bsr	SMEG_Z80_Off
002016CC                            ; 		moveq	#$2B,d0
002016CC                            ;                 moveq	#0,d1
002016CC                            ;   		bsr	FM_RegWrite_1
002016CC                            ;   		
002016CC                            ; 		moveq	#0,d0
002016CC                            ; 		move.b	d0,($A001E0+$D)
002016CC                            ; 		bsr	SMEG_Z80_On
002016CC                            		
002016CC 4E75                       		rts
002016CE                            		
002016CE                            ; -----------------------
002016CE                            ; Exclusive features
002016CE                            ;
002016CE                            ; TODO: creo que es
002016CE                            ; mala idea hacer esperar
002016CE                            ; al VBlank ya que moví
002016CE                            ; la rutina esta
002016CE                            ; -----------------------
002016CE                            
002016CE                            SMEG_Load_SetExtChnls:
002016CE                            
002016CE 7026                        		moveq	#CdTask_ClearAllPcm,d0
002016D0 6100 FB32                   		bsr	SMEG_CD_Call
002016D4                            		
002016D4 4DF9 FFFF EF00              		lea	(RAM_SMEG_Buffer),a6
002016DA 4AAE 0014                   		tst.l	SongPcmSamp(a6)
002016DE 6700 0000                   		beq	@Return
002016E2 6B00 0000                   		bmi	@Return
002016E6                             		
002016E6 2A6E 0014                   		movea.l	SongPcmSamp(a6),a5
002016EA 7200                        		moveq	#0,d1
002016EC 47F9 FFFF F1AE              		lea	(RAM_SMEG_PcmList),a3
002016F2                            @NextSamp:
002016F2 4A55                        		tst.w	(a5)
002016F4 6B00                        		bmi.s	@Finish
002016F6 1681                        		move.b	d1,(a3)				;ST Address
002016F8                            
002016F8 302D 000E                   		move.w	$E(a5),d0
002016FC 0240 00FF                   		and.w	#$FF,d0
00201700 1740 0001                   		move.b	d0,1(a3)
00201704 23D5 00A1 2010              		move.l	(a5),($A12000+CommDataM)	;\
0020170A 23ED 0004 00A1 2014         		move.l	4(a5),($A12000+CommDataM+4)	; > Filename
00201712 23ED 0008 00A1 2018         		move.l	8(a5),($A12000+CommDataM+8)	;/
0020171A 33FC 0000 00A1 201C          		move.w	#0,($A12000+CommDataM+$C)
00201722 13C1 00A1 201D              		move.b	d1,($A12000+CommDataM+$D)	;Bank to use
00201728 7020                        		moveq	#CdTask_LoadPcm,d0
0020172A 6100 FAD8                    		bsr	SMEG_CD_Call
0020172E                              		
0020172E 7400                         		moveq	#0,d2
00201730 7600                         		moveq	#0,d3
00201732 3439 00A1 2022              		move.w	($A12000+CommDataS+2),d2
00201738 0C6D FFFF 000C              		cmp.w	#$FFFF,$C(a5)
0020173E 6700                        		beq.s	@NotLoop
00201740 342D 000C                   		move.w	$C(a5),d2
00201744                            @NotLoop:
00201744                            ; 		move.b	d1,d3
00201744                            ; 		and.w	#$7F,d3
00201744                            ; 		lsl.w	#8,d3
00201744                            ; 		lsl.w	#4,d3
00201744                            ; 		add.w 	d3,d2
00201744                            		
00201744 3742 0002                   		move.w	d2,2(a3)			;Loop address
00201748 1239 00A1 2020              		move.b	($A12000+CommDataS),d1		;Next ST
0020174E                             		
0020174E DAFC 0010                   		adda	#$10,a5
00201752 D6FC 0004                   		adda	#4,a3
00201756 609A                        		bra.s	@NextSamp
00201758                            @Finish:
00201758 DAFC 0002                   		adda	#2,a5
0020175C 2D4D 0014                   		move.l	a5,SongPcmSamp(a6)		;Second list
00201760                            		
00201760                            ; -----------------------
00201760                            
00201760                            		
00201760                            @Return:
00201760 4E75                       		rts
00201762                            		
00201762                            ; -------------------------------------------
00201762                            ; Reset PSG
00201762                            ; -------------------------------------------
00201762                            
00201762                            SMEG_PSG_Reset:
00201762 13FC 009F 00C0 0011        		move.b	#$9F,($C00011).l
0020176A 13FC 00BF 00C0 0011        		move.b	#$BF,($C00011).l
00201772 13FC 00DF 00C0 0011        		move.b	#$DF,($C00011).l
0020177A 13FC 00FF 00C0 0011        		move.b	#$FF,($C00011).l
00201782 4E75                       		rts
00201784                            
00201784                            ; -------------------------------------------
00201784                            ; Reset PCM
00201784                            ; -------------------------------------------
00201784                            
00201784                            SMEG_PCM_Reset:
00201784 4AAE 0014                  		tst.l	SongPcmSamp(a6)
00201788 6700                       		beq.s	@NoResetPCM
0020178A 6B00 0000                  		bmi	@NoResetPCM
0020178E                            		
0020178E                            		
0020178E 422E 0027                  		clr.b	PcmChnOnOff(a6)
00201792 13EE 0027 00A1 2010        		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
0020179A 7025                       		moveq	#CdTask_SetOnOff,d0
0020179C 6000 FA66                  		bra	SMEG_CD_Call
002017A0                            		
002017A0                            
002017A0                            @NoResetPCM:
002017A0 4E75                       		rts
002017A2                            
002017A2                            ; ================================================================
002017A2                            ; -------------------------------------------------
002017A2                            ; Data
002017A2                            ; -------------------------------------------------
002017A2                            
002017A2                            ; -------------------------------
002017A2                            ; FM Register list
002017A2                            ; -------------------------------
002017A2                            
002017A2                            SMEG_FM_RegList:
002017A2 B0                         		dc.b $B0
002017A3 3038 343C                  		dc.b $30,$38,$34,$3C
002017A7 5058 545C                  		dc.b $50,$58,$54,$5C
002017AB 6068 646C                  		dc.b $60,$68,$64,$6C
002017AF 7078 747C                  		dc.b $70,$78,$74,$7C
002017B3 8088 848C                  		dc.b $80,$88,$84,$8C
002017B7 4048 444C                  		dc.b $40,$48,$44,$4C
002017BC 00                         		even
002017BC                            	
002017BC                            ; -------------------------------
002017BC                            ; Z80 Driver
002017BC                            ; -------------------------------
002017BC                            
002017BC                            Z80_Driver:	incbin	"system/sound/z80/main.bin"
002028BC                            Z80_DriverEnd:
002028BC                            		even
002028BC                            		
002028BC                            ; ---------------------------------------------------
002028BC                            ; ---------------------------------------------------
002028BC                            		include	"system/misc.asm"
002028BC                            ; ====================================================================
002028BC                            ; System
002028BC                            ; ====================================================================
002028BC                            
002028BC                            ; ====================================================================
002028BC                            ; -------------------------------------------------
002028BC                            ; RAM
002028BC                            ; -------------------------------------------------
002028BC                            
002028BC                                            rsset	RAM_System
002028BC =FFFFDE00                  RAM_HintJumpTo	rs.w	1				; DONT
002028BC =FFFFDE02                  RAM_HintAddr	rs.l	1				; SEPARATE
002028BC =FFFFDE06                  RAM_VIntJumpTo	rs.w	1				; THESE
002028BC =FFFFDE08                  RAM_VintAddr	rs.l	1				; ONES
002028BC =FFFFDE0C                  RAM_VIntRegs	rs.l	16
002028BC =FFFFDE4C                  RAM_ModeReset	rs.w	1
002028BC =FFFFDE4E                  RAM_IntFlags	rs.b	1
002028BC =FFFFDE4F                  RAM_GameMode	rs.b	1
002028BC                            
002028BC =FFFFDE50                  sizeof_sys	rs.l	0
002028BC                            ; 		inform 0,"system ram: %h",(sizeof_sys-RAM_System)
002028BC                             				
002028BC                            ; ====================================================================
002028BC                            ; -------------------------------------------------
002028BC                            ; Variables
002028BC                            ; -------------------------------------------------
002028BC                            
002028BC                            ; --------------------------------------------
002028BC                            				
002028BC                            ; ====================================================================
002028BC                            ; -------------------------------------------------
002028BC                            ; Macros
002028BC                            ; -------------------------------------------------
002028BC                            
002028BC                            ; --------------------------------------------
002028BC                            
002028BC                            ; ====================================================================
002028BC                            ; -------------------------------------------------
002028BC                            ; Subs
002028BC                            ; -------------------------------------------------
002028BC                            
002028BC                            System_init:
002028BC 41F9 FFFF BC00             		lea	(RAM_ModeBuffer),a0
002028C2 303C 0BFF                  		move.w	#($1800/2)-1,d0
002028C6                            @clear_buff:
002028C6 4258                       		clr.w	(a0)+
002028C8 51C8 FFFC                  		dbf	d0,@clear_buff
002028CC                            		
002028CC 23FC 0000 0000 FFFF DE08   		move.l	#MD_Vint,(RAM_VIntAddr)
002028D6 23FC 0000 0000 FFFF DE02   		move.l	#MD_Hint,(RAM_HIntAddr)
002028E0 303C 4EF9                  		move.w	#$4EF9,d0
002028E4 33C0 FFFF DE06              		move.w	d0,(RAM_VIntJumpTo)
002028EA 33C0 FFFF DE00             		move.w	d0,(RAM_HIntJumpTo)
002028F0                            		
002028F0 4239 FFFF DE4F              		clr.b	(RAM_GameMode)
002028F6 4E75                       		rts
002028F8                            		
002028F8                            ; ---------------------------------------------
002028F8                            ; SRAM
002028F8                            ; ---------------------------------------------
002028F8                            
002028F8                            SRAM_Init:
002028F8 13FC 0003 00A1 30F1        		move.b	#%11,($A130F1)		;read+write
00202900 41F9 0020 0000             		lea	($200000),a0
00202906 0108 0001                  		movep.w	1(a0),d0
0020290A 0C80 0000 4745             		cmp.l	#"GE",d0
00202910 6700                       		beq.s	@exit
00202912 43FA 0000                  		lea	@SramHead(pc),a1
00202916 7006                       		moveq	#7-1,d0
00202918                            @header:
00202918 1019                       		move.b	(a1)+,d0
0020291A 1140 0001                  		move.b	d0,1(a0)
0020291E D0FC 0002                  		adda	#2,a0
00202922 51C8 FFF4                  		dbf	d0,@header
00202926                            @exit:
00202926 13FC 0000 00A1 30F1        		move.b	#0,($A130F1)
0020292E 4E75                       		rts
00202930                            
00202930                            ; ---------------------------------------------
00202930                            
00202930 4745 4E59 5341 5645 00     @SramHead:	dc.b "GENYSAVE",0
0020293A 00                         		even
0020293A                            		
0020293A                            ; ---------------------------------------------
0020293A                            ; CalcSine
0020293A                            ;
0020293A                            ; Input:
0020293A                            ; d0 | WORD
0020293A                            ;
0020293A                            ; Output:
0020293A                            ; d0 | WORD
0020293A                            ; d1 | WORD
0020293A                            ; ---------------------------------------------
0020293A                            
0020293A                            CalcSine:
0020293A 0240 00FF                  		and.w	#$FF,d0
0020293E D040                       		add.w	d0,d0
00202940 0640 0080                  		add.w	#$80,d0
00202944 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00202948 0440 0080                  		sub.w	#$80,d0
0020294C 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00202950 4E75                       		rts	
00202952                            
00202952                            Sine_Data:
00202952 0000 0006 000C 0012 0019+  		dc.w 0,	6, $C, $12, $19, $1F, $25, $2B,	$31, $38, $3E
00202968 0044 004A 0050 0056 005C+  		dc.w $44, $4A, $50, $56, $5C, $61, $67,	$6D, $73, $78
0020297C 007E 0083 0088 008E 0093+  		dc.w $7E, $83, $88, $8E, $93, $98, $9D,	$A2, $A7, $AB
00202990 00B0 00B5 00B9 00BD 00C1+  		dc.w $B0, $B5, $B9, $BD, $C1, $C5, $C9,	$CD, $D1, $D4
002029A4 00D8 00DB 00DE 00E1 00E4+  		dc.w $D8, $DB, $DE, $E1, $E4, $E7, $EA,	$EC, $EE, $F1
002029B8 00F3 00F4 00F6 00F8 00F9+  		dc.w $F3, $F4, $F6, $F8, $F9, $FB, $FC,	$FD, $FE, $FE
002029CC 00FF 00FF 00FF 0100 00FF+  		dc.w $FF, $FF, $FF, $100, $FF, $FF, $FF, $FE, $FE, $FD
002029E0 00FC 00FB 00F9 00F8 00F6+  		dc.w $FC, $FB, $F9, $F8, $F6, $F4, $F3,	$F1, $EE, $EC
002029F4 00EA 00E7 00E4 00E1 00DE+  		dc.w $EA, $E7, $E4, $E1, $DE, $DB, $D8,	$D4, $D1, $CD
00202A08 00C9 00C5 00C1 00BD 00B9+  		dc.w $C9, $C5, $C1, $BD, $B9, $B5, $B0,	$AB, $A7, $A2
00202A1C 009D 0098 0093 008E 0088+  		dc.w $9D, $98, $93, $8E, $88, $83, $7E,	$78, $73, $6D
00202A30 0067 0061 005C 0056 0050+  		dc.w $67, $61, $5C, $56, $50, $4A, $44,	$3E, $38, $31
00202A44 002B 0025 001F 0019 0012+  		dc.w $2B, $25, $1F, $19, $12, $C, 6, 0,	-6, -$C, -$12
00202A5A FFE7 FFE1 FFDB FFD5 FFCF+  		dc.w -$19, -$1F, -$25, -$2B, -$31, -$38, -$3E, -$44, -$4A
00202A6C FFB0 FFAA FFA4 FF9F FF99+  		dc.w -$50, -$56, -$5C, -$61, -$67, -$6D, -$75, -$78, -$7E
00202A7E FF7D FF78 FF72 FF6D FF68+  		dc.w -$83, -$88, -$8E, -$93, -$98, -$9D, -$A2, -$A7, -$AB
00202A90 FF50 FF4B FF47 FF43 FF3F+  		dc.w -$B0, -$B5, -$B9, -$BD, -$C1, -$C5, -$C9, -$CD, -$D1
00202AA2 FF2C FF28 FF25 FF22 FF1F+  		dc.w -$D4, -$D8, -$DB, -$DE, -$E1, -$E4, -$E7, -$EA, -$EC
00202AB4 FF12 FF0F FF0D FF0C FF0A+  		dc.w -$EE, -$F1, -$F3, -$F4, -$F6, -$F8, -$F9, -$FB, -$FC
00202AC6 FF03 FF02 FF02 FF01 FF01+  		dc.w -$FD, -$FE, -$FE, -$FF, -$FF, -$FF, -$100,	-$FF, -$FF
00202AD8 FF01 FF02 FF02 FF03 FF04+  		dc.w -$FF, -$FE, -$FE, -$FD, -$FC, -$FB, -$F9, -$F8, -$F6
00202AEA FF0C FF0D FF0F FF12 FF14+  		dc.w -$F4, -$F3, -$F1, -$EE, -$EC, -$EA, -$E7, -$E4, -$E1
00202AFC FF22 FF25 FF28 FF2C FF2F+  		dc.w -$DE, -$DB, -$D8, -$D4, -$D1, -$CD, -$C9, -$C5, -$C1
00202B0E FF43 FF47 FF4B FF50 FF55+  		dc.w -$BD, -$B9, -$B5, -$B0, -$AB, -$A7, -$A2, -$9D, -$98
00202B20 FF6D FF72 FF78 FF7D FF82+  		dc.w -$93, -$8E, -$88, -$83, -$7E, -$78, -$75, -$6D, -$67
00202B32 FF9F FFA4 FFAA FFB0 FFB6+  		dc.w -$61, -$5C, -$56, -$50, -$4A, -$44, -$3E, -$38, -$31
00202B44 FFD5 FFDB FFE1 FFE7 FFEE+  		dc.w -$2B, -$25, -$1F, -$19, -$12, -$C,	-6, 0, 6, $C, $12
00202B5A 0019 001F 0025 002B 0031+  		dc.w $19, $1F, $25, $2B, $31, $38, $3E,	$44, $4A, $50
00202B6E 0056 005C 0061 0067 006D+  		dc.w $56, $5C, $61, $67, $6D, $73, $78,	$7E, $83, $88
00202B82 008E 0093 0098 009D 00A2+  		dc.w $8E, $93, $98, $9D, $A2, $A7, $AB,	$B0, $B5, $B9
00202B96 00BD 00C1 00C5 00C9 00CD+  		dc.w $BD, $C1, $C5, $C9, $CD, $D1, $D4,	$D8, $DB, $DE
00202BAA 00E1 00E4 00E7 00EA 00EC+  		dc.w $E1, $E4, $E7, $EA, $EC, $EE, $F1,	$F3, $F4, $F6
00202BBE 00F8 00F9 00FB 00FC 00FD+  		dc.w $F8, $F9, $FB, $FC, $FD, $FE, $FE,	$FF, $FF, $FF
00202BD2                            		even
00202BD2                            	
00202BD2                            ; ---------------------------------------------
00202BD2                            ; HexToByte_Byte
00202BD2                            ; 
00202BD2                            ; Uses:
00202BD2                            ; d4-d5
00202BD2                            ; ---------------------------------------------
00202BD2                            
00202BD2                            ; HexToDec_Byte:
00202BD2                            ; 		move.w	d0,d4
00202BD2                            ; 		and.w	#$FF,d4
00202BD2                            ; 		clr.w	d0
00202BD2                            ; @hexloop:
00202BD2                            ; 		sub.w	#1,d4
00202BD2                            ; 		bcs.s	@finish
00202BD2                            ; 		add.w	#1,d0
00202BD2                            ; 		move.w	d0,d5
00202BD2                            ;  		and.w	#$F,d5
00202BD2                            ; 		cmp.w	#$A,d5
00202BD2                            ; 		bcs.s	@lowbyte1
00202BD2                            ; 		add.w	#6,d0
00202BD2                            ; @lowbyte1:
00202BD2                            ; 		move.w	d0,d5
00202BD2                            ;  		and.w	#$F0,d5
00202BD2                            ; 		cmp.w	#$A0,d5
00202BD2                            ; 		bcs.s	@lowbyte2
00202BD2                            ; 		add.w	#$60,d0
00202BD2                            ; @lowbyte2:
00202BD2                            ; 		bra.s	@hexloop
00202BD2                            ; @finish:
00202BD2                            ; 		rts
00202BD2                            
00202BD2                            ; ---------------------------
00202BD2                            ; Convert HEX to DEC
00202BD2                            ; MAX: 65535 ($FFFF)
00202BD2                            ; 
00202BD2                            ; input:
00202BD2                            ; d2
00202BD2                            ; 
00202BD2                            ; output:
00202BD2                            ; d2
00202BD2                            ; Uses:
00202BD2                            ; d4 WORD (swapped)
00202BD2                            ; d5 LONG
00202BD2                            ; ---------------------------
00202BD2                            
00202BD2                            HexToDec:
00202BD2 7A00                       		moveq	#0,d5
00202BD4 4844                       		swap	d4
00202BD6                            
00202BD6 4842                       		swap	d2
00202BD8 3802                       		move.w	d2,d4
00202BDA 4842                       		swap	d2
00202BDC 4A44                       		tst.w	d4
00202BDE 6700 0000                  		beq	@jumpy
00202BE2                            		
00202BE2 3802                       		move.w	d2,d4
00202BE4 E04C                       		lsr.w	#8,d4
00202BE6 0244 000F                  		and.w	#$F,d4
00202BEA D844                       		add.w	d4,d4
00202BEC 3A3B 4000                  		move.w	@grab256(pc,d4.w),d5
00202BF0 3802                       		move.w	d2,d4
00202BF2 E04C                       		lsr.w	#8,d4
00202BF4 E44C                       		lsr.w	#2,d4
00202BF6 0244 003C                  		and.w	#%111100,d4
00202BFA DABB 4000                  		add.l	@grab4096(pc,d4.w),d5
00202BFE 6100 0000                  		bsr	@fixhexdec
00202C02 4842                       		swap	d2
00202C04 3802                       		move.w	d2,d4
00202C06 4842                       		swap	d2
00202C08 E54C                       		lsl.w	#2,d4
00202C0A 0244 003C                  		and.w	#%111100,d4
00202C0E DABB 4000                  		add.l	@grab65536(pc,d4.w),d5
00202C12 6100 0000                  		bsr	@fixhexdec
00202C16 6000 0000                  		bra	@jumpy
00202C1A                            ; --------------------------------
00202C1A 0000                       @grab256:	dc.w 0
00202C1C 0256                       		dc.w $256
00202C1E 0512                       		dc.w $512
00202C20 0768                       		dc.w $768
00202C22 1024                       		dc.w $1024
00202C24 1280                       		dc.w $1280
00202C26 1536                       		dc.w $1536
00202C28 1792                       		dc.w $1792
00202C2A 2048                       		dc.w $2048
00202C2C 2304                       		dc.w $2304
00202C2E 2560                       		dc.w $2560
00202C30 2816                       		dc.w $2816
00202C32 3072                       		dc.w $3072
00202C34 3328                       		dc.w $3328
00202C36 3584                       		dc.w $3584
00202C38 3840                       		dc.w $3840
00202C3A                            		even
00202C3A 0000 0000                  @grab4096:	dc.l 0
00202C3E 0000 4096                  		dc.l $4096
00202C42 0000 8192                  		dc.l $8192
00202C46 0001 2288                  		dc.l $12288
00202C4A 0001 6384                  		dc.l $16384
00202C4E 0002 0480                  		dc.l $20480
00202C52 0002 4576                  		dc.l $24576
00202C56 0002 8672                  		dc.l $28672
00202C5A 0003 2768                  		dc.l $32768
00202C5E 0003 6864                  		dc.l $36864
00202C62 0004 0960                  		dc.l $40960
00202C66 0004 5056                  		dc.l $45056
00202C6A 0004 9152                  		dc.l $49152
00202C6E 0005 3248                  		dc.l $53248
00202C72 0005 7344                  		dc.l $57344
00202C76 0006 1440                  		dc.l $61440
00202C7A                            		even
00202C7A 0000 0000                  @grab65536: 	dc.l 0
00202C7E 0006 5536                  		dc.l $65536
00202C82 0013 1072                  		dc.l $131072
00202C86 0019 6608                  		dc.l $196608
00202C8A 0026 2144                  		dc.l $262144
00202C8E 0032 7680                  		dc.l $327680
00202C92 0039 3216                  		dc.l $393216
00202C96 0045 8752                  		dc.l $458752
00202C9A 0052 4288                  		dc.l $524288
00202C9E 0058 9824                  		dc.l $589824
00202CA2 0065 5360                  		dc.l $655360
00202CA6 0072 0896                  		dc.l $720896
00202CAA 0078 6432                  		dc.l $786432
00202CAE 0085 1968                  		dc.l $851968
00202CB2 0091 7504                  		dc.l $917504
00202CB6 0098 3040                  		dc.l $983040
00202CBA                            		even
00202CBA                            ; --------------------------------
00202CBA                            
00202CBA                            @jumpy:
00202CBA 0802 0007                  		btst	#7,d2
00202CBE 6700                       		beq.s	@not80
00202CC0 0685 0000 0128             		add.l	#$128,d5
00202CC6 6100 0000                  		bsr	@fixhexdec
00202CCA                            @not80:
00202CCA 0282 0000 007F             		and.l	#$7F,d2
00202CD0 4A82                       		tst.l	d2
00202CD2 6700                       		beq.s	@lowrend
00202CD4 0442 0001                  		sub.w	#1,d2
00202CD8                            @lelno:
00202CD8 0685 0000 0001             		add.l	#1,d5
00202CDE 6100 0000                  		bsr	@fixhexdec
00202CE2 51CA FFF4                  		dbf	d2,@lelno
00202CE6                            @lowrend:
00202CE6 2405                       		move.l	d5,d2
00202CE8 4844                       		swap	d4
00202CEA 4E75                       		rts
00202CEC                            
00202CEC                            ; --------------------------------
00202CEC                            
00202CEC                            @fixhexdec:
00202CEC 3805                       		move.w	d5,d4
00202CEE 0244 000F                  		and.w	#$F,d4
00202CF2 0C44 000A                  		cmp.w	#$A,d4
00202CF6 6D00                       		blt.s	@lowr1
00202CF8 0685 0000 0006             		add.l	#6,d5
00202CFE                            @lowr1:
00202CFE 3805                       		move.w	d5,d4
00202D00 0244 00F0                  		and.w	#$F0,d4
00202D04 0C44 00A0                  		cmp.w	#$A0,d4
00202D08 6D00                       		blt.s	@lowr2
00202D0A 0685 0000 0060             		add.l	#$60,d5
00202D10                            @lowr2:
00202D10 3805                       		move.w	d5,d4
00202D12 0244 0F00                  		and.w	#$F00,d4
00202D16 0C44 0A00                  		cmp.w	#$A00,d4
00202D1A 6D00                       		blt.s	@lowr3
00202D1C 0685 0000 0600             		add.l	#$600,d5
00202D22                            @lowr3:
00202D22 3805                       		move.w	d5,d4
00202D24 0244 F000                  		and.w	#$F000,d4
00202D28 0C44 A000                  		cmp.w	#$A000,d4
00202D2C 6500                       		bcs.s	@lowr4
00202D2E 0685 0000 6000             		add.l	#$6000,d5
00202D34                            @lowr4:
00202D34 4845                       		swap	d5
00202D36 3805                       		move.w	d5,d4
00202D38 0244 000F                  		and.w	#$F,d4
00202D3C 0C44 000A                  		cmp.w	#$A,d4
00202D40 6500                       		bcs.s	@lowr5
00202D42 0685 0000 0006             		add.l	#$6,d5
00202D48                            @lowr5:
00202D48 3805                       		move.w	d5,d4
00202D4A 0244 00F0                  		and.w	#$F0,d4
00202D4E 0C44 00A0                  		cmp.w	#$A0,d4
00202D52 6500                       		bcs.s	@lowr6
00202D54 0685 0000 0060             		add.l	#$60,d5
00202D5A                            @lowr6:
00202D5A 3805                       		move.w	d5,d4
00202D5C 0244 0F00                  		and.w	#$F00,d4
00202D60 0C44 0A00                  		cmp.w	#$A00,d4
00202D64 6500                       		bcs.s	@lowr7
00202D66 0685 0000 0600             		add.l	#$600,d5
00202D6C                            @lowr7:
00202D6C 4845                       		swap	d5
00202D6E 4E75                       		rts
00202D6E 4E75                       		rts
00202D70                            		include	"system/input/map.asm"
00202D70                            ; ====================================================================
00202D70                            ; Input
00202D70                            ; ====================================================================
00202D70                            
00202D70                            ; ====================================================================
00202D70                            ; -------------------------------------------------
00202D70                            ; Variables
00202D70                            ; -------------------------------------------------
00202D70                            
00202D70 =00000001                  JoyUp		equ	%00000001
00202D70 =00000002                  JoyDown		equ	%00000010
00202D70 =00000004                  JoyLeft		equ	%00000100
00202D70 =00000008                  JoyRight	equ	%00001000
00202D70 =00000010                  JoyB		equ	%00010000
00202D70 =00000020                  JoyC		equ	%00100000
00202D70 =00000040                  JoyA		equ	%01000000
00202D70 =00000080                  JoyStart	equ	%10000000
00202D70 =00000000                  bitJoyUp	equ	0
00202D70 =00000001                  bitJoyDown	equ	1
00202D70 =00000002                  bitJoyLeft	equ	2
00202D70 =00000003                  bitJoyRight	equ	3
00202D70 =00000004                  bitJoyB		equ	4
00202D70 =00000005                  bitJoyC		equ	5
00202D70 =00000006                  bitJoyA		equ	6
00202D70 =00000007                  bitJoyStart	equ	7
00202D70                            
00202D70 =00000001                  JoyZ		equ	%00000001
00202D70 =00000002                  JoyY		equ	%00000010
00202D70 =00000004                  JoyX		equ	%00000100
00202D70 =00000008                  JoyMode		equ	%00001000
00202D70 =00000000                  bitJoyZ		equ	0
00202D70 =00000001                  bitJoyY		equ	1
00202D70 =00000002                  bitJoyX		equ	2
00202D70 =00000003                  bitJoyMode	equ	3
00202D70                            
00202D70                            ; --------------------------------------------
00202D70                            
00202D70                            		rsreset
00202D70 =00000000                  CtrlID		rs.b	1
00202D70 =00000001                  PadType		rs.b	1		;only TRUE $01 or FALSE $00
00202D70 =00000002                  ExOnHold	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
00202D70 =00000003                  OnHold		rs.b	1		;SACBRLDU
00202D70 =00000004                  ExOnPress	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
00202D70 =00000005                  OnPress		rs.b	1		;SACBRLDU
00202D70 =00000006                  MouseX		rs.w	1		;TODO
00202D70 =00000008                  MouseY		rs.w	1
00202D70 =0000000A                  sizeof_control	rs.l	0
00202D70                            
00202D70                            ; ====================================================================
00202D70                            ; -------------------------------------------------
00202D70                            ; RAM
00202D70                            ; -------------------------------------------------
00202D70                            
00202D70                                            rsset	RAM_Input
00202D70 =FFFFDE80                  RAM_Control_1	rs.b sizeof_control
00202D70 =FFFFDE8A                  RAM_Control_2	rs.b sizeof_control
00202D70                            
00202D70                            ; --------------------------------------------
00202D70                            
00202D70 =FFFFDE94                  sizeof_input	rs.l	0
00202D70                            ; 		inform 0,"input ram: %h",(sizeof_input-RAM_Input)
00202D70                             				
00202D70                            ; ====================================================================
00202D70                            ; -------------------------------------------------
00202D70                            ; Macros
00202D70                            ; -------------------------------------------------
00202D70                            
00202D70                            ; --------------------------------------------
00202D70                            ; --------------------------------------------
00202D70                            		include	"system/hardware/mcd/m68k/comm/calls.asm"
00202D70                            ; =====================================================================
00202D70                            ; -------------------------------------------
00202D70                            ; Calls
00202D70                            ; -------------------------------------------
00202D70                            
00202D70                            			rsset $FFFF9800
00202D70 =FFFF9800                  MD_Hint			rs.w 3
00202D70 =FFFF9806                  MD_VInt			rs.w 3
00202D70 =FFFF980C                  SubCpu_Task_Wait	rs.w 3
00202D70 =FFFF9812                  SubCpu_Task		rs.w 3
00202D70 =FFFF9818                  SubCpu_Wait		rs.w 3
00202D70 =FFFF981E                  SubCpu_Wait_Flag	rs.w 3
00202D70 =FFFF9824                  Input_Read		rs.w 3
00202D70                            
00202D70                            
00202D70                            
00202D70                            		
00202D70                            ; ====================================================================
00202D70                            ; --------------------------------------------
00202D70                            ; Code
00202D70                            ; --------------------------------------------
00202D70                            
00202D70                            MD_Main:
00202D70                            		include	"engine/modes/level/md.asm"
00202D70                            ; ====================================================================
00202D70                            ; -------------------------------------------------
00202D70                            ; Level
00202D70                            ; 
00202D70                            ; CODE ONLY
00202D70                            ; -------------------------------------------------
00202D70                            
00202D70                            ; --------------------------------------------
00202D70                            ; RAM
00202D70                            ; --------------------------------------------
00202D70                            
00202D70                            		rsset RAM_ModeBuffer
00202D70                            ;Prize data: $FF0000-$FF87FF
00202D70 =FFFFBC00                  RAM_Level	rs.b $440
00202D70 =FFFFC040                  RAM_ObjectSys	rs.b $1B80
00202D70 =FFFFDBC0                  sizeof_lvl	rs.l 0
00202D70                            ;       		inform 0,"Level mode uses: %h",(sizeof_lvl-RAM_ModeBuffer)
00202D70                            		
00202D70                            ; --------------------------------------------
00202D70                            ; Init
00202D70                            ; --------------------------------------------
00202D70                            
00202D70                            mode_Level:
00202D82 46FC 2700                  		move.w	#$2700,sr
00202D86 4279 FFFF DC06             		clr.w	(RAM_CurrLevel)
00202D8C 6100 D2D4                  		bsr	Video_ClearAll
00202D90                            		
00202D90                            ; --------------
00202D90                            ; Load resources
00202D90                            ; --------------
00202D90                            
00202D90 41F9 0000 0000             		lea	(Pal_LvlCoinItms),a0
00202D96 43F9 FFFF EA10             		lea	(RAM_PalFade+$40),a1
00202D9C 303C 000F                  		move.w	#16-1,d0
00202DA0                            @copyextpal:
00202DA0 32D8                       		move.w	(a0)+,(a1)+
00202DA2 51C8 FFFC                  		dbf	d0,@copyextpal
00202DA6                            		
00202DA6 41F9 0000 0000             		lea	(Pal_Player),a0
00202DAC 303C 000F                  		move.w	#16-1,d0
00202DB0                            @copychrpal:
00202DB0 32D8                       		move.w	(a0)+,(a1)+
00202DB2 51C8 FFFC                  		dbf	d0,@copychrpal
00202DB6                            		
00202DB6                            		;Same art for everything
00202DB6 41F9 0000 0000             		lea	(Art_Lvl_Test),a0
00202DBC 23FC 4000 0000 00C0 0004   		move.l	#$40000000,(vdp_ctrl)
00202DC6 303C 0000                  		move.w	#((Art_Lvl_Test_e-Art_Lvl_Test)/4)-1,d0
00202DCA                            @copy_art:
00202DCA 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
00202DD0 51C8 FFF8                  		dbf	d0,@copy_art
00202DD4                            		
00202DD4 41F9 0000 0000             		lea	(Art_LvlBG_Test),a0
00202DDA 23FC 7800 0000 00C0 0004   		move.l	#$78000000,(vdp_ctrl)
00202DE4 303C 0000                  		move.w	#((Art_LvlBG_Test_e-Art_LvlBG_Test)/4)-1,d0
00202DE8                            @dobgart:
00202DE8 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
00202DEE 51C8 FFF8                  		dbf	d0,@dobgart
00202DF2                               				
00202DF2 6100 0000                  		bsr	Level_Init
00202DF6 43F9 0000 0000                		lea	(artdata_Level_Test),a1
00202DFC 6100 0000                     		bsr	Level_LoadArtList
00202E00                            
00202E00                            ; **************
00202E00                            ; DEBUG ONLY
00202E00                            ; **************
00202E00                            
00202E00 23FC 5000 0003 00C0 0004   		move.l	#$50000003,(vdp_ctrl)
00202E0A 41F9 0000 0000             		lea	(Art_DebugFont),a0
00202E10 303C 0000                  		move.w	#((Art_DebugFont_e-Art_DebugFont)/4)-1,d0
00202E14                            @dbg_loop:
00202E14 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
00202E1A 51C8 FFF8                  		dbf	d0,@dbg_loop
00202E1E                            		
00202E1E                            ;    		move.l	#$40800001,(vdp_ctrl)		
00202E1E                            ;    		move.l	#$17100000,(vdp_data)
00202E1E                            ;    		move.l	#$71700000,(vdp_data)
00202E1E                            ;    		move.l	#$17100000,(vdp_data)
00202E1E                            ;      		move.w	#1,(RAM_CurrLevel)
00202E1E                                 		
00202E1E                            ;      		if MCD=0
00202E1E                            ;  		move.l	#TEST_IT,d0
00202E1E                            ;  		moveq 	#7,d1
00202E1E                            ;  		moveq	#0,d2
00202E1E                            ;   		bsr	Audio_Track_play
00202E1E                            ;   		endif
00202E1E                            		
00202E1E                            ; --------------
00202E1E                            ; Restart
00202E1E                            ; --------------
00202E1E                            
00202E1E                            @restart:
00202E1E 6100 D29A                  		bsr	Video_ClearScroll
00202E22 6100 D254                  		bsr	Video_ClearSprites
00202E26 6100 0000                    		bsr	Objects_Init
00202E2A 6100 0000                  		bsr	Level_FromList
00202E2E 6100 0000                    		bsr	Level_Draw
00202E32 6100 0000                     		bsr	Level_Run
00202E36                               		
00202E36 41F9 0000 0000             		lea	(Map_LvlBG_Test),a0
00202E3C 7001                        		moveq	#1,d0
00202E3E 223C 0000 0000              		move.l	#$00000000,d1
00202E44 243C 003F 001F                		move.l	#$003F001F,d2
00202E4A 363C 21C0                     		move.w	#$21C0,d3
00202E4E 6100 D3E8                     		bsr	Video_MakeMap
00202E52                               		
00202E52 203C 0000 0000               		move.l	#Music_Level1,d0
00202E58 7201                         		moveq 	#1,d1
00202E5A 7400                         		moveq	#0,d2
00202E5C 6100 D8B2                    		bsr	Audio_Track_play
00202E60                              		
00202E60 46FC 2000                   		move.w	#$2000,sr
00202E64                             		
00202E64 6100 0000                    		bsr	Objects_Run
00202E68                            ; 		bsr	Level_DbgInit
00202E7A                             		
00202E7A                            ; --------------------------------------------
00202E7A                            ; Loop
00202E7A                            ; --------------------------------------------
00202E7A                            
00202E7A                            @loop:
00202E7A 6100 D444                   		bsr	Video_vsync
00202E7E                             		
00202E7E 6100 0000                     		bsr	Level_BlockUpd	
00202E82 6100 0000                    		bsr	Objects_Run
00202E86 6100 0000                     		bsr	Level_Run
00202E8A                            ;    		bsr	Level_Debug
00202E8A                            		
00202E8A                            ; -----------------------------------------
00202E8A                            
00202E8A                            ; 		btst	#bitJoyStart,(RAM_Control_1+OnPress)
00202E8A                            ;  		beq.s	@ignore_st
00202E8A                            ;  		clr.b	(RAM_GameMode)
00202E8A                            ;  		rts
00202E8A                            ; @ignore_st:
00202E8A                            ; 		btst	#bitJoyA,(RAM_Control_2+OnHold)
00202E8A                            ;  		beq.s	@ignore_d
00202E8A                            ;  		move.b	#1,(RAM_ModeReset)
00202E8A                            ;   		add.w	#1,(RAM_CurrLevel)
00202E8A                            ; 
00202E8A                            ; @ignore_d:
00202E8A 4A39 FFFF DE4C             		tst.b	(RAM_ModeReset)
00202E90 6700 FFE8                  		beq	@loop
00202E94 4239 FFFF DE4C             		clr.b	(RAM_ModeReset)
00202E9A                            		
00202E9A 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
00202EA0 6700                       		beq.s	@gameover
00202EA2 4E75                       		rts
00202EA4                            		
00202EA4                            ;  		fade	out
00202EA4                            ;  		move.w	#$2700,sr
00202EA4                            ;  		bra	@Restart
00202EA4                            
00202EA4                            ; --------------------------------------------
00202EA4                            ; Game Over
00202EA4                            ; --------------------------------------------
00202EA4                            
00202EA4                            @gameover:
00202EA4 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
00202EAA 4E75                       		rts
00202EAC                            		
00202EAC                            ; ====================================================================
00202EAC                            ; --------------------------------------------
00202EAC                            ; Subs
00202EAC                            ; --------------------------------------------
00202EAC                            
00202EAC                            Level_DbgInit:
00202EAC                            ; 		move.w	#$EEE,(RAM_PalFade+$42)
00202EAC 41FA 0000                  		lea	ascDebugTop(pc),a0
00202EB0 7002                       		moveq	#2,d0
00202EB2 223C 0000 0000             		move.l	#$00000000,d1
00202EB8 343C 0680                  		move.w	#$680,d2
00202EBC 6100 D3D0                  		bsr	Video_PrintText
00202EC0                            		
00202EC0 23FC 9100 9201 00C0 0004   		move.l	#$91009201,(vdp_ctrl)
00202ECA                            		
00202ECA                            Level_Debug:
00202ECA                            ;  		moveq	#2,d0
00202ECA                            ; 		move.l	#$00060000,d1
00202ECA                            ; 		moveq	#0,d2
00202ECA                            ; 		move.w	(RAM_P1_Coins),d2
00202ECA                            ; 		move.w	#$680,d3
00202ECA                            ; 		moveq	#4,d4
00202ECA                            ; 		bsr	Video_PrintVal
00202ECA                            ; 
00202ECA                            ;  		moveq	#2,d0
00202ECA                            ; 		move.l	#$000F0000,d1
00202ECA                            ; 		moveq	#0,d2
00202ECA                            ; 		move.w	(RAM_P1_Hits),d2
00202ECA                            ; 		move.w	#$680,d3
00202ECA                            ; 		moveq	#4,d4
00202ECA                            ; 		bsr	Video_PrintVal
00202ECA                            
00202ECA 7002                        		moveq	#2,d0
00202ECC 223C 001B 0000             		move.l	#$001B0000,d1
00202ED2 2439 0000 0000             		move.l	(RAM_ObjBuffer+obj_y_spd),d2
00202ED8 363C 0680                  		move.w	#$680,d3
00202EDC 7802                       		moveq	#2,d4
00202EDE 6100 D2EC                  		bsr	Video_PrintVal
00202EE2                            		
00202EE2 7002                        		moveq	#2,d0
00202EE4 223C 0018 0000             		move.l	#$00180000,d1
00202EEA 7400                       		moveq	#0,d2
00202EEC 1439 0000 0000             		move.b	(RAM_ObjBuffer+obj_col),d2
00202EF2 363C 0680                  		move.w	#$680,d3
00202EF6 7800                       		moveq	#0,d4
00202EF8 6100 D2D2                  		bsr	Video_PrintVal
00202EFC                            		
00202EFC 7002                        		moveq	#2,d0
00202EFE 223C 000C 0000             		move.l	#$000C0000,d1
00202F04 7400                       		moveq	#0,d2
00202F06 1439 0000 0000             		move.b	(RAM_ObjBuffer+obj_status),d2
00202F0C 363C 0680                  		move.w	#$680,d3
00202F10 7800                       		moveq	#0,d4
00202F12 6000 D2B8                  		bra	Video_PrintVal
00202F16                            		
00202F16                            ; -----------------------
00202F16                            
00202F16                            Level_FromList:
00202F16 3039 FFFF DC06             		move.w	(RAM_CurrLevel),d0
00202F1C E948                       		lsl.w	#4,d0
00202F1E 49F9 0000 0000             		lea	(LevelList),a4
00202F24 2074 0000                  		movea.l	(a4,d0.w),a0
00202F28 6100 0000                  		bsr	Level_Load
00202F2C 43F9 0000 0000             		lea	(RAM_LvlPlanes),a1
00202F32 1374 0000 0000             		move.b	(a4,d0.w),lvl_type(a1)
00202F38                            		
00202F38 41F9 0000 0000             		lea	(Pal_LvlMain_Gray),a0
00202F3E 43F9 FFFF E9D0             		lea	(RAM_PalFade),a1
00202F44 7000                       		moveq	#0,d0
00202F46 303C 001F                  		move.w	#32-1,d0
00202F4A                            @copy_pal:
00202F4A 32D8                       		move.w	(a0)+,(a1)+
00202F4C 51C8 FFFC                  		dbf	d0,@copy_pal
00202F50                            		
00202F50 3239 FFFF DC06             		move.w	(RAM_CurrLevel),d1
00202F56 E949                       		lsl.w	#4,d1
00202F58                            		
00202F58 7000                       		moveq	#0,d0
00202F5A 3034 1008                   		move.w	8(a4,d1.w),d0
00202F5E 4840                        		swap	d0
00202F60 3034 100A                     		move.w	$A(a4,d1.w),d0
00202F64 4239 0000 0000                 		clr.b	(RAM_ObjBuffer+obj_index)
00202F6A 23FC 0000 0000 0000 0000       		move.l	#Obj_Player,(RAM_ObjBuffer)
00202F74 6100 0000                      		bsr	Plyr_SetStartPos
00202F78                            		
00202F78 3239 FFFF DC06             		move.w	(RAM_CurrLevel),d1
00202F7E E949                       		lsl.w	#4,d1
00202F80 43F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*4)),a1
00202F86 3374 100C 0000              		move.w	$C(a4,d1.w),obj_x(a1)
00202F8C 3374 100E 0000                		move.w	$E(a4,d1.w),obj_y(a1)
00202F92 237C 0000 0000 0000        		move.l	#Obj_EndFlag,obj_code(a1)
00202F9A 43F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*6)),a1	
00202FA0 237C 0000 0000 0000        		move.l	#Obj_HudInfo,obj_code(a1)
00202FA8 337C 0000 0000             		move.w	#0,obj_x(a1)
00202FAE 337C 0000 0000             		move.w	#0,obj_y(a1)
00202FB4 4E75                       		rts
00202FB6                            		
00202FB6 6F62 6A5F 7374 6174 7573+  ascDebugTop:	dc.b "obj_status: 00 obj_col: 00              ",0
00202FDF                            ; 		dc.b "                              00000000",0
00202FE0 00                         		even
00202FE0                            		
00202FE0                            ; --------------------------------------------
00202FE0                            
00202FE0                            		include	"engine/modes/level/subs/level.asm"
00202FE0                            ; ====================================================================
00202FE0                            ; ---------------------------------------------
00202FE0                            ; Level system
00202FE0                            ; ---------------------------------------------
00202FE0                            
00202FE0                            ; *** NOTES ***
00202FE0                            ; MAX Prize size: $7FFF
00202FE0                            
00202FE0                            ; --------------------------------------------
00202FE0                            ; Variables
00202FE0                            ; --------------------------------------------
00202FE0                            
00202FE0                            		rsreset
00202FE0 =00000000                  lvl_objects	rs.l 1
00202FE0 =00000004                  lvl_blocks	rs.l 1
00202FE0 =00000008                  lvl_przblocks	rs.l 1
00202FE0 =0000000C                  lvl_layout	rs.l 1
00202FE0 =00000010                  lvl_hilayout	rs.l 1
00202FE0 =00000014                  lvl_collision	rs.l 1
00202FE0 =00000018                  lvl_prizes	rs.l 1
00202FE0 =0000001C                  lvl_x		rs.l 1
00202FE0 =00000020                  lvl_y		rs.l 1
00202FE0 =00000024                  lvl_x_camspd	rs.l 1
00202FE0 =00000028                  lvl_y_camspd	rs.l 1
00202FE0 =0000002C                  lvl_timer	rs.l 1
00202FE0 =00000030                  lvl_size_x	rs.w 1
00202FE0 =00000032                  lvl_size_y	rs.w 1
00202FE0 =00000034                  lvl_maxcam_x	rs.w 1
00202FE0 =00000036                  lvl_maxcam_y	rs.w 1
00202FE0 =00000038                  lvl_camflags	rs.w 1
00202FE0 =0000003A                  lvl_flags	rs.w 1
00202FE0 =0000003C                  lvl_type	rs.w 1
00202FE0 =0000003E                  lvl_lastx	rs.w 1
00202FE0 =00000040                  lvl_lasty	rs.w 1
00202FE0 =00000042                  sizeof_lvlpln	rs.l 0
00202FE0                            
00202FE0                            ; --------------------------------------------
00202FE0                            
00202FE0 =00000046                  max_lvlobj	equ	70
00202FE0                            
00202FE0 =00000000                  bitLvlDirR	equ	0
00202FE0 =00000001                  bitLvlDirL	equ	1
00202FE0 =00000002                  bitLvlDirD	equ	2
00202FE0 =00000003                  bitLvlDirU	equ	3
00202FE0 =00000004                  bitLvlDontUpd	equ	4
00202FE0                            
00202FE0                            ; RAM_LevelPrizes	equ	$FF0000
00202FE0                            
00202FE0                            ; --------------------------------------------
00202FE0                            ; RAM
00202FE0                            ; --------------------------------------------
00202FE0                            
00202FE0                            		rsset RAM_Level
00202FE0 =FFFFBC00                  RAM_LvlPlanes	rs.b sizeof_lvlpln
00202FE0 =FFFFBC42                  RAM_LevelObjPos	rs.w (max_lvlobj)*5
00202FE0 =FFFFBEFE                  RAM_LvlAnim	rs.w 16
00202FE0 =FFFFBF1E                  RAM_PrizeHide	rs.w 1+(2*16)
00202FE0 =FFFFBF60                  RAM_PrizeShow	rs.w 1+(2*16)
00202FE0 =FFFFBFA2                  RAM_PrizeUsed	rs.w 1+(2*16)
00202FE0                            
00202FE0 =FFFFBFE4                  sizeof_lvl2	rs.l 0
00202FE0                            ;    		inform 0,"Level system uses: %h",(sizeof_lvl2-RAM_Level)
00202FE0                            		
00202FE0                            ; ====================================================================	
00202FE0                            ; --------------------------------------------
00202FE0                            ; Init
00202FE0                            ; --------------------------------------------
00202FE0                            
00202FE0                            Level_Init:
00202FE0 4279 FFFF DC02             		clr.w	(RAM_P1_Coins)
00202FE6 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
00202FEC 6600                       		bne.s	@firsttime
00202FEE 33FC 0003 FFFF DC00        		move.w	#3,(RAM_P1_Lives)
00202FF6                            @firsttime:
00202FF6 13FC 0003 FFFF ED1B          		move.b	#%11,(RAM_VidRegs+$B)		; H: line V: full
00202FFE                            ;      		move.b	#%10000111,(RAM_VidRegs+$C)	; H40 + Double interlace
00202FFE 13FC 0001 FFFF ED20          		move.b	#1,(RAM_VidRegs+$10)		; 512x256 layer size
00203006 6100 D0E0                    		bsr	Video_Update
0020300A                             		
0020300A 41F9 0000 0000             		lea	(Art_LvlPrizes),a0
00203010 23FC 7000 0002 00C0 0004   		move.l	#$70000002,(vdp_ctrl)
0020301A 303C 0000                  		move.w	#((Art_LvlPrizes_e-Art_LvlPrizes)/4)-1,d0
0020301E                            @doprzart:
0020301E 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
00203024 51C8 FFF8                  		dbf	d0,@doprzart
00203028                            		
00203028                            ; 		move.w	#-1,(RAM_LvlPlanes+lvl_lastx)
00203028                            ; 		move.w	#-1,(RAM_LvlPlanes+lvl_lasty)		
00203028 4E75                       		rts
0020302A                            		
0020302A                            ; ====================================================================		
0020302A                            ; --------------------------------------------
0020302A                            ; Loop
0020302A                            ; --------------------------------------------
0020302A                            
0020302A                            Level_Run:
0020302A 4DF9 FFFF BC00             		lea	(RAM_LvlPlanes),a6
00203030                            		
00203030 6100 0000                   		bsr	Lvl_RefreshObj
00203034 6100 0000                  		bsr	Lvl_DrawScrl
00203038 6100 0000                  		bsr	Lvl_Animation
0020303C 6000 0000                  		bra	Lvl_Deform
00203040                            		
00203040                            ; -----------------------------------
00203040                             
00203040                            Level_BlockUpd:
00203040 4DF9 FFFF BC00             		lea	(RAM_LvlPlanes),a6
00203046 4BF9 FFFF BF1E             		lea	(RAM_PrizeHide),a5
0020304C 3C15                       		move.w	(a5),d6
0020304E 425D                       		clr.w	(a5)+
00203050 4A46                       		tst.w	d6
00203052 6700                       		beq.s	@skip_hide
00203054 0446 0001                  		sub.w	#1,d6
00203058                            @next_hide:
00203058 2015                       		move.l	(a5),d0
0020305A 6100 0000                   		bsr	Lvl_DoHidePrz
0020305E 429D                        		clr.l	(a5)+
00203060 51CE FFF6                   		dbf	d6,@next_hide
00203064                            @skip_hide:
00203064                            
00203064 4BF9 FFFF BF60             		lea	(RAM_PrizeShow),a5
0020306A 3C15                       		move.w	(a5),d6
0020306C 425D                       		clr.w	(a5)+
0020306E 4A46                       		tst.w	d6
00203070 6700                       		beq.s	@skip_show
00203072 0446 0001                  		sub.w	#1,d6
00203076                            @next_show:
00203076 2015                       		move.l	(a5),d0
00203078 6100 0000                   		bsr	Lvl_DoShowPrz
0020307C 429D                        		clr.l	(a5)+
0020307E 51CE FFF6                   		dbf	d6,@next_show
00203082                            @skip_show:
00203082                            		
00203082 4E75                       		rts
00203084                            		
00203084                            ; ====================================================================
00203084                            ; --------------------------------------------
00203084                            ; Subs
00203084                            ; --------------------------------------------
00203084                            
00203084                            Lvl_DrawScrl:
00203084                            
00203084                            ; -----------------------------------
00203084                            ; RIGHT
00203084                            ; -----------------------------------
00203084                            
00203084 302E 003E                  		move.w	lvl_lastx(a6),d0
00203088 322E 001C                  		move.w	lvl_x(a6),d1
0020308C B240                       		cmp.w	d0,d1
0020308E 6700 0000                  		beq	@dontupdL
00203092 3D41 003E                  		move.w	d1,lvl_lastx(a6)
00203096                            		
00203096 082E 0000 003A             		btst	#bitLvlDirR,lvl_flags(a6)
0020309C 6700 0000                  		beq	@dontupdR
002030A0 08AE 0000 003A             		bclr	#bitLvlDirR,lvl_flags(a6)
002030A6 303C 4000                  		move.w	#$4000,d0
002030AA 2A6E 000C                  		movea.l	lvl_layout(a6),a5
002030AE 286E 0010                  		movea.l lvl_hilayout(a6),a4
002030B2 266E 0018                  		movea.l	lvl_prizes(a6),a3
002030B6                            		
002030B6 382E 0020                  		move.w	lvl_y(a6),d4
002030BA 3404                       		move.w	d4,d2
002030BC E84A                       		lsr.w	#4,d2
002030BE C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
002030C2 DAC2                        		adda	d2,a5
002030C4 D8C2                        		adda 	d2,a4
002030C6 D6C2                        		adda	d2,a3
002030C8                             		
002030C8 3604                        		move.w	d4,d3
002030CA 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
002030CE 0644 0150                  		add.w	#$150,d4
002030D2 3204                       		move.w	d4,d1
002030D4 E849                       		lsr.w	#4,d1
002030D6 DAC1                        		adda	d1,a5
002030D8 D8C1                        		adda 	d1,a4
002030DA D6C1                        		adda	d1,a3
002030DC                            
002030DC E44C                       		lsr.w	#2,d4
002030DE 0244 007C                  		and.w	#$7C,d4
002030E2 E94B                       		lsl.w	#4,d3			; VDP YPOS
002030E4 0243 0F00                  		and.w	#$F00,d3
002030E8 D843                       		add.w	d3,d4
002030EA 8840                       		or.w	d0,d4
002030EC 4844                       		swap	d4
002030EE 383C 0003                   		move.w	#3,d4
002030F2                             		
002030F2 363C 000F                   		move.w	#$F,d3
002030F6                            ;   		move.l	#$00010001,d1
002030F6                            @nextblkR:
002030F6 7000                       		moveq	#0,d0
002030F8 246E 0004                  		movea.l	lvl_blocks(a6),a2
002030FC 1013                       		move.b	(a3),d0
002030FE 4A00                        		tst.b	d0
00203100 6700                        		beq.s	@noPrzR
00203102 0800 0007                   		btst	#7,d0
00203106 6600                        		bne.s	@noPrzR
00203108 0240 007F                   		and.w	#$7F,d0
0020310C 246E 0008                  		movea.l	lvl_przblocks(a6),a2
00203110 6000                       		bra.s	@hasprzR
00203112                            @noPrzR:
00203112 1015                       		move.b	(a5),d0
00203114 4A14                       		tst.b 	(a4)
00203116 6700                       		beq.s 	@hasprzR
00203118 1014                       		move.b 	(a4),d0
0020311A                            @hasprzR:
0020311A                            		
0020311A E748                       		lsl.w	#3,d0
0020311C 3232 0002                  		move.w	2(a2,d0.w),d1
00203120 4841                       		swap	d1
00203122 3232 0000                  		move.w	(a2,d0.w),d1
00203126 3432 0006                   		move.w	6(a2,d0.w),d2
0020312A 4842                        		swap	d2
0020312C 3432 0004                   		move.w	4(a2,d0.w),d2
00203130                            
00203130 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00203136 0684 0080 0000              		add.l	#$00800000,d4
0020313C 0284 4FFE 0003               		and.l	#$4FFE0003,d4
00203142                              		
00203142 4843                         		swap	d3
00203144 1639 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d3
0020314A 0243 0006                   		and.w	#%110,d3
0020314E 6700                        		beq.s	@dontShftV_R
00203150 E249                        		lsr.w	#1,d1
00203152 E24A                        		lsr.w	#1,d2
00203154                            @dontShftV_R:
00203154 4843                       		swap	d3
00203156 4A14                       		tst.b 	(a4)
00203158 6700                       		beq.s 	@nohiprioR
0020315A 0041 8000                  		or.w 	#$8000,d1
0020315E 0042 8000                  		or.w 	#$8000,d2
00203162                            @nohiprioR:
00203162 33C1 00C0 0000              		move.w	d1,(vdp_data)
00203168 33C2 00C0 0000              		move.w	d2,(vdp_data)
0020316E                             		
0020316E 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
00203174 0241 0006                   		and.w	#%110,d1
00203178 6600                        		bne.s	@dontupdR_2
0020317A                             		
0020317A 4841                        		swap	d1
0020317C 4842                        		swap	d2
0020317E 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00203184 0684 0080 0000              		add.l	#$00800000,d4
0020318A 0284 4FFE 0003               		and.l	#$4FFE0003,d4
00203190 4A14                         		tst.b 	(a4)
00203192 6700                       		beq.s 	@nohiprioR_2
00203194 0041 8000                  		or.w 	#$8000,d1
00203198 0042 8000                  		or.w 	#$8000,d2
0020319C                            @nohiprioR_2:
0020319C 33C1 00C0 0000              		move.w	d1,(vdp_data)
002031A2 33C2 00C0 0000              		move.w	d2,(vdp_data)
002031A8                             		
002031A8                            @dontupdR_2:
002031A8 DAEE 0030                   		add.w	lvl_size_x(a6),a5
002031AC D8EE 0030                   		add.w 	lvl_size_x(a6),a4
002031B0 D6EE 0030                   		add.w	lvl_size_x(a6),a3
002031B4 51CB FF40                  		dbf	d3,@nextblkR
002031B8                            @dontupdR:
002031B8                            	
002031B8                            ; -----------------------------------
002031B8                            ; LEFT
002031B8                            ; -----------------------------------
002031B8                            
002031B8 082E 0001 003A             		btst	#bitLvlDirL,lvl_flags(a6)
002031BE 6700 0000                  		beq	@dontupdL
002031C2 08AE 0001 003A             		bclr	#bitLvlDirL,lvl_flags(a6)
002031C8 303C 4000                  		move.w	#$4000,d0
002031CC 2A6E 000C                  		movea.l	lvl_layout(a6),a5
002031D0 286E 0010                  		movea.l lvl_hilayout(a6),a4
002031D4 266E 0018                  		movea.l	lvl_prizes(a6),a3
002031D8                            		
002031D8 382E 0020                  		move.w	lvl_y(a6),d4
002031DC 3404                       		move.w	d4,d2
002031DE E84A                       		lsr.w	#4,d2
002031E0 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
002031E4 DAC2                        		adda	d2,a5
002031E6 D8C2                        		adda	d2,a4
002031E8 D6C2                        		adda	d2,a3
002031EA 3604                        		move.w	d4,d3
002031EC                             		
002031EC 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
002031F0 0444 0010                       		sub.w	#$010,d4		; TODO CHECAR SI FUNCIONA BIEN
002031F4 3204                       		move.w	d4,d1
002031F6 E849                       		lsr.w	#4,d1
002031F8 DAC1                        		adda	d1,a5
002031FA D8C1                        		adda	d1,a4
002031FC D6C1                        		adda	d1,a3
002031FE                             		
002031FE E44C                       		lsr.w	#2,d4
00203200 0244 007C                  		and.w	#$7C,d4
00203204 E94B                       		lsl.w	#4,d3			; VDP YPOS
00203206 0243 0F00                  		and.w	#$F00,d3
0020320A D843                       		add.w	d3,d4
0020320C 8840                       		or.w	d0,d4
0020320E 4844                       		swap	d4
00203210 383C 0003                   		move.w	#3,d4
00203214                             		
00203214 363C 000F                   		move.w	#$F,d3
00203218                            ;  		move.l	#$00010001,d1
00203218                            @nextblkL:
00203218 7000                       		moveq	#0,d0
0020321A 246E 0004                  		movea.l	lvl_blocks(a6),a2
0020321E 1013                       		move.b	(a3),d0
00203220 4A00                        		tst.b	d0
00203222 6700                        		beq.s	@noPrzL
00203224 0800 0007                   		btst	#7,d0
00203228 6600                        		bne.s	@noPrzL
0020322A 0240 007F                   		and.w	#$7F,d0
0020322E 246E 0008                  		movea.l	lvl_przblocks(a6),a2
00203232 6000                       		bra.s	@hasprzL
00203234                            @noPrzL:
00203234 1015                       		move.b	(a5),d0
00203236 4A14                       		tst.b 	(a4)
00203238 6700                       		beq.s 	@hasprzL
0020323A 1014                       		move.b 	(a4),d0
0020323C                            @hasprzL:
0020323C E748                       		lsl.w	#3,d0
0020323E 3232 0002                  		move.w	2(a2,d0.w),d1
00203242 4841                       		swap	d1
00203244 3232 0000                  		move.w	(a2,d0.w),d1
00203248 3432 0006                   		move.w	6(a2,d0.w),d2
0020324C 4842                        		swap	d2
0020324E 3432 0004                   		move.w	4(a2,d0.w),d2
00203252                            
00203252 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00203258 0684 0080 0000              		add.l	#$00800000,d4
0020325E 0284 4FFE 0003               		and.l	#$4FFE0003,d4
00203264                              		
00203264 4843                         		swap	d3
00203266 1639 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d3
0020326C 0243 0006                   		and.w	#%110,d3
00203270 6700                        		beq.s	@dontShftV_L
00203272 E249                        		lsr.w	#1,d1
00203274 E24A                        		lsr.w	#1,d2
00203276                            @dontShftV_L:
00203276 4843                       		swap	d3
00203278 4A14                       		tst.b 	(a4)
0020327A 6700                       		beq.s 	@nohiprioL
0020327C 0041 8000                  		or.w	#$8000,d1
00203280 0042 8000                  		or.w 	#$8000,d2
00203284                            @nohiprioL:
00203284 33C1 00C0 0000              		move.w	d1,(vdp_data)
0020328A 33C2 00C0 0000              		move.w	d2,(vdp_data)
00203290                             		
00203290 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
00203296 0241 0006                   		and.w	#%110,d1
0020329A 6600                        		bne.s	@dontupdL_2
0020329C                             		
0020329C 4841                        		swap	d1
0020329E 4842                        		swap	d2
002032A0 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
002032A6 0684 0080 0000              		add.l	#$00800000,d4
002032AC 0284 4FFE 0003               		and.l	#$4FFE0003,d4
002032B2 4A14                       		tst.b 	(a4)
002032B4 6700                       		beq.s 	@nohiprioL_2
002032B6 0041 8000                  		or.w	#$8000,d1
002032BA 0042 8000                  		or.w 	#$8000,d2
002032BE                            @nohiprioL_2:
002032BE 33C1 00C0 0000              		move.w	d1,(vdp_data)
002032C4 33C2 00C0 0000              		move.w	d2,(vdp_data)
002032CA                             		
002032CA                            @dontupdL_2:
002032CA DAEE 0030                   		add.w	lvl_size_x(a6),a5
002032CE D8EE 0030                   		add.w	lvl_size_x(a6),a4
002032D2 D6EE 0030                   		add.w	lvl_size_x(a6),a3
002032D6 51CB FF40                  		dbf	d3,@nextblkL
002032DA                            @dontupdL:
002032DA                            
002032DA                            ; -----------------------------------
002032DA                            ; DOWN
002032DA                            ; -----------------------------------
002032DA                            
002032DA 302E 0040                  		move.w	lvl_lasty(a6),d0
002032DE 322E 0020                  		move.w	lvl_y(a6),d1
002032E2 B240                       		cmp.w	d0,d1
002032E4 6700 0000                  		beq	@dontupdU
002032E8 3D41 0040                  		move.w	d1,lvl_lasty(a6)
002032EC                            		
002032EC 082E 0002 003A             		btst	#bitLvlDirD,lvl_flags(a6)
002032F2 6700 0000                  		beq	@dontupdD
002032F6 08AE 0002 003A             		bclr	#bitLvlDirD,lvl_flags(a6)
002032FC                            			
002032FC 2A6E 000C                  		movea.l	lvl_layout(a6),a5
00203300 286E 0010                  		movea.l lvl_hilayout(a6),a4
00203304 266E 0018                  		movea.l	lvl_prizes(a6),a3
00203308                            
00203308 382E 0020                  		move.w	lvl_y(a6),d4
0020330C 303C 4000                  		move.w	#$4000,d0
00203310 0644 00E0                  		add.w	#$0E0,d4
00203314 3404                       		move.w	d4,d2
00203316 E84A                       		lsr.w	#4,d2
00203318 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
0020331C DAC2                        		adda	d2,a5
0020331E D8C2                        		adda	d2,a4
00203320 D6C2                        		adda	d2,a3
00203322 3604                        		move.w	d4,d3
00203324                            
00203324 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
00203328 3404                       		move.w	d4,d2
0020332A 3204                       		move.w	d4,d1
0020332C E849                       		lsr.w	#4,d1
0020332E DAC1                        		adda	d1,a5
00203330 D8C1                        		adda 	d1,a4
00203332 D6C1                        		adda	d1,a3
00203334 E44C                       		lsr.w	#2,d4
00203336 0244 007C                  		and.w	#$7C,d4
0020333A E94B                       		lsl.w	#4,d3			; VDP YPOS
0020333C 0243 0F00                  		and.w	#$F00,d3
00203340 8843                       		or.w	d3,d4
00203342 8840                       		or.w	d0,d4
00203344 4844                       		swap	d4
00203346 383C 0003                   		move.w	#3,d4
0020334A                            
0020334A 363C 0015                   		move.w	#$15,d3
0020334E                            ;  		move.l	#$00010001,d1
0020334E 2A04                        		move.l	d4,d5
00203350 0285 4F80 0003              		and.l	#$4F800003,d5
00203356 0284 007E 0000              		and.l	#$007E0000,d4
0020335C                            @nextblkD:
0020335C                            
0020335C 7000                       		moveq	#0,d0
0020335E 246E 0004                  		movea.l	lvl_blocks(a6),a2
00203362 1013                       		move.b	(a3),d0
00203364 4A00                       		tst.b	d0
00203366 6700                       		beq.s	@noPrzD
00203368 0800 0007                  		btst	#7,d0
0020336C 6600 0000                  		bne	@noPrzD
00203370 0240 007F                  		and.w	#$7F,d0
00203374 246E 0008                  		movea.l	lvl_przblocks(a6),a2
00203378 6000                       		bra.s	@hasprzD
0020337A                            @noPrzD:
0020337A 1015                       		move.b	(a5),d0
0020337C 4A14                       		tst.b 	(a4)
0020337E 6700                       		beq.s 	@hasprzD
00203380 1014                       		move.b 	(a4),d0
00203382                            @hasprzD:
00203382                            
00203382                            
00203382                            ; 		moveq	#0,d0
00203382                            ; 		movea.l	lvl_przblocks(a6),a2
00203382                            ; 		move.b	(a3),d0
00203382                            ; 		tst.b	d0
00203382                            ; 		bne.s	@hasprzD
00203382                            ; 		movea.l	lvl_blocks(a6),a2
00203382                            ; 		move.b	(a5),d0
00203382                            ; 		tst.b 	(a4)
00203382                            ; 		beq.s 	@hasprzD
00203382                            ; 		move.b	(a4),d0
00203382                            ; @hasprzD:
00203382 E748                       		lsl.w	#3,d0
00203384                            		
00203384 3232 0000                  		move.w	(a2,d0.w),d1
00203388 4841                       		swap	d1
0020338A 3232 0004                  		move.w	4(a2,d0.w),d1
0020338E 3432 0002                   		move.w	2(a2,d0.w),d2
00203392 4842                        		swap	d2
00203394 3432 0006                   		move.w	6(a2,d0.w),d2
00203398                             		
00203398 8885                       		or.l	d5,d4
0020339A 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
002033A0                             		
002033A0                            *  		move.b	(RAM_VidRegs+$C),d2
002033A0                            *  		and.w	#%110,d2
002033A0                            *  		beq.s	@dontshftD
002033A0                            *  		swap 	d1
002033A0                            *  		move.w	d1,d2
002033A0                            *  		and.w	#$7FF,d2
002033A0                            *  		and.w	#$F800,d1
002033A0                            *  		lsr.w	#1,d2
002033A0                            *  		or.w	d2,d1
002033A0                            *  		swap 	d1
002033A0                            *  		move.w	d1,d2
002033A0                            *  		and.w	#$7FF,d2
002033A0                            *  		and.w	#$F800,d1
002033A0                            *  		lsr.w	#1,d2
002033A0                            *  		or.w	d2,d1
002033A0                            *  		
002033A0                            * @dontshftD:
002033A0                             		
002033A0 4A14                         		tst.b 	(a4)
002033A2 6700                        		beq.s	@nohiprioD
002033A4 0081 8000 8000              		or.l	#$80008000,d1
002033AA                            @nohiprioD:
002033AA 23C1 00C0 0000              		move.l	d1,(vdp_data)
002033B0                            
002033B0                            *   		move.b	(RAM_VidRegs+$C),d0
002033B0                            *  		and.w	#%110,d0
002033B0                            *  		bne.s	@dontshftD_2
002033B0                             		
002033B0 2005                         		move.l	d5,d0
002033B2 8084                       		or.l	d4,d0
002033B4 0680 0080 0000               		add.l	#$00800000,d0
002033BA 23C0 00C0 0004               		move.l	d0,(vdp_ctrl)
002033C0 4A14                         		tst.b 	(a4)
002033C2 6700                        		beq.s	@nohiprioD_2
002033C4 0082 8000 8000              		or.l	#$80008000,d2
002033CA                            @nohiprioD_2:
002033CA 23C2 00C0 0000              		move.l	d2,(vdp_data)
002033D0                             		
002033D0                            @dontshftD_2:
002033D0 0684 0004 0000              		add.l	#$040000,d4
002033D6 0284 007E 0000               		and.l	#$7E0000,d4
002033DC                              		
002033DC DAFC 0001                   		add.w	#1,a5
002033E0 D8FC 0001                   		add.w	#1,a4
002033E4 D6FC 0001                   		add.w	#1,a3
002033E8 51CB FF72                  		dbf	d3,@nextblkD
002033EC                            @dontupdD:
002033EC                            
002033EC                            ; -----------------------------------
002033EC                            ; UP
002033EC                            ; -----------------------------------
002033EC                            
002033EC 082E 0003 003A             		btst	#bitLvlDirU,lvl_flags(a6)
002033F2 6700 0000                  		beq	@dontupdU
002033F6 08AE 0003 003A             		bclr	#bitLvlDirU,lvl_flags(a6)
002033FC 2A6E 000C                  		movea.l	lvl_layout(a6),a5
00203400 286E 0010                  		movea.l lvl_hilayout(a6),a4
00203404 266E 0018                  		movea.l	lvl_prizes(a6),a3
00203408                            
00203408 303C 4000                  		move.w	#$4000,d0
0020340C 382E 0020                  		move.w	lvl_y(a6),d4
00203410 3204                       		move.w	d4,d1
00203412 4841                       		swap	d1
00203414 3404                       		move.w	d4,d2
00203416 E84A                       		lsr.w	#4,d2
00203418 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
0020341C DAC2                        		adda	d2,a5
0020341E D8C2                        		adda 	d2,a4
00203420 D6C2                        		adda	d2,a3
00203422 3604                        		move.w	d4,d3
00203424                             		
00203424 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
00203428 3404                       		move.w	d4,d2
0020342A 3204                       		move.w	d4,d1
0020342C E849                       		lsr.w	#4,d1
0020342E DAC1                        		adda	d1,a5
00203430 D8C1                        		adda 	d1,a4
00203432 D6C1                        		adda	d1,a3
00203434 E44C                       		lsr.w	#2,d4
00203436 0244 007C                  		and.w	#$7C,d4
0020343A E94B                       		lsl.w	#4,d3			; VDP YPOS
0020343C 0243 0F00                  		and.w	#$F00,d3
00203440 8843                       		or.w	d3,d4
00203442 8840                       		or.w	d0,d4
00203444 4844                       		swap	d4
00203446 383C 0003                   		move.w	#3,d4
0020344A                             		
0020344A 4841                        		swap	d1
0020344C 3401                        		move.w	d1,d2
0020344E 363C 0015                   		move.w	#$15,d3
00203452                            ;  		move.l	#$00010001,d1
00203452 2A04                        		move.l	d4,d5
00203454 0285 4F80 0003              		and.l	#$4F800003,d5
0020345A 0284 007E 0000              		and.l	#$007E0000,d4
00203460                            @nextblkU:
00203460 7000                       		moveq	#0,d0
00203462 246E 0004                  		movea.l	lvl_blocks(a6),a2
00203466 1013                       		move.b	(a3),d0
00203468 4A00                       		tst.b	d0
0020346A 6700                       		beq.s	@noPrzU
0020346C 0800 0007                  		btst	#7,d0
00203470 6600 0000                  		bne	@noPrzU
00203474 0240 007F                  		and.w	#$7F,d0
00203478 246E 0008                  		movea.l	lvl_przblocks(a6),a2
0020347C 6000                       		bra.s	@hasprzU
0020347E                            @noPrzU:
0020347E 1015                       		move.b	(a5),d0
00203480 4A14                       		tst.b 	(a4)
00203482 6700                       		beq.s 	@hasprzU
00203484 1014                       		move.b 	(a4),d0
00203486                            @hasprzU:
00203486                            
00203486                            ; 		moveq	#0,d0
00203486                            ; 		movea.l	lvl_przblocks(a6),a2
00203486                            ; 		move.b	(a3),d0
00203486                            ; 		tst.b	d0
00203486                            ; 		bne.s	@hasprzU
00203486                            ; 		movea.l	lvl_blocks(a6),a2
00203486                            ; 		move.b	(a5),d0
00203486                            ; 		tst.b 	(a4)
00203486                            ; 		beq.s 	@hasprzU
00203486                            ; 		move.b 	(a4),d0
00203486                            ; @hasprzU:
00203486 E748                       		lsl.w	#3,d0
00203488                            		
00203488 3232 0000                  		move.w	(a2,d0.w),d1
0020348C 4841                       		swap	d1
0020348E 3232 0004                  		move.w	4(a2,d0.w),d1
00203492 3432 0002                   		move.w	2(a2,d0.w),d2
00203496 4842                        		swap	d2
00203498 3432 0006                   		move.w	6(a2,d0.w),d2
0020349C                             		
0020349C 8885                       		or.l	d5,d4
0020349E 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
002034A4 4A14                        		tst.b 	(a4)
002034A6 6700                        		beq.s	@nohiprioU
002034A8 0081 8000 8000              		or.l	#$80008000,d1
002034AE                            @nohiprioU:
002034AE 23C1 00C0 0000              		move.l	d1,(vdp_data)
002034B4 2005                         		move.l	d5,d0
002034B6 8084                       		or.l	d4,d0
002034B8 0680 0080 0000               		add.l	#$00800000,d0
002034BE 23C0 00C0 0004              		move.l	d0,(vdp_ctrl)
002034C4 4A14                        		tst.b 	(a4)
002034C6 6700                        		beq.s	@nohiprioU_2
002034C8 0082 8000 8000              		or.l	#$80008000,d2
002034CE                            @nohiprioU_2:
002034CE 23C2 00C0 0000              		move.l	d2,(vdp_data)
002034D4                             		
002034D4                            @nohiprioU_3:
002034D4 0684 0004 0000              		add.l	#$040000,d4
002034DA 0284 007E 0000               		and.l	#$7E0000,d4
002034E0                              		
002034E0 DAFC 0001                   		add.w	#1,a5
002034E4 D8FC 0001                   		add.w 	#1,a4
002034E8 D6FC 0001                   		add.w	#1,a3
002034EC 51CB FF72                  		dbf	d3,@nextblkU
002034F0                            @dontupdU:
002034F0 4E75                       		rts
002034F2                            	
002034F2                            ; --------------------------------------------
002034F2                            ; Lvl_Animation
002034F2                            ; --------------------------------------------
002034F2                            
002034F2                            Lvl_Animation:
002034F2 4BF9 FFFF BEFE             		lea	(RAM_LvlAnim),a5
002034F8                            ; 		lea	(Art_AnimCoin),a4
002034F8                            		
002034F8 0455 0001                  		sub.w	#1,(a5)
002034FC 6A00 0000                  		bpl	@pluswait
00203500 3ABC 0005                  		move.w	#5,(a5)
00203504                            		
00203504 7200                       		moveq	#0,d1
00203506 7400                       		moveq	#0,d2
00203508 203C 0000 0000             		move.l	#Art_AnimCoin,d0
0020350E 322D 0002                  		move.w	2(a5),d1
00203512 0641 0001                  		add.w	#1,d1
00203516 0C41 0006                  		cmp.w	#6,d1
0020351A 6600                       		bne.s	@stay
0020351C 4241                       		clr.w	d1
0020351E                            @stay:
0020351E 3B41 0002                  		move.w	d1,2(a5)
00203522 E149                       		lsl.w	#8,d1
00203524 D081                       		add.l	d1,d0
00203526                            		
00203526 323C 0040                  		move.w	#$40,d1
0020352A 343C 05A0                  		move.w	#$5A0,d2
0020352E 6100 D0D4                  		bsr	DMA_Set
00203532                            		
00203532                            @pluswait:
00203532 4E75                       		rts
00203534                            		
00203534                            ; --------------------------------------------
00203534                            ; Lvl_Deform
00203534                            ; --------------------------------------------
00203534                            
00203534                            Lvl_Deform:
00203534 302E 0020                  		move.w	lvl_y(a6),d0
00203538 33C0 FFFF E2C0             		move.w	d0,(RAM_ScrlVer)
0020353E 3800                       		move.w	d0,d4
00203540 E844                       		asr.w	#4,d4
00203542 33C4 FFFF E2C2             		move.w	d4,(RAM_ScrlVer+2)
00203548 7A00                       		moveq	#0,d5
0020354A 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
00203550 362E 001C                  		move.w	lvl_x(a6),d3
00203554 4443                       		neg.w	d3
00203556                            		
00203556                            ; Sun
00203556 7000                       		moveq	#0,d0
00203558 343C 001B                  		move.w	#(28)-1,d2
0020355C 9444                       		sub.w	d4,d2
0020355E 6B00 0000                  		bmi	@rest_fg
00203562                            @lyr1:
00203562 30C3                       		move.w	d3,(a0)+
00203564 30C0                       		move.w	d0,(a0)+
00203566 0645 0001                  		add.w	#1,d5
0020356A 0C45 00E0                  		cmp.w	#224,d5
0020356E 6E00 0000                  		bgt	@exit_now
00203572 51CA FFEE                  		dbf	d2,@lyr1
00203576                            		
00203576                            ; Clouds 1
00203576 3003                       		move.w	d3,d0
00203578 E840                       		asr.w	#4,d0
0020357A 343C 001B                  		move.w	#(28)-1,d2
0020357E 0C44 001C                  		cmp.w	#28,d4
00203582 6D00                       		blt.s	@lyr2
00203584 9444                       		sub.w	d4,d2
00203586 6B00                       		bmi.s	@rest_fg
00203588                            @lyr2:
00203588 30C3                       		move.w	d3,(a0)+
0020358A 30C0                       		move.w	d0,(a0)+
0020358C 0645 0001                  		add.w	#1,d5
00203590 0C45 00E0                  		cmp.w	#224,d5
00203594 6E00                       		bgt.s	@exit_now
00203596 51CA FFF0                  		dbf	d2,@lyr2
0020359A                            		
0020359A                            ; Clouds 2
0020359A 3003                       		move.w	d3,d0
0020359C EA40                       		asr.w	#5,d0
0020359E 343C 001F                  		move.w	#(32)-1,d2
002035A2                            ; 		cmp.w	#28,d4
002035A2                            ; 		blt.s	@lyr3
002035A2                            ; 		sub.w	d4,d2
002035A2                            ; 		bmi.s	@rest_fg
002035A2                            @lyr3:
002035A2 30C3                       		move.w	d3,(a0)+
002035A4 30C0                       		move.w	d0,(a0)+
002035A6 0645 0001                  		add.w	#1,d5
002035AA 0C45 00E0                  		cmp.w	#224,d5
002035AE 6E00                       		bgt.s	@exit_now
002035B0 51CA FFF0                  		dbf	d2,@lyr3
002035B4                            
002035B4                            ; Mountains 1
002035B4 3003                       		move.w	d3,d0
002035B6 E840                       		asr.w	#4,d0
002035B8 343C 0024                  		move.w	#(37)-1,d2
002035BC                            @lyr4:
002035BC 30C3                       		move.w	d3,(a0)+
002035BE 30C0                       		move.w	d0,(a0)+
002035C0 0645 0001                  		add.w	#1,d5
002035C4 0C45 00E0                  		cmp.w	#224,d5
002035C8 6E00                       		bgt.s	@exit_now
002035CA 51CA FFF0                  		dbf	d2,@lyr4
002035CE                            
002035CE                            ; Mountains 2
002035CE 3003                       		move.w	d3,d0
002035D0 E640                       		asr.w	#3,d0
002035D2 343C 0024                  		move.w	#(37)-1,d2
002035D6                            @lyr5:
002035D6 30C3                       		move.w	d3,(a0)+
002035D8 30C0                       		move.w	d0,(a0)+
002035DA 0645 0001                  		add.w	#1,d5
002035DE 0C45 00E0                  		cmp.w	#224,d5
002035E2 6E00                       		bgt.s	@exit_now
002035E4 51CA FFF0                  		dbf	d2,@lyr5
002035E8                            		
002035E8                            ; Mountains 2
002035E8 3003                       		move.w	d3,d0
002035EA E440                       		asr.w	#2,d0
002035EC 343C 002F                  		move.w	#(48)-1,d2
002035F0                            @lyr6:
002035F0 30C3                       		move.w	d3,(a0)+
002035F2 30C0                       		move.w	d0,(a0)+
002035F4 0645 0001                  		add.w	#1,d5
002035F8 0C45 00E0                  		cmp.w	#224,d5
002035FC 6E00                       		bgt.s	@exit_now
002035FE 51CA FFF0                  		dbf	d2,@lyr6
00203602                            		
00203602                            ; ----------------
00203602                            ; Rest of BG
00203602                            
00203602                            @rest_fg:
00203602 30C3                       		move.w	d3,(a0)+
00203604 4258                       		clr.w	(a0)+
00203606 0645 0001                  		add.w	#1,d5
0020360A 0C45 00E0                  		cmp.w	#224,d5
0020360E 6DF2                       		blt.s	@rest_fg
00203610                            
00203610                            @exit_now:
00203610 06AE 0000 0001 002C        		add.l	#1,lvl_timer(a6)
00203618 4E75                       		rts
0020361A                            		
0020361A                            ; 		lea	(RAM_ScrlHor),a0
0020361A                            ; 		move.w	#224-1,d1
0020361A                            ; @nxt_h:
0020361A                            ; 		move.w	lvl_x(a6),d0
0020361A                            ; 		neg.w	d0
0020361A                            ; 		move.w	d0,(a0)+
0020361A                            ; 		asr.w	#2,d0
0020361A                            ; 		move.w	d0,(a0)+
0020361A                            ; 		dbf	d1,@nxt_h
0020361A                            ; 		
0020361A                            ; 		move.w	lvl_y(a6),d0
0020361A                            ; 		move.w	d0,(RAM_ScrlVer)
0020361A                            ; 		asr.w	#2,d0
0020361A                            ; 		move.w	d0,(RAM_ScrlVer+2)
0020361A                            
0020361A                            ; --------------------------------------------
0020361A                            ; Level_Load
0020361A                            ; 
0020361A                            ; a0 | Data
0020361A                            ; --------------------------------------------
0020361A                            
0020361A                            Level_Load:
0020361A                            ; 		lea	(Level_Test),a0
0020361A 43F9 00FF 0000             		lea	($FF0000),a1
00203620 303C 1FFF                  		move.w	#(($8000)/4)-1,d0
00203624                            @clrram:
00203624 4299                       		clr.l	(a1)+
00203626 51C8 FFFC                  		dbf	d0,@clrram
0020362A                            		
0020362A 43F9 FFFF BC00             		lea	(RAM_LvlPlanes),a1
00203630 4279 FFFF BF1E             		clr.w	(RAM_PrizeHide)
00203636 4279 FFFF BF60             		clr.w	(RAM_PrizeShow)
0020363C 4269 001C                  		clr.w	lvl_x(a1)
00203640 4269 0020                  		clr.w	lvl_y(a1)
00203644 283C FFFF 0000             		move.l	#$FFFF0000,d4
0020364A 3018                       		move.w	(a0)+,d0
0020364C 3340 0030                  		move.w	d0,lvl_size_x(a1)
00203650 3340 0034                  		move.w	d0,lvl_maxcam_x(a1)
00203654 3018                       		move.w	(a0)+,d0
00203656 3340 0032                  		move.w	d0,lvl_size_y(a1)
0020365A 3340 0036                  		move.w	d0,lvl_maxcam_y(a1)
0020365E 2358 0000                  		move.l	(a0)+,lvl_objects(a1)
00203662                            @loop:
00203662                            ; 		tst.w	(a0)
00203662                            ; 		bmi.s	@exit
00203662                            		
00203662 2358 0004                  		move.l	(a0)+,lvl_blocks(a1)
00203666 2018                       		move.l	(a0)+,d0
00203668 4A80                       		tst.l	d0
0020366A 6A00                       		bpl.s	@nullprz
0020366C 237C 0000 0000 0008        		move.l	#vram_prizes,lvl_przblocks(a1)
00203674                            @nullprz:
00203674 2358 000C                  		move.l	(a0)+,lvl_layout(a1)
00203678 2358 0010                  		move.l	(a0)+,lvl_hilayout(a1)
0020367C                            		
0020367C 2358 0014                  		move.l	(a0)+,lvl_collision(a1)
00203680 2344 0018                  		move.l	d4,lvl_prizes(a1)
00203684 2458                       		movea.l	(a0)+,a2
00203686 2644                       		movea.l	d4,a3
00203688                            @nextrle:
00203688 7000                       		moveq	#0,d0
0020368A 7200                       		moveq	#0,d1
0020368C 101A                       		move.b	(a2)+,d0
0020368E 0C00 00FF                  		cmp.b	#-1,d0
00203692 6700                       		beq.s	@Finish
00203694 121A                       		move.b	(a2)+,d1
00203696 4A40                       		tst.w	d0
00203698 6700                       		beq.s	@oops
0020369A 0440 0001                  		sub.w	#1,d0
0020369E                            @CopyIt:
0020369E 16C1                       		move.b	d1,(a3)+
002036A0 0684 0000 0001             		add.l	#1,d4
002036A6 51C8 FFF6                  		dbf	d0,@CopyIt
002036AA                            @oops:
002036AA 60DC                       		bra.s	@nextrle
002036AC                            @Finish:
002036AC                            ; 		adda	#sizeof_lvlpln,a1
002036AC                            ; 		bra.s	@loop
002036AC                            ; @exit:
002036AC                            		
002036AC                            ; ----------------------------------		
002036AC                            ; Load object from the list
002036AC                            ; ----------------------------------
002036AC                            
002036AC 47F9 FFFF BC42             		lea	(RAM_LevelObjPos),a3
002036B2 323C 0045                  		move.w	#max_lvlobj-1,d1
002036B6                            @clrlist:
002036B6 429B                       		clr.l	(a3)+
002036B8 429B                       		clr.l	(a3)+
002036BA 425B                       		clr.w	(a3)+
002036BC 51C9 FFF8                  		dbf	d1,@clrlist
002036C0                            		
002036C0 2479 FFFF BC00             		movea.l	(RAM_LvlPlanes+lvl_objects),a2
002036C6 47F9 FFFF BC42             		lea	(RAM_LevelObjPos),a3
002036CC 323C 0045                  		move.w	#max_lvlobj-1,d1
002036D0                            @NextObj:
002036D0 4A92                       		tst.l	(a2)
002036D2 6700                       		beq.s	@Nothing
002036D4 201A                        		move.l	(a2)+,d0
002036D6 0280 00FF FFFF              		and.l 	#$FFFFFF,d0
002036DC 26C0                        		move.l	d0,(a3)+
002036DE 26DA                       		move.l	(a2)+,(a3)+
002036E0 36DA                       		move.w	(a2)+,(a3)+
002036E2 51C9 FFEC                  		dbf	d1,@NextObj
002036E6                            @Nothing:
002036E6 4E75                       		rts
002036E8                            		
002036E8                            ; --------------------------------------------
002036E8                            ; Draw the level on screen
002036E8                            ; 
002036E8                            ; Uses:
002036E8                            ; d0-d5/a2-a5
002036E8                            ; --------------------------------------------
002036E8                            
002036E8                            Level_Draw:
002036E8 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
002036EE 203C 4000 0003             		move.l	#$40000003,d0		; VDP Address
002036F4 322D 001C                    		move.w	lvl_x(a5),d1		; X pos
002036F8 342D 0020                    		move.w	lvl_y(a5),d2		; Y pos
002036FC E84A                          		lsr.w	#4,d2			; Ypos: xxx0 > 0xxx
002036FE 0242 000F                     		and.w	#$F,d2			; 0xxx > 00xx
00203702 E14A                          		lsl.w	#8,d2			; 00xx > xx00
00203704 0242 3FFF                     		and.w	#$3FFF,d2
00203708 E849                          		lsr.w	#4,d1			; Xpos: xxx0 > 0xxx
0020370A E549                           		lsl.w	#2,d1			; 0xxx * 2
0020370C 4840                           		swap	d0
0020370E D042                          		add.w	d2,d0			; +Y VDP
00203710 D001                         		add.b	d1,d0			; +X VDP
00203712 0200 007F                         		and.b	#$7F,d0
00203716 4840                             		swap	d0
00203718                            		
00203718 382D 0020                  		move.w	lvl_y(a5),d4
0020371C E84C                       		lsr.w	#4,d4
0020371E C8ED 0030                  		mulu.w	lvl_size_x(a5),d4
00203722 3A2D 001C                  		move.w	lvl_x(a5),d5
00203726 E84D                       		lsr.w	#4,d5
00203728 DA44                       		add.w	d4,d5
0020372A 0245 7FFF                  		and.w	#$7FFF,d5
0020372E 4845                       		swap 	d5
00203730                            		
00203730 3A3C 0016                  		move.w	#$16,d5
00203734                            @do_row:
00203734 286D 000C                   		movea.l	lvl_layout(a5),a4
00203738 266D 0010                   		movea.l	lvl_hilayout(a5),a3
0020373C 246D 0018                   		movea.l	lvl_prizes(a5),a2
00203740 4845                        		swap	d5
00203742 D8C5                        		adda 	d5,a4
00203744 D6C5                        		adda 	d5,a3
00203746 D4C5                        		adda	d5,a2
00203748 4845                        		swap 	d5
0020374A                             		
0020374A 2600                       		move.l	d0,d3
0020374C 780F                        		moveq	#$F,d4
0020374E                            ;  		move.b	(RAM_VidRegs+$C),d2
0020374E                            ;   		and.w	#%110,d2
0020374E                            ;   		beq.s	@block
0020374E                            ;   		moveq	#$1F,d4
0020374E                            ;  
0020374E                            @block:
0020374E 226D 0008                  		movea.l	lvl_przblocks(a5),a1
00203752 7400                        		moveq	#0,d2	
00203754 1412                        		move.b	(a2),d2
00203756 4A02                        		tst.b	d2
00203758 6700                        		beq.s	@noprzblk
0020375A 0802 0007                   		btst	#7,d2
0020375E 6700                        		beq.s	@hasPrzDrw
00203760                            @noprzblk:
00203760 1414                         		move.b	(a4),d2
00203762 226D 0004                     		movea.l	lvl_blocks(a5),a1
00203766 4A13                        		tst.b	(a3)
00203768 6700                        		beq.s	@hasprzDrw
0020376A 1413                        		move.b	(a3),d2
0020376C                            @hasprzDrw:
0020376C E74A                       		lsl.w	#3,d2
0020376E 3231 2000                  		move.w	(a1,d2.w),d1
00203772 4841                        		swap	d1
00203774 3231 2004                   		move.w	4(a1,d2.w),d1
00203778                             		
00203778 4844                        		swap	d4
0020377A 1839 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d4
00203780 0244 0006                   		and.w	#%110,d4
00203784 6700                        		beq.s	@NoDouble
00203786 E249                        		lsr.w	#1,d1
00203788 4841                        		swap	d1
0020378A E249                        		lsr.w	#1,d1
0020378C 4841                        		swap	d1
0020378E                            @NoDouble:
0020378E 4844                       		swap	d4
00203790 23C3 00C0 0004              		move.l	d3,(vdp_ctrl)
00203796 4A13                        		tst.b	(a3)
00203798 6700                        		beq.s	@nohiprio
0020379A 0081 8000 8000              		or.l 	#$80008000,d1
002037A0                            @nohiprio:
002037A0 23C1 00C0 0000              		move.l	d1,(vdp_data)
002037A6 0683 0080 0000              		add.l	#$00800000,d3
002037AC                              		
002037AC 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
002037B2 0241 0006                   		and.w	#%110,d1
002037B6 6600                        		bne.s	@NoDouble2
002037B8 3231 2002                  		move.w	2(a1,d2.w),d1
002037BC 4841                        		swap	d1
002037BE 3231 2006                   		move.w	6(a1,d2.w),d1
002037C2 23C3 00C0 0004             		move.l	d3,(vdp_ctrl)
002037C8 4A13                        		tst.b	(a3)
002037CA 6700                        		beq.s	@nohiprio2
002037CC 0081 8000 8000              		or.l 	#$80008000,d1
002037D2                            @nohiprio2:
002037D2 23C1 00C0 0000              		move.l	d1,(vdp_data)
002037D8 0683 0080 0000              		add.l	#$00800000,d3
002037DE 0283 4F7C 0003              		and.l	#$4F7C0003,d3
002037E4                            @NoDouble2:		
002037E4 322D 0030                  		move.w	lvl_size_x(a5),d1
002037E8 D8C1                       		adda	d1,a4
002037EA D6C1                       		adda	d1,a3
002037EC D4C1                       		adda	d1,a2
002037EE 51CC FF5E                  		dbf	d4,@block
002037F2                            	
002037F2 0680 0004 0000             		add.l	#$40000,d0
002037F8 0280 4F7C 0003             		and.l	#$4F7C0003,d0
002037FE 4845                       		swap 	d5
00203800 0645 0001                  		add.w	#1,d5
00203804 4845                       		swap 	d5
00203806 51CD FF2C                  		dbf	d5,@do_row
0020380A                            
0020380A                            ; ----------------------------------
0020380A                            ; Check for objects ON the
0020380A                            ; same screen as the player
0020380A                            ; ----------------------------------
0020380A                            
0020380A 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
00203810 49F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*16)),a4	;Start of level objects
00203816 7601                       		moveq	#1,d3			; Starting at 1
00203818                            @next_obj:
00203818 4A95                       		tst.l	(a5)
0020381A 6700 0000                  		beq	@finish
0020381E 0815 0007                   		btst	#7,(a5)			;ON SCREEN flag?
00203822 6600 0000                   		bne	@next
00203826                            @found_obj:
00203826 7800                         		moveq	#(max_objects-8)-1,d4
00203828                            @nxtav_obj:
00203828 4AAC 0000                  		tst.l	obj_code(a4)	
0020382C 6700                       		beq.s	@valid
0020382E D8FC 0000                  		adda	#sizeof_obj,a4
00203832 51CC FFF4                  		dbf	d4,@nxtav_obj
00203836                            		
00203836                            @valid:
00203836 396D 0004 0000             		move.w	4(a5),obj_x(a4)
0020383C 396D 0006 0000             		move.w	6(a5),obj_y(a4)
00203842 1943 0000                  		move.b	d3,obj_spwnindx(a4)
00203846                            		
00203846 7200                          		moveq	#0,d1
00203848 122D 0008                      		move.b	8(a5),d1
0020384C 422C 0000                      		clr.b	obj_status(a4)
00203850 0801 0007                      		btst	#7,d1
00203854 6700                           		beq.s	@dont_flip_l
00203856 08EC 0030 0000               		bset	#bitobj_flipH,obj_status(a4)
0020385C                            @dont_flip_l:
0020385C 0801 0006                      		btst	#6,d1
00203860 6700                           		beq.s	@dont_flip_d
00203862 08EC 0070 0000               		bset	#bitobj_flipV,obj_status(a4)
00203868                            @dont_flip_d:
00203868 122D 0008                   		move.b	8(a5),d1
0020386C 0241 003F                   		and.w	#$3F,d1
00203870 1941 0000                  		move.b	d1,obj_subid(a4)
00203874 2015                        		move.l	(a5),d0
00203876 0280 00FF FFFF               		and.l 	#$FFFFFF,d0
0020387C 2940 0000                   		move.l	d0,obj_code(a4)
00203880 08D5 0007                   		bset	#7,(a5)			;SET ON SCREEN flag
00203884 D8FC 0000                  		adda	#sizeof_obj,a4
00203888                            @next:
00203888 0643 0001                  		add.w	#1,d3
0020388C DAFC 000A                  		adda	#$A,a5
00203890 6000 FF86                  		bra	@next_obj
00203894                            @finish:
00203894 4E75                            		rts
00203896                            		
00203896                            ; ----------------------------------		
00203896                            
00203896                            Level_HidePrize:
00203896 49F9 FFFF BF20             		lea	(RAM_PrizeHide+2),a4
0020389C 3839 FFFF BF1E             		move.w	(RAM_PrizeHide),d4
002038A2 E54C                       		lsl.w	#2,d4
002038A4 D8C4                       		adda	d4,a4
002038A6                            ; @chknext:
002038A6                            ; 		tst.l	(a4)
002038A6                            ; 		beq.s	@free
002038A6                            ; 		adda	#4,a4
002038A6                            ; 		bra.s	@chknext
002038A6                            ; @free:
002038A6 2880                       		move.l	d0,(a4)
002038A8 0679 0001 FFFF BF1E        		add.w	#1,(RAM_PrizeHide)
002038B0                            @same:
002038B0 4E75                       		rts
002038B2                            		
002038B2                            ; ----------------------------------
002038B2                            
002038B2                            Level_ShowPrize:
002038B2 49F9 FFFF BF62             		lea	(RAM_PrizeShow+2),a4
002038B8 3839 FFFF BF60             		move.w	(RAM_PrizeShow),d4
002038BE E54C                       		lsl.w	#2,d4
002038C0 D8C4                       		adda	d4,a4
002038C2                            ; @chknext:
002038C2                            ; 		tst.l	(a4)
002038C2                            ; 		beq.s	@free
002038C2                            ; 		adda	#4,a4
002038C2                            ; 		bra.s	@chknext
002038C2                            ; @free:
002038C2 2880                       		move.l	d0,(a4)
002038C4 0679 0001 FFFF BF60        		add.w	#1,(RAM_PrizeShow)
002038CC                            @same:
002038CC 4E75                       		rts
002038CE                            
002038CE                            ; ----------------------------------
002038CE                            
002038CE                            ; Level_CheckPrize:
002038CE                            ;  		moveq	#0,d4
002038CE                            ;  		lea	(RAM_PrizeHide),a3
002038CE                            ;  		move.w	(a3)+,d5
002038CE                            ;  		tst.w	d5
002038CE                            ;  		beq.s	@free
002038CE                            ; 		sub.w	#1,d5
002038CE                            ; @chknext:
002038CE                            ;  		cmp.l	(a3)+,d0
002038CE                            ;  		beq.s	@found
002038CE                            ;  		dbf	d5,@chknext
002038CE                            ;  		bra.s	@free
002038CE                            ; 
002038CE                            ; @found:
002038CE                            ;  nop
002038CE                            ; ;  		bra.s * ;moveq	#-1,d4
002038CE                            ;  		
002038CE                            ; @free:
002038CE                            ;  		tst.l	d4
002038CE                            ; 		rts
002038CE                            		
002038CE                            ; ----------------------------------		
002038CE                            ; load level objects while moving
002038CE                            ; ----------------------------------
002038CE                            
002038CE                            Lvl_RefreshObj:
002038CE 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
002038D4 49F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*16)),a4
002038DA 7601                       		moveq	#1,d3			; Starting at 1
002038DC                            @next_obj:
002038DC 4A95                       		tst.l	(a5)
002038DE 6700 0000                  		beq	@finish
002038E2 0815 0006                  		btst	#6,(a5)			; GONE flag?
002038E6 6600 0000                  		bne	@next
002038EA 0815 0007                   		btst	#7,(a5)			; ON SCREEN flag?
002038EE 6600 0000                   		bne	@next
002038F2                            		
002038F2 4843                       		swap	d3
002038F4                            
002038F4 302E 001C                     		move.w	lvl_x(a6),d0
002038F8 322D 0004                         		move.w	4(a5),d1
002038FC 3400                           		move.w	d0,d2
002038FE 0642 0140                      		add.w	#320,d2
00203902                                		
00203902 0642 0038                     		add.w	#$38,d2
00203906 B242                            		cmp.w	d2,d1
00203908 6E00 0000                        		bgt	@tooright  		
0020390C 0442 0008                     		sub.w	#$8,d2
00203910 B242                            		cmp.w	d2,d1
00203912 6D00 0000                        		blt	@tooright
00203916 363C 0001                        		move.w	#1,d3
0020391A                            @tooright:
0020391A 0440 0038                     		sub.w	#$38,d0
0020391E B240                             		cmp.w	d0,d1
00203920 6D00 0000                         		blt	@tooleft
00203924 0640 0008                     		add.w	#$8,d0
00203928 B240                            		cmp.w	d0,d1
0020392A 6C00 0000                        		bge	@tooleft
0020392E 363C 0001                        		move.w	#1,d3
00203932                            @tooleft:
00203932                            
00203932                            		
00203932 302E 0020                      		move.w	lvl_y(a6),d0
00203936 322D 0006                         		move.w	6(a5),d1
0020393A 3400                            		move.w	d0,d2
0020393C 0642 00E0                      		add.w	#224,d2
00203940                            		
00203940 0642 0058                     		add.w	#$58,d2
00203944 B242                            		cmp.w	d2,d1
00203946 6C00 0000                        		bge	@toodown 		
0020394A 0442 0008                     		sub.w	#$8,d2
0020394E B242                            		cmp.w	d2,d1
00203950 6D00 0000                        		blt	@toodown
00203954 363C 0001                        		move.w	#1,d3
00203958                            @toodown:
00203958 0440 0058                     		sub.w	#$58,d0
0020395C B240                             		cmp.w	d0,d1
0020395E 6D00 0000                         		blt	@tooup
00203962 0640 0008                     		add.w	#$8,d0
00203966 B240                            		cmp.w	d0,d1
00203968 6C00 0000                        		bge	@tooup
0020396C 363C 0001                        		move.w	#1,d3
00203970                            @tooup:
00203970                            
00203970                            
00203970 3003                       		move.w	d3,d0
00203972 4843                       		swap	d3
00203974 4A40                       		tst.w	d0
00203976 6700                       		beq.s	@next
00203978                              		
00203978                            @found_obj:
00203978 7800                         		moveq	#(max_objects-16)-1,d4
0020397A                            @nxtav_obj:
0020397A 4AAC 0000                  		tst.l	obj_code(a4)
0020397E 6700                       		beq.s	@valid
00203980 B62C 0000                  		cmp.b	obj_spwnindx(a4),d3
00203984 6700                       		beq.s	@next
00203986 D8FC 0000                  		adda	#sizeof_obj,a4
0020398A 51CC FFEE                  		dbf	d4,@nxtav_obj
0020398E 6000                       		bra.s	@next
00203990                            		
00203990                            @valid:
00203990 264C                       		movea.l	a4,a3
00203992 323C 0000                  		move.w	#sizeof_obj,d1
00203996                            @cleanup:
00203996 421B                       		clr.b	(a3)+
00203998 51C9 FFFC                  		dbf	d1,@cleanup
0020399C                            		
0020399C 396D 0004 0000             		move.w	4(a5),obj_x(a4)
002039A2 396D 0006 0000             		move.w	6(a5),obj_y(a4)
002039A8 1943 0000                  		move.b	d3,obj_spwnindx(a4)
002039AC                            		
002039AC 7200                          		moveq	#0,d1
002039AE 122D 0008                      		move.b	8(a5),d1
002039B2 422C 0000                      		clr.b	obj_status(a4)
002039B6 0801 0007                      		btst	#7,d1
002039BA 6700                           		beq.s	@dont_flip_l
002039BC 08EC 0030 0000               		bset	#bitobj_flipH,obj_status(a4)
002039C2                            
002039C2                            @dont_flip_l:
002039C2 0801 0006                      		btst	#6,d1
002039C6 6700                           		beq.s	@dont_flip_d
002039C8 08EC 0070 0000               		bset	#bitobj_flipV,obj_status(a4)
002039CE                            @dont_flip_d:
002039CE 122D 0008                   		move.b	8(a5),d1
002039D2 0241 003F                   		and.w	#$3F,d1
002039D6 1941 0000                  		move.b	d1,obj_subid(a4)
002039DA 2015                        		move.l	(a5),d0
002039DC 0280 00FF FFFF               		and.l 	#$FFFFFF,d0
002039E2 2940 0000                   		move.l	d0,obj_code(a4)
002039E6 08D5 0007                   		bset	#7,(a5)			;SET ON SCREEN flag
002039EA D8FC 0000                  		adda	#sizeof_obj,a4
002039EE                            @next:
002039EE 0643 0001                  		add.w	#1,d3
002039F2 DAFC 000A                  		adda	#$A,a5
002039F6 6000 FEE4                  		bra	@next_obj
002039FA                            @finish:
002039FA 4E75                       		rts
002039FC                             	
002039FC                            ; ----------------------------------
002039FC                            ; d0 - ID
002039FC                            ; ----------------------------------
002039FC                            
002039FC                            Lvl_DoHidePrz:
002039FC                            		;TODO: Up/Left checks
002039FC 2800                       		move.l	d0,d4
002039FE E88C                       		lsr.l	#4,d4
00203A00 0244 FFF0                  		and.w	#$FFF0,d4
00203A04 3A2E 0020                   		move.w	lvl_y(a6),d5
00203A08 B845                        		cmp.w	d5,d4
00203A0A 6D00                        		blt.s	LvlPrzReadRet
00203A0C 2800                       		move.l	d0,d4
00203A0E 4844                       		swap	d4
00203A10 0244 FFF0                  		and.w	#$FFF0,d4
00203A14 3A2E 001C                   		move.w	lvl_x(a6),d5
00203A18 B845                        		cmp.w	d5,d4
00203A1A 6D00                        		blt.s	LvlPrzReadRet
00203A1C                             		
00203A1C 2800                        		move.l	d0,d4			;Postion | XXX?????
00203A1E 4844                        		swap	d4			;????XXX?
00203A20 E44C                        		lsr.w	#2,d4			;????0XXX
00203A22 0284 0000 007C              		and.l	#$7C,d4
00203A28 2A00                        		move.l	d0,d5			;???YYY??
00203A2A 0245 0F00                    		and.w	#$F00,d5
00203A2E D845                          		add.w	d5,d4
00203A30 2A3C 4000 0003              		move.l	#$40000003,d5
00203A36 4845                        		swap	d5
00203A38 8A44                        		or.w	d4,d5
00203A3A 4845                        		swap	d5
00203A3C                             		
00203A3C 286E 000C                    		movea.l	lvl_layout(a6),a4	;Layout data
00203A40 2800                        		move.l	d0,d4
00203A42 0284 000F FF00              		and.l	#$000FFF00,d4
00203A48 E08C                        		lsr.l	#8,d4
00203A4A 0284 0000 0FFF              		and.l	#$FFF,d4
00203A50 C8EE 0030                   		mulu.w	lvl_size_x(a6),d4
00203A54 D8C4                        		adda	d4,a4	
00203A56 2800                         		move.l	d0,d4
00203A58 0284 FFF0 0000              		and.l	#$FFF00000,d4
00203A5E 4844                         		swap	d4
00203A60 E84C                         		lsr.w	#4,d4
00203A62 D8C4                          		add.w 	d4,a4
00203A64 7800                           		moveq	#0,d4
00203A66 1814                          		move.b	(a4),d4
00203A68 286E 0004                  		movea.l	lvl_blocks(a6),a4	;Draw blocks
00203A6C 6000                       		bra.s	LvlPrzReadBlk
00203A6E                            LvlPrzReadRet:
00203A6E 4E75                       		rts
00203A70                            		
00203A70                            ; ----------------------------------
00203A70                            ; d0 - ID
00203A70                            ; ----------------------------------
00203A70                            
00203A70                            Lvl_DoShowPrz:
00203A70                            		;TODO: Up/Left checks
00203A70 2800                       		move.l	d0,d4
00203A72 E88C                       		lsr.l	#4,d4
00203A74 0244 FFF0                  		and.w	#$FFF0,d4
00203A78 3A2E 0020                   		move.w	lvl_y(a6),d5
00203A7C B845                        		cmp.w	d5,d4
00203A7E 6DEE                        		blt.s	LvlPrzReadRet
00203A80 2800                       		move.l	d0,d4
00203A82 4844                       		swap	d4
00203A84 0244 FFF0                  		and.w	#$FFF0,d4
00203A88 3A2E 001C                   		move.w	lvl_x(a6),d5
00203A8C B845                        		cmp.w	d5,d4
00203A8E 6DDE                        		blt.s	LvlPrzReadRet
00203A90                             		
00203A90 2800                        		move.l	d0,d4			;Postion | XXX?????
00203A92 4844                        		swap	d4			;????XXX?
00203A94 E44C                        		lsr.w	#2,d4			;????0XXX
00203A96 0284 0000 007C              		and.l	#$7C,d4
00203A9C 2A00                        		move.l	d0,d5			;???YYY??
00203A9E 0285 0000 0F00               		and.l	#$F00,d5
00203AA4 8845                          		or.w	d5,d4
00203AA6 2A3C 4000 0003              		move.l	#$40000003,d5
00203AAC 4845                        		swap	d5
00203AAE 8A44                        		or.w	d4,d5
00203AB0 4845                        		swap	d5 		
00203AB2 286E 0018                    		movea.l	lvl_prizes(a6),a4	;Layout data
00203AB6 2800                        		move.l	d0,d4
00203AB8 0284 000F FF00              		and.l	#$000FFF00,d4
00203ABE E08C                        		lsr.l	#8,d4
00203AC0 0284 0000 0FFF              		and.l	#$FFF,d4
00203AC6 C8EE 0030                   		mulu.w	lvl_size_x(a6),d4
00203ACA                            ;  		lsl.w	#1,d4
00203ACA D8C4                        		adda	d4,a4	
00203ACC 2800                         		move.l	d0,d4
00203ACE 0284 FFF0 0000              		and.l	#$FFF00000,d4
00203AD4 4844                         		swap	d4
00203AD6 E84C                         		lsr.w	#4,d4
00203AD8                            ;    		lsl.w	#1,d4
00203AD8 D8C4                          		add.w	d4,a4
00203ADA 7800                           		moveq	#0,d4
00203ADC 1814                          		move.b	(a4),d4
00203ADE 286E 0008                  		movea.l	lvl_przblocks(a6),a4	;Draw blocks
00203AE2                            		
00203AE2                            LvlPrzReadBlk:
00203AE2 E78C                         		lsl.l	#3,d4
00203AE4 0284 0000 FFFF               		and.l	#$FFFF,d4
00203AEA D8C4                          		adda 	d4,a4
00203AEC                               		
00203AEC 23C5 00C0 0004              		move.l	d5,(vdp_ctrl).l
00203AF2 3814                        		move.w	(a4),d4
00203AF4 4844                        		swap	d4
00203AF6 382C 0004                   		move.w	4(a4),d4
00203AFA 23C4 00C0 0000              		move.l	d4,(vdp_data).l
00203B00 0685 0080 0000              		add.l	#$800000,d5
00203B06 23C5 00C0 0004              		move.l	d5,(vdp_ctrl).l
00203B0C 382C 0002                   		move.w	2(a4),d4
00203B10 4844                        		swap	d4
00203B12 382C 0006                   		move.w	6(a4),d4
00203B16 23C4 00C0 0000              		move.l	d4,(vdp_data).l
00203B1C                            @ignore:
00203B1C 4E75                        		rts	
00203B1E                            		
00203B1E                            ; ----------------------------------		
00203B1E                            ; Load art data
00203B1E                            ; 
00203B1E                            ; a1 - the list
00203B1E                            ; ----------------------------------
00203B1E                            
00203B1E                            Level_LoadArtList:
00203B1E 4A51                       		tst.w	(a1)
00203B20 6B00                       		bmi.s	@Finish
00203B22 2059                       		move.l	(a1)+,a0		;Addr
00203B24 3019                        		move.w	(a1)+,d0		;VRAM
00203B26 3219                        		move.w	(a1)+,d1		;Size
00203B28 6100 C5F4                   		bsr	VDP_SendData_L
00203B2C 60F0                        		bra.s	Level_LoadArtList
00203B2E                             		
00203B2E                            @Finish:
00203B2E 4E75                       		rts
00203B30                            		
00203B30                            ; =================================================================
00203B30                            ; --------------------------------------------
00203B30                            ; Data
00203B30                            ; --------------------------------------------
00203B30                            
00203B30                            vram_prizes:
00203B30 0000 0001 0000 0001        		dc.l $0001,$0001		; $00 FILLER
00203B38 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $01 Breakable: normal
00203B40 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $02  **  **  : 1 coin
00203B48 0580 0581 0582 0583         		dc.w $580,$581,$582,$583	; $03  **  **  : 10 coins
00203B50 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $04  **  **  : ???
00203B58 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $05  **  **  : ???
00203B60 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $06  **  **  : ???
00203B68 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $07  **  **  : 1 up
00203B70 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $08 Block ! : 1 coin
00203B78 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $09  ****   : 10 coins
00203B80 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0A  ****   : ???
00203B88 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0B  ****   : ???
00203B90 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0C  ****   : ???
00203B98 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0D  ****   : ???
00203BA0 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0E  ****   : 1 up
00203BA8 059C 059D 059E 059F        		dc.w $59C,$59D,$59E,$59F	; $0F Empty block
00203BB0                            		
00203BB0 4580 4581 4582 4583        		dc.w $4580,$4581,$4582,$4583	;$10+
00203BB8 4580 4581 4582 4583        		dc.w $4580,$4581,$4582,$4583
00203BC0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203BC8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203BD0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203BD8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203BE0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203BE8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203BF0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
00203BF8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C00 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C08 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C10 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C18 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C20 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C28 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C30                            
00203C30 4594 4595 4596 4597        		dc.w $4594,$4595,$4596,$4597	;$20+ Bouncing block
00203C38 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C40 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C48 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C50 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C58 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C60 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C68 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C70 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
00203C78 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C80 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C88 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C90 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C98 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CA0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CA8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CB0                            		
00203CB0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	;$30+
00203CB8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CC0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CC8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CD0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CD8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CE0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CE8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CF0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
00203CF8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D00 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D08 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D10 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D18 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D20 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D28 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D30                            		
00203D30 45A0 45A1 45A2 45A3        		dc.w $45A0,$45A1,$45A2,$45A3	;$40 - Coins
00203D38 45A4 45A5 45A6 45A7        		dc.w $45A4,$45A5,$45A6,$45A7
00203D40                            		even
00203D40                            
00203D40                            ; --------------------------------------------
00203D40                            
00203D40                            col_SlopeData:
00203D40 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00203D50 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;$01
00203D60 0F0E 0D0C 0B0A 0908 0706+  		dc.b $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00	;$02
00203D70 0001 0203 0405 0607 0809+  		dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F	;$03
00203D80                            		
00203D80 0F0F 0E0E 0D0D 0C0C 0B0B+  		dc.b $0F,$0F,$0E,$0E,$0D,$0D,$0C,$0C,$0B,$0B,$0A,$0A,$09,$09,$08,$08
00203D90 0707 0606 0505 0404 0303+  		dc.b $07,$07,$06,$06,$05,$05,$04,$04,$03,$03,$02,$02,$01,$01,$00,$00
00203DA0                            		
00203DA0 0000 0101 0202 0303 0404+  		dc.b $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
00203DB0 0808 0909 0A0A 0B0B 0C0C+  		dc.b $08,$08,$09,$09,$0A,$0A,$0B,$0B,$0C,$0C,$0D,$0D,$0E,$0E,$0F,$0F
00203DC0                            		
00203DC0 0F0F 0F0F 0E0E 0E0E 0D0D+  		dc.b $0F,$0F,$0F,$0F,$0E,$0E,$0E,$0E,$0D,$0D,$0D,$0D,$0C,$0C,$0C,$0C
00203DD0 0B0B 0B0B 0A0A 0A0A 0909+  		dc.b $0B,$0B,$0B,$0B,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$08,$08,$08,$08
00203DE0 0707 0707 0606 0606 0505+  		dc.b $07,$07,$07,$07,$06,$06,$06,$06,$05,$05,$05,$05,$04,$04,$04,$04
00203DF0 0303 0303 0202 0202 0101+  		dc.b $03,$03,$03,$03,$02,$02,$02,$02,$01,$01,$01,$01,$00,$00,$00,$00
00203E00                            		
00203E00 0000 0000 0101 0101 0202+  		dc.b $00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03
00203E10 0404 0404 0505 0505 0606+  		dc.b $04,$04,$04,$04,$05,$05,$05,$05,$06,$06,$06,$06,$07,$07,$07,$07
00203E20 0808 0808 0909 0909 0A0A+  		dc.b $08,$08,$08,$08,$09,$09,$09,$09,$0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B
00203E30 0C0C 0C0C 0D0D 0D0D 0E0E+  		dc.b $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D,$0E,$0E,$0E,$0E,$0F,$0F,$0F,$0F
00203E40                            		even
00203E40                            		
00203E40                            		
00203E40                            		include	"engine/modes/level/subs/objects.asm"
00203E40                            ; ====================================================================
00203E40                            ; -------------------------------------------------
00203E40                            ; Objects system
00203E40                            ; -------------------------------------------------
00203E40                            
00203E40                            ; NOTES:
00203E40                            ; Current object Slots:
00203E40                            ;   00   | Player 1 (HARD-CODED)
00203E40                            ;   01   | PLANNED (Second player if needed)
00203E40                            ;   02   | HUD (TODO)
00203E40                            ;   03   | Eng flag
00203E40                            ;   04   | FREE
00203E40                            ;   05   | FREE
00203E40                            ;   06   | FREE
00203E40                            ;   07   | FREE
00203E40                            ; 08-15  | Blocks+Action objects (Auto-arrangled)
00203E40                            ; 16-MAX | Level objects (Auto-arrangled)
00203E40                            
00203E40                            ; --------------------------------------------
00203E40                            ; Variables
00203E40                            ; --------------------------------------------
00203E40                            
00203E40 =00000040                  max_objects	equ	64
00203E40 =00000040                  max_microspr	equ	64
00203E40                            
00203E40                            ; --------------------------------------------
00203E40                            
00203E40                            		rsreset
00203E40 =00000000                  obj_code	rs.l	1		; Object code 
00203E40 =00000004                  obj_size	rs.l	1		; Object size (see below)
00203E40                            
00203E40 =00000008                  obj_x		rs.l	1		; Object X Position
00203E40 =0000000C                  obj_y		rs.l	1		; Object Y Position
00203E40 =00000010                  obj_x_spd	rs.l	1		; Object X Speed
00203E40 =00000014                  obj_y_spd	rs.l	1		; Object Y Gravity
00203E40                            ; obj_maps	rs.l	1
00203E40                            
00203E40 =00000018                  obj_anim_next	rs.w	1		; Object animation increment (obj_anim + obj_anim_next)
00203E40 =0000001A                  obj_anim_id	rs.w	1		; Object animation to read (current|saved)
00203E40                            ; obj_vram	rs.w	1		; Object VRAM
00203E40 =0000001C                  obj_anim_spd	rs.b	1		; Object animation delay
00203E40 =0000001D                  obj_index	rs.b	1		; Object code index
00203E40 =0000001E                  obj_status	rs.b	1		; Object status
00203E40 =0000001F                  obj_subid	rs.b	1		; Object SubID
00203E40 =00000020                  obj_frame	rs.b	1		; Object display frame
00203E40                            ; obj_frame_old	rs.b	1		; Object last frame (DMA)
00203E40 =00000021                  obj_spwnindx	rs.b	1		; Object respawn index (this - 1)
00203E40 =00000022                  obj_col		rs.b	1		; Object collision
00203E40 =00000023                  obj_null	rs.b	1		; FILLER
00203E40                            
00203E40 =00000024                  obj_ram		rs.b	$40		; Object RAM
00203E40 =00000064                  sizeof_obj	rs.l	0
00203E40                            
00203E40                            ; --------------------------------
00203E40                            ; obj_size
00203E40                            ; --------------------------------
00203E40                            
00203E40                            		rsreset
00203E40 =00000000                  objsize_l	rs.b	1
00203E40 =00000001                  objsize_r	rs.b	1
00203E40 =00000002                  objsize_u	rs.b	1
00203E40 =00000003                  objsize_d	rs.b	1
00203E40                            
00203E40                            ; --------------------------------
00203E40                            ; obj_status
00203E40                            ; --------------------------------
00203E40                            
00203E40 =00000000                  bitobj_flipH	equ	0		; set to flip Sprite Horizontally
00203E40 =00000001                  bitobj_flipV	equ	1		; set to flip Sprite Vertically
00203E40 =00000002                  bitobj_air	equ	2		; set if floating/jumping
00203E40 =00000003                  bitobj_hurt	equ	3		; set if we are hurt (Touched by enemy or player)
00203E40                            
00203E40 =00000006                  bitobj_hit	equ	6		; set to we can hit objects
00203E40 =00000007                  bitobj_stay	equ	7		; set to stay on-screen
00203E40                            
00203E40                            ; --------------------------------
00203E40                            ; obj_col
00203E40                            ; --------------------------------
00203E40                            
00203E40 =00000000                  bitcol_floor	equ	0		; Set for Touching floor
00203E40 =00000001                  bitcol_ceiling	equ	1		; 
00203E40 =00000002                  bitcol_wall_r	equ	2		; set for Touching floor/wall/Ceiling
00203E40 =00000003                  bitcol_wall_l	equ	3		;
00203E40 =00000004                  bitcol_obj	equ	4
00203E40 =00000005                  bitcol_obju	equ	5
00203E40 =00000006                  bitcol_objl	equ	6
00203E40 =00000007                  bitcol_objr	equ	7
00203E40                            
00203E40                            ; =================================================================
00203E40                            ; ------------------------------------------------
00203E40                            ; RAM
00203E40                            ; ------------------------------------------------
00203E40                            
00203E40                            		rsset RAM_ObjectSys
00203E40 =FFFFC040                  RAM_ObjBuffer	rs.b (sizeof_obj*max_objects)
00203E40 =FFFFD940                  RAM_ObjBackup	rs.l 2
00203E40 =FFFFD948                  RAM_MicrSprBuff	rs.l max_microspr*2
00203E40 =FFFFDB48                  RAM_ObjMaxCoins	rs.l 16
00203E40 =FFFFDB88                  RAM_MicrSprCntr	rs.w 1
00203E40 =FFFFDB8A                  RAM_ObjCount	rs.w 1
00203E40 =FFFFDB8C                  sizeof_objbuff	rs.l 0
00203E40                            ; 		inform 0,"Objects system uses: %h",sizeof_objbuff-RAM_ObjectSys
00203E40                            		
00203E40                            ; ====================================================================		
00203E40                            ; --------------------------------------------
00203E40                            ; Init
00203E40                            ; --------------------------------------------
00203E40                            
00203E40                            Objects_Init:
00203E40 41F9 FFFF C040              		lea	(RAM_ObjBuffer),a0
00203E46 303C 18FF                  		move.w	#(sizeof_obj*max_objects)-1,d0
00203E4A                            @ClrObjs:
00203E4A 4218                        		clr.b	(a0)+
00203E4C 51C8 FFFC                   		dbf	d0,@ClrObjs
00203E50 4279 FFFF DB88              		clr.w	(RAM_MicrSprCntr)
00203E56 4E75                       		rts
00203E58                             
00203E58                            ; ====================================================================	
00203E58                            ; --------------------------------------------
00203E58                            ; Loop
00203E58                            ; --------------------------------------------
00203E58                            
00203E58                            Objects_Run:
00203E58 6100 C7DE                    		bsr	Sprites_Reset
00203E5C                            
00203E5C                            ; -----------------------------
00203E5C                            ; Run objects
00203E5C                            ; -----------------------------
00203E5C                            
00203E5C 4279 FFFF DB8A             		clr.w	(RAM_ObjCount)
00203E62 4DF9 FFFF C040              		lea	(RAM_ObjBuffer),a6
00203E68 3E3C 003F                   		move.w	#max_objects-1,d7
00203E6C                            @Next:
00203E6C 4A96                        		tst.l	(a6)
00203E6E 6700                        		beq.s	@NoAddr
00203E70                             		
00203E70 48F9 4080 FFFF D940         		movem.l	a6/d7,(RAM_ObjBackup)
00203E78 2A6E 0000                    		movea.l	obj_code(a6),a5
00203E7C 4E95                         		jsr	(a5)
00203E7E 4CF9 4080 FFFF D940         		movem.l	(RAM_ObjBackup),a6/d7
00203E86 0679 0001 FFFF DB8A          		add.w	#1,(RAM_ObjCount)
00203E8E                            @NoAddr:
00203E8E DCFC 0064                   		adda	#sizeof_obj,a6
00203E92 51CF FFD8                   		dbf	d7,@Next
00203E96                             		
00203E96                            ; -----------------------------
00203E96                            ; Show the sprites
00203E96                            ; -----------------------------
00203E96                            
00203E96                            ; Object_DrawObjects:
00203E96 45F9 FFFF D948              		lea	(RAM_MicrSprBuff),a2
00203E9C                            @NextFrm:
00203E9C 4A92                        		tst.l	(a2)
00203E9E 6700                        		beq.s	@NoAddrFrm
00203EA0 6100 0000                   		bsr	Object_MicroToSpr
00203EA4 429A                        		clr.l	(a2)+
00203EA6 429A                        		clr.l	(a2)+
00203EA8 60F2                         		bra.s	@NextFrm
00203EAA                            @NoAddrFrm:
00203EAA 4279 FFFF DB88               		clr.w	(RAM_MicrSprCntr)
00203EB0 4E75                       		rts
00203EB2                            ; 		inform 0,"%h",RAM_MicrSprBuff
00203EB2                            		
00203EB2                            ; ====================================================================
00203EB2                            ; ----------------------------------------------
00203EB2                            ; Subs
00203EB2                            ; ----------------------------------------------
00203EB2                            
00203EB2                            ; **********************************************
00203EB2                            ; Object display
00203EB2                            ; **********************************************
00203EB2                            
00203EB2                            ; ----------------------------------------------
00203EB2                            ; Object_DynArt
00203EB2                            ; 
00203EB2                            ; Input:
00203EB2                            ; d0 | LONG - VRAM|Frame
00203EB2                            ; d1 | LONG - DPLC data
00203EB2                            ; d2 | LONG - Art data
00203EB2                            ;
00203EB2                            ; Uses:
00203EB2                            ; a3/d3-d7
00203EB2                            ; ----------------------------------------------
00203EB2                             
00203EB2                            Object_DPLC:
00203EB2                            ; 		cmp.b	obj_frame_old(a6),d0
00203EB2                            ; 		beq.s	@EndAll
00203EB2 0240 00FF                  		and.w	#$FF,d0
00203EB6                            ; 		move.b	d0,obj_frame_old(a6)
00203EB6 2641                       		movea.l	d1,a3
00203EB8 E348                       		lsl.w	#1,d0
00203EBA D6F3 0000                      		adda	(a3,d0.w),a3
00203EBE 7C00                          		moveq	#0,d6
00203EC0 3C1B                          		move.w	(a3)+,d6
00203EC2 6700 0000                     		beq	@EndAll
00203EC6 0446 0001                     		sub.w	#1,d6
00203ECA 4840                          		swap	d0
00203ECC 0240 07FF                     		and.w	#$7FF,d0
00203ED0 7A00                          		moveq	#0,d5
00203ED2 3A00                          		move.w	d0,d5		;d5 - VRAM (base)
00203ED4 2E02                          		move.l	d2,d7
00203ED6                            @Next:
00203ED6 3213                            		move.w	(a3),d1
00203ED8 E049                            		lsr.w	#8,d1
00203EDA 3801                            		move.w	d1,d4
00203EDC E84C                            		lsr.w	#4,d4		;d4 - Next VRAM
00203EDE 0244 000F                       		and.w	#$F,d4
00203EE2 0644 0001                       		add.w	#1,d4
00203EE6 0641 0010                       		add.w	#$10,d1		;Size + 1
00203EEA 4841                            		swap	d1		;Size|ROM+Here
00203EEC 321B                             		move.w	(a3)+,d1
00203EEE 0241 0FFF                        		and.w	#$FFF,d1
00203EF2 EB49                            		lsl.w	#5,d1
00203EF4 2007                            		move.l	d7,d0
00203EF6 7600                             		moveq	#0,d3
00203EF8 3601                             		move.w	d1,d3
00203EFA D083                             		add.l	d3,d0		;ROM Addr + Cell number
00203EFC                                 		
00203EFC 4841                       		swap	d1		;(Broken)|Size
00203EFE 3405                       		move.w	d5,d2
00203F00 6100 C702                      		bsr	DMA_Set		;** TODO **
00203F04 DA44                       		add.w	d4,d5		;Next VRAM
00203F06 51CE FFCE                     		dbf	d6,@Next
00203F0A                             
00203F0A                            @EndAll:
00203F0A 4E75                        		rts
00203F0C                             
00203F0C                            ; ----------------------------------------------
00203F0C                            ; Object_Show
00203F0C                            ; 
00203F0C                            ; Input:
00203F0C                            ; a6 - Current object
00203F0C                            ; d0 - VRAM | Frame
00203F0C                            ; 
00203F0C                            ; Uses:
00203F0C                            ; a3/d0-d1
00203F0C                            ; 
00203F0C                            ; WARNING: WITH THIS METHOD, OBJECTS MUST BE
00203F0C                            ; AFTER $FF8000 SO IT CAN CORRECTLY
00203F0C                            ; CHECK BETWEEN OBJECTS AND
00203F0C                            ; SEPARATE SPRITES
00203F0C                            ; ----------------------------------------------
00203F0C                            
00203F0C                            Object_Show:	
00203F0C 47F9 FFFF D948             		lea	(RAM_MicrSprBuff),a3
00203F12 3439 FFFF DB88             		move.w	(RAM_MicrSprCntr),d2
00203F18 E74A                       		lsl.w	#3,d2
00203F1A D6C2                       		adda	d2,a3
00203F1C                            ; @next:		
00203F1C                            ; 		tst.l	(a3)
00203F1C                            ; 		beq.s	@free
00203F1C                            ; 		adda	#8,a3
00203F1C                            ; 		bra.s	@next
00203F1C                            @free:
00203F1C B6FC DB48                   		cmpa.w	#(RAM_MicrSprBuff+($200))&$FFFF,a3	; TODO: mejor check
00203F20 6C00                        		bge.s	@full
00203F22                             		
00203F22 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00203F28 342E 0008                   		move.w	obj_x(a6),d2
00203F2C 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00203F32 6600                        		bne.s	@onscrn_X
00203F34 946D 001C                   		sub.w	lvl_x(a5),d2
00203F38                            @onscrn_X:
00203F38 0642 0080                   		add.w	#$80,d2
00203F3C 0C42 0040                    		cmp.w	#$40,d2
00203F40 6D00 0000                    		blt	@full
00203F44 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
00203F48 6E00 0000                   		bgt	@full
00203F4C                            
00203F4C 4842                        		swap	d2
00203F4E 342E 000C                   		move.w	obj_y(a6),d2
00203F52 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00203F58 6600                        		bne.s	@onscrn_Y
00203F5A 946D 0020                  		sub.w	lvl_y(a5),d2
00203F5E                            @onscrn_Y:
00203F5E 0642 0080                   		add.w	#$80,d2
00203F62 0C42 0040                   		cmp.w	#$40,d2
00203F66 6D00 0000                   		blt	@full
00203F6A 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
00203F6E 6E00 0000                  		bgt	@full
00203F72                                		
00203F72 36CE                       		move.w	a6,(a3)+	; (Object_RAM & $FFFF)
00203F74 0240 00FF                  		and.w	#$FF,d0
00203F78 E148                       		lsl.w	#8,d0
00203F7A 4840                       		swap	d0
00203F7C 36C0                       		move.w	d0,(a3)+	; VRAM
00203F7E 4240                       		clr.w	d0
00203F80 8280                        		or.l	d0,d1	
00203F82 26C1                       		move.l	d1,(a3)+	; Frame | Maps data
00203F84                            		
00203F84 0679 0001 FFFF DB88        		add.w	#1,(RAM_MicrSprCntr)
00203F8C                            @full:		
00203F8C 4E75                        		rts
00203F8E                            
00203F8E                            ; ----------------------------------------------
00203F8E                            ; Object_ExtSprite
00203F8E                            ; 
00203F8E                            ; Input:
00203F8E                            ; d0 -    X | Y
00203F8E                            ; d1 - Size | VRAM
00203F8E                            ; 
00203F8E                            ; Uses:
00203F8E                            ; d4-d5, a3
00203F8E                            ; ----------------------------------------------
00203F8E                            
00203F8E                            Object_ExtSprite:
00203F8E 47F9 FFFF D948             		lea	(RAM_MicrSprBuff),a3
00203F94 7800                       		moveq	#0,d4
00203F96 3839 FFFF DB88             		move.w	(RAM_MicrSprCntr),d4
00203F9C E74C                       		lsl.w	#3,d4
00203F9E D6C4                       		adda	d4,a3
00203FA0                            ; @next:		
00203FA0                            ; 		tst.l	(a3)
00203FA0                            ; 		beq.s	@free
00203FA0                            ; 		adda	#8,a3
00203FA0                            ; 		bra.s	@next
00203FA0                            @free:
00203FA0 B6FC DB48                   		cmpa.w	#(RAM_MicrSprBuff+($200))&$FFFF,a3	; TODO: mejor check
00203FA4 6C00                        		bge.s	@full
00203FA6                             		
00203FA6 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00203FAC                            		
00203FAC 2A00                       		move.l	d0,d5
00203FAE 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00203FB4 6600                        		bne.s	@onscrn_Y
00203FB6 9A6D 0020                    		sub.w	lvl_y(a5),d5
00203FBA                            @onscrn_Y:
00203FBA 0645 0080                    		add.w	#$80,d5
00203FBE 0C45 0040                   		cmp.w	#$40,d5
00203FC2 6D00 0000                   		blt	@full
00203FC6 0C45 01A0                  		cmp.w	#(224+$80)+$40,d5
00203FCA 6E00 0000                  		bgt	@full
00203FCE 0245 7FFF                   		and.w	#$7FFF,d5
00203FD2 3685                         		move.w	d5,(a3)
00203FD4                            
00203FD4 4845                       		swap	d5
00203FD6 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00203FDC 6600                        		bne.s	@onscrn_X
00203FDE 9A6D 001C                     		sub.w	lvl_x(a5),d5
00203FE2                            @onscrn_X:
00203FE2 0645 0080                    		add.w	#$80,d5
00203FE6 0C45 0040                    		cmp.w	#$40,d5
00203FEA 6D00 0000                    		blt	@full
00203FEE 0C45 0200                   		cmp.w	#(320+$80)+$40,d5
00203FF2 6E00 0000                   		bgt	@full
00203FF6 0245 7FFF                  		and.w	#$7FFF,d5
00203FFA 3745 0006                    		move.w	d5,6(a3)
00203FFE                            
00203FFE 2801                         		move.l	d1,d4
00204000 3744 0004                   		move.w	d4,4(a3)
00204004 4844                        		swap	d4
00204006 3A04                        		move.w	d4,d5
00204008 0245 000F                   		and.w	#$F,d5
0020400C 3745 0002                     		move.w	d5,2(a3)
00204010 4844                          		swap	d4
00204012                               		
00204012 0679 0001 FFFF DB88           		add.w	#1,(RAM_MicrSprCntr)
0020401A                            @full:		
0020401A 4E75                        		rts
0020401C                             		
0020401C                            ; ----------------------------------------------
0020401C                            ; Object_Delete
0020401C                            ; 
0020401C                            ; Input:
0020401C                            ; a6 - Current object
0020401C                            ; ----------------------------------------------
0020401C                            
0020401C                            Object_Delete:
0020401C 7000                       		moveq	#0,d0
0020401E 102E 0021                  		move.b 	obj_spwnindx(a6),d0
00204022 4A00                       		tst.b	d0
00204024 6700                       		beq.s	@offindx
00204026 0440 0001                  		sub.w	#1,d0
0020402A C0FC 000A                  		mulu.w	#$A,d0
0020402E 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
00204034 DAC0                       		adda	d0,a5
00204036 0895 0007                  		bclr	#7,(a5)			;Reset ON SCREEN flag
0020403A                            @offindx:
0020403A                            
0020403A                            ;  		clr.l	obj_code(a6)
0020403A                            ; 		clr.b	obj_index(a6)
0020403A                            		
0020403A 303C 0063                  		move.w	#sizeof_obj-1,d0
0020403E                            @delete:
0020403E 421E                       		clr.b	(a6)+
00204040 51C8 FFFC                  		dbf	d0,@delete
00204044 4E75                        		rts
00204046                             		
00204046                            ; ----------------------------------------------
00204046                            ; Object_MicroToSpr
00204046                            ; 
00204046                            ; grab an entry from the microlist
00204046                            ; and convert it to sprites
00204046                            ; ----------------------------------------------
00204046                            
00204046                            Object_MicroToSpr:
00204046 7000                       		moveq	#0,d0
00204048 3012                       		move.w	(a2),d0
0020404A 4A40                       		tst.w	d0
0020404C 6B00                       		bmi.s	@FromObject
0020404E                            		
0020404E 4BF9 FFFF E5C0              		lea	(RAM_SprControl),a5
00204054 286D 0000                  		movea.l	sprite_free(a5),a4
00204058 B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
0020405C 6E00 0000                   		bgt	Object_Return
00204060                             		
00204060 3412                         		move.w	(a2),d2
00204062 0C42 0040                   		cmp.w	#$40,d2
00204066 6D00 0000                   		blt	@no_sprite
0020406A 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
0020406E 6E00 0000                  		bgt	@no_sprite
00204072 3882                        		move.w	d2,(a4)
00204074 342A 0006                   		move.w	6(a2),d2
00204078 0C42 0040                    		cmp.w	#$40,d2
0020407C 6D00 0000                    		blt	@no_sprite
00204080 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
00204084 6E00 0000                   		bgt	@no_sprite
00204088 3942 0006                   		move.w	d2,6(a4)
0020408C                            	
0020408C 342A 0002                  		move.w	2(a2),d2
00204090 302D 0004                  		move.w	sprite_link(a5),d0
00204094 066D 0001 0004              		add.w	#1,sprite_link(a5)
0020409A E14A                            		lsl.w	#8,d2
0020409C 0242 0F00                  		and.w	#$0F00,d2
002040A0 8042                       		or.w	d2,d0
002040A2 3940 0002                  		move.w	d0,2(a4)
002040A6 396A 0004 0004             		move.w	4(a2),4(a4)
002040AC                             
002040AC D8FC 0008                    		adda	#8,a4
002040B0 2B4C 0000                  		move.l	a4,sprite_free(a5)
002040B4 4E75                       		rts
002040B6                            
002040B6                            @no_sprite:
002040B6 4294                       		clr.l	(a4)
002040B8 42AC 0004                  		clr.l	4(a4)
002040BC 4E75                       		rts
002040BE                            		
002040BE                            ; ----------------------------------------------
002040BE                            
002040BE                            @FromObject:
002040BE 0080 00FF 0000             		or.l	#$FF0000,d0
002040C4 2C40                       		movea.l	d0,a6
002040C6 302A 0002                   		move.w	2(a2),d0
002040CA 4840                       		swap	d0
002040CC 102A 0004                  		move.b	4(a2),d0
002040D0 0240 00FF                  		and.w	#$FF,d0
002040D4 222A 0004                  		move.l	4(a2),d1
002040D8 0281 00FF FFFF             		and.l	#$FFFFFF,d1
002040DE                            		
002040DE 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
002040E4 342E 0008                   		move.w	obj_x(a6),d2
002040E8 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
002040EE 6600                        		bne.s	@onscrn_X_obj
002040F0 946D 001C                   		sub.w	lvl_x(a5),d2
002040F4                            @onscrn_X_obj:
002040F4 0642 0080                   		add.w	#$80,d2
002040F8 0C42 0040                    		cmp.w	#$40,d2
002040FC 6D00 0000                    		blt	Object_Return
00204100 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
00204104 6E00 0000                   		bgt	Object_Return
00204108 4842                        		swap	d2
0020410A 342E 000C                   		move.w	obj_y(a6),d2
0020410E 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00204114 6600                        		bne.s	@onscrn_Y_obj
00204116 946D 0020                  		sub.w	lvl_y(a5),d2
0020411A                            @onscrn_Y_obj:
0020411A 0642 0080                   		add.w	#$80,d2
0020411E 0C42 0040                   		cmp.w	#$40,d2
00204122 6D00 0000                   		blt	Object_Return
00204126 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
0020412A 6E00 0000                  		bgt	Object_Return
0020412E                            
0020412E 4243                       		clr.w	d3
00204130 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00204136 6700                       		beq.s	@Right_LR
00204138 08C3 0000                  		bset	#0,d3
0020413C                            @Right_LR:
0020413C 082E 0001 001E             		btst	#bitobj_flipV,obj_status(a6)
00204142 6700                       		beq.s	@Right_UD
00204144 08C3 0001                  		bset	#1,d3
00204148                            @Right_UD:
00204148                            
00204148                            ; ----------------------------------------------
00204148                            ; Object_BldSpr_List
00204148                            ; 
00204148                            ; Input:
00204148                            ; d0 - VRAM|Frame
00204148                            ; d1 - Mappings data address
00204148                            ; d2 - X-pos|Y-pos 
00204148                            ; d3 - Flags
00204148                            ;
00204148                            ; Output:
00204148                            ; d3 - New sprite link
00204148                            ; 
00204148                            ; Uses:
00204148                            ; a3-a5/d4
00204148                            ; ----------------------------------------------
00204148                            
00204148                            ; TODO: esto no checa el final
00204148                            
00204148                            Object_BldSpr_List:
00204148 4BF9 FFFF E5C0              		lea	(RAM_SprControl),a5
0020414E 286D 0000                  		movea.l	sprite_free(a5),a4
00204152 B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
00204156 6E00 0000                   		bgt	Object_Return
0020415A                             		
0020415A 2641                        		movea.l	d1,a3
0020415C E348                        		lsl.w	#1,d0
0020415E D6F3 0000                   		adda	(a3,d0.w),a3
00204162                             		
00204162 0283 0000 FFFF             		and.l	#$FFFF,d3
00204168 7C00                        		moveq	#0,d6
0020416A 1C1B                        		move.b	(a3)+,d6
0020416C 6700 0000                   		beq	Object_Return
00204170 0446 0001                   		sub.w	#1,d6
00204174                            @Next:
00204174                            
00204174                            ; ------------
00204174                            ; Ypos check
00204174                            ; ------------
00204174                            
00204174                            ; TODO: hacer el mismo fix de abajo despues
00204174                            
00204174 3202                       		move.w	d2,d1
00204176 1013                        		move.b	(a3),d0
00204178 4880                        		ext.w	d0
0020417A                             		
0020417A 0803 0001                     		btst	#1,d3		; VFlip flag?
0020417E 6700 0000                    		beq	@DontFlip
00204182 182B 0001                   		move.b	1(a3),d4
00204186 0244 0003                    		and.w	#%11,d4
0020418A E74C                         		lsl.w	#3,d4
0020418C D044                         		add.w	d4,d0
0020418E 4440                       		neg.w	d0
00204190                            @DontFlip:
00204190 D240                        		add.w	d0,d1
00204192 1039 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d0
00204198 0240 0006                   		and.w	#%00000110,d0
0020419C 6700                        		beq.s	@normal
0020419E 0641 0070                  		add.w	#$70,d1	
002041A2                            @normal:
002041A2 38C1                        		move.w	d1,(a4)+
002041A4                            		
002041A4                            ; ------------
002041A4                            ; Size
002041A4                            ; ------------
002041A4                            
002041A4 18EB 0001                   		move.b	1(a3),(a4)+		; Size
002041A8 4240                        		clr.w	d0
002041AA 102D 0005                   		move.b	5(a5),d0
002041AE D02D 0004                   		add.b	sprite_link(a5),d0
002041B2 18C0                        		move.b	d0,(a4)+		; Link
002041B4 066D 0001 0004              		add.w	#1,sprite_link(a5)
002041BA                             
002041BA                            ; ------------
002041BA                            ; Vram
002041BA                            ; ------------
002041BA                            
002041BA 4240                         		clr.w	d0			; Vram
002041BC 102B 0002                    		move.b	2(a3),d0
002041C0 E148                         		lsl.w	#8,d0
002041C2 102B 0003                    		move.b	3(a3),d0
002041C6 4840                         		swap	d0
002041C8 3200                         		move.w	d0,d1
002041CA 4840                         		swap	d0
002041CC D240                         		add.w	d0,d1
002041CE                              	
002041CE 0803 0000                     		btst	#0,d3			;Left flag?
002041D2 6700                          		beq.s	@Right
002041D4 0041 0800                     		or.w	#$800,d1
002041D8                            @Right:
002041D8 0803 0001                     		btst	#1,d3			;V flag?
002041DC 6700                          		beq.s	@Down
002041DE 0041 1000                     		or.w	#$1000,d1
002041E2                            @Down:
002041E2 38C1                         		move.w	d1,(a4)+
002041E4                            		
002041E4                            ; ------------
002041E4                            ; Xpos check
002041E4                            ; ------------
002041E4                            
002041E4 4240                        		clr.w	d0
002041E6 7200                        		moveq	#0,d1
002041E8 7800                        		moveq	#0,d4
002041EA 4842                        		swap	d2
002041EC 3202                        		move.w	d2,d1
002041EE 4842                        		swap	d2
002041F0                             		
002041F0 102B 0004                   		move.b	4(a3),d0
002041F4 4880                        		ext.w	d0
002041F6 0803 0000                     		btst	#0,d3			;Left flag?
002041FA 6700 0000                    		beq	@ContX
002041FE                            
002041FE 182B 0001                   		move.b	1(a3),d4
00204202 0244 000C                    		and.w	#%1100,d4
00204206 E34C                         		lsl.w	#1,d4
00204208 D044                         		add.w	d4,d0
0020420A 4440                       		neg.w	d0
0020420C 0440 0008                    		sub.w	#8,d0			;TODO: mala idea
00204210                            
00204210                            @ContX:
00204210 D240                        		add.w	d0,d1
00204212 38C1                        		move.w	d1,(a4)+
00204214 D6FC 0005                   		adda 	#5,a3
00204218 51CE FF5A                   		dbf	d6,@Next
0020421C 2B4C 0000                   		move.l	a4,sprite_free(a5)
00204220                             		
00204220 B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
00204224 6E00                        		bgt.s	Object_Return
00204226 429C                        		clr.l	(a4)+
00204228 429C                        		clr.l	(a4)+
0020422A                            Object_Return:
0020422A 4E75                        		rts
0020422C                             		
0020422C                            ; ----------------------------------------------
0020422C                            ; Object_IsGone
0020422C                            ; ----------------------------------------------
0020422C                            
0020422C                            Object_IsGone:
0020422C 7000                       		moveq	#0,d0
0020422E 102E 0021                  		move.b 	obj_spwnindx(a6),d0
00204232 4A00                       		tst.b	d0
00204234 6700                       		beq.s	@offindx
00204236 0440 0001                  		sub.w	#1,d0
0020423A C0FC 000A                  		mulu.w	#$A,d0
0020423E 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
00204244 DAC0                       		adda	d0,a5
00204246 08D5 0006                  		bset	#6,(a5)			; Set GONE flag
0020424A                            @offindx:
0020424A 4E75                       		rts
0020424C                            		
0020424C                            ; ----------------------------------------------
0020424C                            ; Object_OffCheck
0020424C                            ; ----------------------------------------------
0020424C                            
0020424C                            Object_OffCheck:
0020424C 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204252 49F9 FFFF BC42             		lea	(RAM_LevelObjPos),a4
00204258                            		
00204258 7000                       		moveq	#0,d0
0020425A 102E 0021                  		move.b 	obj_spwnindx(a6),d0
0020425E 4A00                       		tst.b	d0
00204260 6700                       		beq.s	@return
00204262 0440 0001                  		sub.w	#1,d0
00204266 C0FC 000A                  		mulu.w	#$A,d0
0020426A D8C0                       		adda	d0,a4
0020426C                            		
0020426C 302D 0020                     		move.w	lvl_y(a5),d0
00204270 3400                          		move.w	d0,d2
00204272 322E 000C                       		move.w	obj_y(a6),d1
00204276 0641 0060                       		add.w	#$60,d1
0020427A B240                            		cmp.w	d0,d1
0020427C 6D00                            		blt.s	Object_OffDelete
0020427E 0642 0140                         		add.w	#224+$60,d2
00204282 322E 000C                        		move.w	obj_y(a6),d1
00204286 B242                             		cmp.w	d2,d1
00204288 6E00                             		bgt.s	Object_OffDelete
0020428A                                 		
0020428A 302D 001C                    		move.w	lvl_x(a5),d0
0020428E 3400                         		move.w	d0,d2
00204290 322E 0008                      		move.w	obj_x(a6),d1
00204294 0641 0040                      		add.w	#$40,d1
00204298 B240                           		cmp.w	d0,d1
0020429A 6D00                           		blt.s	Object_OffDelete
0020429C 0642 0180                        		add.w	#320+$40,d2		;TODO: horizontal mode 
002042A0 322E 0008                       		move.w	obj_x(a6),d1
002042A4 B242                            		cmp.w	d2,d1
002042A6 6E00                            		bgt.s	Object_OffDelete
002042A8                                 		
002042A8                            ;      		; Check for suicide
002042A8                            ; 		move.w	lvl_size_y(a5),d0		; Bottomless pit
002042A8                            ; 		lsl.w	#4,d0
002042A8                            ; 		move.w	obj_y(a6),d1
002042A8                            ; 		moveq	#0,d2
002042A8                            ; 		move.b	obj_size+2(a6),d2
002042A8                            ; 		lsl.w	#3,d2
002042A8                            ; 		sub.w	d2,d1
002042A8                            ; 		cmp.w	d0,d1
002042A8                            ; 		blt	@return
002042A8                            ; 		
002042A8                            ; 		bset	#7,(a4)
002042A8                            ; 		clr.l	obj_code(a6)
002042A8                            ; 		clr.b	obj_index(a6)
002042A8                            @return:
002042A8 4E75                       		rts
002042AA                            		
002042AA                            ; a4 - respawn slot of this object
002042AA                            
002042AA                            Object_OffDelete:
002042AA 0894 0007                  		bclr	#7,(a4)			; Reset ON SCREEN flag
002042AE                            @offindx:
002042AE                            
002042AE 42AE 0000                  		clr.l	obj_code(a6)
002042B2 422E 001D                  		clr.b	obj_index(a6)
002042B6                            @Return:
002042B6 4E75                        		rts
002042B8                            		
002042B8                            ; ----------------------------------------------
002042B8                            ; Object animation
002042B8                            ; 
002042B8                            ; Input
002042B8                            ; d1 | LONG - Animation data
002042B8                            ; 
002042B8                            ; Output
002042B8                            ; d0 | WORD - Frame
002042B8                            ; 
002042B8                            ; Uses:
002042B8                            ; d2
002042B8                            ; ----------------------------------------------
002042B8                             
002042B8                            Object_Animate:
002042B8 4A81                        		tst.l	d1
002042BA 6700                         		beq.s	@Return
002042BC 7400                        		moveq	#0,d2
002042BE 142E 001B                   		move.b	obj_anim_id+1(a6),d2
002042C2 B42E 001A                   		cmp.b	obj_anim_id(a6),d2
002042C6 6700                        		beq.s	@SameThing
002042C8 1D6E 001A 001B              		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
002042CE 426E 0018                   		clr.w	obj_anim_next(a6)
002042D2                            @SameThing:
002042D2 142E 001A                   		move.b	obj_anim_id(a6),d2
002042D6 0C02 00FF                   		cmp.b	#-1,d2
002042DA 6700                        		beq.s	@Return
002042DC E34A                        		lsl.w	#1,d2
002042DE 2041                       		movea.l	d1,a0
002042E0 D0F0 2000                   		adda	(a0,d2.w),a0
002042E4                             
002042E4 1418                        		move.b	(a0)+,d2
002042E6 0C02 00FF                   		cmp.b	#-1,d2
002042EA 6700                        		beq.s	@keepspd
002042EC 042E 0001 001C              		sub.b	#1,obj_anim_spd(a6)
002042F2 6A00                        		bpl.s	@Return
002042F4 1D42 001C                  		move.b	d2,obj_anim_spd(a6)
002042F8                            @keepspd:
002042F8 7200                        		moveq	#0,d1
002042FA 342E 0018                   		move.w	obj_anim_next(a6),d2
002042FE 1210                        		move.b	(a0),d1
00204300 D0C2                        		adda	d2,a0
00204302                             
00204302 0280 FFFF 0000              		and.l	#$FFFF0000,d0
00204308 1010                        		move.b	(a0),d0
0020430A 0C00 00FF                   		cmp.b	#$FF,d0
0020430E 6700                        		beq.s	@NoAnim
00204310 0C00 00FE                   		cmp.b	#$FE,d0
00204314 6700                        		beq.s	@GoToFrame
00204316 0C00 00FD                   		cmp.b	#$FD,d0
0020431A 6700                        		beq.s	@LastFrame
0020431C                             		
0020431C 1D40 0020                   		move.b	d0,obj_frame(a6)
00204320 066E 0001 0018              		add.w	#1,obj_anim_next(a6)
00204326                            @Return:
00204326 4E75                        		rts
00204328                             
00204328                            @NoAnim:
00204328 3D7C 0001 0018              		move.w	#1,obj_anim_next(a6)
0020432E 3001                        		move.w	d1,d0
00204330 1D40 0020                   		move.b	d0,obj_frame(a6)
00204334 4E75                       		rts
00204336                            @LastFrame:
00204336 422E 001C                   		clr.b	obj_anim_spd(a6)
0020433A 4E75                       		rts
0020433C                            @GoToFrame:
0020433C 426E 0018                  		clr.w	obj_anim_next(a6)
00204340 1D68 0001 0019             		move.b	1(a0),obj_anim_next+1(a6)
00204346 4E75                       		rts
00204348                            	
00204348                            ; ------------------------------------------------
00204348                            
00204348                            Object_ShowPoints:
00204348 302E 0008                   		move.w	obj_x(a6),d0
0020434C 0440 0004                   		sub.w	#4,d0
00204350 4840                        		swap	d0
00204352 302E 000C                   		move.w	obj_y(a6),d0
00204356 0440 0004                   		sub.w	#4,d0
0020435A 7200                        		moveq	#0,d1
0020435C 323C 0587                   		move.w	#$587,d1
00204360 6000 FC2C                   		bra	Object_ExtSprite
00204364                             		
00204364                             		
00204364 382E 000C                   		move.w	obj_y(a6),d4
00204368 7400                        		moveq	#0,d2
0020436A 142E 0007                   		move.b	obj_size+3(a6),d2
0020436E E74A                        		lsl.w	#3,d2
00204370 D842                        		add.w	d2,d4
00204372 6100 0000                   		bsr	@leftright
00204376 382E 000C                   		move.w	obj_y(a6),d4
0020437A 7400                        		moveq	#0,d2
0020437C 142E 0006                   		move.b	obj_size+2(a6),d2
00204380 E74A                        		lsl.w	#3,d2
00204382 9842                        		sub.w	d2,d4
00204384                            
00204384                            ;  		rts
00204384                            @leftright:
00204384 302E 0008                   		move.w	obj_x(a6),d0
00204388 0440 0002                   		sub.w	#2,d0
0020438C 4840                        		swap	d0
0020438E 3004                        		move.w	d4,d0
00204390 7200                        		moveq	#0,d1
00204392 323C 0587                   		move.w	#$587,d1
00204396 6100 FBF6                   		bsr	Object_ExtSprite
0020439A                             		
0020439A 302E 0008                   		move.w	obj_x(a6),d0
0020439E 7400                        		moveq	#0,d2
002043A0 142E 0004                   		move.b	obj_size(a6),d2
002043A4 E74A                        		lsl.w	#3,d2
002043A6 9042                        		sub.w	d2,d0
002043A8 4840                        		swap	d0
002043AA 3004                        		move.w	d4,d0
002043AC 6100 FBE0                   		bsr	Object_ExtSprite
002043B0                             		
002043B0 302E 0008                   		move.w	obj_x(a6),d0
002043B4 0440 0003                   		sub.w	#3,d0
002043B8 7400                        		moveq	#0,d2
002043BA 142E 0005                   		move.b	obj_size+1(a6),d2
002043BE E74A                        		lsl.w	#3,d2
002043C0 D042                        		add.w	d2,d0
002043C2 4840                        		swap	d0
002043C4 3004                        		move.w	d4,d0
002043C6 6000 FBC6                   		bra	Object_ExtSprite
002043CA                             	
002043CA                            ; **********************************************
002043CA                            ; Object level collision
002043CA                            ; **********************************************
002043CA                            
002043CA                            ; ************************
002043CA                            ; Find floor collision
002043CA                            ; CENTER
002043CA                            ; 
002043CA                            ; Input:
002043CA                            ; a6 - Object to read
002043CA                            ; a5 - Level buffer
002043CA                            ; a4 - Layout data
002043CA                            ; 
002043CA                            ; Output:
002043CA                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
002043CA                            ; 
002043CA                            ; Uses:
002043CA                            ; a3-a4 | d4-d5
002043CA                            ; ************************
002043CA                            
002043CA                            object_FindPrz_Floor:
002043CA 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
002043D0 286D 0018                    		movea.l	lvl_prizes(a5),a4
002043D4 6000                         		bra.s	objSearchCol_Floor
002043D6                              		
002043D6                            object_FindCol_Floor:
002043D6 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
002043DC 286D 0014                    		movea.l	lvl_collision(a5),a4
002043E0                            
002043E0                            objSearchCol_Floor:
002043E0 7000                       		moveq	#0,d0
002043E2 7800                       		moveq	#0,d4
002043E4 7A00                       		moveq	#0,d5
002043E6 382E 000C                   		move.w	obj_y(a6),d4
002043EA 1A2E 0007                   		move.b	obj_size+3(a6),d5
002043EE E74D                        		lsl.w	#3,d5
002043F0 D845                        		add.w	d5,d4
002043F2 4A44                        		tst.w	d4
002043F4 6B00 0000                   		bmi	@no_col
002043F8 3A2D 0032                   		move.w	lvl_size_y(a5),d5
002043FC E94D                        		lsl.w	#4,d5
002043FE B845                        		cmp.w	d5,d4
00204400 6C00 0000                   		bge	@no_col
00204404 3A04                        		move.w	d4,d5
00204406 E98D                          		lsl.l	#4,d5
00204408 2005                           		move.l	d5,d0
0020440A E84C                         		lsr.w	#4,d4
0020440C C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
00204410 D8C4                         		adda	d4,a4
00204412                             		
00204412                            ; ------------------------
00204412                            ; X check
00204412                            ; ------------------------
00204412                            
00204412 264C                         		movea.l	a4,a3
00204414 382E 0008                   		move.w	obj_x(a6),d4
00204418 4A44                        		tst.w	d4
0020441A 6B00                        		bmi.s	@force_on
0020441C 3A2D 0030                   		move.w	lvl_size_x(a5),d5
00204420 E94D                        		lsl.w	#4,d5
00204422 B845                         		cmp.w	d5,d4
00204424 6C00                         		bge.s	@force_on
00204426 E84C                        		lsr.w	#4,d4
00204428 D6C4                        		adda 	d4,a3
0020442A                            ;  		btst	#7,(a3)
0020442A                            ;  		bne.s	@no_col
0020442A                            ;  		tst.b	(a3)
0020442A                            ;  		beq.s	@no_col
0020442A E94C                        		lsl.w	#4,d4
0020442C 4844                        		swap	d4
0020442E 8084                        		or.l	d4,d0			;XXXYYY00
00204430                               		
00204430 1013                        		move.b	(a3),d0	
00204432 4E75                        		rts
00204434                             		
00204434                            @force_on:
00204434 7001                        		moveq	#1,d0
00204436                            @no_col:
00204436 4E75                       		rts
00204438                            		
00204438                            ; ************************
00204438                            ; Find side collision
00204438                            ; CENTER
00204438                            ;
00204438                            ; Input:
00204438                            ; a6 - Object to read
00204438                            ; a5 - Level buffer
00204438                            ; a4 - Layout data
00204438                            ; 
00204438                            ; Output:
00204438                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
00204438                            ; 
00204438                            ; Uses:
00204438                            ; a3-a4 | d4-d5
00204438                            ; ************************
00204438                            
00204438                            object_FindPrz_Wall:
00204438 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020443E 286D 0018                    		movea.l	lvl_prizes(a5),a4
00204442 6000                         		bra.s	objSearchCol_Wall
00204444                              		
00204444                            object_FindCol_Wall:
00204444 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020444A 286D 0014                    		movea.l	lvl_collision(a5),a4
0020444E                            
0020444E                            objSearchCol_Wall:
0020444E 7000                       		moveq	#0,d0
00204450 7800                       		moveq	#0,d4
00204452 7A00                       		moveq	#0,d5
00204454 382E 000C                   		move.w	obj_y(a6),d4
00204458 1A2E 0007                   		move.b	obj_size+3(a6),d5
0020445C E74D                        		lsl.w	#3,d5
0020445E D845                        		add.w	d5,d4
00204460 0444 0001                   		sub.w	#1,d4
00204464 4A44                        		tst.w	d4
00204466 6B00 0000                   		bmi	@no_col
0020446A 3A2D 0032                   		move.w	lvl_size_y(a5),d5
0020446E E94D                        		lsl.w	#4,d5
00204470 B845                        		cmp.w	d5,d4
00204472 6C00 0000                   		bge	@no_col
00204476 E84C                        		lsr.w	#4,d4
00204478 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
0020447C D8C4                        		adda	d4,a4
0020447E E18C                        		lsl.l	#8,d4
00204480 2004                        		move.l	d4,d0
00204482                             		
00204482                            ; ------------------------
00204482                            ; X check
00204482                            ; ------------------------
00204482                            
00204482 264C                        		movea.l	a4,a3
00204484 382E 0008                   		move.w	obj_x(a6),d4
00204488 4A44                        		tst.w	d4
0020448A 6B00                        		bmi.s	@force_on
0020448C 3A2D 0030                   		move.w	lvl_size_x(a5),d5
00204490 E94D                        		lsl.w	#4,d5
00204492 B845                         		cmp.w	d5,d4
00204494 6C00                         		bge.s	@force_on
00204496 E84C                        		lsr.w	#4,d4
00204498 D6C4                        		adda 	d4,a3
0020449A E94C                        		lsl.w	#4,d4
0020449C 4844                        		swap	d4
0020449E                             		
0020449E 7A00                       		moveq	#0,d5
002044A0 382E 000C                     		move.w	obj_y(a6),d4
002044A4 1A2E 0007                     		move.b	obj_size+3(a6),d5
002044A8 E74D                          		lsl.w	#3,d5
002044AA D845                          		add.w	d5,d4
002044AC                               		
002044AC 0444 0001                     		sub.w	#1,d4
002044B0 3A2D 0032                   		move.w	lvl_size_y(a5),d5
002044B4 E94D                        		lsl.w	#4,d5
002044B6 4845                        		swap	d5
002044B8 1A2E 0006                   		move.b	obj_size+2(a6),d5
002044BC 0245 00FF                    		and.w	#$FF,d5
002044C0 E24D                         		lsr.w	#1,d5
002044C2 4A45                          		tst.w	d5
002044C4 6700                          		beq.s	@nxt_y
002044C6 0445 0001                     		sub.w	#1,d5
002044CA                            @nxt_y:
002044CA 4845                       		swap	d5
002044CC 4A44                        		tst.w	d4
002044CE 6B00                        		bmi.s	@force_on
002044D0 B845                        		cmp.w	d5,d4
002044D2 6C00                        		bge.s	@zero_y
002044D4 0813 0007                   		btst	#7,(a3)
002044D8 6600                        		bne.s	@zero_y
002044DA 4A13                       		tst.b	(a3)
002044DC 6700                       		beq.s	@zero_y
002044DE 8084                         		or.l	d4,d0
002044E0 4844                         		swap	d4
002044E2 E98C                         		lsl.l	#4,d4
002044E4 0284 000F FF00               		and.l	#$000FFF00,d4
002044EA 8084                         		or.l	d4,d0
002044EC 1013                        		move.b	(a3),d0
002044EE 4E75                        		rts
002044F0                            @zero_y:
002044F0 96ED 0030                   		suba	lvl_size_x(a5),a3
002044F4 0444 0010                   		sub.w	#$10,d4
002044F8 4845                       		swap	d5
002044FA 51CD FFCE                    		dbf	d5,@nxt_y
002044FE                            
002044FE                            @force_on:
002044FE 103C 0000                  		move.b	#0,d0
00204502                            @no_col:
00204502 4E75                       		rts
00204504                            
00204504                            ; ************************
00204504                            ; Find Ceiling collision
00204504                            ; CENTER
00204504                            ; 
00204504                            ; Input:
00204504                            ; a6 - Object to read
00204504                            ; a5 - Level buffer
00204504                            ; a4 - Layout data
00204504                            
00204504                            ; Output:
00204504                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
00204504                            ; 
00204504                            ; Uses:
00204504                            ; a3-a4 | d4-d5
00204504                            ; ************************
00204504                            
00204504                            object_FindPrz_Ceiling:
00204504 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020450A 286D 0018                    		movea.l	lvl_prizes(a5),a4
0020450E 6000                         		bra.s	objSearchCol_Ceiling
00204510                              		
00204510                            object_FindCol_Ceiling:
00204510 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204516 286D 0014                    		movea.l	lvl_collision(a5),a4
0020451A                              		
0020451A                            objSearchCol_Ceiling:
0020451A 7000                       		moveq	#0,d0
0020451C 7800                       		moveq	#0,d4
0020451E 7A00                       		moveq	#0,d5
00204520 382E 000C                   		move.w	obj_y(a6),d4
00204524 1A2E 0006                      		move.b	obj_size+2(a6),d5
00204528 E74D                           		lsl.w	#3,d5
0020452A 9845                           		sub.w	d5,d4			;UP SIZE
0020452C 4A44                        		tst.w	d4
0020452E 6B00 0000                   		bmi	@no_col
00204532 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00204536 E94D                        		lsl.w	#4,d5
00204538 B845                        		cmp.w	d5,d4
0020453A 6C00 0000                   		bge	@no_col
0020453E E84C                        		lsr.w	#4,d4
00204540 0244 0FFF                   		and.w	#$FFF,d4
00204544 3004                        		move.w	d4,d0
00204546 E188                        		lsl.l	#8,d0			;000YYY00
00204548 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
0020454C D8C4                        		adda	d4,a4
0020454E                            		
0020454E                            ; ------------------------
0020454E                            ; X check
0020454E                            ; ------------------------
0020454E                            
0020454E 264C                        		movea.l	a4,a3
00204550 382E 0008                   		move.w	obj_x(a6),d4
00204554 0444 0001                   		sub.w	#1,d4
00204558 4A44                        		tst.w	d4
0020455A 6B00                        		bmi.s	@no_col
0020455C 3A2D 0030                   		move.w	lvl_size_x(a5),d5
00204560 E94D                        		lsl.w	#4,d5
00204562 B845                          		cmp.w	d5,d4
00204564 6C00                          		bge.s	@no_col
00204566 E84C                        		lsr.w	#4,d4
00204568 D6C4                        		adda 	d4,a3
0020456A                            ;  		btst	#7,(a3)
0020456A                            ;  		bne.s	@no_col
0020456A                            ;  		tst.b	(a3)
0020456A                            ;  		beq.s	@no_col
0020456A E94C                        		lsl.w	#4,d4
0020456C 4844                        		swap	d4
0020456E 8084                        		or.l	d4,d0			;XXXYYY00
00204570 1013                        		move.b	(a3),d0	
00204572                            @no_col:
00204572 4E75                       		rts
00204574                            		
00204574                            ; ************************
00204574                            ; Find floor collision
00204574                            ; Left/Right points
00204574                            ;
00204574                            ; Input:
00204574                            ; a6 - Object to read
00204574                            ; a5 - Level buffer
00204574                            ; a4 - Layout data
00204574                            ; 
00204574                            ; Output:
00204574                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
00204574                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
00204574                            ; 
00204574                            ; Uses:
00204574                            ; a3 | d4-d5
00204574                            ; ************************
00204574                            
00204574                            object_FindPrz_FloorSides:
00204574 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020457A 286D 0018                    		movea.l	lvl_prizes(a5),a4
0020457E 6000                       		bra.s	objSearchCol_FloorSides
00204580                            		
00204580                            object_FindCol_FloorSides:
00204580 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204586 286D 0014                    		movea.l	lvl_collision(a5),a4
0020458A                              		
0020458A                            objSearchCol_FloorSides:
0020458A 7000                       		moveq	#0,d0
0020458C 7200                       		moveq	#0,d1
0020458E                            
0020458E 7800                       		moveq	#0,d4
00204590 7A00                       		moveq	#0,d5
00204592 382E 000C                   		move.w	obj_y(a6),d4
00204596 1A2E 0007                    		move.b	obj_size+3(a6),d5
0020459A E74D                        		lsl.w	#3,d5
0020459C D845                        		add.w	d5,d4
0020459E 4A44                        		tst.w	d4
002045A0 6B00 0000                   		bmi	@no_col
002045A4 3A2D 0032                    		move.w	lvl_size_y(a5),d5
002045A8 E94D                         		lsl.w	#4,d5
002045AA B845                         		cmp.w	d5,d4
002045AC 6C00 0000                    		bge	@no_col
002045B0 E84C                        		lsr.w	#4,d4
002045B2 3004                         		move.w	d4,d0
002045B4 3204                         		move.w	d4,d1
002045B6 E188                         		lsl.l	#8,d0			; LEFT 000YYY00
002045B8 E189                         		lsl.l	#8,d1			;RIGHT 000YYY00
002045BA C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
002045BE D8C4                        		adda	d4,a4
002045C0                            
002045C0                            ; ------------------------
002045C0                            ; X check
002045C0                            ; 
002045C0                            ; LEFT
002045C0                            ; ------------------------
002045C0                            
002045C0 7800                        		moveq	#0,d4
002045C2 7A00                       		moveq	#0,d5
002045C4 3A2E 0008                    		move.w	obj_x(a6),d5
002045C8 382D 0030                   		move.w	lvl_size_x(a5),d4
002045CC E94C                        		lsl.w	#4,d4
002045CE BA44                             		cmp.w	d4,d5
002045D0 6D00                             		blt.s	@dontfix_l
002045D2 0445 0001                        		sub.w	#1,d5
002045D6                            @dontfix_l:
002045D6 4A45                        		tst.w	d5
002045D8 6B00                        		bmi.s	@zero_l
002045DA                             		
002045DA 3805                        		move.w	d5,d4
002045DC E84C                        		lsr.w	#4,d4
002045DE 264C                        		movea.l	a4,a3
002045E0 D6C4                        		adda 	d4,a3
002045E2 4845                        		swap	d5		; d5 - XRead | Free
002045E4 1A2E 0004                   		move.b	obj_size(a6),d5
002045E8 0245 00FF                   		and.w	#$FF,d5		; d5 - XRead | Loop
002045EC 4A45                        		tst.w	d5
002045EE 6700                        		beq.s	@zero_l
002045F0                            @Next_col_l:
002045F0 4845                        		swap	d5		; d5 - Loop | Xread
002045F2                             		
002045F2 4A13                        		tst.b	(a3)
002045F4 6700                        		beq.s	@No_col_l
002045F6 0813 0007                   		btst	#7,(a3)
002045FA 6600                        		bne.s	@No_col_l
002045FC 3805                        		move.w	d5,d4
002045FE 0244 FFF0                   		and.w	#$FFF0,d4
00204602 4844                        		swap	d4
00204604 8284                        		or.l	d4,d1		; LEFT XXXYYY00
00204606 1213                       		move.b	(a3),d1
00204608 6000                        		bra.s	@zero_l
0020460A                            @No_col_l:
0020460A                            
0020460A 0445 0008                   		sub.w	#8,d5
0020460E 6A00                          		bpl.s	@Fine_l
00204610 4245                          		clr.w	d5
00204612                            @Fine_l:
00204612 3805                        		move.w	d5,d4
00204614 E84C                        		lsr.w	#4,d4
00204616 264C                        		movea.l	a4,a3
00204618 D6C4                        		adda 	d4,a3
0020461A 4845                        		swap	d5		; d5 - XRead | Loop
0020461C 51CD FFD2                   		dbf	d5,@Next_col_l
00204620                            @zero_l:
00204620                            		
00204620                            ; ------------------------
00204620                            ; X check
00204620                            ; 
00204620                            ; RIGHT
00204620                            ; ------------------------
00204620                            
00204620 7800                        		moveq	#0,d4
00204622 7A00                        		moveq	#0,d5
00204624 3A2E 0008                   		move.w	obj_x(a6),d5
00204628 0445 0001                   		sub.w	#1,d5
0020462C 4A45                        		tst.w	d5
0020462E 6B00                        		bmi.s	@no_col
00204630 382D 0030                   		move.w	lvl_size_x(a5),d4
00204634 E94C                        		lsl.w	#4,d4
00204636 BA44                          		cmp.w	d4,d5
00204638 6C00                           		bge.s	@no_col
0020463A                            
0020463A 3805                        		move.w	d5,d4
0020463C E84C                        		lsr.w	#4,d4
0020463E 264C                        		movea.l	a4,a3
00204640 D6C4                        		adda 	d4,a3
00204642 4845                        		swap	d5		;d5 - XRead | Free
00204644 1A2E 0005                   		move.b	obj_size+1(a6),d5
00204648 0245 00FF                   		and.w	#$FF,d5		;d5 - XRead | Loop
0020464C 4A45                        		tst.w	d5
0020464E 6700                        		beq.s	@no_col
00204650                             		
00204650                            @Next_col_r:
00204650 4845                        		swap	d5		;d5 - Loop | Xread
00204652 4A13                        		tst.b	(a3)
00204654 6700                        		beq.s	@No_col_r
00204656 0813 0007                   		btst	#7,(a3)
0020465A 6600                        		bne.s	@No_col_r
0020465C 382D 0030                   		move.w	lvl_size_x(a5),d4
00204660 E94C                        		lsl.w	#4,d4
00204662 BA44                          		cmp.w	d4,d5
00204664 6C00                           		bge.s	@no_col
00204666                                		
00204666 3805                        		move.w	d5,d4
00204668 0244 FFF0                   		and.w	#$FFF0,d4
0020466C 4844                        		swap	d4
0020466E 8084                        		or.l	d4,d0		; RIGHT XXXYYY00
00204670 1013                       		move.b	(a3),d0
00204672 4E75                        		rts
00204674                             		
00204674                            @No_col_r:
00204674 0645 0008                   		add.w	#8,d5
00204678 3805                        		move.w	d5,d4
0020467A E84C                        		lsr.w	#4,d4
0020467C 264C                        		movea.l	a4,a3
0020467E D6C4                        		adda 	d4,a3
00204680 4845                        		swap	d5		;d5 - XRead | Loop
00204682 51CD FFCC                   		dbf	d5,@Next_col_r
00204686                             		
00204686                            ; ------------------------
00204686                            
00204686                            @no_col:
00204686 4E75                       		rts
00204688                            
00204688                            ; ************************
00204688                            ; Find side collision
00204688                            ; LEFT/RIGHT
00204688                            ;
00204688                            ; Input:
00204688                            ; (Nothing)
00204688                            ; 
00204688                            ; Output:
00204688                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
00204688                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
00204688                            ; 
00204688                            ; Uses:
00204688                            ; a3-a4 | d4-d5
00204688                            ; ************************
00204688                            
00204688                            object_FindPrz_WallSides:
00204688 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020468E 286D 0018                    		movea.l	lvl_prizes(a5),a4
00204692 6000                         		bra.s	objSearchCol_WallSides
00204694                              		
00204694                            object_FindCol_WallSides:
00204694 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020469A 286D 0014                    		movea.l	lvl_collision(a5),a4
0020469E                              		
0020469E                            objSearchCol_WallSides:
0020469E 7000                        		moveq	#0,d0
002046A0 7200                        		moveq	#0,d1
002046A2 7800                        		moveq	#0,d4
002046A4 7A00                        		moveq	#0,d5
002046A6                            
002046A6                            ; ------------------------
002046A6                            ; Left
002046A6                            ; ------------------------
002046A6                            
002046A6 4A2E 0004                  		tst.b	obj_size(a6)
002046AA 6700 0000                  		beq	@ignore_l
002046AE                            			
002046AE                            ; --------------
002046AE                            ; LEFT DOWN
002046AE                            ; --------------
002046AE                            
002046AE 3A2E 000C                    		move.w	obj_y(a6),d5
002046B2 4A45                         		tst.w	d5
002046B4 6B00 0000                  		bmi	@ignore_l
002046B8 382D 0032                  		move.w	lvl_size_y(a5),d4
002046BC E94C                       		lsl.w	#4,d4
002046BE BA44                       		cmp.w	d4,d5
002046C0 6C00 0000                  		bge	@ignore_l
002046C4 4845                         		swap	d5
002046C6 4245                         		clr.w	d5
002046C8 1A2E 0007                    		move.b	obj_size+3(a6),d5	
002046CC 4A45                         		tst.w	d5
002046CE 6700 0000                    		beq	@ignore_l
002046D2 0445 0001                    		sub.w	#1,d5
002046D6                            @next_passld:
002046D6 4845                       		swap	d5
002046D8 4A45                       		tst.w	d5
002046DA 6B00 0000                  		bmi	@ignore_l
002046DE 3805                       		move.w	d5,d4
002046E0 4844                       		swap	d4
002046E2 382E 0008                  		move.w	obj_x(a6),d4
002046E6 0444 0001                  		sub.w	#1,d4
002046EA 4245                       		clr.w	d5
002046EC 1A2E 0004                  		move.b	obj_size(a6),d5
002046F0 E74D                       		lsl.w	#3,d5
002046F2 9845                       		sub.w	d5,d4			; left X size
002046F4 4A44                       		tst.w	d4
002046F6 6B00 0000                  		bmi	@forceset_l
002046FA E84C                       		lsr.w	#4,d4
002046FC 264C                        		movea.l	a4,a3
002046FE D6C4                       		adda	d4,a3
00204700 4844                       		swap	d4
00204702 3A04                       		move.w	d4,d5
00204704 E84C                         		lsr.w	#4,d4
00204706 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0020470A D6C4                         		adda	d4,a3
0020470C                              		
0020470C 0813 0007                    		btst	#7,(a3)
00204710 6600                         		bne.s	@next_ld
00204712 4A13                         		tst.b	(a3)
00204714 6600 0000                    		bne	@found_l
00204718                            @next_ld:
00204718 0645 0008                  		add.w	#8,d5
0020471C 382D 0032                  		move.w	lvl_size_y(a5),d4
00204720 E94C                       		lsl.w	#4,d4
00204722 BA44                       		cmp.w	d4,d5
00204724 6C00                       		bge.s	@gone_ld
00204726                            		
00204726 4845                       		swap	d5
00204728 51CD FFAC                  		dbf	d5,@next_passld
0020472C                            @gone_ld:
0020472C                            
0020472C                            ; --------------
0020472C                            ; LEFT UP
0020472C                            ; --------------
0020472C                            
0020472C 3A2E 000C                    		move.w	obj_y(a6),d5
00204730 4A45                         		tst.w	d5
00204732 6B00 0000                  		bmi	@ignore_l
00204736 382D 0032                  		move.w	lvl_size_y(a5),d4
0020473A E94C                       		lsl.w	#4,d4
0020473C BA44                       		cmp.w	d4,d5
0020473E 6C00 0000                  		bge	@ignore_l
00204742 4845                         		swap	d5
00204744 4245                         		clr.w	d5
00204746 1A2E 0006                    		move.b	obj_size+2(a6),d5	
0020474A 4A45                         		tst.w	d5
0020474C 6700                         		beq.s	@ignore_l
0020474E 0445 0001                    		sub.w	#1,d5
00204752                            @next_passlu:
00204752 4845                       		swap	d5
00204754 4A45                       		tst.w	d5
00204756 6B00                       		bmi.s	@ignore_l
00204758 3805                       		move.w	d5,d4
0020475A 4844                       		swap	d4
0020475C 382E 0008                  		move.w	obj_x(a6),d4
00204760 0444 0001                  		sub.w	#1,d4
00204764 4245                       		clr.w	d5
00204766 1A2E 0004                  		move.b	obj_size(a6),d5
0020476A E74D                       		lsl.w	#3,d5
0020476C 9845                       		sub.w	d5,d4			; left X size
0020476E 4A44                       		tst.w	d4
00204770 6B00                       		bmi.s	@forceset_l
00204772 E84C                       		lsr.w	#4,d4
00204774 264C                        		movea.l	a4,a3
00204776 D6C4                       		adda	d4,a3
00204778 4844                       		swap	d4
0020477A 3A04                       		move.w	d4,d5
0020477C E84C                         		lsr.w	#4,d4
0020477E C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
00204782 D6C4                         		adda	d4,a3
00204784                              		
00204784 0813 0007                    		btst	#7,(a3)
00204788 6600                         		bne.s	@next_lu
0020478A 4A13                         		tst.b	(a3)
0020478C 6600                         		bne.s	@found_l	
0020478E                            @next_lu:
0020478E 0445 0008                  		sub.w	#8,d5
00204792 4A45                       		tst.w	d5
00204794 6B00                       		bmi.s	@ignore_l
00204796 4845                       		swap	d5
00204798 51CD FFB8                  		dbf	d5,@next_passlu
0020479C                            		
0020479C 6000                       		bra.s	@ignore_l
0020479E                            		
0020479E                            ; --------------
0020479E                            ; Found left
0020479E                            ; --------------
0020479E                            
0020479E                            @forceset_l:
0020479E 123C 0001                  		move.b	#1,d1
002047A2 6000                       		bra.s	@ignore_l
002047A4                            		
002047A4                            @found_l:
002047A4 0285 0000 FFF0             		and.l	#$FFF0,d5
002047AA E98D                       		lsl.l	#4,d5
002047AC 8285                       		or.l	d5,d1
002047AE 7A00                        		moveq	#0,d5
002047B0 382E 0008                  		move.w	obj_x(a6),d4
002047B4 0444 0001                  		sub.w	#1,d4
002047B8 1A2E 0004                  		move.b	obj_size(a6),d5
002047BC E74D                       		lsl.w	#3,d5
002047BE 9845                       		sub.w	d5,d4
002047C0 0284 0000 FFF0             		and.l	#$FFF0,d4
002047C6 4844                       		swap	d4
002047C8 8284                       		or.l	d4,d1
002047CA 1213                        		move.b	(a3),d1
002047CC                            @ignore_l:
002047CC                            
002047CC                            ; ------------------------
002047CC                            ; Right
002047CC                            ; ------------------------
002047CC                             
002047CC 4A2E 0005                  		tst.b	obj_size+1(a6)
002047D0 6700 0000                  		beq	@ignore_r
002047D4                            		
002047D4                            ; --------------
002047D4                            ; RIGHT DOWN
002047D4                            ; --------------
002047D4                            
002047D4 7A00                       		moveq	#0,d5
002047D6 3A2E 000C                    		move.w	obj_y(a6),d5
002047DA 4A45                         		tst.w	d5
002047DC 6B00 0000                  		bmi	@ignore_r
002047E0 382D 0032                  		move.w	lvl_size_y(a5),d4
002047E4 E94C                       		lsl.w	#4,d4
002047E6 BA44                       		cmp.w	d4,d5
002047E8 6C00 0000                  		bge	@ignore_r
002047EC 4845                         		swap	d5
002047EE 4245                         		clr.w	d5
002047F0 1A2E 0007                    		move.b	obj_size+3(a6),d5	
002047F4 4A45                         		tst.w	d5
002047F6 6700 0000                    		beq	@ignore_r
002047FA 0445 0001                    		sub.w	#1,d5
002047FE                            @next_passrd:
002047FE 4845                       		swap	d5
00204800 4A45                       		tst.w	d5
00204802 6B00 0000                  		bmi	@ignore_r
00204806                            		
00204806 3805                       		move.w	d5,d4
00204808 4844                       		swap	d4
0020480A 382E 0008                  		move.w	obj_x(a6),d4
0020480E 4245                       		clr.w	d5
00204810 1A2E 0005                  		move.b	obj_size+1(a6),d5
00204814 E74D                       		lsl.w	#3,d5
00204816 D845                       		add.w	d5,d4			; left X size
00204818 3A2D 0030                  		move.w	lvl_size_x(a5),d5
0020481C E94D                       		lsl.w	#4,d5
0020481E B845                       		cmp.w	d5,d4
00204820 6C00 0000                  		bge	@forceset_r
00204824                            		
00204824 E84C                       		lsr.w	#4,d4
00204826 264C                        		movea.l	a4,a3
00204828 D6C4                       		adda	d4,a3
0020482A 4844                       		swap	d4
0020482C 3A04                       		move.w	d4,d5
0020482E E84C                         		lsr.w	#4,d4
00204830 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
00204834 D6C4                         		adda	d4,a3
00204836                              		
00204836 0813 0007                    		btst	#7,(a3)
0020483A 6600                         		bne.s	@next_rd
0020483C 4A13                         		tst.b	(a3)
0020483E 6600 0000                    		bne	@found_r
00204842                            @next_rd:
00204842 0645 0008                  		add.w	#8,d5
00204846 382D 0032                  		move.w	lvl_size_y(a5),d4
0020484A E94C                       		lsl.w	#4,d4
0020484C BA44                       		cmp.w	d4,d5
0020484E 6C00                       		bge.s	@gone_rd
00204850 4845                       		swap	d5
00204852 51CD FFAA                  		dbf	d5,@next_passrd
00204856                            @gone_rd:
00204856                            
00204856                            ; --------------
00204856                            ; RIGHT UP
00204856                            ; --------------
00204856                            
00204856 7A00                       		moveq	#0,d5
00204858 3A2E 000C                    		move.w	obj_y(a6),d5
0020485C 4A45                         		tst.w	d5
0020485E 6B00 0000                  		bmi	@ignore_r
00204862 382D 0032                  		move.w	lvl_size_y(a5),d4
00204866 E94C                       		lsl.w	#4,d4
00204868 BA44                       		cmp.w	d4,d5
0020486A 6C00 0000                  		bge	@ignore_r
0020486E 4845                         		swap	d5
00204870 4245                         		clr.w	d5
00204872 1A2E 0006                    		move.b	obj_size+2(a6),d5	
00204876 4A45                         		tst.w	d5
00204878 6700                         		beq.s	@ignore_r
0020487A 0445 0001                    		sub.w	#1,d5
0020487E                            @next_passru:
0020487E 4845                       		swap	d5
00204880 4A45                       		tst.w	d5
00204882 6B00                       		bmi.s	@ignore_r
00204884                            		
00204884 3805                       		move.w	d5,d4
00204886 4844                       		swap	d4
00204888 382E 0008                  		move.w	obj_x(a6),d4
0020488C 4245                       		clr.w	d5
0020488E 1A2E 0005                  		move.b	obj_size+1(a6),d5
00204892 E74D                       		lsl.w	#3,d5
00204894 D845                       		add.w	d5,d4			; left X size
00204896 3A2D 0030                  		move.w	lvl_size_x(a5),d5
0020489A E94D                       		lsl.w	#4,d5
0020489C B845                       		cmp.w	d5,d4
0020489E 6C00                       		bge.s	@forceset_r
002048A0                            		
002048A0 E84C                       		lsr.w	#4,d4
002048A2 264C                        		movea.l	a4,a3
002048A4 D6C4                       		adda	d4,a3
002048A6 4844                       		swap	d4
002048A8                            		
002048A8 3A04                       		move.w	d4,d5
002048AA E84C                         		lsr.w	#4,d4
002048AC C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
002048B0 D6C4                         		adda	d4,a3
002048B2                              		
002048B2 0813 0007                    		btst	#7,(a3)
002048B6 6600                         		bne.s	@next_ru
002048B8 4A13                         		tst.b	(a3)
002048BA 6600                         		bne.s	@found_r
002048BC                            @next_ru:
002048BC 0445 0008                  		sub.w	#8,d5
002048C0 4A45                       		tst.w	d5
002048C2 6B00                       		bmi.s	@ignore_r
002048C4                            		
002048C4 4845                       		swap	d5
002048C6 51CD FFB6                  		dbf	d5,@next_passru
002048CA                            
002048CA 6000                       		bra.s	@ignore_r
002048CC                            
002048CC                            ; --------------
002048CC                            ; Found right
002048CC                            ; --------------
002048CC                            
002048CC                            @forceset_r:
002048CC 103C 0001                  		move.b	#1,d0
002048D0 6000                       		bra.s	@ignore_r
002048D2                            		
002048D2                            @found_r:
002048D2 0285 0000 FFF0             		and.l	#$FFF0,d5
002048D8 E98D                       		lsl.l	#4,d5
002048DA 8085                       		or.l	d5,d0
002048DC 7A00                        		moveq	#0,d5
002048DE 382E 0008                  		move.w	obj_x(a6),d4
002048E2 1A2E 0005                  		move.b	obj_size+1(a6),d5
002048E6 E74D                       		lsl.w	#3,d5
002048E8 D845                       		add.w	d5,d4
002048EA 0284 0000 FFF0             		and.l	#$FFF0,d4
002048F0 4844                       		swap	d4
002048F2 8084                       		or.l	d4,d0
002048F4 1013                        		move.b	(a3),d0	
002048F6                            @ignore_r:
002048F6                            		
002048F6                            ; ------------------------
002048F6                            ; Finish checking
002048F6                            ; ------------------------
002048F6                            
002048F6 4E75                       		rts
002048F8                            		
002048F8                            ; ************************
002048F8                            ; Find ceiling collision
002048F8                            ; LEFT/RIGHT
002048F8                            ; 
002048F8                            ; Input:
002048F8                            ; (Nothing)
002048F8                            ; 
002048F8                            ; Output:
002048F8                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
002048F8                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
002048F8                            ; 
002048F8                            ; Uses:
002048F8                            ; a3-a4 | d4-d5
002048F8                            ; ************************
002048F8                            
002048F8                            object_FindPrz_CeilingSides:
002048F8 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
002048FE 286D 0018                    		movea.l	lvl_prizes(a5),a4
00204902 6000                         		bra.s	objSearchCol_CeilingSides
00204904                              		
00204904                            object_FindCol_CeilingSides:
00204904 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020490A 286D 0014                    		movea.l	lvl_collision(a5),a4
0020490E                              		
0020490E                            objSearchCol_CeilingSides:
0020490E 7000                       		moveq	#0,d0
00204910 7200                       		moveq	#0,d1
00204912 7800                        		moveq	#0,d4
00204914 3A2E 000C                    		move.w	obj_y(a6),d5
00204918                            ;   		add.w	#4,d5
00204918 182E 0006                     		move.b	obj_size+2(a6),d4
0020491C E74C                          		lsl.w	#3,d4
0020491E                            ;     		sub.w	#1,d4
0020491E 9A44                          		sub.w	d4,d5			;UP SIZE
00204920 4A45                         		tst.w	d5
00204922 6B00 0000                    		bmi	@no_col
00204926 382D 0032                   		move.w	lvl_size_y(a5),d4
0020492A E94C                        		lsl.w	#4,d4
0020492C BA44                        		cmp.w	d4,d5
0020492E 6C00 0000                   		bge	@no_col
00204932                             		
00204932 E84D                         		lsr.w	#4,d5
00204934 3005                         		move.w	d5,d0
00204936 3205                         		move.w	d5,d1
00204938 E188                         		lsl.l	#8,d0			; LEFT 000YYY00
0020493A E189                         		lsl.l	#8,d1			;RIGHT 000YYY00
0020493C CAED 0030                   		mulu.w	lvl_size_x(a5),d5
00204940 D8C5                         		adda	d5,a4
00204942                            
00204942                            ; ------------------------
00204942                            ; X check
00204942                            ; 
00204942                            ; LEFT
00204942                            ; ------------------------
00204942                            
00204942 7800                        		moveq	#0,d4
00204944 7A00                       		moveq	#0,d5
00204946 3A2E 0008                    		move.w	obj_x(a6),d5
0020494A 382D 0030                   		move.w	lvl_size_x(a5),d4
0020494E E94C                        		lsl.w	#4,d4
00204950 BA44                             		cmp.w	d4,d5
00204952 6D00                             		blt.s	@dontfix_l
00204954 0445 0001                        		sub.w	#1,d5
00204958                            @dontfix_l:
00204958 4A45                        		tst.w	d5
0020495A 6B00                        		bmi.s	@zero_l
0020495C 3805                        		move.w	d5,d4
0020495E E84C                        		lsr.w	#4,d4
00204960 264C                        		movea.l	a4,a3
00204962 D6C4                        		adda 	d4,a3
00204964                             		
00204964 4845                        		swap	d5		; d5 - XRead | Free
00204966 1A2E 0004                   		move.b	obj_size(a6),d5
0020496A 0245 00FF                   		and.w	#$FF,d5		; d5 - XRead | Loop
0020496E 4A45                        		tst.w	d5
00204970 6700                        		beq.s	@zero_l
00204972                            @Next_col_l:
00204972 4845                        		swap	d5		; d5 - Loop | Xread
00204974                             		
00204974 4A13                        		tst.b	(a3)
00204976 6700                        		beq.s	@No_col_l
00204978 3805                        		move.w	d5,d4
0020497A 0244 FFF0                   		and.w	#$FFF0,d4
0020497E 4844                        		swap	d4
00204980 8284                        		or.l	d4,d1		; LEFT XXXYYY00
00204982 1213                       		move.b	(a3),d1
00204984 6000                        		bra.s	@zero_l
00204986                            @No_col_l:
00204986                            
00204986 0445 0008                   		sub.w	#8,d5
0020498A 6A00                          		bpl.s	@Fine_l
0020498C 4245                          		clr.w	d5
0020498E                            @Fine_l:
0020498E 3805                        		move.w	d5,d4
00204990 E84C                        		lsr.w	#4,d4
00204992 264C                        		movea.l	a4,a3
00204994 D6C4                        		adda 	d4,a3
00204996 4845                        		swap	d5		; d5 - XRead | Loop
00204998 51CD FFD8                   		dbf	d5,@Next_col_l
0020499C                            @zero_l:
0020499C                            		
0020499C                            ; ------------------------
0020499C                            ; X check
0020499C                            ; 
0020499C                            ; RIGHT
0020499C                            ; ------------------------
0020499C                            
0020499C 7800                        		moveq	#0,d4
0020499E 7A00                        		moveq	#0,d5
002049A0 3A2E 0008                   		move.w	obj_x(a6),d5
002049A4 0445 0001                   		sub.w	#1,d5
002049A8 4A45                        		tst.w	d5
002049AA 6B00                        		bmi.s	@no_col
002049AC 382D 0030                   		move.w	lvl_size_x(a5),d4
002049B0 E94C                        		lsl.w	#4,d4
002049B2 BA44                          		cmp.w	d4,d5
002049B4 6C00                           		bge.s	@no_col
002049B6                            
002049B6 3805                        		move.w	d5,d4
002049B8 E84C                        		lsr.w	#4,d4
002049BA 264C                        		movea.l	a4,a3
002049BC D6C4                        		adda 	d4,a3
002049BE                             		
002049BE 4845                        		swap	d5		;d5 - XRead | Free
002049C0 1A2E 0005                   		move.b	obj_size+1(a6),d5
002049C4 0245 00FF                   		and.w	#$FF,d5		;d5 - XRead | Loop
002049C8 4A45                        		tst.w	d5
002049CA 6700                        		beq.s	@no_col
002049CC                             		
002049CC                            @Next_col_r:
002049CC 4845                        		swap	d5		;d5 - Loop | Xread
002049CE 4A13                        		tst.b	(a3)
002049D0 6700                        		beq.s	@No_col_r
002049D2 382D 0030                   		move.w	lvl_size_x(a5),d4
002049D6 E94C                        		lsl.w	#4,d4
002049D8 BA44                          		cmp.w	d4,d5
002049DA 6C00                           		bge.s	@no_col
002049DC                                		
002049DC 3805                        		move.w	d5,d4
002049DE 0244 FFF0                   		and.w	#$FFF0,d4
002049E2 4844                        		swap	d4
002049E4 8084                        		or.l	d4,d0		; RIGHT XXXYYY00
002049E6 1013                       		move.b	(a3),d0
002049E8 4E75                        		rts
002049EA                             		
002049EA                            @No_col_r:
002049EA 0645 0008                   		add.w	#8,d5
002049EE 3805                        		move.w	d5,d4
002049F0 E84C                        		lsr.w	#4,d4
002049F2 264C                        		movea.l	a4,a3
002049F4 D6C4                        		adda 	d4,a3
002049F6 4845                        		swap	d5		;d5 - XRead | Loop
002049F8 51CD FFD2                   		dbf	d5,@Next_col_r
002049FC                             		
002049FC                            ; ------------------------
002049FC                            
002049FC                            @no_col:
002049FC 4E75                       		rts
002049FE                             	
002049FE                            ; ************************
002049FE                            ; Find Center collision
002049FE                            ;
002049FE                            ; Input:
002049FE                            ; a6 - Object
002049FE                            ; a5 - RAM_LvlPlanes
002049FE                            ; a4 - Collision data
002049FE                            ; 
002049FE                            ; Output:
002049FE                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
002049FE                            ; 
002049FE                            ; Uses:
002049FE                            ; a3 | d4-d5
002049FE                            ; ************************
002049FE                            
002049FE                            ; TODO: no agarra los X/Y
002049FE                            
002049FE                            object_FindPrz_Center:
002049FE 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204A04 286D 0018                    		movea.l	lvl_prizes(a5),a4
00204A08 6000                         		bra.s	objSearchCol_Center
00204A0A                              		
00204A0A                            object_FindCol_Center:
00204A0A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204A10 286D 0014                    		movea.l	lvl_collision(a5),a4
00204A14                            
00204A14                            objSearchCol_Center:
00204A14 7000                       		moveq	#0,d0
00204A16 7800                       		moveq	#0,d4
00204A18 7A00                       		moveq	#0,d5
00204A1A 382E 000C                   		move.w	obj_y(a6),d4
00204A1E 4A44                        		tst.w	d4
00204A20 6B00 0000                   		bmi	@no_col
00204A24 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00204A28 E94D                        		lsl.w	#4,d5
00204A2A B845                        		cmp.w	d5,d4
00204A2C 6C00 0000                   		bge	@no_col
00204A30 E84C                         		lsr.w	#4,d4
00204A32 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
00204A36 D8C4                         		adda	d4,a4
00204A38 0284 0000 0FFF               		and.l	#$FFF,d4
00204A3E E18C                         		lsl.l	#8,d4
00204A40 8084                          		or.l	d4,d0
00204A42                            
00204A42                            ; ------------------------
00204A42                            		
00204A42 264C                         		movea.l	a4,a3
00204A44 382E 0008                   		move.w	obj_x(a6),d4
00204A48 4A44                        		tst.w	d4
00204A4A 6B00                        		bmi.s	@force_on
00204A4C 3A2D 0030                   		move.w	lvl_size_x(a5),d5
00204A50 E94D                         		lsl.w	#4,d5
00204A52 B845                         		cmp.w	d5,d4
00204A54 6C00                         		bge.s	@force_on
00204A56 3A04                         		move.w	d4,d5
00204A58 4845                        		swap	d5
00204A5A 8085                        		or.l	d5,d0			; XXXYYY00
00204A5C E84C                        		lsr.w	#4,d4
00204A5E D6C4                        		adda 	d4,a3
00204A60                              		
00204A60 4A13                       		tst.b	(a3)
00204A62 6700                       		beq.s	@no_col		
00204A64 1013                       		move.b	(a3),d0
00204A66 4E75                       		rts
00204A68                            @force_on:
00204A68 7000                       		moveq	#0,d0
00204A6A                            @no_col:
00204A6A 4E75                       		rts
00204A6C                            		
00204A6C                            ; ************************
00204A6C                            ; Sets a object in the floor
00204A6C                            ; DOWN/UP
00204A6C                            ; CENTER
00204A6C                            ; 
00204A6C                            ; Input:
00204A6C                            ; d0 - Floor ID
00204A6C                            ; (Object's current Ypos)
00204A6C                            ; 
00204A6C                            ; Output:
00204A6C                            ; d7 | LONG - Y speed result
00204A6C                            ; 
00204A6C                            ; Uses:
00204A6C                            ; a3-a4 | d3-d4
00204A6C                            ; ************************
00204A6C                            
00204A6C                            object_SetCol_Floor:
00204A6C 0800 0006                  		btst	#6,d0
00204A70 6600 0000                  		bne	@check_special
00204A74 0C00 0001                  		cmp.b	#1,d0
00204A78 6700 0000                  		beq	@floorsolid
00204A7C 4A87                          		tst.l	d7
00204A7E 6B00                          		bmi.s	@NoCol
00204A80                               		
00204A80 222E 000C                     		move.l	obj_y(a6),d1
00204A84 2601                          		move.l	d1,d3
00204A86 47F9 0020 3D40               		lea	(col_SlopeData),a3
00204A8C 0240 003F                    		and.w	#$3F,d0
00204A90 3200                         		move.w	d0,d1
00204A92 E949                         		lsl.w	#4,d1
00204A94 D6C1                         		adda	d1,a3
00204A96 202E 0008                   		move.l	obj_x(a6),d0
00204A9A 4840                        		swap	d0
00204A9C 0240 000F                   		and.w	#$F,d0
00204AA0 1033 0000                   		move.b	(a3,d0.w),d0
00204AA4 0280 0000 000F                 		and.l	#$F,d0
00204AAA 0281 FFF0 0000                 		and.l	#$FFF00000,d1
00204AB0 4840                         		swap	d0
00204AB2 D280                        		add.l	d0,d1
00204AB4                             		
00204AB4                            ; 		btst	#bitobj_air,obj_status(a6)
00204AB4                            ; 		beq.s	@dontchk
00204AB4 D687                         		add.l	d7,d3
00204AB6 B681                         		cmp.l	d1,d3
00204AB8 6D00                         		blt.s	@NoCol
00204ABA                            @dontchk:
00204ABA 2D41 000C                    		move.l	d1,obj_y(a6)	; TODO: REPARAME
00204ABE                              		
00204ABE 08AE 0002 001E                		bclr	#bitobj_air,obj_status(a6)
00204AC4 4287                        		clr.l	d7
00204AC6 4A86                            		tst.l	d6
00204AC8 6700                            		beq.s	@NoCol
00204ACA 2E3C 0001 0000                 		move.l	#$10000,d7
00204AD0                            @NoCol:
00204AD0 4E75                       		rts
00204AD2                            
00204AD2                            @floorsolid:
00204AD2 08AE 0002 001E             		bclr	#bitobj_air,obj_status(a6)	
00204AD8 02AE FFF8 0000 000C        		and.l	#$FFF80000,obj_y(a6)		; TODO: REPARAME
00204AE0 4287                       		clr.l	d7
00204AE2 4E75                       		rts
00204AE4                            
00204AE4                            ; ---------------------
00204AE4                            ; Check $80+ collision
00204AE4                            ; Floor
00204AE4                            ; ---------------------
00204AE4                            
00204AE4                            @check_special:
00204AE4 4E75                       		rts
00204AE6                            		
00204AE6                            ; ************************
00204AE6                            ; Sets collision on the object
00204AE6                            ; Ceiling
00204AE6                            ; 
00204AE6                            ; Input:
00204AE6                            ; d0 - Floor ID
00204AE6                            ; 
00204AE6                            ; Output:
00204AE6                            ; d7 | LONG - Y speed result
00204AE6                            ; 
00204AE6                            ; Uses:
00204AE6                            ; a3-a4 | d3-d4
00204AE6                            ; ************************
00204AE6                            
00204AE6                            object_SetCol_Ceiling:
00204AE6 0800 0006                  		btst	#6,d0
00204AEA 6600 0000                  		bne	@floorsolid
00204AEE 0C00 0001                  		cmp.b	#1,d0
00204AF2 6700 0000                  		beq	@floorsolid
00204AF6                            ;    		tst.l	d7
00204AF6                            ;    		bpl.s	@NoCol
00204AF6                               		
00204AF6                            ;    		move.l	obj_y(a6),d1
00204AF6                            ;    		move.l	d1,d3
00204AF6                            ;   		lea	(col_SlopeData),a3
00204AF6                            ;   		and.w	#$3F,d0
00204AF6                            ;   		move.w	d0,d1
00204AF6                            ;   		lsl.w	#4,d1
00204AF6                            ;   		adda	d1,a3
00204AF6                            ;  		move.l	obj_x(a6),d0
00204AF6                            ;  		swap	d0
00204AF6                            ;  		and.w	#$F,d0
00204AF6                            ;  		move.b	(a3,d0.w),d0
00204AF6                            ;     		and.l	#$F,d0
00204AF6                            ;     		and.l	#$FFF00000,d1
00204AF6                            ;   		swap	d0
00204AF6                            ;  		add.l	d0,d1
00204AF6                            ;  		
00204AF6                            ; ; 		btst	#bitobj_air,obj_status(a6)
00204AF6                            ; ; 		beq.s	@dontchk
00204AF6                            ;   		add.l	d7,d3
00204AF6                            ;   		cmp.l	d1,d3
00204AF6                            ;   		blt.s	@NoCol
00204AF6                            ; @dontchk:
00204AF6                            ;   		move.l	d1,obj_y(a6)	; TODO: REPARAME
00204AF6                            ;   		
00204AF6                            ;    		bclr	#bitobj_air,obj_status(a6)
00204AF6                            ;  		clr.l	d7
00204AF6                            ;      		tst.l	d6
00204AF6                            ;      		beq.s	@NoCol
00204AF6                            ;     		move.l	#$10000,d7
00204AF6                            ; @NoCol:
00204AF6                            ; 		rts
00204AF6                            ; 
00204AF6                            @floorsolid:
00204AF6 4287                       		clr.l	d7
00204AF8 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
00204AFE 02AE FFF8 0000 000C        		and.l	#$FFF80000,obj_y(a6)
00204B06 7800                       		moveq	#0,d4
00204B08 182E 0007                  		move.b	obj_size+3(a6),d4
00204B0C E74C                       		lsl.w	#3,d4
00204B0E D96E 000C                  		add.w	d4,obj_y(a6)
00204B12                            @NoCol:
00204B12 4E75                       		rts
00204B14                            		
00204B14                            ; ************************
00204B14                            ; Sets a object in the wall
00204B14                            ; LEFT/RIGHT
00204B14                            ; CENTER
00204B14                            ; 
00204B14                            ; Input:
00204B14                            ; d0 - Floor ID
00204B14                            ; (Object's current Ypos)
00204B14                            ; 
00204B14                            ; Output:
00204B14                            ; d7 | LONG - Y speed result
00204B14                            ; 
00204B14                            ; Uses:
00204B14                            ; a3-a4 | d3-d4
00204B14                            ; ************************
00204B14                            
00204B14                            ; TODO: para que mierdas era esto
00204B14                            
00204B14                            object_SetCol_Wall:
00204B14                            ; 		move.w	obj_y(a6),d1		;TODO: REPARAME
00204B14                            ; 		sub.w	#1,d1
00204B14                            ; 		move.w	d1,d3
00204B14                            ; 		and.w	#$FFF0,d1 		
00204B14                            ;      		lea	(col_SlopeData),a3
00204B14                            ;       		and.w	#$FF,d0
00204B14                            ;      		lsl.w	#4,d0
00204B14                            ;       		adda	d0,a3
00204B14                            ;       		move.w	obj_x(a6),d0
00204B14                            ;       		and.w	#$F,d0
00204B14                            ;       		move.b	(a3,d0.w),d2
00204B14                            ;       		and.w	#$F,d2
00204B14                            ;       		add.w	d2,d1
00204B14                            ;       		
00204B14                            ;  		btst	#bitobj_air,obj_status(a6)
00204B14                            ; 		beq.s	@dontchkLR
00204B14                            ;   		cmp.w	d1,d3
00204B14                            ;   		blt.s	@NoCol_LR
00204B14                            ; @dontchkLR:
00204B14                            ;    		move.w	d1,obj_y(a6)		;TODO: REPARAME
00204B14                            
00204B14                            @NoCol_LR:
00204B14 4E75                       		rts
00204B16                            	
00204B16                            ; **********************************************
00204B16                            ; Object interaction
00204B16                            ; **********************************************
00204B16                            
00204B16                            ; ----------------------------------
00204B16                            ; objTouch
00204B16                            ; 
00204B16                            ; touch/hit detection
00204B16                            ; 
00204B16                            ; Uses: d0-d4
00204B16                            ; ----------------------------------
00204B16                            
00204B16                            objTouch:
00204B16 6100 0000                  		bsr	objTouch_Top
00204B1A 3600                       		move.w	d0,d3
00204B1C 6100 0000                  		bsr	objTouch_Bottom
00204B20 8640                       		or.w	d0,d3
00204B22 6100 0000                  		bsr	objTouch_Sides
00204B26 8640                       		or.w	d0,d3
00204B28 4840                       		swap	d0
00204B2A 8640                       		or.w	d0,d3
00204B2C 3003                       		move.w	d3,d0
00204B2E 4E75                       		rts
00204B30                            		
00204B30                            ; ---------------------------
00204B30                            ; Seperate touches
00204B30                            ; ---------------------------
00204B30                            
00204B30                            objTouch_Top:
00204B30 4200                       		clr.b	d0
00204B32 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204B38 780F                       		moveq	#16-1,d4
00204B3A                            @check_again:
00204B3A 4AAC 0000                  		tst.l	obj_code(a4)
00204B3E 6700 0000                  		beq	@notfound
00204B42 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
00204B48 6700                       		beq.s	@notfound
00204B4A                            		
00204B4A                            ;  		tst.l	obj_y_spd(a4)
00204B4A                            ;  		bmi.s	@lowrY
00204B4A                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
00204B4A                            ;  		bne.s	@lowrY
00204B4A 7200                       		moveq	#0,d1
00204B4C                            		
00204B4C                            		; Check LEFT
00204B4C 7400                          		moveq	#0,d2
00204B4E 322E 0008                     		move.w	obj_x(a6),d1
00204B52 142E 0004                     		move.b	obj_size(a6),d2
00204B56 E74A                          		lsl.w	#3,d2
00204B58 9242                          		sub.w	d2,d1
00204B5A 342C 0008                     		move.w	obj_x(a4),d2
00204B5E 4841                           		swap	d1
00204B60 122C 0005                     		move.b	obj_size+1(a4),d1
00204B64 E749                          		lsl.w	#3,d1
00204B66 D441                             		add.w	d1,d2
00204B68 4841                           		swap	d1
00204B6A B242                          		cmp.w	d2,d1
00204B6C 6C00                          		bge.s	@lowrY
00204B6E                               		; Check RIGHT
00204B6E 7400                          		moveq	#0,d2
00204B70 322E 0008                     		move.w	obj_x(a6),d1
00204B74 142E 0005                     		move.b	obj_size+1(a6),d2
00204B78 E74A                          		lsl.w	#3,d2
00204B7A D242                          		add.w	d2,d1
00204B7C 342C 0008                     		move.w	obj_x(a4),d2
00204B80 4841                           		swap	d1
00204B82 122C 0004                     		move.b	obj_size(a4),d1
00204B86 E749                          		lsl.w	#3,d1
00204B88 9441                       		sub.w	d1,d2
00204B8A 4841                           		swap	d1
00204B8C B242                           		cmp.w	d2,d1
00204B8E 6F00                           		ble.s	@lowrY
00204B90                            
00204B90                                		; Check Top, and $C pixels more
00204B90 322E 000C                     		move.w	obj_y(a6),d1
00204B94 7400                          		moveq	#0,d2
00204B96 142E 0006                     		move.b	obj_size+2(a6),d2
00204B9A E74A                          		lsl.w	#3,d2
00204B9C 9242                          		sub.w	d2,d1
00204B9E 4841                          		swap	d1
00204BA0 342C 000C                     		move.w	obj_y(a4),d2
00204BA4 122C 0007                     		move.b	obj_size+3(a4),d1
00204BA8 E749                          		lsl.w	#3,d1
00204BAA D441                          		add.w	d1,d2
00204BAC 4841                          		swap	d1
00204BAE B242                          		cmp.w	d2,d1
00204BB0 6E00                          		bgt.s	@lowrY
00204BB2 0641 000C                       		add.w	#$C,d1
00204BB6 B242                           		cmp.w	d2,d1
00204BB8 6D00                           		blt.s	@lowrY
00204BBA                                		
00204BBA 103C 0001                     		move.b	#1,d0
00204BBE                            @lowrY:
00204BBE                            
00204BBE 4A00                       		tst.b	d0
00204BC0 6600 0000                  		bne	@wecanhurt
00204BC4                            @notfound:
00204BC4 D8FC 0064                  		adda	#sizeof_obj,a4
00204BC8 51CC FF70                  		dbf	d4,@check_again
00204BCC                            @wecanhurt:
00204BCC 4E75                          		rts
00204BCE                               		
00204BCE                            ; ----------------------------------
00204BCE                            
00204BCE                            objTouch_Bottom:
00204BCE 4200                       		clr.b	d0
00204BD0 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204BD6 780F                       		moveq	#16-1,d4
00204BD8                            @check_again:
00204BD8 4AAC 0000                  		tst.l	obj_code(a4)
00204BDC 6700 0000                  		beq	@notfound
00204BE0 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
00204BE6 6700 0000                  		beq	@notfound
00204BEA                            		
00204BEA                            ;  		tst.l	obj_y_spd(a4)
00204BEA                            ;  		bmi.s	@lowrY
00204BEA                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
00204BEA                            ;  		bne.s	@lowrY
00204BEA 7200                       		moveq	#0,d1
00204BEC                            		
00204BEC                            		; Check LEFT
00204BEC 7400                          		moveq	#0,d2
00204BEE 322E 0008                     		move.w	obj_x(a6),d1
00204BF2 142E 0004                     		move.b	obj_size(a6),d2
00204BF6 E74A                          		lsl.w	#3,d2
00204BF8 9242                          		sub.w	d2,d1
00204BFA 342C 0008                     		move.w	obj_x(a4),d2
00204BFE 4841                           		swap	d1
00204C00 122C 0005                     		move.b	obj_size+1(a4),d1
00204C04 E749                          		lsl.w	#3,d1
00204C06 D441                             		add.w	d1,d2
00204C08 4841                           		swap	d1
00204C0A B242                          		cmp.w	d2,d1
00204C0C 6C00                          		bge.s	@lowrY
00204C0E                               		; Check RIGHT
00204C0E 7400                          		moveq	#0,d2
00204C10 322E 0008                     		move.w	obj_x(a6),d1
00204C14 142E 0005                     		move.b	obj_size+1(a6),d2
00204C18 E74A                          		lsl.w	#3,d2
00204C1A D242                          		add.w	d2,d1
00204C1C 342C 0008                     		move.w	obj_x(a4),d2
00204C20 4841                           		swap	d1
00204C22 122C 0004                     		move.b	obj_size(a4),d1
00204C26 E749                          		lsl.w	#3,d1
00204C28 9441                       		sub.w	d1,d2
00204C2A 4841                           		swap	d1
00204C2C B242                           		cmp.w	d2,d1
00204C2E 6F00                           		ble.s	@lowrY
00204C30                            
00204C30                                		; Check Top, and $C pixels more
00204C30 322E 000C                     		move.w	obj_y(a6),d1
00204C34 7400                          		moveq	#0,d2
00204C36 142E 0007                     		move.b	obj_size+3(a6),d2
00204C3A E74A                          		lsl.w	#3,d2
00204C3C D242                          		add.w	d2,d1
00204C3E 4841                          		swap	d1
00204C40 342C 000C                     		move.w	obj_y(a4),d2
00204C44 122C 0006                     		move.b	obj_size+2(a4),d1
00204C48 E749                          		lsl.w	#3,d1
00204C4A 9441                          		sub.w	d1,d2
00204C4C 4841                          		swap	d1
00204C4E B441                          		cmp.w	d1,d2
00204C50 6E00                          		bgt.s	@lowrY
00204C52 0441 000C                       		sub.w	#$C,d1
00204C56 B441                           		cmp.w	d1,d2
00204C58 6D00                           		blt.s	@lowrY
00204C5A                                		
00204C5A 103C 0001                     		move.b	#1,d0
00204C5E                            @lowrY:
00204C5E                            
00204C5E 4A00                       		tst.b	d0
00204C60 6600 0000                  		bne	@wecanhurt
00204C64                            @notfound:
00204C64 D8FC 0064                  		adda	#sizeof_obj,a4
00204C68 51CC FF6E                  		dbf	d4,@check_again
00204C6C                            @wecanhurt:
00204C6C 4E75                          		rts
00204C6E                            
00204C6E                            ; ----------------------------------
00204C6E                            
00204C6E                            objTouch_Sides:
00204C6E 7000                       		moveq	#0,d0
00204C70 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204C76 780F                       		moveq	#16-1,d4
00204C78                            @check_again:
00204C78 4AAC 0000                  		tst.l	obj_code(a4)
00204C7C 6700 0000                  		beq	@notfound
00204C80 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
00204C86 6700 0000                  		beq	@notfound
00204C8A                            		
00204C8A                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
00204C8A                            ;  		bne	@lowrY
00204C8A                             		
00204C8A 7200                            		moveq	#0,d1
00204C8C 7400                          		moveq	#0,d2
00204C8E 322E 000C                      		move.w	obj_y(a6),d1
00204C92 7400                           		moveq	#0,d2
00204C94 142E 0006                      		move.b	obj_size+2(a6),d2
00204C98 E74A                           		lsl.w	#3,d2
00204C9A 9242                           		sub.w	d2,d1
00204C9C 4841                           		swap	d1
00204C9E 342C 000C                      		move.w	obj_y(a4),d2
00204CA2 122C 0007                      		move.b	obj_size+3(a4),d1
00204CA6 E749                           		lsl.w	#3,d1
00204CA8 D441                           		add.w	d1,d2
00204CAA 4841                           		swap	d1
00204CAC B242                           		cmp.w	d2,d1
00204CAE 6E00 0000                      		bgt	@lowrY
00204CB2                                		
00204CB2 322E 000C                      		move.w	obj_y(a6),d1
00204CB6 7400                           		moveq	#0,d2
00204CB8 142E 0007                      		move.b	obj_size+3(a6),d2
00204CBC E74A                           		lsl.w	#3,d2
00204CBE D242                           		add.w	d2,d1
00204CC0 4841                           		swap	d1
00204CC2 342C 000C                      		move.w	obj_y(a4),d2
00204CC6 122C 0006                      		move.b	obj_size+2(a4),d1
00204CCA E749                           		lsl.w	#3,d1
00204CCC 9441                           		sub.w	d1,d2
00204CCE 4841                           		swap	d1
00204CD0 B242                           		cmp.w	d2,d1
00204CD2 6D00 0000                      		blt	@lowrY
00204CD6                            
00204CD6                                 		; X Sides check
00204CD6 7200                            		moveq	#0,d1
00204CD8 7400                          		moveq	#0,d2
00204CDA 322E 0008                     		move.w	obj_x(a6),d1
00204CDE 142E 0005                     		move.b	obj_size+1(a6),d2
00204CE2 E74A                          		lsl.w	#3,d2
00204CE4 D242                          		add.w	d2,d1
00204CE6 242C 0008                     		move.l	obj_x(a4),d2
00204CEA D4AC 0010                     		add.l	obj_x_spd(a4),d2
00204CEE 4842                          		swap	d2
00204CF0 4841                           		swap	d1
00204CF2 122C 0004                      		move.b	obj_size(a4),d1
00204CF6 E749                            		lsl.w	#3,d1
00204CF8 9441                            		sub.w	d1,d2
00204CFA 4841                            		swap	d1
00204CFC B441                           		cmp.w	d1,d2
00204CFE 6E00                           		bgt.s	@lowrY_L
00204D00 0441 0008                      		sub.w	#8,d1
00204D04 B441                           		cmp.w	d1,d2
00204D06 6D00                           		blt.s	@lowrY_L 
00204D08 303C 0001                      		move.w	#1,d0
00204D0C                            
00204D0C                            @lowrY_L:
00204D0C 4840                            		swap	d0
00204D0E 7200                            		moveq	#0,d1
00204D10 7400                          		moveq	#0,d2
00204D12 322E 0008                     		move.w	obj_x(a6),d1
00204D16 142E 0004                     		move.b	obj_size(a6),d2
00204D1A E74A                          		lsl.w	#3,d2
00204D1C 9242                          		sub.w	d2,d1
00204D1E 342C 0008                     		move.w	obj_x(a4),d2
00204D22 4841                           		swap	d1
00204D24 122C 0005                      		move.b	obj_size+1(a4),d1
00204D28 E749                           		lsl.w	#3,d1
00204D2A D441                           		add.w	d1,d2
00204D2C 4841                           		swap	d1
00204D2E B242                          		cmp.w	d2,d1
00204D30 6E00                          		bgt.s	@lowrY
00204D32 0641 0008                     		add.w	#8,d1
00204D36 B242                          		cmp.w	d2,d1
00204D38 6D00                          		blt.s	@lowrY 
00204D3A 303C 0001                     		move.w	#1,d0
00204D3E                            @lowrY:
00204D3E                            		
00204D3E 4A80                       		tst.l	d0
00204D40 6600 0000                  		bne	@wecanhurt
00204D44                            @notfound:
00204D44 D8FC 0064                  		adda	#sizeof_obj,a4
00204D48 51CC FF2E                  		dbf	d4,@check_again
00204D4C                            @wecanhurt:
00204D4C 4E75                          		rts
00204D4E                               			
00204D4E                            ; ----------------------------------
00204D4E                            
00204D4E                            objPlyrSetFloor:
00204D4E 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204D54 4AAC 0014                  		tst.l	obj_y_spd(a4)
00204D58 6B00                       		bmi.s	@return
00204D5A 082C 00C0 0000             		btst	#bitPlyrClimb,plyr_status(a4)
00204D60 6600                       		bne.s	@return
00204D62                            ; 		lea	(RAM_LvlPlanes),a5
00204D62                            		
00204D62 42AC 0014                     		clr.l	obj_y_spd(a4)
00204D66 302E 000C                   		move.w	obj_y(a6),d0
00204D6A 3200                        		move.w	d0,d1
00204D6C 7400                          		moveq	#0,d2
00204D6E 142E 0006                     		move.b	obj_size+2(a6),d2
00204D72 E74A                          		lsl.w	#3,d2
00204D74 9042                          		sub.w	d2,d0
00204D76 7400                          		moveq	#0,d2
00204D78 142C 0007                     		move.b	obj_size+3(a4),d2
00204D7C E74A                          		lsl.w	#3,d2
00204D7E 9042                          		sub.w	d2,d0
00204D80                            ;    		cmp.w	d0,d1
00204D80                            ;    		blt.s	@lowrY
00204D80 297C 0001 0000 0014           		move.l	#$10000,obj_y_spd(a4)
00204D88                            ; @lowrY:
00204D88 3940 000C                     		move.w	d0,obj_y(a4)
00204D8C                               		
00204D8C                            ; 		bsr	object_PlyrFlgs_floor
00204D8C 08AC 0002 001E                  		bclr	#bitobj_air,obj_status(a4)
00204D92 08EC 0004 0022                  		bset	#bitcol_obj,obj_col(a4)
00204D98 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
00204DA0 6600 0000                  		bne	@return
00204DA4 397C 0000 0000                 		move.w	#varJumpTimer,plyr_jumptmr(a4)
00204DAA                            @return:
00204DAA 4E75                          		rts
00204DAC                              	
00204DAC                            ; ----------------------------------
00204DAC                            
00204DAC                            objPlyrSetCeiling:
00204DAC 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204DB2 082C 00C0 0000             		btst	#bitPlyrClimb,plyr_status(a4)
00204DB8 6600                       		bne.s	@return
00204DBA 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204DC0 42AC 0014                  		clr.l	obj_y_spd(a4)
00204DC4 08EC 0002 001E                  		bset	#bitobj_air,obj_status(a4)
00204DCA                            ;      		bset	#bitcol_obju,obj_col(a4)
00204DCA                                 		
00204DCA                            ;      		bset	#bitcol_floor,obj_col(a4)
00204DCA                            ;  		move.w	obj_y(a6),d0
00204DCA                            ;    		moveq	#0,d2
00204DCA                            ;    		move.b	obj_size+2(a6),d2
00204DCA                            ;    		lsl.w	#3,d2
00204DCA                            ;    		sub.w	d2,d0
00204DCA                            ;    		move.w	d0,obj_y(a4)
00204DCA                            @return:
00204DCA 4E75                          		rts
00204DCC                               		
00204DCC                            ; ----------------------------------
00204DCC                            
00204DCC                            objPlyrSetWall_R:
00204DCC 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204DD2 082C 00C0 0000             		btst	#bitPlyrClimb,plyr_status(a4)
00204DD8 6600                       		bne.s	objPlyrColReturn
00204DDA 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204DE0 42AC 0010                  		clr.l	obj_x_spd(a4)
00204DE4 08EC 0002 0022                  		bset	#bitcol_wall_r,obj_col(a4)
00204DEA 302E 0008                   		move.w	obj_x(a6),d0
00204DEE 7400                          		moveq	#0,d2
00204DF0 142E 0004                     		move.b	obj_size(a6),d2
00204DF4 E74A                          		lsl.w	#3,d2
00204DF6 9042                          		sub.w	d2,d0
00204DF8 7400                          		moveq	#0,d2
00204DFA 142C 0005                     		move.b	obj_size+1(a4),d2
00204DFE E74A                          		lsl.w	#3,d2
00204E00 9042                          		sub.w	d2,d0
00204E02 6000                          		bra.s	objPlyrSetWLX
00204E04                            		
00204E04                            ; ----------------------------------
00204E04                            
00204E04                            objPlyrSetWall_L:
00204E04 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204E0A 082C 00C0 0000             		btst	#bitPlyrClimb,plyr_status(a4)
00204E10 6600                       		bne.s	objPlyrColReturn
00204E12 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204E18 42AC 0010                  		clr.l	obj_x_spd(a4)
00204E1C 08EC 0003 0022                  		bset	#bitcol_wall_l,obj_col(a4)
00204E22 302E 0008                   		move.w	obj_x(a6),d0
00204E26                            ;  		add.w	#1,d0
00204E26 7400                          		moveq	#0,d2
00204E28 142E 0005                     		move.b	obj_size+1(a6),d2
00204E2C E74A                          		lsl.w	#3,d2
00204E2E D042                          		add.w	d2,d0
00204E30                               		
00204E30 7400                          		moveq	#0,d2
00204E32 142C 0004                     		move.b	obj_size(a4),d2
00204E36 E74A                          		lsl.w	#3,d2
00204E38 D042                          		add.w	d2,d0
00204E3A                            objPlyrSetWLX:
00204E3A 4A40                          		tst.w	d0
00204E3C 6A00                          		bpl.s	@plus_x
00204E3E 4240                          		clr.w	d0
00204E40                            @plus_x:
00204E40 342D 0030                  		move.w	lvl_size_x(a5),d2
00204E44 E94A                       		lsl.w	#4,d2
00204E46 B042                       		cmp.w	d2,d0
00204E48 6D00                       		blt.s	@plusr_x
00204E4A 3002                       		move.w	d2,d0
00204E4C                            @plusr_x:
00204E4C 3940 0008                     		move.w	d0,obj_x(a4)
00204E50                            objPlyrColReturn:
00204E50 4E75                          		rts
00204E52                               		
00204E52                            ; ----------------------------------
00204E52                            ; What to do if object touched the
00204E52                            ; player
00204E52                            ; 
00204E52                            ; Input:
00204E52                            ; a4 - Player object
00204E52                            ; 
00204E52                            ; Uses:
00204E52                            ; d4
00204E52                            ; 
00204E52                            ; Returns:
00204E52                            ; beq.s Nothing
00204E52                            ; bne.s Touched
00204E52                            ; ----------------------------------
00204E52                            
00204E52                            objPlyrHurtKill:
00204E52 7800                       		moveq	#0,d4
00204E54 200C                       		move.l	a4,d0
00204E56 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0	; Player?
00204E5C 6600                       		bne.s	@settrue
00204E5E 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
00204E64 0C2C 0000 001D             		cmp.b	#varPlyrMdDead,obj_index(a4)
00204E6A 6700                       		beq.s	@return
00204E6C 08EC 0003 001E             		bset	#bitobj_hurt,obj_status(a4)
00204E72 0C2C 0000 001A             		cmp.b	#varPlyAniJump,obj_anim_id(a4)
00204E78 6700                       		beq.s	@stomppikudo
00204E7A 082C 0002 001E              		btst	#bitobj_air,obj_status(a4)
00204E80 6600                        		bne.s	@stomppikudo
00204E82 6000                       		bra.s	@return
00204E84                            		
00204E84                            @stomppikudo:
00204E84 082C 0004 0022             		btst	#bitcol_obj,obj_col(a4)
00204E8A 66FE                       		bne.s	*;@return
00204E8C 4AAC 0014                   		tst.l	obj_y_spd(a4)
00204E90 6B00                       		bmi.s	@return
00204E92 6700                       		beq.s	@return	
00204E94                            @hurtanywy:
00204E94 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
00204E9A                            @settrue:
00204E9A 7801                       		moveq	#1,d4
00204E9C                            @return:
00204E9C 4A44                       		tst.w	d4
00204E9E 4E75                       		rts
00204EA0                            		
00204EA0                            ; Object_ChkPlyrHit:
00204EA0                            ; 		lea	(RAM_ObjBuffer),a4
00204EA0                            ; 		moveq	#0,d5
00204EA0                            ; 		cmp.b	#varPlyAniJump,obj_anim_id(a4)
00204EA0                            ; 		bne.s	@objhit
00204EA0                            ; 		moveq	#-1,d5
00204EA0                            ; @objhit:
00204EA0                            ; 		tst.w	d5
00204EA0                            ; 		rts
00204EA0                            
00204EA0                            ; ----------------------------------
00204EA0                            ; Prize ceiling action
00204EA0                            ; 
00204EA0                            ; Output:
00204EA0                            ; d4 - Collision out
00204EA0                            ; ----------------------------------
00204EA0                            
00204EA0                            Object_PrzActionCeil:
00204EA0 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204EA6 7A00                       		moveq	#0,d5
00204EA8 1A00                       		move.b	d0,d5
00204EAA 0805 0007                  		btst	#7,d5
00204EAE 6600                       		bne.s	@its_hidden
00204EB0 DA45                       		add.w	d5,d5
00204EB2 3C3B 5000                  		move.w	@block_list(pc,d5.w),d6
00204EB6 4EFB 6000                  		jmp	@block_list(pc,d6.w)
00204EBA                            		
00204EBA                            ; --------------------------
00204EBA                            ; Reveral hidden block
00204EBA                            ; --------------------------
00204EBA                            
00204EBA                            @its_hidden:
00204EBA 6100 0000                   		bsr	Prize_Locate
00204EBE 0200 007F                   		and.b	#$7F,d0
00204EC2 1680                        		move.b	d0,(a3)
00204EC4                             		
00204EC4                            ;  		bsr	Level_HidePrize
00204EC4 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00204ECA 264C                       		movea.l	a4,a3
00204ECC 323C 0007                  		move 	#8-1,d1
00204ED0                            @chksame2:
00204ED0 B0AB 0024                  		cmp.l	obj_ram(a3),d0
00204ED4 6700 0000                  		beq	@solidblock
00204ED8 D6FC 0064                  		adda 	#sizeof_obj,a3
00204EDC 51C9 FFF2                  		dbf	d1,@chksame2	
00204EE0                            
00204EE0 323C 0003                  		move 	#4-1,d1
00204EE4                            @next_obj2:
00204EE4 4AAC 0000                  		tst.l	obj_code(a4)
00204EE8 6700                       		beq.s	@free2
00204EEA D8FC 0064                  		adda	#sizeof_obj,a4
00204EEE 51C9 FFF4                  		dbf	d1,@next_obj2
00204EF2 6000                       		bra.s	@ranout2
00204EF4                            @free2:
00204EF4 6100 0000                   		bsr	blkobj_setcoords
00204EF8 197C 0001 001F             		move.b	#1,obj_subid(a4)
00204EFE 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00204F06 2940 0024                  		move.l	d0,obj_ram(a4)
00204F0A                            		
00204F0A 203C 0000 0000               		move.l	#SndSfx_BONK,d0
00204F10 323C 0003                    		move.w 	#3,d1
00204F14 7401                         		moveq	#1,d2
00204F16 6100 B7F8                    		bsr	Audio_Track_play
00204F1A                            @ranout2:
00204F1A                            ; 		moveq	#0,d4
00204F1A 4E75                        		rts
00204F1C                             		
00204F1C                            ; ----------------------------------
00204F1C                            
00204F1C                            @block_list:
00204F1C 0000                       		dc.w 0
00204F1E 0000                       		dc.w @break_block-@block_list
00204F20 0000                       		dc.w @bump_1coin-@block_list
00204F22 0000                       		dc.w @bump_10coin-@block_list
00204F24 0000                       		dc.w @break_block-@block_list
00204F26 0000                       		dc.w @break_block-@block_list
00204F28 0000                       		dc.w @break_block-@block_list
00204F2A 0000                       		dc.w @bump_1up-@block_list
00204F2C 0000                       		dc.w @bump_1coin-@block_list
00204F2E 0000                       		dc.w @bump_10coin-@block_list
00204F30 0000                       		dc.w @bump_1up-@block_list
00204F32 0000                       		dc.w @bump_block-@block_list
00204F34 0000                       		dc.w @bump_block-@block_list
00204F36 0000                       		dc.w @bump_block-@block_list
00204F38 0000                       		dc.w @bump_block-@block_list
00204F3A 0000                       		dc.w @bump_block-@block_list
00204F3C                            		
00204F3C 0000                       		dc.w @break_block-@block_list	
00204F3E 0000                       		dc.w @break_block-@block_list
00204F40 0000                       		dc.w @break_block-@block_list
00204F42 0000                       		dc.w @break_block-@block_list
00204F44 0000                       		dc.w @break_block-@block_list
00204F46 0000                       		dc.w @break_block-@block_list
00204F48 0000                       		dc.w @break_block-@block_list
00204F4A 0000                       		dc.w @break_block-@block_list
00204F4C 0000                       		dc.w @break_block-@block_list
00204F4E 0000                       		dc.w @break_block-@block_list
00204F50 0000                       		dc.w @break_block-@block_list
00204F52 0000                       		dc.w @break_block-@block_list
00204F54 0000                       		dc.w @break_block-@block_list
00204F56 0000                       		dc.w @break_block-@block_list
00204F58 0000                       		dc.w @break_block-@block_list	
00204F5A 0000                       		dc.w @break_block-@block_list
00204F5C                            		
00204F5C 0000                       		dc.w @trampoline-@block_list	
00204F5E 0000                       		dc.w @break_block-@block_list
00204F60 0000                       		dc.w @break_block-@block_list
00204F62 0000                       		dc.w @break_block-@block_list
00204F64 0000                       		dc.w @break_block-@block_list
00204F66 0000                       		dc.w @break_block-@block_list
00204F68 0000                       		dc.w @break_block-@block_list
00204F6A 0000                       		dc.w @break_block-@block_list
00204F6C 0000                       		dc.w @break_block-@block_list
00204F6E 0000                       		dc.w @break_block-@block_list
00204F70 0000                       		dc.w @break_block-@block_list
00204F72 0000                       		dc.w @break_block-@block_list
00204F74 0000                       		dc.w @break_block-@block_list
00204F76 0000                       		dc.w @break_block-@block_list
00204F78 0000                       		dc.w @break_block-@block_list	
00204F7A 0000                       		dc.w @break_block-@block_list
00204F7C                            		
00204F7C 0000                       		dc.w @break_block-@block_list	
00204F7E 0000                       		dc.w @break_block-@block_list
00204F80 0000                       		dc.w @break_block-@block_list
00204F82 0000                       		dc.w @break_block-@block_list
00204F84 0000                       		dc.w @break_block-@block_list
00204F86 0000                       		dc.w @break_block-@block_list
00204F88 0000                       		dc.w @break_block-@block_list
00204F8A 0000                       		dc.w @break_block-@block_list
00204F8C 0000                       		dc.w @break_block-@block_list
00204F8E 0000                       		dc.w @break_block-@block_list
00204F90 0000                       		dc.w @break_block-@block_list
00204F92 0000                       		dc.w @break_block-@block_list
00204F94 0000                       		dc.w @break_block-@block_list
00204F96 0000                       		dc.w @break_block-@block_list
00204F98 0000                       		dc.w @break_block-@block_list	
00204F9A 0000                       		dc.w @break_block-@block_list
00204F9C                            		
00204F9C 0000                       		dc.w @coin_red-@block_list
00204F9E 0000                       		dc.w @coin_blue-@block_list
00204FA0                            		
00204FA0                            ; ----------------------------------
00204FA0                            ; Normal breakable block
00204FA0                            ; ----------------------------------
00204FA0                            
00204FA0                            @break_block:
00204FA0 6100 0000                  		bsr	@chk_breakblk
00204FA4 6600                       		bne.s	@oops
00204FA6 6100 0000                   		bsr	Prize_Delete
00204FAA 6100 0000                   		bsr	blkobj_overwrite
00204FAE                            		
00204FAE 6100 0000                  		bsr	blkobj_setcoords
00204FB2 2940 0024                  		move.l	d0,obj_ram(a4)
00204FB6 422C 001F                  		clr.b	obj_subid(a4)
00204FBA 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00204FC2                            		
00204FC2 203C 0000 0000               		move.l	#SndSfx_PUM,d0
00204FC8 323C 0004                    		move.w 	#4,d1
00204FCC 7401                         		moveq	#1,d2
00204FCE 6100 B740                    		bsr	Audio_Track_play
00204FD2                            @oops:
00204FD2 7801                         		moveq	#1,d4
00204FD4 2E3C 0001 0000               		move.l	#$10000,d7
00204FDA 4E75                         		rts
00204FDC                            		
00204FDC                            ; ----------------------------------
00204FDC                            ; BUMP block
00204FDC                            ; ----------------------------------
00204FDC                            
00204FDC                            @bump_1coin:
00204FDC 7601                       		moveq	#1,d3
00204FDE 6000                       		bra.s	@bump_coinarg
00204FE0                            @bump_10coin:
00204FE0 760A                       		moveq	#10,d3
00204FE2 6000                       		bra.s	@bump_coinarg
00204FE4                            
00204FE4                            ; ----------------------------------
00204FE4                            
00204FE4                            @bump_block:
00204FE4 7600                       		moveq	#0,d3
00204FE6                            @bump_coinarg:
00204FE6 6100 0000                  		bsr	blkobj_chkdupl
00204FEA 66E6                       		bne.s	@oops
00204FEC                            
00204FEC 6100 0000                  		bsr	blkobj_overwrite
00204FF0 6100 0000                   		bsr	blkobj_setcoords
00204FF4 2400                       		move.l	d0,d2
00204FF6 2940 0024                  		move.l	d0,obj_ram(a4)
00204FFA 197C 0001 001F             		move.b	#1,obj_subid(a4)
00205000 4A03                       		tst.b	d3
00205002 6700                       		beq.s	@noexsubid
00205004 197C 0002 001F             		move.b	#2,obj_subid(a4)
0020500A 0C03 000A                  		cmp.b	#10,d3
0020500E 6600                       		bne.s	@noexsubid
00205010 197C 0003 001F             		move.b	#3,obj_subid(a4)
00205016                            @noexsubid:
00205016                            
00205016 0C02 000F                  		cmp.b	#$F,d2
0020501A 6700                       		beq.s	@SolidOnly
0020501C                            		
0020501C D779 FFFF DC02             		add.w	d3,(RAM_P1_Coins)
00205022 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
0020502A 6D00                         		blt.s	@SolidOnly
0020502C 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
00205032 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
0020503A                              		
0020503A 203C 0000 0000               		move.l	#SndSfx_OneUp,d0
00205040 7200                         		moveq 	#0,d1
00205042 7401                         		moveq	#1,d2
00205044 6100 B6CA                    		bsr	Audio_Track_play
00205048                              		
00205048 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00205050                            		
00205050 6000 0000                  		bra	@solidblock
00205054                            
00205054                            @SolidOnly:
00205054                            
00205054                            
00205054 203C 0000 0000               		move.l	#SndSfx_BonkCoin,d0
0020505A 7202                         		moveq 	#2,d1
0020505C                              		
0020505C 0C02 000F                  		cmp.b	#$F,d2
00205060 6600                       		bne.s	@Alt_Sfx
00205062 203C 0000 0000               		move.l	#SndSfx_BONK,d0
00205068 323C 0003                    		move.w 	#3,d1
0020506C 0C43 000A                    		cmp.w	#10,d3
00205070 6600                         		bne.s	@Alt_Sfx
00205072 7201                         		moveq	#1,d1
00205074                            @Alt_Sfx:
00205074 7401                       		moveq	#1,d2
00205076 6100 B698                    		bsr	Audio_Track_play
0020507A                              		
0020507A 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00205082 6000                       		bra.s	@solidblock
00205084                            		
00205084                            ; ----------------------------------
00205084                            
00205084                            @bump_1up:
00205084 6100 0000                  		bsr	blkobj_chkdupl
00205088 6600 FF48                  		bne	@oops
0020508C                            
0020508C 6100 0000                  		bsr	blkobj_overwrite
00205090 6100 0000                   		bsr	blkobj_setcoords
00205094 2400                       		move.l	d0,d2
00205096 2940 0024                  		move.l	d0,obj_ram(a4)
0020509A 197C 0004 001F             		move.b	#4,obj_subid(a4)
002050A0 0679 0001 FFFF DC00        		add.w	#1,(RAM_P1_Lives)
002050A8 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
002050B0                            		
002050B0 203C 0000 0000               		move.l	#SndSfx_OneUp,d0
002050B6 7200                         		moveq 	#0,d1
002050B8 7401                         		moveq	#1,d2
002050BA 6100 B654                    		bsr	Audio_Track_play
002050BE                            		
002050BE                            @solidblock:
002050BE 7801                         		moveq	#1,d4
002050C0 2E3C 0001 0000               		move.l	#$10000,d7
002050C6 4E75                         		rts
002050C8                              		
002050C8                            ; ----------------------------------
002050C8                            ; A Coin, from top
002050C8                            ; ----------------------------------
002050C8                            
002050C8                            @coin_red:
002050C8 7801                       		moveq	#1,d4
002050CA 6000                       		bra.s	@setcoin
002050CC                            @coin_blue:
002050CC 7805                       		moveq	#5,d4
002050CE                            @setcoin:
002050CE D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
002050D4 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
002050DC 6D00                         		blt.s	@dontadd1up
002050DE 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
002050E4 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
002050EC                              		
002050EC 2800                         		move.l	d0,d4
002050EE 203C 0000 0000               		move.l	#SndSfx_OneUp,d0
002050F4 7200                         		moveq 	#0,d1
002050F6 7401                         		moveq	#1,d2
002050F8 6100 B616                    		bsr	Audio_Track_play
002050FC 2004                         		move.l	d4,d0
002050FE                              		
002050FE                            @dontadd1up:
002050FE                              		
002050FE 6100 0000                   		bsr	Prize_Delete
00205102 6100 E792                  		bsr	Level_HidePrize
00205106                              		
00205106 203C 0000 0000               		move.l	#SndSfx_COIN,d0
0020510C 7202                         		moveq 	#2,d1
0020510E 7401                         		moveq	#1,d2
00205110 6100 B5FE                    		bsr	Audio_Track_play
00205114 7800                       		moveq	#0,d4		
00205116 4E75                       		rts
00205118                            		
00205118                            ; ----------------------------------
00205118                            ; Normal breakable block
00205118                            ; ----------------------------------
00205118                            
00205118                            @trampoline:
00205118 6100 0000                  		bsr	goToTrampolineWhy
0020511C                            		
0020511C 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00205122 283C 0007 0000             		move.l	#$70000,d4
00205128 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
00205130 6700                       		beq.s	@dontadd
00205132 283C 0009 0000             		move.l	#$90000,d4
00205138                            @dontadd:
00205138 2E04                       		move.l	d4,d7
0020513A 4E75                       		rts
0020513C                            		
0020513C                            ; -------------------------------
0020513C                            ; check for active object
0020513C                            ; d2 - sub-id
0020513C                            ; -------------------------------
0020513C                            
0020513C                            @chk_breakblk:
0020513C 7401                       		moveq	#1,d2
0020513E 7800                       		moveq	#0,d4
00205140 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00205146 264C                       		movea.l	a4,a3
00205148 7207                       		moveq 	#8-1,d1
0020514A                            @checkhdnbmp:
0020514A 0CAB 0000 0000 0000        		cmp.l	#obj_prize,obj_code(a3)
00205152 6600                       		bne.s	@notprz
00205154 B42B 001F                  		cmp.b	obj_subid(a3),d2
00205158 6600                       		bne.s	@notprz
0020515A 7801                       		moveq	#1,d4
0020515C 7200                       		moveq	#0,d1
0020515E                            @notprz:
0020515E D6FC 0064                  		adda 	#sizeof_obj,a3
00205162 51C9 FFE6                  		dbf	d1,@checkhdnbmp
00205166 4A44                       		tst.w	d4
00205168 4E75                       		rts
0020516A                            
0020516A                            ; -------------------------------
0020516A                            ; check for duplicate object
0020516A                            ; using obj_ram
0020516A                            ; -------------------------------
0020516A                            
0020516A                            blkobj_chkdupl:
0020516A 7800                       		moveq	#0,d4
0020516C 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00205172 7207                       		moveq 	#8-1,d1
00205174                            @chksame234:
00205174 B0AC 0024                   		cmp.l	obj_ram(a4),d0
00205178 6600                        		bne.s	@notequl
0020517A 0644 0001                   		add.w	#1,d4
0020517E                            @notequl:
0020517E D8FC 0064                   		adda 	#sizeof_obj,a4
00205182 51C9 FFF0                   		dbf	d1,@chksame234
00205186 4A44                        		tst.w	d4
00205188 4E75                        		rts
0020518A                             		
0020518A                            ; -------------------------------
0020518A                            ; Overwrite prize object if its
0020518A                            ; the same
0020518A                            ; -------------------------------
0020518A                            
0020518A                            blkobj_overwrite:
0020518A 7800                       		moveq	#0,d4
0020518C 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00205192 7207                       		moveq 	#8-1,d1
00205194                            @chksame23:
00205194 B0AC 0024                   		cmp.l	obj_ram(a4),d0
00205198 6600 0000                   		bne	@notsame
0020519C                             		
0020519C 264C                        		movea.l	a4,a3
0020519E 343C 0063                   		move.w	#sizeof_obj-1,d2
002051A2                            @delete:
002051A2 421B                        		clr.b	(a3)+
002051A4 51CA FFFC                   		dbf	d2,@delete
002051A8                            @notsame:
002051A8 0CAC 0000 0000 0000        		cmp.l	#obj_prize,obj_code(a4)
002051B0 6600                       		bne.s	@found
002051B2 D8FC 0064                   		adda 	#sizeof_obj,a4
002051B6 51C9 FFDC                   		dbf	d1,@chksame23
002051BA                            @found:
002051BA 4E75                       		rts
002051BC                            		
002051BC                            ; ----------------------------------
002051BC                            ; obj_coords
002051BC                            ; ----------------------------------
002051BC                            
002051BC                            blkobj_setcoords:
002051BC 2800                       		move.l	d0,d4
002051BE E88C                       		lsr.l	#4,d4
002051C0 0244 FFF0                  		and.w	#$FFF0,d4
002051C4 0644 0008                   		add.w	#8,d4
002051C8 3944 000C                   		move.w	d4,obj_y(a4)
002051CC E08C                       		lsr.l	#8,d4
002051CE E88C                       		lsr.l	#4,d4
002051D0 0244 FFF0                  		and.w	#$FFF0,d4
002051D4 0644 0008                   		add.w	#8,d4
002051D8 3944 0008                   		move.w	d4,obj_x(a4)
002051DC                             		
002051DC 206D 0008                  		movea.l	lvl_przblocks(a5),a0
002051E0 3800                       		move.w	d0,d4
002051E2 0244 00FF                  		and.w	#$FF,d4
002051E6 E74C                       		lsl.w	#3,d4
002051E8 3830 4000                  		move.w	(a0,d4.w),d4
002051EC 3944 0028                  		move.w	d4,obj_ram+4(a4)
002051F0 4E75                        		rts
002051F2                             	
002051F2                            goToTrampolineWhy:
002051F2 6100 FF76                  		bsr	blkobj_chkdupl
002051F6 6600 0000                  		bne	@oopstr
002051FA                            
002051FA 6100 FF8E                  		bsr	blkobj_overwrite
002051FE 6100 FFBC                   		bsr	blkobj_setcoords
00205202 2940 0024                  		move.l	d0,obj_ram(a4)
00205206 197C 0005 001F             		move.b	#5,obj_subid(a4)
0020520C 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00205214 6100 E680                  		bsr	Level_HidePrize
00205218                            @oopstr:
00205218 7801                       		moveq	#1,d4
0020521A 4E75                       		rts
0020521C                            		
0020521C                            ; ----------------------------------
0020521C                            ; block subs
0020521C                            ; 
0020521C                            ; d0 - XXXYYYID
0020521C                            ; a5 - RAM_LvlPlanes
0020521C                            ; ----------------------------------
0020521C                            
0020521C                            Prize_Locate:
0020521C 266D 0018                  		movea.l	lvl_prizes(a5),a3
00205220 2800                       		move.l	d0,d4
00205222 E08C                       		lsr.l	#8,d4
00205224 0284 0000 0FFF             		and.l	#$FFF,d4
0020522A C8ED 0030                  		mulu.w	lvl_size_x(a5),d4
0020522E D6C4                       		adda	d4,a3
00205230 2800                       		move.l	d0,d4
00205232 4844                       		swap	d4
00205234 E84C                       		lsr.w	#4,d4
00205236 0284 0000 0FFF             		and.l	#$FFF,d4
0020523C D6C4                       		adda	d4,a3
0020523E 4E75                       		rts
00205240                            		
00205240                            Prize_Delete:
00205240 61DA                       		bsr.s	Prize_Locate
00205242 4213                       		clr.b	(a3)
00205244 4E75                       		rts
00205246                            		
00205246                            ; **********************************************
00205246                            ; Object action
00205246                            ; **********************************************
00205246                            
00205246                            ; ---------------------------
00205246                            ; Object action: mark 
00205246                            ; stomped by player
00205246                            ; 
00205246                            ; Input:
00205246                            ; d0 | LONG - Mappings
00205246                            ; d1 | WORD - VRAM
00205246                            ; d2 | BYTE - Frame
00205246                            ; a4 | Object who touched it
00205246                            ; ---------------------------
00205246                            
00205246                            objAction_SetStomp:
00205246 422E 001D                  		clr.b	obj_index(a6)		; Clear index
0020524A 422E 001F                  		clr.b	obj_subid(a6)		; Subaction: Stomp
0020524E 2D40 0024                  		move.l	d0,obj_ram(a6)		; Last frame
00205252 3D41 0028                  		move.w	d1,obj_ram+4(a6)
00205256 1D42 002A                  		move.b	d2,obj_ram+6(a6)
0020525A 2D43 002C                  		move.l	d3,obj_ram+8(a6)
0020525E 2D7C 0000 0000 0000        		move.l	#obj_actionscript,obj_code(a6)
00205266 4E75                       		rts
00205268                            		
00205268                            ; =================================================================
00205268                            ; --------------------------------------------
00205268                            ; Includes
00205268                            ; --------------------------------------------
00205268                            
00205268                              		include	"engine/modes/level/data/objects/player/code.asm"
00205268                            ; =================================================================
00205268                            ; Object
00205268                            ; 
00205268                            ; Player
00205268                            ; =================================================================
00205268                            
00205268                            ; =================================================================
00205268                            ; ------------------------------------------------
00205268                            ; Variables
00205268                            ; ------------------------------------------------
00205268                            
00205268 =00006780                  varPlyrVRAM	equ	$6000|$780
00205268 =00000140                  varScrlHor	equ	320
00205268 =0000000B                  varJumpTimer	equ	11
00205268 =00000060                  varHurtTimer	equ	96
00205268                            
00205268 =00000002                  varPlyAniJump	equ	2
00205268 =00000002                  varPlyrMdDead	equ	2
00205268                            
00205268 =00000005                  bitPlyrClimb	equ	5
00205268 =00000006                  bitPlyrCancelY	equ	6
00205268 =00000007                  bitPlyrBusy	equ	7
00205268                            
00205268                            ; =================================================================
00205268                            ; ------------------------------------------------
00205268                            ; RAM
00205268                            ; ------------------------------------------------
00205268                            
00205268                            		rsset obj_ram
00205268 =00000024                  plyr_lvltrgt	rs.w	1
00205268 =00000026                  plyr_jumptmr	rs.w	1
00205268 =00000028                  plyr_hits	rs.w	1
00205268 =0000002A                  plyr_hittime	rs.w	1
00205268 =0000002C                  plyr_spccol	rs.b	1		; %00000LCR
00205268 =0000002D                  plyr_status	rs.b	1		; %000000FB
00205268                            
00205268                            ; =================================================================
00205268                            ; ------------------------------------------------
00205268                            ; Code start
00205268                            ; ------------------------------------------------
00205268                            
00205268                            Obj_Player:
00205268 7000                        		moveq	#0,d0
0020526A 102E 001D                   		move.b	obj_index(a6),d0
0020526E D040                        		add.w	d0,d0
00205270 323B 0000                   		move.w	@Index(pc,d0.w),d1
00205274 4EBB 1000                   		jsr	@Index(pc,d1.w)
00205278                             		
00205278                             		;Render
00205278 7000                        		moveq	#0,d0
0020527A 303C 6780                      		move.w	#varPlyrVRAM,d0
0020527E 0C2E 0002 001D             		cmp.b	#varPlyrMdDead,obj_index(a6)
00205284 6600                       		bne.s	@dontforce
00205286 0040 8000                  		or.w	#$8000,d0
0020528A                            @dontforce:
0020528A 4840                           		swap	d0
0020528C 102E 0020                     		move.b	obj_frame(a6),d0
00205290 223C 0000 0000              		move.l	#ani_player,d1
00205296 6100 F020                  		bsr	Object_Animate
0020529A                            		
0020529A 082E 0000 002B             		btst	#0,plyr_hittime+1(a6)
002052A0 6600                       		bne.s	@return
002052A2                            		
002052A2 102E 0020                     		move.b	obj_frame(a6),d0	
002052A6 223C 0000 0000              		move.l	#map_player,d1
002052AC 6100 EC5E                    		bsr	Object_Show
002052B0                             		
002052B0 203C 6780 0000                		move.l	#(varPlyrVRAM<<16),d0
002052B6 102E 0020                     		move.b	obj_frame(a6),d0
002052BA 223C 0000 0000             		move.l	#dplc_player,d1
002052C0 243C 0000 0000             		move.l	#art_player,d2
002052C6 6000 EBEA                  		bra	Object_DPLC
002052CA                            
002052CA                            @return:
002052CA 4E75                       		rts
002052CC                            		
002052CC                            ; ------------------------------------------------
002052CC                            
002052CC                            @Index:
002052CC 0000                       		dc.w ObjPlyr_Init-@Index
002052CE 0000                       		dc.w ObjPlyr_Main-@Index
002052D0 0000                       		dc.w ObjPlyr_Die-@Index
002052D2                            		even
002052D2                            
002052D2                            ; =================================================================
002052D2                            ; ------------------------------------------------
002052D2                            ; Index $00: Init
002052D2                            ; ------------------------------------------------
002052D2                            
002052D2                            ObjPlyr_Init:
002052D2 062E 0001 001D             		add.b	#1,obj_index(a6)
002052D8 2D7C 0101 0202 0004        		move.l	#$01010202,obj_size(a6)
002052E0                            ; 		bset	#bitobj_flipV,obj_status(a6)
002052E0                            		
002052E0                            ; 		tst.w	(RAM_P1_Hits)
002052E0                            ; 		beq.s	@iszerohits
002052E0                            ; 		bpl.s	@dontresthit
002052E0                            ; @iszerohits:
002052E0 33FC 0003 FFFF DC04        		move.w	#3,(RAM_P1_Hits)
002052E8                            @dontresthit:
002052E8 426E 002A                  		clr.w	plyr_hittime(a6)
002052EC 08EE 0006 001E              		bset	#bitobj_hit,obj_status(a6)
002052F2                             		
002052F2                            ; =================================================================
002052F2                            ; ------------------------------------------------
002052F2                            ; Index $01: Main
002052F2                            ; ------------------------------------------------
002052F2                            
002052F2                            ObjPlyr_Main:
002052F2                            ; 		btst	#bitJoyA,(RAM_Control_2+OnPress)
002052F2                            ; 		beq.s	@NotDbg
002052F2                            ; 		clr.l	obj_x(a6)
002052F2                            ; 		clr.l	obj_y(a6)
002052F2                            ; 		clr.l	obj_x_spd(a6)
002052F2                            ; 		clr.l	obj_y_spd(a6)
002052F2                            ; 		lea	(RAM_LvlPlanes),a5
002052F2                            ; 		clr.w	lvl_x(a5)
002052F2                            ; 		clr.w	lvl_y(a5)
002052F2                            ; 		movem.l	a6,-(sp)
002052F2                            ; 		bsr	Level_Draw
002052F2                            ; 		movem.l	(sp)+,a6
002052F2                            ; @NotDbg:
002052F2                            ; 		btst	#bitJoyMode,(RAM_Control_1+ExOnHold)
002052F2                            ; 		beq.s	@NotWnd
002052F2                            ; 		bra	PlyrDebugMove
002052F2                            ; @NotWnd:
002052F2                            
002052F2                            ; 		btst	#bitJoyX,(RAM_Control_1+ExOnPress)
002052F2                            ; 		beq.s	@NotWnd3
002052F2                            ; 		bchg	#3,(RAM_VidRegs+$C)
002052F2                            ; 		bchg	#bitobj_flipH,obj_status(a6)
002052F2                            ; 		bsr	Video_Update
002052F2                            ; @NotWnd3:
002052F2                            ; 		btst	#bitJoyY,(RAM_Control_1+ExOnPress)
002052F2                            ; 		beq.s	@NotWnd2
002052F2                            ; 		bchg	#bitobj_flipV,obj_status(a6)
002052F2                            ; @NotWnd2:
002052F2                            
002052F2                            ; ----------------------------------
002052F2                            ; Falling frame
002052F2                            ; ----------------------------------
002052F2                            
002052F2                            ; 		btst	#bitobj_air,obj_status(a6)
002052F2                            ; 		beq.s	@idleanim
002052F2                            ; 		tst.l	obj_y_spd(a6)
002052F2                            ; 		beq.s	@idleanim
002052F2                            ; 		bmi.s	@idleanim
002052F2                            ; 		move.b	#3,obj_anim_id(a6)
002052F2                            ; @idleanim:
002052F2                            
002052F2 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
002052F8 302D 0032                  		move.w	lvl_size_y(a5),d0		; Bottomless pit
002052FC E948                       		lsl.w	#4,d0
002052FE 322E 000C                  		move.w	obj_y(a6),d1
00205302 7400                       		moveq	#0,d2
00205304 142E 0006                  		move.b	obj_size+2(a6),d2
00205308 E74A                       		lsl.w	#3,d2
0020530A 9242                       		sub.w	d2,d1
0020530C B240                       		cmp.w	d0,d1
0020530E 6E00 0000                  		bgt	PlyrLevelReset
00205312                            		
00205312 4A6E 002A                  		tst.w	plyr_hittime(a6)
00205316 6600                       		bne.s	@counting
00205318 082E 0003 001E             		btst	#bitobj_hurt,obj_status(a6)
0020531E 6700                       		beq.s	@no_action
00205320                            		
00205320 4A6E 002A                  		tst.w	plyr_hittime(a6)
00205324 6600                       		bne.s	@ignore
00205326 0479 0001 FFFF DC04        		sub.w	#1,(RAM_P1_Hits)
0020532E 3D7C 0060 002A             		move.w	#varHurtTimer,plyr_hittime(a6)
00205334                            		
00205334 4A79 FFFF DC04             		tst.w	(RAM_P1_Hits)
0020533A 6600                       		bne.s	@counting
0020533C 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00205342 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
00205348 1D7C 0002 001D             		move.b	#2,obj_index(a6)		; Mode $02: dead
0020534E 1D7C 0005 001A             		move.b	#5,obj_anim_id(a6)		; Animation $05
00205354 2D7C 0001 0000 0010        		move.l	#$10000,obj_x_spd(a6)
0020535C 2D7C FFFC 0000 0014        		move.l	#-$40000,obj_y_spd(a6)
00205364                            @ignore:
00205364 4E75                       		rts
00205366                            		
00205366                            @counting:
00205366 046E 0001 002A             		sub.w	#1,plyr_hittime(a6)
0020536C 6600                       		bne.s	@no_action
0020536E 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
00205374                            @no_action:
00205374 6000 0000                  		bra	PlyrPhysics
00205378                            		
00205378                            ; =================================================================
00205378                            ; ------------------------------------------------
00205378                            ; Index $01: Main
00205378                            ; ------------------------------------------------
00205378                            
00205378                            ObjPlyr_Die:
00205378 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020537E 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00205382 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00205386 0687 0000 4000             		add.l	#$4000,d7
0020538C                            		
0020538C DDAE 0008                  		add.l	d6,obj_x(a6)
00205390 DFAE 000C                  		add.l	d7,obj_y(a6)
00205394                            		
00205394 302D 0032                  		move.w	lvl_size_y(a5),d0
00205398 E948                       		lsl.w	#4,d0
0020539A 322E 000C                  		move.w	obj_y(a6),d1
0020539E 7400                       		moveq	#0,d2
002053A0 142E 0006                  		move.b	obj_size+2(a6),d2
002053A4 E74A                       		lsl.w	#3,d2
002053A6 9242                       		sub.w	d2,d1
002053A8 B240                       		cmp.w	d0,d1
002053AA 6E00                       		bgt.s	PlyrLevelReset
002053AC                            		
002053AC 2D46 0010                  		move.l	d6,obj_x_spd(a6)
002053B0 2D47 0014                  		move.l	d7,obj_y_spd(a6)
002053B4 4E75                       		rts
002053B6                            		
002053B6                            ; =================================================================
002053B6                            ; ----------------------------------
002053B6                            ; Level reset
002053B6                            ; ----------------------------------
002053B6                            
002053B6                            PlyrLevelReset:
002053B6 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
002053BE                            		
002053BE 0479 0001 FFFF DC00        		sub.w	#1,(RAM_P1_Lives)
002053C6 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
002053CC 6600                       		bne.s	@ignore
002053CE                            		;GAME OVER stuff goes here
002053CE 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
002053D4                            		
002053D4                            @ignore:
002053D4 4E75                       		rts
002053D6                            		
002053D6                            ; ----------------------------------
002053D6                            
002053D6                            PlyrDebugMove:
002053D6 08AE 0005 002D             		bclr	#bitPlyrClimb,plyr_status(a6)
002053DC 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
002053E2 422E 0022                  		clr.b	obj_col(a6)
002053E6                            		
002053E6 0839 0003 FFFF DE83        		btst	#bitJoyRight,(RAM_Control_1+OnHold)
002053EE 6700                       		beq.s	@DNotRight
002053F0 06AE 0005 0000 0008        		add.l	#$50000,obj_x(a6)
002053F8 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
002053FE                            @DNotRight:
002053FE 0839 0002 FFFF DE83        		btst	#bitJoyLeft,(RAM_Control_1+OnHold)
00205406 6700                       		beq.s	@DNotLeft
00205408 04AE 0005 0000 0008        		sub.l	#$50000,obj_x(a6)
00205410 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
00205416                            @DNotLeft:
00205416 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
0020541E 6700                       		beq.s	@DNotDown
00205420 06AE 0005 0000 000C        		add.l	#$50000,obj_y(a6)
00205428                            @DNotDown:
00205428 0839 0000 FFFF DE83        		btst	#bitJoyUp,(RAM_Control_1+OnHold)
00205430 6700                       		beq.s	@DNotUp
00205432 04AE 0005 0000 000C        		sub.l	#$50000,obj_y(a6)
0020543A                            @DNotUp:
0020543A 2D7C 0000 0001 0010        		move.l	#1,obj_x_spd(a6)		;Temporal
00205442 2D7C 0000 0001 0014        		move.l	#1,obj_y_spd(a6)
0020544A                            		
0020544A 6000 0000                    		bra	Plyr_LvlCamera
0020544E                              		
0020544E                            ; ----------------------------------
0020544E                            ; Player physics
0020544E                            ; ----------------------------------
0020544E                            
0020544E                            PlyrPhysics:
0020544E 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00205452 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00205456                            
00205456                            ; ------------------------
00205456                            ; Animation ID
00205456                            ; ------------------------
00205456                            
00205456 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0020545C 6600                       		bne.s	@walking
0020545E 082E 0002 001E             		btst	#bitobj_air,obj_status(a6)
00205464 6600                       		bne.s	@walking
00205466                            
00205466 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
0020546C 4A86                       		tst.l	d6
0020546E 6600                       		bne.s	@walking
00205470 422E 001A                  		clr.b	obj_anim_id(a6)
00205474                            @walking:
00205474                            
00205474                            ; ***************
00205474                            ; X Speed stuff
00205474                            ; ***************
00205474                            
00205474 6100 0000                  		bsr	@Player_Friction
00205478 6100 0000                  		bsr	@Player_Walk
0020547C DDAE 0008                  		add.l	d6,obj_x(a6)			;X + X Speed
00205480 6100 0000                  		bsr	PlyrColRead_Wall
00205484                            		
00205484                            ; ***************
00205484                            ; Y Speed stuff
00205484                            ; ***************
00205484                            ; 
00205484 6100 0000                  		bsr	@Player_Jump
00205488 DFAE 000C                  		add.l	d7,obj_y(a6)			;Y + Y Speed
0020548C 6100 0000                    		bsr	PlyrColRead_Ceiling
00205490 6100 0000                  		bsr	PlyrColRead_Floor
00205494                            
00205494                            ; ***************
00205494                            ; Save them
00205494                            ; ***************
00205494                            
00205494 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00205498 2D47 0014                  		move.l	d7,obj_y_spd(a6)
0020549C                            		
0020549C 6000 0000                   		bra	Plyr_LvlCamera
002054A0                            	
002054A0                            ; =================================================================
002054A0                            ; ------------------------------------------------
002054A0                            ; Subs
002054A0                            ; ------------------------------------------------
002054A0                            
002054A0                            ; **********************************
002054A0                            ; Player Walk
002054A0                            ; **********************************
002054A0                            
002054A0                            @Player_Walk:
002054A0 2806                       		move.l	d6,d4
002054A2 0839 0003 FFFF DE83        		btst	#bitJoyRight,(RAM_Control_1+OnHold)
002054AA 6700                       		beq.s	@NotRight
002054AC 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
002054B2 6600                       		bne.s	@NotMuchRight
002054B4 7000                       		moveq	#0,d0
002054B6 3039 FFFF BC34             		move.w	(RAM_LvlPlanes+lvl_maxcam_x),d0
002054BC E948                       		lsl.w	#4,d0
002054BE 322E 0008                  		move.w	obj_x(a6),d1
002054C2 B240                       		cmp.w	d0,d1
002054C4 6E00                       		bgt.s	@NotRight
002054C6                            	
002054C6                            ; 		tst.l	d4
002054C6                            ; 		bpl.s	@NotRunningR
002054C6 203C 0001 E000             		move.l	#$1E000,d0
002054CC 0839 0004 FFFF DE83         		btst	#bitJoyB,(RAM_Control_1+OnHold)
002054D4 6700                        		beq.s	@NotRunningR
002054D6 203C 0002 8000              		move.l	#$28000,d0
002054DC                            @NotRunningR:
002054DC                            
002054DC 0686 0000 4800             		add.l	#$4800,d6
002054E2 BC80                       		cmp.l	d0,d6
002054E4 6D00                       		blt.s	@NotMuchRight
002054E6 2C00                       		move.l	d0,d6
002054E8                            @NotMuchRight:
002054E8 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
002054EE                            
002054EE                            @NotRight:
002054EE 0839 0002 FFFF DE83        		btst	#bitJoyLeft,(RAM_Control_1+OnHold)
002054F6 6700                       		beq.s	@NotLeft
002054F8 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
002054FE 6600                       		bne.s	@NotMuchLeft
00205500 4AAE 0008                  		tst.l	obj_x(a6)
00205504 6700                       		beq.s	@NotLeft
00205506 6B00                       		bmi.s	@NotLeft
00205508                            		
00205508                            ; 		tst.l	d4
00205508                            ; 		bmi.s	@NotRunningL
00205508 203C FFFE 0000             		move.l	#-$20000,d0
0020550E 0839 0004 FFFF DE83         		btst	#bitJoyB,(RAM_Control_1+OnHold)
00205516 6700                        		beq.s	@NotRunningL
00205518 203C FFFD 0000              		move.l	#-$30000,d0
0020551E                            @NotRunningL:
0020551E                            
0020551E                            		
0020551E 0486 0000 4800             		sub.l	#$4800,d6
00205524 BC80                       		cmp.l	d0,d6
00205526 6E00                       		bgt.s	@NotMuchLeft
00205528 2C00                       		move.l	d0,d6
0020552A                            @NotMuchLeft:
0020552A 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
00205530                            @NotLeft:		
00205530 4E75                       		rts
00205532                            		
00205532                            ; **********************************
00205532                            ; Player Friction
00205532                            ; **********************************
00205532                            
00205532                            @Player_Friction:
00205532 283C 0000 2400             		move.l	#$2400,d4			;Friction
00205538 4A86                       		tst.l	d6
0020553A 6700                       		beq.s	@FineSpeed
0020553C 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00205542 6600                       		bne.s	@Left
00205544 9C84                       		sub.l	d4,d6
00205546 6A00                       		bpl.s	@FineSpeed
00205548 4286                       		clr.l	d6
0020554A 4E75                       		rts
0020554C                            @Left:
0020554C DC84                       		add.l	d4,d6
0020554E 6B00                       		bmi.s	@FineSpeed
00205550                            		
00205550                            @ignoreR:
00205550 4286                       		clr.l	d6
00205552                            @FineSpeed:	
00205552 4E75                       		rts
00205554                            
00205554                            ; **********************************
00205554                            ; Player jump
00205554                            ; **********************************
00205554                            
00205554                            @Player_Jump:
00205554 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0020555A 6600                       		bne.s	@JumpFromLadder
0020555C 082E 0006 002D             		btst	#bitPlyrCancelY,plyr_status(a6)
00205562 6600                       		bne.s	@JumpFromLadder
00205564                            		
00205564 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
0020556C 6700 0000                  		beq	@IsFalling
00205570                            		
00205570 0C6E 000B 0026              		cmp.w	#varJumpTimer,plyr_jumptmr(a6)
00205576 6600                        		bne.s	@onair
00205578 082E 0004 0022               		btst	#bitcol_obj,obj_col(a6)
0020557E 6600                           		bne.s	@onair
00205580 082E 0000 0022               		btst	#bitcol_floor,obj_col(a6)
00205586 6700                           		beq.s	@IsFalling
00205588                            @onair:
00205588                            
00205588 046E 0001 0026             		sub.w	#1,plyr_jumptmr(a6)
0020558E 6B00                       		bmi.s	@IsFalling
00205590                            
00205590 082E 0002 001E              		btst	#bitobj_air,obj_status(a6)
00205596 6600                        		bne.s	@onair2
00205598                            
00205598 1D7C 0002 001A              		move.b	#varPlyAniJump,obj_anim_id(a6)
0020559E 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
002055A4 08AE 0000 0022                  		bclr	#bitcol_floor,obj_col(a6)
002055AA 08AE 0004 0022                  		bclr	#bitcol_obj,obj_col(a6)
002055B0 2E3C FFFB E000                		move.l	#-$42000,d7
002055B6 2006                          		move.l	d6,d0
002055B8 E480                          		asr.l	#2,d0
002055BA 4A80                          		tst.l	d0
002055BC 6B00                          		bmi.s	@dontnegx
002055BE 4480                          		neg.l	d0
002055C0                            @dontnegx:
002055C0 DE80                       		add.l	d0,d7
002055C2                            		
002055C2 203C 0000 0000               		move.l	#SndSfx_PlyrJump,d0
002055C8 7201                         		moveq 	#1,d1
002055CA 7401                         		moveq	#1,d2
002055CC 6100 B142                    		bsr	Audio_Track_play
002055D0                            @onair2:
002055D0 4E75                          		rts
002055D2                              
002055D2                            ; ----------------------------------
002055D2                            
002055D2                            @JumpFromLadder:
002055D2 0839 0005 FFFF DE85        		btst	#bitJoyC,(RAM_Control_1+OnPress)
002055DA 6700 0000                  		beq	@IsFalling
002055DE                            		
002055DE 08AE 0005 002D             		bclr	#bitPlyrClimb,plyr_status(a6)
002055E4 08EE 0002 001E              		bset	#bitobj_air,obj_status(a6)
002055EA 1D7C 0002 001A              		move.b	#2,obj_anim_id(a6)
002055F0 4286                          		clr.l	d6
002055F2 4287                          		clr.l	d7
002055F4 4E75                        		rts
002055F6                             		
002055F6                            ; ----------------------------------
002055F6                            
002055F6                            @IsFalling:
002055F6 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
002055FC 6600                       		bne.s	@low_fall
002055FE 082E 0000 0022                		btst	#bitcol_floor,obj_col(a6)
00205604 6600                           		bne.s	@low_fall
00205606                            
00205606 0687 0000 4800              		add.l	#$4800,d7
0020560C 0C87 0010 0000             		cmp.l	#$100000,d7
00205612 6D00                       		blt.s	@low_fall
00205614 2E3C 0010 0000             		move.l	#$100000,d7
0020561A                            @low_fall:
0020561A 4E75                       		rts
0020561C                            		
0020561C                            ; **********************************
0020561C                            ; Object to Level layout collision
0020561C                            ; **********************************
0020561C                            
0020561C                            ; ----------------------------------
0020561C                            ; floor collision
0020561C                            ; ----------------------------------
0020561C                            
0020561C                            PlyrColRead_Floor:
0020561C 08AE 0000 0022              		bclr	#bitcol_floor,obj_col(a6)
00205622 08AE 0002 001E              		bclr	#bitobj_air,obj_status(a6)
00205628                             		
00205628 082E 0004 0022              		btst	#bitcol_obj,obj_col(a6)
0020562E 6600                        		bne.s	@dont
00205630 08EE 0002 001E              		bset	#bitobj_air,obj_status(a6)
00205636                            @dont:
00205636 08AE 0004 0022              		bclr	#bitcol_obj,obj_col(a6)
0020563C                             		
0020563C 4A87                       		tst.l	d7
0020563E 6B00                       		bmi.s	@going_up
00205640                            
00205640                            ; 		bsr	object_FindPrz_Floor		;TODO: no sirve en prizes
00205640                            ;  		btst	#7,d0
00205640                            ;  		beq.s	@cntrnrml
00205640                            ; 		clr.b	d0
00205640                            ; @cntrnrml:
00205640                            ; 		tst.b	d0
00205640                            ; 		bne	@przfloor_center
00205640                            
00205640 6100 EF32                   		bsr 	object_FindPrz_FloorSides
00205644                             		
00205644 4A00                       		tst.b	d0
00205646 6600 0000                  		bne	@przfloor_right
0020564A 2001                       		move.l	d1,d0
0020564C 4A00                       		tst.b	d0
0020564E 6600 0000                  		bne	@przfloor_left
00205652                            
00205652 6100 ED82                  		bsr	object_FindCol_Floor
00205656 6100 0000                  		bsr	@center_special
0020565A 4A00                       		tst.b	d0
0020565C 6600                       		bne.s	@found_center
0020565E 6100 EF20                   		bsr 	object_FindCol_FloorSides
00205662 6100 0000                  		bsr	@right_special
00205666 4A00                       		tst.b	d0
00205668 6600 0000                  		bne	@found_sides
0020566C 2001                       		move.l	d1,d0
0020566E 6100 0000                  		bsr	@left_special
00205672 4A00                       		tst.b	d0
00205674 6600 0000                  		bne	@found_sides
00205678                            @going_up:
00205678                            
00205678 4E75                       		rts
0020567A                            		
0020567A                            ; ----------------------------------
0020567A                            
0020567A                            @found_center:
0020567A 0C00 0001                  		cmp.b	#1,d0
0020567E 6700 0000                  		beq	@floorsolid
00205682                            
00205682 6000                       		bra.s	@SlopeCenter
00205684                            		
00205684                            ; ----------------------------------
00205684                            
00205684                            @found_sides:
00205684 0C00 0001                  		cmp.b	#1,d0
00205688 6700 0000                  		beq	@floorsolid
0020568C 4E75                       		rts
0020568E                            
0020568E                            ; ----------------------------------
0020568E                            
0020568E                            @SlopeCenter:
0020568E 4A87                          		tst.l	d7
00205690 6B00 0000                     		bmi	@NoCol
00205694                               				
00205694 222E 000C                     		move.l	obj_y(a6),d1
00205698 2401                          		move.l	d1,d2
0020569A 47F9 0020 3D40               		lea	(col_SlopeData),a3
002056A0 0240 00FF                    		and.w	#$FF,d0
002056A4 3200                         		move.w	d0,d1
002056A6 E949                         		lsl.w	#4,d1
002056A8 D6C1                         		adda	d1,a3
002056AA 202E 0008                   		move.l	obj_x(a6),d0
002056AE 4840                        		swap	d0
002056B0 0240 000F                   		and.w	#$F,d0
002056B4 1033 0000                   		move.b	(a3,d0.w),d0
002056B8 0240 000F                      		and.w	#$F,d0
002056BC 0281 FFF0 0000                 		and.l	#$FFF00000,d1
002056C2 4840                         		swap	d0
002056C4 0280 FFFF 0000               		and.l	#$FFFF0000,d0
002056CA D280                        		add.l	d0,d1
002056CC                             		
002056CC                             		;TODO: no recuerdo pa que
002056CC                             		;era este fix
002056CC                             		; tambien ver que pedo
002056CC                             		; porque dominou no
002056CC                             		; se queda pegado a los slopes
002056CC                             		
002056CC                            ;  		move.l	obj_x_spd(a6),d0
002056CC                            ;  		btst	#bitobj_flipH,obj_status(a6)
002056CC                            ;  		beq.s	@right
002056CC                            ;  		neg.l	d0
002056CC                            ; @right:
002056CC                            ; 		cmp.l	#$20000,d0
002056CC                            ; 		bge.s	@dontchk
002056CC 082E 0002 001E               		btst	#bitobj_air,obj_status(a6)
002056D2 6700                         		beq.s	@dontchk
002056D4 B481                         		cmp.l	d1,d2
002056D6 6D00                         		blt.s	@NoCol
002056D8                            @dontchk:
002056D8 2E3C 0005 0000              		move.l	#$50000,d7
002056DE 2D41 000C                    		move.l	d1,obj_y(a6)
002056E2 6100 0000                     		bsr	@objFloorFlags
002056E6                            @NoCol:
002056E6 4E75                       		rts
002056E8                            		
002056E8                            ; ----------------------------------
002056E8                            ; Event block: on floor
002056E8                            ; ----------------------------------
002056E8                            
002056E8                            @center_special:
002056E8 0800 0006                  		btst	#6,d0
002056EC 6700                       		beq.s	@return
002056EE 6100 0000                  		bsr	plyrColEntry
002056F2 3814                       		move.w	(a4),d4
002056F4 6000 0000                  		bra	plyrColGo
002056F8                            		
002056F8                            @left_special:
002056F8 0800 0006                  		btst	#6,d0
002056FC 6700                       		beq.s	@return
002056FE 6100 0000                  		bsr	plyrColEntry
00205702 382C 0002                  		move.w	2(a4),d4
00205706 6000 0000                  		bra	plyrColGo
0020570A                            		
0020570A                            @right_special:
0020570A 0800 0006                  		btst	#6,d0
0020570E 6700                       		beq.s	@return
00205710 6100 0000                  		bsr	plyrColEntry
00205714 382C 0004                  		move.w	4(a4),d4
00205718 6000 0000                  		bra	plyrColGo
0020571C                            @return:
0020571C 4E75                       		rts
0020571E                            
0020571E                            ; ----------------------------------
0020571E                            ; Prizes on floor
0020571E                            ; ----------------------------------
0020571E                            
0020571E                            @przfloor_center:
0020571E                            @przfloor_left:
0020571E                            @przfloor_right:
0020571E 7801                       		moveq	#1,d4
00205720                            		
00205720 0C00 0020                  		cmp.b	#$20,d0
00205724 6700                       		beq.s	@trampoline
00205726                            		
00205726 0C00 0040                  		cmp.b	#$40,d0		;> $40?
0020572A 6D00                       		blt.s	@a_coin
0020572C 0200 003F                  		and.b	#$3F,d0
00205730 7801                       		moveq	#1,d4
00205732 4A00                       		tst.b	d0
00205734 6700                       		beq.s	@setcoin
00205736 7805                       		moveq	#5,d4
00205738                            @setcoin:
00205738 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
0020573E 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
00205746 6D00                         		blt.s	@dontadd1up
00205748 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
0020574E 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
00205756                            @dontadd1up:
00205756                            
00205756 6100 FAE8                  		bsr	Prize_Delete
0020575A 6100 E13A                  		bsr	Level_HidePrize
0020575E                            		
0020575E 203C 0000 0000               		move.l	#SndSfx_COIN,d0
00205764 7202                         		moveq 	#2,d1
00205766 7401                         		moveq	#1,d2
00205768 6100 AFA6                    		bsr	Audio_Track_play
0020576C 7800                       		moveq	#0,d4
0020576E                            @a_coin:
0020576E 4A44                       		tst.w	d4
00205770 6600                       		bne.s	@floorsolid
00205772 4E75                       		rts
00205774                            		
00205774                            ; $20
00205774                            
00205774                            @trampoline:
00205774 6100 FA7C                  		bsr	goToTrampolineWhy
00205778                            		
00205778 283C FFF9 0000             		move.l	#-$70000,d4
0020577E 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
00205786 6700                       		beq.s	@dontadd
00205788 283C FFF7 0000             		move.l	#-$90000,d4
0020578E                            @dontadd:
0020578E 2E04                       		move.l	d4,d7
00205790 7801                       		moveq	#1,d4
00205792 4E75                       		rts
00205794                            		
00205794                            ; ----------------------------------
00205794                            
00205794                            ; @check_prz_id:
00205794                            ;    		bsr	Object_PrzActionCeil
00205794                            ;   		tst.w	d4
00205794                            ;   		bne	@ceilingsolid
00205794                            ; 		rts
00205794                            		
00205794                            ;       	bsr	level_CheckPrize
00205794                            ;        	bne	@floorsolid
00205794                            ;        	rts
00205794                            
00205794                            ; ----------------------------------
00205794                            		
00205794                            @floorsolid:
00205794 6100 0000                  		bsr	@objFloorFlags
00205798 02AE FFF0 0000 000C         		and.l	#$FFF00000,obj_y(a6)
002057A0 4287                       		clr.l	d7
002057A2 4E75                       		rts
002057A4                            
002057A4                            ; ----------------------------------
002057A4                            
002057A4                            @objFloorFlags:
002057A4 08EE 0000 0022               		bset	#bitcol_floor,obj_col(a6)
002057AA 08AE 0002 001E             		bclr	#bitobj_air,obj_status(a6)
002057B0                            		
002057B0 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
002057B8 6600 0000                  		bne	@onhold
002057BC 3D7C 000B 0026                 		move.w	#varJumpTimer,plyr_jumptmr(a6)
002057C2                            @onhold:
002057C2 08AE 0005 002D              		bclr	#bitPlyrClimb,plyr_status(a6)
002057C8 08AE 0006 002D             		bclr	#bitPlyrCancelY,plyr_status(a6)
002057CE 4E75                       		rts
002057D0                            		
002057D0                            ; ----------------------------------
002057D0                            ; ceiling collision
002057D0                            ; ----------------------------------
002057D0                            
002057D0                            PlyrColRead_Ceiling:
002057D0 08AE 0001 0022             		bclr	#bitcol_ceiling,obj_col(a6)
002057D6 4A87                       		tst.l	d7
002057D8 6A00                       		bpl.s	@doing_down
002057DA                            		
002057DA 6100 F128                   		bsr 	object_FindCol_CeilingSides
002057DE 2400                        		move.l	d0,d2
002057E0 2601                        		move.l	d1,d3
002057E2 6100 F114                   		bsr 	object_FindPrz_CeilingSides
002057E6 4A00                       		tst.b	d0
002057E8 6600 0000                  		bne	@przceil_right
002057EC 2002                       		move.l	d2,d0
002057EE 6100 0000                  		bsr	@right_special
002057F2 4A00                       		tst.b	d0
002057F4 6600 0000                   		bne	@ceiling_sides
002057F8 2001                       		move.l	d1,d0
002057FA 4A00                       		tst.b	d0
002057FC 6600 0000                  		bne	@przceil_left
00205800 2003                       		move.l	d3,d0
00205802 6100 0000                  		bsr	@left_special
00205806 4A00                       		tst.b	d0
00205808 6600 0000                  		bne	@ceiling_sides
0020580C                            		
0020580C 6100 ECF6                  		bsr	object_FindPrz_Ceiling
00205810 4A00                       		tst.b	d0
00205812 6600 0000                  		bne	@przceil_center
00205816 6100 ECF8                  		bsr	object_FindCol_Ceiling
0020581A 6100 0000                  		bsr	@center_special
0020581E 4A00                       		tst.b	d0
00205820 6600                       		bne.s	@ceiling_center
00205822                            		
00205822                            @doing_down:
00205822 4E75                       		rts
00205824                            
00205824                            ; ----------------------------------
00205824                            
00205824                            @ceiling_center:
00205824                            @ceiling_sides:
00205824 0C00 0001                  		cmp.b	#1,d0
00205828 6700                       		beq.s	@ceilingsolid_stop
0020582A 4E75                       		rts
0020582C                            
0020582C                            ; ----------------------------------
0020582C                            
0020582C                            @ceilingsolid_stop:
0020582C 2E3C 0001 0000             		move.l	#$10000,d7
00205832 066E 0010 000C                     	add.w	#$10,obj_y(a6)
00205838 02AE FFF0 0000 000C        		and.l	#$FFF00000,obj_y(a6)
00205840                            
00205840                            @ceilingsolid:
00205840 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
00205846 08EE 0001 0022              		bset	#bitcol_ceiling,obj_col(a6)
0020584C 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
00205852 4E75                        		rts
00205854                            		
00205854                            ; ----------------------------------
00205854                            ; Event block: ceiling
00205854                            ; ----------------------------------
00205854                            
00205854                            @center_special:
00205854 0800 0006                  		btst	#6,d0
00205858 6700                       		beq.s	@return
0020585A 6100 0000                  		bsr	plyrColEntry
0020585E 382C 000C                  		move.w	$C(a4),d4
00205862 6000 0000                  		bra	plyrColGo
00205866                            		
00205866                            @left_special:
00205866 0800 0006                  		btst	#6,d0
0020586A 6700                       		beq.s	@return
0020586C 6100 0000                  		bsr	plyrColEntry
00205870 382C 000E                  		move.w	$E(a4),d4
00205874 6000 0000                  		bra	plyrColGo
00205878                            		
00205878                            @right_special:
00205878 0800 0006                  		btst	#6,d0
0020587C 6700                       		beq.s	@return
0020587E 6100 0000                  		bsr	plyrColEntry
00205882 382C 0010                  		move.w	$10(a4),d4
00205886 6000 0000                  		bra	plyrColGo
0020588A                            		
0020588A                            @return:
0020588A 4E75                       		rts
0020588C                            		
0020588C                            ; ----------------------------------
0020588C                            
0020588C                            @przceil_center:
0020588C                            @przceil_left:
0020588C                            @przceil_right:
0020588C 6100 F612                     		bsr	Object_PrzActionCeil
00205890 4A44                         		tst.w	d4
00205892 6600 FFAC                    		bne	@ceilingsolid
00205896 4E75                       		rts
00205898                            		
00205898                            ; ----------------------------------
00205898                            ; d0 - LEFT
00205898                            ; d1 - RIGHT
00205898                            ; d2 - CENTER
00205898                            ; ----------------------------------
00205898                            
00205898                            ; @prizes_ceiling:
00205898                            ; 		move.l	d0,d3
00205898                            ; 		btst	#bitobj_flipH,obj_status(a6)
00205898                            ; 		beq.s	@itsleft
00205898                            ; 		exg.l	d1,d3
00205898                            ; @itsleft:
00205898                            ; 
00205898                            ;    		move.l	d2,d0
00205898                            ;    		tst.b	d0
00205898                            ;    		beq.s	@przc_no_c
00205898                            ;   		bsr	Object_PrzActionCeil
00205898                            ;  		tst.w	d4
00205898                            ;  		bne	@ceilingsolid
00205898                            ; @przc_no_c:
00205898                            ; 
00205898                            ; 		move.l	d1,d0
00205898                            ; 		tst.b	d0
00205898                            ; 		beq.s	@przc_no_r
00205898                            ; 		bsr	Object_PrzActionCeil
00205898                            ; 		tst.w	d4
00205898                            ; 		bne	@ceilingsolid
00205898                            ; @przc_no_r:
00205898                            ;  		move.l	d3,d0
00205898                            ;  		tst.b	d0
00205898                            ;  		beq.s	@przc_no_l
00205898                            ;  		bsr	Object_PrzActionCeil
00205898                            ; 		tst.w	d4
00205898                            ; 		bne	@ceilingsolid
00205898                            ; @przc_no_l:
00205898                            ; 		rts
00205898                            		
00205898                            ; **********************************
00205898                            ; Wall collision
00205898                            ; **********************************
00205898                            
00205898                            PlyrColRead_Wall:
00205898 08AE 0002 0022             		bclr	#bitcol_wall_r,obj_col(a6)
0020589E 08AE 0003 0022             		bclr	#bitcol_wall_l,obj_col(a6)
002058A4                            		
002058A4                            		; Ignorar PRIZEs si Player esta
002058A4                            		; en modo escalera
002058A4 082E 0005 002D              		btst	#bitPlyrClimb,plyr_status(a6)
002058AA 6600                        		bne.s	@okaydntchk
002058AC 6100 EB8A                  		bsr	object_FindPrz_Wall
002058B0 2400                       		move.l	d0,d2
002058B2 6100 EDD4                  		bsr	object_FindPrz_WallSides
002058B6 0800 0007                   		btst	#7,d0
002058BA 6700                        		beq.s	@righthidn
002058BC 4200                        		clr.b	d0
002058BE                            @righthidn:
002058BE 4A00                       		tst.b	d0
002058C0 6600 0000                  		bne	@przwall_right
002058C4 2001                       		move.l	d1,d0
002058C6 0800 0007                   		btst	#7,d0
002058CA 6700                        		beq.s	@lefthidn
002058CC 4200                        		clr.b	d0
002058CE                            @lefthidn:
002058CE 4A00                       		tst.b	d0
002058D0 6600 0000                  		bne	@przwall_left
002058D4                            @okaydntchk:
002058D4                            
002058D4 6100 EB6E                  		bsr	object_FindCol_Wall
002058D8 6100 0000                  		bsr	@center_special
002058DC 4A00                       		tst.b	d0
002058DE 6600                       		bne.s	@wall_center
002058E0                            		
002058E0 6100 EDB2                   		bsr 	object_FindCol_WallSides
002058E4 6100 0000                  		bsr	@right_special
002058E8 4A00                       		tst.b	d0
002058EA 6600 0000                  		bne	@wall_right
002058EE                            		
002058EE 2001                       		move.l	d1,d0
002058F0 6100 0000                  		bsr	@left_special
002058F4 4A00                       		tst.b	d0
002058F6 6600 0000                  		bne	@wall_left
002058FA 4E75                       		rts
002058FC                            		
002058FC                            ; ----------------------------------
002058FC                            
002058FC                            @wall_center:
002058FC 0C40 0001                  		cmp.w	#1,d0
00205900 6700 0000                   		beq	@wallsolid_slope
00205904                            		
00205904 4A87                       		tst.l	d7
00205906 6B00                       		bmi.s	@NoCol_LR
00205908 082E 0002 001E                		btst	#bitobj_air,obj_status(a6)
0020590E 6600                          		bne.s	@NoCol_LR
00205910 4287                           		clr.l	d7	
00205912 08AE 0002 001E                 		bclr	#bitobj_air,obj_status(a6)
00205918                                		
00205918 322E 000C                  		move.w	obj_y(a6),d1
0020591C 0441 0001                  		sub.w	#1,d1
00205920 3601                       		move.w	d1,d3
00205922 0241 FFF0                  		and.w	#$FFF0,d1 		
00205926 47F9 0020 3D40                  		lea	(col_SlopeData),a3
0020592C 0240 00FF                        		and.w	#$FF,d0
00205930 E948                            		lsl.w	#4,d0
00205932 D6C0                             		adda	d0,a3
00205934 302E 0008                        		move.w	obj_x(a6),d0
00205938 0240 000F                        		and.w	#$F,d0
0020593C 1433 0000                        		move.b	(a3,d0.w),d2
00205940 0242 000F                        		and.w	#$F,d2
00205944 D242                             		add.w	d2,d1
00205946                                  		
00205946 082E 0002 001E              		btst	#bitobj_air,obj_status(a6)
0020594C 6700                       		beq.s	@dontchkLR
0020594E B641                         		cmp.w	d1,d3
00205950 6D00                         		blt.s	@NoCol_LR
00205952                            @dontchkLR:
00205952 3D41 000C                     		move.w	d1,obj_y(a6)
00205956                            
00205956                            @NoCol_LR:
00205956 4E75                       		rts
00205958                            
00205958                            ; ----------------------------------
00205958                            ; Prizes on walls
00205958                            ; ----------------------------------	
00205958                            
00205958                            @przwall_left:
00205958 6100 0000                  		bsr	@check_wll_prz
0020595C 4A44                          		tst.w	d4
0020595E 6600 0000                     		bne	@wallsolid_l
00205962 4E75                       		rts
00205964                            @przwall_right:
00205964 6100 0000                  		bsr	@check_wll_prz
00205968 4A44                          		tst.w	d4
0020596A 6600 0000                     		bne	@wallsolid_r
0020596E 4E75                       		rts
00205970                            	
00205970                            ; ----------------------------------
00205970                            
00205970                            @check_wll_prz:
00205970 7801                       		moveq	#1,d4
00205972                            		
00205972 0C00 0020                  		cmp.b	#$20,d0
00205976 6700                       		beq.s	@trampolinewll
00205978                            		
00205978 0C00 0040                  		cmp.b	#$40,d0		;> $40?
0020597C 6D00                       		blt.s	@notcoin
0020597E 0200 003F                  		and.b	#$3F,d0
00205982 7801                       		moveq	#1,d4
00205984 4A00                       		tst.b	d0
00205986 6700                       		beq.s	@setcoin
00205988 7805                       		moveq	#5,d4
0020598A                            @setcoin:
0020598A D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
00205990 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
00205998 6D00                         		blt.s	@dontadd1up2
0020599A 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
002059A0 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
002059A8                              		
002059A8 2800                         		move.l	d0,d4
002059AA 203C 0000 0000               		move.l	#SndSfx_OneUp,d0
002059B0 7200                         		moveq 	#0,d1
002059B2 7401                         		moveq	#1,d2
002059B4 6100 AD5A                    		bsr	Audio_Track_play
002059B8 2004                         		move.l	d4,d0
002059BA                            @dontadd1up2:
002059BA                            
002059BA 6100 F884                  		bsr	Prize_Delete
002059BE 6100 DED6                  		bsr	Level_HidePrize
002059C2                            ; 		move.l	d0,(RAM_LvlPlanes+lvl_przreq)
002059C2                            ; 		bset	#bitLvlHidePrz,(RAM_LvlPlanes+lvl_flags)
002059C2                            
002059C2 203C 0000 0000               		move.l	#SndSfx_COIN,d0
002059C8 7202                         		moveq 	#2,d1
002059CA 7401                         		moveq	#1,d2
002059CC 6100 AD42                    		bsr	Audio_Track_play
002059D0 7800                       		moveq	#0,d4
002059D2                            		
002059D2                            @notcoin:
002059D2 4E75                       		rts
002059D4                            		
002059D4                            @trampolinewll:
002059D4                            ; 		bsr	goToTrampolineWhy
002059D4                            
002059D4                            ; 		and.w	#$FFF8,obj_x(a6)
002059D4                            		
002059D4                            ; 		move.l	#-$80000,d0
002059D4                            ; 		btst	#bitobj_flipH,obj_status(a6)
002059D4                            ; 		bne.s	@lefty
002059D4                            ; 		tst.l	d6
002059D4                            ; 		bpl.s	@righy
002059D4                            ; @lefty:
002059D4                            ; 		neg.l	d0
002059D4                            ; @righy:
002059D4                            ; 		move.l	d0,d6
002059D4 7801                       		moveq	#1,d4
002059D6 4E75                       		rts
002059D8                            		
002059D8                            ; ----------------------------------
002059D8                            
002059D8                            @wall_right:
002059D8                            ; 		btst	#bitobj_flipH,obj_status(a6)
002059D8                            ; 		bne.s	@return_w
002059D8 0C00 0002                    		cmp.b	#2,d0
002059DC 6C00                         		bge.s	@return_w
002059DE 0C00 0001                   		cmp.b	#1,d0
002059E2 6700                         		beq.s	@wallsolid_r
002059E4 4E75                         		rts
002059E6                              		
002059E6                            @wall_left:
002059E6                            ; 		btst	#bitobj_flipH,obj_status(a6)
002059E6                            ; 		beq.s	@return_w
002059E6 0C00 0002                    		cmp.b	#2,d0
002059EA 6C00                         		bge.s	@return_w
002059EC 0C00 0001                    		cmp.b	#1,d0
002059F0 6700                         		beq.s	@wallsolid_l
002059F2                            @return_w:
002059F2 4E75                       		rts
002059F4                            		
002059F4                            ; ----------------------------------
002059F4                            
002059F4                            @wallsolid_r:
002059F4 026E FFF8 0008             		and.w	#$FFF8,obj_x(a6)
002059FA                            		
002059FA 4286                       		clr.l	d6
002059FC 08EE 0002 0022             		bset	#bitcol_wall_r,obj_col(a6)
00205A02 4E75                       		rts
00205A04                            
00205A04                            ; ----------------------------------
00205A04                            
00205A04                            @wallsolid_l:
00205A04 066E 0004 0008             		add.w	#4,obj_x(a6)
00205A0A 026E FFF8 0008             		and.w	#$FFF8,obj_x(a6)
00205A10                            		
00205A10                            ; 		moveq	#0,d4
00205A10                            ; 		move.b	obj_size(a6),d4
00205A10                            ; 		lsl.w	#3,d4
00205A10                            ; 		move.w	obj_x(a6),d5
00205A10                            ; 		sub.w	#1,d5
00205A10                            ; 		sub.w	d4,d5
00205A10                            ; 		tst.w	d5
00205A10                            ; 		bpl.s	@noleftlvl
00205A10                            ; 		
00205A10                            ; 		moveq	#0,d0
00205A10                            ; 		add.w	d4,d0
00205A10                            ; 		move.w	d0,obj_x(a6)
00205A10                            ; 		bra.s	@leftend
00205A10                            ; @noleftlvl:
00205A10                            ; 		move.l	d0,d2
00205A10                            ; 		swap	d2
00205A10                            ; 		and.w	#$FFF0,d2
00205A10                            ; 		add.w	#$10,d2
00205A10                            ; 		add.w	#8,d2
00205A10                            ; 		move.w	d2,obj_x(a6)
00205A10                            ; @leftend:
00205A10 4286                       		clr.l	d6
00205A12 08EE 0003 0022             		bset	#bitcol_wall_l,obj_col(a6)
00205A18 4E75                       		rts
00205A1A                            
00205A1A                            ; ----------------------------------
00205A1A                            
00205A1A                            @wallsolid_slope:
00205A1A 082E 0000 001E                  		btst	#bitobj_flipH,obj_status(a6)
00205A20 6600                       		bne.s	@wllflg_l
00205A22 08EE 0002 0022             		bset	#bitcol_wall_r,obj_col(a6)
00205A28 4E75                       		rts
00205A2A                            @wllflg_l:
00205A2A 08EE 0003 0022             		bset	#bitcol_wall_l,obj_col(a6)
00205A30 4E75                       		rts
00205A32                             		
00205A32                            ; ----------------------------------
00205A32                            ; Event block: on wall
00205A32                            ; ----------------------------------
00205A32                            
00205A32                            @center_special:
00205A32 0800 0006                  		btst	#6,d0
00205A36 6700                       		beq.s	@return
00205A38 6100 0000                  		bsr	plyrColEntry
00205A3C 382C 0006                  		move.w	6(a4),d4
00205A40 6000 0000                  		bra	plyrColGo
00205A44                            		
00205A44                            @left_special:
00205A44 0800 0006                  		btst	#6,d0
00205A48 6700                       		beq.s	@return
00205A4A 6100 0000                  		bsr	plyrColEntry
00205A4E 382C 0008                  		move.w	8(a4),d4
00205A52 6000 0000                  		bra	plyrColGo
00205A56                            		
00205A56                            @right_special:
00205A56 0800 0006                  		btst	#6,d0
00205A5A 6700                       		beq.s	@return
00205A5C 6100 0000                  		bsr	plyrColEntry
00205A60 382C 000A                  		move.w	$A(a4),d4
00205A64 6000 0000                  		bra	plyrColGo
00205A68                            		
00205A68                            @return:
00205A68 4E75                       		rts
00205A6A                            		
00205A6A                            ; ---------------------------------------------
00205A6A                            ; EVENT BLOCKS ($80+)
00205A6A                            ; ---------------------------------------------
00205A6A                            
00205A6A                            plyrColEntry:
00205A6A 2800                       		move.l	d0,d4
00205A6C 0244 003F                  		and.w	#$3F,d4
00205A70 C8FC 0012                  		mulu.w	#$12,d4
00205A74 49FA 0000                  		lea	plyEvnList(pc),a4
00205A78 D8C4                       		adda	d4,a4
00205A7A 4E75                       		rts
00205A7C                            plyrColGo:
00205A7C 0284 0000 FFFF             		and.l	#$FFFF,d4
00205A82 0684 0000 0000             		add.l	#plyEvnList,d4
00205A88 2844                       		movea.l	d4,a4
00205A8A 4ED4                       		jmp	(a4)
00205A8C                            	
00205A8C                            ; ---------------------------------------------
00205A8C                            ;   Floor Center |   Floor Left |   Floor Right
00205A8C                            ;    Wall Center |    Wall Left |    Wall Right
00205A8C                            ; Ceiling Center | Ceiling Left | Ceiling Right
00205A8C                            ; 
00205A8C                            ; d0 - Return collision (xpos|ypos|byte)
00205A8C                            ; DO NOT USE d1 WHILE CHECKING SIDES
00205A8C                            ; ---------------------------------------------
00205A8C                            
00205A8C                            plyEvnList:
00205A8C                            	; $40 - Exit level (old)
00205A8C 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
00205A92 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
00205A98 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
00205A9E                            	; $41 - Ladder (climbing mode)
00205A9E 0000 0000 0000             	dc.w @event41_flr-plyEvnList,@event41_flrsd-plyEvnList,@event41_flrsd-plyEvnList
00205AA4 0000 0000 0000             	dc.w @event41_wll-plyEvnList,       @unused-plyEvnList,       @unused-plyEvnList
00205AAA 0000 0000 0000             	dc.w      @unused-plyEvnList,       @unused-plyEvnList,       @unused-plyEvnList
00205AB0                            	; $42 - Spikes (Up)
00205AB0 0000 0000 0000             	dc.w @event42-plyEvnList,@event42-plyEvnList,@event42-plyEvnList
00205AB6 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205ABC 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205AC2                            	;$83
00205AC2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205AC8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205ACE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205AD4                            	;$84
00205AD4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205ADA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205AE0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205AE6                            	;$85
00205AE6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205AEC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205AF2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205AF8                            	;$86
00205AF8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205AFE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B04 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B0A                            	;$87
00205B0A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B10 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B16 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B1C                            	;$88
00205B1C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B22 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B28 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B2E                            	;$89
00205B2E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B34 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B3A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B40                            	;$8A
00205B40 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B46 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B4C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B52                            	;$8B
00205B52 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B58 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B5E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B64                            	;$8C
00205B64 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B6A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B70 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B76                            	;$8D
00205B76 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B7C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B82 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B88                            	;$8E
00205B88 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B8E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B94 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B9A                            	;$8F
00205B9A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205BA0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205BA6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205BAC                            	
00205BAC                            	;$90
00205BAC 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
00205BB2 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
00205BB8 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
00205BBE                            	;$91
00205BBE 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
00205BC4 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
00205BCA 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
00205BD0                            	;$92
00205BD0 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
00205BD6 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
00205BDC 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
00205BE2                            	;$93
00205BE2 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
00205BE8 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
00205BEE 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
00205BF4                            	;$94
00205BF4 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205BFA 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C00 0000 0000 0000             	dc.w @event54_cei-plyEvnList,@event54_cei-plyEvnList,@event54_cei-plyEvnList
00205C06                            	;$95
00205C06 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C0C 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C12 0000 0000 0000             	dc.w @event55_cei-plyEvnList,@event55_cei-plyEvnList,@event55_cei-plyEvnList
00205C18                            	;$96
00205C18 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C1E 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C24 0000 0000 0000             	dc.w @event56_cei-plyEvnList,@event56_cei-plyEvnList,@event56_cei-plyEvnList
00205C2A                            	;$97
00205C2A 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C30 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C36 0000 0000 0000             	dc.w @event57_cei-plyEvnList,@event57_cei-plyEvnList,@event57_cei-plyEvnList
00205C3C                            	;$98
00205C3C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C42 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C48 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C4E                            	;$99
00205C4E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C54 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C5A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C60                            	;$9A
00205C60 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C66 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C6C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C72                            	;$9B
00205C72 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C78 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C7E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C84                            	;$9C
00205C84 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C8A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C90 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C96                            	;$9D
00205C96 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C9C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CA2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CA8                            	;$9E
00205CA8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CAE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CB4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CBA                            	;$9F
00205CBA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CC0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CC6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CCC                            
00205CCC                            	;$A0
00205CCC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CD2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CD8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CDE                            	;$A1
00205CDE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CE4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CEA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CF0                            	;$A2
00205CF0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CF6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CFC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D02                            	;$A3
00205D02 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D08 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D0E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D14                            	;$A4
00205D14 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D1A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D20 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D26                            	;$A5
00205D26 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D2C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D32 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D38                            	;$A6
00205D38 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D3E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D44 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D4A                            	;$A7
00205D4A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D50 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D56 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D5C                            	;$A8
00205D5C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D62 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D68 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D6E                            	;$A9
00205D6E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D74 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D7A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D80                            	;$AA
00205D80 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D86 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D8C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D92                            	;$AB
00205D92 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D98 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D9E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DA4                            	;$AC
00205DA4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DAA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DB0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DB6                            	;$AD
00205DB6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DBC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DC2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DC8                            	;$AE
00205DC8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DCE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DD4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DDA                            	;$AF
00205DDA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DE0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DE6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DEC                            		
00205DEC                            ; ----------------------------------
00205DEC                            ; EVENT $80
00205DEC                            ; ----------------------------------
00205DEC                            
00205DEC                            @event40:
00205DEC 4200                       		clr.b	d0
00205DEE 4A39 FFFF DE4C             		tst.b	(RAM_ModeReset)
00205DF4 6600                       		bne.s	@already
00205DF6 0679 0001 FFFF DC06          		add.w	#1,(RAM_CurrLevel)
00205DFE 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
00205E06                            @already:
00205E06 4E75                       		rts
00205E08                            		
00205E08                            ; ----------------------------------
00205E08                            ; EVENT $41
00205E08                            ; ----------------------------------
00205E08                            
00205E08                            @event41_flr:
00205E08 4282                       		clr.l	d2
00205E0A 6100 EBFE                  		bsr	object_FindCol_Center
00205E0E 0C00 0041                  		cmp.b	#$41,d0
00205E12 6700 0000                  		beq	@unused_flag
00205E16 7401                       		moveq	#1,d2	
00205E18                            @notclimb:
00205E18                            
00205E18                            		
00205E18 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
00205E20 6700 0000                  		beq	@unused_flag
00205E24                            		
00205E24 2400                       		move.l	d0,d2
00205E26 6100 E758                  		bsr	object_FindCol_FloorSides
00205E2A 0C00 0041                  		cmp.b	#$41,d0
00205E2E 6700                       		beq.s	@usethis
00205E30 2001                       		move.l	d1,d0
00205E32 0C00 0041                  		cmp.b	#$41,d0
00205E36 6700                       		beq.s	@usethis
00205E38 2002                       		move.l	d2,d0
00205E3A                            @usethis:
00205E3A 4286                       		clr.l	d6
00205E3C 4287                       		clr.l	d7
00205E3E 0280 FFF0 0000             		and.l	#$FFF00000,d0
00205E44 0680 0008 0000             		add.l	#$80000,d0
00205E4A 2D40 0008                  		move.l	d0,obj_x(a6)
00205E4E 08EE 0005 002D             		bset	#bitPlyrClimb,plyr_status(a6)
00205E54 08AE 0000 0022             		bclr	#bitcol_floor,obj_col(a6)
00205E5A 1D7C 0004 001A               		move.b	#4,obj_anim_id(a6)
00205E60 1D7C 000C 0020              		move.b	#12,obj_frame(a6)		;FRAME 12
00205E66 066E 0008 000C             		add.w	#8,obj_y(a6)
00205E6C 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
00205E72                            
00205E72                            ; 		clr.l	d0
00205E72 4E75                       		rts
00205E74                             		
00205E74                            ; --------------------
00205E74                            
00205E74                            @event41_flrsd:
00205E74                            ; 		clr.l	d0
00205E74                            ; 		rts
00205E74                            		
00205E74                            ; --------------------
00205E74                            
00205E74                            @event41_cei:
00205E74 4280                       		clr.l	d0
00205E76 4E75                       		rts
00205E78                            		
00205E78                            ; --------------------
00205E78                            
00205E78                            @event41_wll:
00205E78                            ;  		clr.l	d0
00205E78 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00205E7E 6700                       		beq.s	@notwaitclmb
00205E80 1D7C 00FF 001A              		move.b	#-1,obj_anim_id(a6)
00205E86 4286                       		clr.l	d6
00205E88 4287                       		clr.l	d7
00205E8A                            @notwaitclmb:
00205E8A                            ; 		move.l	d0,d2
00205E8A 0839 0000 FFFF DE83         		btst	#bitJoyUp,(RAM_Control_1+OnHold)
00205E92 6700                        		beq.s	@dontclimb
00205E94 1D7C 0004 001A               		move.b	#4,obj_anim_id(a6)
00205E9A 082E 0005 002D              		btst	#bitPlyrClimb,plyr_status(a6)
00205EA0 6600                        		bne.s	@alrdup
00205EA2                             		
00205EA2 6100 EB66                    		bsr	object_FindCol_Center
00205EA6 0C00 0041                   		cmp.b	#$41,d0
00205EAA 6700                        		beq.s	@canclimb
00205EAC 6100 E528                     		bsr	object_FindCol_Floor
00205EB0 0C00 0041                   		cmp.b	#$41,d0
00205EB4 6600                        		bne.s	@dontclimb
00205EB6                            @canclimb:
00205EB6 0280 FFF0 0000              		and.l	#$FFF00000,d0
00205EBC 0680 0008 0000               		add.l	#$80000,d0
00205EC2 2D40 0008                   		move.l	d0,obj_x(a6)
00205EC6                             		
00205EC6                            @alrdup:
00205EC6 04AE 0001 6000 000C         		sub.l	#$16000,obj_y(a6)
00205ECE 4286                        		clr.l	d6
00205ED0 4287                        		clr.l	d7
00205ED2 08EE 0005 002D               		bset	#bitPlyrClimb,plyr_status(a6)
00205ED8 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
00205EDE                             
00205EDE                            @dontclimb:
00205EDE 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
00205EE6 6700                       		beq.s	@dontclimbd
00205EE8                            		
00205EE8 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00205EEE 6600                       		bne.s	@alrddwn
00205EF0 6100 EB18                  		bsr	object_FindCol_Center
00205EF4 0C00 0041                  		cmp.b	#$41,d0
00205EF8 6600                       		bne.s	@dontclimbd
00205EFA 0280 FFF0 0000             		and.l	#$FFF00000,d0
00205F00 0680 0008 0000              		add.l	#$80000,d0
00205F06 2D40 0008                  		move.l	d0,obj_x(a6)
00205F0A                            @alrddwn:
00205F0A 06AE 0001 6000 000C        		add.l	#$16000,obj_y(a6)
00205F12 4286                       		clr.l	d6
00205F14 4287                       		clr.l	d7
00205F16 08EE 0005 002D              		bset	#bitPlyrClimb,plyr_status(a6)
00205F1C 1D7C 0004 001A              		move.b	#4,obj_anim_id(a6)
00205F22 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
00205F28                            @dontclimbd:
00205F28                            
00205F28 4280                       		clr.l	d0
00205F2A 4E75                       		rts
00205F2C                            
00205F2C                            ; --------------------
00205F2C                            
00205F2C                            @unused_flag:
00205F2C 1002                        		move.b	d2,d0
00205F2E 4E75                        		rts
00205F30                            
00205F30                            ; ----------------------------------
00205F30                            ; EVENT $82
00205F30                            ; ----------------------------------
00205F30                            
00205F30                            @event42:
00205F30 08EE 0003 001E             		bset	#bitobj_hurt,obj_status(a6)
00205F36                            		
00205F36 103C 0001                  		move.b	#1,d0
00205F3A 4E75                       		rts
00205F3C                            		
00205F3C                            ; ----------------------------------
00205F3C                            ; EVENT $90
00205F3C                            ;
00205F3C                            ; CHECKS COLOR
00205F3C                            ; ----------------------------------
00205F3C                            
00205F3C                            @event50_check:
00205F3C 0C79 000E FFFF E8F6        		cmp.w	#$00E,(RAM_Palette+$26)
00205F44 6700 0000                  		beq	@event_solid
00205F48 6000 0000                  		bra	@unused
00205F4C                            
00205F4C                            ; ----------------------------------
00205F4C                            ; EVENT $91
00205F4C                            ;
00205F4C                            ; CHECKS COLOR
00205F4C                            ; ----------------------------------
00205F4C                            
00205F4C                            @event51_check:
00205F4C 0C79 0E00 FFFF E8FC        		cmp.w	#$E00,(RAM_Palette+$2C)
00205F54 6700 0000                  		beq	@event_solid
00205F58 6000 0000                  		bra	@unused
00205F5C                            		
00205F5C                            ; ----------------------------------
00205F5C                            ; EVENT $92
00205F5C                            ;
00205F5C                            ; CHECKS COLOR
00205F5C                            ; ----------------------------------
00205F5C                            
00205F5C                            @event52_check:
00205F5C 0C79 00E0 FFFF E902        		cmp.w	#$0E0,(RAM_Palette+$32)
00205F64 6700 0000                  		beq	@event_solid
00205F68 6000 0000                  		bra	@unused
00205F6C                            
00205F6C                            ; ----------------------------------
00205F6C                            ; EVENT $93
00205F6C                            ;
00205F6C                            ; CHECKS COLOR
00205F6C                            ; ----------------------------------
00205F6C                            
00205F6C                            @event53_check:
00205F6C 0C79 00EE FFFF E908        		cmp.w	#$0EE,(RAM_Palette+$38)
00205F74 6700 0000                  		beq	@event_solid
00205F78 6000 0000                  		bra	@unused
00205F7C                            		
00205F7C                            ; ----------------------------------
00205F7C                            ; EVENT $94
00205F7C                            ; 
00205F7C                            ; CHECKS COLOR
00205F7C                            ; ----------------------------------
00205F7C                            
00205F7C                            @event54_cei:
00205F7C 243C 0323 1102             		move.l	#$03231102,d2
00205F82 0C79 000E FFFF E8F6        		cmp.w	#$00E,(RAM_Palette+$26)
00205F8A 6600                       		bne.s	@fade_this
00205F8C 243C 0423 1102             		move.l	#$04231102,d2
00205F92                            @fade_this:
00205F92 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00205F98 6600                       		bne.s	@busy_pal
00205F9A 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
00205FA0                            @busy_pal:
00205FA0 103C 0001                  		move.b	#1,d0
00205FA4 4E75                       		rts
00205FA6                            
00205FA6                            ; ----------------------------------
00205FA6                            ; EVENT $95
00205FA6                            ; 
00205FA6                            ; CHECKS COLOR
00205FA6                            ; ----------------------------------
00205FA6                            
00205FA6                            @event55_cei:
00205FA6 243C 0383 1402             		move.l	#$03831402,d2
00205FAC 0C79 0E00 FFFF E8FC        		cmp.w	#$E00,(RAM_Palette+$2C)
00205FB4 6600                       		bne.s	@fade_this_b
00205FB6 243C 0483 1402             		move.l	#$04831402,d2
00205FBC                            @fade_this_b:
00205FBC 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00205FC2 6600                       		bne.s	@busy_pal_b
00205FC4 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
00205FCA                            @busy_pal_b:
00205FCA 103C 0001                  		move.b	#1,d0
00205FCE 4E75                       		rts
00205FD0                            	
00205FD0                            ; ----------------------------------
00205FD0                            ; EVENT $96
00205FD0                            ; 
00205FD0                            ; CHECKS COLOR
00205FD0                            ; ----------------------------------
00205FD0                            
00205FD0                            @event56_cei:
00205FD0 243C 0343 1702             		move.l	#$03431702,d2
00205FD6 0C79 00E0 FFFF E902        		cmp.w	#$0E0,(RAM_Palette+$32)
00205FDE 6600                       		bne.s	@fade_this_g
00205FE0 243C 0443 1702             		move.l	#$04431702,d2
00205FE6                            @fade_this_g:
00205FE6 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00205FEC 6600                       		bne.s	@busy_pal_g
00205FEE 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
00205FF4                            @busy_pal_g:
00205FF4 103C 0001                  		move.b	#1,d0
00205FF8 4E75                       		rts
00205FFA                            
00205FFA                            ; ----------------------------------
00205FFA                            ; EVENT $97
00205FFA                            ; 
00205FFA                            ; CHECKS COLOR
00205FFA                            ; ----------------------------------
00205FFA                            
00205FFA                            @event57_cei:
00205FFA 243C 0363 1A02             		move.l	#$03631A02,d2
00206000 0C79 00EE FFFF E908        		cmp.w	#$0EE,(RAM_Palette+$38)
00206008 6600                       		bne.s	@fade_this_y
0020600A 243C 0463 1A02             		move.l	#$04631A02,d2
00206010                            @fade_this_y:
00206010 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00206016 6600                       		bne.s	@busy_pal_y
00206018 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
0020601E                            @busy_pal_y:
0020601E 103C 0001                  		move.b	#1,d0
00206022 4E75                       		rts
00206024                            		
00206024                            ; ----------------------------------
00206024                            ; Full solid
00206024                            ; ----------------------------------
00206024                            
00206024                            @event_solid:
00206024 103C 0001                  		move.b	#1,d0
00206028 4E75                       		rts
0020602A                            		
0020602A                            ; ----------------------------------
0020602A                            ; Return
0020602A                            ; ----------------------------------
0020602A                            
0020602A                            @unused:
0020602A 4280                       		clr.l	d0
0020602C 4E75                       		rts
0020602E                            		
0020602E                            ; ---------------------------------------------
0020602E                            ; Move level camera
0020602E                            ; ---------------------------------------------
0020602E                            
0020602E                            Plyr_LvlCamera:
0020602E 4BF9 FFFF BC00              		lea	(RAM_LvlPlanes),a5
00206034                             		
00206034                            ; 		move.b	lvl_settings(a5),d0
00206034                            ; 		and.w	#$F,d0
00206034                            ; 		add.w	d0,d0
00206034                            ; 		move.w	@ScrollTypes(pc,d0.w),d1
00206034                            ; 		jmp	@ScrollTypes(pc,d1.w)
00206034                            ; 		
00206034                            ; ; -----------------------------------
00206034                            ; 
00206034                            ; @ScrollTypes:
00206034                            ; 		dc.w @Scrl_Normal-@ScrollTypes
00206034                            ; 		dc.w @Scrl_Section-@Scrolltypes
00206034                            ; 		dc.w 0
00206034                            ; 		dc.w 0
00206034                            ; 		dc.w 0
00206034                            ; 		dc.w 0
00206034                            ; 		dc.w 0
00206034                            ; 		dc.w 0
00206034                            ; 		dc.w 0
00206034                            	
00206034                            ; -----------------------------------
00206034                            ; Default scroll
00206034                            ; 
00206034                            ; Autochecks the level size
00206034                            ; -----------------------------------
00206034                            
00206034                            @Scrl_Normal:
00206034 7400                       		moveq	#0,d2
00206036 7600                       		moveq	#0,d3
00206038                            		
00206038 383C 0140                  		move.w	#320,d4
0020603C 1039 FFFF ED1C             		move.b	(RAM_VidRegs+$C),d0
00206042 0240 0081                  		and.w	#%10000001,d0
00206046 6600                       		bne.s	@normal_hor
00206048 383C 0100                  		move.w	#256,d4
0020604C                            @normal_hor:
0020604C 3004                       		move.w	d4,d0
0020604E E848                       		lsr.w	#4,d0
00206050 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00206054 B240                       		cmp.w	d0,d1
00206056 6F00                       		ble.s	@DontScrollHor
00206058                            		
00206058 302E 0008                  		move.w	obj_x(a6),d0
0020605C 7A00                       		moveq	#0,d5
0020605E 3204                       		move.w	d4,d1
00206060 E249                       		lsr.w	#1,d1
00206062 9041                       		sub.w	d1,d0
00206064 6B00                       		bmi.s	@Wait_X
00206066 3A00                       		move.w	d0,d5
00206068                            		
00206068 322D 001C                   		move.w	lvl_x(a5),d1
0020606C B245                        		cmp.w	d5,d1
0020606E 6700                        		beq.s	@Wait_X		
00206070 7000                        		moveq	#bitLvlDirR,d0
00206072 BA41                         		cmp.w	d1,d5
00206074 6E00                         		bgt.s	@RightDir
00206076 7001                         		moveq	#bitLvlDirL,d0	
00206078                            @RightDir:
00206078 01ED 003A                    		bset	d0,lvl_flags(a5)
0020607C                             		
0020607C                            @Wait_X:
0020607C 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00206080 3004                       		move.w	d4,d0
00206082 E848                       		lsr.w	#4,d0
00206084 9240                       		sub.w	d0,d1
00206086 3005                       		move.w	d5,d0
00206088 0440 0001                  		sub.w	#1,d0
0020608C E949                       		lsl.w	#4,d1
0020608E B041                       		cmp.w	d1,d0
00206090 6D00                       		blt.s	@NotEnd_X
00206092 3A01                       		move.w	d1,d5
00206094                            @NotEnd_X:
00206094 3005                       		move.w	d5,d0
00206096 E848                       		lsr.w	#4,d0
00206098 3B45 001C                  		move.w	d5,lvl_x(a5)
0020609C                            
0020609C                            @DontScrollHor:
0020609C                            
0020609C                            ; ------------------------
0020609C                            ; Update Vertical
0020609C                            ; scrolling
0020609C                            ; ------------------------
0020609C                            
0020609C 0C6D 000E 0036              		cmp.w	#(224/16),lvl_maxcam_y(a5)
002060A2 6F00 0000                   		ble	@single_Y
002060A6                             		
002060A6 3A2D 0020                    		move.w	lvl_y(a5),d5
002060AA 382E 000C                    		move.w	obj_y(a6),d4
002060AE 986D 0020                    		sub.w	lvl_y(a5),d4
002060B2                              		
002060B2 0C44 0068                    		cmp.w	#(224/2)-8,d4
002060B6 6D00                         		blt.s	@Do_Up
002060B8 0C44 007E                    		cmp.w	#(224/2)+14,d4
002060BC 6F00                         		ble.s	@Set_Y
002060BE                              		
002060BE 302E 000C                  		move.w	obj_y(a6),d0
002060C2 0440 007E                  		sub.w	#(224/2)+14,d0
002060C6 3A00                       		move.w	d0,d5
002060C8 08ED 0002 003A                   		bset	#bitLvlDirD,lvl_flags(a5)
002060CE 6000                             		bra.s	@Set_Y
002060D0                                  		
002060D0                            @Do_Up:
002060D0 302E 000C                  		move.w	obj_y(a6),d0
002060D4 0440 0068                  		sub.w	#(224/2)-8,d0
002060D8 3A00                       		move.w	d0,d5
002060DA 08ED 0003 003A                   		bset	#bitLvlDirU,lvl_flags(a5)
002060E0                                  		
002060E0 6000                       		bra.s	@Set_Y
002060E2                            		
002060E2                            @old_yscrl:
002060E2 3A2E 000C                    		move.w	obj_y(a6),d5			; Old
002060E6 383C 0080                   		move.w	#(224/2)+$10,d4
002060EA 9A44                        		sub.w	d4,d5
002060EC 08ED 0002 003A                  		bset	#bitLvlDirD,lvl_flags(a5)
002060F2 08ED 0003 003A                  		bset	#bitLvlDirU,lvl_flags(a5)
002060F8                                 		
002060F8                            ;  		sub.w	#((224/2)+$10),d5
002060F8                            ;  		move.w	obj_y(a6),d0			; New
002060F8                            ;  		sub.w	#((224/2)+$20),d0
002060F8                            ;  		add.w	lvl_y(a5),d0
002060F8                            ;  		asr.w	#3,d0
002060F8                            ;  		add.w	d0,d0
002060F8                            ;  		move.w	d0,d5
002060F8                             		
002060F8                            ;  		moveq	#bitLvlDirD,d2
002060F8                            ;    		cmp.w	d5,d1
002060F8                            ;    		bgt.s	@drwydown
002060F8                            ;    		bset	#bitLvlDirU,d2
002060F8                            ; @drwydown:
002060F8                            
002060F8                            ;     		bset	#bitLvlDirD,lvl_flags(a5)
002060F8                            ;     		bset	#bitLvlDirU,lvl_flags(a5)
002060F8                               		
002060F8                            ; --------------------------------
002060F8                             	
002060F8                            @Set_Y:
002060F8 4A45                        		tst.w	d5
002060FA 6A00                        		bpl.s	@onyplus
002060FC 4245                        		clr.w	d5
002060FE                            @onyplus:
002060FE 7200                       		moveq	#0,d1
00206100 322D 0036                    		move.w	lvl_maxcam_y(a5),d1
00206104 0441 000E                    		sub.w	#(224/16),d1
00206108 E949                         		lsl.w	#4,d1
0020610A                            ;   		swap	d1
0020610A BA41                         		cmp.w	d1,d5
0020610C 6D00                         		blt.s	@notbotmd
0020610E 3A01                         		move.w	d1,d5
00206110                            @notbotmd:
00206110 3B45 0020                  		move.w	d5,lvl_y(a5)
00206114                            		
00206114                            @single_Y:
00206114 4E75                       		rts
00206116                            ; 		
00206116                            ; ; -----------------------------------
00206116                            ; ; Dungeon Scroll
00206116                            ; ; -----------------------------------
00206116                            ; 
00206116                            ; @Scrl_Section:
00206116                            ; 		btst	#bitobj_flipH,obj_status(a6)
00206116                            ; 		bne.s	@LeftCheck
00206116                            ; 		
00206116                            ; ; RIGHT
00206116                            ; 
00206116                            ;  		btst	#0,plyr_status(a6)
00206116                            ;  		bne.s	@MoveRight
00206116                            ;  		
00206116                            ; 		move.w	obj_x(a6),d1
00206116                            ; 		move.w	#320,d0
00206116                            ; 		move.w	d0,d2
00206116                            ; 		add.w	lvl_x(a5),d2
00206116                            ; 		move.w	d2,plyr_lvltrgt(a6)
00206116                            ; 		add.w	#8,d0
00206116                            ;  		add.w	lvl_x(a5),d0
00206116                            ;  		cmp.w	d0,d1
00206116                            ; 		blt.s	@UpDownChk
00206116                            ;  		
00206116                            ;  		bset	#0,plyr_status(a6)
00206116                            ;  		clr.l	obj_x_spd(a6)
00206116                            ;  		clr.l	obj_y_spd(a6)
00206116                            ; 
00206116                            ; @MoveRight:
00206116                            ;   		move.w	lvl_x(a5),d1
00206116                            ;  		lea	(RAM_ScrlHor),a4
00206116                            ;  		move.w	#224-1,d3
00206116                            ; @doline2:
00206116                            ;  		move.w	d1,d0
00206116                            ;  		neg.w	d0
00206116                            ;  		move.w	d0,(a4)+
00206116                            ;  		asr.w	#4,d0
00206116                            ;  		move.w	d0,(a4)+
00206116                            ;  		dbf	d3,@doline2
00206116                            ;  		
00206116                            ;   		move.w	plyr_lvltrgt(a6),d0
00206116                            ;   		move.w	lvl_x(a5),d1
00206116                            ;   		cmp.w 	d0,d1
00206116                            ;   		bcs.s	@KeepScrlR
00206116                            ;  		bclr	#0,plyr_status(a6)
00206116                            ;   		move.w	d1,lvl_x(a5)
00206116                            ; 		rts
00206116                            ; @KeepScrlR:
00206116                            ;  		add.w	#4,lvl_x(a5)
00206116                            ;       		bset	#bitLvlDirR,lvl_flags(a5)
00206116                            ;        		rts
00206116                            ; 		
00206116                            ; @LeftCheck:
00206116                            ;        		
00206116                            ; 		
00206116                            ; @UpDownChk:
00206116                            ;  		bclr	#0,plyr_status(a6)
00206116                            ; 		rts
00206116                            		
00206116                            ; =================================================================
00206116                            ; 
00206116                            Plyr_SetStartPos:
00206116 4DF9 FFFF C040               		lea	(RAM_ObjBuffer),a6
0020611C 4BF9 FFFF BC00              		lea	(RAM_LvlPlanes),a5
00206122                             		
00206122 3D40 000C                   		move.w	d0,obj_y(a6)
00206126 4840                        		swap	d0
00206128 3D40 0008                   		move.w	d0,obj_x(a6)
0020612C                             		
0020612C                            ; ----------------------------------------
0020612C                             
0020612C 383C 0140                  		move.w	#320,d4
00206130                            ; 		btst	#bit_hortype,lvl_prio(a5)
00206130                            ; 		beq.s	@normal_hor
00206130                            ; 		move.w	#256,d4
00206130                            ; @normal_hor:
00206130 3004                       		move.w	d4,d0
00206132 E848                       		lsr.w	#4,d0
00206134 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00206138 B240                       		cmp.w	d0,d1
0020613A 6F00                       		ble.s	@DontScrollHor
0020613C                            		
0020613C 362E 0008                  		move.w	obj_x(a6),d3
00206140 7400                       		moveq	#0,d2
00206142 3204                       		move.w	d4,d1
00206144 E249                       		lsr.w	#1,d1
00206146 9641                       		sub.w	d1,d3
00206148 6B00                       		bmi.s	@Wait_X
0020614A 3403                       		move.w	d3,d2
0020614C                            @Wait_X:
0020614C 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00206150 3004                       		move.w	d4,d0
00206152 E848                       		lsr.w	#4,d0
00206154 9240                       		sub.w	d0,d1
00206156 3002                       		move.w	d2,d0
00206158 0440 0001                  		sub.w	#1,d0
0020615C E949                       		lsl.w	#4,d1
0020615E B041                       		cmp.w	d1,d0
00206160 6D00                       		blt.s	@NotEnd_X
00206162 3401                       		move.w	d1,d2
00206164                            @NotEnd_X:
00206164 3002                       		move.w	d2,d0
00206166 E848                       		lsr.w	#4,d0
00206168 3B42 001C                  		move.w	d2,lvl_x(a5)
0020616C                            
0020616C                            @DontScrollHor:
0020616C                            
0020616C                            ; ----------------------------------------
0020616C                            
0020616C 426D 0020                  		clr.w	lvl_y(a5)
00206170 0C6D 000E 0036              		cmp.w	#(224/16),lvl_maxcam_y(a5)
00206176 6F00                        		ble.s	@Return
00206178 362E 000C                  		move.w	obj_y(a6),d3
0020617C 7400                       		moveq	#0,d2
0020617E 0443 0084                  		sub.w	#((224/2)+$14),d3	;aprox
00206182 6B00                       		bmi.s	@Wait_Y
00206184 3403                       		move.w	d3,d2
00206186                            @Wait_Y:
00206186 322D 0036                   		move.w	lvl_maxcam_y(a5),d1
0020618A 0441 000E                   		sub.w	#(224/16),d1
0020618E 3002                        		move.w	d2,d0
00206190 0440 0001                   		sub.w	#1,d0
00206194 E949                        		lsl.w	#4,d1
00206196 B041                        		cmp.w	d1,d0
00206198 6D00                        		blt.s	@NotEnd_Y
0020619A 3401                        		move.w	d1,d2
0020619C                            @NotEnd_Y:
0020619C 3B42 0020                  		move.w	d2,lvl_y(a5)
002061A0                             		
002061A0                            @Return:
002061A0 4E75                        		rts
002061A2                            
002061A2                            ; =================================================================
002061A2                            ; ------------------------------------------------
002061A2                            ; EXTERNAL Routines for the player
002061A2                            ; ------------------------------------------------
002061A2                            
002061A2                            ; TODO
002061A2                            
002061A2                            ; =================================================================
002061A2                            ; ------------------------------------------------
002061A2                            ; Data
002061A2                            ; ------------------------------------------------
002061A2                            		
002061A2                            Ani_Player:
002061A2 0000                       		dc.w @Idle-Ani_Player		;$00
002061A4 0000                       		dc.w @Walk-Ani_Player
002061A6 0000                       		dc.w @Jump_1-Ani_Player
002061A8 0000                        		dc.w @Jump_2-Ani_Player
002061AA 0000                        		dc.w @ClimbMove-Ani_Player	;$04
002061AC 0000                        		dc.w @Die-Ani_Player
002061AE                            		even
002061AE                            @Idle:
002061AE 06                          		dc.b 6
002061AF 0000 0000 0000 0000 0000+   		dc.b 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
002061CB FF                         		dc.b -1
002061CC                            		even
002061CC                            @Jump_1:	
002061CC 04                          		dc.b 4
002061CD 0A                          		dc.b $A
002061CE FF                         		dc.b -1
002061D0 00                         		even
002061D0                            @Jump_2:	
002061D0 04                          		dc.b 4
002061D1 0B                           		dc.b $B
002061D2 FF                          		dc.b -1
002061D4 00                          		even
002061D4                            @Walk:
002061D4 03                          		dc.b 3
002061D5 0203 0405 0607 0809         		dc.b 2,3,4,5,6,7,8,9
002061DD FF                         		dc.b -1
002061DE                            		even
002061DE                            @ClimbMove:
002061DE 04                         		dc.b 4
002061DF 0C0D 0E0F 0E0D             		dc.b 12,13,14,15,14,13
002061E5 FF                         		dc.b -1
002061E6                            		even	
002061E6                            @Die:
002061E6 04                         		dc.b 4
002061E7 10                         		dc.b 16
002061E8 FF                         		dc.b -1
002061EA 00                         		even
002061EA 00                         		even
002061EA                               		include	"engine/modes/level/data/objects/dadou/code.asm"
002061EA                            ; =================================================================
002061EA                            ; Object
002061EA                            ; 
002061EA                            ; Dadou
002061EA                            ; =================================================================
002061EA                            
002061EA                            ; =================================================================
002061EA                            ; ------------------------------------------------
002061EA                            ; Variables
002061EA                            ; ------------------------------------------------
002061EA                            
002061EA =00006420                  varVramDadou	equ	$6000|$420
002061EA                            
002061EA                            ; =================================================================
002061EA                            ; ------------------------------------------------
002061EA                            ; RAM
002061EA                            ; ------------------------------------------------
002061EA                            
002061EA                            		rsset Obj_Ram
002061EA =00000024                  timer_1		rs.w 1
002061EA                            
002061EA                            ; =================================================================
002061EA                            ; ------------------------------------------------
002061EA                            ; Code start
002061EA                            ; ------------------------------------------------
002061EA                            
002061EA                            Obj_Dadou:
002061EA 7000                        		moveq	#0,d0
002061EC 102E 001D                   		move.b	obj_index(a6),d0
002061F0 D040                        		add.w	d0,d0
002061F2 323B 0000                   		move.w	@Index(pc,d0.w),d1
002061F6 4EBB 1000                   		jsr	@Index(pc,d1.w)
002061FA                             		
002061FA 6100 E050                   		bsr	Object_OffCheck
002061FE 203C 6420 0000                		move.l	#(varVramDadou<<16),d0
00206204 223C 0000 0000              		move.l	#ani_dadou,d1
0020620A 6100 E0AC                  		bsr	Object_Animate
0020620E                            		
0020620E 203C 6420 0000                 		move.l	#(varVramDadou<<16),d0
00206214 102E 0020                   		move.b	obj_frame(a6),d0
00206218 223C 0000 0000             		move.l	#map_dadou,d1
0020621E 6000 DCEC                   		bra	Object_Show
00206222                             		
00206222                            ; ------------------------------------------------
00206222                            
00206222                            @Index:
00206222 0000                       		dc.w @Init-@Index
00206224 0000                       		dc.w @Stand-@Index
00206226 0000                       		dc.w @Walk-@Index
00206228                            		even
00206228                            		
00206228                            ; =================================================================
00206228                            ; ------------------------------------------------
00206228                            ; Index $00: Init
00206228                            ; ------------------------------------------------
00206228                            
00206228                            @Init:
00206228 2D7C 0101 0102 0004        		move.l	#$01010102,obj_size(a6)
00206230 2D7C 0000 8000 0014        		move.l	#$8000,obj_y_spd(a6)
00206238                            		
00206238 3D7C 00C0 0024             		move.w	#$C0,timer_1(a6)
0020623E 6100 0000                  		bsr	@Go_Stand
00206242                            		
00206242                            ; =================================================================
00206242                            ; ------------------------------------------------                  
00206242                            ; Index $01: Stand
00206242                            ; ------------------------------------------------
00206242                            
00206242                            @Stand:
00206242                            ; 		sub.w	#1,timer_1(a6)
00206242                            ; 		bpl.s	@Pyhsics
00206242                            ; 
00206242                            ; 		move.w	#$C0,timer_1(a6)
00206242 6000 0000                  		bra	@Go_Walk
00206246                            		
00206246                            ; =================================================================
00206246                            ; ------------------------------------------------                  
00206246                            ; Index $01: Walk
00206246                            ; ------------------------------------------------
00206246                            
00206246                            @Walk:
00206246                            ; 		sub.w	#1,timer_1(a6)
00206246                            ; 		bpl.s	@Pyhsics
00206246                            ; 		
00206246                            ; 		move.w	#$C0,timer_1(a6)
00206246                            ; 		bchg	#bitobj_flipH,obj_status(a6)
00206246                            ; 		bra	@Go_Stand
00206246                            		
00206246 6000 0000                  		bra	@Pyhsics
0020624A                            		
0020624A                            ; =================================================================
0020624A                            ; ------------------------------------------------
0020624A                            ; Subs
0020624A                            ; ------------------------------------------------
0020624A                            
0020624A                            @Go_Stand:
0020624A 42AE 0010                  		clr.l	obj_x_spd(a6)
0020624E 422E 001A                  		clr.b	obj_anim_id(a6)
00206252 1D7C 0001 001D             		move.b	#1,obj_index(a6)
00206258 4E75                       		rts
0020625A                            	
0020625A                            ; --------------------------------------
0020625A                            
0020625A                            @Go_Walk:
0020625A 2D7C 0000 4000 0010        		move.l	#$4000,obj_x_spd(a6)
00206262 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00206268 6600                       		bne.s	@right
0020626A 2D7C FFFF C000 0010        		move.l	#-$4000,obj_x_spd(a6)
00206272                            @right:
00206272 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
00206278 1D7C 0002 001D             		move.b	#2,obj_index(a6)
0020627E 4E75                       		rts
00206280                            	
00206280                            ; ------------------------------------------------
00206280                            ; Pyhsics
00206280                            ; ------------------------------------------------
00206280                            
00206280                            @Pyhsics:
00206280 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00206286 2C2E 0010                   		move.l	obj_x_spd(a6),d6
0020628A 2E2E 0014                   		move.l	obj_y_spd(a6),d7
0020628E                             		
0020628E DDAE 0008                   		add.l	d6,obj_x(a6)
00206292 6100 0000                   		bsr	@WallCheck
00206296                            		
00206296                            ; ----------------------------------
00206296                            
00206296 0687 0000 8000               		add.l	#$8000,d7
0020629C 0C87 0004 0000               		cmp.l	#$40000,d7
002062A2 6D00                         		blt.s	@low_y
002062A4 2E3C 0004 0000               		move.l	#$40000,d7
002062AA                            @low_y:
002062AA DFAE 000C                    		add.l	d7,obj_y(a6)
002062AE                              		
002062AE                            ; 		lea	(RAM_LvlPlanes),a5
002062AE                            ; 		move.w	lvl_size_y(a5),d0
002062AE                            ; 		lsl.w	#4,d0
002062AE                            ; 		move.w	obj_y(a6),d1
002062AE                            ; 		moveq	#0,d2
002062AE                            ; 		move.b	obj_size+2(a6),d2
002062AE                            ; 		lsl.w	#3,d2
002062AE                            ; 		sub.w	d2,d1
002062AE                            ; 		cmp.w	d0,d1
002062AE                            ; 		bge	@delete
002062AE                            ; 		
002062AE 4A87                         		tst.l	d7
002062B0 6B00                         		bmi.s	@no_floor
002062B2                              
002062B2 6100 E116                  		bsr	object_FindPrz_Floor
002062B6 2400                       		move.l	d0,d2
002062B8 4A00                       		tst.b	d0
002062BA 6600                       		bne.s	@from_prize
002062BC 6100 E2B6                   		bsr 	object_FindPrz_FloorSides
002062C0 4A00                       		tst.b	d0
002062C2 6600 0000                  		bne	@from_prize;@swap_dir_wl
002062C6 2001                       		move.l	d1,d0
002062C8 4A00                       		tst.b	d0
002062CA 6600 0000                  		bne	@from_prize
002062CE                            		
002062CE 6100 E106                  		bsr	object_FindCol_Floor
002062D2 2400                       		move.l	d0,d2
002062D4 4A00                       		tst.b	d0
002062D6 6600                       		bne.s	@set_floor
002062D8 6100 E2A6                   		bsr 	object_FindCol_FloorSides
002062DC 4A00                       		tst.b	d0
002062DE 6600 0000                  		bne	@set_floor;@swap_dir_wl
002062E2 2001                       		move.l	d1,d0
002062E4 4A00                       		tst.b	d0
002062E6 6700 0000                  		beq	@no_floor
002062EA                            		
002062EA 6000                       		bra.s	@set_floor
002062EC                            ; @swap_dir_wl:
002062EC                            ; 		neg.l	d6
002062EC                            ; 		bchg	#bitobj_flipH,obj_status(a6)
002062EC                            ; 		bra.s	@no_floor
002062EC                            
002062EC                            @from_prize:
002062EC 0C00 0040                  		cmp.b	#$40,d0
002062F0 6C00                       		bge.s	@set_floor
002062F2 103C 0001                  		move.b	#1,d0
002062F6                            		
002062F6                            @set_floor:
002062F6 6100 E774                    		bsr 	object_SetCol_Floor
002062FA                              		
002062FA                            @no_floor:
002062FA                            
002062FA 2D46 0010                   		move.l	d6,obj_x_spd(a6)
002062FE 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00206302                             		
00206302                            ; ----------------------------------
00206302                            ; Check if touched
00206302                            ; ----------------------------------
00206302                            
00206302                            @check_touch:
00206302 6100 E82C                  		bsr	objTouch_Top
00206306 4A00                       		tst.b	d0
00206308 6600                       		bne.s	@touch_flag
0020630A 6100 E8C2                  		bsr	objTouch_Bottom
0020630E 4A00                       		tst.b	d0
00206310 6600                       		bne.s	@touch_flag
00206312                            		
00206312 6100 E95A                  		bsr	objTouch_Sides
00206316 4A00                       		tst.b	d0
00206318 6600                       		bne.s	@touch_flag
0020631A 4840                       		swap	d0
0020631C 4A00                       		tst.b	d0
0020631E 6600                       		bne.s	@touch_flag
00206320 4E75                       		rts
00206322                            		
00206322                            ; -----------------------------------
00206322                            
00206322                            @touch_flag:
00206322 6100 EB2E                  		bsr	objPlyrHurtKill
00206326 6700                       		beq.s	@return
00206328 323C 6420                     		move.w	#varVramDadou,d1
0020632C 142E 0020                   		move.b	obj_frame(a6),d2
00206330 203C 0000 0000             		move.l	#map_dadou,d0
00206336 260C                       		move.l	a4,d3
00206338 6100 EF0C                  		bsr	objAction_SetStomp
0020633C 6000 DEEE                  		bra	Object_IsGone
00206340                            @return:
00206340 4E75                       		rts
00206342                            		
00206342                            ; =================================================================
00206342                            
00206342                            @WallCheck:
00206342 6100 E0F4                     		bsr	object_FindPrz_Wall
00206346 4A00                          		tst.b	d0
00206348 6600                          		bne.s	@foundprzwl
0020634A 6100 E0F8                    		bsr	object_FindCol_Wall
0020634E 4A00                         		tst.b	d0
00206350 6700                         		beq.s	@chk_right
00206352                            @foundprzwl:
00206352 0800 0006                    		btst	#6,d0
00206356 6600                         		bne.s	@chk_right
00206358                            ;    		cmp.b	#2,d0
00206358                            ;    		blt.s	@chk_right
00206358 6100 E7BA                    		bsr	object_SetCol_Wall
0020635C                            ;    		bra.s	@endchk
0020635C                            @chk_right:
0020635C                            
0020635C                            		;TODO: Prize check
0020635C                            ;   		bsr	object_FindPrz_WallSides
0020635C                            ;   		tst.b	d0
0020635C                            ;   		bne.s	@przrotx
0020635C                            ;   		move.l	d1,d0
0020635C                            ;   		tst.b	d0
0020635C                            ;   		bne.s	@przrotx
0020635C                            
0020635C 6100 E336                    		bsr	object_FindCol_WallSides
00206360 0800 0006                    		btst	#6,d0
00206364 6600                         		bne.s	@endchk
00206366 0801 0006                    		btst	#6,d1
0020636A 6600                         		bne.s	@endchk
0020636C 4A00                         		tst.b	d0
0020636E 6600                         		bne.s	@leftws
00206370 4A01                         		tst.b	d1
00206372 6600                         		bne.s	@rightws
00206374 6000                          		bra.s	@endchk
00206376                            @przrotx:
00206376                            	
00206376                            @leftws:
00206376 0C01 0002                  		cmp.b	#2,d1
0020637A 6C00                       		bge.s	@endchk
0020637C 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00206382 6700                       		beq.s	@endchk
00206384 6000                       		bra.s	@rotatex
00206386                            @rightws:
00206386 0C01 0002                  		cmp.b	#2,d1
0020638A 6C00                       		bge.s	@endchk
0020638C 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00206392 6600                       		bne.s	@endchk
00206394                            @rotatex:
00206394 4486                        		neg.l	d6
00206396 086E 0000 001E              		bchg	#bitobj_flipH,obj_status(a6)
0020639C                            @endchk:
0020639C 4E75                       		rts
0020639E                            		
0020639E                            ; ------------------------------------------------
0020639E                            ; Data
0020639E                            ; ------------------------------------------------
0020639E                            		
0020639E                            ; ----------------------------------------
0020639E                            
0020639E                            ani_dadou:
0020639E 0000                       		dc.w @Idle-ani_dadou
002063A0 0000                       		dc.w @Walk-ani_dadou
002063A2                            		even
002063A2                            @Idle:
002063A2 08                          		dc.b 8
002063A3 0000 0000 0000 0000 0001+   		dc.b 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
002063B4 FF                         		dc.b $FF
002063B6 00                         		even
002063B6                            @Walk:
002063B6 06                          		dc.b 6
002063B7 0203 0405 0607 0809         		dc.b 2,3,4,5,6,7,8,9
002063BF FF                         		dc.b $FF
002063C0                            		even	
002063C0                            		even	
002063C0                               		include	"engine/modes/level/data/objects/pikudo/code.asm"
002063C0                            ; =================================================================
002063C0                            ; Object
002063C0                            ; 
002063C0                            ; Pikudo
002063C0                            ; =================================================================
002063C0                            
002063C0                            ; =================================================================
002063C0                            ; ------------------------------------------------
002063C0                            ; Variables
002063C0                            ; ------------------------------------------------
002063C0                            
002063C0 =000004D0                  varVramPikudo	equ	$4D0
002063C0 =000000AA                  varTimerWait	equ	170
002063C0 =0000001E                  varTimerAttck	equ	30
002063C0                            
002063C0                            ; =================================================================
002063C0                            ; ------------------------------------------------
002063C0                            ; RAM
002063C0                            ; ------------------------------------------------
002063C0                            
002063C0                            		rsset Obj_Ram
002063C0 =00000024                  timerpik1	rs.w 1
002063C0 =00000026                  timerpik2	rs.w 1
002063C0 =00000028                  lastx		rs.w 1
002063C0 =0000002A                  lasty		rs.w 1
002063C0                            
002063C0                            ; =================================================================
002063C0                            ; ------------------------------------------------
002063C0                            ; Code start
002063C0                            ; ------------------------------------------------
002063C0                            
002063C0                            Obj_Pikudo:
002063C0 7000                        		moveq	#0,d0
002063C2 102E 001D                   		move.b	obj_index(a6),d0
002063C6 D040                        		add.w	d0,d0
002063C8 323B 0000                   		move.w	@Index(pc,d0.w),d1
002063CC 4EBB 1000                   		jsr	@Index(pc,d1.w)
002063D0                             		
002063D0 6100 DE7A                   		bsr	Object_OffCheck
002063D4 203C 04D0 0000                		move.l	#(varVramPikudo<<16),d0
002063DA 223C 0000 0000              		move.l	#ani_pikudo,d1
002063E0 6100 DED6                  		bsr	Object_Animate
002063E4                            		
002063E4 203C 04D0 0000                 		move.l	#(varVramPikudo<<16),d0
002063EA 102E 0020                   		move.b	obj_frame(a6),d0
002063EE 223C 0000 0000             		move.l	#map_pikudo,d1
002063F4 6000 DB16                   		bra	Object_Show
002063F8                             		
002063F8                            ; ------------------------------------------------
002063F8                            
002063F8                            @Index:
002063F8 0000                       		dc.w @Init-@Index
002063FA 0000                       		dc.w @Stand-@Index
002063FC 0000                       		dc.w @Attack-@Index
002063FE                            		even
002063FE                            		
002063FE                            ; =================================================================
002063FE                            ; ------------------------------------------------
002063FE                            ; Index $00: Init
002063FE                            ; ------------------------------------------------
002063FE                            
002063FE                            @Init:
002063FE 062E 0001 001D             		add.b	#1,obj_index(a6)
00206404 422E 001A                  		clr.b	obj_anim_id(a6)
00206408 422E 0020                  		clr.b	obj_frame(a6)
0020640C 2D7C 0101 0202 0004        		move.l	#$01010202,obj_size(a6)
00206414 42AE 0010                  		clr.l	obj_x_spd(a6)
00206418 3D7C 00AA 0024             		move.w	#varTimerWait,timerpik1(a6)
0020641E 3D6E 0008 0028             		move.w	obj_x(a6),lastx(a6)
00206424 3D6E 000C 002A             		move.w	obj_y(a6),lasty(a6)
0020642A                            		
0020642A                            ; =================================================================
0020642A                            ; ------------------------------------------------                  
0020642A                            ; Index $01: Stand
0020642A                            ; ------------------------------------------------
0020642A                            
0020642A                            @Stand:
0020642A 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00206430 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
00206436 302C 0008                  		move.w	obj_x(a4),d0
0020643A B06E 0008                  		cmp.w	obj_x(a6),d0
0020643E 6D00                       		blt.s	@leftside
00206440 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
00206446                            @leftside:
00206446                            
00206446 6100 E0C8                  		bsr	object_FindCol_Ceiling
0020644A 4A00                       		tst.b	d0
0020644C 6600                       		bne.s	@ignore
0020644E 6100 E4B4                  		bsr	object_FindCol_CeilingSides
00206452 4A00                       		tst.b	d0
00206454 6600                       		bne.s	@ignore	
00206456 4A01                       		tst.b	d1
00206458 6600                       		bne.s	@ignore
0020645A                            		
0020645A 302E 000C                  		move.w	obj_y(a6),d0
0020645E B06E 002A                  		cmp.w	lasty(a6),d0
00206462 6F00                       		ble.s	@ignore
00206464                            		
00206464                            ; 		
00206464                            ; 		bsr	object_FindPrz_CeilingSides
00206464                            ; 		move.l	d0,d2
00206464                            ; 		bsr	object_FindPrz_CeilingSides
00206464                            ; 		or.l	d1,d0
00206464                            ; 		or.l	d2,d0
00206464                            ; 		btst	#7,d0
00206464                            ; 		bne.s	@cont2
00206464                            ; 		btst	#6,d0
00206464                            ; 		bne.s	@cont2
00206464                            ; 		tst.b	d0
00206464                            ; 		bne.s	@ignore
00206464                            ; @cont2:
00206464                            
00206464 046E 0001 000C             		sub.w	#1,obj_y(a6)
0020646A                            @ignore:
0020646A                            
0020646A 046E 0001 0024             		sub.w	#1,timerpik1(a6)
00206470 6A00                       		bpl.s	@waitpik1
00206472                            		
00206472 203C 0000 0000               		move.l	#SndSfx_BEEBUZZ,d0
00206478 7202                         		moveq 	#2,d1
0020647A 7401                         		moveq	#1,d2
0020647C 6100 A292                    		bsr	Audio_Track_play
00206480                              		
00206480 1D7C 0002 001D             		move.b	#2,obj_index(a6)
00206486 3D7C 001E 0024             		move.w	#varTimerAttck,timerpik1(a6)
0020648C 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
00206492 2D7C FFFE 1000 0010        		move.l	#-$1F000,obj_x_spd(a6)
0020649A 2D7C 0002 0000 0014        		move.l	#$20000,obj_y_spd(a6)
002064A2 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
002064A8 6700                       		beq.s	@waitpik1
002064AA 44AE 0010                  		neg.l	obj_x_spd(a6)
002064AE                            
002064AE                            @waitpik1:
002064AE 6000 0000                  		bra	@check_touch
002064B2                            		
002064B2                            ; =================================================================
002064B2                            ; ------------------------------------------------                  
002064B2                            ; Index $02: Attack
002064B2                            ; ------------------------------------------------
002064B2                            
002064B2                            @Attack:
002064B2 2C2E 0010                  		move.l	obj_x_spd(a6),d6
002064B6 2E2E 0014                  		move.l	obj_y_spd(a6),d7
002064BA                            		
002064BA DDAE 0008                  		add.l	d6,obj_x(a6)
002064BE DFAE 000C                  		add.l	d7,obj_y(a6)
002064C2                            		
002064C2                            ; Check for floor or walls
002064C2                            
002064C2 6100 DF12                  		bsr	object_FindCol_Floor
002064C6 4A00                       		tst.b	d0
002064C8 6600                       		bne.s	@forceend
002064CA 6100 DEFE                  		bsr	object_FindPrz_Floor
002064CE 0800 0007                  		btst	#7,d0
002064D2 6600                       		bne.s	@cont
002064D4 0800 0006                  		btst	#6,d0
002064D8 6600                       		bne.s	@cont	
002064DA 4A00                       		tst.b	d0
002064DC 6600                       		bne.s	@forceend
002064DE                            @cont:
002064DE                            
002064DE 6100 DF64                  		bsr	object_FindCol_Wall
002064E2 4A00                       		tst.b	d0
002064E4 6684                       		bne.s	@ignore
002064E6 6100 E1AC                  		bsr	object_FindCol_WallSides
002064EA 4A00                       		tst.b	d0
002064EC 6600 FF7C                  		bne	@ignore		
002064F0 4A01                       		tst.b	d1
002064F2 6600 FF76                  		bne	@ignore
002064F6                            		
002064F6 6100 E190                  		bsr	object_FindPrz_WallSides
002064FA 2400                       		move.l	d0,d2
002064FC 6100 E18A                  		bsr	object_FindPrz_WallSides
00206500 8081                       		or.l	d1,d0
00206502 8082                       		or.l	d2,d0
00206504 0800 0007                  		btst	#7,d0
00206508 6600                       		bne.s	@cont3
0020650A 0800 0006                  		btst	#6,d0
0020650E 6600                       		bne.s	@cont3
00206510 4A00                       		tst.b	d0
00206512 6600                       		bne.s	@forceend
00206514                            @cont3:
00206514                            
00206514 046E 0001 0024             		sub.w	#1,timerpik1(a6)
0020651A 6A00                       		bpl.s	@waitpik2
0020651C 6000                       		bra.s	@end2
0020651E                            @forceend:
0020651E 046E 0008 002A             		sub.w	#8,lasty(a6)
00206524                            @end2:
00206524                            
00206524 1D7C 0001 001D             		move.b	#1,obj_index(a6)
0020652A 3D7C 00AA 0024             		move.w	#varTimerWait,timerpik1(a6)
00206530 422E 001A                  		clr.b	obj_anim_id(a6)
00206534 4286                       		clr.l	d6
00206536 4287                       		clr.l	d7
00206538                            @waitpik2:
00206538                            
00206538 2D46 0010                  		move.l	d6,obj_x_spd(a6)
0020653C 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00206540 6000 0000                  		bra	@check_touch
00206544                            		
00206544                            ; =================================================================
00206544                            ; ------------------------------------------------
00206544                            ; Subs
00206544                            ; ------------------------------------------------
00206544                            
00206544                            ; @Go_Stand:
00206544                            ; 		clr.l	obj_x_spd(a6)
00206544                            ; 		clr.b	obj_anim_id(a6)
00206544                            ; 		move.b	#1,obj_index(a6)
00206544                            ; 		rts
00206544                            ; 	
00206544                            ; ; --------------------------------------
00206544                            ; 
00206544                            ; @Go_Walk:
00206544                            ; 		move.l	#$4000,obj_x_spd(a6)
00206544                            ; 		btst	#bitobj_flipH,obj_status(a6)
00206544                            ; 		bne.s	@right
00206544                            ; 		move.l	#-$4000,obj_x_spd(a6)
00206544                            ; @right:
00206544                            ; 		move.b	#1,obj_anim_id(a6)
00206544                            ; 		move.b	#2,obj_index(a6)
00206544                            ; 		rts
00206544                            ; 	
00206544                            ; ; ------------------------------------------------
00206544                            ; ; Pyhsics
00206544                            ; ; ------------------------------------------------
00206544                            ; 
00206544                            ; @Pyhsics:
00206544                            ; 		lea	(RAM_LvlPlanes),a5
00206544                            ;  		move.l	obj_x_spd(a6),d6
00206544                            ;  		move.l	obj_y_spd(a6),d7
00206544                            ;  		
00206544                            ;  		add.l	d6,obj_x(a6)
00206544                            ;  		bsr	@WallCheck
00206544                            ; 		
00206544                            ; ; ----------------------------------
00206544                            ; 
00206544                            ;   		add.l	#$8000,d7
00206544                            ;   		cmp.l	#$40000,d7
00206544                            ;   		blt.s	@low_y
00206544                            ;   		move.l	#$40000,d7
00206544                            ; @low_y:
00206544                            ;   		add.l	d7,obj_y(a6)
00206544                            ;   		
00206544                            ; ; 		lea	(RAM_LvlPlanes),a5
00206544                            ; ; 		move.w	lvl_size_y(a5),d0
00206544                            ; ; 		lsl.w	#4,d0
00206544                            ; ; 		move.w	obj_y(a6),d1
00206544                            ; ; 		moveq	#0,d2
00206544                            ; ; 		move.b	obj_size+2(a6),d2
00206544                            ; ; 		lsl.w	#3,d2
00206544                            ; ; 		sub.w	d2,d1
00206544                            ; ; 		cmp.w	d0,d1
00206544                            ; ; 		bge	@delete
00206544                            ; ; 		
00206544                            ;   		tst.l	d7
00206544                            ;   		bmi.s	@no_floor
00206544                            ;   
00206544                            ; 		bsr	object_FindPrz_Floor
00206544                            ; 		move.l	d0,d2
00206544                            ; 		tst.b	d0
00206544                            ; 		bne.s	@from_prize
00206544                            ;  		bsr 	object_FindPrz_FloorSides
00206544                            ; 		tst.b	d0
00206544                            ; 		bne	@from_prize;@swap_dir_wl
00206544                            ; 		move.l	d1,d0
00206544                            ; 		tst.b	d0
00206544                            ; 		bne	@from_prize
00206544                            ; 		
00206544                            ; 		bsr	object_FindCol_Floor
00206544                            ; 		move.l	d0,d2
00206544                            ; 		tst.b	d0
00206544                            ; 		bne.s	@set_floor
00206544                            ;  		bsr 	object_FindCol_FloorSides
00206544                            ; 		tst.b	d0
00206544                            ; 		bne	@set_floor;@swap_dir_wl
00206544                            ; 		move.l	d1,d0
00206544                            ; 		tst.b	d0
00206544                            ; 		beq	@no_floor
00206544                            ; 		
00206544                            ; 		bra.s	@set_floor
00206544                            ; ; @swap_dir_wl:
00206544                            ; ; 		neg.l	d6
00206544                            ; ; 		bchg	#bitobj_flipH,obj_status(a6)
00206544                            ; ; 		bra.s	@no_floor
00206544                            ; 
00206544                            ; @from_prize:
00206544                            ; 		cmp.b	#$40,d0
00206544                            ; 		bge.s	@set_floor
00206544                            ; 		move.b	#1,d0
00206544                            ; 		
00206544                            ; @set_floor:
00206544                            ;   		bsr 	object_SetCol_Floor
00206544                            ;   		
00206544                            ; @no_floor:
00206544                            ; 
00206544                            ;  		move.l	d6,obj_x_spd(a6)
00206544                            ;  		move.l	d7,obj_y_spd(a6)
00206544                             		
00206544                            ; ----------------------------------
00206544                            ; Check if touched
00206544                            ; ----------------------------------
00206544                            
00206544                            @check_touch:
00206544 6100 E5EA                  		bsr	objTouch_Top
00206548 4A00                       		tst.b	d0
0020654A 6600                       		bne.s	@touch_flag
0020654C 6100 E680                  		bsr	objTouch_Bottom
00206550 4A00                       		tst.b	d0
00206552 6600                       		bne.s	@touch_flag
00206554                            		
00206554 6100 E718                  		bsr	objTouch_Sides
00206558 4A00                       		tst.b	d0
0020655A 6600                       		bne.s	@touch_flag;_side
0020655C 4840                       		swap	d0
0020655E 4A00                       		tst.b	d0
00206560 6600                       		bne.s	@touch_flag;_side
00206562 4E75                       		rts
00206564                            		
00206564                            ; -----------------------------------
00206564                            
00206564                            @touch_flag:
00206564 6100 E8EC                  		bsr	objPlyrHurtKill
00206568 6700                       		beq.s	@return
0020656A                            		
0020656A 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
00206570 323C 04D0                     		move.w	#varVramPikudo,d1
00206574 142E 0020                   		move.b	obj_frame(a6),d2
00206578 203C 0000 0000             		move.l	#map_pikudo,d0
0020657E 260C                       		move.l	a4,d3
00206580 6100 ECC4                  		bsr	objAction_SetStomp
00206584 6000 DCA6                  		bra	Object_IsGone
00206588                            @return:
00206588 4E75                       		rts
0020658A                            		
0020658A                            ; =================================================================
0020658A                            
0020658A                            @WallCheck:
0020658A 6100 DEAC                     		bsr	object_FindPrz_Wall
0020658E 4A00                          		tst.b	d0
00206590 6600                          		bne.s	@foundprzwl
00206592 6100 DEB0                    		bsr	object_FindCol_Wall
00206596 4A00                         		tst.b	d0
00206598 6700                         		beq.s	@chk_right
0020659A                            @foundprzwl:
0020659A 0800 0006                    		btst	#6,d0
0020659E 6600                         		bne.s	@chk_right
002065A0                            ;    		cmp.b	#2,d0
002065A0                            ;    		blt.s	@chk_right
002065A0 6100 E572                    		bsr	object_SetCol_Wall
002065A4                            ;    		bra.s	@endchk
002065A4                            @chk_right:
002065A4                            
002065A4                            		;TODO: Prize check
002065A4                            ;   		bsr	object_FindPrz_WallSides
002065A4                            ;   		tst.b	d0
002065A4                            ;   		bne.s	@przrotx
002065A4                            ;   		move.l	d1,d0
002065A4                            ;   		tst.b	d0
002065A4                            ;   		bne.s	@przrotx
002065A4                            
002065A4 6100 E0EE                    		bsr	object_FindCol_WallSides
002065A8 0800 0006                    		btst	#6,d0
002065AC 6600                         		bne.s	@endchk
002065AE 0801 0006                    		btst	#6,d1
002065B2 6600                         		bne.s	@endchk
002065B4 4A00                         		tst.b	d0
002065B6 6600                         		bne.s	@leftws
002065B8 4A01                         		tst.b	d1
002065BA 6600                         		bne.s	@rightws
002065BC 6000                          		bra.s	@endchk
002065BE                            @przrotx:
002065BE                            	
002065BE                            @leftws:
002065BE 0C01 0002                  		cmp.b	#2,d1
002065C2 6C00                       		bge.s	@endchk
002065C4 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
002065CA 6700                       		beq.s	@endchk
002065CC 6000                       		bra.s	@rotatex
002065CE                            @rightws:
002065CE 0C01 0002                  		cmp.b	#2,d1
002065D2 6C00                       		bge.s	@endchk
002065D4 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
002065DA 6600                       		bne.s	@endchk
002065DC                            @rotatex:
002065DC 4486                        		neg.l	d6
002065DE 086E 0000 001E              		bchg	#bitobj_flipH,obj_status(a6)
002065E4                            @endchk:
002065E4 4E75                       		rts
002065E6                            
002065E6                            ; ------------------------------------------------
002065E6                            ; Data
002065E6                            ; ------------------------------------------------
002065E6                            		
002065E6                            ; ----------------------------------------
002065E6                            
002065E6                            ani_pikudo:
002065E6 0000                       		dc.w @Idle-ani_pikudo
002065E8 0000                       		dc.w @Attack-ani_pikudo
002065EA                            		even
002065EA                            @Idle:
002065EA 03                          		dc.b 3
002065EB 0001 0001 0001 0001 0001+   		dc.b 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2
0020660A 0100 0100 0100 0100 0100+   		dc.b 1,0,1,0,1,0,1,0,1,0,1
00206615 FF                         		dc.b $FF
00206616                            		even
00206616                            @Attack:
00206616 02                          		dc.b 2
00206617 0304                        		dc.b 3,4
00206619 FF                         		dc.b $FF
0020661A                            		even
0020661A                            		even
0020661A                               		include	"engine/modes/level/data/objects/platform/code.asm"
0020661A                            ; =================================================================
0020661A                            ; Object
0020661A                            ; 
0020661A                            ; Platforms
0020661A                            ; =================================================================
0020661A                            
0020661A                            ; =================================================================
0020661A                            ; ------------------------------------------------
0020661A                            ; Variables
0020661A                            ; ------------------------------------------------
0020661A                            
0020661A =00002530                  varVramPlatfrm	equ	$2000|$530
0020661A                            
0020661A                            ; =================================================================
0020661A                            ; ------------------------------------------------
0020661A                            ; RAM
0020661A                            ; ------------------------------------------------
0020661A                            
0020661A                            		rsset obj_ram
0020661A =00000024                  last_x		rs.w	1
0020661A =00000026                  last_y		rs.w	1
0020661A =00000028                  tanvalue	rs.w	1
0020661A                            
0020661A                            ; =================================================================
0020661A                            ; ------------------------------------------------
0020661A                            ; Code start
0020661A                            ; ------------------------------------------------
0020661A                            
0020661A                            Obj_Platform:
0020661A 7000                        		moveq	#0,d0
0020661C 102E 001D                   		move.b	obj_index(a6),d0
00206620 D040                        		add.w	d0,d0
00206622 323B 0000                   		move.w	@Index(pc,d0.w),d1
00206626 4EBB 1000                   		jsr	@Index(pc,d1.w)
0020662A                             		
0020662A                             		;TODO: si hago este check se 
0020662A                             		;desincronizan
0020662A                            ;  		bsr	Object_OffCheck
0020662A                            
0020662A                            ;    		move.l	#(varVramPlatfrm<<16),d0
0020662A                            ;  		move.l	#ani_chamoy,d1
0020662A                            ; 		bsr	Object_Animate
0020662A 203C 2530 0000              		move.l	#(varVramPlatfrm<<16),d0
00206630 102E 0020                   		move.b	obj_frame(a6),d0
00206634 223C 0000 0000             		move.l	#objMap_platform,d1
0020663A 6000 D8D0                   		bra	Object_Show
0020663E                             		
0020663E                            ; =================================================================
0020663E                            ; ------------------------------------------------
0020663E                            ; Code index
0020663E                            ; ------------------------------------------------
0020663E                            
0020663E                            @Index:
0020663E 0000                       		dc.w	@Init-@Index
00206640 0000                       		dc.w	@Main-@Index
00206642                            		even
00206642                            		
00206642                            ; =================================================================
00206642                            ; ------------------------------------------------
00206642                            ; Sub-id
00206642                            ; ------------------------------------------------
00206642                            
00206642                            @id_list:
00206642 0000 0000                  		dc.w @left_right_sin-@id_list,0
00206646 0303 0100                  		dc.l $03030100
0020664A 0000 0000                  		dc.w @left_right_cos-@id_list,0
0020664E 0303 0100                  		dc.l $03030100
00206652 0000 0000                  		dc.w @up_down_sin-@id_list,0
00206656 0303 0100                  		dc.l $03030100
0020665A 0000 0000                  		dc.w @up_down_cos-@id_list,0
0020665E 0303 0100                  		dc.l $03030100
00206662 0000 0000                  		dc.w @rotate_right-@id_list,0
00206666 0303 0100                  		dc.l $03030100
0020666A 0000 0000                  		dc.w @rotate_left-@id_list,0
0020666E 0303 0100                  		dc.l $03030100	
00206672 0000 0000                  		dc.w @stepfall-@id_list,0
00206676 0303 0100                  		dc.l $03030100
0020667A                            		
0020667A                            ; =================================================================
0020667A                            ; ------------------------------------------------
0020667A                            ; Index $00: Init
0020667A                            ; ------------------------------------------------
0020667A                            
0020667A                            @Init:
0020667A 062E 0001 001D             		add.b	#1,obj_index(a6)
00206680 2D7C 0303 0001 0004        		move.l	#$03030001,obj_size(a6)		;failsafe
00206688 2D7C 0000 8000 0014        		move.l	#$8000,obj_y_spd(a6)
00206690 3D6E 0008 0024             		move.w	obj_x(a6),last_x(a6)
00206696 3D6E 000C 0026             		move.w	obj_y(a6),last_y(a6)
0020669C 422E 0020                  		clr.b	obj_frame(a6)
002066A0                            		
002066A0                            ; =================================================================
002066A0                            ; ------------------------------------------------                  
002066A0                            ; Index $01: Main
002066A0                            ; ------------------------------------------------
002066A0                            
002066A0                            @Main:
002066A0 7A00                        		moveq	#0,d5
002066A2                             		
002066A2 7000                       		moveq	#0,d0
002066A4 102E 001F                  		move.b	obj_subid(a6),d0
002066A8 E748                       		lsl.w	#3,d0
002066AA 2D7B 009A 0004              		move.l	@id_list+4(pc,d0.w),obj_size(a6)
002066B0 323B 0090                  		move.w	@id_list(pc,d0.w),d1
002066B4 4EBB 108C                  		jsr	@id_list(pc,d1.w)
002066B8                             		
002066B8 6100 E476                  		bsr	objTouch_Top
002066BC 200C                       		move.l	a4,d0
002066BE 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
002066C4 6600                       		bne.s	@return
002066C6 4A00                       		tst.b	d0
002066C8 6700                       		beq.s	@return
002066CA 0C2C 0002 001D             		cmp.b	#varPlyrMdDead,obj_index(a4)
002066D0 6700                       		beq.s	@return
002066D2 6100 E67A                  		bsr	objPlyrSetFloor
002066D6 4AAC 0014                  		tst.l	obj_y_spd(a4)
002066DA 6B00                       		bmi.s	@return
002066DC 9B6C 0008                     		sub.w	d5,obj_x(a4)
002066E0                            @return:
002066E0 4E75                       		rts
002066E2                             	
002066E2                            ; ---------------------------
002066E2                            ; Left/Right
002066E2                            ; ---------------------------
002066E2                            	
002066E2                            @left_right_cos:
002066E2 302E 0028                    		move.w	tanvalue(a6),d0
002066E6                            
002066E6 6000 0000                    		bra	@do_lr
002066EA                              
002066EA                            @left_right_sin:
002066EA 302E 0028                    		move.w	tanvalue(a6),d0
002066EE 4440                         		neg.w	d0
002066F0                              		
002066F0                            @do_lr:
002066F0 6100 C248                    		bsr	CalcSine
002066F4 E640                         		asr.w	#3,d0
002066F6 342E 0024                    		move.w	last_x(a6),d2
002066FA D440                         		add.w	d0,d2
002066FC 3A2E 0008                    		move.w	obj_x(a6),d5
00206700 9A42                         		sub.w	d2,d5
00206702 3D42 0008                    		move.w	d2,obj_x(a6)
00206706                              		
00206706 066E 0001 0028              		add.w	#1,tanvalue(a6)
0020670C 4E75                         		rts
0020670E                             
0020670E                            ; ---------------------------
0020670E                            ; Up/Down
0020670E                            ; ---------------------------
0020670E                            
0020670E                            @up_down_cos:
0020670E 302E 0028                  		move.w	tanvalue(a6),d0
00206712 4440                       		neg.w	d0
00206714 6000                       		bra.s	@do_ud
00206716                            @up_down_sin:
00206716 302E 0028                    		move.w	tanvalue(a6),d0
0020671A                            @do_ud:
0020671A 6100 C21E                    		bsr	CalcSine
0020671E E640                         		asr.w	#3,d0
00206720 342E 0026                    		move.w	last_y(a6),d2
00206724 D440                         		add.w	d0,d2
00206726                            ;   		move.w	obj_y(a6),d4
00206726                            ;   		sub.w	d2,d4
00206726 3D42 000C                     		move.w	d2,obj_y(a6)
0020672A                            
0020672A 066E 0001 0028              		add.w	#1,tanvalue(a6)
00206730 4E75                        		rts
00206732                             		
00206732                            ; ---------------------------
00206732                            ; rotate_right
00206732                            ; ---------------------------
00206732                            
00206732                            @rotate_right:
00206732                            ;   		move.w	#$20,d4
00206732                              		
00206732 302E 0028                    		move.w	tanvalue(a6),d0
00206736 6100 C202                    		bsr	CalcSine
0020673A C1FC 0040                    		muls	#$40,d0
0020673E E080                         		asr.l	#8,d0
00206740 342E 0024                    		move.w	last_x(a6),d2
00206744 D440                         		add.w	d0,d2
00206746 3A2E 0008                    		move.w	obj_x(a6),d5
0020674A 9A42                         		sub.w	d2,d5
0020674C 3D42 0008                    		move.w	d2,obj_x(a6)
00206750                               		
00206750 302E 0028                    		move.w	tanvalue(a6),d0
00206754 E348                         		lsl.w	#1,d0
00206756 6100 C1E2                    		bsr	CalcSine
0020675A C3FC 0030                    		muls	#$30,d1
0020675E E081                         		asr.l	#8,d1
00206760 342E 0026                    		move.w	last_y(a6),d2
00206764 D441                         		add.w	d1,d2
00206766 3D42 000C                     		move.w	d2,obj_y(a6)
0020676A                            
0020676A 066E 0001 0028              		add.w	#1,tanvalue(a6)
00206770 4E75                        		rts
00206772                             		
00206772                            ; ---------------------------
00206772                            ; rotate_left
00206772                            ; ---------------------------
00206772                            
00206772                            @rotate_left:
00206772 066E 0001 0028              		add.w	#1,tanvalue(a6)
00206778 4E75                        		rts
0020677A                            
0020677A                            ; ---------------------------
0020677A                            ; StepFall
0020677A                            ; ---------------------------
0020677A                            
0020677A                            @stepfall:
0020677A 6100 E3B4                  		bsr	objTouch_Top
0020677E 4A00                       		tst.b	d0
00206780 6700 FF5E                  		beq	@return
00206784 200C                       		move.l	a4,d0
00206786 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
0020678C 6600 FF52                  		bne	@return
00206790 4AAC 0014                  		tst.l	obj_y_spd(a4)
00206794 6B00 FF4A                  		bmi	@return
00206798                            		
00206798 066E 0003 000C             		add.w	#3,obj_y(a6)
0020679E 4E75                       		rts
0020679E 4E75                       		rts
002067A0                               		include	"engine/modes/level/data/objects/prize/code.asm"
002067A0                            ; =================================================================
002067A0                            ; Object
002067A0                            ; 
002067A0                            ; The prize
002067A0                            ; =================================================================
002067A0                            
002067A0                            ; =================================================================
002067A0                            ; ------------------------------------------------
002067A0                            ; Variables
002067A0                            ; ------------------------------------------------
002067A0                            
002067A0 =0000C5A8                  vramCoinRed	equ	$C000|$5A8
002067A0 =0000C5AC                  vramCoinBlue	equ	$C000|$5AC
002067A0 =0000C5B0                  vram1up		equ	$C000|$5B0
002067A0 =0000C594                  vramJmpBlock	equ	$C000|$594
002067A0                            
002067A0                            ; =================================================================
002067A0                            ; ------------------------------------------------
002067A0                            ; RAM
002067A0                            ; ------------------------------------------------
002067A0                            
002067A0                            		rsset obj_ram
002067A0 =00000024                  this_pos	rs.l 1			; Block type and X/Y position
002067A0 =00000028                  this_vram	rs.w 1			; Vram (top left)
002067A0 =0000002A                  this_counter	rs.w 1			; Counter (coins, etc.)
002067A0                            
002067A0 =0000002C                  y_coin_spd	rs.l 1
002067A0 =00000030                  y_pos_coin	rs.l 1
002067A0 =00000034                  x_pos_main	rs.w 1
002067A0 =00000036                  y_pos_main	rs.w 1
002067A0 =00000038                  x_pos_l		rs.w 1
002067A0 =0000003A                  x_pos_r		rs.w 1
002067A0 =0000003C                  tmr_1		rs.w 1
002067A0 =0000003E                  block_flags	rs.b 1
002067A0                            
002067A0                            ; =================================================================
002067A0                            ; ------------------------------------------------
002067A0                            ; Code start
002067A0                            ; ------------------------------------------------
002067A0                            
002067A0                            obj_prize:
002067A0 7000                        		moveq	#0,d0
002067A2 102E 001D                   		move.b	obj_index(a6),d0
002067A6 D040                        		add.w	d0,d0
002067A8 323B 0000                   		move.w	@Index(pc,d0.w),d1
002067AC 4EFB 1000                   		jmp	@Index(pc,d1.w)
002067B0                             		
002067B0                            ; ------------------------------------------------
002067B0                            
002067B0                            @Index:
002067B0 0000                       		dc.w	@Init-@Index
002067B2 0000                       		dc.w	@Main-@Index
002067B4                            		even
002067B4                            		
002067B4                            ; =================================================================
002067B4                            ; ------------------------------------------------
002067B4                            ; Index $00: Init
002067B4                            ; ------------------------------------------------
002067B4                            
002067B4                            @Init:
002067B4 062E 0001 001D             		add.b	#1,obj_index(a6)
002067BA 202E 0024                  		move.l	this_pos(a6),d0
002067BE 4840                        		swap	d0
002067C0 0240 FFF0                   		and.w	#$FFF0,d0
002067C4 3D40 0008                   		move.w	d0,obj_x(a6)
002067C8 4840                        		swap	d0
002067CA E848                        		lsr.w	#4,d0
002067CC 0240 FFF0                   		and.w	#$FFF0,d0
002067D0 3D40 000C                   		move.w	d0,obj_y(a6)
002067D4                            
002067D4 202E 0024                   		move.l	this_pos(a6),d0
002067D8 6100 D0BC                  		bsr	Level_HidePrize
002067DC                            
002067DC 2D7C FFFC 0000 0014         		move.l	#-$40000,obj_y_spd(a6)
002067E4 4A2E 001F                   		tst.b	obj_subid(a6)
002067E8 6700                        		beq.s	@not_brick
002067EA 2D7C FFFE 0000 0014         		move.l	#-$20000,obj_y_spd(a6)
002067F2                            @not_brick:
002067F2 3D6E 0008 0034              		move.w	obj_x(a6),x_pos_main(a6)
002067F8 302E 000C                   		move.w	obj_y(a6),d0
002067FC 3D40 0036                   		move.w	d0,y_pos_main(a6)
00206800 0440 0010                   		sub.w	#$10,d0
00206804 4840                        		swap	d0
00206806 2D40 0030                   		move.l	d0,y_pos_coin(a6)
0020680A                             		
0020680A 3D6E 0008 0038              		move.w	obj_x(a6),x_pos_l(a6)
00206810 3D6E 0008 003A              		move.w	obj_x(a6),x_pos_r(a6)
00206816 066E 0008 003A              		add.w	#8,x_pos_r(a6)
0020681C 2D7C FFFC 0000 002C         		move.l	#-$40000,y_coin_spd(a6)
00206824                             		
00206824 2D7C 0101 0101 0004         		move.l	#$01010101,obj_size(a6)
0020682C 08EE 0006 001E              		bset	#bitobj_hit,obj_status(a6)
00206832                             		
00206832                            ; =================================================================
00206832                            ; ------------------------------------------------                  
00206832                            ; Index $01: Main
00206832                            ; ------------------------------------------------
00206832                            
00206832                            @Main:
00206832 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00206838 7000                        		moveq	#0,d0
0020683A 102E 001F                   		move.b	obj_subid(a6),d0
0020683E 0200 007F                   		and.b	#$7F,d0
00206842 D040                        		add.w	d0,d0
00206844 323B 0000                   		move.w	@subtypes(pc,d0.w),d1
00206848 4EFB 1000                   		jmp	@subtypes(pc,d1.w)
0020684C                            		
0020684C                            ; ------------------------------------------------
0020684C                            ; Subs
0020684C                            ; ------------------------------------------------
0020684C                            
0020684C                            @subtypes:
0020684C 0000                       		dc.w @destroy-@subtypes		; $00 - Breakable block
0020684E 0000                       		dc.w @bump_solid-@subtypes	; $01 - Bump, normal
00206850 0000                       		dc.w @bump_coin-@subtypes	; $02 - Bump, add red coin (1)
00206852 0000                       		dc.w @bump_coin_blue-@subtypes	; $03 - Bump, add blue coin (2)
00206854 0000                       		dc.w @bump_1up-@subtypes	; $04 - Bump, add extra life
00206856 0000                       		dc.w @trampoline-@subtypes	; $05 - Trampoline animation
00206858                            		
00206858                            ; ------------------------------------------------
00206858                            ; Return
00206858                            ; ------------------------------------------------
00206858                            
00206858                            @return:
00206858 4E75                       		rts
0020685A                            		
0020685A                            ; ------------------------------------------------
0020685A                            ; Destroy block
0020685A                            ; ------------------------------------------------
0020685A                            
0020685A                            @destroy:
0020685A 2E2E 0014                  		move.l	obj_y_spd(a6),d7
0020685E                            		
0020685E 223C 0000 0000             		move.l	#$0000,d1
00206864 4841                       		swap	d1
00206866 322E 0028                  		move.w	this_vram(a6),d1
0020686A 0041 8000                  		or.w	#$8000,d1
0020686E                            		
0020686E 362E 003A                  		move.w	x_pos_r(a6),d3
00206872 066E 0001 003A             		add.w	#1,x_pos_r(a6)
00206878 4843                       		swap	d3
0020687A 342E 0038                  		move.w	x_pos_l(a6),d2
0020687E 046E 0001 0038             		sub.w	#1,x_pos_l(a6)
00206884 4842                       		swap	d2
00206886                            	
00206886 2002                       		move.l	d2,d0
00206888 302E 000C                  		move.w	obj_y(a6),d0
0020688C 0480 0006 0000             		sub.l	#$60000,d0
00206892 0440 0010                  		sub.w	#$10,d0
00206896 6100 D6F6                  		bsr	Object_ExtSprite
0020689A 2003                       		move.l	d3,d0
0020689C 0641 0002                   		add.w	#2,d1
002068A0 302E 000C                  		move.w	obj_y(a6),d0
002068A4 0680 0004 0000             		add.l	#$40000,d0	
002068AA 0440 0014                  		sub.w	#$14,d0
002068AE 6100 D6DE                  		bsr	Object_ExtSprite
002068B2 2002                       		move.l	d2,d0
002068B4 0441 0001                   		sub.w	#1,d1
002068B8 302E 000C                  		move.w	obj_y(a6),d0
002068BC 0480 0001 0000             		sub.l	#$10000,d0
002068C2 6100 D6CA                  		bsr	Object_ExtSprite
002068C6 2003                       		move.l	d3,d0
002068C8 0641 0002                   		add.w	#2,d1
002068CC 302E 000C                  		move.w	obj_y(a6),d0
002068D0 0680 0003 0000             		add.l	#$30000,d0
002068D6 0440 0004                  		sub.w	#4,d0
002068DA 6100 D6B2                  		bsr	Object_ExtSprite
002068DE                            		
002068DE 0687 0000 4000              		add.l	#$4000,d7
002068E4 4A87                        		tst.l	d7
002068E6 6B00                        		bmi.s	@minus
002068E8 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
002068EE                            @minus:
002068EE DFAE 000C                  		add.l	d7,obj_y(a6)
002068F2                            		
002068F2 322E 000C                  		move.w	obj_y(a6),d1
002068F6 303C 0140                  		move.w	#320,d0
002068FA D06D 0020                  		add.w	lvl_y(a5),d0
002068FE B240                       		cmp.w	d0,d1
00206900 6D00                       		blt.s	@lower_y
00206902 4EF9 0020 401C             		jmp	Object_Delete
00206908                            @lower_y:
00206908 2D47 0014                   		move.l	d7,obj_y_spd(a6)
0020690C 4E75                           		rts
0020690E                            		
0020690E                            ; ------------------------------------------------
0020690E                            ; Bump, nothing (or reveral hidden block)
0020690E                            ; ------------------------------------------------
0020690E                            
0020690E                            @bump_solid:
0020690E 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00206912 2C2E 002C                  		move.l	y_coin_spd(a6),d6
00206916                            		
00206916                            ; 		move.l	#$0005,d1
00206916                            ; 		swap	d1
00206916                            ; 		move.w	#vramCoinRed,d1
00206916                            ;  		move.l	y_pos_coin(a6),d0
00206916                            ;  		move.w	obj_x(a6),d0
00206916                            ;  		swap	d0
00206916                            ; 		bsr	Object_ExtSprite
00206916                            		
00206916 082E 0000 003E              		btst	#0,block_flags(a6)
0020691C 6600                        		bne.s	@stopblock
0020691E 223C 0000 0005             		move.l	#$0005,d1
00206924 4841                       		swap	d1
00206926 322E 0028                  		move.w	this_vram(a6),d1
0020692A 0041 8000                  		or.w	#$8000,d1
0020692E                            		
0020692E 302E 0008                  		move.w	obj_x(a6),d0
00206932 4840                       		swap	d0
00206934 302E 000C                  		move.w	obj_y(a6),d0
00206938 6100 D654                  		bsr	Object_ExtSprite
0020693C 0687 0000 4000              		add.l	#$4000,d7
00206942 4A87                        		tst.l	d7
00206944 6B00                        		bmi.s	@minus2
00206946 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
0020694C                            @minus2:
0020694C DFAE 000C                  		add.l	d7,obj_y(a6)
00206950                            @stopblock:
00206950 0686 0000 4000              		add.l	#$4000,d6
00206956 DDAE 0030                  		add.l	d6,y_pos_coin(a6)
0020695A                            		
0020695A 302E 000C                  		move.w	obj_y(a6),d0
0020695E 322E 0036                  		move.w	y_pos_main(a6),d1
00206962 B041                       		cmp.w	d1,d0
00206964 6F00                       		ble.s	@return3
00206966                            		
00206966 202E 0024                   		move.l	this_pos(a6),d0
0020696A 6100 E8B0                  		bsr	Prize_Locate
0020696E                            ; 		move.b	#$F,d0
0020696E                            ; 		move.b	d0,(a3)
0020696E 6100 CF42                   		bsr	Level_ShowPrize
00206972 08EE 0000 003E              		bset	#0,block_flags(a6)
00206978 4EF9 0020 401C              		jmp	Object_Delete
0020697E                             		
0020697E                            @return3:
0020697E                            
0020697E                            ; 		move.w	y_pos_coin(a6),d0
0020697E                            ; 		move.w	y_pos_main(a6),d1
0020697E                            ; 		sub.w	#$10,d1
0020697E                            ; 		cmp.w	d1,d0
0020697E                            ; 		ble.s	@return2
0020697E                            ;   		jmp	Object_Delete
0020697E                            ;   		
0020697E                            ; @return2:
0020697E 2D46 002C                  		move.l	d6,y_coin_spd(a6)
00206982 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00206986 4E75                        		rts
00206988                             		
00206988                            ; ------------------------------------------------
00206988                            ; Bump block
00206988                            ; ------------------------------------------------
00206988                            
00206988                            @bump_1up:
00206988 223C 0000 0005             		move.l	#$0005,d1
0020698E 4841                       		swap	d1
00206990 323C C5B0                  		move.w	#vram1up,d1
00206994 202E 0030                   		move.l	y_pos_coin(a6),d0
00206998 302E 0008                   		move.w	obj_x(a6),d0
0020699C 4840                        		swap	d0
0020699E 6100 D5EE                  		bsr	Object_ExtSprite
002069A2 6000                       		bra.s	@from_coin_blue
002069A4                            		
002069A4                            @bump_coin_blue:
002069A4 223C 0000 0005             		move.l	#$0005,d1
002069AA 4841                       		swap	d1
002069AC 323C C5AC                  		move.w	#vramCoinBlue,d1
002069B0 202E 0030                   		move.l	y_pos_coin(a6),d0
002069B4 302E 0008                   		move.w	obj_x(a6),d0
002069B8 4840                        		swap	d0
002069BA 6100 D5D2                  		bsr	Object_ExtSprite
002069BE 6000                       		bra.s	@from_coin_blue
002069C0                            		
002069C0                            @bump_coin:
002069C0 223C 0000 0005             		move.l	#$0005,d1
002069C6 4841                       		swap	d1
002069C8 323C C5A8                  		move.w	#vramCoinRed,d1
002069CC 202E 0030                   		move.l	y_pos_coin(a6),d0
002069D0 302E 0008                   		move.w	obj_x(a6),d0
002069D4 4840                        		swap	d0
002069D6 6100 D5B6                  		bsr	Object_ExtSprite
002069DA                            		
002069DA                            @from_coin_blue:
002069DA 2E2E 0014                  		move.l	obj_y_spd(a6),d7
002069DE 2C2E 002C                  		move.l	y_coin_spd(a6),d6
002069E2                            		
002069E2 082E 0000 003E              		btst	#0,block_flags(a6)
002069E8 6600                        		bne.s	@stopblock2
002069EA 223C 0000 0005             		move.l	#$0005,d1
002069F0 4841                       		swap	d1
002069F2 322E 0028                  		move.w	this_vram(a6),d1
002069F6 0041 8000                  		or.w	#$8000,d1
002069FA                            		
002069FA 302E 0008                  		move.w	obj_x(a6),d0
002069FE 4840                       		swap	d0
00206A00 302E 000C                  		move.w	obj_y(a6),d0
00206A04 6100 D588                  		bsr	Object_ExtSprite
00206A08 0687 0000 4000              		add.l	#$4000,d7
00206A0E 4A87                        		tst.l	d7
00206A10 6B00                        		bmi.s	@minus3
00206A12 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00206A18                            @minus3:
00206A18 DFAE 000C                  		add.l	d7,obj_y(a6)
00206A1C                            @stopblock2:
00206A1C 0686 0000 4000              		add.l	#$4000,d6
00206A22 DDAE 0030                  		add.l	d6,y_pos_coin(a6)
00206A26                            		
00206A26 302E 000C                  		move.w	obj_y(a6),d0
00206A2A 322E 0036                  		move.w	y_pos_main(a6),d1
00206A2E B041                       		cmp.w	d1,d0
00206A30 6F00                       		ble.s	@return4
00206A32                            		
00206A32 202E 0024                   		move.l	this_pos(a6),d0
00206A36 6100 E7E4                  		bsr	Prize_Locate
00206A3A 103C 000F                  		move.b	#$F,d0
00206A3E 1680                       		move.b	d0,(a3)
00206A40 6100 CE70                   		bsr	Level_ShowPrize
00206A44 08EE 0000 003E              		bset	#0,block_flags(a6)
00206A4A 4EF9 0020 401C              		jmp	Object_Delete
00206A50                             		
00206A50                            @return4:
00206A50                            
00206A50 302E 0030                  		move.w	y_pos_coin(a6),d0
00206A54 322E 0036                  		move.w	y_pos_main(a6),d1
00206A58 0441 0010                  		sub.w	#$10,d1
00206A5C B041                       		cmp.w	d1,d0
00206A5E 6F00                       		ble.s	@return5
00206A60 4EF9 0020 401C               		jmp	Object_Delete
00206A66                              		
00206A66                            @return5:
00206A66 2D46 002C                  		move.l	d6,y_coin_spd(a6)
00206A6A 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00206A6E 4E75                       		rts
00206A70                            		
00206A70                            ; ------------------------------------------------
00206A70                            ; Trampoline
00206A70                            ; ------------------------------------------------
00206A70                            
00206A70                            @trampoline:
00206A70 062E 0001 003C             		add.b	#1,tmr_1(a6)
00206A76 082E 0003 003C             		btst	#3,tmr_1(a6)
00206A7C 6600                       		bne.s	@finish
00206A7E                            ; 		cmp.b	#16,tmr_1(a6)
00206A7E                            ; 		bge.s	@finish
00206A7E                            		
00206A7E 223C 0000 0005             		move.l	#$0005,d1
00206A84 4841                       		swap	d1
00206A86 323C C598                  		move.w	#vramJmpBlock+4,d1
00206A8A 302E 0008                   		move.w	obj_x(a6),d0
00206A8E 4840                        		swap	d0
00206A90 302E 000C                   		move.w	obj_y(a6),d0
00206A94 6000 D4F8                  		bra	Object_ExtSprite
00206A98                            		
00206A98                            @finish:
00206A98 202E 0024                   		move.l	this_pos(a6),d0
00206A9C 6100 CE14                  		bsr	Level_ShowPrize
00206AA0 4EF9 0020 401C               		jmp	Object_Delete
00206AA6                              		
00206AA6                            ; =================================================================
00206AA6                            ; ------------------------------------------------
00206AA6                            ; Subs
00206AA6                            ; ------------------------------------------------
00206AA6                            
00206AA6                            		
00206AA6                            ; =================================================================
00206AA6                            		
00206AA6                            		
00206AA6                                		include	"engine/modes/level/data/objects/ball/code.asm" 
00206AA6                            ; =================================================================
00206AA6                            ; Object
00206AA6                            ; 
00206AA6                            ; A Ball
00206AA6                            ; =================================================================
00206AA6                            
00206AA6                            ; =================================================================
00206AA6                            ; ------------------------------------------------
00206AA6                            ; Variables
00206AA6                            ; ------------------------------------------------
00206AA6                            
00206AA6 =000044B8                  varVramBall	equ	$4000|$4B8
00206AA6                            
00206AA6                            ; =================================================================
00206AA6                            ; ------------------------------------------------
00206AA6                            ; Code start
00206AA6                            ; ------------------------------------------------
00206AA6                            
00206AA6                            Obj_Ball:
00206AA6 7000                        		moveq	#0,d0
00206AA8 102E 001D                   		move.b	obj_index(a6),d0
00206AAC D040                        		add.w	d0,d0
00206AAE 323B 0000                   		move.w	@Index(pc,d0.w),d1
00206AB2 4EBB 1000                   		jsr	@Index(pc,d1.w)
00206AB6 6100 D794                   		bsr	Object_OffCheck
00206ABA                             		
00206ABA 203C 44B8 0000             		move.l	#(varVramBall<<16),d0
00206AC0 102E 0020                  		move.b	obj_frame(a6),d0
00206AC4 223C 0000 0000             		move.l	#map_Ball,d1
00206ACA 6000 D440                   		bra	Object_Show
00206ACE                             		
00206ACE                            ; ------------------------------------------------
00206ACE                            
00206ACE                            @Index:
00206ACE 0000                       		dc.w	@Init-@Index
00206AD0 0000                       		dc.w	@Main-@Index
00206AD2                            		even
00206AD2                            		
00206AD2                            ; =================================================================
00206AD2                            ; ------------------------------------------------
00206AD2                            ; Index $00: Init
00206AD2                            ; ------------------------------------------------
00206AD2                            
00206AD2                            @Init:
00206AD2 062E 0001 001D             		add.b	#1,obj_index(a6)
00206AD8 2D7C 0101 0101 0004        		move.l	#$01010101,obj_size(a6)
00206AE0 2D7C 0000 6000 0014        		move.l	#$6000,obj_y_spd(a6)
00206AE8 422E 0020                  		clr.b	obj_frame(a6)
00206AEC 422E 001C                  		clr.b	obj_anim_spd(a6)
00206AF0 2D7C FFFE 8000 0010        		move.l	#-$18000,obj_x_spd(a6)
00206AF8                            		
00206AF8                            ; =================================================================
00206AF8                            ; ------------------------------------------------                  
00206AF8                            ; Index $01: Main
00206AF8                            ; ------------------------------------------------
00206AF8                            
00206AF8                            @Main:
00206AF8                            ; 		bsr.s	@move_ball
00206AF8                            ; 		bra	@check_touch
00206AF8                            		
00206AF8                            ; =================================================================
00206AF8                            ; ------------------------------------------------
00206AF8                            ; Subs
00206AF8                            ; ------------------------------------------------
00206AF8                            
00206AF8                            @move_ball:
00206AF8 2C2E 0010                   		move.l	obj_x_spd(a6),d6
00206AFC 2E2E 0014                   		move.l	obj_y_spd(a6),d7
00206B00 DDAE 0008                   		add.l	d6,obj_x(a6)
00206B04 DFAE 000C                   		add.l	d7,obj_y(a6)
00206B08                             		
00206B08 4AAE 0008                   		tst.l	obj_x(a6)
00206B0C 6A00                        		bpl.s	@fine_x
00206B0E 42AE 0008                   		clr.l	obj_x(a6)
00206B12 2C3C 0002 0000             		move.l	#$20000,d6
00206B18                            @fine_x:
00206B18 7000                       		moveq	#0,d0
00206B1A 3039 FFFF BC30             		move.w	(RAM_LvlPlanes+lvl_size_x),d0
00206B20 E948                       		lsl.w	#4,d0
00206B22 4840                       		swap	d0
00206B24 222E 0008                  		move.l	obj_x(a6),d1
00206B28 B280                       		cmp.l	d0,d1
00206B2A 6D00                       		blt.s	@fine_x_r
00206B2C 2C3C FFFE 0000             		move.l	#-$20000,d6
00206B32                            @fine_x_r:
00206B32                            	
00206B32                            ; ----------------------------------
00206B32                            
00206B32 0687 0000 4000              		add.l	#$4000,d7
00206B38 0C87 0008 0000              		cmp.l	#$80000,d7
00206B3E 6D00                        		blt.s	@low_y
00206B40 2E3C 0008 0000              		move.l	#$80000,d7
00206B46                            @low_y:
00206B46                             		
00206B46 4A87                        		tst.l	d7
00206B48 6A00                        		bpl.s	@Freec
00206B4A 6100 D9B8                  		bsr	object_FindPrz_Ceiling
00206B4E 4A00                       		tst.b	d0
00206B50 6600                       		bne.s	@FndCeilPrz
00206B52 6100 DDA4                  		bsr	object_FindPrz_CeilingSides
00206B56 4A00                       		tst.b	d0
00206B58 6600                       		bne.s	@FndCeilPrz
00206B5A 2001                       		move.l	d1,d0
00206B5C 4A00                       		tst.b	d0
00206B5E 6600                       		bne.s	@FndCeilPrz
00206B60                            		
00206B60 6100 D9AE                  		bsr	object_FindCol_Ceiling
00206B64 0800 0006                  		btst	#6,d0
00206B68 6600                       		bne.s	@Freec
00206B6A 4A00                       		tst.b	d0
00206B6C 6600                       		bne.s	@FoundCeiling
00206B6E 6100 DD94                  		bsr	object_FindCol_CeilingSides
00206B72 4A00                       		tst.b	d0
00206B74 6600                       		bne.s	@FoundCeiling
00206B76 2001                       		move.l	d1,d0
00206B78 4A00                       		tst.b	d0
00206B7A 6600                       		bne.s	@FoundCeiling
00206B7C 6000                       		bra.s	@Freec
00206B7E                            @FndCeilPrz:
00206B7E 0800 0007                  		btst	#7,d0
00206B82 6600                       		bne.s	@Freec
00206B84                            @FoundCeiling:
00206B84 0800 0006                  		btst	#6,d0
00206B88 6600                       		bne.s	@Freec
00206B8A                            		
00206B8A 6100 DF5A                  		bsr	object_SetCol_Ceiling
00206B8E                            		
00206B8E                            ; ----------------------------------
00206B8E                            
00206B8E                            @Freec:	
00206B8E 4A87                        		tst.l	d7
00206B90 6B00                        		bmi.s	@Free
00206B92                             	
00206B92 6100 D836                  		bsr	object_FindPrz_Floor
00206B96 0800 0007                  		btst	#7,d0
00206B9A 6600                       		bne.s	@Free
00206B9C 0800 0006                  		btst	#6,d0
00206BA0 6600                       		bne.s	@Free
00206BA2 4A00                       		tst.b	d0
00206BA4 6600                       		bne.s	@przflr
00206BA6                            		
00206BA6 6100 D82E                  		bsr	object_FindCol_Floor
00206BAA 0800 0006                  		btst	#6,d0
00206BAE 6600                       		bne.s	@Free
00206BB0 4A00                       		tst.b	d0
00206BB2 6700                       		beq.s	@Free
00206BB4                            
00206BB4                            @przflr:
00206BB4 6100 DEB6                  		bsr	object_SetCol_Floor
00206BB8 2E3C FFFA 0000              		move.l	#-$60000,d7
00206BBE                            
00206BBE 203C 0000 0000               		move.l	#SndSfx_PING,d0
00206BC4 7202                         		moveq 	#2,d1
00206BC6 7401                         		moveq	#1,d2
00206BC8 6100 9B46                    		bsr	Audio_Track_play
00206BCC                            @Free:
00206BCC                            
00206BCC                            ; ----------------------------------------
00206BCC                            
00206BCC                            ;  		bsr	object_FindPrz_WallSides
00206BCC                            ; ;  		tst.l	d6
00206BCC                            ; ;  		bmi.s	@to_left
00206BCC                            ; 		btst	#7,d0
00206BCC                            ; 		bne.s	@FreeWall2
00206BCC                            ; 		btst	#6,d0
00206BCC                            ; 		bne.s	@FreeWall2
00206BCC                            ; 		tst.b	d0
00206BCC                            ; 		bne.s	@FoundW
00206BCC                            ; 		bra.s	@FreeWall2
00206BCC                            ; @to_left:
00206BCC                            ; ; 		tst.l	d6
00206BCC                            ; ; 		bpl.s	@FreeWall2
00206BCC                            ; 		btst	#7,d1
00206BCC                            ; 		bne.s	@FreeWall2
00206BCC                            ; 		btst	#6,d1
00206BCC                            ; 		bne.s	@FreeWall2
00206BCC                            ; 		tst.b	d1
00206BCC                            ; 		bne.s	@FoundW
00206BCC                            ; 		
00206BCC                            ; @FreeWall2:
00206BCC 6100 DAC6                  		bsr	object_FindCol_WallSides
00206BD0 4A86                       		tst.l	d6
00206BD2 6B00                       		bmi.s	@dontlft
00206BD4 4A00                        		tst.b	d0
00206BD6 6600                        		bne.s	@FoundW
00206BD8                            @dontlft:
00206BD8 4A86                       		tst.l	d6
00206BDA 6A00                       		bpl.s	@FreeWall
00206BDC 2001                       		move.l	d1,d0
00206BDE 4A00                         		tst.b	d0
00206BE0 6600                        		bne.s	@FoundW
00206BE2 6000                       		bra.s	@FreeWall
00206BE4                            
00206BE4                            @FoundW:
00206BE4 0C00 0002                  		cmp.b	#2,d0
00206BE8 6C00                       		bge.s	@FreeWall
00206BEA                            ; 		bsr	object_SetCol_Wall
00206BEA 4486                       		neg.l	d6
00206BEC 086E 0000 001E             		bchg	#bitobj_flipH,obj_status(a6)
00206BF2                            @FreeWall:
00206BF2                            
00206BF2                            ; ------------------------------------
00206BF2                            
00206BF2 042E 0001 001C              		sub.b	#1,obj_anim_spd(a6)
00206BF8 6A00                        		bpl.s	@plusanim
00206BFA 1D7C 0007 001C              		move.b	#7,obj_anim_spd(a6)
00206C00 062E 0001 0020               		add.b	#1,obj_frame(a6)
00206C06 022E 0003 0020              		and.b	#%11,obj_frame(a6)
00206C0C                            @plusanim:
00206C0C                            
00206C0C                            ; ------------------------------------
00206C0C                            
00206C0C 2D46 0010                   		move.l	d6,obj_x_spd(a6)
00206C10 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00206C14                            ; 		rts
00206C14                            		
00206C14                            ; =================================================================
00206C14                            ; ----------------------------------
00206C14                            ; Check if touched
00206C14                            ; ----------------------------------
00206C14                            
00206C14                            @check_touch:
00206C14 6100 DF1A                  		bsr	objTouch_Top
00206C18 4A00                       		tst.b	d0
00206C1A 6600                       		bne.s	@touch_flag
00206C1C 6100 DFB0                  		bsr	objTouch_Bottom
00206C20 4A00                       		tst.b	d0
00206C22 6600                       		bne.s	@touch_flag
00206C24                            		
00206C24 6100 E048                  		bsr	objTouch_Sides
00206C28 4A00                       		tst.b	d0
00206C2A 6600                       		bne.s	@touch_flag
00206C2C 4840                       		swap	d0
00206C2E 4A00                       		tst.b	d0
00206C30 6600                       		bne.s	@touch_flag
00206C32 4E75                       		rts
00206C34                            		
00206C34                            ; -----------------------------------
00206C34                            
00206C34                            @touch_flag:
00206C34 6100 E21C                  		bsr	objPlyrHurtKill
00206C38 6700                       		beq.s	@return
00206C3A 323C 44B8                     		move.w	#varVramBall,d1
00206C3E 142E 0020                   		move.b	obj_frame(a6),d2
00206C42 203C 0000 0000             		move.l	#map_Ball,d0
00206C48 260C                       		move.l	a4,d3
00206C4A 6100 E5FA                  		bsr	objAction_SetStomp
00206C4E 6000 D5DC                  		bra	Object_IsGone
00206C52                            @return:
00206C52 4E75                       		rts
00206C52 4E75                       		rts
00206C54                               		include	"engine/modes/level/data/objects/endflag/code.asm"
00206C54                            ; =================================================================
00206C54                            ; Object
00206C54                            ; 
00206C54                            ; Level end flag
00206C54                            ; =================================================================
00206C54                            
00206C54                            ; =================================================================
00206C54                            ; ------------------------------------------------
00206C54                            ; Variables
00206C54                            ; ------------------------------------------------
00206C54                            
00206C54 =00006540                  varEndFlagVRAM	equ	$6000|$540
00206C54                            
00206C54                            ; =================================================================
00206C54                            ; ------------------------------------------------
00206C54                            ; Code start
00206C54                            ; ------------------------------------------------
00206C54                            
00206C54                            Obj_EndFlag:
00206C54 7000                        		moveq	#0,d0
00206C56 102E 001D                   		move.b	obj_index(a6),d0
00206C5A D040                        		add.w	d0,d0
00206C5C 323B 0000                   		move.w	@Index(pc,d0.w),d1
00206C60 4EBB 1000                   		jsr	@Index(pc,d1.w)
00206C64                            		
00206C64 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00206C6A 302E 0008                  		move.w	obj_x(a6),d0
00206C6E 0440 0140                  		sub.w	#320,d0
00206C72 322C 0008                  		move.w	obj_x(a4),d1
00206C76 B240                       		cmp.w	d0,d1
00206C78 6D00                       		blt.s	@im_gone
00206C7A                            		
00206C7A 203C 6540 0000                 		move.l	#(varEndFlagVRAM<<16),d0
00206C80 102E 0020                     		move.b	obj_frame(a6),d0	
00206C84 223C 0000 0000              		move.l	#mapObj_EndFlag,d1
00206C8A 6100 D280                    		bsr	Object_Show
00206C8E                             		
00206C8E 203C 6540 0000                		move.l	#(varEndFlagVRAM<<16),d0
00206C94 102E 0020                     		move.b	obj_frame(a6),d0
00206C98 223C 0000 0000             		move.l	#dplcObj_EndFlag,d1
00206C9E 243C 0000 0000             		move.l	#artObj_EndFlag,d2
00206CA4 6000 D20C                  		bra	Object_DPLC
00206CA8                            		
00206CA8                            @im_gone:
00206CA8 4E75                       		rts
00206CAA                            		
00206CAA                            ; ------------------------------------------------
00206CAA                            
00206CAA                            @Index:
00206CAA 0000                       		dc.w	@Init-@Index
00206CAC 0000                       		dc.w	@Main-@Index
00206CAE                            		even
00206CAE                            		
00206CAE                            ; =================================================================
00206CAE                            ; ------------------------------------------------
00206CAE                            ; Index $00: Init
00206CAE                            ; ------------------------------------------------
00206CAE                            
00206CAE                            @Init:
00206CAE 062E 0001 001D             		add.b	#1,obj_index(a6)
00206CB4 2D7C 0202 0303 0004        		move.l	#$02020303,obj_size(a6)
00206CBC 4E75                       		rts
00206CBE                            		
00206CBE                            ; =================================================================
00206CBE                            ; ------------------------------------------------                  
00206CBE                            ; Index $01: Main
00206CBE                            ; ------------------------------------------------
00206CBE                            
00206CBE                            @Main:
00206CBE 042E 0001 001C             		sub.b	#1,obj_anim_spd(a6)
00206CC4 6A00                       		bpl.s	@plus
00206CC6 1D7C 0006 001C             		move.b	#6,obj_anim_spd(a6)
00206CCC 062E 0001 0020             		add.b	#1,obj_frame(a6)
00206CD2 0C2E 0003 0020             		cmp.b	#3,obj_frame(a6)
00206CD8 6D00                       		blt.s	@plus
00206CDA 422E 0020                  		clr.b	obj_frame(a6)
00206CDE                            @plus:
00206CDE 6100 DE36                  		bsr	objTouch
00206CE2 4A00                       		tst.b	d0
00206CE4 6700                       		beq.s	@return
00206CE6                            
00206CE6                            ;   		add.w	#1,(RAM_CurrLevel)
00206CE6 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
00206CEC 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
00206CF4                            @return:
00206CF4 4E75                       		rts
00206CF6                            		
00206CF6                            ; =================================================================
00206CF6                            		
00206CF6                            		
00206CF6                                		include	"engine/modes/level/data/objects/actionscript/code.asm"  
00206CF6                            ; =================================================================
00206CF6                            ; Object (SPECIAL)
00206CF6                            ; 
00206CF6                            ; Action script
00206CF6                            ; =================================================================
00206CF6                            
00206CF6                            ; =================================================================
00206CF6                            ; ------------------------------------------------
00206CF6                            ; Variables
00206CF6                            ; ------------------------------------------------
00206CF6                            
00206CF6                            		rsset obj_ram
00206CF6 =00000024                  gotMaps		rs.l 1
00206CF6 =00000028                  gotVram		rs.w 1
00206CF6 =0000002A                  gotFrame	rs.w 1 		;its a byte
00206CF6 =0000002C                  gotWho		rs.l 1
00206CF6                            
00206CF6                            ; =================================================================
00206CF6                            ; ------------------------------------------------
00206CF6                            ; Code start
00206CF6                            ; ------------------------------------------------
00206CF6                            
00206CF6                            obj_actionscript:
00206CF6 7000                       		moveq	#0,d0
00206CF8 102E 001D                  		move.b	obj_index(a6),d0
00206CFC D040                       		add.w	d0,d0
00206CFE 323B 0000                  		move.w	@list(pc,d0.w),d1
00206D02 4EFB 1000                  		jmp	@list(pc,d1.w)
00206D06                            	
00206D06                            ; ------------------------------------------------
00206D06                            
00206D06                            @list:
00206D06 0000                       		dc.w @killobj_init-@list
00206D08 0000                       		dc.w @killobj_main-@list
00206D0A                            
00206D0A 0000                       		dc.w 0
00206D0C 0000                       		dc.w 0
00206D0E                            		
00206D0E                            ; ------------------------------------------------
00206D0E                            ; Action: kill object
00206D0E                            ; ------------------------------------------------
00206D0E                            
00206D0E                            @killobj_init:
00206D0E 002E 0001 001D             		or.b	#1,obj_index(a6)
00206D14 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
00206D1A 08AE 0006 001E             		bclr	#bitobj_hit,obj_status(a6)
00206D20                            		
00206D20 08EE 0001 001E             		bset	#bitobj_FlipV,obj_status(a6)
00206D26 2D7C FFFC 0000 0014        		move.l	#-$40000,obj_y_spd(a6)
00206D2E                            
00206D2E                            		;Read player
00206D2E 202E 002C                  		move.l	gotWho(a6),d0
00206D32 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
00206D38 6600                       		bne.s	@notplayer
00206D3A 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00206D40 297C FFFD 0000 0014        		move.l	#-$30000,obj_y_spd(a4)
00206D48 197C 0002 001A              		move.b	#varPlyAniJump,obj_anim_id(a4)
00206D4E 08EC 0002 001E             		bset 	#bitobj_air,obj_status(a4)
00206D54                            @notplayer:
00206D54 203C 0000 0000               		move.l	#SndSfx_HitEnemy,d0
00206D5A 7202                         		moveq 	#2,d1
00206D5C 7401                         		moveq	#1,d2
00206D5E 6100 99B0                    		bsr	Audio_Track_play
00206D62                              		
00206D62                            ; --------------------------
00206D62                            
00206D62                            @killobj_main:
00206D62 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00206D66 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00206D6A 0687 0000 4000             		add.l	#$4000,d7
00206D70 DDAE 0008                  		add.l	d6,obj_x(a6)
00206D74 DFAE 000C                  		add.l	d7,obj_y(a6)
00206D78 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00206D7C 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00206D80                            		
00206D80 6100 D4CA                   		bsr	Object_OffCheck
00206D84 7000                       		moveq	#0,d0
00206D86 302E 0028                      		move.w	gotVram(a6),d0
00206D8A 4840                           		swap	d0
00206D8C 102E 002A                   		move.b	gotFrame(a6),d0
00206D90 222E 0024                  		move.l	gotMaps(a6),d1
00206D94 6000 D176                   		bra	Object_Show
00206D98                            		
00206D98                            ; ------------------------------------------------
00206D98                            ; Action: hurt the enemy
00206D98                            ; ------------------------------------------------
00206D98                            
00206D98                            ; =================================================================
00206D98                            ; =================================================================
00206D98                                		include	"engine/modes/level/data/objects/hudinfo/code.asm"  
00206D98                            ; =================================================================
00206D98                            ; Object
00206D98                            ; 
00206D98                            ; Level end flag
00206D98                            ; =================================================================
00206D98                            
00206D98                            ; =================================================================
00206D98                            ; ------------------------------------------------
00206D98                            ; Variables
00206D98                            ; ------------------------------------------------
00206D98                            
00206D98 =0000C580                  varHudBase	equ	$C000|$580
00206D98 =0000C5A8                  varVramHudCoinR	equ	$C000|$5A8
00206D98 =0000C5AC                  varVramHudCoinB	equ	$C000|$5AC
00206D98 =0000C5B0                  varHudLife	equ	$C000|$5B0
00206D98 =0000C5BC                  varHudLifeBar	equ	$C000|$5BC
00206D98 =0000C5C0                  varHudDigits	equ	$C000|$5C0
00206D98                            
00206D98                            		rsset obj_ram
00206D98 =00000024                  ramLastCoins	rs.w	1
00206D98 =00000026                  ramDecCoins 	rs.w	1
00206D98 =00000028                  ramLastLives	rs.w	1
00206D98 =0000002A                  ramDecLives 	rs.w	1
00206D98                            
00206D98                            ; =================================================================
00206D98                            ; ------------------------------------------------
00206D98                            ; Code start
00206D98                            ; ------------------------------------------------
00206D98                            
00206D98                            obj_HudInfo:
00206D98 7000                        		moveq	#0,d0
00206D9A 102E 001D                   		move.b	obj_index(a6),d0
00206D9E D040                        		add.w	d0,d0
00206DA0 323B 0000                   		move.w	@Index(pc,d0.w),d1
00206DA4 4EFB 1000                   		jmp	@Index(pc,d1.w)
00206DA8                             		
00206DA8                            ; ------------------------------------------------
00206DA8                            
00206DA8                            @Index:
00206DA8 0000                       		dc.w	@Init-@Index
00206DAA 0000                       		dc.w	@Main-@Index
00206DAC                            		even
00206DAC                            		
00206DAC                            ; =================================================================
00206DAC                            ; ------------------------------------------------
00206DAC                            ; Index $00: Init
00206DAC                            ; ------------------------------------------------
00206DAC                            
00206DAC                            @Init:
00206DAC 062E 0001 001D             		add.b	#1,obj_index(a6)
00206DB2 08EE 0007 001E              		bset	#bitobj_stay,obj_status(a6)
00206DB8 3D7C 0000 0024             		move.w	#0,ramLastCoins(a6)
00206DBE                            		
00206DBE 3D7C 0001 0024             		move.w	#1,ramLastCoins(a6)
00206DC4 3D7C 0001 0028             		move.w	#1,ramLastLives(a6)
00206DCA                            		
00206DCA                            ; =================================================================
00206DCA                            ; ------------------------------------------------                  
00206DCA                            ; Index $01: Main
00206DCA                            ; ------------------------------------------------
00206DCA                            
00206DCA                            @Main:
00206DCA 203C 0008 0008             		move.l	#8<<16|8,d0
00206DD0 223C 0005 C5A8             		move.l	#5<<16|varVramHudCoinR,d1
00206DD6 6100 D1B6                  		bsr	Object_ExtSprite
00206DDA 203C 0008 0018             		move.l	#8<<16|24,d0
00206DE0 223C 0005 C5B0             		move.l	#5<<16|varHudLife,d1
00206DE6 6100 D1A6                  		bsr	Object_ExtSprite
00206DEA                            		
00206DEA                            
00206DEA 203C 0008 0030             		move.l	#8<<16|48,d0
00206DF0 223C 0000 C5BC             		move.l	#varHudLifeBar,d1
00206DF6 3439 FFFF DC04             		move.w	(RAM_P1_Hits),d2
00206DFC 0C42 0008                  		cmp.w	#8,d2
00206E00 6D00                       		blt.s	@lower
00206E02 343C 0008                  		move.w	#8,d2
00206E06                            @lower:
00206E06 4A42                       		tst.w	d2
00206E08 6700                       		beq.s	@dead
00206E0A 0442 0001                  		sub.w	#1,d2
00206E0E 4A42                       		tst.w	d2
00206E10 6600                       		bne.s	@addbox
00206E12 0641 0001                  		add.w	#1,d1
00206E16                            @addbox:
00206E16 6100 D176                  		bsr	Object_ExtSprite
00206E1A 0680 0008 0000             		add.l	#$80000,d0
00206E20 51CA FFF4                  		dbf	d2,@addbox
00206E24                            @dead:
00206E24                            
00206E24 7400                       		moveq	#0,d2
00206E26 3439 FFFF DC02             		move.w	(RAM_P1_Coins),d2
00206E2C B46E 0024                  		cmp.w	ramLastCoins(a6),d2
00206E30 6700                       		beq.s	@dontupdc
00206E32 3D42 0024                  		move.w	d2,ramLastCoins(a6)
00206E36 6100 BD9A                  		bsr	HexToDec
00206E3A 3D42 0026                  		move.w	d2,ramDecCoins(a6)
00206E3E                            @dontupdc:
00206E3E 203C 0018 0010             		move.l	#24<<16|16,d0
00206E44 342E 0026                  		move.w	ramDecCoins(a6),d2
00206E48 6100 0000                  		bsr	@showsprval
00206E4C                            		
00206E4C 7400                       		moveq	#0,d2
00206E4E 3439 FFFF DC00             		move.w	(RAM_P1_Lives),d2
00206E54 B46E 0028                  		cmp.w	ramLastLives(a6),d2
00206E58 6700                       		beq.s	@dontupdlvs
00206E5A 3D42 0028                  		move.w	d2,ramLastLives(a6)
00206E5E 6100 BD72                  		bsr	HexToDec
00206E62 3D42 002A                  		move.w	d2,ramDecLives(a6)
00206E66                            @dontupdlvs:
00206E66 203C 0018 0020             		move.l	#24<<16|32,d0
00206E6C 342E 002A                  		move.w	ramDecLives(a6),d2
00206E70                            		
00206E70                            ; -----------------------------
00206E70                            
00206E70                            @showsprval:
00206E70 7601                       		moveq	#1,d3
00206E72 E89A                       		ror.l	#4,d2
00206E74                            @nxtcoinnum:
00206E74 7200                       		moveq	#0,d1
00206E76 1202                       		move.b	d2,d1
00206E78 0201 000F                  		and.b	#$F,d1
00206E7C 0641 C5C0                  		add.w	#varHudDigits,d1
00206E80 E99A                       		rol.l	#4,d2
00206E82 0680 0008 0000             		add.l	#$00080000,d0
00206E88 6100 D104                  		bsr	Object_ExtSprite	
00206E8C 51CB FFE6                  		dbf	d3,@nxtcoinnum
00206E90 4E75                       		rts
00206E92                            		
00206E92                            ; =================================================================
00206E92                            		
00206E92                            		
00206E92                                		
00206E92                                		
00206E92                            		
00206E92                            ; ====================================================================
00206E92                            ; --------------------------------------------
00206E92                            ; VBlank
00206E92                            ; --------------------------------------------
00206E92                            
00206E92                            ; ====================================================================		
00206E92                            ; --------------------------------------------
00206E92                            ; HBlank
00206E92                            ; --------------------------------------------
00206E92                            		
00206E92                            ; ====================================================================
00206E92                            ; ====================================================================
00206E92                            		
00206E92                            ; ====================================================================		
00206E92                            ; --------------------------------------------
00206E92                            ; Data
00206E92                            ; --------------------------------------------
00206E92                            
00206E92                            		include	"engine/modes/level/data.asm"
00206E92                            ; =================================================================
00206E92                            ; ------------------------------------------------
00206E92                            ; DMA art
00206E92                            ; ------------------------------------------------
00206E92                            
00206E92                            		cnop 0,$4000
00208000                            Art_Player:	incbin	"engine/modes/level/data/objects/player/data/art.bin"
002098C0                            		even
002098C0                            artObj_EndFlag:	incbin	"engine/modes/level/data/objects/endflag/data/art.bin"
0020A780                             		even
0020A780                            Art_AnimCoin:	incbin	"engine/modes/level/data/layouts/coin_art.bin"
0020AD80                            		even
0020AD80                            
0020AD80                            ; =================================================================
0020AD80                            ; ------------------------------------------------
0020AD80                            ; Non-DMA art
0020AD80                            ; ------------------------------------------------
0020AD80                            	
0020AD80                            ; ---------------------------
0020AD80                            ; Objects
0020AD80                            ; ---------------------------
0020AD80                            
0020AD80                            		cnop 0,$800
0020B000                            Art_dadou:	incbin	"engine/modes/level/data/objects/dadou/data/art.bin"
0020C100                            art_dadou_end:
0020C100                             		even
0020C100                            Art_pikudo:	incbin	"engine/modes/level/data/objects/pikudo/data/art.bin"
0020C9A0                            art_pikudo_end:
0020C9A0                             		even
0020C9A0                             		
0020C9A0                            artObj_Platform:
0020C9A0                            		incbin	"engine/modes/level/data/objects/platform/data/art.bin"
0020CA60                            artObj_Platform_e:
0020CA60                             		even
0020CA60                            artObj_Ball:	incbin	"engine/modes/level/data/objects/ball/data/art.bin"
0020CD60                            artObj_Ball_e:	even
0020CD60                             		
0020CD60                            ; =================================================================
0020CD60                            ; ------------------------------------------------
0020CD60                            ; Other stuff
0020CD60                            ; ------------------------------------------------
0020CD60                            
0020CD60                            ; ---------------------------
0020CD60                            ; Player
0020CD60                            ; ---------------------------
0020CD60                            
0020CD60                            Map_Player:	include	"engine/modes/level/data/objects/player/data/map.asm"
0020CD60                            @mappings:
0020CD60 0000                       		dc.w @frame_0-@mappings
0020CD62 0000                       		dc.w @frame_1-@mappings
0020CD64 0000                       		dc.w @frame_2-@mappings
0020CD66 0000                       		dc.w @frame_3-@mappings
0020CD68 0000                       		dc.w @frame_4-@mappings
0020CD6A 0000                       		dc.w @frame_5-@mappings
0020CD6C 0000                       		dc.w @frame_6-@mappings
0020CD6E 0000                       		dc.w @frame_7-@mappings
0020CD70 0000                       		dc.w @frame_8-@mappings
0020CD72 0000                       		dc.w @frame_9-@mappings
0020CD74 0000                       		dc.w @frame_10-@mappings
0020CD76 0000                       		dc.w @frame_11-@mappings
0020CD78 0000                       		dc.w @frame_12-@mappings
0020CD7A 0000                       		dc.w @frame_13-@mappings
0020CD7C 0000                       		dc.w @frame_14-@mappings
0020CD7E 0000                       		dc.w @frame_15-@mappings
0020CD80 0000                       		dc.w @frame_16-@mappings
0020CD82                            @frame_0:
0020CD82 03                         		dc.b $3
0020CD83                            
0020CD83 000C 0000 F0               		dc.b $0,$C,$0,$0,$F0
0020CD88 F005 0004 F8               		dc.b $F0,$5,$0,$4,$F8
0020CD8D 0804 0008 F8               		dc.b $8,$4,$0,$8,$F8
0020CD92                            		even
0020CD92                            @frame_1:
0020CD92 03                         		dc.b $3
0020CD93                            
0020CD93 000C 0000 F0               		dc.b $0,$C,$0,$0,$F0
0020CD98 F005 0004 F8               		dc.b $F0,$5,$0,$4,$F8
0020CD9D 0804 0008 F8               		dc.b $8,$4,$0,$8,$F8
0020CDA2                            		even
0020CDA2                            @frame_2:
0020CDA2 04                         		dc.b $4
0020CDA3                            
0020CDA3 0009 0000 F0               		dc.b $0,$9,$0,$0,$F0
0020CDA8 F005 0006 F8               		dc.b $F0,$5,$0,$6,$F8
0020CDAD F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0020CDB2 0800 000B 08               		dc.b $8,$0,$0,$B,$8
0020CDB8 00                         		even
0020CDB8                            @frame_3:
0020CDB8 03                         		dc.b $3
0020CDB9                            
0020CDB9 F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0020CDBE F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0020CDC3 0800 0009 08               		dc.b $8,$0,$0,$9,$8
0020CDC8                            		even
0020CDC8                            @frame_4:
0020CDC8 02                         		dc.b $2
0020CDC9                            
0020CDC9 F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0020CDCE F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0020CDD4 00                         		even
0020CDD4                            @frame_5:
0020CDD4 03                         		dc.b $3
0020CDD5                            
0020CDD5 080C 0000 F0               		dc.b $8,$C,$0,$0,$F0
0020CDDA F006 0004 F8               		dc.b $F0,$6,$0,$4,$F8
0020CDDF F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0020CDE4                            		even
0020CDE4                            @frame_6:
0020CDE4 04                         		dc.b $4
0020CDE5                            
0020CDE5 0009 0000 F0               		dc.b $0,$9,$0,$0,$F0
0020CDEA F005 0006 F8               		dc.b $F0,$5,$0,$6,$F8
0020CDEF F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0020CDF4 0800 000B 08               		dc.b $8,$0,$0,$B,$8
0020CDFA 00                         		even
0020CDFA                            @frame_7:
0020CDFA 03                         		dc.b $3
0020CDFB                            
0020CDFB F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0020CE00 F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0020CE05 0800 0009 08               		dc.b $8,$0,$0,$9,$8
0020CE0A                            		even
0020CE0A                            @frame_8:
0020CE0A 02                         		dc.b $2
0020CE0B                            
0020CE0B F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0020CE10 F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0020CE16 00                         		even
0020CE16                            @frame_9:
0020CE16 03                         		dc.b $3
0020CE17                            
0020CE17 080C 0000 F0               		dc.b $8,$C,$0,$0,$F0
0020CE1C F006 0004 F8               		dc.b $F0,$6,$0,$4,$F8
0020CE21 F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0020CE26                            		even
0020CE26                            @frame_10:
0020CE26 04                         		dc.b $4
0020CE27                            
0020CE27 F807 0000 F0               		dc.b $F8,$7,$0,$0,$F0
0020CE2C F008 0008 F8               		dc.b $F0,$8,$0,$8,$F8
0020CE31 F802 000B 00               		dc.b $F8,$2,$0,$B,$0
0020CE36 F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0020CE3C 00                         		even
0020CE3C                            @frame_11:
0020CE3C 04                         		dc.b $4
0020CE3D                            
0020CE3D F807 0000 F0               		dc.b $F8,$7,$0,$0,$F0
0020CE42 F008 0008 F8               		dc.b $F0,$8,$0,$8,$F8
0020CE47 F802 000B 00               		dc.b $F8,$2,$0,$B,$0
0020CE4C F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0020CE52 00                         		even
0020CE52                            @frame_12:
0020CE52 03                         		dc.b $3
0020CE53                            
0020CE53 F008 0000 F0               		dc.b $F0,$8,$0,$0,$F0
0020CE58 F803 0003 F8               		dc.b $F8,$3,$0,$3,$F8
0020CE5D F802 0007 00               		dc.b $F8,$2,$0,$7,$0
0020CE62                            		even
0020CE62                            @frame_13:
0020CE62 04                         		dc.b $4
0020CE63                            
0020CE63 F009 0000 F0               		dc.b $F0,$9,$0,$0,$F0
0020CE68 0002 0006 F8               		dc.b $0,$2,$0,$6,$F8
0020CE6D 0001 0009 00               		dc.b $0,$1,$0,$9,$0
0020CE72 F800 000B 08               		dc.b $F8,$0,$0,$B,$8
0020CE78 00                         		even
0020CE78                            @frame_14:
0020CE78 03                         		dc.b $3
0020CE79                            
0020CE79 F00D 0000 F0               		dc.b $F0,$D,$0,$0,$F0
0020CE7E 0005 0008 F8               		dc.b $0,$5,$0,$8,$F8
0020CE83 1000 000C 00               		dc.b $10,$0,$0,$C,$0
0020CE88                            		even
0020CE88                            @frame_15:
0020CE88 03                         		dc.b $3
0020CE89                            
0020CE89 F808 0000 F0               		dc.b $F8,$8,$0,$0,$F0
0020CE8E F008 0003 F8               		dc.b $F0,$8,$0,$3,$F8
0020CE93 0006 0006 F8               		dc.b $0,$6,$0,$6,$F8
0020CE98                            		even
0020CE98                            @frame_16:
0020CE98 05                         		dc.b $5
0020CE99                            
0020CE99 F80C 0000 E8               		dc.b $F8,$C,$0,$0,$E8
0020CE9E 000D 0004 F0               		dc.b $0,$D,$0,$4,$F0
0020CEA3 1000 000C 00               		dc.b $10,$0,$0,$C,$0
0020CEA8 F001 000D 08               		dc.b $F0,$1,$0,$D,$8
0020CEAD F801 000F 10               		dc.b $F8,$1,$0,$F,$10
0020CEB2                            		even
0020CEB2                            		even
0020CEB2                            		even
0020CEB2                            DPLC_Player:	include	"engine/modes/level/data/objects/player/data/plc.asm"
0020CEB2                            @dplc:
0020CEB2 0000                       		dc.w @frame_0-@dplc
0020CEB4 0000                       		dc.w @frame_1-@dplc
0020CEB6 0000                       		dc.w @frame_2-@dplc
0020CEB8 0000                       		dc.w @frame_3-@dplc
0020CEBA 0000                       		dc.w @frame_4-@dplc
0020CEBC 0000                       		dc.w @frame_5-@dplc
0020CEBE 0000                       		dc.w @frame_6-@dplc
0020CEC0 0000                       		dc.w @frame_7-@dplc
0020CEC2 0000                       		dc.w @frame_8-@dplc
0020CEC4 0000                       		dc.w @frame_9-@dplc
0020CEC6 0000                       		dc.w @frame_10-@dplc
0020CEC8 0000                       		dc.w @frame_11-@dplc
0020CECA 0000                       		dc.w @frame_12-@dplc
0020CECC 0000                       		dc.w @frame_13-@dplc
0020CECE 0000                       		dc.w @frame_14-@dplc
0020CED0 0000                       		dc.w @frame_15-@dplc
0020CED2 0000                       		dc.w @frame_16-@dplc
0020CED4                            @frame_0:
0020CED4 0003                       		dc.w $3
0020CED6                            
0020CED6 3000                       		dc.w $3000
0020CED8 3004                       		dc.w $3004
0020CEDA 1008                       		dc.w $1008
0020CEDC                            @frame_1:
0020CEDC 0003                       		dc.w $3
0020CEDE                            
0020CEDE 300A                       		dc.w $300A
0020CEE0 300E                       		dc.w $300E
0020CEE2 1012                       		dc.w $1012
0020CEE4                            @frame_2:
0020CEE4 0004                       		dc.w $4
0020CEE6                            
0020CEE6 5014                       		dc.w $5014
0020CEE8 301A                       		dc.w $301A
0020CEEA 001E                       		dc.w $1E
0020CEEC 001F                       		dc.w $1F
0020CEEE                            @frame_3:
0020CEEE 0003                       		dc.w $3
0020CEF0                            
0020CEF0 7020                       		dc.w $7020
0020CEF2 0028                       		dc.w $28
0020CEF4 0029                       		dc.w $29
0020CEF6                            @frame_4:
0020CEF6 0002                       		dc.w $2
0020CEF8                            
0020CEF8 702A                       		dc.w $702A
0020CEFA 0032                       		dc.w $32
0020CEFC                            @frame_5:
0020CEFC 0003                       		dc.w $3
0020CEFE                            
0020CEFE 3033                       		dc.w $3033
0020CF00 5037                       		dc.w $5037
0020CF02 003D                       		dc.w $3D
0020CF04                            @frame_6:
0020CF04 0004                       		dc.w $4
0020CF06                            
0020CF06 503E                       		dc.w $503E
0020CF08 3044                       		dc.w $3044
0020CF0A 0048                       		dc.w $48
0020CF0C 0049                       		dc.w $49
0020CF0E                            @frame_7:
0020CF0E 0003                       		dc.w $3
0020CF10                            
0020CF10 704A                       		dc.w $704A
0020CF12 0052                       		dc.w $52
0020CF14 0053                       		dc.w $53
0020CF16                            @frame_8:
0020CF16 0002                       		dc.w $2
0020CF18                            
0020CF18 7054                       		dc.w $7054
0020CF1A 005C                       		dc.w $5C
0020CF1C                            @frame_9:
0020CF1C 0003                       		dc.w $3
0020CF1E                            
0020CF1E 305D                       		dc.w $305D
0020CF20 5061                       		dc.w $5061
0020CF22 0067                       		dc.w $67
0020CF24                            @frame_10:
0020CF24 0004                       		dc.w $4
0020CF26                            
0020CF26 7068                       		dc.w $7068
0020CF28 2070                       		dc.w $2070
0020CF2A 2073                       		dc.w $2073
0020CF2C 0076                       		dc.w $76
0020CF2E                            @frame_11:
0020CF2E 0004                       		dc.w $4
0020CF30                            
0020CF30 7077                       		dc.w $7077
0020CF32 207F                       		dc.w $207F
0020CF34 2082                       		dc.w $2082
0020CF36 0085                       		dc.w $85
0020CF38                            @frame_12:
0020CF38 0003                       		dc.w $3
0020CF3A                            
0020CF3A 2086                       		dc.w $2086
0020CF3C 3089                       		dc.w $3089
0020CF3E 208D                       		dc.w $208D
0020CF40                            @frame_13:
0020CF40 0004                       		dc.w $4
0020CF42                            
0020CF42 5090                       		dc.w $5090
0020CF44 2096                       		dc.w $2096
0020CF46 1099                       		dc.w $1099
0020CF48 009B                       		dc.w $9B
0020CF4A                            @frame_14:
0020CF4A 0003                       		dc.w $3
0020CF4C                            
0020CF4C 709C                       		dc.w $709C
0020CF4E 30A4                       		dc.w $30A4
0020CF50 00A8                       		dc.w $A8
0020CF52                            @frame_15:
0020CF52 0003                       		dc.w $3
0020CF54                            
0020CF54 20A9                       		dc.w $20A9
0020CF56 20AC                       		dc.w $20AC
0020CF58 50AF                       		dc.w $50AF
0020CF5A                            @frame_16:
0020CF5A 0005                       		dc.w $5
0020CF5C                            
0020CF5C 30B5                       		dc.w $30B5
0020CF5E 70B9                       		dc.w $70B9
0020CF60 00C1                       		dc.w $C1
0020CF62 10C2                       		dc.w $10C2
0020CF64 10C4                       		dc.w $10C4
0020CF64 10C4                       		dc.w $10C4
0020CF66                            		even
0020CF66                            Pal_Player:	incbin	"engine/modes/level/data/objects/player/data/pal.bin"
0020CF86                            Pal_Player_End:
0020CF86                            		even
0020CF86                            
0020CF86                            ; ---------------------------
0020CF86                            ; Objects
0020CF86                            ; ---------------------------
0020CF86                            
0020CF86                            Map_dadou:	include	"engine/modes/level/data/objects/dadou/data/map.asm"
0020CF86                            @mappings:
0020CF86 0000                       		dc.w @frame_0-@mappings
0020CF88 0000                       		dc.w @frame_1-@mappings
0020CF8A 0000                       		dc.w @frame_2-@mappings
0020CF8C 0000                       		dc.w @frame_3-@mappings
0020CF8E 0000                       		dc.w @frame_4-@mappings
0020CF90 0000                       		dc.w @frame_5-@mappings
0020CF92 0000                       		dc.w @frame_6-@mappings
0020CF94 0000                       		dc.w @frame_7-@mappings
0020CF96 0000                       		dc.w @frame_8-@mappings
0020CF98 0000                       		dc.w @frame_9-@mappings
0020CF9A                            @frame_0:
0020CF9A 03                         		dc.b $3
0020CF9B                            
0020CF9B F80A 0000 F0               		dc.b $F8,$A,$0,$0,$F0
0020CFA0 F004 0009 00               		dc.b $F0,$4,$0,$9,$0
0020CFA5 F801 000B 08               		dc.b $F8,$1,$0,$B,$8
0020CFAA                            		even
0020CFAA                            @frame_1:
0020CFAA 03                         		dc.b $3
0020CFAB                            
0020CFAB F80A 000D F0               		dc.b $F8,$A,$0,$D,$F0
0020CFB0 F004 0016 00               		dc.b $F0,$4,$0,$16,$0
0020CFB5 F801 0018 08               		dc.b $F8,$1,$0,$18,$8
0020CFBA                            		even
0020CFBA                            @frame_2:
0020CFBA 02                         		dc.b $2
0020CFBB                            
0020CFBB F80A 001A F0               		dc.b $F8,$A,$0,$1A,$F0
0020CFC0 F801 0023 08               		dc.b $F8,$1,$0,$23,$8
0020CFC6 00                         		even
0020CFC6                            @frame_3:
0020CFC6 02                         		dc.b $2
0020CFC7                            
0020CFC7 F00E 0025 F0               		dc.b $F0,$E,$0,$25,$F0
0020CFCC 0808 0031 F8               		dc.b $8,$8,$0,$31,$F8
0020CFD2 00                         		even
0020CFD2                            @frame_4:
0020CFD2 02                         		dc.b $2
0020CFD3                            
0020CFD3 F00E 0034 F0               		dc.b $F0,$E,$0,$34,$F0
0020CFD8 0808 0040 F8               		dc.b $8,$8,$0,$40,$F8
0020CFDE 00                         		even
0020CFDE                            @frame_5:
0020CFDE 02                         		dc.b $2
0020CFDF                            
0020CFDF F00E 0043 F0               		dc.b $F0,$E,$0,$43,$F0
0020CFE4 0804 004F F8               		dc.b $8,$4,$0,$4F,$F8
0020CFEA 00                         		even
0020CFEA                            @frame_6:
0020CFEA 02                         		dc.b $2
0020CFEB                            
0020CFEB F80A 0051 F0               		dc.b $F8,$A,$0,$51,$F0
0020CFF0 F801 005A 08               		dc.b $F8,$1,$0,$5A,$8
0020CFF6 00                         		even
0020CFF6                            @frame_7:
0020CFF6 02                         		dc.b $2
0020CFF7                            
0020CFF7 F00E 005C F0               		dc.b $F0,$E,$0,$5C,$F0
0020CFFC 0804 0068 F8               		dc.b $8,$4,$0,$68,$F8
0020D002 00                         		even
0020D002                            @frame_8:
0020D002 02                         		dc.b $2
0020D003                            
0020D003 F00E 006A F0               		dc.b $F0,$E,$0,$6A,$F0
0020D008 0808 0076 F8               		dc.b $8,$8,$0,$76,$F8
0020D00E 00                         		even
0020D00E                            @frame_9:
0020D00E 02                         		dc.b $2
0020D00F                            
0020D00F F00E 0079 F0               		dc.b $F0,$E,$0,$79,$F0
0020D014 0808 0085 F8               		dc.b $8,$8,$0,$85,$F8
0020D01A 00                         		even
0020D01A 00                         		even
0020D01A                             		even
0020D01A                            Map_pikudo:	include	"engine/modes/level/data/objects/pikudo/data/map.asm"
0020D01A                            @mappings:
0020D01A 0000                       		dc.w @frame_0-@mappings
0020D01C 0000                       		dc.w @frame_1-@mappings
0020D01E 0000                       		dc.w @frame_2-@mappings
0020D020 0000                       		dc.w @frame_3-@mappings
0020D022 0000                       		dc.w @frame_4-@mappings
0020D024                            @frame_0:
0020D024 04                         		dc.b $4
0020D025                            
0020D025 F009 0000 F0               		dc.b $F0,$9,$0,$0,$F0
0020D02A E804 0006 F8               		dc.b $E8,$4,$0,$6,$F8
0020D02F 0009 0008 F8               		dc.b $0,$9,$0,$8,$F8
0020D034 F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0020D03A 00                         		even
0020D03A                            @frame_1:
0020D03A 04                         		dc.b $4
0020D03B                            
0020D03B F009 000F F0               		dc.b $F0,$9,$0,$F,$F0
0020D040 E804 0015 F8               		dc.b $E8,$4,$0,$15,$F8
0020D045 0009 0017 F8               		dc.b $0,$9,$0,$17,$F8
0020D04A F800 001D 08               		dc.b $F8,$0,$0,$1D,$8
0020D050 00                         		even
0020D050                            @frame_2:
0020D050 04                         		dc.b $4
0020D051                            
0020D051 F009 001E F0               		dc.b $F0,$9,$0,$1E,$F0
0020D056 E804 0024 F8               		dc.b $E8,$4,$0,$24,$F8
0020D05B 0009 0026 F8               		dc.b $0,$9,$0,$26,$F8
0020D060 F800 002C 08               		dc.b $F8,$0,$0,$2C,$8
0020D066 00                         		even
0020D066                            @frame_3:
0020D066 01                         		dc.b $1
0020D067                            
0020D067 F00B 002D F8               		dc.b $F0,$B,$0,$2D,$F8
0020D06C                            		even
0020D06C                            @frame_4:
0020D06C 01                         		dc.b $1
0020D06D                            
0020D06D F00B 0039 F8               		dc.b $F0,$B,$0,$39,$F8
0020D072                            		even
0020D072                            		even
0020D072                             		even
0020D072                            Map_ball:	include	"engine/modes/level/data/objects/ball/data/map.asm"
0020D072                            @mappings:
0020D072 0000                       		dc.w @frame_0-@mappings
0020D074 0000                       		dc.w @frame_1-@mappings
0020D076 0000                       		dc.w @frame_2-@mappings
0020D078 0000                       		dc.w @frame_3-@mappings
0020D07A                            @frame_0:
0020D07A 01                         		dc.b $1
0020D07B                            
0020D07B F806 0000 F8               		dc.b $F8,$6,$0,$0,$F8
0020D080                            		even
0020D080                            @frame_1:
0020D080 01                         		dc.b $1
0020D081                            
0020D081 F806 0006 F8               		dc.b $F8,$6,$0,$6,$F8
0020D086                            		even
0020D086                            @frame_2:
0020D086 01                         		dc.b $1
0020D087                            
0020D087 F806 000C F8               		dc.b $F8,$6,$0,$C,$F8
0020D08C                            		even
0020D08C                            @frame_3:
0020D08C 01                         		dc.b $1
0020D08D                            
0020D08D F806 0012 F8               		dc.b $F8,$6,$0,$12,$F8
0020D092                            		even
0020D092                            		even
0020D092                             		even
0020D092                            objMap_Platform:include	"engine/modes/level/data/objects/platform/data/map.asm"
0020D092                            @mappings:
0020D092 0000                       		dc.w @frame_0-@mappings
0020D094                            @frame_0:
0020D094 02                         		dc.b $2
0020D095                            
0020D095 F80C 0000 E8               		dc.b $F8,$C,$0,$0,$E8
0020D09A F804 0004 08               		dc.b $F8,$4,$0,$4,$8
0020D0A0 00                         		even
0020D0A0 00                         		even
0020D0A0                             		even
0020D0A0                            mapObj_EndFlag:	include	"engine/modes/level/data/objects/endflag/data/map.asm"
0020D0A0                            @mappings:
0020D0A0 0000                       		dc.w @frame_0-@mappings
0020D0A2 0000                       		dc.w @frame_1-@mappings
0020D0A4 0000                       		dc.w @frame_2-@mappings
0020D0A6                            @frame_0:
0020D0A6 07                         		dc.b $7
0020D0A7                            
0020D0A7 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
0020D0AC E00B 0004 E8               		dc.b $E0,$B,$0,$4,$E8
0020D0B1 0005 0010 E8               		dc.b $0,$5,$0,$10,$E8
0020D0B6 000C 0014 F8               		dc.b $0,$C,$0,$14,$F8
0020D0BB E80E 0018 00               		dc.b $E8,$E,$0,$18,$0
0020D0C0 E004 0024 08               		dc.b $E0,$4,$0,$24,$8
0020D0C5 0000 0026 18               		dc.b $0,$0,$0,$26,$18
0020D0CA                            		even
0020D0CA                            @frame_1:
0020D0CA 07                         		dc.b $7
0020D0CB                            
0020D0CB 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
0020D0D0 E00F 0004 E8               		dc.b $E0,$F,$0,$4,$E8
0020D0D5 0005 0014 E8               		dc.b $0,$5,$0,$14,$E8
0020D0DA 000C 0018 F8               		dc.b $0,$C,$0,$18,$F8
0020D0DF E80A 001C 08               		dc.b $E8,$A,$0,$1C,$8
0020D0E4 E000 0025 10               		dc.b $E0,$0,$0,$25,$10
0020D0E9 0000 0026 18               		dc.b $0,$0,$0,$26,$18
0020D0EE                            		even
0020D0EE                            @frame_2:
0020D0EE 07                         		dc.b $7
0020D0EF                            
0020D0EF 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
0020D0F4 E00F 0004 E8               		dc.b $E0,$F,$0,$4,$E8
0020D0F9 0005 0014 E8               		dc.b $0,$5,$0,$14,$E8
0020D0FE 000C 0018 F8               		dc.b $0,$C,$0,$18,$F8
0020D103 E007 001C 08               		dc.b $E0,$7,$0,$1C,$8
0020D108 E001 0024 18               		dc.b $E0,$1,$0,$24,$18
0020D10D F801 0026 18               		dc.b $F8,$1,$0,$26,$18
0020D112                            		even
0020D112                            		even
0020D112                             		even
0020D112                            dplcObj_EndFlag:include	"engine/modes/level/data/objects/endflag/data/plc.asm"
0020D112                            @dplc:
0020D112 0000                       		dc.w @frame_0-@dplc
0020D114 0000                       		dc.w @frame_1-@dplc
0020D116 0000                       		dc.w @frame_2-@dplc
0020D118                            @frame_0:
0020D118 0007                       		dc.w $7
0020D11A                            
0020D11A 3000                       		dc.w $3000
0020D11C B004                       		dc.w $B004
0020D11E 3010                       		dc.w $3010
0020D120 3014                       		dc.w $3014
0020D122 B018                       		dc.w $B018
0020D124 1024                       		dc.w $1024
0020D126 0026                       		dc.w $26
0020D128                            @frame_1:
0020D128 0007                       		dc.w $7
0020D12A                            
0020D12A 3027                       		dc.w $3027
0020D12C F02B                       		dc.w $F02B
0020D12E 303B                       		dc.w $303B
0020D130 303F                       		dc.w $303F
0020D132 8043                       		dc.w $8043
0020D134 004C                       		dc.w $4C
0020D136 004D                       		dc.w $4D
0020D138                            @frame_2:
0020D138 0007                       		dc.w $7
0020D13A                            
0020D13A 304E                       		dc.w $304E
0020D13C F052                       		dc.w $F052
0020D13E 3062                       		dc.w $3062
0020D140 3066                       		dc.w $3066
0020D142 706A                       		dc.w $706A
0020D144 1072                       		dc.w $1072
0020D146 1074                       		dc.w $1074
0020D146 1074                       		dc.w $1074
0020D148                            		even
0020D148                            		
0020D148                            ; ====================================================================
0020D148                            ; -------------------------------------------------
0020D148                            ; Level DATA
0020D148                            ; -------------------------------------------------
0020D148                            
0020D148                            LevelList:
0020D148 0000 0000                  		dc.l $01<<24|Lvl_Zone1		; Level data
0020D14C 0000 0000                  		dc.l Pal_LvlMain_Gray		; Palette
0020D150 0020 00F0                  		dc.w $20,$F0			; Player X/Y
0020D154 1100 0078                  		dc.w $1100,$78			; End flag X/Y
0020D158                            ; 		dc.l $01<<24|Lvl_Zone2
0020D158                            ; 		dc.l Pal_LvlMain_Gray
0020D158                            ; 		dc.w $20,$D0
0020D158                            ; 		dc.w 0,0
0020D158                            ; 		dc.l Lvl_Zone3
0020D158                            ; 		dc.l Pal_LvlMain_Gray
0020D158                            ; 		dc.w $28,$250
0020D158                            ; 		dc.w 0,0
0020D158                            ; 		dc.l Lvl_Zone1
0020D158                            ; 		dc.l Pal_LvlMain_Gray
0020D158                            ; 		dc.w $10,0
0020D158                            ; 		dc.w 0,0
0020D158                            ; 		dc.l Lvl_Zone1
0020D158                            ; 		dc.l Pal_LvlMain_Gray
0020D158                            ; 		dc.w $10,0
0020D158                            ; 		dc.w 0,0
0020D158                            ; 		even
0020D158                            		
0020D158                            artdata_Level_Test:
0020D158 0020 B000                   		dc.l art_dadou
0020D15C 6420                       		dc.w varVramDadou
0020D15E 043F                        		dc.w ((art_dadou_end-art_dadou)/4)-1
0020D160 0020 CA60                    		dc.l artObj_Ball
0020D164 44B8                       		dc.w varVramBall
0020D166 00BF                        		dc.w ((artObj_Ball_e-artObj_Ball)/4)-1
0020D168 0020 C100                   		dc.l Art_pikudo
0020D16C 04D0                       		dc.w varVramPikudo
0020D16E 0227                        		dc.w ((Art_pikudo_end-Art_pikudo)/4)-1
0020D170                             		
0020D170 0020 C9A0                   		dc.l artObj_Platform
0020D174 2530                        		dc.w varVramPlatfrm
0020D176 002F                        		dc.w ((artObj_Platform_e-artObj_Platform)/4)-1
0020D178                             		
0020D178 FFFF                        		dc.w -1
0020D17A                             		even
0020D17A                             		
0020D17A                            ; --------------------------------------------
0020D17A                            ; Levels
0020D17A                            ; --------------------------------------------
0020D17A                            
0020D17A 0118 0018                  Lvl_Zone1:	dc.w 280,24
0020D17E 0000 0000                  		dc.l @objects
0020D182 0000 0000 FFFF FFFF        		dc.l @FG_blk,-1			; Block VRAM / Prize VRAM (-1, use defaults) 
0020D18A 0000 0000 0000 0000        		dc.l @FG_lay_low,@FG_lay_hi	; Level layout hi/low
0020D192 0000 0000 0000 0000        		dc.l @FG_col,@FG_prz		; Collision / Prizes
0020D19A                            ; 		dc.w -1
0020D19A                            		
0020D19A                            @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/1/fg_lay_low.bin"
0020EBDA                             		even
0020EBDA                            @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/1/fg_lay_hi.bin"
0021061A                             		even	
0021061A                            @FG_col:	incbin	"engine/modes/level/data/layouts/main/1/fg_col.bin"
0021205A                             		even
0021205A                            @FG_prz:	incbin	"engine/modes/level/data/layouts/main/1/fg_prz.bin"
00212102                             		even 
00212102                            @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
00212902                             		even
00212902                            @objects:	include	"engine/modes/level/data/layouts/main/1/objlist.asm"
00212902 0020 61EA                  		dc.l obj_dadou
00212906 01F8 00AC                  		dc.w 504,172
0021290A 00                         		dc.b 0
0021290B 00                         		dc.b 0
0021290C                            
0021290C 0020 661A                  		dc.l obj_platform
00212910 0348 00E0                  		dc.w 840,224
00212914 00                         		dc.b 0
00212915 00                         		dc.b 0
00212916                            
00212916 0020 661A                  		dc.l obj_platform
0021291A 03E8 00F8                  		dc.w 1000,248
0021291E 01                         		dc.b 1
0021291F 00                         		dc.b 0
00212920                            
00212920 0020 63C0                  		dc.l obj_pikudo
00212924 049C 00DC                  		dc.w 1180,220
00212928 00                         		dc.b 0
00212929 00                         		dc.b 0
0021292A                            
0021292A 0020 661A                  		dc.l obj_platform
0021292E 0358 0178                  		dc.w 856,376
00212932 01                         		dc.b 1
00212933 00                         		dc.b 0
00212934                            
00212934 0020 661A                  		dc.l obj_platform
00212938 03E0 0168                  		dc.w 992,360
0021293C 00                         		dc.b 0
0021293D 00                         		dc.b 0
0021293E                            
0021293E 0020 661A                  		dc.l obj_platform
00212942 0610 00C8                  		dc.w 1552,200
00212946 01                         		dc.b 1
00212947 00                         		dc.b 0
00212948                            
00212948 0020 6AA6                  		dc.l obj_ball
0021294C 064C 0100                  		dc.w 1612,256
00212950 00                         		dc.b 0
00212951 00                         		dc.b 0
00212952                            
00212952 0020 61EA                  		dc.l obj_dadou
00212956 080C 00CC                  		dc.w 2060,204
0021295A 00                         		dc.b 0
0021295B 00                         		dc.b 0
0021295C                            
0021295C 0020 63C0                  		dc.l obj_pikudo
00212960 0648 0084                  		dc.w 1608,132
00212964 00                         		dc.b 0
00212965 00                         		dc.b 0
00212966                            
00212966 0020 6AA6                  		dc.l obj_ball
0021296A 0900 0104                  		dc.w 2304,260
0021296E 00                         		dc.b 0
0021296F 00                         		dc.b 0
00212970                            
00212970 0020 61EA                  		dc.l obj_dadou
00212974 09A8 00EC                  		dc.w 2472,236
00212978 00                         		dc.b 0
00212979 00                         		dc.b 0
0021297A                            
0021297A 0020 61EA                  		dc.l obj_dadou
0021297E 0A94 0108                  		dc.w 2708,264
00212982 00                         		dc.b 0
00212983 00                         		dc.b 0
00212984                            
00212984 0020 661A                  		dc.l obj_platform
00212988 09E8 0100                  		dc.w 2536,256
0021298C 02                         		dc.b 2
0021298D 00                         		dc.b 0
0021298E                            
0021298E 0020 61EA                  		dc.l obj_dadou
00212992 0CB8 0140                  		dc.w 3256,320
00212996 00                         		dc.b 0
00212997 00                         		dc.b 0
00212998                            
00212998 0020 61EA                  		dc.l obj_dadou
0021299C 0CC4 0080                  		dc.w 3268,128
002129A0 00                         		dc.b 0
002129A1 00                         		dc.b 0
002129A2                            
002129A2 0020 61EA                  		dc.l obj_dadou
002129A6 0BFC 00C0                  		dc.w 3068,192
002129AA 80                         		dc.b 0x80
002129AB 00                         		dc.b 0
002129AC                            
002129AC 0020 6AA6                  		dc.l obj_ball
002129B0 0F4C 0098                  		dc.w 3916,152
002129B4 00                         		dc.b 0
002129B5 00                         		dc.b 0
002129B6                            
002129B6 0020 63C0                  		dc.l obj_pikudo
002129BA 0A38 00C0                  		dc.w 2616,192
002129BE 00                         		dc.b 0
002129BF 00                         		dc.b 0
002129C0                            
002129C0 0020 63C0                  		dc.l obj_pikudo
002129C4 0FD4 0070                  		dc.w 4052,112
002129C8 00                         		dc.b 0
002129C9 00                         		dc.b 0
002129CA                            
002129CA 0020 63C0                  		dc.l obj_pikudo
002129CE 1044 0090                  		dc.w 4164,144
002129D2 00                         		dc.b 0
002129D3 00                         		dc.b 0
002129D4                            
002129D4 0020 661A                  		dc.l obj_platform
002129D8 0FD8 0168                  		dc.w 4056,360
002129DC 00                         		dc.b 0
002129DD 00                         		dc.b 0
002129DE                            
002129DE 0020 61EA                  		dc.l obj_dadou
002129E2 0DEC 00F0                  		dc.w 3564,240
002129E6 80                         		dc.b 0x80
002129E7 00                         		dc.b 0
002129E8                            
002129E8 0020 661A                  		dc.l obj_platform
002129EC 10C4 012C                  		dc.w 4292,300
002129F0 01                         		dc.b 1
002129F1 00                         		dc.b 0
002129F2                            
002129F2 0000 0000                  		dc.l 0
002129F2 0000 0000                  		dc.l 0
002129F6                             		even
002129F6                            
002129F6                            ; --------------------------------------------
002129F6                            
002129F6                            ; Lvl_Zone2:	dc.w 228,14
002129F6                            ; 		dc.l @objects
002129F6                            ; 		dc.l @FG_blk,-1			;Block VRAM / Prize VRAM (-1, use defaults) 
002129F6                            ; 		dc.l @FG_lay_low,@FG_lay_hi	;Level layout hi/low
002129F6                            ; 		dc.l @FG_col,@FG_prz		;Collision / Prizes
002129F6                            ; ; 		dc.w -1
002129F6                            ; 		
002129F6                            ; @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/2/fg_lay_low.bin"
002129F6                            ;  		even
002129F6                            ; @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/2/fg_lay_hi.bin"
002129F6                            ;  		even	
002129F6                            ; @FG_col:	incbin	"engine/modes/level/data/layouts/main/2/fg_col.bin"
002129F6                            ;  		even
002129F6                            ; @FG_prz:	incbin	"engine/modes/level/data/layouts/main/2/fg_prz.bin"
002129F6                            ;  		even 
002129F6                            ; @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
002129F6                            ;  		even
002129F6                            ; @objects:	include	"engine/modes/level/data/layouts/main/2/objlist.asm"
002129F6                            ;  		even
002129F6                             
002129F6                            ; --------------------------------------------
002129F6                            
002129F6                            ; Lvl_Zone3:	dc.w 20,40
002129F6                            ; 		dc.l @objects
002129F6                            ; 		dc.l @FG_blk,-1			;Block VRAM / Prize VRAM (-1, use defaults) 
002129F6                            ; 		dc.l @FG_lay_low,@FG_lay_hi	;Level layout hi/low
002129F6                            ; 		dc.l @FG_col,@FG_prz		;Collision / Prizes
002129F6                            ; ; 		dc.w -1
002129F6                            ; 		
002129F6                            ; @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/3/fg_lay_low.bin"
002129F6                            ;  		even
002129F6                            ; @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/3/fg_lay_hi.bin"
002129F6                            ;  		even	
002129F6                            ; @FG_col:	incbin	"engine/modes/level/data/layouts/main/3/fg_col.bin"
002129F6                            ;  		even
002129F6                            ; @FG_prz:	incbin	"engine/modes/level/data/layouts/main/3/fg_prz.bin"
002129F6                            ;  		even 
002129F6                            ; @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
002129F6                            ;  		even
002129F6                            ; @objects:	include	"engine/modes/level/data/layouts/main/3/objlist.asm"
002129F6                            ;  		even
002129F6                            
002129F6                            ; --------------------------------------------
002129F6                            
002129F6                            Pal_LvlMain_Gray:
002129F6                            		incbin	"engine/modes/level/data/layouts/main/lvl_pal.bin"
00212A16                            		incbin	"engine/modes/level/data/layouts/main/bg_pal.bin"
00212A36                            		even
00212A36                            		
00212A36                            Art_Lvl_Test:	incbin	"engine/modes/level/data/layouts/main/lvl_art.bin"
00216096                            Art_Lvl_Test_e:	even
00216096                            
00216096                            Art_LvlBG_Test:	incbin	"engine/modes/level/data/layouts/main/bg_art.bin"
0021AC56                            Art_LvlBG_Test_e:
0021AC56                            		even
0021AC56                            Map_LvlBG_Test:	incbin	"engine/modes/level/data/layouts/main/bg_map.bin"
0021BC56                            Map_LvlBG_Test_e:
0021BC56                            		even
0021BC56                            		
0021BC56                            ; --------------------------------------------
0021BC56                            
0021BC56                            Art_LvlPrizes:	incbin	"engine/modes/level/data/layouts/prizes_art.bin"
0021C856                            		even
0021C856                            Art_LvlPrizes_e:
0021C856                            
0021C856                            Pal_LvlCoinItms	incbin	"engine/modes/level/data/layouts/lvlitems_pal.bin"
0021C876                            		even
0021C876                            		
0021C876                            ; ====================================================================
0021C876                            ; -------------------------------------------------
0021C876                            ; Sound data
0021C876                            ; -------------------------------------------------
0021C876                            
0021C876                            ; --------------------------
0021C876                            ; MUSIC level 1
0021C876                            ; --------------------------
0021C876                            
0021C876                            Music_Level1:
0021C876 0B02                       		dc.b 11,2
0021C878 0000 0000                  		dc.l @notes
0021C87C 0000 0000                       		dc.l @ins
0021C880 000A                            		dc.w 10
0021C882 0040 800F                        		dc.b FM_1,64,$80,$0F
0021C886 0140 800F                        		dc.b FM_2,64,$80,$0F
0021C88A 0240 800F                        		dc.b FM_3,64,$80,$0F
0021C88E 0440 800F                  		dc.b FM_4,64,$80,$0F
0021C892 0540 800F                  		dc.b FM_5,64,$80,$0F
0021C896 0640 800F                   		dc.b FM_6,64,$80,$0F
0021C89A 8040 800F                   		dc.b PSG_1,64,$80,$0F
0021C89E A040 800F                   		dc.b PSG_2,64,$80,$0F
0021C8A2 C040 800F                   		dc.b PSG_3,64,$80,$0F
0021C8A6 E040 800F                   		dc.b NOISE,64,$80,$0F
0021C8AA                             		even
0021C8AA                            @notes:		incbin "engine/sound/music/level0.it",$50+$11B
0021DF90                                  		even
0021DF90 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins
0021DF96                            		even
0021DF96                            		
0021DF96 0001 0000                  @ymha: 		dc.w 1,0
0021DF9A 0000 0000                  		dc.l fmBass_jazz
0021DF9E 0042 0000                  		dc.w 2|$40,0
0021DFA2 0000 0000                  		dc.l fm3drum_tick
0021DFA6 38AB 3457                  		dc.w $00AB|$3800,$0457|$3000
0021DFAA 3511 2336                  		dc.w $0511|$3000,$0336|$2000
0021DFAE 0083 FFE8                    		dc.w 3|$80,-24
0021DFB2 0000 0000                    		dc.l wav_stKick
0021DFB6 0000 0000                   		dc.l wav_stKick_e
0021DFBA FFFF FFFF                   		dc.l -1
0021DFBE 0084 FFE8                    		dc.w 4|$80,-24
0021DFC2 0000 0000                    		dc.l wav_stSnare
0021DFC6 0000 0000                   		dc.l wav_stSnare_e
0021DFCA FFFF FFFF                   		dc.l -1
0021DFCE FFFF                       		dc.w -1
0021DFD0                            		even
0021DFD0                            
0021DFD0 0005 0004                  @noise: 	dc.w 5,%100
0021DFD4 FFFF                       		dc.w -1
0021DFD6                            		even
0021DFD6                            	
0021DFD6                            ; --------------------------
0021DFD6                            ; SFX: 1up
0021DFD6                            ; --------------------------
0021DFD6                            
0021DFD6 00FF                       SndSfx_OneUp:	dc.b 0,-1
0021DFD8 0000 0000                  		dc.l @pattr
0021DFDC 0000 0000                       		dc.l @ins
0021DFE0 0002                            		dc.w 2
0021DFE2 A040 800F                        		dc.b PSG_2,64,$80,$F
0021DFE6 C040 800F                        		dc.b PSG_3,64,$80,$F
0021DFEA                            @pattr:		incbin "engine/sound/sfx/oneup.it",$50+$DC
0021E10A                            		even
0021E10A FFFF FFFF FFFF FFFF        @ins: 		dc.w -1,-1,-1,-1
0021E112                            		even
0021E112                            				
0021E112                            ; --------------------------
0021E112                            ; SFX: BONK
0021E112                            ; --------------------------
0021E112                            
0021E112 00FF                       SndSfx_BONK:	dc.b 0,-1
0021E114 0000 0000                  		dc.l @pattern
0021E118 0000 0000                       		dc.l @instruments
0021E11C 0003                            		dc.w 3
0021E11E 0540 800E                        		dc.b FM_5,64,$80,%1110
0021E122 0640 800F                        		dc.b FM_6,64,$80,$F
0021E126 A040 800F                        		dc.b PSG_2,64,$80,$F
0021E12A                            @pattern:	incbin "engine/sound/sfx/bonk.it",$50+$FC+$28
0021E1CC                                  		even
0021E1CC                            
0021E1CC 0000                       @instruments: 	dc.w @ymha-@instruments
0021E1CE FFFF                       		dc.w -1
0021E1D0 0000                       		dc.w @noise-@instruments
0021E1D2 FFFF                       		dc.w -1
0021E1D4                            		even
0021E1D4                            		
0021E1D4 0002 0000                  @ymha: 		dc.w 2,0
0021E1D8 0000 0000                     		dc.l FMSfx_Bump
0021E1DC                            
0021E1DC 0083 FFF0                     		dc.w $80|3,-16
0021E1E0 0000 0000                     		dc.l WAVE_lwpnch
0021E1E4 0000 0000                     		dc.l WAVE_lwpnch_e
0021E1E8 FFFF FFFF                     		dc.l -1
0021E1EC                               		
0021E1EC FFFF                       		dc.w -1	;EOL
0021E1EE                            		even
0021E1EE 0002 0005                  @noise: 	dc.w 2,%101
0021E1F2 FFFF                       		dc.w -1
0021E1F4                            		even
0021E1F4                            		
0021E1F4                            ; --------------------------
0021E1F4                            ; SFX: Bonk a coin
0021E1F4                            ; --------------------------
0021E1F4                            
0021E1F4                            SndSfx_BonkCoin:
0021E1F4 00FF                       		dc.b 0,-1
0021E1F6 0000 0000                  		dc.l @pattern
0021E1FA 0000 0000                       		dc.l @instruments
0021E1FE 0004                            		dc.w 4
0021E200 0540 800E                        		dc.b FM_5,64,$80,%1110
0021E204 0640 800F                        		dc.b FM_6,64,$80,$F
0021E208 A040 800F                        		dc.b PSG_2,64,$80,$F
0021E20C C040 800F                        		dc.b PSG_3,64,$80,$F
0021E210                            @pattern:	incbin "engine/sound/sfx/bonkcoin.it",$50+$12C
0021E2DC 00                               		even
0021E2DC                            
0021E2DC 0000                       @instruments: 	dc.w @ymha-@instruments
0021E2DE FFFF                       		dc.w -1
0021E2E0 0000                       		dc.w @noise-@instruments
0021E2E2 FFFF                       		dc.w -1
0021E2E4                            		even
0021E2E4                            		
0021E2E4 0002 0000                  @ymha: 		dc.w 2,0
0021E2E8 0000 0000                     		dc.l FMSfx_Bump
0021E2EC                            
0021E2EC 0083 FFF0                     		dc.w $80|3,-16
0021E2F0 0000 0000                     		dc.l WAVE_lwpnch
0021E2F4 0000 0000                     		dc.l WAVE_lwpnch_e
0021E2F8 FFFF FFFF                     		dc.l -1
0021E2FC                               		
0021E2FC FFFF                       		dc.w -1	;EOL
0021E2FE                            		even
0021E2FE 0002 0005                  @noise: 	dc.w 2,%101
0021E302 FFFF                       		dc.w -1
0021E304                            		even
0021E304                            		
0021E304                            ; --------------------------
0021E304                            ; SFX: PUM
0021E304                            ; --------------------------
0021E304                            
0021E304                            SndSfx_PUM:
0021E304 00FF                       		dc.b 0,-1
0021E306 0000 0000                  		dc.l @pattern
0021E30A 0000 0000                       		dc.l @instruments
0021E30E 0003                            		dc.w 3
0021E310 0540 800F                        		dc.b FM_5,64,$80,$0F
0021E314 E040 800F                        		dc.b NOISE,64,$80,$0F
0021E318 0640 800F                        		dc.b FM_6,64,$80,$0F
0021E31C                            @pattern:	incbin "engine/sound/sfx/blkbump.it",$F4+$50+$20
0021E3BE                                  		even
0021E3BE                            
0021E3BE 0000                       @instruments:	dc.w @ymha-@instruments
0021E3C0 FFFF                       		dc.w -1
0021E3C2 0000                       		dc.w @noise-@instruments
0021E3C4                            		even
0021E3C4                            
0021E3C4 0001 0000                  @ymha: 		dc.w 1,0
0021E3C8 0000 0000                     		dc.l FMSfx_Punch
0021E3CC                               		
0021E3CC 0083 0000                     		dc.w $80|3,0
0021E3D0 0000 0000                     		dc.l WAVE_lwpnch
0021E3D4 0000 0000                     		dc.l WAVE_lwpnch_e
0021E3D8 FFFF FFFF                     		dc.l -1
0021E3DC                               		
0021E3DC FFFF                       		dc.w -1	;EOL
0021E3DE                            		even
0021E3DE                            @noise:
0021E3DE 0002 0006                   		dc.w 2,%110
0021E3E2 FFFF                       		dc.w -1
0021E3E4                            		even
0021E3E4                            
0021E3E4                            ; --------------------------
0021E3E4                            ; SFX: PING
0021E3E4                            ; --------------------------
0021E3E4                            
0021E3E4                            SndSfx_PING:
0021E3E4 00FF                       		dc.b 0,-1
0021E3E6 0000 0000                  		dc.l @notes
0021E3EA 0000 0000                       		dc.l @ins
0021E3EE 0002                            		dc.w 2
0021E3F0 E040 800F                        		dc.b NOISE,64,$80,$0F
0021E3F4 0640 800F                        		dc.b FM_6,64,$80,$0F
0021E3F8                            @notes:		incbin "engine/sound/sfx/pingball.it",$50+$DC
0021E492                                  		even
0021E492 0000                       @ins: 		dc.w @ymha-@ins
0021E494 FFFF                       		dc.w -1
0021E496 0000                       		dc.w @noise-@ins
0021E498                            		even
0021E498                            @noise:
0021E498 0001 0004                   		dc.w 1,%100
0021E49C FFFF                       		dc.w -1
0021E49E                            		even
0021E49E                            @ymha:
0021E49E 0081 0000                  		dc.w $80|1,0
0021E4A2 0000 0000                  		dc.l WAVE_sfxBall
0021E4A6 0000 0000                  		dc.l WAVE_sfxBall_e
0021E4AA FFFF FFFF                  		dc.l -1
0021E4AE                            		
0021E4AE FFFF                       		dc.w -1
0021E4B0                            		even
0021E4B0                            		
0021E4B0                            ; --------------------------
0021E4B0                            ; SFX: COIN
0021E4B0                            ; --------------------------
0021E4B0                            
0021E4B0                            SndSfx_COIN:
0021E4B0 00FF                       		dc.b 0,-1
0021E4B2 0000 0000                  		dc.l @notes
0021E4B6 0000 0000                       		dc.l @ins
0021E4BA 0002                            		dc.w 2
0021E4BC 8040 800F                        		dc.b PSG_1,64,$80,$F
0021E4C0 A040 800F                        		dc.b PSG_2,64,$80,$F
0021E4C4                            @notes:		incbin "engine/sound/sfx/coin.it",$50+$D4+8
0021E56A                                  		even
0021E56A FFFF                       @ins: 		dc.w -1
0021E56C FFFF                       		dc.w -1
0021E56E FFFF                       		dc.w -1
0021E570                            		even
0021E570                            		
0021E570                            ; --------------------------
0021E570                            ; SFX: COIN
0021E570                            ; --------------------------
0021E570                            
0021E570                            SndSfx_BEEBUZZ:
0021E570 00FF                       		dc.b 0,-1
0021E572 0000 0000                  		dc.l @notes
0021E576 0000 0000                       		dc.l @ins
0021E57A 0001                            		dc.w 1
0021E57C 0540 800F                        		dc.b FM_5,64,$80,$F
0021E580                            @notes:		incbin "engine/sound/sfx/beebuzz.it",$50+$D4
0021E630                                  		even
0021E630 0000                       @ins: 		dc.w @ymha-@ins
0021E632 FFFF                       		dc.w -1
0021E634 FFFF                       		dc.w -1
0021E636                            		even
0021E636                            @ymha:
0021E636 0001 0000                  		dc.w 1,0
0021E63A 0000 0000                  		dc.l fmSfx_BUZZ
0021E63E FFFF FFFF                  		dc.l -1
0021E642                            		
0021E642 FFFF                       		dc.w -1
0021E644                            		even
0021E644                            		
0021E644                            ; --------------------------
0021E644                            ; SFX: COIN
0021E644                            ; --------------------------
0021E644                            
0021E644                            SndSfx_PlyrJump:
0021E644 00FF                       		dc.b 0,-1
0021E646 0000 0000                  		dc.l @notes
0021E64A 0000 0000                       		dc.l @ins
0021E64E 0001                            		dc.w 1
0021E650 E040 800F                        		dc.b NOISE,64,$80,$F
0021E654                            @notes:		incbin "engine/sound/sfx/plyrjump.it",$50+$DC
0021E704 00                               		even
0021E704 FFFF FFFF 0000             @ins:		dc.w -1,-1,@noise-@ins
0021E70A 0001 0004                  @noise:		dc.w 1,%100
0021E70E                            		even
0021E70E                               
0021E70E                            ; --------------------------
0021E70E                            ; SFX: COIN
0021E70E                            ; --------------------------
0021E70E                            
0021E70E                            SndSfx_HitEnemy:
0021E70E 00FF                       		dc.b 0,-1
0021E710 0000 0000                  		dc.l @notes
0021E714 0000 0000                  		dc.l @ins
0021E718 0002                       		dc.w 2
0021E71A 0640 800F                  		dc.b FM_6,64,$80,$F
0021E71E E040 800F                  		dc.b NOISE,64,$80,$F
0021E722                            @notes:		incbin "engine/sound/sfx/bumpenemy.it",$50+$D4
0021E7CE 00                         		even
0021E7CE 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins
0021E7D4 0001 0000                  @ymha:		dc.w 1,0
0021E7D8 0000 0000                  		dc.l FMSfx_Punch
0021E7DC 0002 0006                  @noise:		dc.w 2,%110
0021E7E0                            		
0021E7E0                            ; --------------------------
0021E7E0                            ; instruments
0021E7E0                            ; --------------------------
0021E7E0                            
0021E7E0                            fmBass_jazz:	incbin	"engine/sound/instruments/FM/bass/bass_jazz.bin"
0021E7FA 00                         		even
0021E7FA                            fm3drum_tick: 	incbin	"engine/sound/instruments/fm/drums/fm3_tick.bin"
0021E814 00                         		even
0021E814                            		
0021E814                            FMSfx_Punch:	incbin	"engine/sound/instruments/FM/fmsfx_boomlong.bin"
0021E82E 00                         		even
0021E82E                            FMSfx_Bump:	incbin	"engine/sound/instruments/FM/fmsfx_bump.bin"
0021E848 00                         		even
0021E848                            fmSfx_BUZZ:	incbin	"engine/sound/instruments/FM/old/socket_voiceset.bin",$19*18,$19
0021E862 00                         		even
0021E862                            		
0021E862                            WAVE_lwbonk:	incbin	"engine/sound/instruments/DAC/sfxbonk.wav",$2C
0021FD28 00                         WAVE_lwbonk_e:	even
0021FD28                            WAVE_lwpnch:	incbin	"engine/sound/instruments/DAC/sfxhithard.wav",$2C
002218E0 00                         WAVE_lwpnch_e:	even
002218E0                            WAVE_sfxBall:	incbin	"engine/sound/instruments/DAC/sfxBallTick.wav",$2C
00223834                            WAVE_sfxBall_e:	even
00223834                            wav_stKick:	incbin	"engine/sound/instruments/DAC/stKick.wav",$2C
0022481C                            wav_stKick_e:	even
0022481C                            wav_stSnare:	incbin	"engine/sound/instruments/DAC/stSnare.wav",$2C
0022691C                            wav_stSnare_e:	even
0022691C                            wav_stSnare_e:	even
0022691C                            		
0022691C                            		;SOLO PARA MCD
0022691C                            Art_DebugFont:	incbin "engine/shared/dbgfont.bin"
0022791C                            Art_DebugFont_e:
0022791C                                            even
0022791C                            
0022791C                            ; ====================================================================	
0022791C                            
0022791C                            		inform 0,"LEVEL MODE ROM uses: %h",*-$200000
0022791C                            		objend
0002791C                            		align $40000
