00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; CD GAME
00000000                            ; -------------------------------------------------
00000000                            
00000000                            		include	"system/macros.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Macros
00000000                            ; -------------------------------------------------
00000000                            
00000000                            align		macro
00000000                            		cnop 0,\1
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Pick ROM section
00000000                            ; --------------------------------------------
00000000                            
00000000                            romSection	macro where
00000000                            CODE		=	*+$880000
00000000                            DATA		=	*+marsbank
00000000                            RAM		=	$FF0000
00000000                            WRAM		=	$200000
00000000                            ; ---------------------------
00000000                            		if MCD|MARS == True
00000000                            		obj \1
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; ---------------------------
00000000                            
00000000                            romSectionEnd	macro
00000000                            		if MCD
00000000                            		objend
00000000                            		elseif MARS
00000000                            		objend
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Video
00000000                            ; --------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; dmaTask
00000000                            ; --------------------------------------------
00000000                            
00000000                            dmaTask		macro
00000000                            FILL		=	$C0000000+1
00000000                            COPY		=	$C0000000+2
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA FILL
00000000                            ; (FILL,byte,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		if \1=FILL
00000000                            		
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                            		move.w	#$9780,(vdp_ctrl)
00000000                            		move.l	#\3|$80,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait1\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait1\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA COPY
00000000                            ; (COPY,from,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		elseif \1=COPY
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\2>>1)&$FF00)>>8)|(($9500+((\2>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$97C0,(vdp_ctrl)
00000000                            		move.l	#\3|$C0,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait2\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait2\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA ROM/RAM to VDP
00000000                            ; (from,to,size)
00000000                            ; ---------------------------
00000000                            		else
00000000                            		;\1 from | \2 to | \3 size
00000000                             		move.l	#$9400+(((\3)&$FF00)>>9)|(($9300+(((\3)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\1>>1)&$FF00)>>8)|(($9500+((\1>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(vdp_ctrl)
00000000                            		
00000000                            ; 		move.l	#\2|$80,(vdp_ctrl)		;new attempt
00000000                            		move.w	#((\2&$FFFF))|$80,-(sp)
00000000                            		move.w	#(((\2)>>16)&$FFFF),-(sp)
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#$100,($A11100)
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100)
00000000                              		bne.s	@WaitZ80_\@
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#0,($A11100).l
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            
00000000                            fade		macro
00000000                            in = 1
00000000                            out = 0
00000000                            		if \1=in
00000000                             		move.l	#$0101003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		elseif \1=out
00000000                            		
00000000                            		move.l	#$0201003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            ; System
00000000                            ; --------------------------------------------
00000000                            
00000000                            z80		macro
00000000                            ON = 1
00000000                            OFF = 0
00000000                            		if \1=OFF
00000000                            		
00000000                             		move.w	#$100,($A11100).l
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100).l
00000000                              		bne.s	@WaitZ80_\@
00000000                            		elseif \1=ON
00000000                            		
00000000                              		move.w	#0,($A11100).l
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            		
00000000                            		include	"system/ram.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; RAM
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; ---------------------------
00000000                            ; Setup
00000000                            ; ---------------------------
00000000                            
00000000                                            rsset	$FFFFBC00
00000000 =FFFFBC00                  RAM_ModeBuffer	rs.b	$2000
00000000 =FFFFDC00                  RAM_Engine      rs.b	$200
00000000 =FFFFDE00                  RAM_System      rs.b	$80
00000000 =FFFFDE80                  RAM_Input	rs.b	$80
00000000 =FFFFDF00                  RAM_Video       rs.b	$1000
00000000 =FFFFEF00                  RAM_Audio       rs.b	$400
00000000 =FFFFF300                  endof_ram	rs.l	0
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            		include	"system/hardware/map.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Variables
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; I/O
00000000                            ; --------------------------------------------
00000000                            
00000000 =00A10001                  port_ver	equ	$A10001
00000000 =00A14000                  port_tmss	equ	$A14000
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; VDP
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00000                  vdp_data	equ	$C00000
00000000 =00C00004                  vdp_ctrl	equ	$C00004
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MD Audio
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00011                  sound_psg	equ	$C00011
00000000 =00A04000                  sound_ym_1	equ	$A04000
00000000 =00A04001                  sound_ym_2	equ	$A04001
00000000 =00A04002                  sound_ym_3	equ	$A04002
00000000 =00A04003                  sound_ym_4	equ	$A04003
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MARS only
00000000                            ; --------------------------------------------
00000000                            
00000000 =00840000                  framebuffer	equ	$840000
00000000 =00860000                  overwrite	equ	$860000
00000000 =00880000                  marsipl		equ	$880000
00000000 =00900000                  marsbank	equ	$900000
00000000 =00A130EC                  mars_ID		equ	$a130ec		; MARS ID "MARS"
00000000                            
00000000 =00A15100                  marsreg		equ	$a15100
00000000 =00000000                  access		equ	$00		; byte		; MARS VDP access control
00000000 =00000001                  adapter		equ	$01		; byte		; MARS adapter control
00000000 =00000003                  intctl		equ	$03		; byte		; SH2 interrupt control
00000000 =00000005                  bankctl		equ	$05		; byte		; BANK conterol
00000000 =00000007                  dreqctl		equ	$07		; byte		; DREQ control
00000000 =00000008                  dreqsource	equ	$08		; long		; 68 to SH DREQ source address
00000000 =0000000C                  dreqdest	equ	$0c		; long		; 68 to SH DREQ destination address
00000000 =00000010                  dreqlength	equ	$10		; word		; 68 to SH DREQ length
00000000 =00000012                  dreqfifo	equ	$12		; word		; 68 to SH DREQ FIFO
00000000 =0000001B                  segatv		equ	$1b		; byte		; SEGA TV Reg.
00000000 =00000020                  comm0		equ	$20		; 		; Communcation Reg.
00000000 =00000022                  comm2		equ	$22		; 		; Communcation Reg.
00000000 =00000024                  comm4		equ	$24		; 		; Communcation Reg.
00000000 =00000026                  comm6		equ	$26		; 		; Communcation Reg.
00000000 =00000028                  comm8		equ	$28		; 		; Communcation Reg.
00000000 =00000029                  comm9		equ	$29		; 		; Communcation Reg.
00000000 =0000002A                  comm10		equ	$2a		; 		; Communcation Reg.
00000000 =0000002C                  comm12		equ	$2c		; 		; Communcation Reg.
00000000 =0000002E                  comm14		equ	$2e		; 		; Communcation Reg.
00000000                            
00000000 =00000080                  tvmode		equ	$80		; byte		; NTSC/PAL
00000000 =00000081                  bitmapmode	equ	$81		; byte		; BitMap Mode Reg.
00000000 =00000083                  shift		equ	$83		; byte		; Packed Pixel Dot Shift
00000000 =00000085                  filllength	equ	$85		; byte		; DRAM Fill Length
00000000 =00000086                  fillstart	equ	$86		; word		; DRAM Fill Start Address
00000000 =00000088                  filldata	equ	$88		; word		; DRAM Fill Data
00000000 =0000008A                  vdpsts		equ	$8a		; byte		; VDP status
00000000 =0000008B                  framectl	equ	$8b		; byte		; Frame Buffer Control
00000000                            
00000000 =00A15200                  palette		equ	$a15200		; 256 words	; Palette Data
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; OTHER
00000000                            ; --------------------------------------------
00000000                            
00000000                            		include	"system/hardware/mcd/map.asm"
00000000                            ; =================================================================
00000000                            ; ----------------------------------------
00000000                            ; Shared vars
00000000                            ; ----------------------------------------
00000000                            
00000000                            ; -------------
00000000                            ; bits
00000000                            ; -------------
00000000                            
00000000 =00000002                  bitWRamMode	equ	2		;2M | 1M
00000000                            
00000000                            ; -------------
00000000                            ; Registers
00000000                            ; -------------
00000000                            
00000000 =00000002                  MemoryMode	equ	$02		;WORD
00000000 =0000000E                  CommMain	equ	$0E		;BYTE
00000000 =0000000F                  CommSub		equ	$0F		;BYTE
00000000 =00000010                  CommDataM	equ	$10		;Array (size: $E)
00000000 =00000020                  CommDataS	equ	$20		;Array (size: $E)
00000000                            
00000000                            ; =================================================================
00000000                            ; ----------------------------------------
00000000                            ; MAIN CPU ONLY
00000000                            ; ----------------------------------------
00000000                            
00000000 =FFFF6600                  RAM_CdShared	equ	$FFFF6600
00000000                            
00000000                            		rsset   RAM_CdShared
00000000 =FFFF6600                  RAM_Wait_Buff	rs.b	$40
00000000 =FFFF6640                  RAM_Wait_Code	rs.b	$180
00000000 =FFFF67C0                  RAM_GoToHint	rs.w	3		; Sega CD HBlank jump ( jmp (thisaddr).l )
00000000                            
00000000 =00006600                  sizeof_prg	equ	$6600
00000000                            
00000000                            ; =================================================================
00000000                            ; ----------------------------------------
00000000                            ; SUB CPU ONLY
00000000                            ; ----------------------------------------
00000000                            
00000000                            ; -------------
00000000                            ; PCM
00000000                            ; -------------
00000000                            
00000000 =00FF0000                  PCM		equ	$FF0000
00000000 =00000001                  ENV		equ	$01		; Envelope
00000000 =00000003                  PAN		equ	$03		; Panning (%RRRRLLLL, and negative)
00000000 =00000005                  FDL		equ	$05		; Sample rate $00xx
00000000 =00000007                  FDH		equ	$07		; Sample rate $xx00
00000000 =00000009                  LSL		equ	$09		; Loop address $xx00
00000000 =0000000B                  LSH		equ	$0B		; Loop address $00xx
00000000 =0000000D                  ST		equ	$0D		; Start address (only $x0, $x000)
00000000 =0000000F                  Ctrl		equ	$0F		; Control register ($80 - Bank select, $C0 - Channel select)
00000000 =00000011                  OnOff		equ	$11		; Channel On/Off (BITS: 1 - off, 0 - on)
00000000                            
00000000                            ; =================================================================
00000000                            ; =================================================================
00000000                            		
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Header / Init
00000000                            ; -------------------------------------------------
00000000                            
00000000                            		include	"system/hardware/mcd/m68k/head.asm"
00000000                            ; ========================================================
00000000                            ;  Sega CD Program
00000000                            ; ========================================================
00000000                            
00000000 5345 4741 4449 5343 5359+  		dc.b "SEGADISCSYSTEM  "		; Disc Type (Must be SEGADISCSYSTEM)
00000010 4B41 5241 5355 4349 4130+  		dc.b "KARASUCIA01",0		; Disc ID
0000001C 0100 0001                  		dc.w $100,1			; System ID, Type
00000020 4B41 5241 2D53 5953 2020+  		dc.b "KARA-SYS   ",0		; System Name
0000002C 0000 0000                  		dc.w 0,0			; System Version, Type
00000030 0000 0000                  		dc.l IP_Start
00000034 0000 0000                  		dc.l IP_End
00000038 0000 0000                  		dc.l 0
0000003C 0000 0000                  		dc.l 0
00000040 0000 0000                  		dc.l SP_Start
00000044 0000 0000                  		dc.l SP_End
00000048 0000 0000                  		dc.l 0
0000004C 0000 0000                  		dc.l 0
00000050                            
00000050 0000 0000 0000 0000 0000+  		align $100			; Pad to $100
00000100 5345 4741 204D 4547 4120+  		dc.b "SEGA MEGA DRIVE "
00000110 2843 2947 4636 3420 3230+  		dc.b "(C)GF64 2016.???"
00000120 4C61 7320 6176 656E 7475+  		dc.b "Las aventuras de Dominoe                        "
00000150 446F 6D69 6E6F 6520 4164+                  dc.b "Dominoe Adventures                              "
00000180 474D 2048 4F4D 4542 5245+  		dc.b "GM HOMEBREW-00  "
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               "
000001A0                            		
000001A0 0000 0000 0000 0000 0000+  		align $1F0
000001F0 5520 2020 2020 2020 2020+  		dc.b "U               "
00000200                            
00000200                            ; ========================================================
00000200                            ; -------------------------------------------------
00000200                            ; IP
00000200                            ; -------------------------------------------------
00000200                            
00000200                            		incbin "system/hardware/mcd/m68k/region/usa.bin"
00000784                            
00000784 6000 0000                  		bra	IP_Start
00000788 0000 0000 0000 0000 0000+  		align $800
00000800                            IP_Start:
00000800                            		include "system/hardware/mcd/m68k/boot.asm"
00000800                            ; =====================================================================
00000800                            ; Main CPU
00000800                            ; =====================================================================
00000800                            ; -------------------------------------------
00000800                            ; Variables
00000800                            ; -------------------------------------------
00000800                            
00000800 =00A12000                  ThisCpu		= $A12000
00000800 =00000000                  CD_PrgRamMode	= 0
00000800                            
00000800 =FFFF8800                  RAM_McdLoop	equ $FFFF8800
00000800                            
00000800                            ; =====================================================================
00000800                            ; -------------------------------------------
00000800                            ; Include
00000800                            ; -------------------------------------------
00000800                            
00000800                            ; =====================================================================
00000800                            ; -------------------------------------------
00000800                            ; Init
00000800                            ; -------------------------------------------
00000800                            
00000800                            ;  		obj $FFFF0600
00000800 08F9 0001 00A1 2003        		bset	#1,($A12003)			; Give WordRAM to Sub CPU
00000808                            @initloop:		
00000808 4A39 00A1 200F             		tst.b	($A1200F)			; Has sub CPU finished init?
0000080E 6600 FFF8                  		bne	@initloop			; if not, branch
00000812                            
00000812 46FC 2700                  		move.w	#$2700,sr
00000816                             		
00000816 23FC 0000 0020 00C0 0004    		move.l	#$00000020,(vdp_ctrl)		;Copy CRAM to PalBuffer
00000820 43F9 0000 0000              		lea	(RAM_Palette),a1
00000826 303C 003F                   		move.w	#$3F,d0
0000082A                            @CopyPal:
0000082A 32F9 00C0 0000              		move.w	(vdp_data),(a1)+
00000830 51C8 FFF8                   		dbf	d0,@CopyPal
00000834 23FC 4000 0010 00C0 0004    		move.l	#$40000010,(vdp_ctrl).l
0000083E 42B9 00C0 0000              		clr.l	(vdp_data).l
00000844                             		
00000844 41FA 0000                      		lea	MD_RAM_LOOP(pc),a0
00000848 43F9 FFFF 8800                 		lea	(RAM_McdLoop),a1
0000084E 303C 0000                      		move.w	#(MD_RAM_LOOP_e-MD_RAM_LOOP),d0
00000852                            @ClrWaitRam:
00000852 12D8                          		move.b	(a0)+,(a1)+
00000854 51C8 FFFC                      		dbf	d0,@ClrWaitRam
00000858                            		
00000858 23FC FFFF 8800 FFFF FD08       		move.l	#RAM_McdLoop,($FFFFFD08)
00000862 13FC 0074 0000 0000             		move.b	#$74,(RAM_VidRegs+1)
0000086A                            
0000086A                            ;   		move.w	#$2000,sr
0000086A                            ;  		fade	out
0000086A                            
0000086A 46FC 2700                   		move.w	#$2700,sr
0000086E                            ;  		move.l	#vdp_data00,(vdp_ctrl)
0000086E                            ;  		move.w	#$0E0,(vdp_data)
0000086E                            ;  		bra.s	*
0000086E                             		
0000086E 4EF9 0000 0000             		jmp	MD_Main
00000874                             		
00000874                            ; =====================================================================
00000874                            ; -------------------------------------------
00000874                            ; RAM Loop
00000874                            ; -------------------------------------------
00000874                            
00000874                            MD_RAM_LOOP:
00000874                            		obj $FFFF8800
FFFF8800                            		include	"engine/mcd.asm"
FFFF8800                            ; ====================================================================
FFFF8800                            ; Main engine at RAM
FFFF8800                            ; ====================================================================
FFFF8800                            
FFFF8800                            ; ====================================================================
FFFF8800                            ; -------------------------------------------------
FFFF8800                            ; Call routines from anywhere in MCD
FFFF8800                            ; -------------------------------------------------
FFFF8800                            
FFFF8800 4EF9 0000 0000             		jmp	(MD_Vint).l
FFFF8806 4EF9 0000 0000             		jmp	(MD_Hint).l
FFFF880C 4EF9 0000 0000             		jmp	(SubCpu_Task_Wait).l
FFFF8812 4EF9 0000 0000             		jmp	(SubCpu_Task).l
FFFF8818 4EF9 0000 0000             		jmp	(SubCpu_Wait).l
FFFF881E 4EF9 0000 0000             		jmp	(SubCpu_Wait_Flag).l
FFFF8824 4EF9 0000 0000             		jmp	(Input_Read).l
FFFF882A 4EF9 FFFF 0000             		jmp	$FFFF0000
FFFF8830                            		
FFFF8830                            ; ====================================================================
FFFF8830                            ; -------------------------------------------------
FFFF8830                            ; Engine Main loop
FFFF8830                            ; -------------------------------------------------
FFFF8830                            
FFFF8830                            MD_Main:
FFFF8830 46FC 2700                   		move.w	#$2700,sr
FFFF8834 6100 0000                  		bsr	System_Init		; init System
FFFF8838 6100 0000                  		bsr	Video_Init		; init Video
FFFF883C 6100 0000                  		bsr	Audio_Init		; init Audio
FFFF8840 6100 0000                   		bsr	Input_Init		; init Input devices
FFFF8844                            		
FFFF8844                            ; -------------------------------------------------
FFFF8844                            
FFFF8844 4239 0000 0000              		clr.b	(RAM_GameMode)
FFFF884A 46FC 2000                   		move.w	#$2000,sr
FFFF884E                            		
FFFF884E                            @LOOP:
FFFF884E 7000                       		moveq	#0,d0
FFFF8850 1039 0000 0000              		move.b	(RAM_GameMode),d0
FFFF8856 E948                        		lsl.w	#4,d0
FFFF8858 41FA 0000                  		lea	mode_list(pc),a0
FFFF885C 2230 0004                    		move.l	4(a0,d0.w),d1
FFFF8860 2430 0008                    		move.l	8(a0,d0.w),d2
FFFF8864 2030 0000                    		move.l	(a0,d0.w),d0
FFFF8868 6100 0000                    		bsr	Load_PrgWord
FFFF886C 4EB9 0020 0000               		jsr	($200000)
FFFF8872                             		
FFFF8872 60DA                       		bra.s	@LOOP
FFFF8874                            		
FFFF8874                            Return:
FFFF8874 4E75                       		rts
FFFF8876                            		
FFFF8876                            ; ====================================================================
FFFF8876                            ; -------------------------------------------------
FFFF8876                            ; Data
FFFF8876                            ; -------------------------------------------------
FFFF8876                            
FFFF8876                            mode_list:
FFFF8876 5052 475F 5449 544C 2E42+  		dc.b	"PRG_TITL.BIN"
FFFF8882 0000 0000                  		dc.w	0,0
FFFF8886 5052 475F 4C45 564C 2E42+  		dc.b	"PRG_LEVL.BIN"
FFFF8892 0000 0000                  		dc.w	0,0
FFFF8896                            		
FFFF8896                            ; ====================================================================
FFFF8896                            ; -------------------------------------------------
FFFF8896                            ; Subs
FFFF8896                            ; -------------------------------------------------
FFFF8896                            
FFFF8896                            		include	"system/video.asm"
FFFF8896                            ; ====================================================================
FFFF8896                            ; VDP
FFFF8896                            ; ====================================================================
FFFF8896                            
FFFF8896                            ; -------------------------------------------------
FFFF8896                            ; Variables
FFFF8896                            ; -------------------------------------------------
FFFF8896                            
FFFF8896                            		rsreset
FFFF8896 =00000000                  palFd_mode	rs.b 1
FFFF8896 =00000001                  palFd_delay	rs.b 1
FFFF8896 =00000002                  palFd_from	rs.b 1			;TODO: poner funcionar esto
FFFF8896 =00000003                  palFd_num	rs.b 1
FFFF8896 =00000004                  palFd_timer	rs.w 1
FFFF8896                            
FFFF8896                            		rsreset
FFFF8896 =00000000                  sprite_free	rs.l 1
FFFF8896 =00000004                  sprite_link	rs.w 1
FFFF8896 =00000006                  sprite_used	rs.w 1
FFFF8896                            
FFFF8896                            ; ====================================================================
FFFF8896                            ; -------------------------------------------------
FFFF8896                            ; RAM
FFFF8896                            ; -------------------------------------------------
FFFF8896                            
FFFF8896                            		rsset RAM_Video
FFFF8896 =FFFFDF00                  RAM_ScrlHor	rs.l 240
FFFF8896 =FFFFE2C0                  RAM_ScrlVer	rs.l $20			; Normal
FFFF8896 =FFFFE340                  RAM_Sprites	rs.l (80*2)			; Normal
FFFF8896 =FFFFE5C0                  RAM_SprControl	rs.l 2				; Normal
FFFF8896 =FFFFE5C8                  RAM_HSprites	rs.l (80*2)			; For HBlank
FFFF8896 =FFFFE848                  RAM_HScrlVer	rs.l $20			; For HBlank
FFFF8896 =FFFFE8C8                  RAM_HSprLast	rs.l 2				; For HBlank
FFFF8896 =FFFFE8D0                  RAM_Palette	rs.w 64				; Normal
FFFF8896 =FFFFE950                  RAM_HPalette	rs.w 64				; For HBlank
FFFF8896 =FFFFE9D0                  RAM_PalFade	rs.w 64				; Normal
FFFF8896 =FFFFEA50                  RAM_HPalFade	rs.w 64				; For HBlank
FFFF8896 =FFFFEAD0                  RAM_PalFadeSys	rs.l 8*2
FFFF8896 =FFFFEB10                  RAM_DMA_Buffer	rs.b $200
FFFF8896 =FFFFED10                  RAM_VidRegs	rs.b 16				; Unused regs included (always zero) | WINDOW and DMA regs ignored, use them separately
FFFF8896                            
FFFF8896 =FFFFED20                  sizeof_vid	rs.l 0
FFFF8896                            ;       		inform 0,"video ram: %h",(sizeof_vid-RAM_Video)
FFFF8896                            
FFFF8896                            ; ====================================================================
FFFF8896                            ; -------------------------------------------------
FFFF8896                            ; Subs
FFFF8896                            ; -------------------------------------------------
FFFF8896                            
FFFF8896                            ; -------------------------------------------------
FFFF8896                            ; Video control
FFFF8896                            ; -------------------------------------------------
FFFF8896                            
FFFF8896                            Video_init:
FFFF8896 41FA 0000                  		lea	reg_data(pc),a0
FFFF889A 43F9 FFFF ED10             		lea	(RAM_VidRegs),a1
FFFF88A0 303C 8000                  		move.w	#$8000,d0
FFFF88A4 7210                       		moveq	#17-1,d1
FFFF88A6                            @reg_list:
FFFF88A6 1018                       		move.b	(a0)+,d0
FFFF88A8 12C0                       		move.b	d0,(a1)+
FFFF88AA 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
FFFF88B0 0640 0100                  		add.w	#$100,d0
FFFF88B4 51C9 FFF0                  		dbf	d1,@reg_list
FFFF88B8 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)	;WINDOW LEFT/TOP clear
FFFF88C2 23FC 9300 9400 00C0 0004   		move.l	#$93009400,(vdp_ctrl)	;DMA len low/high clear
FFFF88CC 23FC 9500 9600 00C0 0004   		move.l	#$95009600,(vdp_ctrl)	;DMA addr mid/low clear
FFFF88D6 33FC 9700 00C0 0004        		move.w	#$9700,(vdp_ctrl)	;DMA addr high clear
FFFF88DE                              	
FFFF88DE                            ; --------------------------------------------
FFFF88DE                            ; Video_ClearAll
FFFF88DE                            ; --------------------------------------------
FFFF88DE                            
FFFF88DE                            Video_ClearAll:
FFFF88DE 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)
FFFF88E8                            		
FFFF88E8 6100                       		bsr.s	Video_ClrAllLyrs
FFFF88EA 6100                       		bsr.s	Video_ClearScroll
FFFF88EC 6100 0000                  		bsr	Sprites_Clear
FFFF88F0 6000 0000                  		bra	Sprites_Reset
FFFF88F4                            		
FFFF88F4                            Video_ClearSprites:
FFFF88F4 6100 0000                  		bsr	Sprites_Clear
FFFF88F8 6000 0000                  		bra	Sprites_Reset
FFFF88FC                            		
FFFF88FC                            ; --------------------------------------------
FFFF88FC                            ; Video_ClrAllLyrs
FFFF88FC                            ; --------------------------------------------
FFFF88FC                            
FFFF88FC                            Video_ClrAllLyrs:
FFFF88FC 203C 4000 0003             		move.l	#$40000003,d0
FFFF8902 6100                       		bsr.s	Video_ClrLyr
FFFF8904 203C 5000 0003             		move.l	#$50000003,d0
FFFF890A 6100                       		bsr.s	Video_ClrLyr
FFFF890C 203C 6000 0003             		move.l	#$60000003,d0
FFFF8912                            ; 		bsr.s	Video_ClrLyr
FFFF8912                            ; 		rts
FFFF8912                            		
FFFF8912                            ; --------------------------------------------
FFFF8912                            ; Video_ClrLyr
FFFF8912                            ; 
FFFF8912                            ; d0 | LONG - VDP VRAM Command for the layer
FFFF8912                            ; --------------------------------------------
FFFF8912                            
FFFF8912                            Video_ClrLyr:
FFFF8912 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
FFFF8918 303C 07FF                  		move.w	#$7FF,d0
FFFF891C                            @loop:
FFFF891C 33FC 0000 00C0 0000        		move.w	#0,(vdp_data)
FFFF8924 51C8 FFF6                  		dbf	d0,@loop
FFFF8928 4E75                       		rts
FFFF892A                            	
FFFF892A                            ; --------------------------------------------
FFFF892A                            ; Video_ClrHScrl
FFFF892A                            ; --------------------------------------------
FFFF892A                            
FFFF892A                            Video_ClrHScrl:
FFFF892A 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
FFFF8930 303C 00DF                  		move.w	#224-1,d0
FFFF8934 6000                       		bra.s	VidClrScrl_loop
FFFF8936                            
FFFF8936                            ; --------------------------------------------
FFFF8936                            ; Video_ClearScroll
FFFF8936                            ; --------------------------------------------
FFFF8936                            
FFFF8936                            Video_ClearScroll:
FFFF8936 61F2                       		bsr.s	Video_ClrHScrl
FFFF8938 41F9 FFFF E2C0             		lea	(RAM_ScrlVer),a0
FFFF893E 6100                       		bsr.s	Video_ClrVScrl
FFFF8940 41F9 FFFF E848             		lea	(RAM_HScrlVer),a0
FFFF8946                            ; 		bsr.s	Video_ClrVScrl
FFFF8946                            		
FFFF8946                            ; --------------------------------------------
FFFF8946                            ; Video_ClrVScrl
FFFF8946                            ; 
FFFF8946                            ; a0 - Vertical scroll data
FFFF8946                            ; --------------------------------------------
FFFF8946                            
FFFF8946                            Video_ClrVScrl:
FFFF8946 303C 001F                  		move.w	#$20-1,d0
FFFF894A                            VidClrScrl_loop:
FFFF894A 4298                       		clr.l	(a0)+
FFFF894C 51C8 FFFC                  		dbf	d0,VidClrScrl_loop
FFFF8950 4E75                       		rts
FFFF8952                            		
FFFF8952                            ; ------------------------------------
FFFF8952                            
FFFF8952                            reg_data:
FFFF8952 04                         		dc.b %00000100			; $80: [4] HInt interrupt OFF | [2] ALWAYS ON | [1] HV Counter OFF
FFFF8953 74                         		dc.b %01110100			; $81: [6] Display ON, [5] Vint interrupt ON, [4] DMA OFF, [3] V28 (V30 PAL ONLY) | [2] ALWAYS ON
FFFF8954 30                         		dc.b ($C000>>10)&%00111000	; $82: Plane A pattern table
FFFF8955 34                         		dc.b ($D000>>10)&%00111110	; $83:  WINDOW pattern table (%00111110 H32, %00111100 H40)
FFFF8956 07                         		dc.b ($E000>>13)&%00000111	; $84: Plane B pattern table
FFFF8957 7C                         		dc.b ($F800>>09)&%01111111	; $85:  Sprite attribute table (%01111111 H32, %01111110 H40)
FFFF8958 00                         		dc.b 0				; $86: NOTHING
FFFF8959 00                         		dc.b 0				; $87: BG Color
FFFF895A 00                         		dc.b 0				; $88: NOTHING
FFFF895B 00                         		dc.b 0				; $89: NOTHING
FFFF895C 00                         		dc.b 0				; $8A: HInt counter
FFFF895D 03                         		dc.b %00000011			; $8B: [3] External interrupt OFF | [2] Vscrl: full | [1|0] Hscrl: full
FFFF895E 81                         		dc.b %10000001			; $8C: [7+0] H40 | [3] Prio/Shadow | [2|1] Interlace mode: None
FFFF895F 3F                         		dc.b ($FC00>>10)&%00111111	; $8D: Hscroll attribute table
FFFF8960 00                         		dc.b 0				; $8E: NOTHING
FFFF8961 02                         		dc.b 2				; $8F: VDP Auto increment
FFFF8962 01                         		dc.b %00000001			; $90: Plane size [5|4] Y size | [1|0] X size
FFFF8964 00                         		even
FFFF8964                            
FFFF8964                            ; -------------------------------------------------
FFFF8964                            ; Subs
FFFF8964                            ; -------------------------------------------------
FFFF8964                            
FFFF8964                            Video_Update:
FFFF8964 41F9 FFFF ED10             		lea	(RAM_VidRegs),a0
FFFF896A 303C 8000                  		move.w	#$8000,d0
FFFF896E 7210                       		moveq	#17-1,d1
FFFF8970                            @reg_list:
FFFF8970 1018                       		move.b	(a0)+,d0
FFFF8972 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
FFFF8978 0640 0100                  		add.w	#$100,d0
FFFF897C 51C9 FFF2                  		dbf	d1,@reg_list
FFFF8980 4E75                       		rts
FFFF8982                            		
FFFF8982                            ; --------------------------------------------
FFFF8982                            ; VDP_SendData_W, VDP_SendData_L
FFFF8982                            ;
FFFF8982                            ; Input:
FFFF8982                            ; a0 - Data address
FFFF8982                            ;
FFFF8982                            ; d0 | VRAM Address
FFFF8982                            ; d1 | Data size
FFFF8982                            ; --------------------------------------------
FFFF8982                            
FFFF8982                            VDP_SendData_W:
FFFF8982 EB48                       		lsl.w	#5,d0
FFFF8984 6100 0000                  		bsr	VDP_VramToCmd
FFFF8988 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
FFFF898E                            @Loop:
FFFF898E 33D8 00C0 0000             		move.w	(a0)+,(vdp_data).l
FFFF8994 51C9 FFF8                  		dbf	d1,@Loop
FFFF8998 4E75                       		rts
FFFF899A                            
FFFF899A                            VDP_SendData_L:
FFFF899A EB48                       		lsl.w	#5,d0
FFFF899C 6100 0000                  		bsr	VDP_VramToCmd
FFFF89A0 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
FFFF89A6                            @Loop:
FFFF89A6 23D8 00C0 0000             		move.l	(a0)+,(vdp_data).l
FFFF89AC 51C9 FFF8                  		dbf	d1,@Loop
FFFF89B0 4E75                       		rts
FFFF89B2                            		
FFFF89B2                            ; -----------------------
FFFF89B2                            ; Uses: d4 (LONG)
FFFF89B2                            ;       d5 (WORD)
FFFF89B2                            ; -----------------------
FFFF89B2                            
FFFF89B2                            vdpshv_findvdppos:
FFFF89B2                            		;Check plane to use
FFFF89B2 4845                       		swap	d5
FFFF89B4 3A00                       		move.w	d0,d5
FFFF89B6 7000                       		moveq	#0,d0
FFFF89B8 1039 FFFF ED12             		move.b	(RAM_VidRegs+2),d0
FFFF89BE 0805 0001                  		btst	#1,d5				;%10? (WD)
FFFF89C2 6700                       		beq.s	@FG
FFFF89C4 1039 FFFF ED13             		move.b	(RAM_VidRegs+3),d0
FFFF89CA                            @FG:
FFFF89CA E148                       		lsl.w	#8,d0
FFFF89CC E548                       		lsl.w	#2,d0
FFFF89CE 0805 0000                  		btst	#0,d5				;%01? (BG)
FFFF89D2 6700                       		beq.s	@FGWD
FFFF89D4 7000                       		moveq	#0,d0
FFFF89D6 1039 FFFF ED14             		move.b	(RAM_VidRegs+4),d0
FFFF89DC E148                       		lsl.w	#8,d0
FFFF89DE EB48                       		lsl.w	#5,d0
FFFF89E0                            @FGWD:
FFFF89E0                            
FFFF89E0                            		;Start Y
FFFF89E0 7800                       		moveq	#0,d4
FFFF89E2 3801                          		move.w	d1,d4
FFFF89E4 ED8C                         		lsl.l	#6,d4
FFFF89E6 0805 0001                   		btst	#1,d5
FFFF89EA 6700                        		beq.s	@def_fgbg
FFFF89EC                             		
FFFF89EC                             		;TODO: WD resolution check
FFFF89EC                            ;    		move.b	(RAM_VidRegs+vdpReg_HMode),d5
FFFF89EC                            ;    		and.w	#%10000001,d5
FFFF89EC                            ;    		bne.s	@Not128
FFFF89EC E38C                           		lsl.l	#1,d4
FFFF89EE 6000                       		bra.s	@Not128
FFFF89F0                            @def_fgbg:
FFFF89F0 0839 0000 FFFF ED20         		btst	#0,(RAM_VidRegs+$10)
FFFF89F8 6700                        		beq.s	@Not40
FFFF89FA E38C                         		lsl.l	#1,d4
FFFF89FC                            @Not40:
FFFF89FC 0839 0001 FFFF ED20         		btst	#1,(RAM_VidRegs+$10)
FFFF8A04 6700                        		beq.s	@Not128
FFFF8A06 E38C                           		lsl.l	#1,d4
FFFF8A08                            @Not128:
FFFF8A08 D044                        		add.w	d4,d0			;+Y Start
FFFF8A0A 4841                       		swap	d1
FFFF8A0C E349                       		lsl.w	#1,d1
FFFF8A0E D041                       		add.w	d1,d0			;+X Start
FFFF8A10 4845                       		swap	d5
FFFF8A12                            		
FFFF8A12                            ; --------------------------------------------
FFFF8A12                            ; VDP_VramToCmd
FFFF8A12                            ;
FFFF8A12                            ; Input:
FFFF8A12                            ; d0 | WORD - VRAM to convert
FFFF8A12                            ;
FFFF8A12                            ; Output:
FFFF8A12                            ; d0 | LONG - VDP Command (Write mode)
FFFF8A12                            ; --------------------------------------------
FFFF8A12                            
FFFF8A12                            VDP_VramToCmd:
FFFF8A12 0C40 4000                  		cmp.w	#$4000,d0
FFFF8A16 6500                       		bcs.s	@NoBank
FFFF8A18 4840                       		swap	d0
FFFF8A1A 303C 0001                  		move.w	#1,d0
FFFF8A1E 4840                       		swap	d0
FFFF8A20 0C40 8000                  		cmp.w	#$8000,d0
FFFF8A24 6500                       		bcs.s	@NoBank	
FFFF8A26 4840                       		swap	d0
FFFF8A28 303C 0002                  		move.w	#2,d0
FFFF8A2C 4840                       		swap	d0
FFFF8A2E 0C40 C000                  		cmp.w	#$C000,d0
FFFF8A32 6500                       		bcs.s	@NoBank	
FFFF8A34 4840                       		swap	d0
FFFF8A36 303C 0003                  		move.w	#3,d0
FFFF8A3A 4840                       		swap	d0
FFFF8A3C                            @NoBank:
FFFF8A3C 0240 3FFF                    		and.w	#$3FFF,d0
FFFF8A40 0040 4000                    		or.w	#$4000,d0
FFFF8A44 4840                          		swap	d0
FFFF8A46 4E75                       		rts
FFFF8A48                            		
FFFF8A48                            ; --------------------------------------------
FFFF8A48                            ; VDP_LoadMaps
FFFF8A48                            ; 
FFFF8A48                            ; Input:
FFFF8A48                            ; a0 - Pattern data
FFFF8A48                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
FFFF8A48                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
FFFF8A48                            ; d2 | LONG - Value
FFFF8A48                            ; d3 | WORD - VRAM (ASCII start)
FFFF8A48                            ; d4 | WORD - Type:
FFFF8A48                            ;             00 Byte | 01 Word | 02 Long HEX
FFFF8A48                            ;             04 Byte | 05 Word | 06 Long DEC
FFFF8A48                            ;             08 Byte | 09 Word | 0A Long DEC
FFFF8A48                            ; Uses:
FFFF8A48                            ; d4-d6
FFFF8A48                            ; 
FFFF8A48                            ; NOTE: clear d2 FIRST and then set the value
FFFF8A48                            ; --------------------------------------------
FFFF8A48                            
FFFF8A48                            Video_PrintVal:
FFFF8A48 0244 0007                  		and.w	#%111,d4
FFFF8A4C 0804 0002                  		btst	#2,d4
FFFF8A50 6700                       		beq.s	@hexy
FFFF8A52 6100 0000                  		bsr	HexToDec
FFFF8A56                            @hexy:
FFFF8A56 3A04                       		move.w	d4,d5
FFFF8A58 6100 FF58                  		bsr	vdpshv_findvdppos
FFFF8A5C 3805                       		move.w	d5,d4
FFFF8A5E                            		
FFFF8A5E 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
FFFF8A64 0643 0030                  		add.w	#"0",d3
FFFF8A68                            		
FFFF8A68 7A07                          		moveq	#(8)-1,d5
FFFF8A6A 0804 0001                  		btst	#1,d4
FFFF8A6E 6600                       		bne.s	@setit
FFFF8A70 7A03                          		moveq	#(4)-1,d5
FFFF8A72 4842                        		swap	d2
FFFF8A74 1004                          		move.b	d4,d0
FFFF8A76 0200 0003                     		and.b	#%11,d0
FFFF8A7A 4A00                        		tst.b	d0
FFFF8A7C 6600                        		bne.s	@setit
FFFF8A7E 7A01                        		moveq	#(2)-1,d5
FFFF8A80 E19A                        		rol.l	#8,d2
FFFF8A82                            @setit:
FFFF8A82 0804 0002                  		btst	#2,d4
FFFF8A86 6700                       		beq.s	@next
FFFF8A88 0804 0001                  		btst	#1,d4
FFFF8A8C 6600                       		bne.s	@next
FFFF8A8E E89A                       		ror.l	#4,d2
FFFF8A90 0645 0001                  		add.w	#1,d5
FFFF8A94                            @next:
FFFF8A94 E99A                        		rol.l	#4,d2
FFFF8A96 3002                       		move.w	d2,d0
FFFF8A98 0240 000F                  		and.w	#$F,d0
FFFF8A9C 0C40 000A                  		cmp.w	#$A,d0
FFFF8AA0 6500                       		bcs.s	@lessF
FFFF8AA2 0640 0007                  		add.w	#7,d0
FFFF8AA6                            @lessF
FFFF8AA6 D043                       		add.w	d3,d0
FFFF8AA8 33C0 00C0 0000             		move.w	d0,(vdp_data)
FFFF8AAE 51CD FFE4                  		dbf	d5,@next
FFFF8AB2 4E75                       		rts
FFFF8AB4                            
FFFF8AB4                            ; --------------------------------------------
FFFF8AB4                            ; Video_MakeMap
FFFF8AB4                            ; 
FFFF8AB4                            ; Input:
FFFF8AB4                            ; a0 - Pattern data
FFFF8AB4                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
FFFF8AB4                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
FFFF8AB4                            ; d2 | LONG - XSize (WORD) | YSize (WORD)
FFFF8AB4                            ; d3 | WORD - VRAM
FFFF8AB4                            ; 
FFFF8AB4                            ; Uses:
FFFF8AB4                            ; d4-d6
FFFF8AB4                            ; --------------------------------------------
FFFF8AB4                            
FFFF8AB4                            Video_MakeMap:
FFFF8AB4                            		;Check plane to use
FFFF8AB4 6100 FEFC                  		bsr	vdpshv_findvdppos
FFFF8AB8                            		
FFFF8AB8 283C 0040 0000             		move.l	#$400000,d4
FFFF8ABE 0839 0000 FFFF ED20        		btst	#0,(RAM_VidRegs+$10)
FFFF8AC6 6700                       		beq.s	@JpNot40
FFFF8AC8 E38C                        		lsl.l	#1,d4
FFFF8ACA                            @JpNot40:
FFFF8ACA 0839 0001 FFFF ED20        		btst	#1,(RAM_VidRegs+$10)
FFFF8AD2 6700                       		beq.s	@Y_Loop
FFFF8AD4 E38C                            		lsl.l	#1,d4
FFFF8AD6                                 		
FFFF8AD6                            @Y_Loop:
FFFF8AD6 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l		; Set VDP location from d0
FFFF8ADC 4842                       		swap	d2
FFFF8ADE 3A02                       		move.w	d2,d5	  		; Move X-pos value to d3
FFFF8AE0 4842                       		swap	d2
FFFF8AE2                            @X_Loop:
FFFF8AE2 3C18                       		move.w	(a0)+,d6
FFFF8AE4 DC43                                       add.w	d3,d6
FFFF8AE6 4845                                       swap	d5
FFFF8AE8 1A39 FFFF ED1C                             move.b	(RAM_VidRegs+$C),d5
FFFF8AEE 0245 0006                                  and.w	#%110,d5
FFFF8AF2 6700                                       beq.s	@normal
FFFF8AF4 E24E                                       lsr.w	#1,d6
FFFF8AF6                            @normal:
FFFF8AF6 4845                                       swap	d5
FFFF8AF8 33C6 00C0 0000                             move.w	d6,(vdp_data)		; Put data
FFFF8AFE 51CD FFE2                  		dbf	d5,@X_Loop		; X-pos loop (from d1 to d3)
FFFF8B02 D084                       		add.l	d4,d0                   ; Next line
FFFF8B04 51CA FFD0                  		dbf	d2,@Y_Loop		; Y-pos loop
FFFF8B08 4E75                       		rts
FFFF8B0A                            
FFFF8B0A                            ; --------------------------------------------
FFFF8B0A                            ; Video_PrintText
FFFF8B0A                            ;
FFFF8B0A                            ; Input:
FFFF8B0A                            ; a0 - String
FFFF8B0A                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
FFFF8B0A                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
FFFF8B0A                            ; d2 | VRAM
FFFF8B0A                            ; 
FFFF8B0A                            ; Uses:
FFFF8B0A                            ; d3-d4
FFFF8B0A                            ; --------------------------------------------
FFFF8B0A                            
FFFF8B0A                            Video_PrintText:
FFFF8B0A                            		;Check plane to use
FFFF8B0A 3A00                       		move.w	d0,d5
FFFF8B0C 6100 FEA4                  		bsr	vdpshv_findvdppos
FFFF8B10                            		
FFFF8B10 283C 0080 0000              		move.l	#$800000,d4
FFFF8B16                            ;  		cmp.w	#2,d5
FFFF8B16                            ;  		bne.s	@NotWindow
FFFF8B16                            ; 		
FFFF8B16                            ;  		tst.b	(RAM_VidRegs+$C)
FFFF8B16                            ;  		beq.s	@Reset
FFFF8B16                            ;  		lsl.l	#1,d4
FFFF8B16                            ; 		bra.s	@Reset
FFFF8B16                            ; 		
FFFF8B16                            ; @NotWindow:
FFFF8B16                            ; 		btst	#0,(RAM_VidRegs+$10)
FFFF8B16                            ; 		beq.s	@JpNot40
FFFF8B16                            ;  		lsl.l	#1,d4
FFFF8B16                            ; @JpNot40:
FFFF8B16                            ; 		btst	#1,(RAM_VidRegs+$10)
FFFF8B16                            ; 		beq.s	@Space
FFFF8B16                            ;      		lsl.l	#1,d4
FFFF8B16                                 		
FFFF8B16                            @Reset:
FFFF8B16 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l
FFFF8B1C                            @Next:
FFFF8B1C 7600                       		moveq	#0,d3
FFFF8B1E 1618                       		move.b	(a0)+,d3
FFFF8B20 0C03 000A                  		cmp.b	#$A,d3
FFFF8B24 6700                       		beq.s	@Space
FFFF8B26 4A03                       		tst.b	d3
FFFF8B28 6600                       		bne.s	@Char
FFFF8B2A 4E75                       		rts
FFFF8B2C                            @Char:
FFFF8B2C D642                       		add.w	d2,d3
FFFF8B2E 33C3 00C0 0000             		move.w	d3,(vdp_data).l
FFFF8B34 60E6                       		bra.s	@Next
FFFF8B36                            @Space:
FFFF8B36 D084                       		add.l	d4,d0                   ; Next line
FFFF8B38 60DC                       		bra.s	@Reset
FFFF8B3A                            @Exit:
FFFF8B3A 4E75                       		rts
FFFF8B3C                            		
FFFF8B3C                            ; --------------------------------------------
FFFF8B3C                            ; Video_VSync
FFFF8B3C                            ; 
FFFF8B3C                            ; Wait VBlank
FFFF8B3C                            ; --------------------------------------------
FFFF8B3C                            
FFFF8B3C                            Video_VSync:
FFFF8B3C 08F9 0000 0000 0000         		bset	#0,(RAM_IntFlags)
FFFF8B44                            @vint:
FFFF8B44 0839 0000 0000 0000        		btst	#0,(RAM_IntFlags)
FFFF8B4C 66F6                       		bne.s	@vint
FFFF8B4E 4E75                       		rts
FFFF8B50                            
FFFF8B50                            ; ====================================================================
FFFF8B50                            ; ---------------------------------------------
FFFF8B50                            ; Palette fading
FFFF8B50                            ; ---------------------------------------------
FFFF8B50                            
FFFF8B50                            PalFade_Upd:
FFFF8B50 4DF9 FFFF EAD0             		lea	(RAM_PalFadeSys),a6
FFFF8B56 7C03                        		moveq	#4-1,d6
FFFF8B58                            @NextPalReq:
FFFF8B58 4A96                       		tst.l	(a6)
FFFF8B5A 6700                       		beq.s	@Unused
FFFF8B5C 4BF9 FFFF E8D0              		lea	(RAM_Palette),a5
FFFF8B62 49F9 FFFF E9D0              		lea	(RAM_PalFade),a4
FFFF8B68 6100 0000                    		bsr	@Active
FFFF8B6C                            @Unused:
FFFF8B6C DCFC 0008                   		adda	#8,a6
FFFF8B70 51CE FFE6                   		dbf	d6,@NextPalReq
FFFF8B74                            		
FFFF8B74 7C03                       		moveq	#4-1,d6
FFFF8B76                            @NextHPalReq:
FFFF8B76 4A96                       		tst.l	(a6)
FFFF8B78 6700                       		beq.s	@UnusedH
FFFF8B7A 4BF9 FFFF E950             		lea	(RAM_HPalette),a5
FFFF8B80 49F9 FFFF EA50             		lea	(RAM_HPalFade),a4
FFFF8B86 6100 0000                  		bsr	@Active
FFFF8B8A                            @UnusedH:
FFFF8B8A DCFC 0008                  		adda	#8,a6
FFFF8B8E 51CE FFE6                  		dbf	d6,@NextHPalReq
FFFF8B92 4E75                       		rts
FFFF8B94                            		
FFFF8B94                            ; ---------------------------------
FFFF8B94                            ; Active palette
FFFF8B94                            ; ---------------------------------
FFFF8B94                            
FFFF8B94                            @Active:
FFFF8B94 7000                       		moveq	#0,d0
FFFF8B96 102E 0000                  		move.b	palFd_mode(a6),d0
FFFF8B9A D040                       		add.w	d0,d0
FFFF8B9C 323B 0000                  		move.w	@list(pc,d0.w),d1
FFFF8BA0 4EFB 1000                  		jmp	@list(pc,d1.w)
FFFF8BA4                            		
FFFF8BA4                            ; ---------------------------------
FFFF8BA4                            
FFFF8BA4                            @list:
FFFF8BA4 0000                       		dc.w fadeSet_Return-@list
FFFF8BA6 0000                       		dc.w fadeSet_in_timer-@list
FFFF8BA8 0000                       		dc.w fadeSet_out_timer-@list
FFFF8BAA 0000                       		dc.w fadeSet_in_single-@list
FFFF8BAC 0000                        		dc.w fadeSet_out_single-@list		
FFFF8BAE                            		
FFFF8BAE                            ; ---------------------------------
FFFF8BAE                            
FFFF8BAE                            fadeSet_in_timer:
FFFF8BAE 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
FFFF8BB4 6A00 0000                  		bpl	fadeSet_Return
FFFF8BB8 7800                       		moveq	#0,d4
FFFF8BBA 7A00                       		moveq	#0,d5
FFFF8BBC 182E 0001                  		move.b 	palFd_delay(a6),d4
FFFF8BC0 3D44 0004                  		move.w	d4,palFd_timer(a6)
FFFF8BC4 182E 0003                  		move.b 	palFd_num(a6),d4
FFFF8BC8                            @next_in:
FFFF8BC8 3015                        		move.w	(a5),d0
FFFF8BCA 3214                        		move.w	(a4),d1
FFFF8BCC 3400                       		move.w	d0,d2
FFFF8BCE 3601                        		move.w	d1,d3
FFFF8BD0 0242 000E                   		and.w	#$00E,d2
FFFF8BD4 0243 000E                   		and.w	#$00E,d3
FFFF8BD8 B642                        		cmp.w	d2,d3
FFFF8BDA 6700                        		beq.s	@goodin_b
FFFF8BDC 0642 0002                  		add.w	#2,d2
FFFF8BE0                            @goodin_b:
FFFF8BE0 0240 0EE0                  		and.w	#$EE0,d0
FFFF8BE4 8042                        		or.w	d2,d0
FFFF8BE6                            		
FFFF8BE6 3400                       		move.w	d0,d2
FFFF8BE8 3601                        		move.w	d1,d3
FFFF8BEA 0242 00E0                   		and.w	#$0E0,d2
FFFF8BEE 0243 00E0                   		and.w	#$0E0,d3
FFFF8BF2 B642                        		cmp.w	d2,d3
FFFF8BF4 6700                        		beq.s	@goodin_g
FFFF8BF6 0642 0020                  		add.w	#$020,d2
FFFF8BFA                            @goodin_g:
FFFF8BFA 0240 0E0E                  		and.w	#$E0E,d0
FFFF8BFE 8042                        		or.w	d2,d0
FFFF8C00                              		
FFFF8C00 3400                       		move.w	d0,d2
FFFF8C02 3601                        		move.w	d1,d3
FFFF8C04 0242 0E00                   		and.w	#$E00,d2
FFFF8C08 0243 0E00                   		and.w	#$E00,d3
FFFF8C0C B642                        		cmp.w	d2,d3
FFFF8C0E 6700                        		beq.s	@goodin_r
FFFF8C10 0642 0200                  		add.w	#$200,d2
FFFF8C14                            @goodin_r:
FFFF8C14 0240 00EE                  		and.w	#$0EE,d0
FFFF8C18 8042                        		or.w	d2,d0
FFFF8C1A                             		
FFFF8C1A 3AC0                        		move.w	d0,(a5)+
FFFF8C1C B05C                        		cmp.w	(a4)+,d0
FFFF8C1E 6600                        		bne.s	@nonz_fdin
FFFF8C20 0645 0001                   		add.w	#1,d5
FFFF8C24                            @nonz_fdin:
FFFF8C24 51CC FFA2                  		dbf	d4,@next_in
FFFF8C28                            		
FFFF8C28 0445 0001                  		sub.w	#1,d5
FFFF8C2C BA2E 0003                  		cmp.b	palFd_num(a6),d5
FFFF8C30 6600                       		bne.s	fadeSet_Return
FFFF8C32 4296                       		clr.l	(a6)
FFFF8C34                            fadeSet_Return:
FFFF8C34 4E75                       		rts
FFFF8C36                            		
FFFF8C36                            ; ---------------------------------
FFFF8C36                            
FFFF8C36                            fadeSet_out_timer:
FFFF8C36 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
FFFF8C3C 6AF6                       		bpl.s	fadeSet_Return
FFFF8C3E 7400                       		moveq	#0,d2
FFFF8C40 7600                       		moveq	#0,d3
FFFF8C42 142E 0001                  		move.b 	palFd_delay(a6),d2
FFFF8C46 3D42 0004                  		move.w	d2,palFd_timer(a6)
FFFF8C4A 142E 0003                  		move.b 	palFd_num(a6),d2
FFFF8C4E                            @setcol:
FFFF8C4E 3015                       		move.w	(a5),d0
FFFF8C50 3200                       		move.w	d0,d1
FFFF8C52 0241 000E                  		and.w	#$00E,d1
FFFF8C56 6700                       		beq.s	@good_b
FFFF8C58 0441 0002                  		sub.w	#2,d1
FFFF8C5C                            @good_b:
FFFF8C5C 0240 0EE0                  		and.w	#$EE0,d0
FFFF8C60 8041                       		or.w	d1,d0
FFFF8C62                            		
FFFF8C62 3200                       		move.w	d0,d1
FFFF8C64 0241 00E0                  		and.w	#$0E0,d1
FFFF8C68 6700                       		beq.s	@good_g
FFFF8C6A 0441 0020                  		sub.w	#$020,d1
FFFF8C6E                            @good_g:
FFFF8C6E 0240 0E0E                  		and.w	#$E0E,d0
FFFF8C72 8041                       		or.w	d1,d0
FFFF8C74 3200                       		move.w	d0,d1
FFFF8C76 0241 0E00                  		and.w	#$E00,d1
FFFF8C7A 6700                       		beq.s	@good_r
FFFF8C7C 0441 0200                  		sub.w	#$200,d1
FFFF8C80                            @good_r:
FFFF8C80 0240 00EE                  		and.w	#$0EE,d0
FFFF8C84 8041                       		or.w	d1,d0
FFFF8C86 3AC0                       		move.w	d0,(a5)+
FFFF8C88 4A40                       		tst.w	d0
FFFF8C8A 6600                       		bne.s	@nonzero
FFFF8C8C 0643 0001                  		add.w	#1,d3
FFFF8C90                            @nonzero:
FFFF8C90 51CA FFBC                  		dbf	d2,@setcol
FFFF8C94                            		
FFFF8C94 0443 0001                  		sub.w	#1,d3
FFFF8C98 B62E 0003                  		cmp.b	palFd_num(a6),d3
FFFF8C9C 6696                       		bne.s	fadeSet_Return
FFFF8C9E 4296                       		clr.l	(a6)
FFFF8CA0 4E75                       		rts
FFFF8CA2                            		
FFFF8CA2                            ; ---------------------------------
FFFF8CA2                            ; fadeSet_in_single
FFFF8CA2                            ; 
FFFF8CA2                            ; palFd_delay:
FFFF8CA2                            ; RGBTTTTT - RGB increment bits
FFFF8CA2                            ;            TTTTT timer
FFFF8CA2                            ; ---------------------------------
FFFF8CA2                            
FFFF8CA2                            fadeSet_in_single:
FFFF8CA2 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
FFFF8CA8 6A00 FF8A                  		bpl	fadeSet_Return
FFFF8CAC                            
FFFF8CAC 7A00                       		moveq	#0,d5
FFFF8CAE 1A2E 0002                  		move.b	palFd_from(a6),d5
FFFF8CB2 E34D                       		lsl.w	#1,d5
FFFF8CB4 DAC5                       		adda	d5,a5
FFFF8CB6 162E 0001                  		move.b 	palFd_delay(a6),d3
FFFF8CBA 0243 00E0                  		and.w	#$E0,d3
FFFF8CBE 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
FFFF8CC4                            		
FFFF8CC4 7800                       		moveq	#0,d4
FFFF8CC6 182E 0003                  		move.b 	palFd_num(a6),d4
FFFF8CCA                            @next_in:
FFFF8CCA 3015                        		move.w	(a5),d0
FFFF8CCC 3400                       		move.w	d0,d2
FFFF8CCE 0242 000E                   		and.w	#$00E,d2
FFFF8CD2 0803 0005                  		btst	#5,d3
FFFF8CD6 6700                       		beq.s	@goodin_b
FFFF8CD8 0C42 000E                   		cmp.w	#$00E,d2
FFFF8CDC 6C00                        		bge.s	@goodin_b
FFFF8CDE 0642 0002                  		add.w	#2,d2
FFFF8CE2                            @goodin_b:
FFFF8CE2 0240 0EE0                  		and.w	#$EE0,d0
FFFF8CE6 8042                        		or.w	d2,d0
FFFF8CE8                            
FFFF8CE8 3400                       		move.w	d0,d2
FFFF8CEA 0242 00E0                   		and.w	#$0E0,d2
FFFF8CEE 0803 0006                  		btst	#6,d3
FFFF8CF2 6700                       		beq.s	@goodin_g
FFFF8CF4 0C42 00E0                   		cmp.w	#$0E0,d2
FFFF8CF8 6C00                        		bge.s	@goodin_g
FFFF8CFA 0642 0020                  		add.w	#$020,d2
FFFF8CFE                            @goodin_g:
FFFF8CFE 0240 0E0E                  		and.w	#$E0E,d0
FFFF8D02 8042                        		or.w	d2,d0
FFFF8D04                            
FFFF8D04 3400                       		move.w	d0,d2
FFFF8D06 0242 0E00                   		and.w	#$E00,d2
FFFF8D0A 0803 0007                  		btst	#7,d3
FFFF8D0E 6700                       		beq.s	@goodin_r
FFFF8D10 0C42 0E00                   		cmp.w	#$E00,d2
FFFF8D14 6C00                        		bge.s	@goodin_r
FFFF8D16 0642 0200                  		add.w	#$200,d2
FFFF8D1A                            @goodin_r:
FFFF8D1A 0240 00EE                  		and.w	#$0EE,d0
FFFF8D1E 8042                        		or.w	d2,d0
FFFF8D20                            
FFFF8D20 3AC0                        		move.w	d0,(a5)+
FFFF8D22 51CC FFA6                  		dbf	d4,@next_in
FFFF8D26                            		
FFFF8D26 102E 0001                  		move.b	palFd_delay(a6),d0
FFFF8D2A 0240 001F                  		and.w	#$1F,d0
FFFF8D2E 0440 0001                  		sub.w	#1,d0
FFFF8D32 6A00                       		bpl.s	fadeSet_Return_2
FFFF8D34                            		
FFFF8D34                            ; 		sub.w	#1,d5
FFFF8D34                            ; 		cmp.b	palFd_num(a6),d5
FFFF8D34                            ; 		bne.s	fadeSet_Return
FFFF8D34 4296                       		clr.l	(a6)
FFFF8D36 42AE 0004                  		clr.l	4(a6)
FFFF8D3A                            		
FFFF8D3A                            fadeSet_Return_2:
FFFF8D3A 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
FFFF8D40 812E 0001                  		or.b	d0,palFd_delay(a6)
FFFF8D44 4E75                       		rts
FFFF8D46                            		
FFFF8D46                            ; ---------------------------------
FFFF8D46                            ; fadeSet_out_single
FFFF8D46                            ; 
FFFF8D46                            ; palFd_delay:
FFFF8D46                            ; RGBTTTTT - RGB increment bits
FFFF8D46                            ;            TTTTT timer
FFFF8D46                            ; ---------------------------------
FFFF8D46                            
FFFF8D46                            fadeSet_out_single:
FFFF8D46 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
FFFF8D4C 6A00 FEE6                  		bpl	fadeSet_Return
FFFF8D50                            
FFFF8D50 7A00                       		moveq	#0,d5
FFFF8D52 1A2E 0002                  		move.b	palFd_from(a6),d5
FFFF8D56 E34D                       		lsl.w	#1,d5
FFFF8D58 DAC5                       		adda	d5,a5
FFFF8D5A 162E 0001                  		move.b 	palFd_delay(a6),d3
FFFF8D5E 0243 00E0                  		and.w	#$E0,d3
FFFF8D62 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
FFFF8D68                            		
FFFF8D68 7800                       		moveq	#0,d4
FFFF8D6A 182E 0003                  		move.b 	palFd_num(a6),d4
FFFF8D6E                            @next_in:
FFFF8D6E 3015                        		move.w	(a5),d0
FFFF8D70 3400                       		move.w	d0,d2
FFFF8D72 0242 000E                   		and.w	#$00E,d2
FFFF8D76 0803 0005                  		btst	#5,d3
FFFF8D7A 6700                       		beq.s	@goodin_b
FFFF8D7C                            ;  		tst.w	d2
FFFF8D7C                            ;  		beq.s	@goodin_b
FFFF8D7C 0442 0002                  		sub.w	#2,d2
FFFF8D80                            @goodin_b:
FFFF8D80 0240 0EE0                  		and.w	#$EE0,d0
FFFF8D84 8042                        		or.w	d2,d0
FFFF8D86                            
FFFF8D86 3400                       		move.w	d0,d2
FFFF8D88 0242 00E0                   		and.w	#$0E0,d2
FFFF8D8C 0803 0006                  		btst	#6,d3
FFFF8D90 6700                       		beq.s	@goodin_g
FFFF8D92                            ;  		tst.w	d2
FFFF8D92                            ;  		beq.s	@goodin_g
FFFF8D92 0442 0020                  		sub.w	#$020,d2
FFFF8D96                            @goodin_g:
FFFF8D96 0240 0E0E                  		and.w	#$E0E,d0
FFFF8D9A 8042                        		or.w	d2,d0
FFFF8D9C                            
FFFF8D9C 3400                       		move.w	d0,d2
FFFF8D9E 0242 0E00                   		and.w	#$E00,d2
FFFF8DA2 0803 0007                  		btst	#7,d3
FFFF8DA6 6700                       		beq.s	@goodin_r
FFFF8DA8                            ;  		tst.w	d2
FFFF8DA8                            ;  		beq.s	@goodin_r
FFFF8DA8 0442 0200                  		sub.w	#$200,d2
FFFF8DAC                            @goodin_r:
FFFF8DAC 0240 00EE                  		and.w	#$0EE,d0
FFFF8DB0 8042                        		or.w	d2,d0
FFFF8DB2                            
FFFF8DB2 3AC0                        		move.w	d0,(a5)+
FFFF8DB4 51CC FFB8                  		dbf	d4,@next_in
FFFF8DB8                            		
FFFF8DB8 102E 0001                  		move.b	palFd_delay(a6),d0
FFFF8DBC 0240 001F                  		and.w	#$1F,d0
FFFF8DC0 0440 0001                  		sub.w	#1,d0
FFFF8DC4 6A00                       		bpl.s	@fadeSet_Return_2
FFFF8DC6                            		
FFFF8DC6                            ; 		sub.w	#1,d5
FFFF8DC6                            ; 		cmp.b	palFd_num(a6),d5
FFFF8DC6                            ; 		bne.s	fadeSet_Return
FFFF8DC6 4296                       		clr.l	(a6)
FFFF8DC8 42AE 0004                  		clr.l	4(a6)
FFFF8DCC                            		
FFFF8DCC                            @fadeSet_Return_2:
FFFF8DCC 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
FFFF8DD2 812E 0001                  		or.b	d0,palFd_delay(a6)
FFFF8DD6 4E75                       		rts
FFFF8DD8                            		
FFFF8DD8                            ; --------------------------------------------
FFFF8DD8                            ; PalFade_Set
FFFF8DD8                            ; --------------------------------------------
FFFF8DD8                            
FFFF8DD8                            PalFade_Set:
FFFF8DD8 4E75                       		rts
FFFF8DDA                            		
FFFF8DDA                            ; ====================================================================
FFFF8DDA                            ; ---------------------------------------------
FFFF8DDA                            ; DMA
FFFF8DDA                            ; ---------------------------------------------
FFFF8DDA                            
FFFF8DDA                            ; ROM data
FFFF8DDA                            ; Size
FFFF8DDA                            ; VRAM Destiantion
FFFF8DDA                            
FFFF8DDA                            DMA_Read:
FFFF8DDA 4DF9 FFFF EB10              		lea	(RAM_DMA_Buffer),a6
FFFF8DE0                            ;  		move.w	#64,d3
FFFF8DE0 381E                         		move.w	(a6)+,d4
FFFF8DE2                            ;   		sub.w	d4,d3
FFFF8DE2                            ;   		bmi	@FinishList
FFFF8DE2 4A44                         		tst.w	d4
FFFF8DE4 6700 0000                    		beq	@FinishList
FFFF8DE8 0444 0001                    		sub.w	#1,d4
FFFF8DEC                            ; 		dma 	on
FFFF8DEC                            @NextEntry:
FFFF8DEC 2A1E                       		move.l	(a6)+,d5
FFFF8DEE 0685 0000 0002              		add.l	#2,d5
FFFF8DF4                             		
FFFF8DF4 E28D                         		lsr.l	#1,d5
FFFF8DF6 2C3C 9600 9500              		move.l	#$96009500,d6
FFFF8DFC 1C05                        		move.b	d5,d6
FFFF8DFE E08D                        		lsr.l	#8,d5
FFFF8E00 4846                        		swap	d6
FFFF8E02 1C05                        		move.b	d5,d6
FFFF8E04 23C6 00C0 0004              		move.l	d6,(vdp_ctrl)
FFFF8E0A 3C3C 9700                   		move.w	#$9700,d6
FFFF8E0E E08D                        		lsr.l	#8,d5
FFFF8E10 1C05                        		move.b	d5,d6
FFFF8E12 33C6 00C0 0004              		move.w	d6,(vdp_ctrl)
FFFF8E18                             		
FFFF8E18 2C3C 9400 9300               		move.l	#$94009300,d6		;Size
FFFF8E1E 3A1E                         		move.w	(a6)+,d5
FFFF8E20 1C05                         		move.b	d5,d6
FFFF8E22 4846                        		swap	d6
FFFF8E24 E04D                         		lsr.w	#8,d5
FFFF8E26 1C05                         		move.b	d5,d6
FFFF8E28 23C6 00C0 0004               		move.l	d6,(vdp_ctrl)
FFFF8E2E                             		
FFFF8E2E 3A1E                        		move.w	(a6)+,d5
FFFF8E30 EB4D                        		lsl.w	#5,d5
FFFF8E32 3C05                        		move.w	d5,d6
FFFF8E34 0245 3FFF                   		and.w	#$3FFF,d5
FFFF8E38 0045 4000                   		or.w	#$4000,d5
FFFF8E3C E04E                        		lsr.w	#8,d6
FFFF8E3E EC4E                        		lsr.w	#6,d6
FFFF8E40 0246 0003                   		and.w	#%11,d6
FFFF8E44 0046 0080                   		or.w	#$80,d6
FFFF8E48 3F06                        		move.w	d6,-(sp)
FFFF8E4A 3F05                        		move.w	d5,-(sp)	
FFFF8E4C 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
FFFF8E52 33FC 0100 00A1 1100         		move.w	#$100,($A11100).l
FFFF8E5A                            @hold_on:
FFFF8E5A 0839 0000 00A1 1100         		btst	#0,($A11100).l
FFFF8E62 66F6                         		bne.s	@hold_on
FFFF8E64                              		
FFFF8E64 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
FFFF8E6A 33FC 0000 00A1 1100          		move.w	#0,($A11100).l
FFFF8E72                               		
FFFF8E72 51CC FF78                   		dbf	d4,@NextEntry
FFFF8E76                             		
FFFF8E76                            @FinishList:
FFFF8E76 4279 FFFF EB10             		clr.w	(RAM_DMA_Buffer)
FFFF8E7C 4E75                        		rts
FFFF8E7E                            
FFFF8E7E                            @ResetAllList:
FFFF8E7E 4E75                       		rts
FFFF8E80                            		
FFFF8E80                            ; -----------------------------------
FFFF8E80                            ; Set new entry to the list
FFFF8E80                            ; 
FFFF8E80                            ; Input:
FFFF8E80                            ; d0 - ROM Address
FFFF8E80                            ; d1 - Size
FFFF8E80                            ; d2 - VRAM
FFFF8E80                            ; 
FFFF8E80                            ; Uses:
FFFF8E80                            ; a2/d3
FFFF8E80                            ; -----------------------------------
FFFF8E80                            
FFFF8E80                            DMA_Set:
FFFF8E80 45F9 FFFF EB10             		lea	(RAM_DMA_Buffer),a2
FFFF8E86 0C52 0040                  		cmp.w	#64,(a2)
FFFF8E8A 6C00                       		bge.s	@Return
FFFF8E8C 3612                       		move.w	(a2),d3
FFFF8E8E E74B                       		lsl.w	#3,d3			;Size: 8
FFFF8E90 D4C3                       		adda 	d3,a2
FFFF8E92 D4FC 0002                  		adda	#2,a2
FFFF8E96                            		
FFFF8E96 24C0                       		move.l	d0,(a2)+		;ROM Address
FFFF8E98 34C1                       		move.w	d1,(a2)+
FFFF8E9A 34C2                       		move.w	d2,(a2)+
FFFF8E9C 0679 0001 FFFF EB10        		add.w	#1,(RAM_DMA_Buffer)
FFFF8EA4                            @Return:
FFFF8EA4 4E75                       		rts
FFFF8EA6                            		
FFFF8EA6                            ; ====================================================================
FFFF8EA6                            ; ---------------------------------------------
FFFF8EA6                            ; Sprites system
FFFF8EA6                            ; ---------------------------------------------
FFFF8EA6                            
FFFF8EA6                            ; ---------------------------------------------
FFFF8EA6                            ; Sprites_Reset
FFFF8EA6                            ; ---------------------------------------------
FFFF8EA6                            
FFFF8EA6                            Sprites_Clear:
FFFF8EA6                            ;  		lea	(RAM_Sprites),a6
FFFF8EA6                            ;  		move.w	#$4F,d6
FFFF8EA6                            ; @clrit:
FFFF8EA6 42B9 FFFF E340               		clr.l	(RAM_Sprites)
FFFF8EAC 42B9 FFFF E344               		clr.l	(RAM_Sprites+4)
FFFF8EB2 4E75                       		rts
FFFF8EB4                            		
FFFF8EB4                            ; ---------------------------------------------
FFFF8EB4                            ; Sprites_Reset
FFFF8EB4                            ; ---------------------------------------------
FFFF8EB4                            
FFFF8EB4                            Sprites_Reset:
FFFF8EB4 4DF9 FFFF E5C0             		lea	(RAM_SprControl),a6
FFFF8EBA 2A6E 0000                  		movea.l	sprite_free(a6),a5
FFFF8EBE BAFC E340                  		cmpa	#((RAM_Sprites)&$FFFF),a5
FFFF8EC2 6D00                       		blt.s	@Full
FFFF8EC4                            @NextEntry:
FFFF8EC4 BAFC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
FFFF8EC8 6E00                        		bgt.s	@Full
FFFF8ECA 429D                        		clr.l	(a5)+
FFFF8ECC 429D                         		clr.l	(a5)+
FFFF8ECE BAFC E5C0                    		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
FFFF8ED2 6DF0                         		blt.s	@NextEntry
FFFF8ED4                            @Full:
FFFF8ED4 2D7C FFFF E340 0000        		move.l	#RAM_Sprites,sprite_free(a6)
FFFF8EDC 3D7C 0001 0004             		move.w	#1,sprite_link(a6)
FFFF8EE2                            @Return:
FFFF8EE2 4E75                       		rts
FFFF8EE2 4E75                       		rts
FFFF8EE4                            		include	"system/sound/68k/main.asm"
FFFF8EE4                            ; ================================================================
FFFF8EE4                            ; SMEG Karasucia
FFFF8EE4                            ; Sound and Music Engine for Genesis (also MCD* and 32X**)
FFFF8EE4                            ;
FFFF8EE4                            ; (C)2013-2017 GF64
FFFF8EE4                            ; 
FFFF8EE4                            ; Reads patterns from a ImpulseTracker file (.it)
FFFF8EE4                            ;
FFFF8EE4                            ; Ticks:
FFFF8EE4                            ; 150 - NTSC
FFFF8EE4                            ; 120 - PAL
FFFF8EE4                            ;
FFFF8EE4                            ; uses assembler settings:
FFFF8EE4                            ; MCD     - for building to MCD (All the driver must be aligned
FFFF8EE4                            ;              to WordRAM or PRG-RAM)
FFFF8EE4                            ; MARS       - for building to 32x (CODE and
FFFF8EE4                            ;              DATA(Music/Sfx/Voices/Z80 samples) must be aligned to
FFFF8EE4                            ;              the 32x standards, uses bank 0 only,
FFFF8EE4                            ;              PWM Samples can be anywhere in ROM)
FFFF8EE4                            ; SMEG_Z80   - Use Z80, set to 0 while running from PRGRAM
FFFF8EE4                            ;                 
FFFF8EE4                            ; Limtations:
FFFF8EE4                            ; (Driver) - Effects: only volume and panning (Xxx) works
FFFF8EE4                            ; 
FFFF8EE4                            ; (MCD) - You cant use Z80 samples if your program is running
FFFF8EE4                            ;            on PRG-RAM (Z80 cant access RAM), if your program is
FFFF8EE4                            ;            running on WORD-RAM, set the permission to
FFFF8EE4                            ;            MainCPU (2M Mode) (not recommended)
FFFF8EE4                            ;            
FFFF8EE4                            ; * requires respective SubCPU code
FFFF8EE4                            ; ** requires respective SH2 code
FFFF8EE4                            ; ================================================================
FFFF8EE4                            
FFFF8EE4                            ;NOTE: Format
FFFF8EE4                            ; SONGFILE:
FFFF8EE4                            ; 		dc.b 12,0		; Numof_blocks, loop_block (-1 dont loop)
FFFF8EE4                            ; 		dc.l @pattern		; Pattern data
FFFF8EE4                            ;      		dc.l @instruments	; Instrument set
FFFF8EE4                            ;      		dc.w 8			; Number of channel settings
FFFF8EE4                            ;       	dc.b FM_6,64,$80,$0F	; Example of one (Channel,Vol,Pan,Extra)		
FFFF8EE4                            ;		...
FFFF8EE4                            ;
FFFF8EE4                            ; Extra:
FFFF8EE4                            ; FM: %????KEYS KEYS: FM Keys (ignored if not FM)
FFFF8EE4                            ; PSG: (not yet)
FFFF8EE4                            ; PCM/PWM: not yet
FFFF8EE4                            ; 
FFFF8EE4                            ; @instruments:
FFFF8EE4                            ; 		dc.w @ymha-@instruments
FFFF8EE4                            ; 		dc.w @psg-@instruments
FFFF8EE4                            ; 		dc.w @noise-@instruments
FFFF8EE4                            ; 		dc.w @psmpl-@instruments
FFFF8EE4                            ; 		even
FFFF8EE4                            ; @ymha:
FFFF8EE4                            ; 		;FM
FFFF8EE4                            ; 		dc.w INSTNUM,0
FFFF8EE4                            ; 		dc.l fmVoice_bass_ambient
FFFF8EE4                            ;    		
FFFF8EE4                            ;    		;FM3
FFFF8EE4                            ;    		dc.w $40|INSTNUM,0
FFFF8EE4                            ;    		dc.l fm_hatopen
FFFF8EE4                            ;    		dc.w $0511|$2000,$0328|$2000
FFFF8EE4                            ;    		dc.w $005E|$2000,$0328|$2000
FFFF8EE4                            ;    		
FFFF8EE4                            ;    		;Samples
FFFF8EE4                            ;   		dc.w $80|INSTNUM,12	; NUM,Pitch
FFFF8EE4                            ;   		dc.l wav_kick		; WAV Start
FFFF8EE4                            ;  		dc.l wav_kick_e		; WAV End
FFFF8EE4                            ;  		dc.l -1			; WAV Loop sample (0: start -1: none)
FFFF8EE4                            ;  		
FFFF8EE4                            ; 		dc.w -1			; ENDOFLIST
FFFF8EE4                            ; 		even
FFFF8EE4                            ; @psmpl:
FFFF8EE4                            ; 		dc.w -1			; Later
FFFF8EE4                            ; 		even
FFFF8EE4                            ; @psg:
FFFF8EE4                            ; 		dc.w -1			; Later
FFFF8EE4                            ; 		even
FFFF8EE4                            ; @noise:
FFFF8EE4                            ;  		dc.w 3,%101		; INSTNUM, PSG Noise setting
FFFF8EE4                            ;  		
FFFF8EE4                            ;  		dc.w 5,%101
FFFF8EE4                            ;  		dc.w 7,%100
FFFF8EE4                            ;  		
FFFF8EE4                            ; 		dc.w -1
FFFF8EE4                            ; 		even
FFFF8EE4                            
FFFF8EE4                            
FFFF8EE4                            ; GEMS style tick
FFFF8EE4                            ; 		dc.l fmSfx_Coin
FFFF8EE4                            ; 		dc.w $00AB|$3800,$0457|$3000
FFFF8EE4                            ; 		dc.w $0511|$3000,$0336|$2000
FFFF8EE4                            ;
FFFF8EE4                            ;    		dc.l fm_hatopen
FFFF8EE4                            ;    		dc.w $0511|$2000,$0328|$2000
FFFF8EE4                            ;    		dc.w $005E|$2000,$0328|$2000
FFFF8EE4                            ;
FFFF8EE4                            ;    		dc.l fm_hatclosed
FFFF8EE4                            ;    		dc.w $051C|$2000,$0328|$2000
FFFF8EE4                            ;    		dc.w $005E|$2000,$0328|$2000
FFFF8EE4                            ;
FFFF8EE4                            ;    		dc.l fm_hatclosed
FFFF8EE4                            ;    		dc.w $051C|$2000,$0328|$2000
FFFF8EE4                            ;    		dc.w $005E|$2000,$0328|$2000	
FFFF8EE4                            
FFFF8EE4                            ; ================================================================
FFFF8EE4                            
FFFF8EE4                            			rsreset
FFFF8EE4 =00000000                  DrvStatus		rs.b 1		;Byte
FFFF8EE4 =00000001                  snd_flags		rs.b 1		;Byte
FFFF8EE4 =00000002                  PatternEnd		rs.b 1		;Byte
FFFF8EE4 =00000003                  PatternLoop		rs.b 1		;Byte
FFFF8EE4 =00000004                  SongRequest		rs.l 1 		;Long
FFFF8EE4 =00000008                  SongStart		rs.l 1		;Long
FFFF8EE4 =0000000C                  SongRead		rs.l 1		;Long
FFFF8EE4 =00000010                  snd_instr		rs.l 1		;Long
FFFF8EE4 =00000014                  SongPcmSamp		rs.l 1		;Long
FFFF8EE4 =00000018                  TicksRequest		rs.w 1		;Word
FFFF8EE4 =0000001A                  TicksRead		rs.w 1		;Word
FFFF8EE4 =0000001C                  TicksSet		rs.w 1		;Word
FFFF8EE4 =0000001E                  TempoRead 		rs.w 1		;Word
FFFF8EE4 =00000020                  PattSize		rs.w 1		;Word
FFFF8EE4 =00000022                  pattr_read		rs.w 1		;Word
FFFF8EE4 =00000024                  CdOnlyFlags		rs.w 1		;Word
FFFF8EE4 =00000026                  CurrPattern		rs.b 1		;Byte
FFFF8EE4 =00000027                  PcmChnOnOff		rs.b 1		;Byte
FFFF8EE4 =00000028                  PsgLast			rs.b 1		;Byte
FFFF8EE4 =00000029                  snd_flagsBGM		rs.b 1		;Byte
FFFF8EE4 =0000002A                  LastPattChn		rs.b 1		;Byte
FFFF8EE4 =0000002B                  Psg_Vibrato		rs.b 1		;Byte
FFFF8EE4 =0000002C                  Psg_AutoVol		rs.b 1		;Byte
FFFF8EE4 =0000002E                  sizeof_SndBuff		rs.l 0
FFFF8EE4                            
FFFF8EE4                            ; --------------------------------------------
FFFF8EE4                            ; Channel settings
FFFF8EE4                            ; --------------------------------------------
FFFF8EE4                            
FFFF8EE4                            			rsreset
FFFF8EE4 =00000000                  Chn_Freq		rs.w 1		;Word
FFFF8EE4 =00000002                  Chn_Effect		rs.w 1		;Word
FFFF8EE4 =00000004                  Chn_Portam		rs.w 1		;Word
FFFF8EE4 =00000006                  Chn_Type		rs.b 1		;Byte
FFFF8EE4 =00000007                  Chn_ID			rs.b 1		;Byte
FFFF8EE4 =00000008                  Chn_Inst		rs.b 1		;Byte
FFFF8EE4 =00000009                  Chn_Vol			rs.b 1		;Byte
FFFF8EE4 =0000000A                  Chn_MainVol		rs.b 1		;Byte
FFFF8EE4 =0000000B                  Chn_Note		rs.b 1		;Byte
FFFF8EE4 =0000000C                  Chn_Pan			rs.b 1		;Byte
FFFF8EE4 =0000000D                  Chn_FM_Key		rs.b 1		;Byte
FFFF8EE4 =0000000E                  Chn_PCM_Pitch		rs.b 1		;Byte
FFFF8EE4                            ; Chn_PSG_Vibrato		rs.b 1		;Byte
FFFF8EE4 =0000000F                  Chn_Timer		rs.b 1
FFFF8EE4 =00000010                  sizeof_Chn		rs.l 0
FFFF8EE4                             
FFFF8EE4                             
FFFF8EE4                            			rsreset
FFFF8EE4 =00000000                  instDYmha		rs.w 1
FFFF8EE4 =00000002                  instDPsg		rs.w 1
FFFF8EE4 =00000004                  instDNoise		rs.w 1
FFFF8EE4 =00000006                  instDpsmpl		rs.w 1
FFFF8EE4                            
FFFF8EE4                            ; --------------------------------------------
FFFF8EE4                            ; Bits
FFFF8EE4                            ; --------------------------------------------
FFFF8EE4                            
FFFF8EE4 =00000000                  bitPriority		equ	0
FFFF8EE4 =00000001                  bitSfxOn		equ	1
FFFF8EE4 =00000002                  bitEnabled		equ	2
FFFF8EE4                            
FFFF8EE4                            ;Status
FFFF8EE4 =00000000                  bitFmDac		equ	0
FFFF8EE4 =00000001                  bitDacNote		equ	1
FFFF8EE4 =00000002                  bitTone3		equ	2
FFFF8EE4 =00000003                  bitSpecial3		equ	3
FFFF8EE4                            
FFFF8EE4                            ; --------------------------------------------
FFFF8EE4                            ; Channel IDs
FFFF8EE4                            ; --------------------------------------------
FFFF8EE4                            
FFFF8EE4 =00000000                  FM_1			equ	$00
FFFF8EE4 =00000001                  FM_2			equ	$01
FFFF8EE4 =00000002                  FM_3			equ	$02
FFFF8EE4 =00000004                  FM_4			equ	$04
FFFF8EE4 =00000005                  FM_5			equ	$05
FFFF8EE4 =00000006                  FM_6			equ	$06
FFFF8EE4 =00000080                  PSG_1			equ	$80
FFFF8EE4 =000000A0                  PSG_2			equ	$A0
FFFF8EE4 =000000C0                  PSG_3			equ	$C0
FFFF8EE4 =000000E0                  NOISE			equ	$E0
FFFF8EE4 =00000010                  PCM_1			equ	$10
FFFF8EE4 =00000011                  PCM_2			equ	$11
FFFF8EE4 =00000012                  PCM_3			equ	$12
FFFF8EE4 =00000013                  PCM_4			equ	$13
FFFF8EE4 =00000014                  PCM_5			equ	$14
FFFF8EE4 =00000015                  PCM_6			equ	$15
FFFF8EE4 =00000016                  PCM_7			equ	$16
FFFF8EE4 =00000017                  PCM_8			equ	$17
FFFF8EE4 =00000012                  max_chnl		equ	18
FFFF8EE4                            
FFFF8EE4                            ; --------------------------------------------
FFFF8EE4                            ; .IT request ($80+) format
FFFF8EE4                            ; --------------------------------------------
FFFF8EE4                            
FFFF8EE4 =00000000                  bitNote			equ	0
FFFF8EE4 =00000001                  bitInst			equ	1
FFFF8EE4 =00000002                  bitVolume		equ	2
FFFF8EE4 =00000003                  bitEffect		equ	3
FFFF8EE4 =00000004                  bitSameNote		equ	4
FFFF8EE4 =00000005                  bitSameInst		equ	5
FFFF8EE4 =00000006                  bitSameVol		equ	6
FFFF8EE4 =00000007                  bitSameEffect		equ	7
FFFF8EE4                            
FFFF8EE4                            ; --------------------------------------------
FFFF8EE4                            ; RAM
FFFF8EE4                            ; 
FFFF8EE4                            ; MAX: $400
FFFF8EE4                            ; --------------------------------------------
FFFF8EE4                            
FFFF8EE4                            			rsset RAM_Audio
FFFF8EE4 =FFFFEF00                  RAM_SMEG_Buffer		rs.b sizeof_SndBuff
FFFF8EE4 =FFFFEF2E                  RAM_SMEG_SfxBuff	rs.b sizeof_SndBuff
FFFF8EE4 =FFFFEF5C                  RAM_SMEG_PrioList	rs.b max_chnl
FFFF8EE4 =FFFFEF6E                  RAM_SMEG_Chnls_BGM	rs.b $10*max_chnl
FFFF8EE4 =FFFFF08E                  RAM_SMEG_Chnls_SFX	rs.b $10*max_chnl
FFFF8EE4 =FFFFF1AE                  RAM_SMEG_PcmList	rs.l 64
FFFF8EE4                            			
FFFF8EE4 =FFFFF2AE                  sizeof_SMEG		rs.l 0
FFFF8EE4                            ;      			inform 0,"SMEG Uses: %h",sizeof_SMEG-RAM_Audio
FFFF8EE4                            			
FFFF8EE4                            ; ================================================================
FFFF8EE4                            ; -------------------------------------------
FFFF8EE4                            ; Macros
FFFF8EE4                            ; -------------------------------------------
FFFF8EE4                            
FFFF8EE4                            ; -----------------------------------------
FFFF8EE4                            
FFFF8EE4                            PCM_Entry	macro	cd_side,mars_side,loop,pitch
FFFF8EE4                            		
FFFF8EE4                            cdsize_size	= strlen(\cd_side)
FFFF8EE4                            		if MCD
FFFF8EE4                            		  if cdsize_size>$C
FFFF8EE4                            		    inform 2,"(SMEG) CD FILENAME TOO LONG"
FFFF8EE4                            		  elseif cdsize_size=$C
FFFF8EE4                            		    dc.b \cd_side
FFFF8EE4                            		  elseif cdsize_size<$C
FFFF8EE4                            		    dc.b \cd_side
FFFF8EE4                            		    rept $C-cdsize_size
FFFF8EE4                            		      dc.b 0
FFFF8EE4                            		    endr
FFFF8EE4                            		  elseif cdsize_size<=0
FFFF8EE4                            		    inform 2,"(SMEG) YOU FORGOT THE CD FILENAME"
FFFF8EE4                            		  endif
FFFF8EE4                            		  
FFFF8EE4                            		elseif MARS
FFFF8EE4                            		  dc.l mars_side
FFFF8EE4                            		endif
FFFF8EE4                            		
FFFF8EE4                            		dc.w loop
FFFF8EE4                            		dc.w pitch
FFFF8EE4                            		endm
FFFF8EE4                            
FFFF8EE4                            ; 		inform 0,"%h",RAM_SMEG_Buffer
FFFF8EE4                            
FFFF8EE4                            ; ================================================================
FFFF8EE4                            ; -------------------------------------------
FFFF8EE4                            ; External Calls
FFFF8EE4                            ; -------------------------------------------
FFFF8EE4                            
FFFF8EE4                            ;SegaPCM
FFFF8EE4 =00000020                  CdTask_LoadPcm		equ	$20
FFFF8EE4 =00000021                  CdTask_SetAddr		equ	$21
FFFF8EE4 =00000022                  CdTask_SetFreq		equ	$22
FFFF8EE4 =00000023                  CdTask_SetPan		equ	$23
FFFF8EE4 =00000024                  CdTask_SetEnv		equ	$24
FFFF8EE4 =00000025                  CdTask_SetOnOff		equ	$25
FFFF8EE4 =00000026                  CdTask_ClearAllPcm	equ	$26
FFFF8EE4                            
FFFF8EE4                            ;MARS
FFFF8EE4 =00000001                  marscall_Play		equ	1
FFFF8EE4 =00000002                  marscall_Stop		equ	2
FFFF8EE4 =00000003                  marscall_SetSmpl	equ	3
FFFF8EE4 =00000004                  marscall_SetVol		equ	4
FFFF8EE4 =00000005                  marscall_SetEntry	equ	5
FFFF8EE4                            	
FFFF8EE4                            ; ================================================================
FFFF8EE4                            ; -------------------------------------------
FFFF8EE4                            ; Init
FFFF8EE4                            ; -------------------------------------------
FFFF8EE4                            
FFFF8EE4                            Audio_Init:
FFFF8EE4 41F9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a0
FFFF8EEA 303C 02FF                  		move.w	#$2FF,d0
FFFF8EEE                            @ClrAll:
FFFF8EEE 4298                       		clr.l	(a0)+
FFFF8EF0 51C8 FFFC                  		dbf	d0,@ClrAll
FFFF8EF4                            		
FFFF8EF4                            ; -------------------------------------------
FFFF8EF4                            ; Z80
FFFF8EF4                            ; -------------------------------------------
FFFF8EF4                            
FFFF8EF4                            SMEG_Z80_Init:
FFFF8EF4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
FFFF8EFC 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
FFFF8F04                            @WaitZ80:
FFFF8F04 0839 0000 00A1 1100        		btst	#0,($A11100).l
FFFF8F0C 66F6                       		bne.s	@WaitZ80
FFFF8F0E                            
FFFF8F0E 41F9 00A0 0000             		lea	($A00000).l,a0
FFFF8F14 303C 1FFF                  		move.w	#$1FFF,d0
FFFF8F18                            @cleanup:
FFFF8F18 4218                       		clr.b	(a0)+
FFFF8F1A 51C8 FFFC                  		dbf	d0,@cleanup
FFFF8F1E                            		
FFFF8F1E 41FA 0000                  		lea	Z80_Driver(pc),a0
FFFF8F22 43F9 00A0 0000             		lea	($A00000).l,a1
FFFF8F28 323C 0000                  		move.w	#Z80_DriverEnd-Z80_Driver,d1
FFFF8F2C                            @ToZ80:
FFFF8F2C 12D8                       		move.b	(a0)+,(a1)+
FFFF8F2E 51C9 FFFC                  		dbf	d1,@ToZ80
FFFF8F32                            
FFFF8F32                            ; -----------------------------------
FFFF8F32                            
FFFF8F32 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
FFFF8F3A 4E71                       		nop
FFFF8F3C 4E71                       		nop
FFFF8F3E 4E71                       		nop
FFFF8F40 4E71                       		nop
FFFF8F42 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
FFFF8F4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF8F52                            ; 		rts
FFFF8F52                            		
FFFF8F52                            ; -------------------------------------------
FFFF8F52                            ; Stop ALL Sound
FFFF8F52                            ; -------------------------------------------
FFFF8F52                            
FFFF8F52                            SMEG_StopSnd:
FFFF8F52 103C 002B                  		move.b	#$2B,d0
FFFF8F56 123C 0000                  		move.b	#$00,d1
FFFF8F5A 6100 0000                  		bsr	SMEG_Z80_Off
FFFF8F5E 6100 0000                  		bsr	FM_RegWrite_1
FFFF8F62 6100 0000                  		bsr	SMEG_Z80_On
FFFF8F66 6100 0000                  		bsr	Audio_Sample_Stop
FFFF8F6A                            		
FFFF8F6A 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
FFFF8F70 0896 0002                  		bclr	#bitEnabled,(a6)
FFFF8F74                            	
FFFF8F74 6100 0000                  		bsr	SMEG_FM_Reset
FFFF8F78 6100 0000                   		bsr	SMEG_PSG_Reset
FFFF8F7C 6000 0000                  		bra	SMEG_PCM_Reset
FFFF8F80                            		
FFFF8F80                            ; -------------------------------------------
FFFF8F80                            ; Play Song
FFFF8F80                            ; -------------------------------------------
FFFF8F80                            
FFFF8F80                            SMEG_PlaySong:
FFFF8F80 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
FFFF8F86 08D6 0002                  		bset	#bitEnabled,(a6)
FFFF8F8A 4E75                       		rts
FFFF8F8C                            		
FFFF8F8C                            ; -------------------------------------------
FFFF8F8C                            ; Load Song
FFFF8F8C                            ;
FFFF8F8C                            ; d0 - StartOfSong
FFFF8F8C                            ; d1 - Ticks
FFFF8F8C                            ; d2 - Type (0 - song, 1 - sfx)
FFFF8F8C                            ; -------------------------------------------
FFFF8F8C                            
FFFF8F8C                            Audio_Track_Play:
FFFF8F8C 4A42                       		tst.w	d2
FFFF8F8E 6600                       		bne.s	@Sfx
FFFF8F90                            		
FFFF8F90 23C0 FFFF EF04             		move.l	d0,(RAM_SMEG_Buffer+SongRequest)
FFFF8F96 33C1 FFFF EF18             		move.w	d1,(RAM_SMEG_Buffer+TicksRequest)
FFFF8F9C 4E75                       		rts
FFFF8F9E                            @Sfx:
FFFF8F9E                            ; 		clr.w	(RAM_SMEG_SfxBuff+pattr_read)
FFFF8F9E                            ; 		clr.w	(RAM_SMEG_SfxBuff+CurrPattern)
FFFF8F9E                            ; 		move.l	(RAM_SMEG_SfxBuff+SongStart),(RAM_SMEG_SfxBuff+SongRead)
FFFF8F9E                            ; 		cmp.l	(RAM_SMEG_SfxBuff+SongRequest),d0
FFFF8F9E                            ; 		bne.s	@SameSfx
FFFF8F9E                            		
FFFF8F9E 23C0 FFFF EF32             		move.l	d0,(RAM_SMEG_SfxBuff+SongRequest)
FFFF8FA4 33C1 FFFF EF46             		move.w	d1,(RAM_SMEG_SfxBuff+TicksRequest)
FFFF8FAA                            @SameSfx:
FFFF8FAA 4E75                       		rts
FFFF8FAC                            		
FFFF8FAC                            ; ================================================================
FFFF8FAC                            ; -------------------------------------------
FFFF8FAC                            ; Run
FFFF8FAC                            ; -------------------------------------------
FFFF8FAC                            
FFFF8FAC                            Audio_Run:
FFFF8FAC 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
FFFF8FB2 6100 0000                  		bsr	@RequestSong
FFFF8FB6 0896 0000                  		bclr	#bitPriority,(a6)
FFFF8FBA 6100 0000                                  bsr	@ReadRow
FFFF8FBE                            
FFFF8FBE 4DF9 FFFF EF2E               		lea	(RAM_SMEG_SfxBuff),a6
FFFF8FC4 6100 0000                   		bsr	@RequestSfx
FFFF8FC8 08D6 0000                  		bset	#bitPriority,(a6)
FFFF8FCC 6100 0000                  		bsr	@ReadRow
FFFF8FD0                            		
FFFF8FD0                            ; -------------------------
FFFF8FD0                            ; MARS ONLY
FFFF8FD0                            ; Transfer 68k RAM using
FFFF8FD0                            ; framebuffer (offside)
FFFF8FD0                            ; -------------------------
FFFF8FD0                            
FFFF8FD0                            ; @marsturn:
FFFF8FD0                            ; 		btst	#7,(marsreg)	
FFFF8FD0                            ; 		bne.s	@busymars
FFFF8FD0                            ; 		
FFFF8FD0                            ; 		bchg	#0,($A1518B)
FFFF8FD0                            ; @waitfb:	btst	#1,($A1518B)
FFFF8FD0                            ; 		bne.s	@waitfb
FFFF8FD0                            ; 		lea	(RAM_SMEG_Chnls_BGM),a0
FFFF8FD0                            ; 		lea	(framebuffer+$14000),a1
FFFF8FD0                            ; 		move.w	#$10*max_chnl,d0
FFFF8FD0                            ; @copytomars:	
FFFF8FD0                            ; 		move.b	(a0)+,(a1)+
FFFF8FD0                            ; 		dbf	d0,@copytomars
FFFF8FD0                            ; 		bchg	#0,($A1518B)
FFFF8FD0                            ; @busymars:
FFFF8FD0                            
FFFF8FD0                            ; -------------------------
FFFF8FD0                            
FFFF8FD0                            @Wait:
FFFF8FD0 4E75                       		rts
FFFF8FD2                            
FFFF8FD2                            ; -------------------------------------------
FFFF8FD2                            ; Request song
FFFF8FD2                            ; -------------------------------------------
FFFF8FD2                            	
FFFF8FD2                            @RequestSong:
FFFF8FD2 4AAE 0004                  		tst.l	SongRequest(a6)
FFFF8FD6 6700                       		beq.s	@Same
FFFF8FD8 0896 0002                  		bclr	#bitEnabled,(a6)
FFFF8FDC 6100 FF74                   		bsr	SMEG_StopSnd			;d0-d1 are gone
FFFF8FE0 4AAE 0004                   		tst.l	SongRequest(a6)
FFFF8FE4 6B00                        		bmi.s	@Same
FFFF8FE6                             		
FFFF8FE6 422E 0026                  		clr.b	CurrPattern(a6)
FFFF8FEA 422E 0002                  		clr.b	PatternEnd(a6)
FFFF8FEE 426E 0020                  		clr.w	PattSize(a6)
FFFF8FF2 426E 0022                  		clr.w	pattr_read(a6)
FFFF8FF6 4BF9 FFFF EF6E             		lea	(RAM_SMEG_Chnls_BGM),a5
FFFF8FFC 422E 0027                  		clr.b	PcmChnOnOff(a6)
FFFF9000 422E 0000                                  clr.b	DrvStatus(a6)
FFFF9004 6100 0000                  		bsr	SMEG_Load_SetChnls
FFFF9008 6100 0000                   		bsr	SMEG_Load_SetExtChnls
FFFF900C 08D6 0002                  		bset	#bitEnabled,(a6)
FFFF9010                            
FFFF9010 426E 0018                  		clr.w	TicksRequest(a6)
FFFF9014 42AE 0004                  		clr.l	SongRequest(a6)
FFFF9018                            @Same:
FFFF9018 4E75                       		rts
FFFF901A                            		
FFFF901A                            ; -------------------------------------------
FFFF901A                            ; Request sfx
FFFF901A                            ; -------------------------------------------
FFFF901A                            
FFFF901A                            @RequestSfx:
FFFF901A 4AAE 0004                  		tst.l	SongRequest(a6)
FFFF901E 67F8                       		beq.s	@Same
FFFF9020 6BF6                       		bmi.s	@Same
FFFF9022                            		
FFFF9022 0896 0002                  		bclr	#bitEnabled,(a6)
FFFF9026 422E 0026                  		clr.b	CurrPattern(a6)
FFFF902A 422E 0002                  		clr.b	PatternEnd(a6)
FFFF902E 426E 0020                  		clr.w	PattSize(a6)
FFFF9032 426E 0022                  		clr.w	pattr_read(a6)
FFFF9036                            		
FFFF9036 422E 0027                  		clr.b	PcmChnOnOff(a6)
FFFF903A 422E 0000                                  clr.b	DrvStatus(a6)
FFFF903E                            ;                 bset	#bitSfxOn,(a6)
FFFF903E 4BF9 FFFF F08E             		lea	(RAM_SMEG_Chnls_SFX),a5
FFFF9044 6100 0000                  		bsr	SMEG_Load_SetChnls
FFFF9048 6100 0000                  		bsr	SMEG_Load_FixSfx
FFFF904C 08D6 0002                  		bset	#bitEnabled,(a6)
FFFF9050                            		
FFFF9050 426E 0018                  		clr.w	TicksRequest(a6)
FFFF9054 42AE 0004                  		clr.l	SongRequest(a6)
FFFF9058 4E75                       		rts
FFFF905A                            		
FFFF905A                            ; -------------------------------------------
FFFF905A                            ; Read row
FFFF905A                            ; -------------------------------------------
FFFF905A                            
FFFF905A                            @ReadRow:
FFFF905A 0816 0002                  		btst	#bitEnabled,(a6)
FFFF905E 6700 FF70                  		beq	@Wait
FFFF9062                            
FFFF9062 046E 0001 001A             		sub.w	#1,TicksRead(a6)
FFFF9068 6A00 FF66                  		bpl	@Wait
FFFF906C 3D6E 001C 001A              		move.w	TicksSet(a6),TicksRead(a6)
FFFF9072                            
FFFF9072                            @NewRow:
FFFF9072 286E 000C                                  movea.l	SongRead(a6),a4
FFFF9076                            
FFFF9076                            ; --------------------------------
FFFF9076                            ; New pattern
FFFF9076                            ; --------------------------------
FFFF9076                            
FFFF9076                            @Next:
FFFF9076 7A00                       		moveq	#0,d5
FFFF9078 7C00                       		moveq	#0,d6
FFFF907A 3C2E 0020                   		move.w	PattSize(a6),d6
FFFF907E 0446 0001                    		sub.w	#1,d6
FFFF9082 3A2E 0022                    		move.w	pattr_read(a6),d5
FFFF9086 BC85                        		cmp.l	d5,d6
FFFF9088 6400                        		bcc.s	@NoNextRow
FFFF908A                             		
FFFF908A 426E 0022                  		clr.w	pattr_read(a6)
FFFF908E 7A00                       		moveq	#0,d5
FFFF9090 7C00                       		moveq	#0,d6
FFFF9092 1C2E 0002                  		move.b	PatternEnd(a6),d6
FFFF9096 1A2E 0026                  		move.b	CurrPattern(a6),d5
FFFF909A BC45                       		cmp.w	d5,d6
FFFF909C 6E00                       		bgt.s	@NotEnd
FFFF909E                            		
FFFF909E 0C2E 00FF 0003             		cmp.b	#-1,PatternLoop(a6)
FFFF90A4 6700                       		beq.s	@exit
FFFF90A6                            		
FFFF90A6 286E 0008                  		movea.l	SongStart(a6),a4
FFFF90AA 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
FFFF90AE 1D5C 0020                   		move.b	(a4)+,PattSize(a6)
FFFF90B2 D8FC 0006                   		adda	#6,a4
FFFF90B6 2D4C 000C                  		move.l	a4,SongRead(a6)
FFFF90BA 1D6E 0003 0026             		move.b	PatternLoop(a6),CurrPattern(a6)
FFFF90C0 426E 001A                  		clr.w	TicksRead(a6)
FFFF90C4 4E75                       		rts
FFFF90C6                            		
FFFF90C6                            @exit:
FFFF90C6 0896 0002                  		bclr	#bitEnabled,(a6)
FFFF90CA 4E75                       		rts
FFFF90CC                            
FFFF90CC                            ; --------------------------------
FFFF90CC                            
FFFF90CC                            @NotEnd:
FFFF90CC 062E 0001 0026             		add.b	#1,CurrPattern(a6)
FFFF90D2 7000                       		moveq	#0,d0
FFFF90D4 102E 0026                  		move.b	CurrPattern(a6),d0
FFFF90D8 B02E 0003                  		cmp.b	PatternLoop(a6),d0
FFFF90DC 6600                       		bne.s	@DontSaveLoop
FFFF90DE 2D4C 0008                  		move.l	a4,SongStart(a6)
FFFF90E2                            @DontSaveLoop:
FFFF90E2 7200                       		moveq	#0,d1
FFFF90E4 121C                       		move.b	(a4)+,d1
FFFF90E6 141C                       		move.b	(a4)+,d2
FFFF90E8 E14A                       		lsl.w	#8,d2
FFFF90EA 8242                       		or	d2,d1
FFFF90EC 3D41 0020                  		move.w	d1,PattSize(a6)
FFFF90F0 D8FC 0006                  		adda	#6,a4
FFFF90F4                            		
FFFF90F4                            ; --------------------------------
FFFF90F4                            ; Current pattern
FFFF90F4                            ; --------------------------------
FFFF90F4                            
FFFF90F4                            @NoNextRow:
FFFF90F4 7C00                       		moveq	#0,d6
FFFF90F6 7000                       		moveq	#0,d0
FFFF90F8 101C                       		move.b	(a4)+,d0
FFFF90FA                            
FFFF90FA 4A40                       		tst.w	d0
FFFF90FC 6600                       		bne.s	@ValidNote
FFFF90FE                            
FFFF90FE 066E 0001 0022             		add.w	#1,pattr_read(a6)
FFFF9104 2D4C 000C                  		move.l	a4,SongRead(a6)
FFFF9108 4E75                       		rts
FFFF910A                            
FFFF910A                            @ValidNote:
FFFF910A 4A00                       		tst.b	d0
FFFF910C 6A00                       		bpl.s	@Not80
FFFF910E 066E 0001 0022             		add.w	#1,pattr_read(a6)
FFFF9114 0880 0007                  		bclr	#7,d0
FFFF9118 1C1C                       		move.b	(a4)+,d6
FFFF911A                            @Not80:
FFFF911A 066E 0001 0022             		add.w	#1,pattr_read(a6)
FFFF9120 0440 0001                  		sub.w	#1,d0
FFFF9124 1D40 002A                  		move.b	d0,LastPattChn(a6)
FFFF9128                            
FFFF9128 4BF9 FFFF EF6E             		lea 	(RAM_SMEG_Chnls_BGM),a5
FFFF912E 0816 0000                  		btst 	#bitPriority,(a6)
FFFF9132 6700                       		beq.s	@MusicPrio
FFFF9134 4BF9 FFFF F08E             		lea 	(RAM_SMEG_Chnls_SFX),a5	
FFFF913A                            @MusicPrio:
FFFF913A C0FC 0010                  		mulu.w	#sizeof_Chn,d0
FFFF913E DAC0                       		adda	d0,a5
FFFF9140                            		
FFFF9140 4A46                       		tst.w	d6
FFFF9142 6700                       		beq.s	@NotRest
FFFF9144 1B46 0006                  		move.b	d6,Chn_Type(a5)
FFFF9148                            @NotRest:
FFFF9148                            
FFFF9148                            ; SFX: Mark used channel
FFFF9148                            
FFFF9148 0816 0000                  		btst 	#bitPriority,(a6)
FFFF914C 6700                       		beq.s	@MusicPrio2
FFFF914E 6100 0000                  		bsr	SMEG_FindPrioSlot
FFFF9152 16BC 0001                    		move.b	#1,(a3)
FFFF9156                            @MusicPrio2:
FFFF9156                             
FFFF9156                            ; -------------
FFFF9156                            ; Note
FFFF9156                            ; -------------
FFFF9156                            
FFFF9156 082D 0004 0006             		btst	#bitSameNote,Chn_Type(a5)
FFFF915C 6600                       		bne.s	@PlayOnly
FFFF915E 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
FFFF9164 6700                       		beq.s	@NoNote
FFFF9166                            
FFFF9166 426D 0004                  		clr.w	Chn_Portam(a5)
FFFF916A 1B5C 000B                                  move.b	(a4)+,Chn_Note(a5)
FFFF916E 066E 0001 0022             		add.w	#1,pattr_read(a6)
FFFF9174                            
FFFF9174                            @PlayOnly:
FFFF9174                            ; 		bsr	SMEG_ChannelRest
FFFF9174                            
FFFF9174                            @NoNote:
FFFF9174                            
FFFF9174                            ; -------------
FFFF9174                            ; Instrument
FFFF9174                            ; -------------
FFFF9174                            
FFFF9174 082D 0005 0006              		btst	#bitSameInst,Chn_Type(a5)
FFFF917A 6600                       		bne.s	@SameInst
FFFF917C 082D 0001 0006             		btst	#bitInst,Chn_Type(a5)
FFFF9182 6700                       		beq.s	@NoInst
FFFF9184                            
FFFF9184 1B5C 0008                  		move.b	(a4)+,Chn_Inst(a5)
FFFF9188 066E 0001 0022             		add.w	#1,pattr_read(a6)
FFFF918E                            
FFFF918E                            @SameInst:
FFFF918E 6100 0000                  		bsr	SMEG_SetVoice
FFFF9192                            @NoInst:
FFFF9192                            
FFFF9192                            ; -------------
FFFF9192                            ; Volume
FFFF9192                            ; -------------
FFFF9192                            
FFFF9192 082D 0006 0006              		btst	#bitSameVol,Chn_Type(a5)
FFFF9198 6600                        		bne.s	@SameVol
FFFF919A 082D 0002 0006             		btst	#bitVolume,Chn_Type(a5)
FFFF91A0 6700                       		beq.s	@NoVolume
FFFF91A2                            
FFFF91A2 7000                       		moveq 	#0,d0
FFFF91A4 101C                       		move.b 	(a4)+,d0
FFFF91A6 1B40 0009                  		move.b	d0,chn_vol(a5)
FFFF91AA 066E 0001 0022             		add.w 	#1,pattr_read(a6)
FFFF91B0                            @NoVolume:
FFFF91B0                            @SameVol:
FFFF91B0 6100 0000                   		bsr	@ChnVolume
FFFF91B4                             		
FFFF91B4                            ; -------------
FFFF91B4                            ; Effect
FFFF91B4                            ; -------------
FFFF91B4                            
FFFF91B4 082D 0007 0006              		btst	#bitSameEffect,Chn_Type(a5)
FFFF91BA 6600                        		bne.s	@SameEffect
FFFF91BC 082D 0003 0006             		btst	#bitEffect,Chn_Type(a5)
FFFF91C2 6700                       		beq.s	@NoEffect
FFFF91C4                            
FFFF91C4 1B5C 0002                  		move.b	(a4)+,Chn_Effect(a5)
FFFF91C8 066E 0001 0022             		add.w	#1,pattr_read(a6)
FFFF91CE 1B5C 0003                  		move.b	(a4)+,Chn_Effect+1(a5)
FFFF91D2 066E 0001 0022             		add.w	#1,pattr_read(a6)
FFFF91D8                            @SameEffect:
FFFF91D8 6100 0000                  		bsr	@ChannelEffects
FFFF91DC                            @NoEffect:
FFFF91DC                            
FFFF91DC                            ; --------------
FFFF91DC                            ; Play the note
FFFF91DC                            ; --------------
FFFF91DC                            
FFFF91DC 082D 0004 0006              		btst	#bitSameNote,Chn_Type(a5)
FFFF91E2 6600                        		bne.s	@SameNote
FFFF91E4 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
FFFF91EA 6700 FE8A                  		beq	@Next
FFFF91EE                            @SameNote:
FFFF91EE 6100 0000                  		bsr	@ChannelPlay
FFFF91F2 6000 FE82                  		bra	@Next
FFFF91F6                            
FFFF91F6                            ; ================================================================
FFFF91F6                            ; -------------------------------
FFFF91F6                            ; PCM Frequencies
FFFF91F6                            ; -------------------------------
FFFF91F6                            
FFFF91F6                            @Notes_PCM:
FFFF91F6 0000 0000 0000 0000 0000+   		dc.w     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0	;0
FFFF920E 0000 0000 0000 0000 0000+   		dc.w     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0	;1
FFFF9226 0000 0000 0000 0000 0000+  		dc.w     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0	;2
FFFF923E 00F6 0104 0113 0124 0135+  		dc.w $00F6,$0104,$0113,$0124,$0135,$0148,$015B,$0170,$0186,$019D,$01B5,$01D0	;3
FFFF9256 01EB 0208 0228 0248 026B+  		dc.w $01EB,$0208,$0228,$0248,$026B,$0291,$02B8,$02E1,$030E,$033C,$036E,$03A3	;4 16000hz
FFFF926E 03DA 0415 0454 0497 04DD+  		dc.w $03DA,$0415,$0454,$0497,$04DD,$0528,$0578,$05CB,$0625,$0684,$06E8,$0753	;5
FFFF9286 07C4 083B 08B0 093D 09C7+  		dc.w $07C4,$083B,$08B0,$093D,$09C7,$0A60,$0AF8,$0BA8,$0C55,$0D10,$0DE2,$0EBE	;6
FFFF929E 0FA4 107A 1186 1280 1396+  		dc.w $0FA4,$107A,$1186,$1280,$1396,$14CC,$1624,$1746,$18DE,$1A38,$1BE0,$1D94	;7
FFFF92B6 1F65 20FF 2330 2526 2753+  		dc.w $1F65,$20FF,$2330,$2526,$2753,$29B7,$2C63,$2F63,$31E0,$347B,$377B,$3B41	;8
FFFF92CE 3EE8 4206 4684 4A5A 4EB5+  		dc.w $3EE8,$4206,$4684,$4A5A,$4EB5,$5379,$58E1,$5DE0,$63C0,$68FF,$6EFF,$783C	;9
FFFF92E6 7FC2 83FC 8D14 9780 9D80+  		dc.w $7FC2,$83FC,$8D14,$9780,$9D80,$AA5D,$B1F9,$BBBA,$CC77,$D751,$E333,$F0B5
FFFF92FE 0000 0000 0000 0000 0000+  		dc.w     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
FFFF9316                            		even
FFFF9316                            		
FFFF9316                            		
FFFF9316                            ; ================================================================
FFFF9316                            ; -------------------------------
FFFF9316                            ; Set Volume
FFFF9316                            ; -------------------------------
FFFF9316                            
FFFF9316                            @ChnVolume:
FFFF9316 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
FFFF931C 6700 0000                  		beq	@Return
FFFF9320                            
FFFF9320 0816 0000                  		btst	#bitPriority,(a6)
FFFF9324 6600                       		bne.s	@SFX_ModeV
FFFF9326 6100 0000                  		bsr	SMEG_FindPrioSlot
FFFF932A 4A13                         		tst.b	(a3)
FFFF932C 6600 0000                    		bne	@Return
FFFF9330                            @SFX_ModeV:
FFFF9330                            
FFFF9330 4A2D 0007                  		tst.b	Chn_ID(a5)
FFFF9334 6B00 0000                  		bmi	@ChnVol_PSG
FFFF9338 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
FFFF933E 6C00 0000                  		bge	@ChnVol_PCM
FFFF9342                            		
FFFF9342 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
FFFF9348 6600                       		bne.s	@NotSmplChk
FFFF934A 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
FFFF9350 6600 0000                  		bne	@Return
FFFF9354                            @NotSmplChk:
FFFF9354                            
FFFF9354                            ; -------------------------------
FFFF9354                            ; FM Volume
FFFF9354                            ; -------------------------------
FFFF9354                            
FFFF9354 6100 0000                  		bsr	ChnlFM_srchIns
FFFF9358 223C 7F7F 7F7F             		move.l	#$7F7F7F7F,d1
FFFF935E 0C42 FFFF                  		cmp.w	#-1,d2
FFFF9362 6700 0000                  		beq	@ForceOff
FFFF9366 0802 0007                   		btst	#7,d2
FFFF936A 6600 0000                   		bne	@ForceOff
FFFF936E                             		
FFFF936E                            ;  		cmp.b	#64,chn_vol(a5)
FFFF936E                            ;  		bge	@Return
FFFF936E                            	
FFFF936E D6FC 0004                   		adda.w	#4,a3
FFFF9372 2653                       		movea.l	(a3),a3
FFFF9374 D6FC 0015                    		adda	#$15,a3
FFFF9378                            		
FFFF9378 203C 4C44 4840             		move.l	#$4C444840,d0
FFFF937E 7200                        		moveq	#0,d1
FFFF9380 7400                        		moveq	#0,d2
FFFF9382 7600                        		moveq	#0,d3
FFFF9384 162D 0007                   		move.b	chn_id(a5),d3
FFFF9388 0243 0003                   		and.w	#%11,d3
FFFF938C                            
FFFF938C                             		;TODO: checar bien los TL
FFFF938C 122B 0003                   		move.b	3(a3),d1
FFFF9390 142D 0009                   		move.b	chn_vol(a5),d2
FFFF9394 0402 0040                   		sub.b	#64,d2
FFFF9398 9202                        		sub.b	d2,d1
FFFF939A E189                        		lsl.l	#8,d1
FFFF939C                             		
FFFF939C 122B 0002                   		move.b	2(a3),d1
FFFF93A0 142D 0009                   		move.b	chn_vol(a5),d2
FFFF93A4 0402 0040                   		sub.b	#64,d2
FFFF93A8 9202                        		sub.b	d2,d1
FFFF93AA E189                         		lsl.l	#8,d1
FFFF93AC                              		
FFFF93AC 122B 0001                   		move.b	1(a3),d1
FFFF93B0 142D 0009                   		move.b	chn_vol(a5),d2
FFFF93B4 0402 0040                   		sub.b	#64,d2
FFFF93B8 9202                        		sub.b	d2,d1
FFFF93BA E189                         		lsl.l	#8,d1
FFFF93BC                              		
FFFF93BC 1213                        		move.b	(a3),d1
FFFF93BE 142D 0009                   		move.b	chn_vol(a5),d2
FFFF93C2 0402 0040                   		sub.b	#64,d2
FFFF93C6 9202                        		sub.b	d2,d1
FFFF93C8                            
FFFF93C8                            @ForceOff:
FFFF93C8 6100 0000                   		bsr	SMEG_Z80_OFF
FFFF93CC                            ;  		or.b	d3,d0
FFFF93CC                            ;  		bsr	SMEG_FM_FindWrite	;oops.
FFFF93CC E088                        		lsr.l	#8,d0
FFFF93CE E089                        		lsr.l	#8,d1
FFFF93D0 8003                        		or.b	d3,d0
FFFF93D2 6100 0000                    		bsr	SMEG_FM_FindWrite
FFFF93D6 E088                        		lsr.l	#8,d0
FFFF93D8 E089                        		lsr.l	#8,d1
FFFF93DA                            ;  		or.b	d3,d0
FFFF93DA                            ;   		bsr	SMEG_FM_FindWrite
FFFF93DA E088                        		lsr.l	#8,d0
FFFF93DC E089                        		lsr.l	#8,d1
FFFF93DE 8003                        		or.b	d3,d0
FFFF93E0 6100 0000                   		bsr	SMEG_FM_FindWrite
FFFF93E4 6000 0000                   		bra	SMEG_Z80_On
FFFF93E8                             	
FFFF93E8                            ; -------------------------------
FFFF93E8                            ; PSG Volume
FFFF93E8                            ; -------------------------------
FFFF93E8                            
FFFF93E8                            @ChnVol_PSG:
FFFF93E8 162D 0007                  		move.b	Chn_ID(a5),d3
FFFF93EC 0043 001F                  		or.w	#$1F,d3
FFFF93F0 102D 000B                  		move.b	chn_note(a5),d0
FFFF93F4 0C00 00FE                  		cmp.b	#-2,d0
FFFF93F8 6700 0000                  		beq	ChnPsg_Rest
FFFF93FC 0C00 00FF                  		cmp.b	#-1,d0
FFFF9400 6700 0000                  		beq	ChnPsg_Rest
FFFF9404 6000 0000                  		bra	ChnPsg_SetVol
FFFF9408                            @Return:
FFFF9408 4E75                       		rts
FFFF940A                            
FFFF940A                            ; -------------------------------
FFFF940A                            ; PCM Volume
FFFF940A                            ; -------------------------------
FFFF940A                            
FFFF940A                            @ChnVol_PCM:
FFFF940A                            		
FFFF940A 7400                        		moveq	#0,d2
FFFF940C 7200                        		moveq	#0,d1
FFFF940E 143C 00FF                   		move.b	#$FF,d2				;$xx00
FFFF9412                            ;     		move.b	Chn_MainVol(a5),d1
FFFF9412                            ;       	lsr.w	#4,d1
FFFF9412                            ;      		lsl.w	#4,d1
FFFF9412                            ;    		sub.b	d1,d2
FFFF9412 122D 0009                      		move.b	Chn_Vol(a5),d1
FFFF9416 E849                             		lsr.w	#4,d1
FFFF9418 E949                            		lsl.w	#4,d1
FFFF941A 9401                           		sub.b	d1,d2
FFFF941C                               		
FFFF941C 7200                        		moveq	#0,d1
FFFF941E 122D 0007                   		move.b	Chn_ID(a5),d1
FFFF9422 0241 000F                   		and.w	#$F,d1
FFFF9426 13C1 00A1 2010              		move.b	d1,($A12000+CommDataM)
FFFF942C 13C2 00A1 2011              		move.b	d2,($A12000+CommDataM+1)
FFFF9432 7024                        		moveq	#CdTask_SetEnv,d0
FFFF9434 6100 0000                   		bsr	SMEG_CD_Call
FFFF9438                            
FFFF9438 4E75                       		rts
FFFF943A                            		
FFFF943A                            ; ================================================================
FFFF943A                            ; -------------------------------
FFFF943A                            ; Channel effect
FFFF943A                            ; -------------------------------
FFFF943A                            
FFFF943A                            @ChannelEffects:
FFFF943A 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
FFFF9440 6700 0000                  		beq	@Null
FFFF9444                            ; 		btst 	#bitPriority,(a6)
FFFF9444                            ; 		bne.s	@SFX_Eff
FFFF9444                            ; 		bsr	SMEG_FindPrioSlot
FFFF9444                            ;   		tst.b	(a3)
FFFF9444                            ;   		bne	@Return
FFFF9444                            ; @SFX_Eff:
FFFF9444                            
FFFF9444 7000                       		moveq	#0,d0
FFFF9446 102D 0002                  		move.b	Chn_Effect(a5),d0
FFFF944A D040                       		add.w	d0,d0
FFFF944C 323B 0000                  		move.w	@EffectList(pc,d0.w),d1
FFFF9450 4EFB 1000                  		jmp	@EffectList(pc,d1.w)
FFFF9454                            		
FFFF9454                            ; -------------------------------
FFFF9454                            
FFFF9454 0000                       @EffectList:	dc.w	@Null-@EffectList
FFFF9456 0000                       		dc.w	@Flag_A-@EffectList
FFFF9458 0000                       		dc.w	@Null-@EffectList
FFFF945A 0000                       		dc.w	@Null-@EffectList
FFFF945C 0000                       		dc.w	@Flag_D-@EffectList
FFFF945E 0000                       		dc.w	@Flag_E-@EffectList
FFFF9460 0000                       		dc.w	@Flag_F-@EffectList
FFFF9462 0000                       		dc.w	@Null-@EffectList
FFFF9464 0000                       		dc.w	@Null-@EffectList
FFFF9466 0000                       		dc.w	@Null-@EffectList
FFFF9468 0000                       		dc.w	@Null-@EffectList
FFFF946A 0000                       		dc.w	@Null-@EffectList
FFFF946C 0000                       		dc.w	@Null-@EffectList
FFFF946E 0000                       		dc.w	@Flag_M-@EffectList
FFFF9470 0000                       		dc.w	@Null-@EffectList
FFFF9472 0000                       		dc.w	@Null-@EffectList
FFFF9474 0000                       		dc.w	@Null-@EffectList
FFFF9476 0000                       		dc.w	@Null-@EffectList
FFFF9478 0000                       		dc.w	@Null-@EffectList
FFFF947A 0000                       		dc.w	@Null-@EffectList
FFFF947C 0000                       		dc.w	@Null-@EffectList
FFFF947E 0000                       		dc.w	@Null-@EffectList
FFFF9480 0000                       		dc.w	@Null-@EffectList
FFFF9482 0000                       		dc.w	@Null-@EffectList
FFFF9484 0000                       		dc.w	@Flag_X-@EffectList
FFFF9486 0000                       		dc.w	@Null-@EffectList
FFFF9488 0000                       		dc.w	@Flag_Z-@EffectList
FFFF948A                            		even
FFFF948A                            
FFFF948A                            ; -------------------------------
FFFF948A                            ; Null effect
FFFF948A                            ; -------------------------------
FFFF948A                            
FFFF948A                            @Null:
FFFF948A 4E75                       		rts
FFFF948C                            
FFFF948C                            ; -------------------------------
FFFF948C                            ; Flag A - Set Tick rate
FFFF948C                            ; -------------------------------
FFFF948C                            
FFFF948C                            @Flag_A:
FFFF948C 7000                       		moveq	#0,d0
FFFF948E 426E 001C                  		clr.w	TicksSet(a6)
FFFF9492 102D 0003                  		move.b	Chn_Effect+1(a5),d0
FFFF9496 0440 0001                  		sub.w	#1,d0
FFFF949A 1D40 001D                  		move.b	d0,TicksSet+1(a6)
FFFF949E 4E75                       		rts
FFFF94A0                            
FFFF94A0                            ; -------------------------------
FFFF94A0                            ; Flag D - Volume slide
FFFF94A0                            ; -------------------------------
FFFF94A0                            
FFFF94A0                            @Flag_D:
FFFF94A0 4E75                        rts
FFFF94A2                            ; 		moveq	#0,d0
FFFF94A2                            ; 		moveq	#0,d1
FFFF94A2                            ; 		move.b	Chn_Effect+1(a5),d0
FFFF94A2                            ; 		tst.b	Chn_ID(a5)
FFFF94A2                            ; 		bpl	@NotPSG
FFFF94A2                            ; 		lsl.w	#4,d0
FFFF94A2                            ; @NotPSG:
FFFF94A2                            ; 		move.b	Chn_Vol(a5),d1
FFFF94A2                            ; 		add.b	d0,d1
FFFF94A2                            ; 		move.b	d1,Chn_Vol(a5)
FFFF94A2                            ; 		bra	@ChnVolume
FFFF94A2                            
FFFF94A2                            ; -------------------------------
FFFF94A2                            ; Flag E - Portametro down
FFFF94A2                            ; -------------------------------
FFFF94A2                            
FFFF94A2                            @Flag_E:
FFFF94A2 7000                       		moveq	#0,d0
FFFF94A4 102D 0003                  		move.b	Chn_Effect+1(a5),d0
FFFF94A8 0640 0001                  		add.w	#1,d0
FFFF94AC 4440                       		neg.w	d0
FFFF94AE 6000                       		bra.s	@DoPortam
FFFF94B0                            
FFFF94B0                            ; -------------------------------
FFFF94B0                            ; Flag F - Portametro up
FFFF94B0                            ; -------------------------------
FFFF94B0                            
FFFF94B0                            @Flag_F:
FFFF94B0 7000                       		moveq	#0,d0
FFFF94B2 102D 0003                  		move.b	Chn_Effect+1(a5),d0
FFFF94B6 0640 0001                  		add.w	#1,d0
FFFF94BA                            		
FFFF94BA                            ; ---------------------
FFFF94BA                            
FFFF94BA                            @DoPortam:
FFFF94BA 382D 0004                  		move.w	Chn_Portam(a5),d4
FFFF94BE 4A44                       		tst.w	d4
FFFF94C0 6700 FF46                  		beq	@return
FFFF94C4                            		
FFFF94C4 4A2D 0007                  		tst.b	Chn_ID(a5)
FFFF94C8 6B00                       		bmi.s	@psg_mode
FFFF94CA 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
FFFF94D0 6C00                       		bge.s	@pcm_mode
FFFF94D2                            		
FFFF94D2 E548                       		lsl.w	#2,d0
FFFF94D4 D840                       		add.w	d0,d4
FFFF94D6 3B44 0004                  		move.w	d4,Chn_Portam(a5)
FFFF94DA 6000 0000                  		bra	SMEG_SetFreqFM
FFFF94DE                            		
FFFF94DE                            @psg_mode:
FFFF94DE D040                       		add.w	d0,d0
FFFF94E0 9840                       		sub.w	d0,d4
FFFF94E2 3B44 0004                  		move.w	d4,Chn_Portam(a5)
FFFF94E6 3004                       		move.w	d4,d0
FFFF94E8 122D 0007                  		move.b	Chn_ID(a5),d1
FFFF94EC 6000 0000                  		bra	ChnPsg_NoteFreq
FFFF94F0                            		
FFFF94F0                            @pcm_mode:
FFFF94F0 4E75                       		rts
FFFF94F2                            		
FFFF94F2                            ; -------------------------------
FFFF94F2                            ; Flag M - Set Channel Volume
FFFF94F2                            ; -------------------------------
FFFF94F2                            
FFFF94F2                            @Flag_M:
FFFF94F2 4E75                        rts
FFFF94F4                             
FFFF94F4                            ; 		moveq	#0,d0
FFFF94F4                            ; 		move.b	Chn_Effect+1(a5),d0
FFFF94F4                            ; 	;	tst.b	Chn_ID(a5)
FFFF94F4                            ; 	;	bpl	@NotPSG_H
FFFF94F4                            ; 
FFFF94F4                            ; 		neg.w	d0
FFFF94F4                            ; 		sub.w	#$D0,d0
FFFF94F4                            ; ;@NotPSG_H:
FFFF94F4                            ; 		move.b	d0,Chn_MainVol(a5)
FFFF94F4                            ; 		bra	@ChnVolume
FFFF94F4                            
FFFF94F4                            ; -------------------------------
FFFF94F4                            ; Flag X - Stereo
FFFF94F4                            ; -------------------------------
FFFF94F4                            
FFFF94F4                            @Flag_X:
FFFF94F4                            ; 		tst.b	Chn_ID(a5)
FFFF94F4                            ; 		bmi	@Null
FFFF94F4                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
FFFF94F4                            ; 		bge	@PCM_Pan
FFFF94F4                            		
FFFF94F4 1B6D 0003 000C             		move.b	Chn_Effect+1(a5),Chn_Pan(a5)
FFFF94FA 4E75                       		rts
FFFF94FC                            		
FFFF94FC                            ; 		moveq	#0,d0
FFFF94FC                            ; 		move.w	#$C0,d0
FFFF94FC                            ;                 cmp.b	#$80,Chn_Effect+1(a5)
FFFF94FC                            ;                 beq.s	@SetPan
FFFF94FC                            ; 		tst.b	Chn_Effect+1(a5)
FFFF94FC                            ; 		bmi.s	@Right
FFFF94FC                            ; 		bpl.s	@Left
FFFF94FC                            ; @SetPan:
FFFF94FC                            ; 		move.b	d0,Chn_Pan(a5)
FFFF94FC                            ; 		rts
FFFF94FC                            ; @Left:
FFFF94FC                            ; 		move.w	#$80,d0
FFFF94FC                            ; 		bra.s	@SetPan
FFFF94FC                            ; @Right:
FFFF94FC                            ; 		move.w	#$40,d0
FFFF94FC                            ; 		bra.s	@SetPan
FFFF94FC                            
FFFF94FC                            ; ; -------------------------------
FFFF94FC                            ; ; PCM Panning
FFFF94FC                            ; ; -------------------------------
FFFF94FC                            ; 
FFFF94FC                            ; @PCM_Pan:
FFFF94FC                            ; 		if MCD
FFFF94FC                            ; 		
FFFF94FC                            ; 		moveq	#0,d0
FFFF94FC                            ; 		move.b	#%11001100,d0				;TODO: dejarlo así
FFFF94FC                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
FFFF94FC                            ; 		beq.s	@Return2
FFFF94FC                            ;                  
FFFF94FC                            ;  		tst.b	Chn_Effect+1(a5)
FFFF94FC                            ;  		bmi.s	@Right2
FFFF94FC                            ; 		bpl.s	@Left2
FFFF94FC                            ; 		bra	@Return2
FFFF94FC                            ; @Right2:
FFFF94FC                            ;  		move.b	#%10000000,d0
FFFF94FC                            ;  		bra	@Return2
FFFF94FC                            ; @Left2:
FFFF94FC                            ; 		move.b	#%00001000,d0
FFFF94FC                            ; @Return2:
FFFF94FC                            ; 		move.b	d0,Chn_Pan(a5)
FFFF94FC                            ; 
FFFF94FC                            ; ; -------------------------------------------------
FFFF94FC                            ; 
FFFF94FC                            ;  		elseif MARS
FFFF94FC                            ;  
FFFF94FC                            ; 		move.w	#%11000000,d0
FFFF94FC                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
FFFF94FC                            ; 		beq	@Cont
FFFF94FC                            ;  		tst.b	Chn_Effect+1(a5)
FFFF94FC                            ;  		bmi.s	@pwmRight
FFFF94FC                            ; 		bpl.s	@pwmLeft
FFFF94FC                            ; 		bra	@Cont
FFFF94FC                            ;  		
FFFF94FC                            ; @pwmRight:
FFFF94FC                            ;  		move.w	#%01000000,d0
FFFF94FC                            ;  		bra.s	@Cont
FFFF94FC                            ; @pwmLeft:
FFFF94FC                            ; 		move.w	#%10000000,d0
FFFF94FC                            ; 
FFFF94FC                            ; @Cont:
FFFF94FC                            ; 		move.b	d0,Chn_Pan(a5)   		
FFFF94FC                            ; 		endif
FFFF94FC                            ; 		rts
FFFF94FC                            
FFFF94FC                            ; ======================================================
FFFF94FC                            ; -------------------------------
FFFF94FC                            ; Flag Z
FFFF94FC                            ; -------------------------------
FFFF94FC                            
FFFF94FC                            @Flag_Z:
FFFF94FC 7000                       		moveq	#0,d0
FFFF94FE 102D 0003                  		move.b	Chn_Effect+1(a5),d0
FFFF9502 E848                       		lsr.w	#4,d0
FFFF9504 D040                       		add.w	d0,d0
FFFF9506 323B 0000                  		move.w	@HashList(pc,d0.w),d1
FFFF950A 102D 0003                  		move.b	Chn_Effect+1(a5),d0		;d0 - $0-$F argument
FFFF950E 0200 000F                  		and.b	#$F,d0
FFFF9512 4EFB 1000                  		jmp	@HashList(pc,d1.w)
FFFF9516                            
FFFF9516 FF74                       @HashList:	dc.w	@Null-@HashList		;$00
FFFF9518 0000                       		dc.w	@FM_Key-@HashList		;$10 - FM Keys ON/OFF
FFFF951A FF74                       		dc.w	@Null-@HashList			;$20
FFFF951C FF74                       		dc.w	@Null-@HashList			;$30
FFFF951E 0000                       		dc.w	@PSG-@HashList			;$40 - PSG Settings
FFFF9520 FF74                       		dc.w	@Null-@HashList			;$50
FFFF9522 FF74                       		dc.w	@Null-@HashList			;$60
FFFF9524 FF74                       		dc.w	@Null-@HashList			;$70
FFFF9526 FF74                       		dc.w	@Null-@HashList			;$80
FFFF9528 FF74                       		dc.w	@Null-@HashList			;$90
FFFF952A FF74                       		dc.w	@Null-@HashList			;$A0
FFFF952C FF74                       		dc.w	@Null-@HashList			;$B0
FFFF952E FF74                       		dc.w	@Null-@HashList			;$C0
FFFF9530 FF74                       		dc.w	@Null-@HashList			;$D0
FFFF9532 FF74                       		dc.w	@Null-@HashList			;$E0
FFFF9534 0000                       		dc.w	@FixSfx-@HashList		;$F0 - Finish SFX flag (SFX only)
FFFF9536                            		even
FFFF9536                            
FFFF9536                            ; -------------------------------
FFFF9536                            
FFFF9536                            @DacStatus:
FFFF9536 4E75                        rts
FFFF9538                            
FFFF9538                            ; -------------------------------
FFFF9538                            
FFFF9538                            @FM_Key:
FFFF9538 0240 000F                  		and.w	#$F,d0
FFFF953C E948                       		lsl.w	#4,d0
FFFF953E 1B40 000D                  		move.b	d0,Chn_FM_Key(a5)
FFFF9542 4E75                       		rts
FFFF9544                            
FFFF9544                            ; -------------------------------
FFFF9544                            
FFFF9544                            @PSG:
FFFF9544 4E75                        rts
FFFF9546                            
FFFF9546                            ; -------------------------------
FFFF9546                            
FFFF9546                            @FixSfx:
FFFF9546                            ;    		btst	#bitPriority,(a6)
FFFF9546                            ;   		bne	@Return
FFFF9546                            		
FFFF9546                            ;  		lea	(RAM_SMEG_Buffer),a3
FFFF9546                            ;  		move.b	snd_flagsBGM(a3),snd_flags(a3)
FFFF9546                            ; 		moveq 	#0,d0
FFFF9546                            ;  		move.b	PsgLast(a3),d0
FFFF9546                            ; 		add.w	#$E0,d0
FFFF9546                            ; 		bsr	@PutPSG
FFFF9546                            
FFFF9546                            ;  		moveq	#0,d0
FFFF9546                            ;  		move.b	LastPattChn(a6),d0
FFFF9546                            ; 		bsr	SMEG_FindPrioSlot
FFFF9546                            ;   		bclr	#0,(a3)
FFFF9546                             		
FFFF9546                            ;   		bclr	#bitSfxOn,(a6)				;SFX finished playing
FFFF9546 4E75                       		rts
FFFF9548                            		
FFFF9548                            ; ================================================================
FFFF9548                            ; -------------------------------
FFFF9548                            ; Channel play
FFFF9548                            ; -------------------------------
FFFF9548                            
FFFF9548                            @ChannelPlay:	
FFFF9548 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
FFFF954E 6700 0000                  		beq	@Disabled
FFFF9552                            		
FFFF9552                            ;                 moveq	#0,d0
FFFF9552                            ; 		move.b	Chn_Note(a5),d0
FFFF9552                            ; 		sub.w	#1,Chn_Portam(a5)
FFFF9552                            ; 		tst.b	Chn_Portam(a5)
FFFF9552                            ; 		beq.s	@NoUp
FFFF9552                            ; 		add.b	Chn_Portam(a5),d0
FFFF9552                            ; 		bra.s	@NoDown
FFFF9552                            ; @NoUp:
FFFF9552                            ; 		tst.b	Chn_Portam+1(a5)
FFFF9552                            ; 		beq.s	@NoDown
FFFF9552                            ; 		sub.b	Chn_Portam+1(a5),d0
FFFF9552                            ; @NoDown:
FFFF9552                            
FFFF9552                            ; --------------------------------
FFFF9552                            
FFFF9552                            ; BGM: Block channel
FFFF9552                            
FFFF9552 0816 0000                  		btst 	#bitPriority,(a6)
FFFF9556 6600                       		bne.s	@SFX_Check
FFFF9558 6100 0000                  		bsr	SMEG_FindPrioSlot
FFFF955C 4A13                         		tst.b	(a3)
FFFF955E 6600 FEA8                    		bne	@Return
FFFF9562                              		
FFFF9562                            ; --------------------------------
FFFF9562                            
FFFF9562                            ; SFX: Check NoteOff/NoteCut
FFFF9562                            ; then clear flag
FFFF9562                            
FFFF9562                            @SFX_Check:
FFFF9562 0816 0000                  		btst 	#bitPriority,(a6)
FFFF9566 6700                       		beq.s	@NotSFX
FFFF9568                            ; 		cmp.b	#-1,chn_note(a5)
FFFF9568                            ; 		beq	@DoIt
FFFF9568 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
FFFF956E 6600 0000                  		bne	@NotSFX
FFFF9572                            @DoIt:
FFFF9572 6100 0000                  		bsr	SMEG_FindPrioSlot
FFFF9576 4213                         		clr.b	(a3)
FFFF9578                            @NotSFX:
FFFF9578                            
FFFF9578                            ; --------------------------------
FFFF9578                            
FFFF9578 4A2D 0007                  		tst.b	Chn_ID(a5)
FFFF957C 6B00 0000                  		bmi	Chnl_PSG
FFFF9580 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
FFFF9586 6C00 0000                  		bge	@ChannelPlay_PCM
FFFF958A 0C2D 0002 0007             		cmp.b	#FM_3,Chn_ID(a5)
FFFF9590 6700 0000                  		beq	@Chn3_ChkSpecial
FFFF9594 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
FFFF959A 6700 0000                  		beq	@Chn6_ChkSmpl
FFFF959E 6000 0000                  		bra	@ChnPlay_FM
FFFF95A2                            		
FFFF95A2                            ; -------------------------------
FFFF95A2                            ; Play FM6 or DAC sample
FFFF95A2                            ; -------------------------------
FFFF95A2                            
FFFF95A2                            @Chn6_ChkSmpl:
FFFF95A2 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
FFFF95A8 6700 0000                  		beq	@ChnPlay_FM6
FFFF95AC 0C2D 00FF 000B             		cmp.b	#-1,chn_note(a5)
FFFF95B2 6700 0000                  		beq	@StopSmpl
FFFF95B6 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
FFFF95BC 6700 0000                  		beq	@StopSmpl
FFFF95C0                            		
FFFF95C0 7028                       		moveq	#$28,d0
FFFF95C2 7206                       		moveq	#6,d1
FFFF95C4 6100 0000                   		bsr	SMEG_Z80_Off
FFFF95C8 6100 0000                  		bsr	FM_RegWrite_1
FFFF95CC 6100 0000                  		bsr	SMEG_FM_SetPan
FFFF95D0 6100 0000                  		bsr	SMEG_Z80_On
FFFF95D4                            		
FFFF95D4                            ; 		btst 	#bitPriority,(a6)
FFFF95D4                            ; 		beq.s	@MusicPrio3
FFFF95D4                            ; 		bsr	SMEG_FindPrioSlot
FFFF95D4                            ;   		btst	#0,(a3)
FFFF95D4                            ;   		bne	@return
FFFF95D4                            ; @MusicPrio3:
FFFF95D4 6000 0000                  		bra	Audio_Sample_Play
FFFF95D8                            
FFFF95D8                            ; Stop
FFFF95D8                            
FFFF95D8                            @StopSmpl:
FFFF95D8                            ; 		btst 	#bitPriority,(a6)
FFFF95D8                            ; 		bne.s	@NotSfxDAC
FFFF95D8                            ; 		bsr	SMEG_FindPrioSlot
FFFF95D8                            ;   		bclr	#0,(a3)
FFFF95D8                            ; @NotSfxDAC:
FFFF95D8 6000 0000                  		bra	Audio_Sample_Stop
FFFF95DC                            		
FFFF95DC                            ; -------------------------------
FFFF95DC                            ; Play FM6 Normally
FFFF95DC                            ; -------------------------------
FFFF95DC                            
FFFF95DC                            @ChnPlay_FM6:
FFFF95DC 103C 002B                  		move.b	#$2B,d0
FFFF95E0 123C 0000                  		move.b	#$00,d1
FFFF95E4 6100 0000                  		bsr	SMEG_Z80_Off
FFFF95E8 6100 0000                  		bsr	FM_RegWrite_1
FFFF95EC 6100 0000                  		bsr	SMEG_Z80_On
FFFF95F0 6100 0000                  		bsr	Audio_Sample_Stop
FFFF95F4 6000 0000                  		bra	@ChnPlay_FM
FFFF95F8                            		
FFFF95F8                            ; -------------------------------
FFFF95F8                            ; Play FM3 Normally
FFFF95F8                            ; -------------------------------
FFFF95F8                            
FFFF95F8                            @Chn3_ChkSpecial:
FFFF95F8 6100 0000                  		bsr	SMEG_Z80_Off
FFFF95FC 6100 0000                  		bsr	SMEG_FM_SetPan
FFFF9600 6100 0000                  		bsr	SMEG_Z80_On
FFFF9604                            		
FFFF9604 082E 0003 0001             		btst	#bitSpecial3,snd_flags(a6)
FFFF960A 6700 0000                  		beq	@NoSpecial3
FFFF960E                            		
FFFF960E 6100 0000                  		bsr	ChnlFM_srchIns
FFFF9612 0C42 FFFF                  		cmp.w	#-1,d2
FFFF9616 6700 0000                  		beq	@NoSpecial3
FFFF961A 0802 0006                   		btst	#6,d2
FFFF961E 6700 0000                   		beq	@NoSpecial3
FFFF9622                            		
FFFF9622                            ;   		moveq	#$22,d0
FFFF9622                            ;  		move.w	#%00001011,d1
FFFF9622                            ; 		bsr	FM_RegWrite_1
FFFF9622                            		
FFFF9622 7027                         		moveq	#$27,d0		;CH3 enable
FFFF9624 323C 0040                   		move.w	#%01000000,d1
FFFF9628 6100 0000                   		bsr	SMEG_Z80_Off
FFFF962C 6100 0000                  		bsr	FM_RegWrite_1
FFFF9630 6100 0000                  		bsr	SMEG_Z80_On
FFFF9634                            		
FFFF9634 203C A9AD AAAE              		move.l	#$A9ADAAAE,d0
FFFF963A 322B 000E                   		move.w	$E(a3),d1
FFFF963E E059                        		ror.w	#8,d1
FFFF9640 6100 0000                   		bsr	SMEG_Z80_Off
FFFF9644 6100 0000                  		bsr	FM_RegWrite_1
FFFF9648 E088                       		lsr.l	#8,d0
FFFF964A E089                       		lsr.l	#8,d1
FFFF964C 6100 0000                  		bsr	FM_RegWrite_1
FFFF9650 E088                       		lsr.l	#8,d0
FFFF9652 322B 000C                   		move.w	$C(a3),d1
FFFF9656 E059                        		ror.w	#8,d1
FFFF9658 6100 0000                  		bsr	FM_RegWrite_1
FFFF965C E088                       		lsr.l	#8,d0
FFFF965E E089                       		lsr.l	#8,d1
FFFF9660 6100 0000                  		bsr	FM_RegWrite_1	
FFFF9664 6100 0000                    		bsr	SMEG_Z80_On
FFFF9668                              		
FFFF9668 203C A2A6 A8AC              		move.l	#$A2A6A8AC,d0
FFFF966E 322B 000A                   		move.w	$A(a3),d1
FFFF9672 E059                        		ror.w	#8,d1
FFFF9674 6100 0000                   		bsr	SMEG_Z80_Off
FFFF9678 6100 0000                  		bsr	FM_RegWrite_1
FFFF967C E088                       		lsr.l	#8,d0
FFFF967E E089                       		lsr.l	#8,d1
FFFF9680 6100 0000                  		bsr	FM_RegWrite_1
FFFF9684 E088                       		lsr.l	#8,d0
FFFF9686 322B 0008                   		move.w	8(a3),d1
FFFF968A E059                        		ror.w	#8,d1
FFFF968C 6100 0000                  		bsr	FM_RegWrite_1
FFFF9690 E088                       		lsr.l	#8,d0
FFFF9692 E089                       		lsr.l	#8,d1
FFFF9694 6100 0000                  		bsr	FM_RegWrite_1
FFFF9698 6100 0000                  		bsr	SMEG_Z80_On
FFFF969C                            		
FFFF969C 7028                       		moveq	#$28,d0
FFFF969E 7200                       		moveq	#0,d1
FFFF96A0 122D 000D                  		move.b	Chn_FM_Key(a5),d1
FFFF96A4 822D 0007                  		or.b	Chn_ID(a5),d1
FFFF96A8 6100 0000                  		bsr	SMEG_Z80_Off
FFFF96AC 6100 0000                  		bsr	FM_RegWrite_1
FFFF96B0 6000 0000                   		bra	SMEG_Z80_On
FFFF96B4                             		
FFFF96B4                            @NoSpecial3:
FFFF96B4 7200                       		moveq	#0,d1
FFFF96B6 7027                         		moveq	#$27,d0
FFFF96B8 6100 0000                   		bsr	SMEG_Z80_Off
FFFF96BC 6100 0000                  		bsr	FM_RegWrite_1
FFFF96C0 6100 0000                   		bsr	SMEG_Z80_On
FFFF96C4                            		
FFFF96C4                            ; -------------------------------
FFFF96C4                            ; Play FM1-FM5 normally
FFFF96C4                            ; -------------------------------
FFFF96C4                            
FFFF96C4                            @ChnPlay_FM:
FFFF96C4 6100 0000                  		bsr	SMEG_Z80_Off
FFFF96C8 6100 0000                  		bsr	SMEG_FM_SetPan
FFFF96CC 6100 0000                  		bsr	SMEG_Z80_On
FFFF96D0                            		
FFFF96D0 7000                        		moveq	#0,d0
FFFF96D2 102D 000B                  		move.b	chn_note(a5),d0
FFFF96D6 0C00 00FF                  		cmp.b	#-1,d0
FFFF96DA 6700 0000                  		beq	SMEG_FM_KeysOff
FFFF96DE 0C00 00FE                  		cmp.b	#-2,d0
FFFF96E2 6700 0000                  		beq	SMEG_FM_TotLvlOff
FFFF96E6                            		
FFFF96E6 6100 0000                  		bsr	SMEG_FM_KeysOff
FFFF96EA                            		
FFFF96EA 7000                       		moveq	#0,d0
FFFF96EC 7200                       		moveq	#0,d1
FFFF96EE 102D 000B                  		move.b	chn_note(a5),d0
FFFF96F2 D040                       		add.w	d0,d0
FFFF96F4 45F9 0000 0000              		lea	(FreqList_FM),a2
FFFF96FA 3832 0000                  		move.w	(a2,d0.w),d4
FFFF96FE 3B44 0004                  		move.w	d4,Chn_Portam(a5)
FFFF9702 6000 0000                  		bra	SMEG_SetFreqFM
FFFF9706                            @Disabled:
FFFF9706 4E75                       		rts
FFFF9708                            
FFFF9708                            ; -------------------------------
FFFF9708                            ; Play PCM
FFFF9708                            ; -------------------------------
FFFF9708                            
FFFF9708                            @ChannelPlay_PCM:	
FFFF9708                            ; 		if MCD
FFFF9708                            ; 		
FFFF9708                            ; 		tst.l	SongPcmSamp(a6)
FFFF9708                            ; 		beq.s	@ReturnPCM
FFFF9708                            ; 		bmi.s	@ReturnPCM
FFFF9708                            ; 		
FFFF9708                            ;  		moveq	#0,d1
FFFF9708                            ;  		move.b	Chn_ID(a5),d1
FFFF9708                            ;    		and.w	#$F,d1
FFFF9708                            ;  		move.b	d1,($A12000+CommDataM)
FFFF9708                            ;  		move.b	Chn_Pan(a5),d1
FFFF9708                            ;  		move.b	d1,($A12000+CommDataM+1)
FFFF9708                            ;  		moveq	#CdTask_SetPan,d0
FFFF9708                            ;  		bsr	SMEG_CD_Call
FFFF9708                            ;  		
FFFF9708                            ; 		moveq	#0,d1
FFFF9708                            ; 		move.b	Chn_ID(a5),d1
FFFF9708                            ; 		and.b	#$F,d1
FFFF9708                            ; 		move.b	d1,($A12000+CommDataM)
FFFF9708                            ; 		move.w	Chn_Freq(a5),($A12000+CommDataM+2)
FFFF9708                            ; 		moveq	#CdTask_SetFreq,d0
FFFF9708                            ; 		bsr	SMEG_CD_Call
FFFF9708                            ; 		bset	d1,PcmChnOnOff(a6)
FFFF9708                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
FFFF9708                            ; 		moveq	#CdTask_SetOnOff,d0
FFFF9708                            ; 		bsr	SMEG_CD_Call
FFFF9708                            ; 		
FFFF9708                            ; @ReturnPCM:
FFFF9708                            ;  		elseif MARS
FFFF9708                            ; 
FFFF9708                            ; 		tst.l	SongPcmSamp(a6)
FFFF9708                            ; 		beq.s	@ReturnPCM
FFFF9708                            ; 		bmi.s	@ReturnPCM
FFFF9708                            ; 		
FFFF9708                            ;   		moveq	#0,d1
FFFF9708                            ;   		moveq	#0,d2
FFFF9708                            ;        		move.b	Chn_ID(a5),d1
FFFF9708                            ;      		and.w	#$F,d1
FFFF9708                            ;       		or.b	Chn_Pan(a5),d1
FFFF9708                            ;       		move.b	Chn_Note(a5),d2
FFFF9708                            ;   		move.b	d1,(marsreg+comm2)			; Pan+Channel set
FFFF9708                            ;   		move.b	d2,(marsreg+comm2+1)			; Note
FFFF9708                            ;   		moveq 	#marscall_Play,d0
FFFF9708                            ;   		bsr	SMEG_MARS_Call
FFFF9708                            ; @ReturnPCM:
FFFF9708                            ;  		endif
FFFF9708                             		
FFFF9708 4E75                       		rts
FFFF970A                            
FFFF970A                            ; --------------------------
FFFF970A                            ; Set FM Frequency
FFFF970A                            ; autodetected channel
FFFF970A                            ; 
FFFF970A                            ; d4 - Freq
FFFF970A                            ; --------------------------
FFFF970A                            
FFFF970A                            SMEG_SetFreqFM:
FFFF970A 7A00                       		moveq	#0,d5
FFFF970C 1A2D 0007                  		move.b	Chn_ID(a5),d5
FFFF9710 0C05 0004                  		cmp.b	#4,d5
FFFF9714 6D00                       		blt.s	@FirstFM
FFFF9716 0405 0004                  		sub.b	#4,d5
FFFF971A                            @FirstFM:
FFFF971A 303C 00A4                  		move.w	#$A4,d0
FFFF971E D005                       		add.b	d5,d0
FFFF9720 7200                       		moveq	#0,d1
FFFF9722 E15C                       		rol.w	#8,d4
FFFF9724 1204                       		move.b	d4,d1
FFFF9726                            		
FFFF9726 6100 0000                  		bsr	SMEG_Z80_Off
FFFF972A 6100 0000                  		bsr	SMEG_FM_FindWrite
FFFF972E 303C 00A0                  		move.w	#$A0,d0
FFFF9732 D005                       		add.b	d5,d0
FFFF9734 7200                       		moveq	#0,d1
FFFF9736 E15C                       		rol.w	#8,d4
FFFF9738 1204                       		move.b	d4,d1
FFFF973A 6100 0000                  		bsr	SMEG_FM_FindWrite
FFFF973E                            
FFFF973E 7028                       		moveq	#$28,d0
FFFF9740 7200                       		moveq	#0,d1
FFFF9742 122D 000D                  		move.b	Chn_FM_Key(a5),d1
FFFF9746 822D 0007                  		or.b	Chn_ID(a5),d1
FFFF974A 6100 0000                  		bsr	FM_RegWrite_1
FFFF974E 6000 0000                  		bra	SMEG_Z80_On
FFFF9752                            		
FFFF9752                            ; Turn Total Level (the volume) off 
FFFF9752                            
FFFF9752                            SMEG_FM_TotLvlOff:
FFFF9752 162D 0007                   		move.b	chn_id(a5),d3
FFFF9756 0243 0003                   		and.w	#%11,d3
FFFF975A 203C 4C44 4840             		move.l	#$4C444840,d0
FFFF9760 323C 007F                  		move.w	#$7F,d1
FFFF9764 6100 0000                   		bsr	SMEG_Z80_OFF
FFFF9768 8003                        		or.b	d3,d0
FFFF976A 6100 0000                   		bsr	SMEG_FM_FindWrite	;oops.
FFFF976E E088                        		lsr.l	#8,d0
FFFF9770 8003                        		or.b	d3,d0
FFFF9772 6100 0000                    		bsr	SMEG_FM_FindWrite
FFFF9776 E088                        		lsr.l	#8,d0
FFFF9778 8003                        		or.b	d3,d0
FFFF977A 6100 0000                    		bsr	SMEG_FM_FindWrite
FFFF977E E088                        		lsr.l	#8,d0
FFFF9780 8003                        		or.b	d3,d0
FFFF9782 6100 0000                   		bsr	SMEG_FM_FindWrite
FFFF9786 6100 0000                   		bsr	SMEG_Z80_On
FFFF978A                             		
FFFF978A                            ; Turn FM Keys off
FFFF978A                            
FFFF978A                            SMEG_FM_KeysOff:
FFFF978A 7028                       		moveq	#$28,d0
FFFF978C 7200                       		moveq	#0,d1
FFFF978E D22D 0007                  		add.b	Chn_ID(a5),d1
FFFF9792 6100 0000                   		bsr	SMEG_Z80_Off
FFFF9796 6100 0000                  		bsr	FM_RegWrite_1
FFFF979A 6000 0000                  		bra	SMEG_Z80_On
FFFF979E                            		
FFFF979E                            ; ----------------------------
FFFF979E                            ; PSG Channels
FFFF979E                            ; ----------------------------
FFFF979E                            
FFFF979E                            Chnl_PSG:
FFFF979E 122D 0007                  		move.b	Chn_ID(a5),d1
FFFF97A2 0C2D 00E0 0007             		cmp.b	#NOISE,Chn_ID(a5)
FFFF97A8 6700                       		beq.s	Chnl_Noise
FFFF97AA                            
FFFF97AA 3601                       		move.w	d1,d3
FFFF97AC 0043 001F                  		or.w	#$1F,d3
FFFF97B0 102D 000B                  		move.b	chn_note(a5),d0
FFFF97B4 0C00 00FE                  		cmp.b	#-2,d0
FFFF97B8 6700                       		beq.s	ChnPsg_Rest
FFFF97BA 0C00 00FF                  		cmp.b	#-1,d0
FFFF97BE 6700                       		beq.s	ChnPsg_Rest
FFFF97C0                            		
FFFF97C0 45F9 0000 0000             		lea	(FreqList_PSG),a2
FFFF97C6 D040                       		add.w	d0,d0
FFFF97C8 3032 0000                  		move.w	(a2,d0.w),d0
FFFF97CC 3B40 0004                  		move.w	d0,Chn_Portam(a5)
FFFF97D0 6100 0000                  		bsr	ChnPsg_NoteFreq
FFFF97D4                            		
FFFF97D4                            ChnPsg_SetVol:
FFFF97D4 0043 0010                  		or.w	#$10,d3
FFFF97D8 0043 000F                  		or.w	#$F,d3
FFFF97DC 4A2D 0009                  		tst.b	chn_vol(a5)
FFFF97E0 6700                       		beq.s	ChnPsg_DoVol
FFFF97E2 0243 00F0                  		and.w	#$F0,d3
FFFF97E6 0C2D 0040 0009             		cmp.b	#64,chn_vol(a5)
FFFF97EC 6C00                         		bge.s	ChnPsg_DoVol
FFFF97EE 7000                         		moveq	#0,d0
FFFF97F0 102D 0009                     		move.b	chn_vol(a5),d0
FFFF97F4 4440                        		neg.w	d0
FFFF97F6 E448                          		lsr.w	#2,d0
FFFF97F8 0240 000F                    		and.w	#%1111,d0
FFFF97FC 8640                         		or.w	d0,d3
FFFF97FE                            
FFFF97FE                            
FFFF97FE                            ChnPsg_DoVol:
FFFF97FE 13C3 00C0 0011              		move.b	d3,(sound_psg)
FFFF9804                            Chnl_Return:
FFFF9804 4E75                       		rts
FFFF9806                            		
FFFF9806                            ChnPsg_Rest:
FFFF9806 61F6                        		bsr.s	ChnPsg_DoVol
FFFF9808                            ; 		btst 	#bitPriority,(a6)
FFFF9808                            ; 		bne.s	Chnl_Return
FFFF9808                            ; 		bsr	SMEG_FindPrioSlot
FFFF9808                            ;   		bclr	#0,(a3)
FFFF9808 4E75                         		rts
FFFF980A                              		
FFFF980A                            ; ----------------------------
FFFF980A                            ; PSG Noise channel
FFFF980A                            ; ----------------------------
FFFF980A                            
FFFF980A                            Chnl_NOISE:
FFFF980A 246E 0010                  		movea.l	snd_instr(a6),a2
FFFF980E 302A 0004                  		move.w	instDNoise(a2),d0
FFFF9812 D4C0                       		adda	d0,a2
FFFF9814                            		
FFFF9814 303C 0000                   		move.w	#%000,d0
FFFF9818                            @next:
FFFF9818 4A52                       		tst.w	(a2)
FFFF981A 6B00                       		bmi.s	@default
FFFF981C 7400                       		moveq	#0,d2
FFFF981E 142D 0008                  		move.b	chn_inst(a5),d2
FFFF9822 B452                       		cmp.w	(a2),d2
FFFF9824 6700                       		beq.s	@found
FFFF9826 D4FC 0004                  		adda	#4,a2
FFFF982A 60EC                       		bra.s	@next
FFFF982C                            @found:
FFFF982C 302A 0002                   		move.w	2(a2),d0
FFFF9830                            
FFFF9830                            @default:
FFFF9830 323C 00E0                  		move.w	#$E0,d1
FFFF9834 3601                       		move.w	d1,d3
FFFF9836 0043 001F                  		or.w	#$1F,d3
FFFF983A                            
FFFF983A 142D 000B                  		move.b	chn_note(a5),d2
FFFF983E 0C02 00FF                  		cmp.b	#-1,d2
FFFF9842 67C2                       		beq.s	ChnPsg_Rest
FFFF9844 0C02 00FE                  		cmp.b	#-2,d2
FFFF9848 67BC                       		beq.s	ChnPsg_Rest
FFFF984A                            		
FFFF984A 08AE 0002 0001             		bclr	#bitTone3,snd_flags(a6)
FFFF9850 0C40 0003                  		cmp.w	#%011,d0
FFFF9854 6700                       		beq.s	@valdnoise
FFFF9856 0C40 0007                  		cmp.w	#%111,d0
FFFF985A 6600                       		bne.s	@deftone
FFFF985C                            @valdnoise:
FFFF985C 08EE 0002 0001             		bset	#bitTone3,snd_flags(a6)
FFFF9862 13FC 00DF 00C0 0011        		move.b	#$C0|$1F,(sound_psg)
FFFF986A 8240                       		or.w	d0,d1
FFFF986C 13C1 00C0 0011             		move.b	d1,(sound_psg)
FFFF9872                            		
FFFF9872 102D 000B                  		move.b	chn_note(a5),d0
FFFF9876 0C00 00FF                  		cmp.b	#-1,d0
FFFF987A 6700 FF8A                  		beq	ChnPsg_Rest
FFFF987E 0C00 00FE                  		cmp.b	#-2,d0
FFFF9882 6700 FF82                  		beq	ChnPsg_Rest
FFFF9886 0640 000C                  		add.w	#12,d0		; TODO: checar
FFFF988A 323C 00C0                  		move.w	#$C0,d1		; PSG3 freq
FFFF988E                            		
FFFF988E 45F9 0000 0000             		lea	(FreqList_PSG),a2
FFFF9894 D040                       		add.w	d0,d0
FFFF9896 3032 0000                  		move.w	(a2,d0.w),d0
FFFF989A 3B40 0004                  		move.w	d0,Chn_Portam(a5)
FFFF989E 6000 0000                  		bra	ChnPsg_NoteFreq
FFFF98A2                            		
FFFF98A2                            ; 		move.w	#$E0,d3		; NOISE volume
FFFF98A2                            ; 		bra	ChnPsg_SetVol
FFFF98A2                            		
FFFF98A2                            @deftone:
FFFF98A2 3601                       		move.w	d1,d3
FFFF98A4 3400                       		move.w	d0,d2
FFFF98A6 0242 0007                  		and.w	#%111,d2
FFFF98AA 8242                       		or.w	d2,d1
FFFF98AC 13C1 00C0 0011             		move.b	d1,(sound_psg)
FFFF98B2 4E75                       		rts
FFFF98B4                            		
FFFF98B4                            ; 		move.w	#$E0,d3
FFFF98B4                            ; 		bra	ChnPsg_SetVol
FFFF98B4                            		
FFFF98B4                            ; ----------------------------
FFFF98B4                            ; PSG Noise channel Tone 3
FFFF98B4                            ; 
FFFF98B4                            ; input:
FFFF98B4                            ; d0 - freq
FFFF98B4                            ; d1 - channel
FFFF98B4                            ; 
FFFF98B4                            ; returns:
FFFF98B4                            ; d3 - last psg freq | channel
FFFF98B4                            ; ----------------------------
FFFF98B4                            
FFFF98B4                            ChnPsg_NoteFreq:
FFFF98B4 3601                       		move.w	d1,d3
FFFF98B6 3400                       		move.w	d0,d2
FFFF98B8 0242 000F                  		and.w	#%1111,d2
FFFF98BC 8242                       		or.w	d2,d1
FFFF98BE 13C1 00C0 0011             		move.b	d1,(sound_psg)
FFFF98C4 E848                       		lsr.w	#4,d0
FFFF98C6 0240 003F                  		and.w	#%00111111,d0
FFFF98CA 13C0 00C0 0011             		move.b	d0,(sound_psg)
FFFF98D0 4E75                       		rts
FFFF98D2                            
FFFF98D2                            ; -------------------------------
FFFF98D2                            ; PSG Frequencies
FFFF98D2                            ; -------------------------------
FFFF98D2                            
FFFF98D2                            FreqList_PSG:
FFFF98D2 0000                       		dc.w 0		;C-0 $0
FFFF98D4 0000                       		dc.w 0
FFFF98D6 0000                       		dc.w 0
FFFF98D8 0000                       		dc.w 0
FFFF98DA 0000                       		dc.w 0
FFFF98DC 0000                       		dc.w 0
FFFF98DE 0000                       		dc.w 0
FFFF98E0 0000                       		dc.w 0
FFFF98E2 0000                       		dc.w 0
FFFF98E4 0000                       		dc.w 0
FFFF98E6 0000                       		dc.w 0
FFFF98E8 0000                       		dc.w 0
FFFF98EA                            		
FFFF98EA 0000                       		dc.w 0		;C-1 $C
FFFF98EC 0000                       		dc.w 0
FFFF98EE 0000                       		dc.w 0
FFFF98F0 0000                       		dc.w 0
FFFF98F2 0000                       		dc.w 0
FFFF98F4 0000                       		dc.w 0
FFFF98F6 0000                       		dc.w 0
FFFF98F8 0000                       		dc.w 0
FFFF98FA 0000                       		dc.w 0
FFFF98FC 0000                       		dc.w 0
FFFF98FE 0000                       		dc.w 0
FFFF9900 0000                       		dc.w 0
FFFF9902                            		
FFFF9902 0000                       		dc.w 0		;C-2 $18
FFFF9904 0000                       		dc.w 0
FFFF9906 0000                       		dc.w 0
FFFF9908 0000                       		dc.w 0
FFFF990A 0000                       		dc.w 0
FFFF990C 0000                       		dc.w 0
FFFF990E 0000                       		dc.w 0
FFFF9910 0000                       		dc.w 0
FFFF9912 0000                       		dc.w 0
FFFF9914 0000                       		dc.w 0
FFFF9916 0000                       		dc.w 0
FFFF9918 0000                       		dc.w 0
FFFF991A                            
FFFF991A 0000                       		dc.w 0		;C-3 $24
FFFF991C 0000                       		dc.w 0
FFFF991E 0000                       		dc.w 0
FFFF9920 0000                       		dc.w 0
FFFF9922 0000                       		dc.w 0
FFFF9924 0000                       		dc.w 0
FFFF9926 0000                       		dc.w 0
FFFF9928 0000                       		dc.w 0
FFFF992A 0000                       		dc.w 0
FFFF992C 03F8                       		dc.w $3F8
FFFF992E 03BF                                       dc.w $3BF
FFFF9930 0389                                       dc.w $389
FFFF9932                                            
FFFF9932 0356                       		dc.w $356	;C-4 $30
FFFF9934 0326                                       dc.w $326
FFFF9936 02F9                                       dc.w $2F9
FFFF9938 02CE                                       dc.w $2CE
FFFF993A 02A5                                       dc.w $2A5
FFFF993C 0280                                       dc.w $280
FFFF993E 025C                                       dc.w $25C
FFFF9940 023A                                       dc.w $23A
FFFF9942 021A                                       dc.w $21A
FFFF9944 01FB                       		dc.w $1FB
FFFF9946 01DF                                       dc.w $1DF
FFFF9948 01C4                                       dc.w $1C4
FFFF994A                                            
FFFF994A 01AB                                       dc.w $1AB	;C-5 $3C
FFFF994C 0193                                       dc.w $193
FFFF994E 017D                                       dc.w $17D
FFFF9950 0167                                       dc.w $167
FFFF9952 0153                                       dc.w $153
FFFF9954 0140                                       dc.w $140
FFFF9956 012E                       		dc.w $12E
FFFF9958 011D                                       dc.w $11D
FFFF995A 010D                                       dc.w $10D
FFFF995C 00FE                                       dc.w $FE
FFFF995E 00EF                                       dc.w $EF
FFFF9960 00E2                                       dc.w $E2
FFFF9962                                            
FFFF9962 00D6                                       dc.w $D6	;C-6 $48
FFFF9964 00C9                                       dc.w $C9
FFFF9966 00BE                                       dc.w $BE
FFFF9968 00B4                                       dc.w $B4
FFFF996A 00A9                       		dc.w $A9
FFFF996C 00A0                                       dc.w $A0
FFFF996E 0097                                       dc.w $97
FFFF9970 008F                                       dc.w $8F
FFFF9972 0087                                       dc.w $87
FFFF9974 007F                                       dc.w $7F
FFFF9976 0078                                       dc.w $78
FFFF9978 0071                                       dc.w $71
FFFF997A                                            
FFFF997A 006B                                       dc.w $6B	;C-7 $54
FFFF997C 0065                                       dc.w $65
FFFF997E 005F                       		dc.w $5F
FFFF9980 005A                                       dc.w $5A
FFFF9982 0055                                       dc.w $55
FFFF9984 0050                                       dc.w $50
FFFF9986 004B                                       dc.w $4B
FFFF9988 0047                                       dc.w $47
FFFF998A 0043                                       dc.w $43
FFFF998C 0040                                       dc.w $40
FFFF998E 003C                                       dc.w $3C
FFFF9990 0039                                       dc.w $39
FFFF9992                                            
FFFF9992 0036                       		dc.w $36	;C-8 $60
FFFF9994 0033                                       dc.w $33
FFFF9996 0030                                       dc.w $30
FFFF9998 002D                                       dc.w $2D
FFFF999A 002B                                       dc.w $2B
FFFF999C 0028                                       dc.w $28
FFFF999E 0026                                       dc.w $26
FFFF99A0 0024                                       dc.w $24
FFFF99A2 0022                                       dc.w $22
FFFF99A4 0020                                       dc.w $20
FFFF99A6 001F                       		dc.w $1F
FFFF99A8 001D                                       dc.w $1D
FFFF99AA                                            
FFFF99AA 001B                                       dc.w $1B	;C-9 $6C
FFFF99AC 001A                                       dc.w $1A
FFFF99AE 0018                                       dc.w $18
FFFF99B0 0017                                       dc.w $17
FFFF99B2 0016                                       dc.w $16
FFFF99B4 0015                                       dc.w $15
FFFF99B6 0013                                       dc.w $13
FFFF99B8 0012                                       dc.w $12
FFFF99BA 0011                       		dc.w $11
FFFF99BC 0010                        		dc.w $10 ;Custom...
FFFF99BE 0009                        		dc.w $9
FFFF99C0 0008                        		dc.w $8
FFFF99C2                            
FFFF99C2                            		even
FFFF99C2                            		
FFFF99C2                            ; -------------------------------
FFFF99C2                            ; FM Frequencies
FFFF99C2                            ; -------------------------------
FFFF99C2                            
FFFF99C2                            FreqList_FM:
FFFF99C2                            ; 		dc.w $269	;NULL
FFFF99C2 028D                       		dc.w $28d	;C-0 $00
FFFF99C4 02B4                       		dc.w $2b4
FFFF99C6 02DD                       		dc.w $2dd
FFFF99C8 0309                       		dc.w $309
FFFF99CA 0337                       		dc.w $337
FFFF99CC 0368                       		dc.w $368
FFFF99CE 039C                       		dc.w $39c
FFFF99D0 03D3                       		dc.w $3d3
FFFF99D2 040D                       		dc.w $40d
FFFF99D4 044B                       		dc.w $44b
FFFF99D6 048C                       		dc.w $48c
FFFF99D8 0269                       		dc.w $269
FFFF99DA 028D                       		dc.w $28d	;C-1 $0C
FFFF99DC 02B4                       		dc.w $2b4
FFFF99DE 02DD                       		dc.w $2dd
FFFF99E0 0309                       		dc.w $309
FFFF99E2 0337                       		dc.w $337
FFFF99E4 0368                       		dc.w $368
FFFF99E6 039C                       		dc.w $39c
FFFF99E8 03D3                       		dc.w $3d3
FFFF99EA 040D                       		dc.w $40d
FFFF99EC 044B                       		dc.w $44b
FFFF99EE 048C                       		dc.w $48c
FFFF99F0 0A69                       		dc.w $a69
FFFF99F2 0A8D                       		dc.w $a8d	;C-2 $18
FFFF99F4 0AB4                       		dc.w $ab4
FFFF99F6 0ADD                       		dc.w $add
FFFF99F8 0B09                       		dc.w $b09
FFFF99FA 0B37                       		dc.w $b37
FFFF99FC 0B68                       		dc.w $b68
FFFF99FE 0B9C                       		dc.w $b9c
FFFF9A00 0BD3                       		dc.w $bd3
FFFF9A02 0C0D                       		dc.w $c0d
FFFF9A04 0C4B                       		dc.w $c4b
FFFF9A06 0C8C                       		dc.w $c8c
FFFF9A08 1269                       		dc.w $1269
FFFF9A0A 128D                       		dc.w $128d	;C-3 $24
FFFF9A0C 12B4                       		dc.w $12b4
FFFF9A0E 12DD                       		dc.w $12dd
FFFF9A10 1309                       		dc.w $1309
FFFF9A12 1337                       		dc.w $1337
FFFF9A14 1368                       		dc.w $1368
FFFF9A16 139C                       		dc.w $139c
FFFF9A18 13D3                       		dc.w $13d3
FFFF9A1A 140D                       		dc.w $140d
FFFF9A1C 144B                       		dc.w $144b
FFFF9A1E 148C                       		dc.w $148c
FFFF9A20 1A69                       		dc.w $1a69
FFFF9A22 1A8D                       		dc.w $1a8d	;C-4 $30
FFFF9A24 1AB4                       		dc.w $1ab4
FFFF9A26 1ADD                       		dc.w $1add
FFFF9A28 1B09                       		dc.w $1b09
FFFF9A2A 1B37                       		dc.w $1b37
FFFF9A2C 1B68                       		dc.w $1b68
FFFF9A2E 1B9C                       		dc.w $1b9c
FFFF9A30 1BD3                       		dc.w $1bd3
FFFF9A32 1C0D                       		dc.w $1c0d
FFFF9A34 1C4B                       		dc.w $1c4b
FFFF9A36 1C8C                       		dc.w $1c8c
FFFF9A38 2269                       		dc.w $2269
FFFF9A3A 228D                       		dc.w $228d	;C-5 $3C
FFFF9A3C 22B4                       		dc.w $22b4
FFFF9A3E 22DD                       		dc.w $22dd
FFFF9A40 2309                       		dc.w $2309
FFFF9A42 2337                       		dc.w $2337
FFFF9A44 2368                       		dc.w $2368
FFFF9A46 239C                       		dc.w $239c
FFFF9A48 23D3                       		dc.w $23d3
FFFF9A4A 240D                       		dc.w $240d
FFFF9A4C 244B                       		dc.w $244b
FFFF9A4E 248C                       		dc.w $248c
FFFF9A50 2A69                       		dc.w $2a69
FFFF9A52 2A8D                       		dc.w $2a8d	;C-6 $48
FFFF9A54 2AB4                       		dc.w $2ab4
FFFF9A56 2ADD                       		dc.w $2add
FFFF9A58 2B09                       		dc.w $2b09
FFFF9A5A 2B37                       		dc.w $2b37
FFFF9A5C 2B68                       		dc.w $2b68
FFFF9A5E 2B9C                       		dc.w $2b9c
FFFF9A60 2BD3                       		dc.w $2bd3
FFFF9A62 2C0D                       		dc.w $2c0d
FFFF9A64 2C4B                       		dc.w $2c4b
FFFF9A66 2C8C                       		dc.w $2c8c
FFFF9A68 3269                       		dc.w $3269	;C-7 $54
FFFF9A6A 328D                       		dc.w $328d
FFFF9A6C 32B4                       		dc.w $32b4
FFFF9A6E 32DD                       		dc.w $32dd
FFFF9A70 3309                       		dc.w $3309
FFFF9A72 3337                       		dc.w $3337
FFFF9A74 3368                       		dc.w $3368
FFFF9A76 339C                       		dc.w $339c
FFFF9A78 33D3                       		dc.w $33d3
FFFF9A7A 340D                       		dc.w $340d
FFFF9A7C 344B                       		dc.w $344b
FFFF9A7E 348C                       		dc.w $348c
FFFF9A80                            		even
FFFF9A80                            		
FFFF9A80                            ; ; -------------------------------
FFFF9A80                            ; ; Mute/Rest channel
FFFF9A80                            ; ; -------------------------------
FFFF9A80                            ; 
FFFF9A80                            ; SMEG_ChannelRest:
FFFF9A80                            ; 		cmp.b	#$FF,Chn_ID(a5)
FFFF9A80                            ; 		beq	@Return
FFFF9A80                            ; 		
FFFF9A80                            ; ; 		btst	#bitPriority,(a6)
FFFF9A80                            ; ; 		beq.s	@SFX_Mode
FFFF9A80                            ; ; 		btst	#bitSfxOn,(RAM_SMEG_SfxBuff)
FFFF9A80                            ; ; 		beq.s	@SFX_Mode
FFFF9A80                            ; ;  		lea	(RAM_SMEG_PrioList),a3
FFFF9A80                            ; ;  		moveq	#0,d1
FFFF9A80                            ; ;  		move.b	LastPattChn(a6),d1
FFFF9A80                            ; ; 		btst	#0,(a3,d1.w)
FFFF9A80                            ; ; 		bne	@Return
FFFF9A80                            ; ; @SFX_Mode:
FFFF9A80                            ; 
FFFF9A80                            ; 		tst.b	Chn_ID(a5)
FFFF9A80                            ; 		bmi.s	@PSG_Rest
FFFF9A80                            ; 
FFFF9A80                            ;                 cmp.b	#6,Chn_ID(a5)
FFFF9A80                            ;                 bne.s	@NoChk6
FFFF9A80                            ; 		btst	#bitFmDac,snd_flags(a6)
FFFF9A80                            ; 		bne.s	@DAC_Rest
FFFF9A80                            ; 
FFFF9A80                            ; @NoChk6:
FFFF9A80                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
FFFF9A80                            ; 		bge	@PCM_Rest
FFFF9A80                            ; 		
FFFF9A80                            ; 		moveq	#$28,d0
FFFF9A80                            ;                 moveq	#0,d1
FFFF9A80                            ; 		move.b	Chn_ID(a5),d1
FFFF9A80                            ; 		bsr	SMEG_Z80_Off
FFFF9A80                            ; 		bsr	FM_RegWrite_1
FFFF9A80                            ; 		bsr	SMEG_Z80_On
FFFF9A80                            ; 
FFFF9A80                            ; @Return:
FFFF9A80                            ; 		rts
FFFF9A80                            ; 
FFFF9A80                            ; ; -------------------------------
FFFF9A80                            ; ; PSG Rest
FFFF9A80                            ; ; -------------------------------
FFFF9A80                            ; 
FFFF9A80                            ; @PSG_Rest:
FFFF9A80                            ; 		moveq	#0,d0
FFFF9A80                            ; 		move.b	Chn_ID(a5),d0
FFFF9A80                            ; 		add.b	#$1F,d0
FFFF9A80                            ; 		move.b	d0,($C00011)
FFFF9A80                            ; 
FFFF9A80                            ; @Disabled:
FFFF9A80                            ; 		rts
FFFF9A80                            ; 
FFFF9A80                            ; ; -------------------------------
FFFF9A80                            ; ; DAC Rest
FFFF9A80                            ; ; -------------------------------
FFFF9A80                            ; 
FFFF9A80                            ; @DAC_Rest:
FFFF9A80                            ;   		bsr	SMEG_Z80_Off
FFFF9A80                            ; 		moveq	#$2B,d0
FFFF9A80                            ;                 moveq	#0,d1
FFFF9A80                            ;   		bsr	FM_RegWrite_1
FFFF9A80                            ; 
FFFF9A80                            ; 		moveq	#0,d0
FFFF9A80                            ; 		move.b	d0,($A001E0+$D)
FFFF9A80                            ; 		bsr	SMEG_Z80_On
FFFF9A80                            ; 		rts
FFFF9A80                            ; 
FFFF9A80                            ; ; -------------------------------
FFFF9A80                            ; ; PCM Rest
FFFF9A80                            ; ; -------------------------------
FFFF9A80                            ; 
FFFF9A80                            ; @PCM_Rest:
FFFF9A80                            ;  		if MCD
FFFF9A80                            ;  		
FFFF9A80                            ; 		tst.l	SongPcmSamp(a6)
FFFF9A80                            ; 		beq.s	@ReturnPCM
FFFF9A80                            ; 		bmi.s	@ReturnPCM
FFFF9A80                            ; 		
FFFF9A80                            ; 		moveq	#0,d1
FFFF9A80                            ; 		move.b	Chn_ID(a5),d1
FFFF9A80                            ; 		and.b	#$F,d1
FFFF9A80                            ; 		bclr	d1,PcmChnOnOff(a6)
FFFF9A80                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
FFFF9A80                            ; 		moveq	#CdTask_SetOnOff,d0
FFFF9A80                            ; 		bsr	SMEG_CD_Call
FFFF9A80                            ; 		
FFFF9A80                            ;  		elseif MARS
FFFF9A80                            ;  		
FFFF9A80                            ; 		tst.l	SongPcmSamp(a6)
FFFF9A80                            ; 		beq.s	@ReturnPCM
FFFF9A80                            ; 		bmi.s	@ReturnPCM
FFFF9A80                            ; 		
FFFF9A80                            ;   		moveq	#0,d0
FFFF9A80                            ;   		move.b	Chn_ID(a5),d0
FFFF9A80                            ;   		and.w	#$F,d0
FFFF9A80                            ;   		move.b	d0,(marsreg+comm2)
FFFF9A80                            ;   		moveq	#marscall_Stop,d0
FFFF9A80                            ;   		bsr	SMEG_MARS_Call
FFFF9A80                            ;     		
FFFF9A80                            ; 		endif
FFFF9A80                            ; @ReturnPCM:
FFFF9A80                            ; 		rts
FFFF9A80                            		
FFFF9A80                            ; ================================================================
FFFF9A80                            ; Subs
FFFF9A80                            ; ================================================================
FFFF9A80                            
FFFF9A80                            ; -------------------------------------------
FFFF9A80                            ; Extra channels communication
FFFF9A80                            ; -------------------------------------------
FFFF9A80                            
FFFF9A80                            SMEG_CD_Call:
FFFF9A80                            ; 		bra	SubCpu_Task_Wait
FFFF9A80 4E75                       		rts
FFFF9A82                            
FFFF9A82                            SMEG_MARS_Call:
FFFF9A82 4E75                        		rts
FFFF9A84                             		
FFFF9A84                            ; -------------------------------------------
FFFF9A84                            ; Set instrument
FFFF9A84                            ; -------------------------------------------
FFFF9A84                            
FFFF9A84                            SMEG_SetVoice:
FFFF9A84 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
FFFF9A8A 6700 0000                  		beq	@Return
FFFF9A8E                            		
FFFF9A8E 0816 0000                  		btst	#bitPriority,(a6)
FFFF9A92 6600                       		bne.s	@SFX_ModeV
FFFF9A94 6100 0000                  		bsr	SMEG_FindPrioSlot
FFFF9A98 4A13                         		tst.b	(a3)
FFFF9A9A 6600 0000                    		bne	@Return
FFFF9A9E                            @SFX_ModeV:
FFFF9A9E                            
FFFF9A9E                            
FFFF9A9E 4AAE 0010                  		tst.l	snd_instr(a6)
FFFF9AA2 6700 0000                  		beq	@Return
FFFF9AA6                            		
FFFF9AA6 4A2D 0007                  		tst.b	Chn_ID(a5)
FFFF9AAA 6B00                       		bmi.s	@Return
FFFF9AAC 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
FFFF9AB2 6C00 0000                  		bge	SMEG_SetVoice_PCM
FFFF9AB6 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
FFFF9ABC 6700 0000                  		beq	SMEG_SetVoice_DAC
FFFF9AC0                            		
FFFF9AC0 6000 0000                   		bra	SetVoice_FM
FFFF9AC4                            @Return:
FFFF9AC4 4E75                        		rts
FFFF9AC6                            		
FFFF9AC6                            ; -------------------------------------------
FFFF9AC6                            ; Send DAC
FFFF9AC6                            ; -------------------------------------------
FFFF9AC6                            
FFFF9AC6                            SMEG_SetVoice_DAC:
FFFF9AC6 6100 0000                  		bsr	ChnlFM_srchIns
FFFF9ACA 0C42 FFFF                  		cmp.w	#-1,d2
FFFF9ACE 6700                       		beq.s	@Return
FFFF9AD0                            		
FFFF9AD0 0802 0007                   		btst	#7,d2
FFFF9AD4 6600                        		bne.s	@Sample_Mode
FFFF9AD6 08AE 0000 0001             		bclr	#bitFmDac,snd_flags(a6)
FFFF9ADC 6000 0000                  		bra	SetVoice_FM
FFFF9AE0                             		
FFFF9AE0                            @Sample_Mode:
FFFF9AE0 08EE 0000 0001             		bset	#bitFmDac,snd_flags(a6)
FFFF9AE6 202B 0004                  		move.l	4(a3),d0
FFFF9AEA 222B 0008                  		move.l	8(a3),d1
FFFF9AEE 0481 0000 0001             		sub.l	#1,d1
FFFF9AF4 242B 000C                  		move.l	$C(a3),d2
FFFF9AF8 7600                       		moveq	#0,d3
FFFF9AFA 162D 000B                  		move.b	chn_note(a5),d3
FFFF9AFE D66B 0002                   		add.w	2(a3),d3
FFFF9B02 6000 0000                   		bra	Audio_Sample_Set
FFFF9B06                            @Return:
FFFF9B06 4E75                       		rts
FFFF9B08                            		
FFFF9B08                            ; -------------------------------------------
FFFF9B08                            ; Send FM
FFFF9B08                            ; -------------------------------------------
FFFF9B08                            
FFFF9B08                            SetVoice_FM:
FFFF9B08 6100 0000                  		bsr	ChnlFM_srchIns
FFFF9B0C 08AE 0003 0001             		bclr	#bitSpecial3,snd_flags(a6)
FFFF9B12 0C42 FFFF                  		cmp.w	#-1,d2
FFFF9B16 6700 0000                  		beq	@Return
FFFF9B1A 0802 0007                   		btst	#7,d2
FFFF9B1E 6600 0000                   		bne	@Return
FFFF9B22 0802 0006                   		btst	#6,d2
FFFF9B26 6700                        		beq.s	@notFM3
FFFF9B28 08EE 0003 0001              		bset	#bitSpecial3,snd_flags(a6)
FFFF9B2E                            @notFM3:
FFFF9B2E                            
FFFF9B2E                            ;  		adda.w	#4,a3
FFFF9B2E 266B 0004                  		movea.l	4(a3),a3
FFFF9B32 7000                       		moveq	#0,d0
FFFF9B34 102D 0007                  		move.b	Chn_ID(a5),d0
FFFF9B38 0C00 0004                  		cmp.b	#4,d0
FFFF9B3C 6D00                       		blt.s	@Low3
FFFF9B3E 0400 0004                  		sub.b	#4,d0
FFFF9B42                            @Low3:
FFFF9B42                            
FFFF9B42 4840                       		swap	d0
FFFF9B44 303C 0028                  		move.w	#$28,d0
FFFF9B48 7200                       		moveq	#0,d1
FFFF9B4A 122D 0007                  		move.b	Chn_ID(a5),d1
FFFF9B4E 6100 0000                  		bsr	SMEG_Z80_Off
FFFF9B52 6100 0000                  		bsr	FM_RegWrite_1
FFFF9B56 4840                       		swap	d0
FFFF9B58                            
FFFF9B58 45FA 0000                  		lea	SMEG_FM_RegList(pc),a2
FFFF9B5C 3C00                       		move.w	d0,d6
FFFF9B5E 7818                       		moveq	#$18,d4
FFFF9B60                            @Next:
FFFF9B60 3A06                       		move.w	d6,d5
FFFF9B62 101A                       		move.b	(a2)+,d0
FFFF9B64 3600                       		move.w	d0,d3
FFFF9B66 D045                       		add.w	d5,d0
FFFF9B68 121B                       		move.b	(a3)+,d1
FFFF9B6A                            
FFFF9B6A 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
FFFF9B70 6C00                       		bge.s	@Chn456
FFFF9B72 6100 0000                  		bsr	FM_RegWrite_1
FFFF9B76 51CC FFE8                  		dbf	d4,@Next
FFFF9B7A 6000                       		bra.s	@BackZ80
FFFF9B7C                            
FFFF9B7C                            @Chn456:
FFFF9B7C 6100 0000                  		bsr	FM_RegWrite_2
FFFF9B80 51CC FFDE                  		dbf	d4,@Next
FFFF9B84                            @BackZ80:
FFFF9B84 6100 0000                  		bsr	SMEG_Z80_On
FFFF9B88                            @Return:
FFFF9B88 4E75                       		rts
FFFF9B8A                            
FFFF9B8A                            ; -------------------------------------------
FFFF9B8A                            ; Set FM panning
FFFF9B8A                            ; -------------------------------------------
FFFF9B8A                            
FFFF9B8A                            SMEG_FM_SetPan:
FFFF9B8A 4A2D 0007                  		tst.b	Chn_ID(a5)
FFFF9B8E 6B00 0000                  		bmi	@Return
FFFF9B92                            		
FFFF9B92 7200                       		moveq	#0,d1
FFFF9B94 122D 000C                    		move.b	chn_pan(a5),d1
FFFF9B98 EC49                         		lsr.w	#6,d1
FFFF9B9A 0241 0003                    		and.w	#%11,d1
FFFF9B9E 123B 1000                    		move.b	@list(pc,d1.w),d1
FFFF9BA2 0241 00C0                    		and.w	#%11000000,d1
FFFF9BA6 303C 00B4                    		move.w	#$B4,d0
FFFF9BAA 142D 0007                    		move.b	chn_id(a5),d2
FFFF9BAE 0242 0003                    		and.w	#%11,d2
FFFF9BB2 8042                         		or.w	d2,d0
FFFF9BB4 6000 0000                   		bra	SMEG_FM_FindWrite
FFFF9BB8                            		
FFFF9BB8 8080 C040                  @list:		dc.b $80,$80,$C0,$40
FFFF9BBC                            		even
FFFF9BBC                            		
FFFF9BBC                            		
FFFF9BBC 303C 00B4                  		move.w	#$B4,d0
FFFF9BC0 7400                       		moveq	#0,d2
FFFF9BC2 142D 0007                  		move.b	Chn_ID(a5),d2
FFFF9BC6 7200                       		moveq	#0,d1
FFFF9BC8 122D 000C                  		move.b	Chn_Pan(a5),d1
FFFF9BCC                            
FFFF9BCC 6100 0000                  		bsr	SMEG_Z80_Off
FFFF9BD0 0C02 0003                  		cmp.b	#3,d2
FFFF9BD4 6E00                       		bgt.s	@SecondFM
FFFF9BD6 D042                       		add.w	d2,d0
FFFF9BD8 6100 0000                  		bsr	FM_RegWrite_1
FFFF9BDC 6000                       		bra.s	@BackZ80
FFFF9BDE                            @SecondFM:
FFFF9BDE 0442 0004                  		sub.w	#4,d2
FFFF9BE2 D042                       		add.w	d2,d0
FFFF9BE4 6100 0000                  		bsr	FM_RegWrite_2
FFFF9BE8                            @BackZ80:
FFFF9BE8 6100 0000                  		bsr	SMEG_Z80_On
FFFF9BEC                            @Return:
FFFF9BEC 4E75                       		rts
FFFF9BEE                            
FFFF9BEE                            ; ---------------------
FFFF9BEE                            
FFFF9BEE                            ChnlFM_srchIns:
FFFF9BEE 266E 0010                  		movea.l	snd_instr(a6),a3
FFFF9BF2 302B 0000                   		move.w	instDYmha(a3),d0
FFFF9BF6 D6C0                        		adda	d0,a3
FFFF9BF8                            @next:
FFFF9BF8 4841                       		swap	d1
FFFF9BFA 4A53                       		tst.w	(a3)
FFFF9BFC 6B00 0000                   		bmi	@NoteOff
FFFF9C00 7000                        		moveq	#0,d0
FFFF9C02 102D 0008                  		move.b	chn_inst(a5),d0
FFFF9C06 3213                       		move.w	(a3),d1
FFFF9C08 3401                       		move.w	d1,d2
FFFF9C0A 0241 003F                  		and.w	#$3F,d1
FFFF9C0E B041                       		cmp.w	d1,d0
FFFF9C10 6700                       		beq.s	@found
FFFF9C12 D6FC 0008                  		adda	#8,a3		;inst,oct,firstlong
FFFF9C16 0802 0007                  		btst	#7,d2
FFFF9C1A 6600                       		bne.s	@doit
FFFF9C1C 0802 0006                  		btst	#6,d2
FFFF9C20 67D6                       		beq.s	@next
FFFF9C22                            @doit:
FFFF9C22 D6FC 0008                  		adda	#8,a3		;scndlong,thrdlong
FFFF9C26 60D0                       		bra.s	@next
FFFF9C28                            @NoteOff:
FFFF9C28 4841                       		swap	d1
FFFF9C2A 74FF                       		moveq	#-1,d2
FFFF9C2C                            @found:
FFFF9C2C 4E75                       		rts
FFFF9C2E                            		
FFFF9C2E                            ; --------------------------------------------
FFFF9C2E                            ; Play a sample
FFFF9C2E                            ;
FFFF9C2E                            ; Input:
FFFF9C2E                            ; d0 | LONG - Start
FFFF9C2E                            ; d1 | LONG - End
FFFF9C2E                            ; d2 | LONG - Loop point
FFFF9C2E                            ;              0 = From start
FFFF9C2E                            ;             -1 = No loop
FFFF9C2E                            ; d3 | WORD - Note ($3C - default)
FFFF9C2E                            ; --------------------------------------------
FFFF9C2E                            
FFFF9C2E                            Audio_Sample_Set:
FFFF9C2E 6100 0000                  		bsr	SMEG_Z80_Off
FFFF9C32                            		
FFFF9C32 41F9 00A0 0180             		lea	($A00180),a0
FFFF9C38 E198                       		rol.l	#8,d0
FFFF9C3A 10C0                       		move.b	d0,(a0)+
FFFF9C3C E198                       		rol.l	#8,d0
FFFF9C3E 10C0                       		move.b	d0,(a0)+		
FFFF9C40 E198                       		rol.l	#8,d0
FFFF9C42 10C0                       		move.b	d0,(a0)+
FFFF9C44 E198                       		rol.l	#8,d0
FFFF9C46 10C0                       		move.b	d0,(a0)+
FFFF9C48                            		
FFFF9C48 0481 0000 0001              		sub.l	#1,d1
FFFF9C4E E199                       		rol.l	#8,d1
FFFF9C50 10C1                       		move.b	d1,(a0)+
FFFF9C52 E199                       		rol.l	#8,d1
FFFF9C54 10C1                       		move.b	d1,(a0)+		
FFFF9C56 E199                       		rol.l	#8,d1
FFFF9C58 10C1                       		move.b	d1,(a0)+
FFFF9C5A E199                       		rol.l	#8,d1
FFFF9C5C 10C1                       		move.b	d1,(a0)+
FFFF9C5E                            		
FFFF9C5E 7200                       		moveq	#0,d1
FFFF9C60 2800                       		move.l	d0,d4
FFFF9C62 0C82 FFFF FFFF             		cmp.l	#-1,d2
FFFF9C68 6700                       		beq.s	@no_loop
FFFF9C6A 7202                       		moveq	#2,d1
FFFF9C6C 2800                       		move.l	d0,d4
FFFF9C6E D882                       		add.l	d2,d4
FFFF9C70                            @no_loop:
FFFF9C70 E19C                       		rol.l	#8,d4
FFFF9C72 10C4                       		move.b	d4,(a0)+
FFFF9C74 E19C                       		rol.l	#8,d4
FFFF9C76 10C4                       		move.b	d4,(a0)+		
FFFF9C78 E19C                       		rol.l	#8,d4
FFFF9C7A 10C4                       		move.b	d4,(a0)+
FFFF9C7C E19C                       		rol.l	#8,d4
FFFF9C7E 10C4                       		move.b	d4,(a0)+
FFFF9C80                            
FFFF9C80 1081                       		move.b	d1,(a0)
FFFF9C82                            		
FFFF9C82 3003                       		move.w	d3,d0
FFFF9C84 6000 0000                  		bra	AudioSmplNote_go
FFFF9C88                            
FFFF9C88                            ; --------------------------------------------
FFFF9C88                            ; Stop the current sample
FFFF9C88                            ; --------------------------------------------
FFFF9C88                            
FFFF9C88                            Audio_Sample_Play:
FFFF9C88 6100 0000                  		bsr	SMEG_Z80_Off
FFFF9C8C                            		
FFFF9C8C 1039 00A0 018C             		move.b	($A0018C).l,d0
FFFF9C92 08C0 0000                  		bset	#0,d0
FFFF9C96 13C0 00A0 018C             		move.b	d0,($A0018C).l
FFFF9C9C                             		
FFFF9C9C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF9CA4 4E75                       		rts
FFFF9CA6                            		
FFFF9CA6                            ; --------------------------------------------
FFFF9CA6                            ; Stop the current sample
FFFF9CA6                            ; --------------------------------------------
FFFF9CA6                            
FFFF9CA6                            Audio_Sample_Stop:
FFFF9CA6 6100 0000                  		bsr	SMEG_Z80_Off
FFFF9CAA                            		
FFFF9CAA 13FC 0040 00A0 018C        		move.b	#$40,($A0018C).l
FFFF9CB2                             		
FFFF9CB2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF9CBA 4E75                       		rts
FFFF9CBC                            		
FFFF9CBC                            ; --------------------------------------------
FFFF9CBC                            ; Modify sample note
FFFF9CBC                            ;
FFFF9CBC                            ; d3 | WORD - Note
FFFF9CBC                            ; --------------------------------------------
FFFF9CBC                            
FFFF9CBC                            Audio_Sample_Note:
FFFF9CBC 6100 0000                  		bsr	SMEG_Z80_Off
FFFF9CC0                            		
FFFF9CC0                            AudioSmplNote_go:
FFFF9CC0                            ; 		sub.w	#24,d0			; skip 2 octaves
FFFF9CC0 ED48                       		lsl.w	#6,d0
FFFF9CC2 0640 01C0                   		add.w	#$1C0,d0
FFFF9CC6 13C0 00A0 00DC             		move.b	d0,($A000DC)		; ld bc,(NEW ADDRESS)
FFFF9CCC E048                       		lsr.w	#8,d0			;
FFFF9CCE 13C0 00A0 00DD              		move.b	d0,($A000DD)		;
FFFF9CD4                             		
FFFF9CD4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF9CDC 4E75                       		rts
FFFF9CDE                            
FFFF9CDE                            ; -------------------------------------------
FFFF9CDE                            ; Send PCM/PWM
FFFF9CDE                            ; -------------------------------------------
FFFF9CDE                            
FFFF9CDE                            SMEG_SetVoice_PCM:
FFFF9CDE                               		
FFFF9CDE 7200                       		moveq	#0,d1
FFFF9CE0 7400                          		moveq	#0,d2
FFFF9CE2 4AAE 0014                  		tst.l	SongPcmSamp(a6)
FFFF9CE6 6700                       		beq.s	@FinishList
FFFF9CE8 6B00                       		bmi.s	@FinishList
FFFF9CEA 266E 0014                  		movea.l	SongPcmSamp(a6),a3
FFFF9CEE 122D 0008                  		move.b	Chn_Inst(a5),d1
FFFF9CF2                            @NextPcm:
FFFF9CF2 4A53                       		tst.w	(a3)
FFFF9CF4 6B00                       		bmi.s	@GiveUp
FFFF9CF6 1413                       		move.b	(a3),d2
FFFF9CF8 B401                       		cmp.b	d1,d2
FFFF9CFA 6700                       		beq.s	@FoundPcm
FFFF9CFC D6FC 0002                  		adda	#2,a3
FFFF9D00 60F0                       		bra.s	@NextPcm
FFFF9D02                            @FoundPcm:
FFFF9D02 7200                       		moveq	#0,d1
FFFF9D04 122B 0001                  		move.b	1(a3),d1
FFFF9D08                            @GiveUp:
FFFF9D08 0441 0001                  		sub.w	#1,d1
FFFF9D0C E549                       		lsl.w	#2,d1
FFFF9D0E 47F9 FFFF F1AE             		lea	(RAM_SMEG_PcmList),a3
FFFF9D14 D6C1                       		adda	d1,a3
FFFF9D16                               		
FFFF9D16 1B6B 0001 000E             		move.b	1(a3),Chn_PCM_Pitch(a5)
FFFF9D1C 13ED 0007 00A1 2010        		move.b	Chn_ID(a5),($A12000+CommDataM)
FFFF9D24 13D3 00A1 2011             		move.b	(a3),($A12000+CommDataM+1)
FFFF9D2A 33EB 0002 00A1 2012        		move.w	2(a3),($A12000+CommDataM+2)
FFFF9D32 7021                       		moveq	#CdTask_SetAddr,d0
FFFF9D34 6100 FD4A                  		bsr	SMEG_CD_Call
FFFF9D38                            
FFFF9D38                            ; ---------------------------------
FFFF9D38                            
FFFF9D38                            @FinishList:
FFFF9D38 4E75                       		rts
FFFF9D3A                            		
FFFF9D3A                            ; -------------------------------------------
FFFF9D3A                            ; Reset FM
FFFF9D3A                            ; -------------------------------------------
FFFF9D3A                            
FFFF9D3A                            SMEG_FM_Reset:
FFFF9D3A 6100 0000                  		bsr	SMEG_Z80_Off
FFFF9D3E                            
FFFF9D3E 7028                       		moveq	#$28,d0
FFFF9D40 7200                       		moveq	#0,d1
FFFF9D42 6100 0000                  		bsr	FM_RegWrite_1
FFFF9D46 7028                       		moveq	#$28,d0
FFFF9D48 7201                       		moveq	#1,d1
FFFF9D4A 6100 0000                  		bsr	FM_RegWrite_1
FFFF9D4E 7028                       		moveq	#$28,d0
FFFF9D50 7202                       		moveq	#2,d1
FFFF9D52 6100 0000                  		bsr	FM_RegWrite_1
FFFF9D56 7028                       		moveq	#$28,d0
FFFF9D58 7204                       		moveq	#4,d1
FFFF9D5A 6100 0000                  		bsr	FM_RegWrite_1
FFFF9D5E 7028                       		moveq	#$28,d0
FFFF9D60 7205                       		moveq	#5,d1
FFFF9D62 6100 0000                  		bsr	FM_RegWrite_1
FFFF9D66 7028                       		moveq	#$28,d0
FFFF9D68 7206                       		moveq	#6,d1
FFFF9D6A 6100 0000                  		bsr	FM_RegWrite_1
FFFF9D6E                            
FFFF9D6E 6000 0000                  		bra	SMEG_Z80_On
FFFF9D72                            
FFFF9D72                            ; -------------------------------------------
FFFF9D72                            ; Find FM
FFFF9D72                            ; -------------------------------------------
FFFF9D72                            
FFFF9D72                            SMEG_FM_FindWrite:
FFFF9D72 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
FFFF9D78 6C00                       		bge.s	@Second
FFFF9D7A 6000 0000                  		bra	FM_RegWrite_1
FFFF9D7E                            @Second:
FFFF9D7E 6000 0000                  		bra	FM_RegWrite_2
FFFF9D82                            
FFFF9D82                            ; -------------------------------------------
FFFF9D82                            ; Write to FM register
FFFF9D82                            ; -------------------------------------------
FFFF9D82                            
FFFF9D82                            FM_RegWrite_1:
FFFF9D82 1439 00A0 4000             		move.b	($A04000).l,d2
FFFF9D88 0802 0007                  		btst	#7,d2
FFFF9D8C 66F4                       		bne.s	FM_RegWrite_1
FFFF9D8E 13C0 00A0 4000             		move.b	d0,($A04000).l
FFFF9D94                            @Loop:
FFFF9D94 1439 00A0 4000             		move.b	($A04000).l,d2
FFFF9D9A 0802 0007                  		btst	#7,d2
FFFF9D9E 66F4                       		bne.s	@Loop
FFFF9DA0 13C1 00A0 4001             		move.b	d1,($A04001).l
FFFF9DA6 4E75                       		rts
FFFF9DA8                            
FFFF9DA8                            FM_RegWrite_2:
FFFF9DA8 1439 00A0 4000             		move.b	($A04000).l,d2
FFFF9DAE 0802 0007                  		btst	#7,d2
FFFF9DB2 66F4                       		bne.s	FM_RegWrite_2
FFFF9DB4 13C0 00A0 4002             		move.b	d0,($A04002).l
FFFF9DBA                            @Loop:
FFFF9DBA 1439 00A0 4000             		move.b	($A04000).l,d2
FFFF9DC0 0802 0007                  		btst	#7,d2
FFFF9DC4 66F4                       		bne.s	@Loop
FFFF9DC6 13C1 00A0 4003             		move.b	d1,($A04003).l
FFFF9DCC 4E75                       		rts
FFFF9DCE                            		
FFFF9DCE                            SMEG_Z80_Off:
FFFF9DCE 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
FFFF9DD6                            @WaitZ80;\@:
FFFF9DD6 0839 0000 00A1 1100        		btst	#0,($A11100).l
FFFF9DDE 66F6                       		bne.s	@WaitZ80;\@
FFFF9DE0 4E75                       		rts
FFFF9DE2                            		
FFFF9DE2                            ; USES d2
FFFF9DE2                            
FFFF9DE2                            SMEG_Z80_On:
FFFF9DE2 1439 00A0 018C             		move.b	($A0018C),d2
FFFF9DE8 0802 0007                  		btst	#7,d2
FFFF9DEC 6700                       		beq.s	@stopped;\@
FFFF9DEE                            @busywait;\@:
FFFF9DEE 1439 00A0 4000             		move.b	($A04000).l,d2
FFFF9DF4 0802 0007                  		btst	#7,d2
FFFF9DF8 66F4                       		bne.s	@busywait;\@
FFFF9DFA 13FC 002A 00A0 4000        		move.b	#$2A,(sound_ym_1)
FFFF9E02 1439 00A0 018F             		move.b	($A0018F),d2
FFFF9E08 13C2 00A0 4001             		move.b	d2,(sound_ym_2)
FFFF9E0E                            @stopped;\@:
FFFF9E0E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
FFFF9E16 4E75                       		rts
FFFF9E18                            		
FFFF9E18                            ; -----------------------
FFFF9E18                            ; Setup channels
FFFF9E18                            ; -----------------------
FFFF9E18                            
FFFF9E18                            SMEG_Load_SetChnls:
FFFF9E18 286E 0004                  		movea.l	SongRequest(a6),a4				;a4 - Music data
FFFF9E1C 3D6E 0018 001C             		move.w	TicksRequest(a6),TicksSet(a6)
FFFF9E22                            
FFFF9E22                            ; -----------------------
FFFF9E22                            ; Get the
FFFF9E22                            ; PatternEnd/PatternLoop
FFFF9E22                            ; numbers
FFFF9E22                            ; -----------------------
FFFF9E22                            
FFFF9E22 1D5C 0002                  		move.b	(a4)+,PatternEnd(a6)
FFFF9E26 1D5C 0003                  		move.b	(a4)+,PatternLoop(a6)
FFFF9E2A                            		
FFFF9E2A                            ; -----------------------
FFFF9E2A                            ; Get instruments
FFFF9E2A                            ; -----------------------
FFFF9E2A                            
FFFF9E2A 2D5C 0008                  		move.l	(a4)+,SongStart(a6)
FFFF9E2E 2D5C 0010                  		move.l	(a4)+,snd_instr(a6)
FFFF9E32                            
FFFF9E32                            ; -----------------------
FFFF9E32                            ; Setup the channel IDs
FFFF9E32                            ; -----------------------
FFFF9E32                            
FFFF9E32 303C 0011                  		move.w	#max_chnl-1,d0
FFFF9E36 341C                       		move.w	(a4)+,d2
FFFF9E38 0442 0001                  		sub.w	#1,d2
FFFF9E3C                            @SetId:
FFFF9E3C 1B7C 0001 0006             		move.b	#1,Chn_Type(a5)
FFFF9E42 1B7C 00FF 0007             		move.b	#-1,Chn_ID(a5)
FFFF9E48 4A42                       		tst.w	d2
FFFF9E4A 6B00                       		bmi.s	@Disabled
FFFF9E4C 0442 0001                  		sub.w	#1,d2
FFFF9E50 1B5C 0007                  		move.b	(a4)+,Chn_ID(a5)
FFFF9E54 1B5C 0009                   		move.b	(a4)+,Chn_Vol(a5)
FFFF9E58 1B5C 000C                   		move.b	(a4)+,Chn_Pan(a5)
FFFF9E5C 161C                        		move.b	(a4)+,d3
FFFF9E5E 4A2D 0007                   		tst.b	chn_id(a5)
FFFF9E62 6B00                        		bmi.s	@is_psg
FFFF9E64 0C2D 0010 0007              		cmp.b	#PCM_1,chn_id(a5)
FFFF9E6A 6C00                        		bge.s	@is_pcm
FFFF9E6C                             		
FFFF9E6C E94B                        		lsl.w	#4,d3
FFFF9E6E 1B43 000D                   		move.b	d3,Chn_FM_Key(a5)
FFFF9E72 6000                       		bra.s	@Disabled
FFFF9E74                            @is_pcm:
FFFF9E74 4E71                       		nop 
FFFF9E76 6000                       		bra.s	@Disabled
FFFF9E78                            		
FFFF9E78                            @is_psg:
FFFF9E78 122D 0007                  		move.b	Chn_ID(a5),d1
FFFF9E7C 0001 001F                  		or.b	#$1F,d1
FFFF9E80 13C1 00C0 0011             		move.b	d1,(sound_psg)
FFFF9E86                             		
FFFF9E86                            @Disabled:
FFFF9E86 DAFC 0010                  		adda 	#sizeof_Chn,a5
FFFF9E8A 51C8 FFB0                  		dbf	d0,@SetId
FFFF9E8E                             		
FFFF9E8E                            ; ; -----------------------
FFFF9E8E                            ; ; Master volumes
FFFF9E8E                            ; ; -----------------------
FFFF9E8E                            ; 
FFFF9E8E                            ; 		moveq	#(max_chnl)-1,d0
FFFF9E8E                            ; @SetVol:
FFFF9E8E                            ; 		move.b	(a4)+,Chn_MainVol(a5)
FFFF9E8E                            ; 		adda 	#sizeof_Chn,a5
FFFF9E8E                            ; 		dbf	d0,@SetVol
FFFF9E8E                            
FFFF9E8E                            ; -----------------------
FFFF9E8E                            ; last steps
FFFF9E8E                            ; -----------------------
FFFF9E8E                            
FFFF9E8E 286E 0008                  		movea.l	SongStart(a6),a4
FFFF9E92 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
FFFF9E96 1D5C 0020                  		move.b	(a4)+,PattSize(a6)
FFFF9E9A 426E 0022                  		clr.w	pattr_read(a6)
FFFF9E9E D8FC 0006                  		adda	#6,a4
FFFF9EA2 2D4C 000C                  		move.l	a4,SongRead(a6)
FFFF9EA6 4E75                       		rts
FFFF9EA8                            		
FFFF9EA8                            ; -----------------------
FFFF9EA8                            ; Search used slot
FFFF9EA8                            ; 
FFFF9EA8                            ; Uses d3
FFFF9EA8                            ; -----------------------
FFFF9EA8                            
FFFF9EA8                            SMEG_FindPrioSlot:
FFFF9EA8 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
FFFF9EAE                            ;  		inform 0,"%h",RAM_SMEG_PrioList
FFFF9EAE                             		
FFFF9EAE 7600                        		moveq	#0,d3
FFFF9EB0 162D 0007                   		move.b	Chn_ID(a5),d3
FFFF9EB4 0803 0007                   		btst	#7,d3
FFFF9EB8 6600                        		bne.s	@PSG_slots
FFFF9EBA 0C03 0010                   		cmp.b	#PCM_1,d3
FFFF9EBE 6C00                        		bge.s	@PCM_Slots
FFFF9EC0 0C03 0004                   		cmp.b	#4,d3
FFFF9EC4 6D00                        		blt.s	@leftFM
FFFF9EC6 0443 0001                   		sub.w	#1,d3
FFFF9ECA                            @leftFM:
FFFF9ECA 6000                       		bra.s	@set_slot
FFFF9ECC                            
FFFF9ECC                            @PSG_slots:
FFFF9ECC EA4B                       		lsr.w	#5,d3
FFFF9ECE 0243 0003                  		and.w	#%11,d3
FFFF9ED2 0643 0006                  		add.w	#6,d3
FFFF9ED6 6000                       		bra.s	@set_slot
FFFF9ED8                            
FFFF9ED8                            @PCM_Slots:
FFFF9ED8 0443 0010                  		sub.w	#PCM_1,d3
FFFF9EDC                            @set_slot:
FFFF9EDC D6C3                       		add.w	d3,a3
FFFF9EDE 4E75                       		rts
FFFF9EE0                            		
FFFF9EE0                            ; -----------------------
FFFF9EE0                            ; Turn off the unused
FFFF9EE0                            ; channels
FFFF9EE0                            ; -----------------------
FFFF9EE0                            
FFFF9EE0                            SMEG_Load_FixSfx:
FFFF9EE0 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
FFFF9EE6                             		
FFFF9EE6                            ; FM Check
FFFF9EE6                            
FFFF9EE6 7605                        		moveq	#6-1,d3
FFFF9EE8 7028                        		moveq	#$28,d0
FFFF9EEA 7200                        		moveq	#0,d1
FFFF9EEC                            @chknextfm1:
FFFF9EEC 4A13                       		tst.b	(a3)
FFFF9EEE 6700                       		beq.s	@off_fm
FFFF9EF0 4213                       		clr.b	(a3)
FFFF9EF2                            		
FFFF9EF2 0C01 0006                  		cmp.b	#6,d1
FFFF9EF6 6600                       		bne.s	@notdac
FFFF9EF8 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
FFFF9EFE 6700                       		beq.s	@notdac
FFFF9F00                            		
FFFF9F00 6100 FDA4                  		bsr	Audio_Sample_Stop
FFFF9F04 6000                       		bra.s	@off_fm
FFFF9F06                            		
FFFF9F06                            @notdac:
FFFF9F06 6100 FEC6                  		bsr	SMEG_Z80_Off
FFFF9F0A 6100 FE76                  		bsr	FM_RegWrite_1
FFFF9F0E 6100 FED2                  		bsr	SMEG_Z80_On
FFFF9F12                            @off_fm:
FFFF9F12 D6FC 0001                  		adda 	#1,a3
FFFF9F16                            
FFFF9F16 0641 0001                  		add.w	#1,d1
FFFF9F1A 0C41 0003                  		cmp.w	#3,d1
FFFF9F1E 6600                       		bne.s	@nope
FFFF9F20 0641 0001                  		add.w	#1,d1
FFFF9F24                            @nope:
FFFF9F24 51CB FFC6                  		dbf	d3,@chknextfm1
FFFF9F28                            		
FFFF9F28                            ; PSG check
FFFF9F28                            
FFFF9F28 323C 009F                  		move.w	#$9F,d1
FFFF9F2C 303C 0003                  		move.w	#4-1,d0
FFFF9F30                            @chknextpsg:
FFFF9F30 4A13                       		tst.b	(a3)
FFFF9F32 6700                       		beq.s	@off_psg
FFFF9F34 4213                       		clr.b	(a3)
FFFF9F36 13C1 00C0 0011             		move.b	d1,(sound_psg)
FFFF9F3C                            @off_psg:
FFFF9F3C D6FC 0001                  		adda	#1,a3
FFFF9F40 0641 0020                  		add.w	#$20,d1
FFFF9F44 51C8 FFEA                  		dbf	d0,@chknextpsg
FFFF9F48                            		
FFFF9F48                            ; TODO: PCM check
FFFF9F48                            
FFFF9F48                            ; 		lea	(RAM_SMEG_Chnls_BGM),a5
FFFF9F48                            ; 		moveq	#(max_chnl)-1,d4
FFFF9F48                            ; @SetId:
FFFF9F48                            ; 		move.b	#$80,Chn_Pan(a5)
FFFF9F48                            ; 
FFFF9F48                            ; 		tst.b	Chn_ID(a5)
FFFF9F48                            ; 		bmi.s	@NotFM
FFFF9F48                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
FFFF9F48                            ; 		bge.s	@NotFM
FFFF9F48                            ; 
FFFF9F48                            ; 		clr.b	Chn_FM_Key(a5)
FFFF9F48                            ; 		move.b	#%00001111,Chn_FM_Key(a5)
FFFF9F48                            ; 		move.b	#$C0,Chn_Pan(a5)
FFFF9F48                            ; 		bsr	SMEG_FM_SetPan
FFFF9F48                            ; @NotFM:
FFFF9F48                            ; 		adda 	#sizeof_Chn,a5
FFFF9F48                            ; 		dbf	d4,@SetId
FFFF9F48                            		
FFFF9F48                            ; 		bsr	SMEG_Z80_Off
FFFF9F48                            ; 		moveq	#$2B,d0
FFFF9F48                            ;                 moveq	#0,d1
FFFF9F48                            ;   		bsr	FM_RegWrite_1
FFFF9F48                            ;   		
FFFF9F48                            ; 		moveq	#0,d0
FFFF9F48                            ; 		move.b	d0,($A001E0+$D)
FFFF9F48                            ; 		bsr	SMEG_Z80_On
FFFF9F48                            		
FFFF9F48 4E75                       		rts
FFFF9F4A                            		
FFFF9F4A                            ; -----------------------
FFFF9F4A                            ; Exclusive features
FFFF9F4A                            ;
FFFF9F4A                            ; TODO: creo que es
FFFF9F4A                            ; mala idea hacer esperar
FFFF9F4A                            ; al VBlank ya que moví
FFFF9F4A                            ; la rutina esta
FFFF9F4A                            ; -----------------------
FFFF9F4A                            
FFFF9F4A                            SMEG_Load_SetExtChnls:
FFFF9F4A                            
FFFF9F4A 7026                        		moveq	#CdTask_ClearAllPcm,d0
FFFF9F4C 6100 FB32                   		bsr	SMEG_CD_Call
FFFF9F50                            		
FFFF9F50 4DF9 FFFF EF00              		lea	(RAM_SMEG_Buffer),a6
FFFF9F56 4AAE 0014                   		tst.l	SongPcmSamp(a6)
FFFF9F5A 6700 0000                   		beq	@Return
FFFF9F5E 6B00 0000                   		bmi	@Return
FFFF9F62                             		
FFFF9F62 2A6E 0014                   		movea.l	SongPcmSamp(a6),a5
FFFF9F66 7200                        		moveq	#0,d1
FFFF9F68 47F9 FFFF F1AE              		lea	(RAM_SMEG_PcmList),a3
FFFF9F6E                            @NextSamp:
FFFF9F6E 4A55                        		tst.w	(a5)
FFFF9F70 6B00                        		bmi.s	@Finish
FFFF9F72 1681                        		move.b	d1,(a3)				;ST Address
FFFF9F74                            
FFFF9F74 302D 000E                   		move.w	$E(a5),d0
FFFF9F78 0240 00FF                   		and.w	#$FF,d0
FFFF9F7C 1740 0001                   		move.b	d0,1(a3)
FFFF9F80 23D5 00A1 2010              		move.l	(a5),($A12000+CommDataM)	;\
FFFF9F86 23ED 0004 00A1 2014         		move.l	4(a5),($A12000+CommDataM+4)	; > Filename
FFFF9F8E 23ED 0008 00A1 2018         		move.l	8(a5),($A12000+CommDataM+8)	;/
FFFF9F96 33FC 0000 00A1 201C          		move.w	#0,($A12000+CommDataM+$C)
FFFF9F9E 13C1 00A1 201D              		move.b	d1,($A12000+CommDataM+$D)	;Bank to use
FFFF9FA4 7020                        		moveq	#CdTask_LoadPcm,d0
FFFF9FA6 6100 FAD8                    		bsr	SMEG_CD_Call
FFFF9FAA                              		
FFFF9FAA 7400                         		moveq	#0,d2
FFFF9FAC 7600                         		moveq	#0,d3
FFFF9FAE 3439 00A1 2022              		move.w	($A12000+CommDataS+2),d2
FFFF9FB4 0C6D FFFF 000C              		cmp.w	#$FFFF,$C(a5)
FFFF9FBA 6700                        		beq.s	@NotLoop
FFFF9FBC 342D 000C                   		move.w	$C(a5),d2
FFFF9FC0                            @NotLoop:
FFFF9FC0                            ; 		move.b	d1,d3
FFFF9FC0                            ; 		and.w	#$7F,d3
FFFF9FC0                            ; 		lsl.w	#8,d3
FFFF9FC0                            ; 		lsl.w	#4,d3
FFFF9FC0                            ; 		add.w 	d3,d2
FFFF9FC0                            		
FFFF9FC0 3742 0002                   		move.w	d2,2(a3)			;Loop address
FFFF9FC4 1239 00A1 2020              		move.b	($A12000+CommDataS),d1		;Next ST
FFFF9FCA                             		
FFFF9FCA DAFC 0010                   		adda	#$10,a5
FFFF9FCE D6FC 0004                   		adda	#4,a3
FFFF9FD2 609A                        		bra.s	@NextSamp
FFFF9FD4                            @Finish:
FFFF9FD4 DAFC 0002                   		adda	#2,a5
FFFF9FD8 2D4D 0014                   		move.l	a5,SongPcmSamp(a6)		;Second list
FFFF9FDC                            		
FFFF9FDC                            ; -----------------------
FFFF9FDC                            
FFFF9FDC                            		
FFFF9FDC                            @Return:
FFFF9FDC 4E75                       		rts
FFFF9FDE                            		
FFFF9FDE                            ; -------------------------------------------
FFFF9FDE                            ; Reset PSG
FFFF9FDE                            ; -------------------------------------------
FFFF9FDE                            
FFFF9FDE                            SMEG_PSG_Reset:
FFFF9FDE 13FC 009F 00C0 0011        		move.b	#$9F,($C00011).l
FFFF9FE6 13FC 00BF 00C0 0011        		move.b	#$BF,($C00011).l
FFFF9FEE 13FC 00DF 00C0 0011        		move.b	#$DF,($C00011).l
FFFF9FF6 13FC 00FF 00C0 0011        		move.b	#$FF,($C00011).l
FFFF9FFE 4E75                       		rts
FFFFA000                            
FFFFA000                            ; -------------------------------------------
FFFFA000                            ; Reset PCM
FFFFA000                            ; -------------------------------------------
FFFFA000                            
FFFFA000                            SMEG_PCM_Reset:
FFFFA000 4AAE 0014                  		tst.l	SongPcmSamp(a6)
FFFFA004 6700                       		beq.s	@NoResetPCM
FFFFA006 6B00 0000                  		bmi	@NoResetPCM
FFFFA00A                            		
FFFFA00A                            		
FFFFA00A 422E 0027                  		clr.b	PcmChnOnOff(a6)
FFFFA00E 13EE 0027 00A1 2010        		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
FFFFA016 7025                       		moveq	#CdTask_SetOnOff,d0
FFFFA018 6000 FA66                  		bra	SMEG_CD_Call
FFFFA01C                            		
FFFFA01C                            
FFFFA01C                            @NoResetPCM:
FFFFA01C 4E75                       		rts
FFFFA01E                            
FFFFA01E                            ; ================================================================
FFFFA01E                            ; -------------------------------------------------
FFFFA01E                            ; Data
FFFFA01E                            ; -------------------------------------------------
FFFFA01E                            
FFFFA01E                            ; -------------------------------
FFFFA01E                            ; FM Register list
FFFFA01E                            ; -------------------------------
FFFFA01E                            
FFFFA01E                            SMEG_FM_RegList:
FFFFA01E B0                         		dc.b $B0
FFFFA01F 3038 343C                  		dc.b $30,$38,$34,$3C
FFFFA023 5058 545C                  		dc.b $50,$58,$54,$5C
FFFFA027 6068 646C                  		dc.b $60,$68,$64,$6C
FFFFA02B 7078 747C                  		dc.b $70,$78,$74,$7C
FFFFA02F 8088 848C                  		dc.b $80,$88,$84,$8C
FFFFA033 4048 444C                  		dc.b $40,$48,$44,$4C
FFFFA038 00                         		even
FFFFA038                            	
FFFFA038                            ; -------------------------------
FFFFA038                            ; Z80 Driver
FFFFA038                            ; -------------------------------
FFFFA038                            
FFFFA038                            Z80_Driver:	incbin	"system/sound/z80/main.bin"
FFFFB138                            Z80_DriverEnd:
FFFFB138                            		even
FFFFB138                            		
FFFFB138                            ; ---------------------------------------------------
FFFFB138                            ; ---------------------------------------------------
FFFFB138                            		include	"system/misc.asm"
FFFFB138                            ; ====================================================================
FFFFB138                            ; System
FFFFB138                            ; ====================================================================
FFFFB138                            
FFFFB138                            ; ====================================================================
FFFFB138                            ; -------------------------------------------------
FFFFB138                            ; RAM
FFFFB138                            ; -------------------------------------------------
FFFFB138                            
FFFFB138                                            rsset	RAM_System
FFFFB138 =FFFFDE00                  RAM_HintJumpTo	rs.w	1				; DONT
FFFFB138 =FFFFDE02                  RAM_HintAddr	rs.l	1				; SEPARATE
FFFFB138 =FFFFDE06                  RAM_VIntJumpTo	rs.w	1				; THESE
FFFFB138 =FFFFDE08                  RAM_VintAddr	rs.l	1				; ONES
FFFFB138 =FFFFDE0C                  RAM_VIntRegs	rs.l	16
FFFFB138 =FFFFDE4C                  RAM_ModeReset	rs.w	1
FFFFB138 =FFFFDE4E                  RAM_IntFlags	rs.b	1
FFFFB138 =FFFFDE4F                  RAM_GameMode	rs.b	1
FFFFB138                            
FFFFB138 =FFFFDE50                  sizeof_sys	rs.l	0
FFFFB138                            ; 		inform 0,"system ram: %h",(sizeof_sys-RAM_System)
FFFFB138                             				
FFFFB138                            ; ====================================================================
FFFFB138                            ; -------------------------------------------------
FFFFB138                            ; Variables
FFFFB138                            ; -------------------------------------------------
FFFFB138                            
FFFFB138                            ; --------------------------------------------
FFFFB138                            				
FFFFB138                            ; ====================================================================
FFFFB138                            ; -------------------------------------------------
FFFFB138                            ; Macros
FFFFB138                            ; -------------------------------------------------
FFFFB138                            
FFFFB138                            ; --------------------------------------------
FFFFB138                            
FFFFB138                            ; ====================================================================
FFFFB138                            ; -------------------------------------------------
FFFFB138                            ; Subs
FFFFB138                            ; -------------------------------------------------
FFFFB138                            
FFFFB138                            System_init:
FFFFB138 41F9 FFFF BC00             		lea	(RAM_ModeBuffer),a0
FFFFB13E 303C 0BFF                  		move.w	#($1800/2)-1,d0
FFFFB142                            @clear_buff:
FFFFB142 4258                       		clr.w	(a0)+
FFFFB144 51C8 FFFC                  		dbf	d0,@clear_buff
FFFFB148                            		
FFFFB148 23FC 0000 0000 FFFF DE08   		move.l	#MD_Vint,(RAM_VIntAddr)
FFFFB152 23FC 0000 0000 FFFF DE02   		move.l	#MD_Hint,(RAM_HIntAddr)
FFFFB15C 303C 4EF9                  		move.w	#$4EF9,d0
FFFFB160 33C0 FFFF DE06              		move.w	d0,(RAM_VIntJumpTo)
FFFFB166 33C0 FFFF DE00             		move.w	d0,(RAM_HIntJumpTo)
FFFFB16C                            		
FFFFB16C 4239 FFFF DE4F              		clr.b	(RAM_GameMode)
FFFFB172 4E75                       		rts
FFFFB174                            		
FFFFB174                            ; ---------------------------------------------
FFFFB174                            ; SRAM
FFFFB174                            ; ---------------------------------------------
FFFFB174                            
FFFFB174                            SRAM_Init:
FFFFB174 13FC 0003 00A1 30F1        		move.b	#%11,($A130F1)		;read+write
FFFFB17C 41F9 0020 0000             		lea	($200000),a0
FFFFB182 0108 0001                  		movep.w	1(a0),d0
FFFFB186 0C80 0000 4745             		cmp.l	#"GE",d0
FFFFB18C 6700                       		beq.s	@exit
FFFFB18E 43FA 0000                  		lea	@SramHead(pc),a1
FFFFB192 7006                       		moveq	#7-1,d0
FFFFB194                            @header:
FFFFB194 1019                       		move.b	(a1)+,d0
FFFFB196 1140 0001                  		move.b	d0,1(a0)
FFFFB19A D0FC 0002                  		adda	#2,a0
FFFFB19E 51C8 FFF4                  		dbf	d0,@header
FFFFB1A2                            @exit:
FFFFB1A2 13FC 0000 00A1 30F1        		move.b	#0,($A130F1)
FFFFB1AA 4E75                       		rts
FFFFB1AC                            
FFFFB1AC                            ; ---------------------------------------------
FFFFB1AC                            
FFFFB1AC 4745 4E59 5341 5645 00     @SramHead:	dc.b "GENYSAVE",0
FFFFB1B6 00                         		even
FFFFB1B6                            		
FFFFB1B6                            ; ---------------------------------------------
FFFFB1B6                            ; CalcSine
FFFFB1B6                            ;
FFFFB1B6                            ; Input:
FFFFB1B6                            ; d0 | WORD
FFFFB1B6                            ;
FFFFB1B6                            ; Output:
FFFFB1B6                            ; d0 | WORD
FFFFB1B6                            ; d1 | WORD
FFFFB1B6                            ; ---------------------------------------------
FFFFB1B6                            
FFFFB1B6                            CalcSine:
FFFFB1B6 0240 00FF                  		and.w	#$FF,d0
FFFFB1BA D040                       		add.w	d0,d0
FFFFB1BC 0640 0080                  		add.w	#$80,d0
FFFFB1C0 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
FFFFB1C4 0440 0080                  		sub.w	#$80,d0
FFFFB1C8 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
FFFFB1CC 4E75                       		rts	
FFFFB1CE                            
FFFFB1CE                            Sine_Data:
FFFFB1CE 0000 0006 000C 0012 0019+  		dc.w 0,	6, $C, $12, $19, $1F, $25, $2B,	$31, $38, $3E
FFFFB1E4 0044 004A 0050 0056 005C+  		dc.w $44, $4A, $50, $56, $5C, $61, $67,	$6D, $73, $78
FFFFB1F8 007E 0083 0088 008E 0093+  		dc.w $7E, $83, $88, $8E, $93, $98, $9D,	$A2, $A7, $AB
FFFFB20C 00B0 00B5 00B9 00BD 00C1+  		dc.w $B0, $B5, $B9, $BD, $C1, $C5, $C9,	$CD, $D1, $D4
FFFFB220 00D8 00DB 00DE 00E1 00E4+  		dc.w $D8, $DB, $DE, $E1, $E4, $E7, $EA,	$EC, $EE, $F1
FFFFB234 00F3 00F4 00F6 00F8 00F9+  		dc.w $F3, $F4, $F6, $F8, $F9, $FB, $FC,	$FD, $FE, $FE
FFFFB248 00FF 00FF 00FF 0100 00FF+  		dc.w $FF, $FF, $FF, $100, $FF, $FF, $FF, $FE, $FE, $FD
FFFFB25C 00FC 00FB 00F9 00F8 00F6+  		dc.w $FC, $FB, $F9, $F8, $F6, $F4, $F3,	$F1, $EE, $EC
FFFFB270 00EA 00E7 00E4 00E1 00DE+  		dc.w $EA, $E7, $E4, $E1, $DE, $DB, $D8,	$D4, $D1, $CD
FFFFB284 00C9 00C5 00C1 00BD 00B9+  		dc.w $C9, $C5, $C1, $BD, $B9, $B5, $B0,	$AB, $A7, $A2
FFFFB298 009D 0098 0093 008E 0088+  		dc.w $9D, $98, $93, $8E, $88, $83, $7E,	$78, $73, $6D
FFFFB2AC 0067 0061 005C 0056 0050+  		dc.w $67, $61, $5C, $56, $50, $4A, $44,	$3E, $38, $31
FFFFB2C0 002B 0025 001F 0019 0012+  		dc.w $2B, $25, $1F, $19, $12, $C, 6, 0,	-6, -$C, -$12
FFFFB2D6 FFE7 FFE1 FFDB FFD5 FFCF+  		dc.w -$19, -$1F, -$25, -$2B, -$31, -$38, -$3E, -$44, -$4A
FFFFB2E8 FFB0 FFAA FFA4 FF9F FF99+  		dc.w -$50, -$56, -$5C, -$61, -$67, -$6D, -$75, -$78, -$7E
FFFFB2FA FF7D FF78 FF72 FF6D FF68+  		dc.w -$83, -$88, -$8E, -$93, -$98, -$9D, -$A2, -$A7, -$AB
FFFFB30C FF50 FF4B FF47 FF43 FF3F+  		dc.w -$B0, -$B5, -$B9, -$BD, -$C1, -$C5, -$C9, -$CD, -$D1
FFFFB31E FF2C FF28 FF25 FF22 FF1F+  		dc.w -$D4, -$D8, -$DB, -$DE, -$E1, -$E4, -$E7, -$EA, -$EC
FFFFB330 FF12 FF0F FF0D FF0C FF0A+  		dc.w -$EE, -$F1, -$F3, -$F4, -$F6, -$F8, -$F9, -$FB, -$FC
FFFFB342 FF03 FF02 FF02 FF01 FF01+  		dc.w -$FD, -$FE, -$FE, -$FF, -$FF, -$FF, -$100,	-$FF, -$FF
FFFFB354 FF01 FF02 FF02 FF03 FF04+  		dc.w -$FF, -$FE, -$FE, -$FD, -$FC, -$FB, -$F9, -$F8, -$F6
FFFFB366 FF0C FF0D FF0F FF12 FF14+  		dc.w -$F4, -$F3, -$F1, -$EE, -$EC, -$EA, -$E7, -$E4, -$E1
FFFFB378 FF22 FF25 FF28 FF2C FF2F+  		dc.w -$DE, -$DB, -$D8, -$D4, -$D1, -$CD, -$C9, -$C5, -$C1
FFFFB38A FF43 FF47 FF4B FF50 FF55+  		dc.w -$BD, -$B9, -$B5, -$B0, -$AB, -$A7, -$A2, -$9D, -$98
FFFFB39C FF6D FF72 FF78 FF7D FF82+  		dc.w -$93, -$8E, -$88, -$83, -$7E, -$78, -$75, -$6D, -$67
FFFFB3AE FF9F FFA4 FFAA FFB0 FFB6+  		dc.w -$61, -$5C, -$56, -$50, -$4A, -$44, -$3E, -$38, -$31
FFFFB3C0 FFD5 FFDB FFE1 FFE7 FFEE+  		dc.w -$2B, -$25, -$1F, -$19, -$12, -$C,	-6, 0, 6, $C, $12
FFFFB3D6 0019 001F 0025 002B 0031+  		dc.w $19, $1F, $25, $2B, $31, $38, $3E,	$44, $4A, $50
FFFFB3EA 0056 005C 0061 0067 006D+  		dc.w $56, $5C, $61, $67, $6D, $73, $78,	$7E, $83, $88
FFFFB3FE 008E 0093 0098 009D 00A2+  		dc.w $8E, $93, $98, $9D, $A2, $A7, $AB,	$B0, $B5, $B9
FFFFB412 00BD 00C1 00C5 00C9 00CD+  		dc.w $BD, $C1, $C5, $C9, $CD, $D1, $D4,	$D8, $DB, $DE
FFFFB426 00E1 00E4 00E7 00EA 00EC+  		dc.w $E1, $E4, $E7, $EA, $EC, $EE, $F1,	$F3, $F4, $F6
FFFFB43A 00F8 00F9 00FB 00FC 00FD+  		dc.w $F8, $F9, $FB, $FC, $FD, $FE, $FE,	$FF, $FF, $FF
FFFFB44E                            		even
FFFFB44E                            	
FFFFB44E                            ; ---------------------------------------------
FFFFB44E                            ; HexToByte_Byte
FFFFB44E                            ; 
FFFFB44E                            ; Uses:
FFFFB44E                            ; d4-d5
FFFFB44E                            ; ---------------------------------------------
FFFFB44E                            
FFFFB44E                            ; HexToDec_Byte:
FFFFB44E                            ; 		move.w	d0,d4
FFFFB44E                            ; 		and.w	#$FF,d4
FFFFB44E                            ; 		clr.w	d0
FFFFB44E                            ; @hexloop:
FFFFB44E                            ; 		sub.w	#1,d4
FFFFB44E                            ; 		bcs.s	@finish
FFFFB44E                            ; 		add.w	#1,d0
FFFFB44E                            ; 		move.w	d0,d5
FFFFB44E                            ;  		and.w	#$F,d5
FFFFB44E                            ; 		cmp.w	#$A,d5
FFFFB44E                            ; 		bcs.s	@lowbyte1
FFFFB44E                            ; 		add.w	#6,d0
FFFFB44E                            ; @lowbyte1:
FFFFB44E                            ; 		move.w	d0,d5
FFFFB44E                            ;  		and.w	#$F0,d5
FFFFB44E                            ; 		cmp.w	#$A0,d5
FFFFB44E                            ; 		bcs.s	@lowbyte2
FFFFB44E                            ; 		add.w	#$60,d0
FFFFB44E                            ; @lowbyte2:
FFFFB44E                            ; 		bra.s	@hexloop
FFFFB44E                            ; @finish:
FFFFB44E                            ; 		rts
FFFFB44E                            
FFFFB44E                            ; ---------------------------
FFFFB44E                            ; Convert HEX to DEC
FFFFB44E                            ; MAX: 65535 ($FFFF)
FFFFB44E                            ; 
FFFFB44E                            ; input:
FFFFB44E                            ; d2
FFFFB44E                            ; 
FFFFB44E                            ; output:
FFFFB44E                            ; d2
FFFFB44E                            ; Uses:
FFFFB44E                            ; d4 WORD (swapped)
FFFFB44E                            ; d5 LONG
FFFFB44E                            ; ---------------------------
FFFFB44E                            
FFFFB44E                            HexToDec:
FFFFB44E 7A00                       		moveq	#0,d5
FFFFB450 4844                       		swap	d4
FFFFB452                            
FFFFB452 4842                       		swap	d2
FFFFB454 3802                       		move.w	d2,d4
FFFFB456 4842                       		swap	d2
FFFFB458 4A44                       		tst.w	d4
FFFFB45A 6700 0000                  		beq	@jumpy
FFFFB45E                            		
FFFFB45E 3802                       		move.w	d2,d4
FFFFB460 E04C                       		lsr.w	#8,d4
FFFFB462 0244 000F                  		and.w	#$F,d4
FFFFB466 D844                       		add.w	d4,d4
FFFFB468 3A3B 4000                  		move.w	@grab256(pc,d4.w),d5
FFFFB46C 3802                       		move.w	d2,d4
FFFFB46E E04C                       		lsr.w	#8,d4
FFFFB470 E44C                       		lsr.w	#2,d4
FFFFB472 0244 003C                  		and.w	#%111100,d4
FFFFB476 DABB 4000                  		add.l	@grab4096(pc,d4.w),d5
FFFFB47A 6100 0000                  		bsr	@fixhexdec
FFFFB47E 4842                       		swap	d2
FFFFB480 3802                       		move.w	d2,d4
FFFFB482 4842                       		swap	d2
FFFFB484 E54C                       		lsl.w	#2,d4
FFFFB486 0244 003C                  		and.w	#%111100,d4
FFFFB48A DABB 4000                  		add.l	@grab65536(pc,d4.w),d5
FFFFB48E 6100 0000                  		bsr	@fixhexdec
FFFFB492 6000 0000                  		bra	@jumpy
FFFFB496                            ; --------------------------------
FFFFB496 0000                       @grab256:	dc.w 0
FFFFB498 0256                       		dc.w $256
FFFFB49A 0512                       		dc.w $512
FFFFB49C 0768                       		dc.w $768
FFFFB49E 1024                       		dc.w $1024
FFFFB4A0 1280                       		dc.w $1280
FFFFB4A2 1536                       		dc.w $1536
FFFFB4A4 1792                       		dc.w $1792
FFFFB4A6 2048                       		dc.w $2048
FFFFB4A8 2304                       		dc.w $2304
FFFFB4AA 2560                       		dc.w $2560
FFFFB4AC 2816                       		dc.w $2816
FFFFB4AE 3072                       		dc.w $3072
FFFFB4B0 3328                       		dc.w $3328
FFFFB4B2 3584                       		dc.w $3584
FFFFB4B4 3840                       		dc.w $3840
FFFFB4B6                            		even
FFFFB4B6 0000 0000                  @grab4096:	dc.l 0
FFFFB4BA 0000 4096                  		dc.l $4096
FFFFB4BE 0000 8192                  		dc.l $8192
FFFFB4C2 0001 2288                  		dc.l $12288
FFFFB4C6 0001 6384                  		dc.l $16384
FFFFB4CA 0002 0480                  		dc.l $20480
FFFFB4CE 0002 4576                  		dc.l $24576
FFFFB4D2 0002 8672                  		dc.l $28672
FFFFB4D6 0003 2768                  		dc.l $32768
FFFFB4DA 0003 6864                  		dc.l $36864
FFFFB4DE 0004 0960                  		dc.l $40960
FFFFB4E2 0004 5056                  		dc.l $45056
FFFFB4E6 0004 9152                  		dc.l $49152
FFFFB4EA 0005 3248                  		dc.l $53248
FFFFB4EE 0005 7344                  		dc.l $57344
FFFFB4F2 0006 1440                  		dc.l $61440
FFFFB4F6                            		even
FFFFB4F6 0000 0000                  @grab65536: 	dc.l 0
FFFFB4FA 0006 5536                  		dc.l $65536
FFFFB4FE 0013 1072                  		dc.l $131072
FFFFB502 0019 6608                  		dc.l $196608
FFFFB506 0026 2144                  		dc.l $262144
FFFFB50A 0032 7680                  		dc.l $327680
FFFFB50E 0039 3216                  		dc.l $393216
FFFFB512 0045 8752                  		dc.l $458752
FFFFB516 0052 4288                  		dc.l $524288
FFFFB51A 0058 9824                  		dc.l $589824
FFFFB51E 0065 5360                  		dc.l $655360
FFFFB522 0072 0896                  		dc.l $720896
FFFFB526 0078 6432                  		dc.l $786432
FFFFB52A 0085 1968                  		dc.l $851968
FFFFB52E 0091 7504                  		dc.l $917504
FFFFB532 0098 3040                  		dc.l $983040
FFFFB536                            		even
FFFFB536                            ; --------------------------------
FFFFB536                            
FFFFB536                            @jumpy:
FFFFB536 0802 0007                  		btst	#7,d2
FFFFB53A 6700                       		beq.s	@not80
FFFFB53C 0685 0000 0128             		add.l	#$128,d5
FFFFB542 6100 0000                  		bsr	@fixhexdec
FFFFB546                            @not80:
FFFFB546 0282 0000 007F             		and.l	#$7F,d2
FFFFB54C 4A82                       		tst.l	d2
FFFFB54E 6700                       		beq.s	@lowrend
FFFFB550 0442 0001                  		sub.w	#1,d2
FFFFB554                            @lelno:
FFFFB554 0685 0000 0001             		add.l	#1,d5
FFFFB55A 6100 0000                  		bsr	@fixhexdec
FFFFB55E 51CA FFF4                  		dbf	d2,@lelno
FFFFB562                            @lowrend:
FFFFB562 2405                       		move.l	d5,d2
FFFFB564 4844                       		swap	d4
FFFFB566 4E75                       		rts
FFFFB568                            
FFFFB568                            ; --------------------------------
FFFFB568                            
FFFFB568                            @fixhexdec:
FFFFB568 3805                       		move.w	d5,d4
FFFFB56A 0244 000F                  		and.w	#$F,d4
FFFFB56E 0C44 000A                  		cmp.w	#$A,d4
FFFFB572 6D00                       		blt.s	@lowr1
FFFFB574 0685 0000 0006             		add.l	#6,d5
FFFFB57A                            @lowr1:
FFFFB57A 3805                       		move.w	d5,d4
FFFFB57C 0244 00F0                  		and.w	#$F0,d4
FFFFB580 0C44 00A0                  		cmp.w	#$A0,d4
FFFFB584 6D00                       		blt.s	@lowr2
FFFFB586 0685 0000 0060             		add.l	#$60,d5
FFFFB58C                            @lowr2:
FFFFB58C 3805                       		move.w	d5,d4
FFFFB58E 0244 0F00                  		and.w	#$F00,d4
FFFFB592 0C44 0A00                  		cmp.w	#$A00,d4
FFFFB596 6D00                       		blt.s	@lowr3
FFFFB598 0685 0000 0600             		add.l	#$600,d5
FFFFB59E                            @lowr3:
FFFFB59E 3805                       		move.w	d5,d4
FFFFB5A0 0244 F000                  		and.w	#$F000,d4
FFFFB5A4 0C44 A000                  		cmp.w	#$A000,d4
FFFFB5A8 6500                       		bcs.s	@lowr4
FFFFB5AA 0685 0000 6000             		add.l	#$6000,d5
FFFFB5B0                            @lowr4:
FFFFB5B0 4845                       		swap	d5
FFFFB5B2 3805                       		move.w	d5,d4
FFFFB5B4 0244 000F                  		and.w	#$F,d4
FFFFB5B8 0C44 000A                  		cmp.w	#$A,d4
FFFFB5BC 6500                       		bcs.s	@lowr5
FFFFB5BE 0685 0000 0006             		add.l	#$6,d5
FFFFB5C4                            @lowr5:
FFFFB5C4 3805                       		move.w	d5,d4
FFFFB5C6 0244 00F0                  		and.w	#$F0,d4
FFFFB5CA 0C44 00A0                  		cmp.w	#$A0,d4
FFFFB5CE 6500                       		bcs.s	@lowr6
FFFFB5D0 0685 0000 0060             		add.l	#$60,d5
FFFFB5D6                            @lowr6:
FFFFB5D6 3805                       		move.w	d5,d4
FFFFB5D8 0244 0F00                  		and.w	#$F00,d4
FFFFB5DC 0C44 0A00                  		cmp.w	#$A00,d4
FFFFB5E0 6500                       		bcs.s	@lowr7
FFFFB5E2 0685 0000 0600             		add.l	#$600,d5
FFFFB5E8                            @lowr7:
FFFFB5E8 4845                       		swap	d5
FFFFB5EA 4E75                       		rts
FFFFB5EA 4E75                       		rts
FFFFB5EC                            		include	"system/input/code.asm"
FFFFB5EC                            ; ====================================================================
FFFFB5EC                            ; Input
FFFFB5EC                            ; ====================================================================
FFFFB5EC                            
FFFFB5EC                            		include	"system/input/map.asm"
FFFFB5EC                            ; ====================================================================
FFFFB5EC                            ; Input
FFFFB5EC                            ; ====================================================================
FFFFB5EC                            
FFFFB5EC                            ; ====================================================================
FFFFB5EC                            ; -------------------------------------------------
FFFFB5EC                            ; Variables
FFFFB5EC                            ; -------------------------------------------------
FFFFB5EC                            
FFFFB5EC =00000001                  JoyUp		equ	%00000001
FFFFB5EC =00000002                  JoyDown		equ	%00000010
FFFFB5EC =00000004                  JoyLeft		equ	%00000100
FFFFB5EC =00000008                  JoyRight	equ	%00001000
FFFFB5EC =00000010                  JoyB		equ	%00010000
FFFFB5EC =00000020                  JoyC		equ	%00100000
FFFFB5EC =00000040                  JoyA		equ	%01000000
FFFFB5EC =00000080                  JoyStart	equ	%10000000
FFFFB5EC =00000000                  bitJoyUp	equ	0
FFFFB5EC =00000001                  bitJoyDown	equ	1
FFFFB5EC =00000002                  bitJoyLeft	equ	2
FFFFB5EC =00000003                  bitJoyRight	equ	3
FFFFB5EC =00000004                  bitJoyB		equ	4
FFFFB5EC =00000005                  bitJoyC		equ	5
FFFFB5EC =00000006                  bitJoyA		equ	6
FFFFB5EC =00000007                  bitJoyStart	equ	7
FFFFB5EC                            
FFFFB5EC =00000001                  JoyZ		equ	%00000001
FFFFB5EC =00000002                  JoyY		equ	%00000010
FFFFB5EC =00000004                  JoyX		equ	%00000100
FFFFB5EC =00000008                  JoyMode		equ	%00001000
FFFFB5EC =00000000                  bitJoyZ		equ	0
FFFFB5EC =00000001                  bitJoyY		equ	1
FFFFB5EC =00000002                  bitJoyX		equ	2
FFFFB5EC =00000003                  bitJoyMode	equ	3
FFFFB5EC                            
FFFFB5EC                            ; --------------------------------------------
FFFFB5EC                            
FFFFB5EC                            		rsreset
FFFFB5EC =00000000                  CtrlID		rs.b	1
FFFFB5EC =00000001                  PadType		rs.b	1		;only TRUE $01 or FALSE $00
FFFFB5EC =00000002                  ExOnHold	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
FFFFB5EC =00000003                  OnHold		rs.b	1		;SACBRLDU
FFFFB5EC =00000004                  ExOnPress	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
FFFFB5EC =00000005                  OnPress		rs.b	1		;SACBRLDU
FFFFB5EC =00000006                  MouseX		rs.w	1		;TODO
FFFFB5EC =00000008                  MouseY		rs.w	1
FFFFB5EC =0000000A                  sizeof_control	rs.l	0
FFFFB5EC                            
FFFFB5EC                            ; ====================================================================
FFFFB5EC                            ; -------------------------------------------------
FFFFB5EC                            ; RAM
FFFFB5EC                            ; -------------------------------------------------
FFFFB5EC                            
FFFFB5EC                                            rsset	RAM_Input
FFFFB5EC =FFFFDE80                  RAM_Control_1	rs.b sizeof_control
FFFFB5EC =FFFFDE8A                  RAM_Control_2	rs.b sizeof_control
FFFFB5EC                            
FFFFB5EC                            ; --------------------------------------------
FFFFB5EC                            
FFFFB5EC =FFFFDE94                  sizeof_input	rs.l	0
FFFFB5EC                            ; 		inform 0,"input ram: %h",(sizeof_input-RAM_Input)
FFFFB5EC                             				
FFFFB5EC                            ; ====================================================================
FFFFB5EC                            ; -------------------------------------------------
FFFFB5EC                            ; Macros
FFFFB5EC                            ; -------------------------------------------------
FFFFB5EC                            
FFFFB5EC                            ; --------------------------------------------
FFFFB5EC                            ; --------------------------------------------
FFFFB5EC                            
FFFFB5EC                            ; ====================================================================
FFFFB5EC                            ; -------------------------------------------------
FFFFB5EC                            ; Read input
FFFFB5EC                            ; -------------------------------------------------
FFFFB5EC                            
FFFFB5EC                            Input_Read:
FFFFB5EC 4BF9 FFFF DE80             		lea	(RAM_Control_1),a5
FFFFB5F2 7000                       		moveq	#0,d0
FFFFB5F4 6100                       		bsr.s	@DoIt
FFFFB5F6 4BF9 FFFF DE8A             		lea	(RAM_Control_2),a5
FFFFB5FC 7001                       		moveq	#1,d0
FFFFB5FE 6100                       		bsr.s	@DoIt
FFFFB600 4E75                       		rts
FFFFB602                            
FFFFB602                            ; ---------------------------------------
FFFFB602                            
FFFFB602                            @DoIt:
FFFFB602 4DF9 00A1 0003             		lea	($A10003).l,a6
FFFFB608 E348                       		lsl.w	#1,d0
FFFFB60A DCC0                       		add.w	d0,a6			;Add result to port
FFFFB60C 6100 0000                  		bsr	@FindJoypad
FFFFB610 1A80                       		move.b	d0,(a5)
FFFFB612                            
FFFFB612 0C00 000F                                  cmp.b	#$F,d0
FFFFB616 6700                                       beq.s	@End
FFFFB618 0C00 000D                  		cmp.b	#$D,d0
FFFFB61C 6700                                       beq.s	@Controller
FFFFB61E 0C00 0007                    		cmp.b	#7,d0			;Multitap
FFFFB622 6700                                       beq.s	@End
FFFFB624 0C00 0003                  		cmp.b	#3,d0
FFFFB628 6700 0000                                  beq	@Mouse
FFFFB62C                            
FFFFB62C                            @End:
FFFFB62C 4E75                       		rts
FFFFB62E                            
FFFFB62E                            ; ------------------------------------
FFFFB62E                            ; Controller
FFFFB62E                            ; ------------------------------------
FFFFB62E                            
FFFFB62E                            @Controller:
FFFFB62E 1D7C 0040 0006             		move.b	#$40,6(a6)
FFFFB634 4E71                       		nop
FFFFB636 4E71                       		nop
FFFFB638 1CBC 0040                  		move.b	#$40,(a6)		; Show CB|RLDU
FFFFB63C 4E71                       		nop
FFFFB63E 4E71                       		nop
FFFFB640 1CBC 0000                  		move.b	#$00,(a6)		; Show SA|RLDU
FFFFB644 4E71                       		nop
FFFFB646 4E71                       		nop
FFFFB648 1CBC 0040                  		move.b	#$40,(a6)		; Show CB|RLDU
FFFFB64C 4E71                       		nop
FFFFB64E 4E71                       		nop
FFFFB650 1CBC 0000                  		move.b	#$00,(a6)		; Show SA|RLDU
FFFFB654 4E71                       		nop
FFFFB656 4E71                       		nop
FFFFB658 1CBC 0040                  		move.b	#$40,(a6)		; "Okay OKAY!, I have more buttons"
FFFFB65C 4E71                       		nop
FFFFB65E 4E71                       		nop
FFFFB660 1016                       		move.b	(a6),d0
FFFFB662 1CBC 0000                   		move.b	#$00,(a6)		; "Heres my ID"
FFFFB666 4E71                         		nop
FFFFB668 4E71                         		nop
FFFFB66A 1216                        		move.b	(a6),d1
FFFFB66C 1CBC 0040                   		move.b	#$40,(a6)
FFFFB670 4E71                        		nop
FFFFB672 4E71                        		nop
FFFFB674                            		
FFFFB674 142D 0001                  		move.b	PadType(a5),d2
FFFFB678 0882 0000                  		bclr	#0,d2
FFFFB67C 0241 000F                  		and.w	#$F,d1
FFFFB680 0C41 000F                  		cmp.w	#$F,d1
FFFFB684 6600                       		bne.s	@Original
FFFFB686                            		
FFFFB686 08C2 0000                  		bset	#0,d2
FFFFB68A 7200                        		moveq	#0,d1
FFFFB68C 122D 0002                   		move.b	ExOnHold(a5),d1
FFFFB690 4601                       		not.b	d1
FFFFB692 B101                        		eor.b	d0,d1
FFFFB694 C200                        		and.b	d0,d1
FFFFB696 0241 000F                   		and.w	#$F,d1
FFFFB69A 1B41 0004                   		move.b	d1,ExOnPress(a5)
FFFFB69E 4600                        		not.b	d0
FFFFB6A0 0240 000F                   		and.w	#$F,d0
FFFFB6A4 1B40 0002                   		move.b	d0,ExOnHold(a5)
FFFFB6A8                             		
FFFFB6A8                            @Original:	
FFFFB6A8 1B42 0001                  		move.b	d2,PadType(a5)
FFFFB6AC                            	
FFFFB6AC 1CBC 0000                  		move.b	#0,(a6)
FFFFB6B0 4E71                       		nop
FFFFB6B2 4E71                       		nop
FFFFB6B4 1016                       		move.b	(a6),d0
FFFFB6B6 E508                       		lsl.b	#2,d0
FFFFB6B8 0200 00C0                  		and.b	#$C0,d0	
FFFFB6BC 1CBC 0040                  		move.b	#$40,(a6)
FFFFB6C0 4E71                       		nop
FFFFB6C2 4E71                       		nop
FFFFB6C4 1216                       		move.b	(a6),d1
FFFFB6C6                            ; 		move.w	#0,($A11100)
FFFFB6C6 0201 003F                  		and.b	#$3F,d1
FFFFB6CA 8001                       		or.b	d1,d0
FFFFB6CC 4600                       		not.b	d0
FFFFB6CE 122D 0003                  		move.b	OnHold(a5),d1
FFFFB6D2 B101                       		eor.b	d0,d1
FFFFB6D4 1B40 0003                  		move.b	d0,OnHold(a5)
FFFFB6D8 C200                       		and.b	d0,d1
FFFFB6DA 1B41 0005                  		move.b	d1,OnPress(a5)
FFFFB6DE 4E75                       		rts
FFFFB6E0                            
FFFFB6E0                            ; ; ------------------------------------
FFFFB6E0                            ; ; Multitap
FFFFB6E0                            ; ; ------------------------------------
FFFFB6E0                            ; 
FFFFB6E0                            ; @Multitap:
FFFFB6E0                            ; 		bra	@End
FFFFB6E0                            
FFFFB6E0                            ; ------------------------------------
FFFFB6E0                            ; Sega Mega Mouse
FFFFB6E0                            ;
FFFFB6E0                            ; in: d1 - port number
FFFFB6E0                            ; out: d0 - status
FFFFB6E0                            ;      d2
FFFFB6E0                            ; ------------------------------------
FFFFB6E0                            
FFFFB6E0                            @Mouse:
FFFFB6E0 7200                       		moveq	#0,d1
FFFFB6E2 6100 0000                  		bsr	@ReadIt
FFFFB6E6                            		
FFFFB6E6 2002                       		move.l	d2,d0
FFFFB6E8 4840                       		swap	d0
FFFFB6EA 0240 00FF                  		and.w	#$FF,d0
FFFFB6EE 122D 0003                  		move.b	OnHold(a5),d1
FFFFB6F2 B101                       		eor.b	d0,d1
FFFFB6F4 1B40 0003                  		move.b	d0,OnHold(a5)
FFFFB6F8 C200                        		and.b	d0,d1
FFFFB6FA 1B41 0005                  		move.b	d1,OnPress(a5)
FFFFB6FE                            		
FFFFB6FE                            		;TODO
FFFFB6FE 3002                       		move.w	d2,d0
FFFFB700 0240 00FF                  		and.w	#$FF,d0
FFFFB704 4880                       		ext.w	d0
FFFFB706 4440                       		neg.w	d0
FFFFB708 3B40 0008                   		move.w	d0,MouseY(a5)
FFFFB70C                             		
FFFFB70C E04A                        		lsr.w	#8,d2
FFFFB70E 0242 00FF                   		and.w	#$FF,d2
FFFFB712 4882                       		ext.w	d2
FFFFB714 3B42 0006                   		move.w	d2,MouseX(a5)
FFFFB718 6000 FF12                   		bra	@End
FFFFB71C                            
FFFFB71C                            ; ------------------------------------
FFFFB71C                            
FFFFB71C                            @ReadIt:
FFFFB71C                            ; 		movem.l	d1/d3/d4/d7/a6,-(sp)
FFFFB71C                            
FFFFB71C 7000                       		moveq	#0,d0			;Error flag
FFFFB71E 0C41 0002                  		cmp.w	#2,d1			;Control ID < 2?
FFFFB722 6200 0000                  		bhi	@Error
FFFFB726 D241                       		add.w	d1,d1
FFFFB728                            	;	lea	($A10003),a6
FFFFB728                            @Connect:
FFFFB728 1D7C 0060 0006             		move.b	#$60,6(a6)
FFFFB72E 4E71                                       nop
FFFFB730 4E71                                       nop
FFFFB732 1CBC 0060                                  move.b	#$60,(a6)		;TH,TR=11 (END DATA)
FFFFB736 7400                                       moveq	#0,d2
FFFFB738 7600                                       moveq	#0,d3
FFFFB73A                            @NotReady:
FFFFB73A 0816 0004                   		btst	#4,(a6)
FFFFB73E 67FA                        		beq.s	@NotReady
FFFFB740 1816                        		move.b	(a6),d4			;d4.b = ? 1 1 1 | 0 0 0
FFFFB742 0204 000F                   		and.b	#$F,d4
FFFFB746 4A04                        		tst.b	d4
FFFFB748 6600 0000                   		bne	@Error			;No mouse
FFFFB74C 1CBC 0020                   		move.b	#$20,(a6)		;Select t1 m1 1 1
FFFFB750 3E3C 00FE                   		move.w	#$FE,d7
FFFFB754                            @lp1:
FFFFB754 0816 0004                  		btst.b	#4,(a6)
FFFFB758 6600                       		bne.s	@Mouse_10
FFFFB75A 51CF FFF8                  		dbra	d7,@lp1
FFFFB75E 6000 0000                  		bra	@Error
FFFFB762                            		
FFFFB762                            @Mouse_10:
FFFFB762 1016                       		move.b	(a6),d0			;d0 = xxxx|xxxx|xxxx|t1 m1 1 1
FFFFB764 E148                       		lsl.w	#8,d0			;d0 = xxxx|t1 m1 1 1|0000|0000
FFFFB766 1CBC 0000                  		move.b	#0,(a6)
FFFFB76A 4E71                       		nop
FFFFB76C                            @lp2:
FFFFB76C 0816 0004                  		btst	#4,(a6)
FFFFB770 6700                       		beq.s	@Mouse_20
FFFFB772 51CF FFF8                  		dbra	d7,@lp2
FFFFB776 6000 0000                  		bra	@Error
FFFFB77A                            		
FFFFB77A                            @Mouse_20:
FFFFB77A 1616                       		move.b	(a6),d3
FFFFB77C 1CBC 0020                  		move.b	#$20,(a6)
FFFFB780 E14B                       		lsl.w	#8,d3
FFFFB782                            @lp3:
FFFFB782 0816 0004                  		btst	#4,(a6)
FFFFB786 6600                       		bne.s	@Mouse_30
FFFFB788 51CF FFF8                  		dbra	d7,@lp3
FFFFB78C 6000 0000                  		bra	@Error
FFFFB790                            		
FFFFB790                            @Mouse_30:
FFFFB790 1616                       		move.b	(a6),d3
FFFFB792 E90B                       		lsl.b	#4,d3
FFFFB794 E84B                       		lsr.w	#4,d3
FFFFB796 1CBC 0000                  		move.b	#0,(a6)
FFFFB79A 8043                       		or.w	d3,d0
FFFFB79C 7600                       		moveq	#0,d3
FFFFB79E                            @lp4:
FFFFB79E 0816 0004                  		btst	#4,(a6)
FFFFB7A2 6700                                       beq.s	@Mouse_40
FFFFB7A4 51CF FFF8                                  dbra	d7,@lp4
FFFFB7A8 6000 0000                                  bra	@Error
FFFFB7AC                            
FFFFB7AC                            @Mouse_40:
FFFFB7AC 1416                       		move.b	(a6),d2
FFFFB7AE 1CBC 0020                  		move.b	#$20,(a6)
FFFFB7B2 E14A                       		lsl.w	#8,d2
FFFFB7B4                            @lp5:
FFFFB7B4 0816 0004                  		btst	#4,(a6)
FFFFB7B8 6600                       		bne.s	@Mouse_50
FFFFB7BA 51CF FFF8                  		dbra	d7,@lp5
FFFFB7BE 6000 0000                  		bra	@Error
FFFFB7C2                            		
FFFFB7C2                            @Mouse_50:
FFFFB7C2 1416                       		move.b	(a6),d2
FFFFB7C4 1CBC 0000                  		move.b	#0,(a6)
FFFFB7C8 E90A                       		lsl.b	#4,d2
FFFFB7CA E94A                       		lsl.w	#4,d2
FFFFB7CC                            @lp6:
FFFFB7CC 0816 0004                  		btst	#4,(a6)
FFFFB7D0 6700                       		beq.s	@Mouse_60
FFFFB7D2 51CF FFF8                  		dbra	d7,@lp6
FFFFB7D6 6000 0000                  		bra	@Error
FFFFB7DA                            
FFFFB7DA                            @Mouse_60:
FFFFB7DA 1416                       		move.b	(a6),d2
FFFFB7DC 1CBC 0020                  		move.b	#$20,(a6)
FFFFB7E0 E90A                       		lsl.b	#4,d2
FFFFB7E2 E98A                       		lsl.l	#4,d2
FFFFB7E4                            @lp7:
FFFFB7E4 0816 0004                  		btst	#4,(a6)
FFFFB7E8 6600                       		bne.s	@Mouse_70
FFFFB7EA 51CF FFF8                  		dbra	d7,@lp7
FFFFB7EE 6000                       		bra.s	@Error
FFFFB7F0                            
FFFFB7F0                            @Mouse_70:
FFFFB7F0 1416                       		move.b	(a6),d2
FFFFB7F2 1CBC 0000                  		move.b	#0,(a6)
FFFFB7F6 E90A                       		lsl.b	#4,d2
FFFFB7F8 E98A                       		lsl.l	#4,d2
FFFFB7FA                            @lp8:
FFFFB7FA 0816 0004                  		btst	#4,(a6)
FFFFB7FE 6700                       		beq.s	@Mouse_80
FFFFB800 51CF 0000                  		dbra	d7,@Mouse_80
FFFFB804 6000                       		bra.s	@Error
FFFFB806                            
FFFFB806                            @Mouse_80:
FFFFB806 1416                       		move.b	(a6),d2
FFFFB808 1CBC 0020                  		move.b	#$20,(a6)
FFFFB80C E90A                       		lsl.b	#4,d2
FFFFB80E E98A                       		lsl.l	#4,d2
FFFFB810                            @lp9:
FFFFB810 0816 0004                  		btst	#4,(a6)
FFFFB814 6700                       		beq.s	@Mouse_90
FFFFB816 51CF FFF8                  		dbra	d7,@lp9
FFFFB81A 6000                       		bra.s	@Error
FFFFB81C                            
FFFFB81C                            @Mouse_90:
FFFFB81C 1416                       		move.b	(a6),d2
FFFFB81E 1CBC 0060                  		move.b	#$60,(a6)
FFFFB822 E90A                       		lsl.b	#4,d2
FFFFB824 E88A                       		lsr.l	#4,d2
FFFFB826                            @lp10:
FFFFB826 0816 0004                  		btst	#4,(a6)
FFFFB82A 67FA                       		beq.s	@lp10
FFFFB82C 0082 0000 0000             		or.l	#0,d2
FFFFB832                            @Exit:
FFFFB832 33FC 0000 00A1 1100        		move.w	#0,($A11100)
FFFFB83A                            ; 		movem.l	(sp)+,d1/d3/d4/d7/a6
FFFFB83A 4E75                       		rts
FFFFB83C                            
FFFFB83C                            @Error:
FFFFB83C 1CBC 0060                  		move.b	#$60,(a6)
FFFFB840 4E71                       		nop
FFFFB842 4E71                       		nop
FFFFB844                            @erlp:
FFFFB844 1CBC 0004                  		move.b	#4,(a6)
FFFFB848 67FA                       		beq.s	@erlp
FFFFB84A 0082 8000 0000             		or.l	#$80000000,d2
FFFFB850 7000                       		moveq	#0,d0
FFFFB852 33FC 0000 00A1 1100        		move.w	#0,($A11100)
FFFFB85A                            ; 		movem.l	(sp)+,d1/d3/d4/d7/a6
FFFFB85A 4E75                       		rts
FFFFB85C                            
FFFFB85C                            ; ------------------------------------
FFFFB85C                            ; d0.w
FFFFB85C                            ; $0F - Nothing
FFFFB85C                            ; $0D - Controller
FFFFB85C                            ; $07 - Multitap
FFFFB85C                            ; $03 - Mouse
FFFFB85C                            ;
FFFFB85C                            ; d1.l
FFFFB85C                            ; $00xx00yy - Key presses
FFFFB85C                            ; ------------------------------------
FFFFB85C                            
FFFFB85C                            @FindJoypad:
FFFFB85C 7000                       		moveq	#0,d0
FFFFB85E 1CBC 0070                  		move.b	#$70,(a6)
FFFFB862 6100                       		bsr.s	@GetPress
FFFFB864 4841                       		swap	d1
FFFFB866 1CBC 0030                  		move.b	#$30,(a6)
FFFFB86A D040                       		add.w	d0,d0
FFFFB86C                            
FFFFB86C                            @GetPress:
FFFFB86C 1216                       		move.b	(a6),d1
FFFFB86E 1401                       		move.b	d1,d2
FFFFB870 0202 000C                  		and.b	#$C,d2
FFFFB874 6700                       		beq.s	@Nope1
FFFFB876 5240                       		addq.w	#1,d0
FFFFB878                            
FFFFB878                            @Nope1:
FFFFB878 D040                       		add.w	d0,d0
FFFFB87A 1601                       		move.b	d1,d3
FFFFB87C 0243 0003                  		and.w	#3,d3
FFFFB880 6700                       		beq.s	@Nope2
FFFFB882 5240                       		addq.w	#1,d0
FFFFB884                            
FFFFB884                            @Nope2:
FFFFB884 4E75                       		rts
FFFFB886                            		
FFFFB886                            ; ====================================================================
FFFFB886                            ; -------------------------------------------------
FFFFB886                            ; Subs
FFFFB886                            ; -------------------------------------------------
FFFFB886                            
FFFFB886                            Input_init:
FFFFB886                            ; 		move.w	#$100,($A11100).l
FFFFB886                            ; @WaitZ80:
FFFFB886                            ; 		btst	#0,($A11100).l
FFFFB886                            ; 		bne.s	@WaitZ80
FFFFB886                             
FFFFB886 7240                       		moveq	#$40,d1
FFFFB888 13C1 00A1 0009             		move.b	d1,($A10009).l
FFFFB88E 13C1 00A1 000B             		move.b	d1,($A1000B).l
FFFFB894 13C1 00A1 000D             		move.b	d1,($A1000D).l
FFFFB89A                            
FFFFB89A                            ; 		move.w	#0,($A11100).l
FFFFB89A 4E75                       		rts
FFFFB89C                            		
FFFFB89C                            		
FFFFB89C                            		include	"system/hardware/mcd/m68k/comm/main.asm"
FFFFB89C                            ; =====================================================================
FFFFB89C                            ; -------------------------------------------
FFFFB89C                            ; Variables
FFFFB89C                            ; -------------------------------------------
FFFFB89C                            
FFFFB89C =00000004                  CD_Load_Hadagi		equ	4
FFFFB89C =00000008                  CD_WordRamToMain	equ	8
FFFFB89C =00000005                  CD_LoadHadagi_PrgRam	equ	5
FFFFB89C                            
FFFFB89C                            ; -------------------------------------------
FFFFB89C                            ; SubCommand
FFFFB89C                            ; -------------------------------------------
FFFFB89C                            
FFFFB89C                            SubCpu_Task_Wait:
FFFFB89C 4A39 00A1 200F             		tst.b	(ThisCpu+CommSub)	; is sub cpu free?
FFFFB8A2 66F8                       		bne.s	SubCpu_Task_Wait	; if not, wait for it to finish corrent operation
FFFFB8A4                            
FFFFB8A4 13FC 0000 00A1 200E        		move.b	#0,(ThisCpu+CommMain)	; Clear Command
FFFFB8AC                            @wait1:
FFFFB8AC 4A39 00A1 200F             		tst.b	(ThisCpu+CommSub)	; sub cpu ready?
FFFFB8B2 67F8                       		beq.s	@wait1			; if not, branch
FFFFB8B4                            	
FFFFB8B4 13C0 00A1 200E             		move.b	d0,(ThisCpu+CommMain)	; Send the command
FFFFB8BA                            @wait2:
FFFFB8BA 4A39 00A1 200F             		tst.b	(ThisCpu+CommSub)	; Is sub CPU done?
FFFFB8C0 66F8                       		bne.s	@wait2			; if not, branch
FFFFB8C2 4E75                       		rts
FFFFB8C4                            
FFFFB8C4                            ; -------------------------------------------
FFFFB8C4                            ; ASyncSubCommand
FFFFB8C4                            ; -------------------------------------------
FFFFB8C4                            
FFFFB8C4                            SubCpu_Task:
FFFFB8C4 4A39 00A1 200F             		tst.b	(ThisCpu+CommSub)	; is sub cpu free?
FFFFB8CA 66F8                       		bne.s	SubCpu_Task		; if not, wait for it to finish corrent operation
FFFFB8CC                            
FFFFB8CC 13FC 0000 00A1 200E        		move.b	#0,(ThisCpu+CommMain)	; Clear Command
FFFFB8D4                            @wait:
FFFFB8D4 4A39 00A1 200F             		tst.b	(ThisCpu+CommSub)	; sub cpu ready?
FFFFB8DA 67F8                       		beq.s	@wait			; if not, branch
FFFFB8DC                            	
FFFFB8DC 13C0 00A1 200E             		move.b	d0,(ThisCpu+CommMain)	; Send the command
FFFFB8E2 4E75                       		rts
FFFFB8E4                            		
FFFFB8E4                            ; -------------------------------------------
FFFFB8E4                            ; SubCpu_Wait
FFFFB8E4                            ; -------------------------------------------
FFFFB8E4                            
FFFFB8E4                            SubCpu_Wait:
FFFFB8E4 4A39 00A1 200F             		tst.b	(ThisCpu+CommSub)	; is sub cpu free?
FFFFB8EA 66F8                       		bne.s	SubCpu_Wait		; if not, wait for it to finish corrent operation
FFFFB8EC 13FC 0000 00A1 200E        		move.b	#0,(ThisCpu+CommMain)	; Clear Command
FFFFB8F4                            @wait1:
FFFFB8F4 4A39 00A1 200F             		tst.b	(ThisCpu+CommSub)	; sub cpu ready?
FFFFB8FA 67F8                       		beq.s	@wait1			; if not, branch
FFFFB8FC 4E75                       		rts
FFFFB8FE                            	
FFFFB8FE                            ; -------------------------------------------
FFFFB8FE                            ; SubCpu_Wait
FFFFB8FE                            ; -------------------------------------------
FFFFB8FE                            
FFFFB8FE                            SubCpu_Wait_Flag:
FFFFB8FE 70FF                       		moveq	#-1,d0
FFFFB900 4A39 00A1 200F             		tst.b	(ThisCpu+CommSub)	; is sub cpu free?
FFFFB906 6600                       		bne.s	@flagset		; if not, wait for it to finish corrent operation
FFFFB908 13FC 0000 00A1 200E        		move.b	#0,(ThisCpu+CommMain)	; Clear Command
FFFFB910 4A39 00A1 200F             		tst.b	(ThisCpu+CommSub)	; sub cpu ready?
FFFFB916 6700                       		beq.s	@flagset		; if not, branch
FFFFB918 7000                       		moveq	#0,d0
FFFFB91A                            @flagset:
FFFFB91A 4E75                       		rts
FFFFB91C                            		
FFFFB91C                            ; -------------------------------------------
FFFFB91C                            ; Load Program to WordRAM
FFFFB91C                            ; -------------------------------------------
FFFFB91C                            
FFFFB91C                            Load_PrgWord:
FFFFB91C 23C0 00A1 2010             		move.l	d0,(ThisCpu+CommDataM)
FFFFB922 23C1 00A1 2014             		move.l	d1,(ThisCpu+CommDataM+4)
FFFFB928 23C2 00A1 2018             		move.l	d2,(ThisCpu+CommDataM+8)
FFFFB92E 08F9 0001 00A1 2003         		bset	#1,(ThisCpu+MemoryMode+1)		; WordRAM -> SubCPU
FFFFB936 7004                       		moveq	#CD_Load_Hadagi,d0
FFFFB938 6100 FF62                  		bsr	SubCpu_Task_Wait
FFFFB93C 7008                        		moveq	#CD_WordRamToMain,d0			; WordRAM -> MainCPU
FFFFB93E 6000 FF5C                   		bra	SubCpu_Task_Wait
FFFFB942                            
FFFFB942                            ; -------------------------------------------
FFFFB942                            ; Load Program to RAM
FFFFB942                            ; -------------------------------------------
FFFFB942                            
FFFFB942                            ; Load_PrgRam:
FFFFB942                            ;  		bset	#1,(ThisCpu+MemoryMode+1)		; WordRAM -> SubCPU
FFFFB942                            ;  		
FFFFB942                            ; 		move.l	d0,(ThisCpu+CommDataM)
FFFFB942                            ; 		move.l	d1,(ThisCpu+CommDataM+4)
FFFFB942                            ; 		move.l	d2,(ThisCpu+CommDataM+8)
FFFFB942                            ; 		move.b	#0,(ThisCpu+CommDataM+$C)
FFFFB942                            ; 		move.b	#0,(ThisCpu+CommDataM+$D)		; Step 1
FFFFB942                            ; 		moveq	#CD_LoadHadagi_PrgRam,d0
FFFFB942                            ; 		bsr	SubCpu_Task_Wait
FFFFB942                            ; 		
FFFFB942                            ; 		move.b	#1,(ThisCpu+CommDataM+$D)		; Step 2
FFFFB942                            ; 		moveq	#CD_LoadHadagi_PrgRam,d0
FFFFB942                            ; 		bsr	SubCpu_Task_Wait
FFFFB942                            ; 		
FFFFB942                            ;  		moveq	#CD_WordRamToMain,d0			; WordRAM -> MainCPU
FFFFB942                            ;  		bsr	SubCpu_Task_Wait
FFFFB942                            ;   		lea	($200000),a5
FFFFB942                            ;   		lea	($FF0000),a6
FFFFB942                            ;   		move.w	#(sizeof_prg)-1,d6
FFFFB942                            ; @Step_1:
FFFFB942                            ;  		move.b	(a5)+,(a6)+
FFFFB942                            ;  		dbf	d6,@Step_1
FFFFB942                            ;   		
FFFFB942                            ;     		bset	#1,(ThisCpu+MemoryMode+1)		; WordRAM -> SubCPU
FFFFB942                            ;    		move.b	#2,(ThisCpu+CommDataM+$D)		; Step 3
FFFFB942                            ;    		moveq	#CD_LoadHadagi_PrgRam,d0
FFFFB942                            ;    		bsr	SubCpu_Task_Wait		
FFFFB942                            ;     		moveq	#CD_WordRamToMain,d0			; WordRAM -> MainCPU
FFFFB942                            ;     		bra	SubCpu_Task_Wait
FFFFB942                                		
FFFFB942                                		
FFFFB942                            		include	"system/ints.asm"
FFFFB942                            ; ====================================================================
FFFFB942                            ; -------------------------------------------------
FFFFB942                            ; VBlank
FFFFB942                            ; -------------------------------------------------
FFFFB942                            
FFFFB942                            MD_Vint:
FFFFB942 0839 0007 FFFF DE4E         		btst	#7,(RAM_IntFlags)
FFFFB94A 6600 0000                   		bne	@nope
FFFFB94E 08F9 0007 FFFF DE4E         		bset	#7,(RAM_IntFlags)
FFFFB956 48F9 7FFF FFFF DE0C        		movem.l	a0-a6/d0-d7,(RAM_VIntRegs)
FFFFB95E                            		
FFFFB95E 3039 00C0 0004             		move.w	(vdp_ctrl),d0
FFFFB964 0800 0000                  		btst	#0,d0
FFFFB968 6700                       		beq.s	@JapAme
FFFFB96A 303C 06BC                  		move.w	#$6BC,d0
FFFFB96E 51C8 FFFE                  		dbf	d0,*
FFFFB972                            @JapAme:
FFFFB972                            
FFFFB972 6100 FC78                   		bsr	Input_Read
FFFFB976 6100 D1D8                  		bsr	PalFade_Upd
FFFFB97A 6100 D45E                  		bsr	DMA_Read
FFFFB97E                            		
FFFFBAA6                            		
FFFFBAA6 6100 D504                   		bsr	Audio_run			; NO MOVERLO
FFFFBAAA 4CF9 7FFF FFFF DE0C        		movem.l	(RAM_VIntRegs),a0-a6/d0-d7
FFFFBAB2 08F9 0001 FFFF DE4E         		bset	#1,(RAM_IntFlags)		; VBlank done flag
FFFFBABA 08B9 0007 FFFF DE4E         		bclr	#7,(RAM_IntFlags)
FFFFBAC2                             
FFFFBAC2                            @nope:
FFFFBAC2 08B9 0000 FFFF DE4E         		bclr	#0,(RAM_IntFlags)		; Frame done flag
FFFFBACA 4E73                       		rte
FFFFBACC                             		
FFFFBACC                            ; ====================================================================
FFFFBACC                            ; -------------------------------------------------
FFFFBACC                            ; HBlank
FFFFBACC                            ; -------------------------------------------------
FFFFBACC                            
FFFFBACC                            MD_HInt:
FFFFBACC 4E73                       		rte
FFFFBACC 4E73                       		rte
FFFFBACC 4E73                       		rte
FFFFBACE                             		inform 0,"RAM-LOOP ENDS AT: %h",*
FFFFBACE                            		objend
00003B42                            MD_RAM_LOOP_e:
00003B42                            
00003B42                            ; =====================================================================
00003B42                            ; =====================================================================
00003B42                            		align $800
00004000                            IP_End:
00004000                            		even
00004000                            		
00004000                            ; ========================================================
00004000                            ; -------------------------------------------------
00004000                            ; SP
00004000                            ; -------------------------------------------------
00004000                            
00004000                            		align $800
00004000                            SP_Start:
00004000                            		include "system/hardware/mcd/s68k/code.asm"
00004000                            ; =====================================================================
00004000                            ; Sub CPU
00004000                            ; =====================================================================
00004000                            
00004000 =00FF8000                  ThisCpu		=	$FF8000
00004000 =00FE0000                  BackupRam	equ 	$FE0000
00004000 =00000020                  numof_stamps	equ 	32
00004000                            
00004000                            ; -------------------------------------------
00004000                            ; Variables
00004000                            ; -------------------------------------------
00004000                            
00004000                            		rsreset
00004000                            ;   Structure initialized in initGfxObject
00004000                            ;   Size is <= $A0 bytes
00004000 =00000000                  word_0		rs.w	1
00004000                            
00004000                            ;   Provided by main CPU
00004000 =00000002                  word_2		rs.w	1
00004000 =00000004                  word_4		rs.w	1
00004000 =00000006                  word_6		rs.w	1
00004000 =00000008                  word_8		rs.w	1				;Flip I guess
00004000 =0000000A                  word_A		rs.w	1				;Rotate
00004000 =0000000C                  word_C		rs.w	1				;True X
00004000 =0000000E                  word_E		rs.w	1				;True Y
00004000                            
00004000 =00000010                  word_20		rs.w	1
00004000 =00000012                  word_22		rs.w	1
00004000 =00000014                  word_24		rs.w	1
00004000 =00000016                  word_26		rs.w	1
00004000 =00000018                  word_30		rs.w	1
00004000 =0000001A                  word_32		rs.w	1
00004000 =0000001C                  word_34		rs.w	1
00004000 =0000001E                  word_36		rs.w	1
00004000 =00000020                  word_38		rs.w	1
00004000 =00000022                  word_3C		rs.w	1
00004000 =00000024                  word_40		rs.w	1
00004000 =00000026                  word_44		rs.w	1
00004000 =00000028                  long_48		rs.l 1
00004000 =0000002C                  long_4C		rs.l 1
00004000 =00000030                  long_50		rs.l 1
00004000 =00000034                  long_54		rs.l 1
00004000 =00000038                  long_5C_div	rs.l 1
00004000 =0000003C                  long_5C		rs.l 1
00004000 =00000040                  long_60		rs.l 1
00004000 =00000044                  sizeof_stamp	rs.l 0
00004000                            
00004000                            ; -------------------------------------------
00004000                            ; RAM
00004000                            ; -------------------------------------------
00004000                            
00004000                            		rsset $10000
00004000 =00010000                  StampBuffer	rs.b sizeof_stamp*numof_stamps
00004000 =00010880                  Save_Data	rs.b $20
00004000                            
00004000 =000108A0                  VBlankFlag	rs.w 1
00004000 =000108A2                  BiosArgs	rs.l $20
00004000 =00010922                  BRAM_Buffer	rs.b $640
00004000 =00010F62                  BRAM_Strings	rs.b $18
00004000 =00010F7A                  ISO_Files	rs.w ($800*$20)
00004000 =00030F7A                  StoredData	rs.b $20000			;$28100
00004000 =00050F7A                  endof_sub	rs.l 0
00004000                            ; 		inform 0,"CHECA AQUI: %h %h",BRAM_Buffer,BRAM_Strings
00004000                            		
00004000                            ; -------------------------------------------
00004000                            ; Include
00004000                            ; -------------------------------------------
00004000                            
00004000                            		include "system/hardware/mcd/s68k/incl/equs.asm"
00004000                            ; =================================================================
00004000                            ; ----------------------------------------
00004000                            ; Shared vars
00004000                            ; ----------------------------------------
00004000                            
00004000                            ; -------------
00004000                            ; bits
00004000                            ; -------------
00004000                            
00004000 =00000002                  bitWRamMode	equ	2		;2M | 1M
00004000                            
00004000                            ; -------------
00004000                            ; Registers
00004000                            ; -------------
00004000                            
00004000 =00000002                  MemoryMode	equ	$02		;WORD
00004000 =0000000E                  CommMain	equ	$0E		;BYTE
00004000 =0000000F                  CommSub		equ	$0F		;BYTE
00004000 =00000010                  CommDataM	equ	$10		;Array (size: $E)
00004000 =00000020                  CommDataS	equ	$20		;Array (size: $E)
00004000                            
00004000                            ; =================================================================
00004000                            ; ----------------------------------------
00004000                            ; SUB CPU ONLY
00004000                            ; ----------------------------------------
00004000                            
00004000                            ; -------------
00004000                            ; PCM
00004000                            ; -------------
00004000                            
00004000 =00FF0000                  PCM		equ	$FF0000
00004000 =00000001                  ENV		equ	$01		; Envelope
00004000 =00000003                  PAN		equ	$03		; Panning (%RRRRLLLL, and negative)
00004000 =00000005                  FDL		equ	$05		; Sample rate $00xx
00004000 =00000007                  FDH		equ	$07		; Sample rate $xx00
00004000 =00000009                  LSL		equ	$09		; Loop address $xx00
00004000 =0000000B                  LSH		equ	$0B		; Loop address $00xx
00004000 =0000000D                  ST		equ	$0D		; Start address (only $x0, $x000)
00004000 =0000000F                  Ctrl		equ	$0F		; Control register ($80 - Bank select, $C0 - Channel select)
00004000 =00000011                  OnOff		equ	$11		; Channel On/Off (BITS: 1 - off, 0 - on)
00004000                            
00004000                            ; =================================================================
00004000                            ; =================================================================
00004000                            		include "system/hardware/mcd/s68k/incl/cdbios.asm"
00004000 =00000002                  MSCSTOP           equ	$0002
00004000 =00000003                  MSCPAUSEON        equ	$0003
00004000 =00000004                  MSCPAUSEOFF       equ	$0004
00004000 =00000005                  MSCSCANFF         equ	$0005
00004000 =00000006                  MSCSCANFR         equ	$0006
00004000 =00000007                  MSCSCANOFF        equ	$0007
00004000 =00000008                  ROMPAUSEON        equ	$0008
00004000 =00000009                  ROMPAUSEOFF       equ	$0009
00004000 =0000000A                  DRVOPEN           equ	$000A
00004000                            
00004000 =00000010                  DRVINIT           equ	$0010
00004000 =00000011                  MSCPLAY           equ	$0011
00004000 =00000012                  MSCPLAY1          equ	$0012
00004000 =00000013                  MSCPLAYR          equ	$0013
00004000 =00000014                  MSCPLAYT          equ	$0014
00004000 =00000015                  MSCSEEK           equ	$0015
00004000 =00000016                  MSCSEEKT          equ	$0016
00004000 =00000017                  ROMREAD           equ	$0017
00004000 =00000018                  ROMSEEK           equ	$0018
00004000 =00000019                  MSCSEEK1          equ	$0019
00004000                            
00004000 =0000001E                  TESTENTRY         equ	$001E
00004000 =0000001F                  TESTENTRYLOOP     equ	$001F
00004000 =00000020                  ROMREADN          equ	$0020
00004000 =00000021                  ROMREADE          equ	$0021
00004000                            
00004000 =00000080                  CDBCHK            equ	$0080
00004000 =00000081                  CDBSTAT           equ	$0081
00004000 =00000082                  CDBTOCWRITE       equ	$0082
00004000 =00000083                  CDBTOCREAD        equ	$0083
00004000 =00000084                  CDBPAUSE          equ	$0084
00004000 =00000085                  FDRSET            equ	$0085
00004000 =00000086                  FDRCHG            equ	$0086
00004000 =00000087                  CDCSTART          equ	$0087
00004000 =00000088                  CDCSTARTP         equ	$0088
00004000 =00000089                  CDCSTOP           equ	$0089
00004000 =0000008A                  CDCSTAT           equ	$008A
00004000 =0000008B                  CDCREAD           equ	$008B
00004000 =0000008C                  CDCTRN            equ	$008C
00004000 =0000008D                  CDCACK            equ	$008D
00004000 =0000008E                  SCDINIT           equ	$008E
00004000 =0000008F                  SCDSTART          equ	$008F
00004000 =00000090                  SCDSTOP           equ	$0090
00004000 =00000091                  SCDSTAT           equ	$0091
00004000 =00000092                  SCDREAD           equ	$0092
00004000 =00000093                  SCDPQ             equ	$0093
00004000 =00000094                  SCDPQL            equ	$0094
00004000 =00000095                  LEDSET            equ	$0095
00004000 =00000096                  CDCSETMODE        equ	$0096
00004000 =00000097                  WONDERREQ         equ	$0097
00004000 =00000098                  WONDERCHK         equ	$0098
00004000                            
00004000 =00000000                  CBTINIT           equ	$0000
00004000 =00000001                  CBTINT            equ	$0001
00004000 =00000002                  CBTOPENDISC       equ	$0002
00004000 =00000003                  CBTOPENSTAT       equ	$0003
00004000 =00000004                  CBTCHKDISC        equ	$0004
00004000 =00000005                  CBTCHKSTAT        equ	$0005
00004000 =00000006                  CBTIPDISC         equ	$0006
00004000 =00000007                  CBTIPSTAT         equ	$0007
00004000 =00000008                  CBTSPDISC         equ	$0008
00004000 =00000009                  CBTSPSTAT         equ	$0009
00004000                            
00004000 =00000000                  BRMINIT           equ	$0000
00004000 =00000001                  BRMSTAT           equ	$0001
00004000 =00000002                  BRMSERCH          equ	$0002
00004000 =00000003                  BRMREAD           equ	$0003
00004000 =00000004                  BRMWRITE          equ	$0004
00004000 =00000005                  BRMDEL            equ	$0005
00004000 =00000006                  BRMFORMAT         equ	$0006
00004000 =00000007                  BRMDIR            equ	$0007
00004000 =00000008                  BRMVERIFY         equ	$0008
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS ENTRY POINTS
00004000                            ;-----------------------------------------------------------------------
00004000                            
00004000 =00005F40                  _ADRERR           equ	$00005F40
00004000 =00005EA0                  _BOOTSTAT         equ	$00005EA0
00004000 =00005F16                  _BURAM            equ	$00005F16
00004000 =00005F22                  _CDBIOS           equ	$00005F22
00004000 =00005F1C                  _CDBOOT           equ	$00005F1C
00004000 =00005E80                  _CDSTAT           equ	$00005E80
00004000 =00005F52                  _CHKERR           equ	$00005F52
00004000 =00005F46                  _CODERR           equ	$00005F46
00004000 =00005F4C                  _DEVERR           equ	$00005F4C
00004000 =00005F76                  _LEVEL1           equ	$00005F76
00004000 =00005F7C                  _LEVEL2           equ	$00005F7C
00004000 =00005F82                  _LEVEL3           equ	$00005F82 ;TIMER INTERRUPT
00004000 =00005F88                  _LEVEL4           equ	$00005F88
00004000 =00005F8E                  _LEVEL5           equ	$00005F8E
00004000 =00005F94                  _LEVEL6           equ	$00005F94
00004000 =00005F9A                  _LEVEL7           equ	$00005F9A
00004000 =00005F6A                  _NOCOD0           equ	$00005F6A
00004000 =00005F70                  _NOCOD1           equ	$00005F70
00004000 =00005F0A                  _SETJMPTBL        equ	$00005F0A
00004000 =00005F5E                  _SPVERR           equ	$00005F5E
00004000 =00005F64                  _TRACE            equ	$00005F64
00004000 =00005FA0                  _TRAP00           equ	$00005FA0
00004000 =00005FA6                  _TRAP01           equ	$00005FA6
00004000 =00005FAC                  _TRAP02           equ	$00005FAC
00004000 =00005FB2                  _TRAP03           equ	$00005FB2
00004000 =00005FB8                  _TRAP04           equ	$00005FB8
00004000 =00005FBE                  _TRAP05           equ	$00005FBE
00004000 =00005FC4                  _TRAP06           equ	$00005FC4
00004000 =00005FCA                  _TRAP07           equ	$00005FCA
00004000 =00005FD0                  _TRAP08           equ	$00005FD0
00004000 =00005FD6                  _TRAP09           equ	$00005FD6
00004000 =00005FDC                  _TRAP10           equ	$00005FDC
00004000 =00005FE2                  _TRAP11           equ	$00005FE2
00004000 =00005FE8                  _TRAP12           equ	$00005FE8
00004000 =00005FEE                  _TRAP13           equ	$00005FEE
00004000 =00005FF4                  _TRAP14           equ	$00005FF4
00004000 =00005FFA                  _TRAP15           equ	$00005FFA
00004000 =00005F58                  _TRPERR           equ	$00005F58
00004000 =00005F28                  _USERCALL0        equ	$00005F28 ;INIT
00004000 =00005F2E                  _USERCALL1        equ	$00005F2E ;MAIN
00004000 =00005F34                  _USERCALL2        equ	$00005F34 ;VINT
00004000 =00005F3A                  _USERCALL3        equ	$00005F3A ;NOT DEFINED
00004000 =00005EA6                  _USERMODE         equ	$00005EA6
00004000 =00005F10                  _WAITVSYNC        equ	$00005F10
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; CDBIOS - Calls the BIOS with a specified function number.  Assumes
00004000                            ; that all preparatory and cleanup work is done externally.
00004000                            ;
00004000                            ; input:
00004000                            ;   fcode BIOS function code
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            CDBIOS macro fcode
00004000                                  move.w    \fcode,d0
00004000                                  jsr       _CDBIOS
00004000                                  endm
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BURAM - Calls the Backup Ram with a specified function number.
00004000                            ; Assumes that all preparatory and cleanup work is done externally.
00004000                            ;
00004000                            ; input:
00004000                            ;   fcode Backup Ram function code
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BURAM macro fcode
00004000                                  move.w    \fcode,d0
00004000                                  jsr       _BURAM
00004000                                  endm
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; DRIVE MECHANISM
00004000                            ;-----------------------------------------------------------------------
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_DRVINIT - Closes the disk tray and reads the TOC from the CD.
00004000                            ; Pauses for 2 seconds after reading the TOC.  If bit 7 of the TOC track
00004000                            ; is set, the BIOS starts playing the first track automatically.  Waits
00004000                            ; for a DRVOPEN request if there is no disk in the drive.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of initialization parameters:
00004000                            ;           dc.b    $01   ; Track # to read TOC from (normally $01)
00004000                            ;           dc.b    $FF   ; Last track # ($FF = read all tracks)
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_DRVINIT macro
00004000                                  CDBIOS #DRVINIT
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_DRVOPEN - Opens the drive.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_DRVOPEN macro
00004000                                  CDBIOS #DRVOPEN
00004000                                  endm
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; MUSIC
00004000                            ;-----------------------------------------------------------------------
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCSTOP - Stops playing a track if it's currently playing.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCSTOP macro
00004000                                  CDBIOS #MSCSTOP
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCPLAY - Starts playing at a specified track.  Continues playing
00004000                            ; through subsequent tracks.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of 16 bit track number
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCPLAY macro
00004000                                  CDBIOS #MSCPLAY
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCPLAY1 - Plays a track once and pauses.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of a 16 bit track number
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCPLAY1 macro
00004000                                  CDBIOS #MSCPLAY1
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCPLAYR - Plays the designated track repeatedly.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of a 16 bit track number
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCPLAYR macro
00004000                                  CDBIOS #MSCPLAYR
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCPLAYT - Starts playing from a specified time.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of a 32 bit BCD time code in the format mm:ss:ff:00
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCPLAYT macro
00004000                                  CDBIOS #MSCPLAYT
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCSEEK - Seeks to the beginning of the selected track and pauses.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of a 16 bit track number
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCSEEK macro
00004000                                  CDBIOS #MSCSEEK
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCSEEK1 - Seeks to the beginning of the selected track and pauses.
00004000                            ; Once the BIOS detects a pause state, it plays the track once.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of a 16 bit track number
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCSEEK1 macro
00004000                                  CDBIOS #MSCSEEK1
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCSEEKT - Seeks to a specified time.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of a 32 bit BCD time code in the format mm:ss:ff:00
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCSEEKT macro
00004000                                  CDBIOS #MSCSEEKT
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCPAUSEON - Pauses the drive when a track is playing.  If the
00004000                            ; drive is left paused it will stop after a programmable delay (see
00004000                            ; CDBPAUSE).
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCPAUSEON macro
00004000                                  CDBIOS #MSCPAUSEON
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCPAUSEOFF - Resumes playing a track after a pause.  If the drive
00004000                            ; has timed out and stopped, the BIOS will seek to the pause time (with
00004000                            ; the attendant delay) and resume playing.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCPAUSEOFF macro
00004000                                  CDBIOS #MSCPAUSEOFF
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCSCANFF - Starts playing from the current position in fast
00004000                            ; forward.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCSCANFF macro
00004000                                  CDBIOS #MSCSCANFF
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCSCANFR - Same as MSCSCANFF, but backwards.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCSCANFR macro
00004000                                  CDBIOS #MSCSCANFR
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_MSCSCANOFF - Returns to normal play mode.  If the drive was
00004000                            ; paused before the scan was initiated, it will be returned to pause.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_MSCSCANOFF macro
00004000                                  CDBIOS #MSCSCANOFF
00004000                                  endm
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; CD-ROM
00004000                            ;-----------------------------------------------------------------------
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_ROMREAD - Begins reading data from the CDROM at the designated
00004000                            ; logical sector.  Executes a CDCSTART to begin the read, but doesn't
00004000                            ; stop automatically.
00004000                            ;
00004000                            ; Note - ROMREAD actually pre-seeks by 2 sectors, but doesn't start
00004000                            ; passing data to the CDC until the desired sector is reached.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of a 32 bit logical sector number
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_ROMREAD macro
00004000                                  CDBIOS #ROMREAD
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_ROMREADN - Same as ROMREAD, but stops after reading the requested
00004000                            ; number of sectors.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of a 32 bit sector number and 32 bit sector count
00004000                            ;           dc.l    $00000001   ; First sector to read
00004000                            ;           dc.l    $00001234   ; Number of sectors to read
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_ROMREADN macro
00004000                                  CDBIOS #ROMREADN
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_ROMREADE - Same as ROMREAD, but reads between two logical sectors.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of table of 32 bit logical sector numbers
00004000                            ;           dc.l    $00000001   ; First sector to read
00004000                            ;           dc.l    $00000123   ; Last sector to read
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_ROMREADE macro
00004000                                  CDBIOS #ROMREADE
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_ROMSEEK - Seeks to the designated logical sector and pauses.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of a 32 bit logical sector number
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_ROMSEEK macro
00004000                                  CDBIOS #ROMSEEK
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_ROMPAUSEON - Stops reading data into the CDC and pauses.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_ROMPAUSEON macro
00004000                                  CDBIOS #ROMPAUSEON
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_ROMPAUSEOFF - Resumes reading data into the CDC from the current
00004000                            ; logical sector.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_ROMPAUSEOFF macro
00004000                                  CDBIOS #ROMPAUSEOFF
00004000                                  endm
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; MISC BIOS FUNCTIONS
00004000                            ;-----------------------------------------------------------------------
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_CDBCHK - Querys the BIOS on the status of the last command.
00004000                            ; Returns success if the command has been executed, not if it's complete.
00004000                            ; This means that CDBCHK will return success on a seek command once the
00004000                            ; seek has started, NOT when the seek is actually finished.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc  Command has been executed
00004000                            ;   cs  BIOS is busy
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_CDBCHK macro
00004000                                  CDBIOS #CDBCHK
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_CDBSTAT
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   a0.l  address of BIOS status table
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_CDBSTAT macro
00004000                                  CDBIOS #CDBSTAT
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_CDBTOCREAD - Gets the time for the specified track from the TOC.
00004000                            ; If the track isn't in the TOC, the BIOS will either return the time of
00004000                            ; the last track read or the beginning of the disk.  Don't call this
00004000                            ; function while the BIOS is loading the TOC (see DRVINIT).
00004000                            ;
00004000                            ; input:
00004000                            ;   d1.w  16 bit track number
00004000                            ;
00004000                            ; returns:
00004000                            ;   d0.l  BCD time of requested track in mm:ss:ff:## format where ## is
00004000                            ;         the requested track number or 00 if there was an error
00004000                            ;
00004000                            ;   d1.b  Track type:
00004000                            ;           $00 = CD-DA track
00004000                            ;           $FF = CD-ROM track
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_CDBTOCREAD macro
00004000                                  CDBIOS #CDBTOCREAD
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_CDBTOCWRITE - Writes data to the TOC in memory.  Don't write to
00004000                            ; the TOC while the BIOS is performing a DRVINIT.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of a table of TOC entries to write to the TOC.  Format
00004000                            ;         of the entries is mm:ss:ff:## where ## is the track number.
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_CDBTOCWRITE macro
00004000                                  CDBIOS #CDBTOCWRITE
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_CDBPAUSE - Sets the delay time before the BIOS switches from
00004000                            ; pause to standby.  Normal ranges for this delay time are $1194 - $FFFE.
00004000                            ; A delay of $FFFF prevents the drive from stopping, but can  damage the
00004000                            ; drive if used improperly.
00004000                            ;
00004000                            ; input:
00004000                            ;   d1.w  16 bit delay time
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_CDBPAUSE macro
00004000                                  CDBIOS #CDBPAUSE
00004000                                  endm
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; FADER
00004000                            ;-----------------------------------------------------------------------
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_FDRSET - Sets the audio volume.  If bit 15 of the volume parameter
00004000                            ; is 1, sets the master volume level.  There's a delay of up to 13ms
00004000                            ; before the volume begins to change and another 23ms for the new volume
00004000                            ; level to take effect.  The master volume sets a maximum level which the
00004000                            ; volume level can't exceed.
00004000                            ;
00004000                            ; input:
00004000                            ;   d1.w  16 bit volume         ($0000 = min    $0400 = max)
00004000                            ;         16 bit master volume  ($8000 = min    $8400 = max)
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_FDRSET macro
00004000                                  CDBIOS #FDRSET
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_FDRCHG - Ramps the audio volume from its current level to a new
00004000                            ; level at the requested rate.  As in FDRSET, there's a delay of up to
00004000                            ; 13ms before the change starts.
00004000                            ;
00004000                            ; input:
00004000                            ;   d1.l  32 bit volume change
00004000                            ;         high word:  new 16 bit volume   ($0000 = min    $0400 = max)
00004000                            ;         low word:   16 bit rate in steps/vblank
00004000                            ;                     $0001 = slow
00004000                            ;                     $0200 = fast
00004000                            ;                     $0400 = set immediately
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_FDRCHG macro
00004000                                  CDBIOS #FDRCHG
00004000                                  endm
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; CDC
00004000                            ;-----------------------------------------------------------------------
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_CDCSTART - Starts reading data from the current logical sector
00004000                            ; into the CDC.  The BIOS pre-seeks by 2 to 4 sectors and data read
00004000                            ; actually begins before the requested sector.  It's up to the caller
00004000                            ; to identify the correct starting sector (usually by checking the time
00004000                            ; codes in the headers as they're read from the CDC buffer).
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_CDCSTART macro
00004000                                  CDBIOS #CDCSTART
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_CDCSTOP - Stops reading data into the CDC.  If a sector is being
00004000                            ; read when CDCSTOP is called, it's lost.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_CDCSTOP macro
00004000                                  CDBIOS #CDCSTOP
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_CDCSTAT - Queries the CDC buffer.  If no sector is ready for
00004000                            ; read, the carry bit will be set.  Up to 5 sectors can be buffered in
00004000                            ; the CDC buffer.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc  Sector available for read
00004000                            ;   cs  No sectors available
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_CDCSTAT macro
00004000                                  CDBIOS #CDCSTAT
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_CDCREAD - If a sector is ready in the CDC buffer, the BIOS
00004000                            ; prepares to send the sector to the current device destination.  Make
00004000                            ; sure to set the device destination BEFORE calling CDCREAD.  If a
00004000                            ; sector is ready, the carry bit will be cleared on return and it's
00004000                            ; necessary to respond with a call to CDCACK.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    Sector ready for transfer
00004000                            ;   d0.l  Sector header in BCD mm:ss:ff:md format where md is sector mode
00004000                            ;           $00 = CD-DA
00004000                            ;           $01 = CD-ROM mode 1
00004000                            ;           $02 = CD-ROM mode 2
00004000                            ;   cs    Sector not ready
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_CDCREAD macro
00004000                                  CDBIOS #CDCREAD
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_CDCTRN - Uses the Sub-CPU to read one sector into RAM.  The
00004000                            ; device destination must be set to SUB-CPU read before calling CDCTRN.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of sector destination buffer (at least 2336 bytes)
00004000                            ;   a1.l  address of header destination buffer (at least 4 bytes)
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    Sector successfully transferred
00004000                            ;   cs    Transfer failed
00004000                            ;   a0.l  Next sector destination address (a0 + 2336)
00004000                            ;   a1.l  Next header destination address (a1 + 4)
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_CDCTRN macro
00004000                                  CDBIOS #CDCTRN
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_CDCACK - Informs the CDC that the current sector has been read
00004000                            ; and the caller is ready for the next sector.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_CDCACK macro
00004000                                  CDBIOS #CDCACK
00004000                                  endm
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_CDCSETMODE - Tells the BIOS which mode to read the CD in.  Accepts
00004000                            ; bit flags that allow selection of the three basic CD modes as follows:
00004000                            ;
00004000                            ;       Mode 0 (CD-DA)                              2
00004000                            ;       Mode 1 (CD-ROM with full error correction)  0
00004000                            ;       Mode 2 (CD-ROM with CRC only)               1
00004000                            ;
00004000                            ; input:
00004000                            ;   d1.w  FEDCBA9876543210
00004000                            ;                     ||||
00004000                            ;                     |||+--> CD Mode 2
00004000                            ;                     ||+---> CD-DA mode
00004000                            ;                     |+----> transfer error block with data
00004000                            ;                     +-----> re-read last data
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_CDCSETMODE macro
00004000                                  CDBIOS #CDCSETMODE
00004000                                  endm
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; SUBCODES
00004000                            ;-----------------------------------------------------------------------
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_SCDINIT - Initializes the BIOS for subcode reads.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of scratch buffer (at least $750 long)
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_SCDINIT macro
00004000                                  CDBIOS #SCDINIT
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_SCDSTART - Enables reading of subcode data by the CDC.
00004000                            ;
00004000                            ; input:
00004000                            ;   d1.w  Subcode processing mode
00004000                            ;           0 = --------
00004000                            ;           1 = --RSTUVW
00004000                            ;           2 = PQ------
00004000                            ;           3 = PQRSTUVW
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_SCDSTART macro
00004000                                  CDBIOS #SCDSTART
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_SCDSTOP - Disables reading of subcode data by the CDC.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_SCDSTOP macro
00004000                                  CDBIOS #SCDSTOP
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_SCDSTAT - Checks subcode error status.
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   d0.l  errqcodecrc / errpackcirc / scdflag / restrcnt
00004000                            ;   d1.l  erroverrun / errpacketbufful / errqcodefufful / errpackfufful
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_SCDSTAT macro
00004000                                  CDBIOS #SCDSTAT
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_SCDREAD - Reads R through W subcode channels.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of subcode buffer (24 bytes minimum)
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    Read successful
00004000                            ;   cs    Read failed
00004000                            ;   a0.l  address of next subcode buffer (a0.l + 24)
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_SCDREAD macro
00004000                                  CDBIOS #SCDREAD
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_SCDPQ - Gets P & Q codes from subcode.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of Q code buffer (12 bytes minimum)
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    Read successful
00004000                            ;   cs    Read failed
00004000                            ;   a0.l  address of next Q code buffer (a0.l + 12)
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_SCDPQ macro
00004000                                  CDBIOS #SCDPQ
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_SCDPQL - Gets the last P & Q codes.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  address of Q code buffer (12 bytes minimum)
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    Read successful
00004000                            ;   cs    Read failed
00004000                            ;   a0.l  address of next Q code buffer (a0.l + 12)
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_SCDPQL macro
00004000                                  CDBIOS #SCDPQL
00004000                                  endm
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; FRONT PANEL LEDS
00004000                            ;-----------------------------------------------------------------------
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_LEDSET - Controls the Ready and Access LED's on the front panel
00004000                            ; of the CD unit.
00004000                            ;
00004000                            ; input:
00004000                            ;   d1.w  MODE          Ready (green)   Access (red)    System Indication
00004000                            ;         ---------------------------------------------------------------
00004000                            ;                           off             off         only at reset
00004000                            ;         LEDREADY (0)      on              blink       CD ready / no disk
00004000                            ;         LEDDISCIN (1)     on              off         CD ready / disk ok
00004000                            ;         LEDACCESS (2)     on              on          CD accessing
00004000                            ;         LEDSTANDBY (3)    blink           off         standby mode
00004000                            ;         LEDERROR (4)      blink           blink       reserved
00004000                            ;         LEDMODE5 (5)      blink           on          reserved
00004000                            ;         LEDMODE6 (6)      off             blink       reserved
00004000                            ;         LEDMODE7 (7)      off             on          reserved
00004000                            ;         LEDSYSTEM (?)                                 rtn ctrl to BIOS
00004000                            ;
00004000                            ; returns:
00004000                            ;   nothing
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_LEDSET macro
00004000                                  CDBIOS #LEDSET
00004000                                  endm
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; Back-Up RAM
00004000                            ;-----------------------------------------------------------------------
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; NOTE:  The backup ram on the super target devlopment systems is write
00004000                            ;         protected if the production Boot Rom is being used.  A
00004000                            ;         Development Boot Rom must be obtained before the backup ram can
00004000                            ;         be used.
00004000                            ;
00004000                            ;        The name of the save game files must be registered with SOJ before
00004000                            ;         a game can be shipped.
00004000                            ;
00004000                            ;        Please make sure to read the CD Software Standards section in the
00004000                            ;         manual.  There is a section on backup ram standards that must be
00004000                            ;         followed.
00004000                            ;
00004000                            ;        For a full description of each Back-Up Ram function, see the BIOS
00004000                            ;         section of the CD manual.
00004000                            ;
00004000                            ;        Some of the Back-Up RAM functions require a string buffer to
00004000                            ;         be passed into the function.  Some of these functions return
00004000                            ;         0 terminated text strings.
00004000                            ;-------------------------------------------------------------------------
00004000                            
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_BRMINIT - Prepares to write into and read from Back-Up Ram.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  pointer to scratch ram (size $640 bytes).
00004000                            ;
00004000                            ;   a1.l  pointer to the buffer for display strings (size: 12 bytes)
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    SEGA formatted RAM is present
00004000                            ;   cs    Not formatted or no RAM
00004000                            ;   d0.w  size of backup RAM  $2(000) ~ $100(000)  bytes
00004000                            ;   d1.w  0 : No RAM
00004000                            ;         1 : Not Formatted
00004000                            ;         2 : Other Format
00004000                            ;   a1.l  pointer to display strings
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_BRMINIT macro
00004000                                  BURAM #BRMINIT
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_BRMSTAT - Returns how much Back-Up RAM has been used.
00004000                            ;
00004000                            ; input:
00004000                            ;   a1.l  pointer to display string buffer (size: 12 bytes)
00004000                            ;
00004000                            ; returns:
00004000                            ;   d0.w  number of blocks of free area
00004000                            ;   d1.w  number of files in directory
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_BRMSTAT macro
00004000                                  BURAM #BRMSTAT
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_BRMSERCH - Searches for the desired file in Back-Up Ram.  The file
00004000                            ;                  names are 11 ASCII characters terminated with a 0.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  pointer to parameter (file name) table
00004000                            ;             file name = 11 ASCII chars [0~9 A~Z_]   0 terminated
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    file name found
00004000                            ;   cs    file name not found
00004000                            ;   d0.w  number of blocks
00004000                            ;   d1.b  MODE
00004000                            ;         0 : normal
00004000                            ;        -1 : data protected (with protect function)
00004000                            ;   a0.l  backup ram start address for search
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_BRMSERCH macro
00004000                                  BURAM #BRMSERCH
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_BRMREAD - reads data from Back-Up RAM.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  pointer to parameter (file name) table
00004000                            ;   a1.l  pointer to write buffer
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    Read Okay
00004000                            ;   cs    Error
00004000                            ;   d0.w  number of blocks
00004000                            ;   d1.b  MODE
00004000                            ;         0 : normal
00004000                            ;        -1 : data protected
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_BRMREAD macro
00004000                                  BURAM #BRMREAD
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_BRMWRITE - Writes data in Back-Up RAM.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  pointer to parameter (file name) table
00004000                            ;          flag.b       $00: normal
00004000                            ;                       $FF: encoded (with protect function)
00004000                            ;          block_size.w $00: 1 block = $40 bytes
00004000                            ;                       $FF: 1 block = $20 bytes
00004000                            ;   a1.l  pointer to save data
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    Okay, complete
00004000                            ;   cs    Error, cannot write in the file
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_BRMWRITE macro
00004000                                  BURAM #BRMWRITE
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_BRMDEL - Deletes data on Back-Up Ram.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  pointer to parameter (file name) table
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    deleted
00004000                            ;   cs    not found
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_BRMDEL macro
00004000                                  BURAM #BRMDEL
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_BRMFORMAT - First initializes the directory and then formats the
00004000                            ;                   Back-Up RAM
00004000                            ;
00004000                            ;                  Call BIOS_BRMINIT before calling this function
00004000                            ;
00004000                            ; input:
00004000                            ;   none
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    Okay, formatted
00004000                            ;   cs    Error, cannot format
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_BRMFORMAT macro
00004000                                  BURAM #BRMFORMAT
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_BRMDIR - Reads directory
00004000                            ;
00004000                            ; input:
00004000                            ;   d1.l  H: number of files to skip when all files cannot be read in one try
00004000                            ;         L: size of directory buffer (# of files that can be read in the
00004000                            ;             directory buffer)
00004000                            ;   a0.l  pointer to parameter (file name) table
00004000                            ;   a1.l  pointer to directory buffer
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    Okay, complete
00004000                            ;   cs    Full, too much to read into directory buffer
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_BRMDIR macro
00004000                                  BURAM #BRMDIR
00004000                                  endm
00004000                            
00004000                            ;-----------------------------------------------------------------------
00004000                            ; BIOS_BRMVERIFY - Checks data written on Back-Up Ram.
00004000                            ;
00004000                            ; input:
00004000                            ;   a0.l  pointer to parameter (file name) table
00004000                            ;          flag.b       $00: normal
00004000                            ;                       $FF: encoded (with protect function)
00004000                            ;          block_size.w $00: 1 block = $40 bytes
00004000                            ;                       $FF: 1 block = $20 bytes
00004000                            ;   a1.l  pointer to save data
00004000                            ;
00004000                            ; returns:
00004000                            ;   cc    Okay
00004000                            ;   cs    Error
00004000                            ;   d0.w  Error Number
00004000                            ;        -1 : Data does not match
00004000                            ;         0 : File not found
00004000                            ;-----------------------------------------------------------------------
00004000                            BIOS_BRMVERIFY macro
00004000                                  BURAM #BRMVERIFY
00004000                                  endm
00004000                            
00004000                            
00004000                            		
00004000                            ; =====================================================================
00004000                            ; -------------------------------------------
00004000                            ; Header
00004000                            ; -------------------------------------------
00004000                            
00004000                            		obj $6000
00006000 4D41 494E 2020 2020 2020+  		dc.b "MAIN       ",0
0000600C 0000 0000                  		dc.w 0,0
00006010 0000 0000                  		dc.l 0
00006014 0000 0000                  		dc.l 0
00006018 0000 0020                  		dc.l $20
0000601C 0000 0000                  		dc.l 0
00006020                            @Table:
00006020 0000                       		dc.w	SP_Init-@Table
00006022 0000                       		dc.w	SP_Main-@Table
00006024 0000                       		dc.w	SP_IRQ-@Table
00006026 0000                       		dc.w	0
00006028 0000                       		dc.w	0
0000602A                            
0000602A                            ; =====================================================================
0000602A                            ; -------------------------------------------
0000602A                            ; Init
0000602A                            ; -------------------------------------------
0000602A                            
0000602A                            SP_Init:
0000602A 08B9 0002 00FF 8003          		bclr	#bitWRamMode,(ThisCpu+MemoryMode+1)
00006032 6100 0000                  		bsr	Init9660
00006036 41F9 00FF 0000             		lea	(PCM),a0
0000603C 163C 0080                  		move.b	#$80,d3
00006040 7A0F                       		moveq	#$F,d5
00006042                            @Next:
00006042 1143 000F                  		move.b	d3,Ctrl(a0)
00006046 6100 0000                  		bsr	PCM_Wait
0000604A 45F9 00FF 2001             		lea	($FF2001),a2
00006050 303C 0FFF                  		move.w	#$FFF,d0
00006054                            @loop1:
00006054 14BC 00FF                  		move.b	#$FF,(a2)
00006058 548A                       		addq.l	#2,a2
0000605A 51C8 FFF8                  		dbf	d0,@loop1
0000605E 1143 000F                  		move.b	d3,Ctrl(a0)
00006062 6100 0000                  		bsr	PCM_Wait
00006066 0603 0001                  		add.b	#1,d3
0000606A 51CD FFD6                  		dbf	d5,@Next
0000606E                            
0000606E                            ; 		move.w	#$2700,sr
0000606E                            ; 		BSET	#1,$FF8033
0000606E                            ; 		BSET	#2,$FF8033
0000606E                            ; 		BCLR	#3,$FF8033
0000606E                            		
0000606E 4239 00FF 800F             		clr.b	(ThisCpu+CommSub)			; SubCpu free
00006074                            ; 		move.w	#$2000,sr
00006074 4E75                       		rts
00006076                            		
00006076                            ; =====================================================================
00006076                            ; -------------------------------------------
00006076                            ; Main
00006076                            ; -------------------------------------------
00006076                            
00006076                            SP_Main:	
00006076 4A39 00FF 800E             		tst.b	(ThisCpu+CommMain)	; Check command
0000607C 6600 FFF8                  		bne	SP_Main			; If NOT clear, loop 
00006080 13FC 0001 00FF 800F        		move.b	#1,(ThisCpu+CommSub)	; Else, set status to ready
00006088                            @loop:				
00006088 4A39 00FF 800E             		tst.b	(ThisCpu+CommMain)	; Check command
0000608E 67F8                       		beq.s	@loop			; If none issued, loop
00006090                            
00006090 4DF9 00FF 8010             		lea	(ThisCpu+CommDataM),a6	; a6 - Input bytes
00006096 4BF9 00FF 8020             		lea	(ThisCpu+CommDataS),a5	; a5 - Output bytes
0000609C 7000                       		moveq	#0,d0
0000609E 1039 00FF 800E             		move.b	(ThisCpu+CommMain),d0
000060A4 D040                       		add.w	d0,d0
000060A6 323B 0000                  		move.w	@Command(pc,d0.w),d1
000060AA 4A41                       		tst.w	d1
000060AC 6700                       		beq.s	@Null
000060AE 4EBB 1000                  		jsr	@Command(pc,d1.w)
000060B2                            @Null:
000060B2 13FC 0000 00FF 800F        		move.b	#0,(ThisCpu+CommSub)	; Done.
000060BA 60BA                       		bra.s	SP_Main			; Loop
000060BC                            		
000060BC                            ; -------------------------------------------
000060BC                            
000060BC                            @Command:
000060BC                            		; $00+ Generic stuff
000060BC 0000                       		dc.w	0			; NULL
000060BE 0000                       		dc.w	0
000060C0 0000                       		dc.w	0
000060C2 0000                       		dc.w	0
000060C4 0000                       		dc.w	Cmd_04-@Command		; Load data to WordRAM from ISO Filesystem
000060C6 0000                       		dc.w	Cmd_05-@Command
000060C8 0000                       		dc.w	0
000060CA 0000                       		dc.w	0
000060CC 0000                       		dc.w	Cmd_08-@Command		; Set WordRAM for MainCPU
000060CE 0000                       		dc.w	0
000060D0 0000                       		dc.w	0
000060D2 0000                       		dc.w	0
000060D4 0000                       		dc.w	0
000060D6 0000                       		dc.w	0
000060D8 0000                       		dc.w	0
000060DA 0000                       		dc.w	0
000060DC                            		
000060DC                            		; $10+ CD Audio control
000060DC 0000                       		dc.w	Cmd_10-@Command		; Play song, repeat
000060DE 0000                       		dc.w	0			; Play song, once
000060E0 0000                       		dc.w	0
000060E2 0000                       		dc.w	0
000060E4 0000                       		dc.w	Cmd_14-@Command		; Stop song
000060E6 0000                       		dc.w	0
000060E8 0000                       		dc.w	0
000060EA 0000                       		dc.w	0
000060EC 0000                       		dc.w	0
000060EE 0000                       		dc.w	0
000060F0 0000                       		dc.w	0
000060F2 0000                       		dc.w	0
000060F4 0000                       		dc.w	0
000060F6 0000                       		dc.w	0
000060F8 0000                       		dc.w	0
000060FA 0000                       		dc.w	0
000060FC                            
000060FC                            		; $20+ PCM
000060FC 0000                       		dc.w	Cmd_20-@Command		; Load Sample from disc
000060FE 0000                       		dc.w	Cmd_21-@Command		; Set Channel Sample
00006100 0000                       		dc.w	Cmd_22-@Command		; Set Channel Frequency
00006102 0000                       		dc.w	Cmd_23-@Command		; Set Channel Panning
00006104 0000                       		dc.w	Cmd_24-@Command		; Set Channel Envelope
00006106 0000                       		dc.w	Cmd_25-@Command		; Set Channel ON/OFF
00006108 0000                       		dc.w	Cmd_26-@Command		; FULLY Clean the PCM Chip
0000610A 0000                       		dc.w	0
0000610C 0000                       		dc.w	0	
0000610E 0000                       		dc.w	0
00006110 0000                       		dc.w	0
00006112 0000                       		dc.w	0
00006114 0000                       		dc.w	0
00006116 0000                       		dc.w	0
00006118 0000                       		dc.w	0
0000611A 0000                       		dc.w	0
0000611C                            
0000611C                            		; $30+ Stamps
0000611C 0000                       		dc.w	Cmd_30-@Command		; Init stamp system
0000611E 0000                       		dc.w	0
00006120 0000                       		dc.w	0
00006122 0000                       		dc.w	0
00006124 0000                       		dc.w	Cmd_34-@Command		; Modify a stamp
00006126 0000                       		dc.w	0
00006128 0000                       		dc.w	0
0000612A 0000                       		dc.w	0
0000612C 0000                       		dc.w	Cmd_38-@Command		; Run ALL stamps
0000612E 0000                       		dc.w	0
00006130 0000                       		dc.w	0
00006132 0000                       		dc.w	0
00006134 0000                       		dc.w	0
00006136 0000                       		dc.w	0
00006138 0000                       		dc.w	0
0000613A 0000                       		dc.w	0
0000613C                            		
0000613C                            		; $40+ BRAM (Save data)
0000613C 0000                       		dc.w	Cmd_40-@Command		; BRAM Init
0000613E 0000                       		dc.w	0
00006140 0000                       		dc.w	0
00006142 0000                       		dc.w	0
00006144 0000                       		dc.w	0
00006146 0000                       		dc.w	0
00006148 0000                       		dc.w	0
0000614A 0000                       		dc.w	0
0000614C 0000                       		dc.w	0
0000614E 0000                       		dc.w	0
00006150 0000                       		dc.w	0
00006152 0000                       		dc.w	0
00006154 0000                       		dc.w	0
00006156 0000                       		dc.w	0
00006158 0000                       		dc.w	0
0000615A 0000                       		dc.w	0	
0000615C                            ; 		
0000615C                            ; 		; $50+ FMV
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0	
0000615C                            ; 
0000615C                            ; 		; $60+
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0	
0000615C                            ; 
0000615C                            ; 		; $70+
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            ; 		dc.w	0
0000615C                            	
0000615C                            		even		
0000615C                            
0000615C                            ; =====================================================================
0000615C                            ; -------------------------------------------
0000615C                            ; $04 - Load Hadagi file to WordRAM
0000615C                            ; 
0000615C                            ; CommDataM:
0000615C                            ; $00-$07 - Filename
0000615C                            ; 
0000615C                            ; CommDataS:
0000615C                            ; $00 - -1 if failed
0000615C                            ; -------------------------------------------
0000615C                            
0000615C                            Cmd_04:
0000615C 204E                       		movea.l	a6,a0			; Name pointer
0000615E 6100 0000                  		bsr	FindFile		; Find File returns params in the right format for ReadCD
00006162 207C 0008 0000             		move.l	#$80000,a0		; Set destionation to WordRAM
00006168 343C 0800                  		move.w	#$800,d2
0000616C 6000 0000                  		bra	ReadSector
00006170                            	
00006170                            ; -------------------------------------------
00006170                            ; $05 - Load PRG-RAM from *Hadagi*
00006170                            ; 
00006170                            ; CommDataM:
00006170                            ; $00-$0B - Filename ($C must be $00)
00006170                            ; $0D     - What to do
00006170                            ; > $00 - Load full file to buffer
00006170                            ; > $01 - PRG-RAM to WordRAM for MAIN
00006170                            ; > $02 - Load WordRAM
00006170                            ;
00006170                            ; CommDataS:
00006170                            ; $00 - -1 if something failed
00006170                            ; -------------------------------------------
00006170                            
00006170                            Cmd_05:
00006170 4A2E 000D                   		tst.b	$D(a6)
00006174 6600                        		bne.s	@Tasks
00006176 204E                        		movea.l	a6,a0
00006178 6100 0000                  		bsr	FindFile
0000617C 6B00 0000                   		bmi	@Failed
00006180 41F9 0003 0F7A              		lea	(StoredData),a0
00006186 343C 0800                   		move.w	#$800,d2
0000618A 6000 0000                   		bra	ReadSector
0000618E                            @Tasks:
0000618E 47F9 0003 0F7A              		lea	(StoredData),a3
00006194 0C93 5241 4D20              		cmp.l	#"RAM ",(a3)
0000619A 6600 0000                   		bne	@Failed
0000619E                             		
0000619E 0C2E 0001 000D              		cmp.b	#1,$D(a6)		;Step 1?
000061A4 6600                        		bne.s	@Not_1
000061A6 262B 0008                   		move.l	8(a3),d3
000061AA 282B 000C                    		move.l	$C(a3),d4
000061AE D6C3                        		adda	d3,a3
000061B0 49F9 0008 0000              		lea	($80000),a4
000061B6                            @1_WordRam:
000061B6 18DB                        		move.b	(a3)+,(a4)+
000061B8 0683 0000 0001              		add.l	#1,d3
000061BE B684                        		cmp.l	d4,d3
000061C0 6DF4                        		blt.s	@1_WordRam
000061C2                             		
000061C2                            @Not_1:
000061C2                             
000061C2                            ; -------------------------------------------
000061C2                             
000061C2 0C2E 0002 000D               		cmp.b	#2,$D(a6)		;Step 2?
000061C8 6600                         		bne.s	@Not_3
000061CA 262B 0010                   		move.l	$10(a3),d3
000061CE 282B 0014                    		move.l	$14(a3),d4
000061D2 D6C3                        		adda	d3,a3
000061D4 49F9 0008 0000              		lea	($80000),a4
000061DA                            @2_WordRam:
000061DA 18DB                        		move.b	(a3)+,(a4)+
000061DC 0683 0000 0001              		add.l	#1,d3
000061E2 B684                        		cmp.l	d4,d3
000061E4 6DF4                        		blt.s	@2_WordRam
000061E6                            @Not_3:
000061E6 4E75                        		rts
000061E8                             
000061E8                            @Failed:
000061E8 1ABC 00FF                   		move.b	#-1,(a5)
000061EC 4E75                       		rts
000061EE                            
000061EE                            ; -------------------------------------------
000061EE                            ; $08 - Return WordRAM to Main
000061EE                            ; -------------------------------------------
000061EE                            
000061EE                            Cmd_08:
000061EE 08F9 0000 00FF 8003        		bset	#0,(ThisCpu+MemoryMode+1)		; Give WordRAM to Main CPU
000061F6 4E75                       		rts
000061F8                            
000061F8                            ; -------------------------------------------
000061F8                            ; $10 - Play CD Track, Repeat
000061F8                            ; 
000061F8                            ; CommDataM:
000061F8                            ; $00-$02 - Track
000061F8                            ; -------------------------------------------
000061F8                            
000061F8                            Cmd_10:
000061F8 204E                       		movea.l	a6,a0
000061FA 303C 0013 4EB9 0000 5F22   		BIOS_MSCPLAYR
00006204 4E75                       		rts
00006206                            
00006206                            ; -------------------------------------------
00006206                            ; $14 - Stop CD Track
00006206                            ; 
00006206                            ; CommDataM:
00006206                            ; $00-$02 - Track
00006206                            ; -------------------------------------------
00006206                            
00006206                            Cmd_14:
00006206 303C 0002 4EB9 0000 5F22   		BIOS_MSCSTOP
00006210 4E75                       		rts
00006212                            		
00006212                            ; -------------------------------------------
00006212                            ; $20 - PCM, load sample file from CD, .wav
00006212                            ;       format, auto-converted
00006212                            ; 
00006212                            ; CommDataM:
00006212                            ; $00-$0B - Filename ($C must be $00)
00006212                            ; $0D     - Wave bank to use (input: $01-$0F)
00006212                            ; 
00006212                            ; CommDataS:
00006212                            ; $00     - Next free bank to use
00006212                            ; $02     - Sample length
00006212                            ; -------------------------------------------
00006212                            
00006212                            Cmd_20:
00006212 49F9 00FF 0000             		lea	(PCM),a4
00006218 197C 00FF 0011             		move.b	#$FF,OnOff(a4)
0000621E 6100 0000                  		bsr	PCM_Wait
00006222                            
00006222 41F9 0003 0F7A              		lea	(StoredData),a0
00006228 363C FFFF                   		move.w	#$FFFF,d3
0000622C                            @cln_copy:
0000622C 20FC FFFF FFFF              		move.l	#-1,(a0)+
00006232 51CB FFF8                   		dbf	d3,@cln_copy
00006236                            
00006236 204E                       		movea.l	a6,a0
00006238 6100 0000                  		bsr	FindFile
0000623C 41F9 0003 0F7A             		lea	(StoredData),a0
00006242 343C 0800                  		move.w	#$800,d2
00006246 6100 0000                  		bsr	ReadSector
0000624A                            		
0000624A                            ; ----------------------------------
0000624A                            
0000624A 41F9 0003 0F7A             		lea	(StoredData),a0
00006250 D0FC 0028                  		adda 	#$28,a0
00006254 7400                       		moveq	#0,d2
00006256 1428 0001                  		move.b	1(a0),d2
0000625A E14A                       		lsl.w	#8,d2
0000625C 1410                       		move.b	(a0),d2
0000625E 0442 0001                   		sub.w	#1,d2
00006262 0282 0000 FFFF             		and.l	#$FFFF,d2
00006268 2A02                       		move.l	d2,d5
0000626A 3B45 0002                  		move.w	d5,2(a5)
0000626E D0FC 0004                  		adda 	#4,a0
00006272                            ; 		lea	(PcmToCopy),a1
00006272                            @Convert:
00006272 1810                       		move.b	(a0),d4
00006274 6100 0000                  		bsr	@ConvertWav
00006278 10C4                       		move.b	d4,(a0)+
0000627A 51CD FFF6                  		dbf	d5,@Convert
0000627E                            		
0000627E                            ; ----------------------------------
0000627E                            
0000627E 41F9 0003 0F7A             		lea	(StoredData),a0
00006284 D0FC 002C                  		adda	#$2C,a0
00006288 203C 00FF 2001             		move.l	#$FF2001,d0
0000628E 122E 000D                  		move.b	$D(a6),d1
00006292 0201 000F                  		and.b	#$F,d1
00006296 08C1 0007                  		bset	#7,d1
0000629A 1941 000F                  		move.b	d1,Ctrl(a4)
0000629E 6100 0000                  		bsr	PCM_Wait
000062A2                            @SendData:
000062A2 0C80 00FF 4001             		cmp.l	#$FF4001,d0
000062A8 6D00                       		blt.s	@Lower
000062AA 203C 00FF 2001             		move.l	#$FF2001,d0
000062B0 0601 0001                  		add.b	#1,d1
000062B4 0C01 008F                  		cmp.b	#$8F,d1
000062B8 6D00                       		blt.s	@Lower
000062BA 0C45 0FFF                  		cmp.w	#$FFF,d5
000062BE 6D00                       		blt.s	@Lower
000062C0 3A3C 0FFF                  		move.w	#$FFF,d5
000062C4                            @Lower:
000062C4 1941 000F                  		move.b	d1,Ctrl(a4)
000062C8 6100 0000                  		bsr	PCM_Wait
000062CC 2240                       		movea.l	d0,a1
000062CE 1298                       		move.b	(a0)+,(a1)
000062D0 0680 0000 0002             		add.l	#2,d0
000062D6 51CA FFCA                  		dbf	d2,@SendData
000062DA                            
000062DA 0601 0001                  		add.b	#1,d1
000062DE 0C01 008F                  		cmp.b	#$8F,d1
000062E2 6D00                       		blt.s	@NotLast
000062E4 123C 008F                  		move.b	#$8F,d1
000062E8                            @NotLast:
000062E8 1A81                       		move.b	d1,(a5)
000062EA                            	
000062EA                            @Failed_PCM:
000062EA 4E75                       		rts
000062EC                            
000062EC                            ; -------------------------------------------
000062EC                            ; Convert WAV data to PCM format
000062EC                            ;
000062EC                            ; d4 - wav input/pcm output (BYTE)
000062EC                            ; -------------------------------------------
000062EC                            
000062EC                            @ConvertWav:
000062EC 4A04                       		tst.b	d4
000062EE 6A00                       		bpl.s	@Plus
000062F0 0244 007F                  		and.w	#$7F,d4
000062F4 4E75                       		rts
000062F6                            @Plus:
000062F6 363C 0080                  		move.w	#$80,d3
000062FA 9604                       		sub.b	d4,d3
000062FC 183C 0080                  		move.b	#$80,d4
00006300 D803                       		add.b	d3,d4
00006302                            @Cont:
00006302 0C04 00FF                  		cmp.b	#$FF,d4
00006306 6600                       		bne.s	@NoEnd
00006308 183C 00FE                  		move.b	#$FE,d4
0000630C                            @NoEnd:
0000630C 4E75                       		rts
0000630E                            
0000630E                            ; -------------------------------------------
0000630E                            ; $21 - PCM, Sample address
0000630E                            ;
0000630E                            ; CommDataM:
0000630E                            ; $00 - Channel ID ($00-$07)
0000630E                            ; $01 - Channel data start ST ($00-$0F, auto leftshifted to $x000)
0000630E                            ; $02 - Channel loop address ($xxyy)
0000630E                            ; -------------------------------------------
0000630E                            
0000630E                            Cmd_21:
0000630E 49F9 00FF 0000             		lea	(PCM),a4
00006314                            		
00006314 323C 0000                  		move	#0,d1
00006318 1216                       		move.b	(a6),d1
0000631A 0241 000F                  		and.w	#$F,d1
0000631E 0041 00C0                  		or.w	#$C0,d1
00006322 1941 000F                  		move.b	d1,Ctrl(a4)
00006326 6100 0000                  		bsr	PCM_Wait
0000632A                            
0000632A 142E 0001                  		move.b	1(a6),d2
0000632E E94A                       		lsl.w	#4,d2
00006330 1942 000D                  		move.b	d2,ST(a4)
00006334 6100 0000                  		bsr	PCM_Wait
00006338                            
00006338 302E 0002                  		move.w	2(a6),d0
0000633C 1940 0009                  		move.b	d0,LSL(a4)		;Loop address
00006340 6100 0000                  		bsr	PCM_Wait
00006344 E048                       		lsr.w	#8,d0
00006346 D002                       		add.b	d2,d0
00006348 1940 000B                  		move.b	d0,LSH(a4)
0000634C 6100 0000                  		bsr	PCM_Wait
00006350                            		
00006350 1941 000F                  		move.b	d1,Ctrl(a4)
00006354 6000 0000                  		bra	PCM_Wait
00006358                            
00006358                            ; -------------------------------------------
00006358                            ; $22 - PCM, Set frequency
00006358                            ;
00006358                            ; CommDataM:
00006358                            ; $00 - Channel ID ($00-$07)
00006358                            ; $02 - Frequency value
00006358                            ; -------------------------------------------
00006358                            
00006358                            Cmd_22:
00006358 49F9 00FF 0000             		lea	(PCM),a4
0000635E                            		
0000635E 1216                       		move.b	(a6),d1
00006360 0201 000F                  		and.b	#$F,d1
00006364 0601 00C0                  		add.b	#$C0,d1
00006368 1941 000F                  		move.b	d1,Ctrl(a4)
0000636C 6100 0000                  		bsr	PCM_Wait
00006370                            		
00006370 196E 0002 0007             		move.b	2(a6),FDH(a4)
00006376 6100 0000                  		bsr	PCM_Wait
0000637A 196E 0003 0005             		move.b	3(a6),FDL(a4)
00006380 6100 0000                  		bsr	PCM_Wait
00006384                            		
00006384 1941 000F                  		move.b	d1,Ctrl(a4)
00006388 6000 0000                  		bra	PCM_Wait
0000638C                            
0000638C                            ; -------------------------------------------
0000638C                            ; $23 - PCM, Panning
0000638C                            ;
0000638C                            ; CommDataM:
0000638C                            ; $00 - Channel ID ($00-$07)
0000638C                            ; $01 - Panning data
0000638C                            ; -------------------------------------------
0000638C                            
0000638C                            Cmd_23:
0000638C 49F9 00FF 0000             		lea	(PCM),a4
00006392 1216                       		move.b	(a6),d1
00006394 0241 000F                  		and.w	#$F,d1
00006398 0001 00C0                  		or.b	#$C0,d1
0000639C 1941 000F                  		move.b	d1,Ctrl(a4)
000063A0 6100 0000                  		bsr	PCM_Wait
000063A4                            		
000063A4 142E 0001                  		move.b	1(a6),d2
000063A8 1942 0003                  		move.b	d2,PAN(a4)		;Panning
000063AC 6100 0000                  		bsr	PCM_Wait
000063B0                            		
000063B0 1941 000F                  		move.b	d1,Ctrl(a4)
000063B4 6000 0000                  		bra	PCM_Wait
000063B8                            
000063B8                            ; -------------------------------------------
000063B8                            ; $24 - PCM, Envelope
000063B8                            ;
000063B8                            ; CommDataM:
000063B8                            ; $00 - Channel ID ($00-$07)
000063B8                            ; $01 - Envelope
000063B8                            ; -------------------------------------------
000063B8                            
000063B8                            Cmd_24:
000063B8 49F9 00FF 0000             		lea	(PCM),a4
000063BE 1216                       		move.b	(a6),d1
000063C0 0201 000F                  		and.b	#$F,d1
000063C4 0001 00C0                  		or.b	#$C0,d1
000063C8 1941 000F                  		move.b	d1,Ctrl(a4)
000063CC 6100 0000                  		bsr	PCM_Wait
000063D0                            
000063D0 196E 0001 0001             		move.b	1(a6),ENV(a4)
000063D6 6100 0000                  		bsr	PCM_Wait
000063DA                            		
000063DA 1941 000F                  		move.b	d1,Ctrl(a4)
000063DE 6000 0000                  		bra	PCM_Wait
000063E2                            		
000063E2                            ; -------------------------------------------
000063E2                            ; $25 - PCM. On/Off
000063E2                            ;
000063E2                            ; CommDataM:
000063E2                            ; $00 - Channel On/Off (swapped bits: 0 - Off, 1 - On)
000063E2                            ; -------------------------------------------
000063E2                            
000063E2                            Cmd_25:
000063E2 1016                       		move.b	(a6),d0
000063E4 4600                       		not.b	d0
000063E6 13C0 00FF 0011             		move.b	d0,(PCM+OnOff)
000063EC 6000 0000                  		bra	PCM_Wait
000063F0                            
000063F0                            ; -------------------------------------------
000063F0                            ; $26 - FULLY Clear the PCM chip
000063F0                            ; -------------------------------------------
000063F0                            
000063F0                            Cmd_26:
000063F0 13FC 00FF 00FF 0011         		move.b	#$FF,(PCM+OnOff)
000063F8 6100 0000                  		bsr	PCM_Wait
000063FC 13FC 00FF 00FF 0003         		move.b	#$FF,(PCM+PAN)
00006404 6100 0000                  		bsr	PCM_Wait
00006408                            		
00006408 41F9 00FF 0000             		lea	(PCM),a0
0000640E 163C 0080                  		move.b	#$80,d3
00006412 7A0F                       		moveq	#$F,d5
00006414                            @Next:
00006414 1143 000F                  		move.b	d3,Ctrl(a0)
00006418 6100 0000                  		bsr	PCM_Wait
0000641C 45F9 00FF 2001             		lea	($FF2001),a2
00006422 303C 0FFF                  		move.w	#$FFF,d0
00006426                            @loop1:
00006426 14BC 00FF                  		move.b	#$FF,(a2)
0000642A 548A                       		addq.l	#2,a2
0000642C 51C8 FFF8                  		dbf	d0,@loop1
00006430 1143 000F                  		move.b	d3,Ctrl(a0)
00006434 6100 0000                  		bsr	PCM_Wait
00006438 0603 0001                  		add.b	#1,d3
0000643C 51CD FFD6                  		dbf	d5,@Next
00006440 4E75                       		rts
00006442                            		
00006442                            ; -------------------------------------------
00006442                            ; $30 - Rotation init
00006442                            ; -------------------------------------------
00006442                            
00006442                            Cmd_30:
00006442 41FA 0000                  		lea	@fs_stampart(pc),a0
00006446 6100 0000                  		bsr	FindFile
0000644A 41F9 0008 0000             		lea	($80000),a0
00006450 343C 0800                  		move.w	#$800,d2
00006454 6100 0000                  		bsr	ReadSector
00006458                            		
00006458                            ; 		lea	(Map_StampsTest),a0
00006458                            ; 		lea	($80000+$3FE00),a1
00006458                            ; 		moveq	#0,d0
00006458                            ; 		move.w	(a0)+,d0
00006458                            ; @StampMap:
00006458                            ; 		move.w	(a0)+,d1
00006458                            ; 		and	#$1FFF,d1
00006458                            ; 		move.w	d1,(a1)+
00006458                            ; 		dbf	d0,@StampMap
00006458                            		
00006458 33FC 0000 00FF 8058        		move.w	#%000,($FF8058).l		; Stamp data size: 16x16 dot | 1x1 screen | RPT
00006460 33FC FF80 00FF 805A        		move.w	#(($3FE00)>>2),($FF805A).l	; Stamp map base address
00006468 33FC E380 00FF 805E        		move.w	#(($38E00)>>2),($FF805E).l	; Image buffer start address
00006470 33FC 0000 00FF 8060        		move.w	#0,($FF8060).l			; Image buffer offset
00006478 33FC 001B 00FF 805C        		move.w	#(((224)>>3)-1),($FF805C).l	; Image buffer V cell size
00006480                            	
00006480 41F9 0001 0000             		lea	(StampBuffer),a0
00006486 303C 001F                  		move.w	#(numof_stamps)-1,d0
0000648A                            @next_stamp:
0000648A 317C 0080 0000             		move.w	 #$80,word_0(a0)
00006490 317C 0000 0002             		move.w	 #0,word_2(a0)
00006496 317C 0000 0004             		move.w	 #0,word_4(a0)
0000649C 317C 0000 0006             		move.w	 #0,word_6(a0)
000064A2 317C 0000 0008             		move.w	 #0,word_8(a0)
000064A8 317C 0000 000A             		move.w	 #0,word_A(a0)
000064AE                            		
000064AE D0FC 0044                  		adda	#sizeof_stamp,a0
000064B2 51C8 FFD6                  		dbf	d0,@next_stamp	
000064B6 4E75                       		rts
000064B8                            
000064B8 5354 414D 5041 5254 2E42+  @fs_stampart:	dc.b "STAMPART.BIN",0
000064C6 00                         		even
000064C6                            		
000064C6                            ; -------------------------------------------
000064C6                            ; $31 - Modify stamp: XY move / scale
000064C6                            ;
000064C6                            ; CommDataM:
000064C6                            ; $00 - Stamp ID
000064C6                            ; $02 - X Start
000064C6                            ; $04 - Y Start
000064C6                            ; $06 - X scale
000064C6                            ; $08 - Y scale
000064C6                            ; -------------------------------------------
000064C6                            
000064C6                            Cmd_31:
000064C6                            ; 		lea	(StampBuffer),a0
000064C6                            ; 		move.w	(a6),d0
000064C6                            ; 		mulu.w	#sizeof_stamp,d0
000064C6                            ; 		adda	d0,a0
000064C6                            ; 		
000064C6                            ; 		move.w	2(a6),d0
000064C6                            ;  		lsl.w	#3,d0
000064C6                            ; 		neg.w	d0
000064C6                            ; 		move.w	d0,stamp_x(a0)
000064C6                            ; 		move.w	4(a6),d0
000064C6                            ;  		lsl.w	#3,d0
000064C6                            ; 		neg.w	d0
000064C6                            ; 		move.w	d0,stamp_y(a0)
000064C6                            ; 		
000064C6                            ; 		move.w	6(a6),d0
000064C6                            ;  		lsl.w	#4,d0
000064C6                            ; 		add.w	#256*8,d0
000064C6                            ; 		swap	d0
000064C6                            ; 		move.w	8(a6),d0
000064C6                            ;  		lsl.w	#4,d0
000064C6                            ; 		add.w	#256*8,d0
000064C6                            ; 		move.w	d0,stamp_yd(a0)
000064C6                            ; 		swap	d0
000064C6                            ; 		move.w	d0,stamp_xd(a0)
000064C6 4E75                       		rts
000064C8                            		
000064C8                            ; -------------------------------------------
000064C8                            ; $34 - Modify stamp: Rotate
000064C8                            ;
000064C8                            ; CommDataM:
000064C8                            ; $00 - Stamp ID
000064C8                            ; $02 - X Start
000064C8                            ; $04 - Y Start
000064C8                            ; $06 - X scale
000064C8                            ; $08 - Y scale
000064C8                            ; $0A - Rotate
000064C8                            ; -------------------------------------------
000064C8                            
000064C8                            Cmd_34:
000064C8 41F9 0001 0000             		lea	(StampBuffer),a0
000064CE 3016                       		move.w	(a6),d0
000064D0 C0FC 0044                  		mulu.w	#sizeof_stamp,d0
000064D4 D0C0                       		adda	d0,a0
000064D6                            
000064D6 302E 0002                  		move.w	2(a6),d0
000064DA 4440                       		neg.w	d0
000064DC 3140 0002                  		move.w	d0,word_2(a0)
000064E0 302E 0004                  		move.w	4(a6),d0
000064E4 4440                       		neg.w	d0
000064E6 3140 0004                  		move.w	d0,word_4(a0)
000064EA                            		
000064EA 302E 0006                   		move.w	6(a6),d0
000064EE E348                        		lsl.w	#1,d0
000064F0 3140 0006                   		move.w	d0,word_6(a0)
000064F4 302E 0008                   		move.w	8(a6),d0
000064F8 E348                        		lsl.w	#1,d0
000064FA 3140 0008                   		move.w	d0,word_8(a0)
000064FE 302E 000A                     		move.w	$A(a6),d0
00006502 E348                        		lsl.w	#1,d0
00006504 3140 000A                   		move.w	d0,word_A(a0)
00006508 4E75                       		rts
0000650A                            		
0000650A                            ; 		lea	(StampBuffer),a0
0000650A                            ; 		move.w	(a6),d0
0000650A                            ; 		mulu.w	#sizeof_stamp,d0
0000650A                            ; 		adda	d0,a0
0000650A                            ; 		
0000650A                            ; 		move.w	2(a6),d0
0000650A                            ;  		lsl.w	#3,d0
0000650A                            ; 		neg.w	d0
0000650A                            ; 		move.w	d0,stamp_x(a0)
0000650A                            ; 		move.w	4(a6),d0
0000650A                            ;  		lsl.w	#3,d0
0000650A                            ; 		neg.w	d0
0000650A                            ; 		move.w	d0,stamp_y(a0)
0000650A                            ; 		
0000650A                            ; 		move.w	6(a6),d0
0000650A                            ;  		lsl.w	#4,d0
0000650A                            ; 		add.w	#256*8,d0
0000650A                            ; 		swap	d0
0000650A                            ; 		move.w	8(a6),d0
0000650A                            ;  		lsl.w	#4,d0
0000650A                            ; 		add.w	#256*8,d0
0000650A                            ; 		move.w	d0,stamp_yd(a0)
0000650A                            ; 		swap	d0
0000650A                            ; 		move.w	d0,stamp_xd(a0)
0000650A                            ; 		
0000650A                            ; 		move.w	$A(a6),d0
0000650A                            ; 		move.w	d0,stamp_rot(a0)	
0000650A                            ; 		rts
0000650A                            		
0000650A                            ; -------------------------------------------
0000650A                            ; $38 - Rotation run
0000650A                            ; -------------------------------------------
0000650A                            
0000650A                            Cmd_38:
0000650A 33FC 0100 00FF 8062        		move.w	 #256,($FF8062).l		; Image buffer H dot size
00006512 33FC 00E0 00FF 8064        		move.w	 #224,($FF8064).l		; Image buffer V dot size
0000651A 33FC E1C0 00FF 8066        		move.w	 #(($38700)>>2),($FF8066).l	; Image trace vector base address
00006522 08B9 0003 00FF 8003        		bclr	#3,($FF8003).l			;
0000652A 08B9 0004 00FF 8003        		bclr	#4,($FF8003).l			; Stamp: Write mode (00: Normal 01: Underwrite 10: Overwrite)
00006532                            		
00006532 49F9 0001 0000             		lea	(StampBuffer),a4
00006538 43F9 000B 8700             		lea	($80000+$38700),a1
0000653E 6100 0000                   		bsr	@ScrewStamp
00006542                            	
00006542 4E75                        		rts
00006544                            ; 		
00006544                            @ScrewStamp:
00006544                            ; 		move.w	 word_1CA0(a6),d0
00006544                            ; 		lsl.w	  #2,d0
00006544                            ; 		movem.w	word_7D02(pc, d0.w), d2/d6
00006544                            
00006544 323C FF68                  		move.w	#$FF68,d1
00006548 343C FF98                  		move.w	#$FF98,d2
0000654C                            		
0000654C 6100 0000                  		bsr.w	sub_7E94
00006550 6100 0000                  		bsr.w	sub_7D22
00006554                            
00006554 3C3C 00DF                  		move.w	#224-1,d6
00006558                            @loc_7CF2:
00006558 6100 0000                  		bsr.w	calculateGfxDivisor
0000655C 6100 0000                  		bsr.w	generateTraceVector
00006560 5242                       		addq.w	#1,d2
00006562 51CE FFF4                  		dbf	d6,@loc_7CF2
00006566 4E75                       		rts
00006568                            		
00006568                            ; -------------------------------------------
00006568                            
00006568                            ; =============== S U B R O U T I N E =======================================
00006568                            
00006568                            
00006568                            sub_7D22:
00006568 302C 0000                  		move.w	word_0(a4),d0
0000656C D06C 0006                  		add.w	word_6(a4),d0
00006570 C1EC 0012                  		muls.w	word_22(a4),d0
00006574 362C 0004                  		move.w	word_4(a4),d3
00006578 C7EC 0010                  		muls.w	word_20(a4),d3
0000657C D083                       		add.l	d3,d0
0000657E E080                       		asr.l	#8,d0
00006580 3940 0018                  		move.w	d0,word_30(a4)
00006584                            
00006584 302C 0002                  		move.w	word_2(a4),d0
00006588 C1EC 0010                  		muls.w	word_20(a4),d0
0000658C E080                       		asr.l	#8,d0
0000658E 3940 001A                  		move.w	d0,word_32(a4)
00006592                            		
00006592 302C 0002                  		move.w	word_2(a4), d0
00006596 C1EC 0012                  		muls.w	word_22(a4), d0
0000659A E080                       		asr.l	#8,d0
0000659C 3940 001C                  		move.w	d0,word_34(a4)
000065A0                            
000065A0 302C 0000                  		move.w	word_0(a4), d0
000065A4 C1EC 0012                  		muls.w	word_22(a4), d0
000065A8 E080                       		asr.l  #8, d0
000065AA 3940 001E                  		move.w	d0,word_36(a4)
000065AE                            		
000065AE 302C 0018                  		move.w	word_30(a4), d0
000065B2 C1EC 0016                  		muls.w	word_26(a4), d0
000065B6 E080                       		asr.l  #8, d0
000065B8 3940 0020                  		move.w	d0,word_38(a4)
000065BC                            
000065BC 302C 0018                  		move.w	word_30(a4), d0
000065C0 C1EC 0014                  		muls.w	word_24(a4), d0
000065C4 E080                       		asr.l  #8, d0
000065C6 3940 0022                  		move.w	d0,word_3C(a4)
000065CA                            
000065CA 302C 0000                  		move.w	word_0(a4), d0
000065CE D06C 0006                  		add.w	 word_6(a4), d0
000065D2 C1EC 0014                  		muls.w	word_24(a4), d0
000065D6 362C 001A                  		move.w	word_32(a4), d3
000065DA C7EC 0016                  		muls.w	word_26(a4), d3
000065DE 9083                       		sub.l  d3, d0
000065E0 E080                       		asr.l  #8, d0
000065E2 3940 0024                  		move.w	d0,word_40(a4)
000065E6                            
000065E6 302C 0000                  		move.w	word_0(a4), d0
000065EA D06C 0006                  		add.w	 word_6(a4), d0
000065EE C1EC 0016                  		muls.w	word_26(a4), d0
000065F2 362C 001A                  		move.w	word_32(a4), d3
000065F6 C7EC 0014                  		muls.w	word_24(a4), d3
000065FA D083                       		add.l  d3, d0
000065FC E080                       		asr.l  #8, d0
000065FE 3940 0026                  		move.w	d0,word_44(a4)
00006602                            
00006602 302C 001C                  		move.w	word_34(a4), d0
00006606 C1EC 0016                  		muls.w	word_26(a4), d0
0000660A 362C 0004                  		move.w	word_4(a4), d3
0000660E C7EC 0014                  		muls.w	word_24(a4), d3
00006612 D083                       		add.l  d3, d0
00006614 E080                       		asr.l  #8, d0
00006616 C1EC 0000                  		muls.w	word_0(a4), d0
0000661A 2940 0028                  		move.l d0,long_48(a4)
0000661E                            
0000661E 302C 001C                  		move.w	word_34(a4), d0
00006622 C1EC 0014                  		muls.w	word_24(a4), d0
00006626 362C 0004                  		move.w	word_4(a4), d3
0000662A C7EC 0016                  		muls.w	word_26(a4), d3
0000662E 9083                       		sub.l  d3, d0
00006630 E080                       		asr.l  #8, d0
00006632 C1EC 0000                  		muls.w	word_0(a4), d0
00006636 2940 002C                  		move.l d0,long_4C(a4)
0000663A                            
0000663A 302C 0020                  		move.w	word_38(a4), d0
0000663E C1C1                       		muls.w	d1, d0
00006640 2940 0030                  		move.l d0,long_50(a4)
00006644                            
00006644 302C 0022                  		move.w	word_3C(a4), d0
00006648 C1C1                       		muls.w	d1, d0
0000664A 2940 0034                  		move.l d0,long_54(a4)
0000664E                            
0000664E 302C 0020                  		move.w	word_38(a4), d0
00006652 48C0                       		ext.l  d0
00006654 E180                       		asl.l  #8, d0
00006656 2940 003C                  		move.l d0,long_5C(a4)
0000665A                            
0000665A 302C 0022                  		move.w	word_3C(a4), d0
0000665E 4440                       		neg.w	 d0
00006660 48C0                       		ext.l  d0
00006662 E180                       		asl.l  #8, d0
00006664 2940 0040                  		move.l d0,long_60(a4)
00006668                            
00006668 4E75                       		rts
0000666A                            
0000666A                            
0000666A                            ; =============== S U B R O U T I N E =======================================
0000666A                            
0000666A                            
0000666A                            calculateGfxDivisor:
0000666A 302C 0010                  		move.w	word_20(a4),d0
0000666E C1C2                       		muls.w	d2,d0
00006670 E080                       		asr.l	#8,d0
00006672                            
00006672 362C 001E                  		move.w	word_36(a4),d3
00006676 9640                       		sub.w	d0,d3
00006678 6600                       		bne.s	@loc_7E36
0000667A 7601                       		moveq	#1,d3			; Prevent possible divide-by-zero
0000667C                            @loc_7E36:
0000667C 3943 0038                  		move.w	d3,long_5C_div(a4)
00006680 4E75                       		rts
00006682                            
00006682                            
00006682                            ; =============== S U B R O U T I N E =======================================
00006682                            
00006682                            
00006682                            ; Inputs:
00006682                            ;   a1: Address to put trace vector
00006682                            
00006682                            generateTraceVector:
00006682 302C 0024                  		move.w	word_40(a4),d0
00006686 C1C2                       		muls.w	d2,d0
00006688 D0AC 0030                  		add.l	long_50(a4),d0
0000668C D0AC 0028                  		add.l	long_48(a4),d0
00006690 81EC 0038                  		divs.w	long_5C_div(a4),d0
00006694 E740                       		asl.w	#3,d0
00006696 0640 04C0                  		addi.w	#(((256/2)+24)<<3),d0
0000669A 32C0                       		move.w	d0,(a1)+			; Write X start position
0000669C                            
0000669C 302C 0026                  		move.w	word_44(a4),d0
000066A0 C1C2                       		muls.w	d2,d0
000066A2 90AC 0034                  		sub.l	long_54(a4),d0
000066A6 90AC 002C                  		sub.l	long_4C(a4),d0
000066AA 81EC 0038                  		divs.w	long_5C_div(a4),d0
000066AE E740                       		asl.w	#3,d0
000066B0 0640 0380                      		addi.w	#(((256/2)-16)<<3),d0		; TODO: this defines VERTICAL center
000066B4 4A40                       		tst.w	d0
000066B6 6A00                       		bpl.s	@on_x
000066B8 0C40 0100                  		cmp.w	#256,d0
000066BC 6D00                       		blt.s	@on_x
000066BE 303C FFFF                  		move.w	#-1,d0
000066C2                            @on_x:
000066C2 32C0                       		move.w	d0,(a1)+			; Y pos
000066C4                            
000066C4 202C 003C                  		move.l	long_5C(a4),d0
000066C8 81EC 0038                  		divs.w	long_5C_div(a4), d0
000066CC E740                       		asl.w	#3,d0
000066CE 32C0                       		move.w	d0,(a1)+			; Write X delta
000066D0                            
000066D0 202C 0040                  		move.l	long_60(a4),d0
000066D4 81EC 0038                  		divs.w	long_5C_div(a4),d0
000066D8 E740                       		asl.w	#3,d0
000066DA 32C0                       		move.w	d0,(a1)+			; Write Y delta
000066DC 4E75                       		rts
000066DE                            
000066DE                            
000066DE                            ; =============== S U B R O U T I N E =======================================
000066DE                            
000066DE                            
000066DE                            sub_7E94:
000066DE 026C 01FF 0008             		andi.w	#$1FF,word_8(a4)
000066E4 3E2C 0008                  		move.w	word_8(a4),d7
000066E8 3007                       		move.w	d7,d0
000066EA 0240 0080                  		andi.w	#$80,d0
000066EE 0C40 0080                  		cmpi.w	#$80,d0
000066F2 6600                       		bne.s	@loc_7EAC
000066F4 5247                       		addq.w	#1,d7
000066F6                            @loc_7EAC:
000066F6 3A07                       		move.w	d7, d5
000066F8 6100                       		bsr.s	SineWave
000066FA 3947 0010                  		move.w	d7,word_20(a4)
000066FE 3E05                       		move.w	d5,d7
00006700 6100                       		bsr.s	CosSineWave
00006702 3947 0012                  		move.w	d7,word_22(a4)
00006706                            
00006706 026C 01FF 000A             		andi.w	#$1FF,word_A(a4)
0000670C 3E2C 000A                  		move.w	word_A(a4),d7
00006710 3007                       		move.w	d7,d0
00006712 0240 0080                  		andi.w	#$80,d0
00006716 0C40 0080                  		cmpi.w	#$80,d0
0000671A 6600                       		bne.s	@loc_7ED4
0000671C 5247                       		addq.w	#1,d7
0000671E                            @loc_7ED4:
0000671E 3A07                       		move.w	d7,d5
00006720 6100                       		bsr.s	SineWave
00006722 3947 0014                  		move.w	d7,word_24(a4)
00006726 3E05                       		move.w	d5,d7
00006728 6100                       		bsr.s	CosSineWave
0000672A 3947 0016                  		move.w	d7,word_26(a4)
0000672E 4E75                       		rts
00006730                            	
00006730                            ; -------------------------------------------
00006730                            
00006730                            CosSineWave:               ; CODE XREF: sub_7E94+22p sub_7E94+4Ap
00006730 0647 0080                  	addi.w	 #$80, d7
00006734                            
00006734                            SineWave:               ; CODE XREF: sub_7E94+1Ap sub_7E94+42p
00006734 2F06                       	move.l  d6, -(sp)
00006736                            
00006736 0247 01FF                  	andi.w	 #$1FF, d7
0000673A 3C07                       	move.w	 d7, d6
0000673C                            
0000673C 0807 0007                  	btst    #7, d7
00006740 6700                       	beq.s   @loc_7EFA
00006742                            
00006742 4646                       	not.w	  d6
00006744                            
00006744                            @loc_7EFA:
00006744 0246 007F                  	andi.w	 #$7F, d6
00006748 E34E                       	lsl.w	  #1, d6
0000674A 3C3B 6000                  	move.w	 word_7F12(pc, d6.w), d6
0000674E                            
0000674E 0807 0008                  	btst    #8, d7
00006752 6700                       	beq.s   @loc_7F0C
00006754                            
00006754 4446                       	neg.w	  d6
00006756                            
00006756                            @loc_7F0C:
00006756 3E06                       	move.w	 d6, d7
00006758                            
00006758 2C1F                       	move.l  (sp)+, d6
0000675A 4E75                       	rts
0000675C                            	
0000675C                            ; -------------------------------------------
0000675C                            
0000675C                            word_7F12:
0000675C                            		incbin "system/hardware/mcd/s68k/word_7F12.bin"
0000685C                            	
0000685C                            ; 		lea	(StampBuffer),a0
0000685C                            ; 		lea     ($80000+$38700).l,a1
0000685C                            ; 		moveq	#0,d4
0000685C                            ; 		moveq	#0,d5
0000685C                            ; 		moveq	#0,d6
0000685C                            ; 		move.w	stamp_x(a0),d4
0000685C                            ; 		move.w	stamp_y(a0),d5			; Ystart
0000685C                            ; 		swap	d5
0000685C                            ;  		move.w	stamp_yd(a0),d6
0000685C                            ;  		lsl.l	#8,d6
0000685C                            ;  		move.w	stamp_rot(a0),d3
0000685C                            ;  		lsl.l	#3,d3
0000685C                            ; 		move.w	#(224)-1,d7
0000685C                            ; 		move.w	stamp_xd(a0),d2
0000685C                            ; 		swap	d2
0000685C                            ; @TraceLoop:
0000685C                            ; 		swap	d5
0000685C                            ; 		swap	d2
0000685C                            ; 		
0000685C                            ; 		move.w	d4,d0
0000685C                            ; ; 		sub.w	d3,d0
0000685C                            ; 		move.w	d0,(a1)+			; X pos
0000685C                            ; 
0000685C                            ; 
0000685C                            ; 		move.w	d5,d0
0000685C                            ;   		sub.w	d3,d0
0000685C                            ; 		move.w	d0,(a1)+			; Y pos
0000685C                            ; 
0000685C                            ; 		
0000685C                            ; 		move.w	stamp_xd(a0),(a1)+		; X texture
0000685C                            ; 		
0000685C                            ; 		move.w	d3,d0
0000685C                            ;  		add.w	d0,d0
0000685C                            ; 		move.w	d0,(a1)+			; Y texture
0000685C                            ; 		
0000685C                            ; 		swap	d5
0000685C                            ;  		add.l	d6,d5
0000685C                            ; 		dbf     d7,@TraceLoop
0000685C 4E75                       		rts
0000685E                            	
0000685E                            ; -------------------------------------------
0000685E                            ; $40 - BRAM Init
0000685E                            ; -------------------------------------------
0000685E                            
0000685E                            Cmd_40:
0000685E 41F9 0001 0922             		lea	(BRAM_Buffer),a0
00006864 43F9 0001 0F62             		lea	(BRAM_Strings),a1
0000686A 303C 0000 4EB9 0000 5F16   		BIOS_BRMINIT
00006874                            
00006874 41FA 0000                   		lea	@SaveName(pc),a0
00006878 303C 0002 4EB9 0000 5F16    		BIOS_BRMSERCH
00006882 6400                        		bcc.s	@DontInitAgain
00006884                            		
00006884 41FA 0000                  		lea	@SaveName(pc),a0
00006888 43F9 0001 0880             		lea	(Save_Data),a1
0000688E 303C 0004 4EB9 0000 5F16   		BIOS_BRMWRITE
00006898                            		
00006898                            @DontInitAgain:
00006898 4E75                       		rts
0000689A                            			
0000689A 5F53 4156 455F 4E41 4D45+  @SaveName:	dc.b "_SAVE_NAME_",0
000068A6 0001                       		dc.w	$0001
000068A8                            		even
000068A8                            		
000068A8                            ; =====================================================================
000068A8                            ; -------------------------------------------
000068A8                            ; Level 2 IRQ
000068A8                            ; -------------------------------------------
000068A8                            
000068A8                            SP_IRQ:
000068A8 4239 0001 08A0             		clr.b	(VBlankFlag)
000068AE 4E75                       		rts
000068B0                            
000068B0                            ; =====================================================================
000068B0                            ; Subs
000068B0                            ; =====================================================================
000068B0                            
000068B0                            ; -------------------------------------------
000068B0                            ; PCM_Wait
000068B0                            ; -------------------------------------------
000068B0                            
000068B0                            PCM_Wait:
000068B0 48E7 8000                  		movem.l	d0,-(sp)
000068B4 303C 0006                  		move.w	#6,d0
000068B8                            @WaitLoop:
000068B8 51C8 FFFE                  		dbf	d0,@WaitLoop
000068BC 4CDF 0001                  		movem.l	(sp)+,d0
000068C0 4E75                       		rts  
000068C2                            		
000068C2                            ; -------------------------------------------
000068C2                            ; ReadSector
000068C2                            ; 
000068C2                            ; Input:
000068C2                            ; a0 - Destination
000068C2                            ; d0 - Sector start
000068C2                            ; d1 - Number of sectors
000068C2                            ; d2 - Destination increment ($0 or $800)
000068C2                            ; -------------------------------------------
000068C2                            
000068C2                            ReadSector:
000068C2 48E7 1E00                  		movem.l	d3-d6,-(sp)
000068C6 0240 FFFF                  		and.w	#$FFFF,d0
000068CA 0241 FFFF                  		and.w	#$FFFF,d1
000068CE 23C0 0001 08A2             		move.l	d0,(BiosArgs)
000068D4 23C1 0001 08A6             		move.l	d1,(BiosArgs+4)
000068DA 2448                       		movea.l	a0,a2
000068DC 303C 0089 4EB9 0000 5F22   		BIOS_CDCSTOP			; Stop disc
000068E6 41F9 0001 08A2             		lea	(BiosArgs),a0
000068EC 303C 0020 4EB9 0000 5F22   		BIOS_ROMREADN			; Start from this sector
000068F6                            @waitSTAT:
000068F6 303C 008A 4EB9 0000 5F22    		BIOS_CDCSTAT			; Ready?
00006900 65F4                        		bcs.s	@waitSTAT
00006902                            @waitREAD:
00006902 303C 008B 4EB9 0000 5F22   		BIOS_CDCREAD			; Read data
0000690C 64F4                       		bcc.s	@waitREAD		; If not done, branch
0000690E                            @WaitTransfer:
0000690E 204A                       		movea.l	a2,a0			; Set destination address
00006910 43F9 0001 08B2             		lea	(BiosArgs+$10),a1	; Set head buffer
00006916 303C 008C 4EB9 0000 5F22   		BIOS_CDCTRN			; Transfer sector
00006920 64EC                       		bcc.s	@waitTransfer		; If not done, branch
00006922 303C 008D 4EB9 0000 5F22   		BIOS_CDCACK			; Acknowledge transfer
0000692C                            
0000692C D4C2                       		adda	d2,a2
0000692E                            
0000692E 06B9 0000 0001 0001 08A2   		add.l	#1,(BiosArgs)
00006938 04B9 0000 0001 0001 08A6   		sub.l	#1,(BiosArgs+4)
00006942 66B2                       		bne.s	@waitSTAT
00006944 4CDF 0078                  		movem.l	(sp)+,d3-d6
00006948 4E75                       		rts
0000694A                            
0000694A                            ; -------------------------------------------
0000694A                            ;  ISO9660 Driver
0000694A                            ; -------------------------------------------
0000694A                            
0000694A                            Init9660:
0000694A 48E7 FFFE                  		movem.l	d0-d7/a0-a6,-(a7)
0000694E                            						; Load Volume VolumeDescriptor
0000694E                            
0000694E 7010                       		moveq	#$10,d0			; Start Sector
00006950 7220                       		moveq	#$20,d1			; Size in sector
00006952 41F9 0001 0F7A             		lea	(ISO_Files),a0		; Destination
00006958 343C 0800                  		move.w	#$800,d2
0000695C 6100 FF64                  		bsr	ReadSector		; Read Data
00006960                            
00006960                            						; Load Root Directory
00006960 41F9 0001 0F7A             		lea	(ISO_Files),a0		; Get pointer to sector buffer
00006966 43E8 009C                  		lea.l	$9C(a0),a1		; Get root directory record
0000696A                            		
0000696A 1029 0006                  		move.b	6(a1),d0		; Get first part of Sector address
0000696E E188                       		lsl.l	#8,d0			; bitshift
00006970 1029 0007                  		move.b	7(a1),d0		; Get next part of sector address
00006974 E188                       		lsl.l	#8,d0			; bitshift
00006976 1029 0008                  		move.b	8(a1),d0		; get next part of sector address
0000697A E188                       		lsl.l	#8,d0			; bitshift
0000697C 1029 0009                  		move.b	9(a1),d0		; get final part of sector address.
00006980                            						; d0 now contains start sector address
00006980 223C 0000 0020             		move.l	#$20, d1		; Size ($20 Sectors)
00006986 343C 0800                  		move.w	#$800,d2
0000698A 6100 FF36                  		bsr	ReadSector
0000698E                            		
0000698E 4CDF 7FFF                  		movem.l	(a7)+,d0-d7/a0-a6	; Restore all registers		
00006992 4E75                       		rts
00006994                            		
00006994                            ; -------------------------------------------
00006994                            ;  Find File (ISO9660)
00006994                            ;  Input:  a0.l - Pointer to filename
00006994                            ;  Output: d0.l - Start sector
00006994                            ;		 d1.l - Number of sectors
00006994                            ;          d2.l - Filesize
00006994                            ; -------------------------------------------
00006994                            
00006994                            FindFile:
00006994 48E7 0062                  		movem.l	a1/a2/a6,-(a7)
00006998                            
00006998 43F9 0001 0F7A             		lea	(ISO_Files),a1		; Get sector buffer
0000699E                            @ReadFilenameStart:
0000699E 2C48                       		movea.l	a0,a6			; Store filename pointer
000069A0 101E                       		move.b	(a6)+,d0		; Read character from filename
000069A2                            @findFirstChar:
000069A2 2449                       		movea.l	a1,a2			; Store Sector buffer pointer
000069A4 B019                       		cmp.b	(a1)+,d0		; Compare with first letter of filename and increment
000069A6 66FA                       		bne.b	@findFirstChar		; If not matched, branch
000069A8                            @checkChars:
000069A8 101E                       		move.b	(a6)+,d0		; Read next charactor of filename and increment
000069AA 6700                       		beq.s	@getInfo		; If all characters were matched, branch			
000069AC B019                       		cmp.b	(a1)+,d0		; Else, check next character
000069AE 66EE                       		bne.b	@ReadFilenameStart	; If not matched, find next file
000069B0 60F6                       		bra.s	@checkChars		; else, check next character
000069B2                            	
000069B2                            @getInfo:
000069B2 95FC 0000 0021             		sub.l	#$21,a2			; Move to beginning of directory entry
000069B8 102A 0006                  		move.b	6(a2),d0		; Get first part of Sector address
000069BC E188                       		lsl.l	#8,d0			; bitshift
000069BE 102A 0007                  		move.b	7(a2),d0		; Get next part of sector address
000069C2 E188                       		lsl.l	#8,d0			; bitshift
000069C4 102A 0008                  		move.b	8(a2),d0		; get next part of sector address
000069C8 E188                       		lsl.l	#8,d0			; bitshift
000069CA 102A 0009                  		move.b	9(a2),d0		; get final part of sector address.
000069CE                            						; d0 now contains start sector address
000069CE                            
000069CE 122A 000E                  		move.b	$E(a2),d1		; Same as above, but for FileSize
000069D2 E189                       		lsl.l	#8,d1
000069D4 122A 000F                  		move.b	$F(a2),d1
000069D8 E189                       		lsl.l	#8,d1
000069DA 122A 0010                  		move.b	$10(a2),d1
000069DE E189                       		lsl.l	#8,d1
000069E0 122A 0011                  		move.b	$11(a2),d1
000069E4                            		
000069E4 2401                       		move.l	d1,d2
000069E6 E089                       		lsr.l	#8,d1			; Bitshift filesize (to get sector count)
000069E8 E689                       		lsr.l	#3,d1
000069EA                            	
000069EA 4CDF 4600                  		movem.l	(a7)+,a1/a2/a6		; Restore used registers	
000069EE 4E75                       		rts
000069F0                            		
000069F0                            ; ; -------------------------------------------
000069F0                            ; ; CalcSine
000069F0                            ; ;
000069F0                            ; ; Input:
000069F0                            ; ; d0 | WORD
000069F0                            ; ;
000069F0                            ; ; Output:
000069F0                            ; ; d0 | WORD
000069F0                            ; ; d1 | WORD
000069F0                            ; ; -------------------------------------------
000069F0                            ; 
000069F0                            ; CalcSine:
000069F0                            ; 		and.w	#$FF,d0
000069F0                            ; 		add.w	d0,d0
000069F0                            ; 		add.w	#$80,d0
000069F0                            ; 		move.w	Sine_Data(pc,d0.w),d1
000069F0                            ; 		sub.w	#$80,d0
000069F0                            ; 		move.w	Sine_Data(pc,d0.w),d0
000069F0                            ; 		rts	
000069F0                            ; 
000069F0                            ; Sine_Data:
000069F0                            ; 		dc.w	0,	6, $C, $12, $19, $1F, $25, $2B,	$31, $38, $3E
000069F0                            ; 		dc.w	$44, $4A, $50, $56, $5C, $61, $67,	$6D, $73, $78
000069F0                            ; 		dc.w	$7E, $83, $88, $8E, $93, $98, $9D,	$A2, $A7, $AB
000069F0                            ; 		dc.w	$B0, $B5, $B9, $BD, $C1, $C5, $C9,	$CD, $D1, $D4
000069F0                            ; 		dc.w	$D8, $DB, $DE, $E1, $E4, $E7, $EA,	$EC, $EE, $F1
000069F0                            ; 		dc.w	$F3, $F4, $F6, $F8, $F9, $FB, $FC,	$FD, $FE, $FE
000069F0                            ; 		dc.w	$FF, $FF, $FF, $100, $FF, $FF, $FF, $FE, $FE, $FD
000069F0                            ; 		dc.w	$FC, $FB, $F9, $F8, $F6, $F4, $F3,	$F1, $EE, $EC
000069F0                            ; 		dc.w	$EA, $E7, $E4, $E1, $DE, $DB, $D8,	$D4, $D1, $CD
000069F0                            ; 		dc.w	$C9, $C5, $C1, $BD, $B9, $B5, $B0,	$AB, $A7, $A2
000069F0                            ; 		dc.w	$9D, $98, $93, $8E, $88, $83, $7E,	$78, $73, $6D
000069F0                            ; 		dc.w	$67, $61, $5C, $56, $50, $4A, $44,	$3E, $38, $31
000069F0                            ; 		dc.w	$2B, $25, $1F, $19, $12, $C, 6, 0,	-6, -$C, -$12
000069F0                            ; 		dc.w	-$19, -$1F, -$25, -$2B, -$31, -$38, -$3E, -$44, -$4A
000069F0                            ; 		dc.w	-$50, -$56, -$5C, -$61, -$67, -$6D, -$75, -$78, -$7E
000069F0                            ; 		dc.w	-$83, -$88, -$8E, -$93, -$98, -$9D, -$A2, -$A7, -$AB
000069F0                            ; 		dc.w	-$B0, -$B5, -$B9, -$BD, -$C1, -$C5, -$C9, -$CD, -$D1
000069F0                            ; 		dc.w	-$D4, -$D8, -$DB, -$DE, -$E1, -$E4, -$E7, -$EA, -$EC
000069F0                            ; 		dc.w	-$EE, -$F1, -$F3, -$F4, -$F6, -$F8, -$F9, -$FB, -$FC
000069F0                            ; 		dc.w	-$FD, -$FE, -$FE, -$FF, -$FF, -$FF, -$100,	-$FF, -$FF
000069F0                            ; 		dc.w	-$FF, -$FE, -$FE, -$FD, -$FC, -$FB, -$F9, -$F8, -$F6
000069F0                            ; 		dc.w	-$F4, -$F3, -$F1, -$EE, -$EC, -$EA, -$E7, -$E4, -$E1
000069F0                            ; 		dc.w	-$DE, -$DB, -$D8, -$D4, -$D1, -$CD, -$C9, -$C5, -$C1
000069F0                            ; 		dc.w	-$BD, -$B9, -$B5, -$B0, -$AB, -$A7, -$A2, -$9D, -$98
000069F0                            ; 		dc.w	-$93, -$8E, -$88, -$83, -$7E, -$78, -$75, -$6D, -$67
000069F0                            ; 		dc.w	-$61, -$5C, -$56, -$50, -$4A, -$44, -$3E, -$38, -$31
000069F0                            ; 		dc.w	-$2B, -$25, -$1F, -$19, -$12, -$C,	-6, 0, 6, $C, $12
000069F0                            ; 		dc.w	$19, $1F, $25, $2B, $31, $38, $3E,	$44, $4A, $50
000069F0                            ; 		dc.w	$56, $5C, $61, $67, $6D, $73, $78,	$7E, $83, $88
000069F0                            ; 		dc.w	$8E, $93, $98, $9D, $A2, $A7, $AB,	$B0, $B5, $B9
000069F0                            ; 		dc.w	$BD, $C1, $C5, $C9, $CD, $D1, $D4,	$D8, $DB, $DE
000069F0                            ; 		dc.w	$E1, $E4, $E7, $EA, $EC, $EE, $F1,	$F3, $F4, $F6
000069F0                            ; 		dc.w	$F8, $F9, $FB, $FC, $FD, $FE, $FE,	$FF, $FF, $FF
000069F0                            ; 		even
000069F0                            		
000069F0                            ; =====================================================================
000069F0                            
000069F0                            ; Map_StampsTest:	dc.w	((@End-Map_StampsTest)/2)
000069F0                            ; 		incbin	"engine/misc/stamptest/map.bin"
000069F0                            ; @End:
000069F0                            ; 		even
000069F0                            		
000069F0                            		objend
000069F0                            		objend
000049F0                            		align $800
00005000                            SP_End:
00005000                            		even
00005000                             		
00005000                            ; ========================================================
00005000                            ; ========================================================
00005000                            		
00005000                            ; ====================================================================
00005000                            ; -------------------------------------------------
00005000                            ; Filesystem
00005000                            ; -------------------------------------------------
00005000                            		
00005000                            		cnop 0,$8000
00008000                            		incbin	"system/hardware/mcd/fs.bin",$8000
000D7800                            		
000D7800                            ; ====================================================================
000D7800                            ; -------------------------------------------------
000D7800                            ; END
000D7800                            ; -------------------------------------------------
000D7800                            
000D7800                            ROM_END:
000D7800                            		inform 0,"ROM size: %h",ROM_END
000D7800                            		cnop 0,$80000
