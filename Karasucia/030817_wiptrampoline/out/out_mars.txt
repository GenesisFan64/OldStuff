00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; GAME
00000000                            ; -------------------------------------------------
00000000                            
00000000                            		include	"system/macros.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Macros
00000000                            ; -------------------------------------------------
00000000                            
00000000                            align		macro
00000000                            		cnop 0,\1
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Pick ROM section
00000000                            ; --------------------------------------------
00000000                            
00000000                            romSection	macro where
00000000                            CODE		=	*+$880000
00000000                            DATA		=	*+marsbank
00000000                            RAM		=	$FF0000
00000000                            WRAM		=	$200000
00000000                            ; ---------------------------
00000000                            		if MCD|MARS == True
00000000                            		obj \1
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; ---------------------------
00000000                            
00000000                            romSectionEnd	macro
00000000                            		if MCD
00000000                            		objend
00000000                            		elseif MARS
00000000                            		objend
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Video
00000000                            ; --------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; dmaTask
00000000                            ; --------------------------------------------
00000000                            
00000000                            dmaTask		macro
00000000                            FILL		=	$C0000000+1
00000000                            COPY		=	$C0000000+2
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA FILL
00000000                            ; (FILL,byte,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		if \1=FILL
00000000                            		
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                            		move.w	#$9780,(vdp_ctrl)
00000000                            		move.l	#\3|$80,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait1\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait1\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA COPY
00000000                            ; (COPY,from,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		elseif \1=COPY
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\2>>1)&$FF00)>>8)|(($9500+((\2>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$97C0,(vdp_ctrl)
00000000                            		move.l	#\3|$C0,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait2\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait2\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA ROM/RAM to VDP
00000000                            ; (from,to,size)
00000000                            ; ---------------------------
00000000                            		else
00000000                            		;\1 from | \2 to | \3 size
00000000                             		move.l	#$9400+(((\3)&$FF00)>>9)|(($9300+(((\3)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\1>>1)&$FF00)>>8)|(($9500+((\1>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(vdp_ctrl)
00000000                            		
00000000                            ; 		move.l	#\2|$80,(vdp_ctrl)		;new attempt
00000000                            		move.w	#((\2&$FFFF))|$80,-(sp)
00000000                            		move.w	#(((\2)>>16)&$FFFF),-(sp)
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#$100,($A11100)
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100)
00000000                              		bne.s	@WaitZ80_\@
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#0,($A11100).l
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            
00000000                            fade		macro
00000000                            in = 1
00000000                            out = 0
00000000                            		if \1=in
00000000                             		move.l	#$0101003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		elseif \1=out
00000000                            		
00000000                            		move.l	#$0201003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            ; System
00000000                            ; --------------------------------------------
00000000                            
00000000                            z80		macro
00000000                            ON = 1
00000000                            OFF = 0
00000000                            		if \1=OFF
00000000                            		
00000000                             		move.w	#$100,($A11100).l
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100).l
00000000                              		bne.s	@WaitZ80_\@
00000000                            		elseif \1=ON
00000000                            		
00000000                              		move.w	#0,($A11100).l
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            		
00000000                            		include	"system/ram.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; RAM
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; ---------------------------
00000000                            ; Setup
00000000                            ; ---------------------------
00000000                            
00000000                                            rsset	$FFFFBC00
00000000 =FFFFBC00                  RAM_ModeBuffer	rs.b	$2000
00000000 =FFFFDC00                  RAM_Engine      rs.b	$200
00000000 =FFFFDE00                  RAM_System      rs.b	$80
00000000 =FFFFDE80                  RAM_Input	rs.b	$80
00000000 =FFFFDF00                  RAM_Video       rs.b	$1000
00000000 =FFFFEF00                  RAM_Audio       rs.b	$400
00000000 =FFFFF300                  endof_ram	rs.l	0
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            		include	"system/hardware/map.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Variables
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; I/O
00000000                            ; --------------------------------------------
00000000                            
00000000 =00A10001                  port_ver	equ	$A10001
00000000 =00A14000                  port_tmss	equ	$A14000
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; VDP
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00000                  vdp_data	equ	$C00000
00000000 =00C00004                  vdp_ctrl	equ	$C00004
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MD Audio
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00011                  sound_psg	equ	$C00011
00000000 =00A04000                  sound_ym_1	equ	$A04000
00000000 =00A04001                  sound_ym_2	equ	$A04001
00000000 =00A04002                  sound_ym_3	equ	$A04002
00000000 =00A04003                  sound_ym_4	equ	$A04003
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MARS only
00000000                            ; --------------------------------------------
00000000                            
00000000 =00840000                  framebuffer	equ	$840000
00000000 =00860000                  overwrite	equ	$860000
00000000 =00880000                  marsipl		equ	$880000
00000000 =00900000                  marsbank	equ	$900000
00000000 =00A130EC                  mars_ID		equ	$a130ec		; MARS ID "MARS"
00000000                            
00000000 =00A15100                  marsreg		equ	$a15100
00000000 =00000000                  access		equ	$00		; byte		; MARS VDP access control
00000000 =00000001                  adapter		equ	$01		; byte		; MARS adapter control
00000000 =00000003                  intctl		equ	$03		; byte		; SH2 interrupt control
00000000 =00000005                  bankctl		equ	$05		; byte		; BANK conterol
00000000 =00000007                  dreqctl		equ	$07		; byte		; DREQ control
00000000 =00000008                  dreqsource	equ	$08		; long		; 68 to SH DREQ source address
00000000 =0000000C                  dreqdest	equ	$0c		; long		; 68 to SH DREQ destination address
00000000 =00000010                  dreqlength	equ	$10		; word		; 68 to SH DREQ length
00000000 =00000012                  dreqfifo	equ	$12		; word		; 68 to SH DREQ FIFO
00000000 =0000001B                  segatv		equ	$1b		; byte		; SEGA TV Reg.
00000000 =00000020                  comm0		equ	$20		; 		; Communcation Reg.
00000000 =00000022                  comm2		equ	$22		; 		; Communcation Reg.
00000000 =00000024                  comm4		equ	$24		; 		; Communcation Reg.
00000000 =00000026                  comm6		equ	$26		; 		; Communcation Reg.
00000000 =00000028                  comm8		equ	$28		; 		; Communcation Reg.
00000000 =00000029                  comm9		equ	$29		; 		; Communcation Reg.
00000000 =0000002A                  comm10		equ	$2a		; 		; Communcation Reg.
00000000 =0000002C                  comm12		equ	$2c		; 		; Communcation Reg.
00000000 =0000002E                  comm14		equ	$2e		; 		; Communcation Reg.
00000000                            
00000000 =00000080                  tvmode		equ	$80		; byte		; NTSC/PAL
00000000 =00000081                  bitmapmode	equ	$81		; byte		; BitMap Mode Reg.
00000000 =00000083                  shift		equ	$83		; byte		; Packed Pixel Dot Shift
00000000 =00000085                  filllength	equ	$85		; byte		; DRAM Fill Length
00000000 =00000086                  fillstart	equ	$86		; word		; DRAM Fill Start Address
00000000 =00000088                  filldata	equ	$88		; word		; DRAM Fill Data
00000000 =0000008A                  vdpsts		equ	$8a		; byte		; VDP status
00000000 =0000008B                  framectl	equ	$8b		; byte		; Frame Buffer Control
00000000                            
00000000 =00A15200                  palette		equ	$a15200		; 256 words	; Palette Data
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; OTHER
00000000                            ; --------------------------------------------
00000000                            
00000000                            		include	"system/hardware/mars/map_shared.asm"
00000000                            ; ==================================================================
00000000                            ; ---------------------------------------------------
00000000                            ; SH2 variables
00000000                            ; 
00000000                            ; For both SH2 and 68k
00000000                            ; ---------------------------------------------------
00000000                            
00000000 =00008000                  sizeof_code		equ	$8000
00000000                            
00000000 =06000000                  MasterEntry		equ	$06000000
00000000 =06008000                  SlaveEntry		equ	$06000000+sizeof_code
00000000 =06010000                  Sh2_CodeEnd		equ	$06000000+(sizeof_code*2)
00000000                            
00000000                            ; ---------------------------------------------------
00000000                            ; Variables
00000000                            ; ---------------------------------------------------
00000000                            
00000000                            ; 			rsreset
00000000                            ; m_loadpic		rs.b 1
00000000                            ; m_loadpic		rs.b 1
00000000                            		
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Header / Init
00000000                            ; -------------------------------------------------
00000000                            
00000000                            		include	"system/hardware/mars/68k/head.asm"	
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Header
00000000                            ; 
00000000                            ; MARS
00000000                            ; -------------------------------------------------
00000000                            
00000000 0000 0000                  		dc.l	0
00000004 0000 03F0 0000 03F0 0000+  		dcb.l	$B,$3F0
00000030 0000 0000 0000 0000 0000+  		align	$70
00000070 0000 0000                  		dc.l	RAM_HintJumpTo
00000074 0000 0000                  		align	$78
00000078 0000 0000                  		dc.l	RAM_VintJumpTo
0000007C                            
0000007C 0000 0000 0000 0000 0000+  		align $100
00000100 5345 4741 2033 3258 2020+  		dc.b "SEGA 32X        "
00000110 0000 0000 0000 0000 0000+  		align $120
00000120 4C61 7320 6176 656E 7475+  		dc.b "Las aventuras de Dominoe"
00000138 0000 0000 0000 0000 0000+  		align $150
00000150 446F 6D69 6E6F 6520 4164+  		dc.b "Dominoe Adventures"
00000162                            		
00000162 0000 0000 0000 0000 0000+  		align $1A0
000001A0 0000 0000                  		dc.l 0
000001A4 0000 0000                  		dc.l ROM_END
000001A8 00FF 0000                  		dc.l $FF0000
000001AC 00FF FFFF                  		dc.l $FFFFFF
000001B0 5241 E820                  		dc.b "RA",$E8,$20
000001B4 0020 0000                  		dc.l $200000
000001B8 0020 3FFF                  		dc.l $203FFF
000001BC                            
000001BC 0000 0000 0000 0000 0000+  		align $1F0
000001F0 5520 2020 2020 2020 2020+  		dc.b "U               "
00000200                            
00000200                            ; -------------------------------------------------
00000200                            
00000200 4EF9 0000 0000             		jmp	MD_Entry
00000206 0000 0000 0000 0000 0000+  		align	$2A2
000002A2 4EF9 0000 0000             		jmp	RAM_HintJumpTo
000002A8 0000 0000 0000             		align	$2AE
000002AE 4EF9 0000 0000             		jmp	RAM_VintJumpTo
000002B4                            		
000002B4                            ; -------------------------------------------------
000002B4                            ; MARS User Header
000002B4                            ; -------------------------------------------------
000002B4                            
000002B4                            		align	$3C0
000003C0 2A33 3278 2043 6865 636B+  		dc.b "*32x Check Mode*"				; module name
000003D0 0000 0000                  		dc.l 0						; version
000003D4 0000 0000                  		dc.l SH2_Start					; SH2 Program start address
000003D8 0000 0000                  		dc.l 0						; SH2 Program write address
000003DC 0000 0000                  		dc.l SH2_End-SH2_Start				; SH2 Program length
000003E0 0600 0120                  		dc.l MasterEntry+$120				; Master SH2 initial PC
000003E4 0600 8120                  		dc.l SlaveEntry+$120				; Slave SH2 initial PC
000003E8 0600 0000                  		dc.l MasterEntry				; Master SH2 initial VBR address
000003EC 0600 8000                  		dc.l SlaveEntry					; Slave SH2 intitial VBR address
000003F0                            		incbin	"system/hardware/mars/68k/security.bin"
00000800                            		
00000800                            ; -------------------------------------------------
00000800                            
00000800 6500 0000                   		bcs	MARS_Error
00000804 46FC 2700                  		move	#$2700,sr
00000808 4BF9 00A1 5100             		lea	(marsreg),a5
0000080E                            		
0000080E 0CAD 4D5F 4F4B 0020        @M_OK:		cmp.l	#"M_OK",$20(a5)
00000816 6600 FFF6                  		bne	@M_OK
0000081A 0CAD 535F 4F4B 0024        @S_OK:		cmp.l	#"S_OK",$24(a5)
00000822 6600 FFF6                  		bne	@S_OK
00000826                            
00000826 7000                       		moveq	#0,d0
00000828 2B40 0020                  		move.l	d0,$20(a5)
0000082C 2B40 0024                  		move.l	d0,$24(a5)
00000830                            		
00000830                            ; ===========================================================================
00000830                            ; -----------------------------------------------------------------
00000830                            ; Startup code
00000830                            ; -----------------------------------------------------------------
00000830                            
00000830                            MD_Entry:	
00000830 4EF9 0000 0000              		jmp	MD_Main
00000836                             		
00000836                            ; ===========================================================================
00000836                            ; -------------------------------------------------
00000836                            ; 32X Not connected
00000836                            ; -------------------------------------------------
00000836                            
00000836                            MARS_Error:
00000836 46FC 2700                  		move.w	#$2700,sr
0000083A 4A79 00C0 0004             		tst.w	(vdp_ctrl)
00000840                            		
00000840 4EB9 0000 0000             		jsr	(Video_Init&$FFFF)
00000846 4EB9 0000 0000             		jsr	(Video_Update&$FFFF)
0000084C                            		
0000084C 23FC C002 0000 00C0 0004   		move.l	#$C0020000,(vdp_ctrl)
00000856 23FC 0888 0EEE 00C0 0000   		move.l	#$08880EEE,(vdp_data)
00000860                            
00000860 23FC 4000 0000 00C0 0004   		move.l	#$40000000,(vdp_ctrl)
0000086A 41F9 0000 0000             		lea	(Art_DebugFont&$FFFF),a0
00000870 303C 0000                  		move.w	#((Art_DebugFont_e-Art_DebugFont)/4)-1,d0
00000874                            @dbg_loop:
00000874 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0000087A 51C8 FFF8                  		dbf	d0,@dbg_loop
0000087E                            		
0000087E 41FA 0000                  		lea	@asc_oops(pc),a0
00000882 7000                       		moveq	#0,d0
00000884 223C 0003 000C             		move.l	#$0003000C,d1
0000088A 7400                       		moveq	#0,d2
0000088C 4EB9 0000 0000             		jsr	(Video_PrintText&$FFFF)
00000892                            @loop:		
00000892 4E71                       		nop
00000894 4E71                       		nop
00000896 6000 FFFA                  		bra	@loop
0000089A                            		
0000089A 5468 6973 2067 616D 6520+  @asc_oops:	dc.b "This game requires the 32X addon.",0
000008BC                            		even
000008BC                            		
000008BC                            ; ====================================================================
000008BC                            ; -------------------------------------------------
000008BC                            ; MARS SH2 CODE
000008BC                            ; -------------------------------------------------
000008BC                            
000008BC                            SH2_Start:	incbin	"system/hardware/mars/sh2/code.bin"
00008B28                            SH2_End:
00008B28                            		align 4
00008B28                            		
00008B28                            		obj *+marsipl
00008B28                            		obj *+marsipl
00888B28                            		
00888B28                            ; ====================================================================
00888B28                            ; -------------------------------------------------
00888B28                            ; Subs
00888B28                            ; -------------------------------------------------
00888B28                            
00888B28                            		include	"system/video.asm"
00888B28                            ; ====================================================================
00888B28                            ; VDP
00888B28                            ; ====================================================================
00888B28                            
00888B28                            ; -------------------------------------------------
00888B28                            ; Variables
00888B28                            ; -------------------------------------------------
00888B28                            
00888B28                            		rsreset
00888B28 =00000000                  palFd_mode	rs.b 1
00888B28 =00000001                  palFd_delay	rs.b 1
00888B28 =00000002                  palFd_from	rs.b 1			;TODO: poner funcionar esto
00888B28 =00000003                  palFd_num	rs.b 1
00888B28 =00000004                  palFd_timer	rs.w 1
00888B28                            
00888B28                            		rsreset
00888B28 =00000000                  sprite_free	rs.l 1
00888B28 =00000004                  sprite_link	rs.w 1
00888B28 =00000006                  sprite_used	rs.w 1
00888B28                            
00888B28                            ; ====================================================================
00888B28                            ; -------------------------------------------------
00888B28                            ; RAM
00888B28                            ; -------------------------------------------------
00888B28                            
00888B28                            		rsset RAM_Video
00888B28 =FFFFDF00                  RAM_ScrlHor	rs.l 240
00888B28 =FFFFE2C0                  RAM_ScrlVer	rs.l $20			; Normal
00888B28 =FFFFE340                  RAM_Sprites	rs.l (80*2)			; Normal
00888B28 =FFFFE5C0                  RAM_SprControl	rs.l 2				; Normal
00888B28 =FFFFE5C8                  RAM_HSprites	rs.l (80*2)			; For HBlank
00888B28 =FFFFE848                  RAM_HScrlVer	rs.l $20			; For HBlank
00888B28 =FFFFE8C8                  RAM_HSprLast	rs.l 2				; For HBlank
00888B28 =FFFFE8D0                  RAM_Palette	rs.w 64				; Normal
00888B28 =FFFFE950                  RAM_HPalette	rs.w 64				; For HBlank
00888B28 =FFFFE9D0                  RAM_PalFade	rs.w 64				; Normal
00888B28 =FFFFEA50                  RAM_HPalFade	rs.w 64				; For HBlank
00888B28 =FFFFEAD0                  RAM_PalFadeSys	rs.l 8*2
00888B28 =FFFFEB10                  RAM_DMA_Buffer	rs.b $200
00888B28 =FFFFED10                  RAM_VidRegs	rs.b 16				; Unused regs included (always zero) | WINDOW and DMA regs ignored, use them separately
00888B28                            
00888B28 =FFFFED20                  sizeof_vid	rs.l 0
00888B28                            ;       		inform 0,"video ram: %h",(sizeof_vid-RAM_Video)
00888B28                            
00888B28                            ; ====================================================================
00888B28                            ; -------------------------------------------------
00888B28                            ; Subs
00888B28                            ; -------------------------------------------------
00888B28                            
00888B28                            ; -------------------------------------------------
00888B28                            ; Video control
00888B28                            ; -------------------------------------------------
00888B28                            
00888B28                            Video_init:
00888B28 41FA 0000                  		lea	reg_data(pc),a0
00888B2C 43F9 FFFF ED10             		lea	(RAM_VidRegs),a1
00888B32 303C 8000                  		move.w	#$8000,d0
00888B36 7210                       		moveq	#17-1,d1
00888B38                            @reg_list:
00888B38 1018                       		move.b	(a0)+,d0
00888B3A 12C0                       		move.b	d0,(a1)+
00888B3C 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
00888B42 0640 0100                  		add.w	#$100,d0
00888B46 51C9 FFF0                  		dbf	d1,@reg_list
00888B4A 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)	;WINDOW LEFT/TOP clear
00888B54 23FC 9300 9400 00C0 0004   		move.l	#$93009400,(vdp_ctrl)	;DMA len low/high clear
00888B5E 23FC 9500 9600 00C0 0004   		move.l	#$95009600,(vdp_ctrl)	;DMA addr mid/low clear
00888B68 33FC 9700 00C0 0004        		move.w	#$9700,(vdp_ctrl)	;DMA addr high clear
00888B70                              	
00888B70                            ; --------------------------------------------
00888B70                            ; Video_ClearAll
00888B70                            ; --------------------------------------------
00888B70                            
00888B70                            Video_ClearAll:
00888B70 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)
00888B7A                            		
00888B7A 6100                       		bsr.s	Video_ClrAllLyrs
00888B7C 6100                       		bsr.s	Video_ClearScroll
00888B7E 6100 0000                  		bsr	Sprites_Clear
00888B82 6000 0000                  		bra	Sprites_Reset
00888B86                            		
00888B86                            Video_ClearSprites:
00888B86 6100 0000                  		bsr	Sprites_Clear
00888B8A 6000 0000                  		bra	Sprites_Reset
00888B8E                            		
00888B8E                            ; --------------------------------------------
00888B8E                            ; Video_ClrAllLyrs
00888B8E                            ; --------------------------------------------
00888B8E                            
00888B8E                            Video_ClrAllLyrs:
00888B8E 203C 4000 0003             		move.l	#$40000003,d0
00888B94 6100                       		bsr.s	Video_ClrLyr
00888B96 203C 5000 0003             		move.l	#$50000003,d0
00888B9C 6100                       		bsr.s	Video_ClrLyr
00888B9E 203C 6000 0003             		move.l	#$60000003,d0
00888BA4                            ; 		bsr.s	Video_ClrLyr
00888BA4                            ; 		rts
00888BA4                            		
00888BA4                            ; --------------------------------------------
00888BA4                            ; Video_ClrLyr
00888BA4                            ; 
00888BA4                            ; d0 | LONG - VDP VRAM Command for the layer
00888BA4                            ; --------------------------------------------
00888BA4                            
00888BA4                            Video_ClrLyr:
00888BA4 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
00888BAA 303C 07FF                  		move.w	#$7FF,d0
00888BAE                            @loop:
00888BAE 33FC 0000 00C0 0000        		move.w	#0,(vdp_data)
00888BB6 51C8 FFF6                  		dbf	d0,@loop
00888BBA 4E75                       		rts
00888BBC                            	
00888BBC                            ; --------------------------------------------
00888BBC                            ; Video_ClrHScrl
00888BBC                            ; --------------------------------------------
00888BBC                            
00888BBC                            Video_ClrHScrl:
00888BBC 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
00888BC2 303C 00DF                  		move.w	#224-1,d0
00888BC6 6000                       		bra.s	VidClrScrl_loop
00888BC8                            
00888BC8                            ; --------------------------------------------
00888BC8                            ; Video_ClearScroll
00888BC8                            ; --------------------------------------------
00888BC8                            
00888BC8                            Video_ClearScroll:
00888BC8 61F2                       		bsr.s	Video_ClrHScrl
00888BCA 41F9 FFFF E2C0             		lea	(RAM_ScrlVer),a0
00888BD0 6100                       		bsr.s	Video_ClrVScrl
00888BD2 41F9 FFFF E848             		lea	(RAM_HScrlVer),a0
00888BD8                            ; 		bsr.s	Video_ClrVScrl
00888BD8                            		
00888BD8                            ; --------------------------------------------
00888BD8                            ; Video_ClrVScrl
00888BD8                            ; 
00888BD8                            ; a0 - Vertical scroll data
00888BD8                            ; --------------------------------------------
00888BD8                            
00888BD8                            Video_ClrVScrl:
00888BD8 303C 001F                  		move.w	#$20-1,d0
00888BDC                            VidClrScrl_loop:
00888BDC 4298                       		clr.l	(a0)+
00888BDE 51C8 FFFC                  		dbf	d0,VidClrScrl_loop
00888BE2 4E75                       		rts
00888BE4                            		
00888BE4                            ; ------------------------------------
00888BE4                            
00888BE4                            reg_data:
00888BE4 04                         		dc.b %00000100			; $80: [4] HInt interrupt OFF | [2] ALWAYS ON | [1] HV Counter OFF
00888BE5 74                         		dc.b %01110100			; $81: [6] Display ON, [5] Vint interrupt ON, [4] DMA OFF, [3] V28 (V30 PAL ONLY) | [2] ALWAYS ON
00888BE6 30                         		dc.b ($C000>>10)&%00111000	; $82: Plane A pattern table
00888BE7 34                         		dc.b ($D000>>10)&%00111110	; $83:  WINDOW pattern table (%00111110 H32, %00111100 H40)
00888BE8 07                         		dc.b ($E000>>13)&%00000111	; $84: Plane B pattern table
00888BE9 7C                         		dc.b ($F800>>09)&%01111111	; $85:  Sprite attribute table (%01111111 H32, %01111110 H40)
00888BEA 00                         		dc.b 0				; $86: NOTHING
00888BEB 00                         		dc.b 0				; $87: BG Color
00888BEC 00                         		dc.b 0				; $88: NOTHING
00888BED 00                         		dc.b 0				; $89: NOTHING
00888BEE 00                         		dc.b 0				; $8A: HInt counter
00888BEF 03                         		dc.b %00000011			; $8B: [3] External interrupt OFF | [2] Vscrl: full | [1|0] Hscrl: full
00888BF0 81                         		dc.b %10000001			; $8C: [7+0] H40 | [3] Prio/Shadow | [2|1] Interlace mode: None
00888BF1 3F                         		dc.b ($FC00>>10)&%00111111	; $8D: Hscroll attribute table
00888BF2 00                         		dc.b 0				; $8E: NOTHING
00888BF3 02                         		dc.b 2				; $8F: VDP Auto increment
00888BF4 01                         		dc.b %00000001			; $90: Plane size [5|4] Y size | [1|0] X size
00888BF6 00                         		even
00888BF6                            
00888BF6                            ; -------------------------------------------------
00888BF6                            ; Subs
00888BF6                            ; -------------------------------------------------
00888BF6                            
00888BF6                            Video_Update:
00888BF6 41F9 FFFF ED10             		lea	(RAM_VidRegs),a0
00888BFC 303C 8000                  		move.w	#$8000,d0
00888C00 7210                       		moveq	#17-1,d1
00888C02                            @reg_list:
00888C02 1018                       		move.b	(a0)+,d0
00888C04 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
00888C0A 0640 0100                  		add.w	#$100,d0
00888C0E 51C9 FFF2                  		dbf	d1,@reg_list
00888C12 4E75                       		rts
00888C14                            		
00888C14                            ; --------------------------------------------
00888C14                            ; VDP_SendData_W, VDP_SendData_L
00888C14                            ;
00888C14                            ; Input:
00888C14                            ; a0 - Data address
00888C14                            ;
00888C14                            ; d0 | VRAM Address
00888C14                            ; d1 | Data size
00888C14                            ; --------------------------------------------
00888C14                            
00888C14                            VDP_SendData_W:
00888C14 EB48                       		lsl.w	#5,d0
00888C16 6100 0000                  		bsr	VDP_VramToCmd
00888C1A 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
00888C20                            @Loop:
00888C20 33D8 00C0 0000             		move.w	(a0)+,(vdp_data).l
00888C26 51C9 FFF8                  		dbf	d1,@Loop
00888C2A 4E75                       		rts
00888C2C                            
00888C2C                            VDP_SendData_L:
00888C2C EB48                       		lsl.w	#5,d0
00888C2E 6100 0000                  		bsr	VDP_VramToCmd
00888C32 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
00888C38                            @Loop:
00888C38 23D8 00C0 0000             		move.l	(a0)+,(vdp_data).l
00888C3E 51C9 FFF8                  		dbf	d1,@Loop
00888C42 4E75                       		rts
00888C44                            		
00888C44                            ; -----------------------
00888C44                            ; Uses: d4 (LONG)
00888C44                            ;       d5 (WORD)
00888C44                            ; -----------------------
00888C44                            
00888C44                            vdpshv_findvdppos:
00888C44                            		;Check plane to use
00888C44 4845                       		swap	d5
00888C46 3A00                       		move.w	d0,d5
00888C48 7000                       		moveq	#0,d0
00888C4A 1039 FFFF ED12             		move.b	(RAM_VidRegs+2),d0
00888C50 0805 0001                  		btst	#1,d5				;%10? (WD)
00888C54 6700                       		beq.s	@FG
00888C56 1039 FFFF ED13             		move.b	(RAM_VidRegs+3),d0
00888C5C                            @FG:
00888C5C E148                       		lsl.w	#8,d0
00888C5E E548                       		lsl.w	#2,d0
00888C60 0805 0000                  		btst	#0,d5				;%01? (BG)
00888C64 6700                       		beq.s	@FGWD
00888C66 7000                       		moveq	#0,d0
00888C68 1039 FFFF ED14             		move.b	(RAM_VidRegs+4),d0
00888C6E E148                       		lsl.w	#8,d0
00888C70 EB48                       		lsl.w	#5,d0
00888C72                            @FGWD:
00888C72                            
00888C72                            		;Start Y
00888C72 7800                       		moveq	#0,d4
00888C74 3801                          		move.w	d1,d4
00888C76 ED8C                         		lsl.l	#6,d4
00888C78 0805 0001                   		btst	#1,d5
00888C7C 6700                        		beq.s	@def_fgbg
00888C7E                             		
00888C7E                             		;TODO: WD resolution check
00888C7E                            ;    		move.b	(RAM_VidRegs+vdpReg_HMode),d5
00888C7E                            ;    		and.w	#%10000001,d5
00888C7E                            ;    		bne.s	@Not128
00888C7E E38C                           		lsl.l	#1,d4
00888C80 6000                       		bra.s	@Not128
00888C82                            @def_fgbg:
00888C82 0839 0000 FFFF ED20         		btst	#0,(RAM_VidRegs+$10)
00888C8A 6700                        		beq.s	@Not40
00888C8C E38C                         		lsl.l	#1,d4
00888C8E                            @Not40:
00888C8E 0839 0001 FFFF ED20         		btst	#1,(RAM_VidRegs+$10)
00888C96 6700                        		beq.s	@Not128
00888C98 E38C                           		lsl.l	#1,d4
00888C9A                            @Not128:
00888C9A D044                        		add.w	d4,d0			;+Y Start
00888C9C 4841                       		swap	d1
00888C9E E349                       		lsl.w	#1,d1
00888CA0 D041                       		add.w	d1,d0			;+X Start
00888CA2 4845                       		swap	d5
00888CA4                            		
00888CA4                            ; --------------------------------------------
00888CA4                            ; VDP_VramToCmd
00888CA4                            ;
00888CA4                            ; Input:
00888CA4                            ; d0 | WORD - VRAM to convert
00888CA4                            ;
00888CA4                            ; Output:
00888CA4                            ; d0 | LONG - VDP Command (Write mode)
00888CA4                            ; --------------------------------------------
00888CA4                            
00888CA4                            VDP_VramToCmd:
00888CA4 0C40 4000                  		cmp.w	#$4000,d0
00888CA8 6500                       		bcs.s	@NoBank
00888CAA 4840                       		swap	d0
00888CAC 303C 0001                  		move.w	#1,d0
00888CB0 4840                       		swap	d0
00888CB2 0C40 8000                  		cmp.w	#$8000,d0
00888CB6 6500                       		bcs.s	@NoBank	
00888CB8 4840                       		swap	d0
00888CBA 303C 0002                  		move.w	#2,d0
00888CBE 4840                       		swap	d0
00888CC0 0C40 C000                  		cmp.w	#$C000,d0
00888CC4 6500                       		bcs.s	@NoBank	
00888CC6 4840                       		swap	d0
00888CC8 303C 0003                  		move.w	#3,d0
00888CCC 4840                       		swap	d0
00888CCE                            @NoBank:
00888CCE 0240 3FFF                    		and.w	#$3FFF,d0
00888CD2 0040 4000                    		or.w	#$4000,d0
00888CD6 4840                          		swap	d0
00888CD8 4E75                       		rts
00888CDA                            		
00888CDA                            ; --------------------------------------------
00888CDA                            ; VDP_LoadMaps
00888CDA                            ; 
00888CDA                            ; Input:
00888CDA                            ; a0 - Pattern data
00888CDA                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
00888CDA                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
00888CDA                            ; d2 | LONG - Value
00888CDA                            ; d3 | WORD - VRAM (ASCII start)
00888CDA                            ; d4 | WORD - Type:
00888CDA                            ;             00 Byte | 01 Word | 02 Long HEX
00888CDA                            ;             04 Byte | 05 Word | 06 Long DEC
00888CDA                            ;             08 Byte | 09 Word | 0A Long DEC
00888CDA                            ; Uses:
00888CDA                            ; d4-d6
00888CDA                            ; 
00888CDA                            ; NOTE: clear d2 FIRST and then set the value
00888CDA                            ; --------------------------------------------
00888CDA                            
00888CDA                            Video_PrintVal:
00888CDA 0244 0007                  		and.w	#%111,d4
00888CDE 0804 0002                  		btst	#2,d4
00888CE2 6700                       		beq.s	@hexy
00888CE4 6100 0000                  		bsr	HexToDec
00888CE8                            @hexy:
00888CE8 3A04                       		move.w	d4,d5
00888CEA 6100 FF58                  		bsr	vdpshv_findvdppos
00888CEE 3805                       		move.w	d5,d4
00888CF0                            		
00888CF0 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
00888CF6 0643 0030                  		add.w	#"0",d3
00888CFA                            		
00888CFA 7A07                          		moveq	#(8)-1,d5
00888CFC 0804 0001                  		btst	#1,d4
00888D00 6600                       		bne.s	@setit
00888D02 7A03                          		moveq	#(4)-1,d5
00888D04 4842                        		swap	d2
00888D06 1004                          		move.b	d4,d0
00888D08 0200 0003                     		and.b	#%11,d0
00888D0C 4A00                        		tst.b	d0
00888D0E 6600                        		bne.s	@setit
00888D10 7A01                        		moveq	#(2)-1,d5
00888D12 E19A                        		rol.l	#8,d2
00888D14                            @setit:
00888D14 0804 0002                  		btst	#2,d4
00888D18 6700                       		beq.s	@next
00888D1A 0804 0001                  		btst	#1,d4
00888D1E 6600                       		bne.s	@next
00888D20 E89A                       		ror.l	#4,d2
00888D22 0645 0001                  		add.w	#1,d5
00888D26                            @next:
00888D26 E99A                        		rol.l	#4,d2
00888D28 3002                       		move.w	d2,d0
00888D2A 0240 000F                  		and.w	#$F,d0
00888D2E 0C40 000A                  		cmp.w	#$A,d0
00888D32 6500                       		bcs.s	@lessF
00888D34 0640 0007                  		add.w	#7,d0
00888D38                            @lessF
00888D38 D043                       		add.w	d3,d0
00888D3A 33C0 00C0 0000             		move.w	d0,(vdp_data)
00888D40 51CD FFE4                  		dbf	d5,@next
00888D44 4E75                       		rts
00888D46                            
00888D46                            ; --------------------------------------------
00888D46                            ; Video_MakeMap
00888D46                            ; 
00888D46                            ; Input:
00888D46                            ; a0 - Pattern data
00888D46                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
00888D46                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
00888D46                            ; d2 | LONG - XSize (WORD) | YSize (WORD)
00888D46                            ; d3 | WORD - VRAM
00888D46                            ; 
00888D46                            ; Uses:
00888D46                            ; d4-d6
00888D46                            ; --------------------------------------------
00888D46                            
00888D46                            Video_MakeMap:
00888D46                            		;Check plane to use
00888D46 6100 FEFC                  		bsr	vdpshv_findvdppos
00888D4A                            		
00888D4A 283C 0040 0000             		move.l	#$400000,d4
00888D50 0839 0000 FFFF ED20        		btst	#0,(RAM_VidRegs+$10)
00888D58 6700                       		beq.s	@JpNot40
00888D5A E38C                        		lsl.l	#1,d4
00888D5C                            @JpNot40:
00888D5C 0839 0001 FFFF ED20        		btst	#1,(RAM_VidRegs+$10)
00888D64 6700                       		beq.s	@Y_Loop
00888D66 E38C                            		lsl.l	#1,d4
00888D68                                 		
00888D68                            @Y_Loop:
00888D68 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l		; Set VDP location from d0
00888D6E 4842                       		swap	d2
00888D70 3A02                       		move.w	d2,d5	  		; Move X-pos value to d3
00888D72 4842                       		swap	d2
00888D74                            @X_Loop:
00888D74 3C18                       		move.w	(a0)+,d6
00888D76 DC43                                       add.w	d3,d6
00888D78 4845                                       swap	d5
00888D7A 1A39 FFFF ED1C                             move.b	(RAM_VidRegs+$C),d5
00888D80 0245 0006                                  and.w	#%110,d5
00888D84 6700                                       beq.s	@normal
00888D86 E24E                                       lsr.w	#1,d6
00888D88                            @normal:
00888D88 4845                                       swap	d5
00888D8A 33C6 00C0 0000                             move.w	d6,(vdp_data)		; Put data
00888D90 51CD FFE2                  		dbf	d5,@X_Loop		; X-pos loop (from d1 to d3)
00888D94 D084                       		add.l	d4,d0                   ; Next line
00888D96 51CA FFD0                  		dbf	d2,@Y_Loop		; Y-pos loop
00888D9A 4E75                       		rts
00888D9C                            
00888D9C                            ; --------------------------------------------
00888D9C                            ; Video_PrintText
00888D9C                            ;
00888D9C                            ; Input:
00888D9C                            ; a0 - String
00888D9C                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
00888D9C                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
00888D9C                            ; d2 | VRAM
00888D9C                            ; 
00888D9C                            ; Uses:
00888D9C                            ; d3-d4
00888D9C                            ; --------------------------------------------
00888D9C                            
00888D9C                            Video_PrintText:
00888D9C                            		;Check plane to use
00888D9C 3A00                       		move.w	d0,d5
00888D9E 6100 FEA4                  		bsr	vdpshv_findvdppos
00888DA2                            		
00888DA2 283C 0080 0000              		move.l	#$800000,d4
00888DA8                            ;  		cmp.w	#2,d5
00888DA8                            ;  		bne.s	@NotWindow
00888DA8                            ; 		
00888DA8                            ;  		tst.b	(RAM_VidRegs+$C)
00888DA8                            ;  		beq.s	@Reset
00888DA8                            ;  		lsl.l	#1,d4
00888DA8                            ; 		bra.s	@Reset
00888DA8                            ; 		
00888DA8                            ; @NotWindow:
00888DA8                            ; 		btst	#0,(RAM_VidRegs+$10)
00888DA8                            ; 		beq.s	@JpNot40
00888DA8                            ;  		lsl.l	#1,d4
00888DA8                            ; @JpNot40:
00888DA8                            ; 		btst	#1,(RAM_VidRegs+$10)
00888DA8                            ; 		beq.s	@Space
00888DA8                            ;      		lsl.l	#1,d4
00888DA8                                 		
00888DA8                            @Reset:
00888DA8 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l
00888DAE                            @Next:
00888DAE 7600                       		moveq	#0,d3
00888DB0 1618                       		move.b	(a0)+,d3
00888DB2 0C03 000A                  		cmp.b	#$A,d3
00888DB6 6700                       		beq.s	@Space
00888DB8 4A03                       		tst.b	d3
00888DBA 6600                       		bne.s	@Char
00888DBC 4E75                       		rts
00888DBE                            @Char:
00888DBE D642                       		add.w	d2,d3
00888DC0 33C3 00C0 0000             		move.w	d3,(vdp_data).l
00888DC6 60E6                       		bra.s	@Next
00888DC8                            @Space:
00888DC8 D084                       		add.l	d4,d0                   ; Next line
00888DCA 60DC                       		bra.s	@Reset
00888DCC                            @Exit:
00888DCC 4E75                       		rts
00888DCE                            		
00888DCE                            ; --------------------------------------------
00888DCE                            ; Video_VSync
00888DCE                            ; 
00888DCE                            ; Wait VBlank
00888DCE                            ; --------------------------------------------
00888DCE                            
00888DCE                            Video_VSync:
00888DCE 08F9 0000 0000 0000         		bset	#0,(RAM_IntFlags)
00888DD6                            @vint:
00888DD6 0839 0000 0000 0000        		btst	#0,(RAM_IntFlags)
00888DDE 66F6                       		bne.s	@vint
00888DE0 4E75                       		rts
00888DE2                            
00888DE2                            ; ====================================================================
00888DE2                            ; ---------------------------------------------
00888DE2                            ; Palette fading
00888DE2                            ; ---------------------------------------------
00888DE2                            
00888DE2                            PalFade_Upd:
00888DE2 4DF9 FFFF EAD0             		lea	(RAM_PalFadeSys),a6
00888DE8 7C03                        		moveq	#4-1,d6
00888DEA                            @NextPalReq:
00888DEA 4A96                       		tst.l	(a6)
00888DEC 6700                       		beq.s	@Unused
00888DEE 4BF9 FFFF E8D0              		lea	(RAM_Palette),a5
00888DF4 49F9 FFFF E9D0              		lea	(RAM_PalFade),a4
00888DFA 6100 0000                    		bsr	@Active
00888DFE                            @Unused:
00888DFE DCFC 0008                   		adda	#8,a6
00888E02 51CE FFE6                   		dbf	d6,@NextPalReq
00888E06                            		
00888E06 7C03                       		moveq	#4-1,d6
00888E08                            @NextHPalReq:
00888E08 4A96                       		tst.l	(a6)
00888E0A 6700                       		beq.s	@UnusedH
00888E0C 4BF9 FFFF E950             		lea	(RAM_HPalette),a5
00888E12 49F9 FFFF EA50             		lea	(RAM_HPalFade),a4
00888E18 6100 0000                  		bsr	@Active
00888E1C                            @UnusedH:
00888E1C DCFC 0008                  		adda	#8,a6
00888E20 51CE FFE6                  		dbf	d6,@NextHPalReq
00888E24 4E75                       		rts
00888E26                            		
00888E26                            ; ---------------------------------
00888E26                            ; Active palette
00888E26                            ; ---------------------------------
00888E26                            
00888E26                            @Active:
00888E26 7000                       		moveq	#0,d0
00888E28 102E 0000                  		move.b	palFd_mode(a6),d0
00888E2C D040                       		add.w	d0,d0
00888E2E 323B 0000                  		move.w	@list(pc,d0.w),d1
00888E32 4EFB 1000                  		jmp	@list(pc,d1.w)
00888E36                            		
00888E36                            ; ---------------------------------
00888E36                            
00888E36                            @list:
00888E36 0000                       		dc.w fadeSet_Return-@list
00888E38 0000                       		dc.w fadeSet_in_timer-@list
00888E3A 0000                       		dc.w fadeSet_out_timer-@list
00888E3C 0000                       		dc.w fadeSet_in_single-@list
00888E3E 0000                        		dc.w fadeSet_out_single-@list		
00888E40                            		
00888E40                            ; ---------------------------------
00888E40                            
00888E40                            fadeSet_in_timer:
00888E40 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00888E46 6A00 0000                  		bpl	fadeSet_Return
00888E4A 7800                       		moveq	#0,d4
00888E4C 7A00                       		moveq	#0,d5
00888E4E 182E 0001                  		move.b 	palFd_delay(a6),d4
00888E52 3D44 0004                  		move.w	d4,palFd_timer(a6)
00888E56 182E 0003                  		move.b 	palFd_num(a6),d4
00888E5A                            @next_in:
00888E5A 3015                        		move.w	(a5),d0
00888E5C 3214                        		move.w	(a4),d1
00888E5E 3400                       		move.w	d0,d2
00888E60 3601                        		move.w	d1,d3
00888E62 0242 000E                   		and.w	#$00E,d2
00888E66 0243 000E                   		and.w	#$00E,d3
00888E6A B642                        		cmp.w	d2,d3
00888E6C 6700                        		beq.s	@goodin_b
00888E6E 0642 0002                  		add.w	#2,d2
00888E72                            @goodin_b:
00888E72 0240 0EE0                  		and.w	#$EE0,d0
00888E76 8042                        		or.w	d2,d0
00888E78                            		
00888E78 3400                       		move.w	d0,d2
00888E7A 3601                        		move.w	d1,d3
00888E7C 0242 00E0                   		and.w	#$0E0,d2
00888E80 0243 00E0                   		and.w	#$0E0,d3
00888E84 B642                        		cmp.w	d2,d3
00888E86 6700                        		beq.s	@goodin_g
00888E88 0642 0020                  		add.w	#$020,d2
00888E8C                            @goodin_g:
00888E8C 0240 0E0E                  		and.w	#$E0E,d0
00888E90 8042                        		or.w	d2,d0
00888E92                              		
00888E92 3400                       		move.w	d0,d2
00888E94 3601                        		move.w	d1,d3
00888E96 0242 0E00                   		and.w	#$E00,d2
00888E9A 0243 0E00                   		and.w	#$E00,d3
00888E9E B642                        		cmp.w	d2,d3
00888EA0 6700                        		beq.s	@goodin_r
00888EA2 0642 0200                  		add.w	#$200,d2
00888EA6                            @goodin_r:
00888EA6 0240 00EE                  		and.w	#$0EE,d0
00888EAA 8042                        		or.w	d2,d0
00888EAC                             		
00888EAC 3AC0                        		move.w	d0,(a5)+
00888EAE B05C                        		cmp.w	(a4)+,d0
00888EB0 6600                        		bne.s	@nonz_fdin
00888EB2 0645 0001                   		add.w	#1,d5
00888EB6                            @nonz_fdin:
00888EB6 51CC FFA2                  		dbf	d4,@next_in
00888EBA                            		
00888EBA 0445 0001                  		sub.w	#1,d5
00888EBE BA2E 0003                  		cmp.b	palFd_num(a6),d5
00888EC2 6600                       		bne.s	fadeSet_Return
00888EC4 4296                       		clr.l	(a6)
00888EC6                            fadeSet_Return:
00888EC6 4E75                       		rts
00888EC8                            		
00888EC8                            ; ---------------------------------
00888EC8                            
00888EC8                            fadeSet_out_timer:
00888EC8 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00888ECE 6AF6                       		bpl.s	fadeSet_Return
00888ED0 7400                       		moveq	#0,d2
00888ED2 7600                       		moveq	#0,d3
00888ED4 142E 0001                  		move.b 	palFd_delay(a6),d2
00888ED8 3D42 0004                  		move.w	d2,palFd_timer(a6)
00888EDC 142E 0003                  		move.b 	palFd_num(a6),d2
00888EE0                            @setcol:
00888EE0 3015                       		move.w	(a5),d0
00888EE2 3200                       		move.w	d0,d1
00888EE4 0241 000E                  		and.w	#$00E,d1
00888EE8 6700                       		beq.s	@good_b
00888EEA 0441 0002                  		sub.w	#2,d1
00888EEE                            @good_b:
00888EEE 0240 0EE0                  		and.w	#$EE0,d0
00888EF2 8041                       		or.w	d1,d0
00888EF4                            		
00888EF4 3200                       		move.w	d0,d1
00888EF6 0241 00E0                  		and.w	#$0E0,d1
00888EFA 6700                       		beq.s	@good_g
00888EFC 0441 0020                  		sub.w	#$020,d1
00888F00                            @good_g:
00888F00 0240 0E0E                  		and.w	#$E0E,d0
00888F04 8041                       		or.w	d1,d0
00888F06 3200                       		move.w	d0,d1
00888F08 0241 0E00                  		and.w	#$E00,d1
00888F0C 6700                       		beq.s	@good_r
00888F0E 0441 0200                  		sub.w	#$200,d1
00888F12                            @good_r:
00888F12 0240 00EE                  		and.w	#$0EE,d0
00888F16 8041                       		or.w	d1,d0
00888F18 3AC0                       		move.w	d0,(a5)+
00888F1A 4A40                       		tst.w	d0
00888F1C 6600                       		bne.s	@nonzero
00888F1E 0643 0001                  		add.w	#1,d3
00888F22                            @nonzero:
00888F22 51CA FFBC                  		dbf	d2,@setcol
00888F26                            		
00888F26 0443 0001                  		sub.w	#1,d3
00888F2A B62E 0003                  		cmp.b	palFd_num(a6),d3
00888F2E 6696                       		bne.s	fadeSet_Return
00888F30 4296                       		clr.l	(a6)
00888F32 4E75                       		rts
00888F34                            		
00888F34                            ; ---------------------------------
00888F34                            ; fadeSet_in_single
00888F34                            ; 
00888F34                            ; palFd_delay:
00888F34                            ; RGBTTTTT - RGB increment bits
00888F34                            ;            TTTTT timer
00888F34                            ; ---------------------------------
00888F34                            
00888F34                            fadeSet_in_single:
00888F34 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00888F3A 6A00 FF8A                  		bpl	fadeSet_Return
00888F3E                            
00888F3E 7A00                       		moveq	#0,d5
00888F40 1A2E 0002                  		move.b	palFd_from(a6),d5
00888F44 E34D                       		lsl.w	#1,d5
00888F46 DAC5                       		adda	d5,a5
00888F48 162E 0001                  		move.b 	palFd_delay(a6),d3
00888F4C 0243 00E0                  		and.w	#$E0,d3
00888F50 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
00888F56                            		
00888F56 7800                       		moveq	#0,d4
00888F58 182E 0003                  		move.b 	palFd_num(a6),d4
00888F5C                            @next_in:
00888F5C 3015                        		move.w	(a5),d0
00888F5E 3400                       		move.w	d0,d2
00888F60 0242 000E                   		and.w	#$00E,d2
00888F64 0803 0005                  		btst	#5,d3
00888F68 6700                       		beq.s	@goodin_b
00888F6A 0C42 000E                   		cmp.w	#$00E,d2
00888F6E 6C00                        		bge.s	@goodin_b
00888F70 0642 0002                  		add.w	#2,d2
00888F74                            @goodin_b:
00888F74 0240 0EE0                  		and.w	#$EE0,d0
00888F78 8042                        		or.w	d2,d0
00888F7A                            
00888F7A 3400                       		move.w	d0,d2
00888F7C 0242 00E0                   		and.w	#$0E0,d2
00888F80 0803 0006                  		btst	#6,d3
00888F84 6700                       		beq.s	@goodin_g
00888F86 0C42 00E0                   		cmp.w	#$0E0,d2
00888F8A 6C00                        		bge.s	@goodin_g
00888F8C 0642 0020                  		add.w	#$020,d2
00888F90                            @goodin_g:
00888F90 0240 0E0E                  		and.w	#$E0E,d0
00888F94 8042                        		or.w	d2,d0
00888F96                            
00888F96 3400                       		move.w	d0,d2
00888F98 0242 0E00                   		and.w	#$E00,d2
00888F9C 0803 0007                  		btst	#7,d3
00888FA0 6700                       		beq.s	@goodin_r
00888FA2 0C42 0E00                   		cmp.w	#$E00,d2
00888FA6 6C00                        		bge.s	@goodin_r
00888FA8 0642 0200                  		add.w	#$200,d2
00888FAC                            @goodin_r:
00888FAC 0240 00EE                  		and.w	#$0EE,d0
00888FB0 8042                        		or.w	d2,d0
00888FB2                            
00888FB2 3AC0                        		move.w	d0,(a5)+
00888FB4 51CC FFA6                  		dbf	d4,@next_in
00888FB8                            		
00888FB8 102E 0001                  		move.b	palFd_delay(a6),d0
00888FBC 0240 001F                  		and.w	#$1F,d0
00888FC0 0440 0001                  		sub.w	#1,d0
00888FC4 6A00                       		bpl.s	fadeSet_Return_2
00888FC6                            		
00888FC6                            ; 		sub.w	#1,d5
00888FC6                            ; 		cmp.b	palFd_num(a6),d5
00888FC6                            ; 		bne.s	fadeSet_Return
00888FC6 4296                       		clr.l	(a6)
00888FC8 42AE 0004                  		clr.l	4(a6)
00888FCC                            		
00888FCC                            fadeSet_Return_2:
00888FCC 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
00888FD2 812E 0001                  		or.b	d0,palFd_delay(a6)
00888FD6 4E75                       		rts
00888FD8                            		
00888FD8                            ; ---------------------------------
00888FD8                            ; fadeSet_out_single
00888FD8                            ; 
00888FD8                            ; palFd_delay:
00888FD8                            ; RGBTTTTT - RGB increment bits
00888FD8                            ;            TTTTT timer
00888FD8                            ; ---------------------------------
00888FD8                            
00888FD8                            fadeSet_out_single:
00888FD8 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00888FDE 6A00 FEE6                  		bpl	fadeSet_Return
00888FE2                            
00888FE2 7A00                       		moveq	#0,d5
00888FE4 1A2E 0002                  		move.b	palFd_from(a6),d5
00888FE8 E34D                       		lsl.w	#1,d5
00888FEA DAC5                       		adda	d5,a5
00888FEC 162E 0001                  		move.b 	palFd_delay(a6),d3
00888FF0 0243 00E0                  		and.w	#$E0,d3
00888FF4 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
00888FFA                            		
00888FFA 7800                       		moveq	#0,d4
00888FFC 182E 0003                  		move.b 	palFd_num(a6),d4
00889000                            @next_in:
00889000 3015                        		move.w	(a5),d0
00889002 3400                       		move.w	d0,d2
00889004 0242 000E                   		and.w	#$00E,d2
00889008 0803 0005                  		btst	#5,d3
0088900C 6700                       		beq.s	@goodin_b
0088900E                            ;  		tst.w	d2
0088900E                            ;  		beq.s	@goodin_b
0088900E 0442 0002                  		sub.w	#2,d2
00889012                            @goodin_b:
00889012 0240 0EE0                  		and.w	#$EE0,d0
00889016 8042                        		or.w	d2,d0
00889018                            
00889018 3400                       		move.w	d0,d2
0088901A 0242 00E0                   		and.w	#$0E0,d2
0088901E 0803 0006                  		btst	#6,d3
00889022 6700                       		beq.s	@goodin_g
00889024                            ;  		tst.w	d2
00889024                            ;  		beq.s	@goodin_g
00889024 0442 0020                  		sub.w	#$020,d2
00889028                            @goodin_g:
00889028 0240 0E0E                  		and.w	#$E0E,d0
0088902C 8042                        		or.w	d2,d0
0088902E                            
0088902E 3400                       		move.w	d0,d2
00889030 0242 0E00                   		and.w	#$E00,d2
00889034 0803 0007                  		btst	#7,d3
00889038 6700                       		beq.s	@goodin_r
0088903A                            ;  		tst.w	d2
0088903A                            ;  		beq.s	@goodin_r
0088903A 0442 0200                  		sub.w	#$200,d2
0088903E                            @goodin_r:
0088903E 0240 00EE                  		and.w	#$0EE,d0
00889042 8042                        		or.w	d2,d0
00889044                            
00889044 3AC0                        		move.w	d0,(a5)+
00889046 51CC FFB8                  		dbf	d4,@next_in
0088904A                            		
0088904A 102E 0001                  		move.b	palFd_delay(a6),d0
0088904E 0240 001F                  		and.w	#$1F,d0
00889052 0440 0001                  		sub.w	#1,d0
00889056 6A00                       		bpl.s	@fadeSet_Return_2
00889058                            		
00889058                            ; 		sub.w	#1,d5
00889058                            ; 		cmp.b	palFd_num(a6),d5
00889058                            ; 		bne.s	fadeSet_Return
00889058 4296                       		clr.l	(a6)
0088905A 42AE 0004                  		clr.l	4(a6)
0088905E                            		
0088905E                            @fadeSet_Return_2:
0088905E 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
00889064 812E 0001                  		or.b	d0,palFd_delay(a6)
00889068 4E75                       		rts
0088906A                            		
0088906A                            ; --------------------------------------------
0088906A                            ; PalFade_Set
0088906A                            ; --------------------------------------------
0088906A                            
0088906A                            PalFade_Set:
0088906A 4E75                       		rts
0088906C                            		
0088906C                            ; ====================================================================
0088906C                            ; ---------------------------------------------
0088906C                            ; DMA
0088906C                            ; ---------------------------------------------
0088906C                            
0088906C                            ; ROM data
0088906C                            ; Size
0088906C                            ; VRAM Destiantion
0088906C                            
0088906C                            DMA_Read:
0088906C 4DF9 FFFF EB10              		lea	(RAM_DMA_Buffer),a6
00889072                            ;  		move.w	#64,d3
00889072 381E                         		move.w	(a6)+,d4
00889074                            ;   		sub.w	d4,d3
00889074                            ;   		bmi	@FinishList
00889074 4A44                         		tst.w	d4
00889076 6700 0000                    		beq	@FinishList
0088907A 0444 0001                    		sub.w	#1,d4
0088907E                            ; 		dma 	on
0088907E                            @NextEntry:
0088907E 2A1E                       		move.l	(a6)+,d5
00889080 0285 000F FFFF             		and.l	#$FFFFF,d5
00889086                             		
00889086 E28D                         		lsr.l	#1,d5
00889088 2C3C 9600 9500              		move.l	#$96009500,d6
0088908E 1C05                        		move.b	d5,d6
00889090 E08D                        		lsr.l	#8,d5
00889092 4846                        		swap	d6
00889094 1C05                        		move.b	d5,d6
00889096 23C6 00C0 0004              		move.l	d6,(vdp_ctrl)
0088909C 3C3C 9700                   		move.w	#$9700,d6
008890A0 E08D                        		lsr.l	#8,d5
008890A2 1C05                        		move.b	d5,d6
008890A4 33C6 00C0 0004              		move.w	d6,(vdp_ctrl)
008890AA                             		
008890AA 2C3C 9400 9300               		move.l	#$94009300,d6		;Size
008890B0 3A1E                         		move.w	(a6)+,d5
008890B2 1C05                         		move.b	d5,d6
008890B4 4846                        		swap	d6
008890B6 E04D                         		lsr.w	#8,d5
008890B8 1C05                         		move.b	d5,d6
008890BA 23C6 00C0 0004               		move.l	d6,(vdp_ctrl)
008890C0                             		
008890C0 3A1E                        		move.w	(a6)+,d5
008890C2 EB4D                        		lsl.w	#5,d5
008890C4 3C05                        		move.w	d5,d6
008890C6 0245 3FFF                   		and.w	#$3FFF,d5
008890CA 0045 4000                   		or.w	#$4000,d5
008890CE E04E                        		lsr.w	#8,d6
008890D0 EC4E                        		lsr.w	#6,d6
008890D2 0246 0003                   		and.w	#%11,d6
008890D6 0046 0080                   		or.w	#$80,d6
008890DA 3F06                        		move.w	d6,-(sp)
008890DC 3F05                        		move.w	d5,-(sp)	
008890DE 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
008890E4 33FC 0100 00A1 1100         		move.w	#$100,($A11100).l
008890EC                            @hold_on:
008890EC 0839 0000 00A1 1100         		btst	#0,($A11100).l
008890F4 66F6                         		bne.s	@hold_on
008890F6                              		
008890F6 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
008890FC 33FC 0000 00A1 1100          		move.w	#0,($A11100).l
00889104                               		
00889104 51CC FF78                   		dbf	d4,@NextEntry
00889108                             		
00889108                            @FinishList:
00889108 4279 FFFF EB10             		clr.w	(RAM_DMA_Buffer)
0088910E 4E75                        		rts
00889110                            
00889110                            @ResetAllList:
00889110 4E75                       		rts
00889112                            		
00889112                            ; -----------------------------------
00889112                            ; Set new entry to the list
00889112                            ; 
00889112                            ; Input:
00889112                            ; d0 - ROM Address
00889112                            ; d1 - Size
00889112                            ; d2 - VRAM
00889112                            ; 
00889112                            ; Uses:
00889112                            ; a2/d3
00889112                            ; -----------------------------------
00889112                            
00889112                            DMA_Set:
00889112 45F9 FFFF EB10             		lea	(RAM_DMA_Buffer),a2
00889118 0C52 0040                  		cmp.w	#64,(a2)
0088911C 6C00                       		bge.s	@Return
0088911E 3612                       		move.w	(a2),d3
00889120 E74B                       		lsl.w	#3,d3			;Size: 8
00889122 D4C3                       		adda 	d3,a2
00889124 D4FC 0002                  		adda	#2,a2
00889128                            		
00889128 24C0                       		move.l	d0,(a2)+		;ROM Address
0088912A 34C1                       		move.w	d1,(a2)+
0088912C 34C2                       		move.w	d2,(a2)+
0088912E 0679 0001 FFFF EB10        		add.w	#1,(RAM_DMA_Buffer)
00889136                            @Return:
00889136 4E75                       		rts
00889138                            		
00889138                            ; ====================================================================
00889138                            ; ---------------------------------------------
00889138                            ; Sprites system
00889138                            ; ---------------------------------------------
00889138                            
00889138                            ; ---------------------------------------------
00889138                            ; Sprites_Reset
00889138                            ; ---------------------------------------------
00889138                            
00889138                            Sprites_Clear:
00889138                            ;  		lea	(RAM_Sprites),a6
00889138                            ;  		move.w	#$4F,d6
00889138                            ; @clrit:
00889138 42B9 FFFF E340               		clr.l	(RAM_Sprites)
0088913E 42B9 FFFF E344               		clr.l	(RAM_Sprites+4)
00889144 4E75                       		rts
00889146                            		
00889146                            ; ---------------------------------------------
00889146                            ; Sprites_Reset
00889146                            ; ---------------------------------------------
00889146                            
00889146                            Sprites_Reset:
00889146 4DF9 FFFF E5C0             		lea	(RAM_SprControl),a6
0088914C 2A6E 0000                  		movea.l	sprite_free(a6),a5
00889150 BAFC E340                  		cmpa	#((RAM_Sprites)&$FFFF),a5
00889154 6D00                       		blt.s	@Full
00889156                            @NextEntry:
00889156 BAFC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
0088915A 6E00                        		bgt.s	@Full
0088915C 429D                        		clr.l	(a5)+
0088915E 429D                         		clr.l	(a5)+
00889160 BAFC E5C0                    		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
00889164 6DF0                         		blt.s	@NextEntry
00889166                            @Full:
00889166 2D7C FFFF E340 0000        		move.l	#RAM_Sprites,sprite_free(a6)
0088916E 3D7C 0001 0004             		move.w	#1,sprite_link(a6)
00889174                            @Return:
00889174 4E75                       		rts
00889174 4E75                       		rts
00889176                            		include	"system/misc.asm"
00889176                            ; ====================================================================
00889176                            ; System
00889176                            ; ====================================================================
00889176                            
00889176                            ; ====================================================================
00889176                            ; -------------------------------------------------
00889176                            ; RAM
00889176                            ; -------------------------------------------------
00889176                            
00889176                                            rsset	RAM_System
00889176 =FFFFDE00                  RAM_HintJumpTo	rs.w	1				; DONT
00889176 =FFFFDE02                  RAM_HintAddr	rs.l	1				; SEPARATE
00889176 =FFFFDE06                  RAM_VIntJumpTo	rs.w	1				; THESE
00889176 =FFFFDE08                  RAM_VintAddr	rs.l	1				; ONES
00889176 =FFFFDE0C                  RAM_VIntRegs	rs.l	16
00889176 =FFFFDE4C                  RAM_ModeReset	rs.w	1
00889176 =FFFFDE4E                  RAM_IntFlags	rs.b	1
00889176 =FFFFDE4F                  RAM_GameMode	rs.b	1
00889176                            
00889176 =FFFFDE50                  sizeof_sys	rs.l	0
00889176                            ; 		inform 0,"system ram: %h",(sizeof_sys-RAM_System)
00889176                             				
00889176                            ; ====================================================================
00889176                            ; -------------------------------------------------
00889176                            ; Variables
00889176                            ; -------------------------------------------------
00889176                            
00889176                            ; --------------------------------------------
00889176                            				
00889176                            ; ====================================================================
00889176                            ; -------------------------------------------------
00889176                            ; Macros
00889176                            ; -------------------------------------------------
00889176                            
00889176                            ; --------------------------------------------
00889176                            
00889176                            ; ====================================================================
00889176                            ; -------------------------------------------------
00889176                            ; Subs
00889176                            ; -------------------------------------------------
00889176                            
00889176                            System_init:
00889176 41F9 FFFF BC00             		lea	(RAM_ModeBuffer),a0
0088917C 303C 0BFF                  		move.w	#($1800/2)-1,d0
00889180                            @clear_buff:
00889180 4258                       		clr.w	(a0)+
00889182 51C8 FFFC                  		dbf	d0,@clear_buff
00889186                            		
00889186 23FC 0000 0000 FFFF DE08   		move.l	#MD_Vint,(RAM_VIntAddr)
00889190 23FC 0000 0000 FFFF DE02   		move.l	#MD_Hint,(RAM_HIntAddr)
0088919A 303C 4EF9                  		move.w	#$4EF9,d0
0088919E 33C0 FFFF DE06              		move.w	d0,(RAM_VIntJumpTo)
008891A4 33C0 FFFF DE00             		move.w	d0,(RAM_HIntJumpTo)
008891AA                            		
008891AA 4239 FFFF DE4F              		clr.b	(RAM_GameMode)
008891B0 4E75                       		rts
008891B2                            		
008891B2                            ; ---------------------------------------------
008891B2                            ; SRAM
008891B2                            ; ---------------------------------------------
008891B2                            
008891B2                            SRAM_Init:
008891B2 13FC 0003 00A1 30F1        		move.b	#%11,($A130F1)		;read+write
008891BA 41F9 0020 0000             		lea	($200000),a0
008891C0 0108 0001                  		movep.w	1(a0),d0
008891C4 0C80 0000 4745             		cmp.l	#"GE",d0
008891CA 6700                       		beq.s	@exit
008891CC 43FA 0000                  		lea	@SramHead(pc),a1
008891D0 7006                       		moveq	#7-1,d0
008891D2                            @header:
008891D2 1019                       		move.b	(a1)+,d0
008891D4 1140 0001                  		move.b	d0,1(a0)
008891D8 D0FC 0002                  		adda	#2,a0
008891DC 51C8 FFF4                  		dbf	d0,@header
008891E0                            @exit:
008891E0 13FC 0000 00A1 30F1        		move.b	#0,($A130F1)
008891E8 4E75                       		rts
008891EA                            
008891EA                            ; ---------------------------------------------
008891EA                            
008891EA 4745 4E59 5341 5645 00     @SramHead:	dc.b "GENYSAVE",0
008891F4 00                         		even
008891F4                            		
008891F4                            ; ---------------------------------------------
008891F4                            ; CalcSine
008891F4                            ;
008891F4                            ; Input:
008891F4                            ; d0 | WORD
008891F4                            ;
008891F4                            ; Output:
008891F4                            ; d0 | WORD
008891F4                            ; d1 | WORD
008891F4                            ; ---------------------------------------------
008891F4                            
008891F4                            CalcSine:
008891F4 0240 00FF                  		and.w	#$FF,d0
008891F8 D040                       		add.w	d0,d0
008891FA 0640 0080                  		add.w	#$80,d0
008891FE 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00889202 0440 0080                  		sub.w	#$80,d0
00889206 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
0088920A 4E75                       		rts	
0088920C                            
0088920C                            Sine_Data:
0088920C 0000 0006 000C 0012 0019+  		dc.w 0,	6, $C, $12, $19, $1F, $25, $2B,	$31, $38, $3E
00889222 0044 004A 0050 0056 005C+  		dc.w $44, $4A, $50, $56, $5C, $61, $67,	$6D, $73, $78
00889236 007E 0083 0088 008E 0093+  		dc.w $7E, $83, $88, $8E, $93, $98, $9D,	$A2, $A7, $AB
0088924A 00B0 00B5 00B9 00BD 00C1+  		dc.w $B0, $B5, $B9, $BD, $C1, $C5, $C9,	$CD, $D1, $D4
0088925E 00D8 00DB 00DE 00E1 00E4+  		dc.w $D8, $DB, $DE, $E1, $E4, $E7, $EA,	$EC, $EE, $F1
00889272 00F3 00F4 00F6 00F8 00F9+  		dc.w $F3, $F4, $F6, $F8, $F9, $FB, $FC,	$FD, $FE, $FE
00889286 00FF 00FF 00FF 0100 00FF+  		dc.w $FF, $FF, $FF, $100, $FF, $FF, $FF, $FE, $FE, $FD
0088929A 00FC 00FB 00F9 00F8 00F6+  		dc.w $FC, $FB, $F9, $F8, $F6, $F4, $F3,	$F1, $EE, $EC
008892AE 00EA 00E7 00E4 00E1 00DE+  		dc.w $EA, $E7, $E4, $E1, $DE, $DB, $D8,	$D4, $D1, $CD
008892C2 00C9 00C5 00C1 00BD 00B9+  		dc.w $C9, $C5, $C1, $BD, $B9, $B5, $B0,	$AB, $A7, $A2
008892D6 009D 0098 0093 008E 0088+  		dc.w $9D, $98, $93, $8E, $88, $83, $7E,	$78, $73, $6D
008892EA 0067 0061 005C 0056 0050+  		dc.w $67, $61, $5C, $56, $50, $4A, $44,	$3E, $38, $31
008892FE 002B 0025 001F 0019 0012+  		dc.w $2B, $25, $1F, $19, $12, $C, 6, 0,	-6, -$C, -$12
00889314 FFE7 FFE1 FFDB FFD5 FFCF+  		dc.w -$19, -$1F, -$25, -$2B, -$31, -$38, -$3E, -$44, -$4A
00889326 FFB0 FFAA FFA4 FF9F FF99+  		dc.w -$50, -$56, -$5C, -$61, -$67, -$6D, -$75, -$78, -$7E
00889338 FF7D FF78 FF72 FF6D FF68+  		dc.w -$83, -$88, -$8E, -$93, -$98, -$9D, -$A2, -$A7, -$AB
0088934A FF50 FF4B FF47 FF43 FF3F+  		dc.w -$B0, -$B5, -$B9, -$BD, -$C1, -$C5, -$C9, -$CD, -$D1
0088935C FF2C FF28 FF25 FF22 FF1F+  		dc.w -$D4, -$D8, -$DB, -$DE, -$E1, -$E4, -$E7, -$EA, -$EC
0088936E FF12 FF0F FF0D FF0C FF0A+  		dc.w -$EE, -$F1, -$F3, -$F4, -$F6, -$F8, -$F9, -$FB, -$FC
00889380 FF03 FF02 FF02 FF01 FF01+  		dc.w -$FD, -$FE, -$FE, -$FF, -$FF, -$FF, -$100,	-$FF, -$FF
00889392 FF01 FF02 FF02 FF03 FF04+  		dc.w -$FF, -$FE, -$FE, -$FD, -$FC, -$FB, -$F9, -$F8, -$F6
008893A4 FF0C FF0D FF0F FF12 FF14+  		dc.w -$F4, -$F3, -$F1, -$EE, -$EC, -$EA, -$E7, -$E4, -$E1
008893B6 FF22 FF25 FF28 FF2C FF2F+  		dc.w -$DE, -$DB, -$D8, -$D4, -$D1, -$CD, -$C9, -$C5, -$C1
008893C8 FF43 FF47 FF4B FF50 FF55+  		dc.w -$BD, -$B9, -$B5, -$B0, -$AB, -$A7, -$A2, -$9D, -$98
008893DA FF6D FF72 FF78 FF7D FF82+  		dc.w -$93, -$8E, -$88, -$83, -$7E, -$78, -$75, -$6D, -$67
008893EC FF9F FFA4 FFAA FFB0 FFB6+  		dc.w -$61, -$5C, -$56, -$50, -$4A, -$44, -$3E, -$38, -$31
008893FE FFD5 FFDB FFE1 FFE7 FFEE+  		dc.w -$2B, -$25, -$1F, -$19, -$12, -$C,	-6, 0, 6, $C, $12
00889414 0019 001F 0025 002B 0031+  		dc.w $19, $1F, $25, $2B, $31, $38, $3E,	$44, $4A, $50
00889428 0056 005C 0061 0067 006D+  		dc.w $56, $5C, $61, $67, $6D, $73, $78,	$7E, $83, $88
0088943C 008E 0093 0098 009D 00A2+  		dc.w $8E, $93, $98, $9D, $A2, $A7, $AB,	$B0, $B5, $B9
00889450 00BD 00C1 00C5 00C9 00CD+  		dc.w $BD, $C1, $C5, $C9, $CD, $D1, $D4,	$D8, $DB, $DE
00889464 00E1 00E4 00E7 00EA 00EC+  		dc.w $E1, $E4, $E7, $EA, $EC, $EE, $F1,	$F3, $F4, $F6
00889478 00F8 00F9 00FB 00FC 00FD+  		dc.w $F8, $F9, $FB, $FC, $FD, $FE, $FE,	$FF, $FF, $FF
0088948C                            		even
0088948C                            	
0088948C                            ; ---------------------------------------------
0088948C                            ; HexToByte_Byte
0088948C                            ; 
0088948C                            ; Uses:
0088948C                            ; d4-d5
0088948C                            ; ---------------------------------------------
0088948C                            
0088948C                            ; HexToDec_Byte:
0088948C                            ; 		move.w	d0,d4
0088948C                            ; 		and.w	#$FF,d4
0088948C                            ; 		clr.w	d0
0088948C                            ; @hexloop:
0088948C                            ; 		sub.w	#1,d4
0088948C                            ; 		bcs.s	@finish
0088948C                            ; 		add.w	#1,d0
0088948C                            ; 		move.w	d0,d5
0088948C                            ;  		and.w	#$F,d5
0088948C                            ; 		cmp.w	#$A,d5
0088948C                            ; 		bcs.s	@lowbyte1
0088948C                            ; 		add.w	#6,d0
0088948C                            ; @lowbyte1:
0088948C                            ; 		move.w	d0,d5
0088948C                            ;  		and.w	#$F0,d5
0088948C                            ; 		cmp.w	#$A0,d5
0088948C                            ; 		bcs.s	@lowbyte2
0088948C                            ; 		add.w	#$60,d0
0088948C                            ; @lowbyte2:
0088948C                            ; 		bra.s	@hexloop
0088948C                            ; @finish:
0088948C                            ; 		rts
0088948C                            
0088948C                            ; ---------------------------
0088948C                            ; Convert HEX to DEC
0088948C                            ; MAX: 65535 ($FFFF)
0088948C                            ; 
0088948C                            ; input:
0088948C                            ; d2
0088948C                            ; 
0088948C                            ; output:
0088948C                            ; d2
0088948C                            ; Uses:
0088948C                            ; d4 WORD (swapped)
0088948C                            ; d5 LONG
0088948C                            ; ---------------------------
0088948C                            
0088948C                            HexToDec:
0088948C 7A00                       		moveq	#0,d5
0088948E 4844                       		swap	d4
00889490                            
00889490 4842                       		swap	d2
00889492 3802                       		move.w	d2,d4
00889494 4842                       		swap	d2
00889496 4A44                       		tst.w	d4
00889498 6700 0000                  		beq	@jumpy
0088949C                            		
0088949C 3802                       		move.w	d2,d4
0088949E E04C                       		lsr.w	#8,d4
008894A0 0244 000F                  		and.w	#$F,d4
008894A4 D844                       		add.w	d4,d4
008894A6 3A3B 4000                  		move.w	@grab256(pc,d4.w),d5
008894AA 3802                       		move.w	d2,d4
008894AC E04C                       		lsr.w	#8,d4
008894AE E44C                       		lsr.w	#2,d4
008894B0 0244 003C                  		and.w	#%111100,d4
008894B4 DABB 4000                  		add.l	@grab4096(pc,d4.w),d5
008894B8 6100 0000                  		bsr	@fixhexdec
008894BC 4842                       		swap	d2
008894BE 3802                       		move.w	d2,d4
008894C0 4842                       		swap	d2
008894C2 E54C                       		lsl.w	#2,d4
008894C4 0244 003C                  		and.w	#%111100,d4
008894C8 DABB 4000                  		add.l	@grab65536(pc,d4.w),d5
008894CC 6100 0000                  		bsr	@fixhexdec
008894D0 6000 0000                  		bra	@jumpy
008894D4                            ; --------------------------------
008894D4 0000                       @grab256:	dc.w 0
008894D6 0256                       		dc.w $256
008894D8 0512                       		dc.w $512
008894DA 0768                       		dc.w $768
008894DC 1024                       		dc.w $1024
008894DE 1280                       		dc.w $1280
008894E0 1536                       		dc.w $1536
008894E2 1792                       		dc.w $1792
008894E4 2048                       		dc.w $2048
008894E6 2304                       		dc.w $2304
008894E8 2560                       		dc.w $2560
008894EA 2816                       		dc.w $2816
008894EC 3072                       		dc.w $3072
008894EE 3328                       		dc.w $3328
008894F0 3584                       		dc.w $3584
008894F2 3840                       		dc.w $3840
008894F4                            		even
008894F4 0000 0000                  @grab4096:	dc.l 0
008894F8 0000 4096                  		dc.l $4096
008894FC 0000 8192                  		dc.l $8192
00889500 0001 2288                  		dc.l $12288
00889504 0001 6384                  		dc.l $16384
00889508 0002 0480                  		dc.l $20480
0088950C 0002 4576                  		dc.l $24576
00889510 0002 8672                  		dc.l $28672
00889514 0003 2768                  		dc.l $32768
00889518 0003 6864                  		dc.l $36864
0088951C 0004 0960                  		dc.l $40960
00889520 0004 5056                  		dc.l $45056
00889524 0004 9152                  		dc.l $49152
00889528 0005 3248                  		dc.l $53248
0088952C 0005 7344                  		dc.l $57344
00889530 0006 1440                  		dc.l $61440
00889534                            		even
00889534 0000 0000                  @grab65536: 	dc.l 0
00889538 0006 5536                  		dc.l $65536
0088953C 0013 1072                  		dc.l $131072
00889540 0019 6608                  		dc.l $196608
00889544 0026 2144                  		dc.l $262144
00889548 0032 7680                  		dc.l $327680
0088954C 0039 3216                  		dc.l $393216
00889550 0045 8752                  		dc.l $458752
00889554 0052 4288                  		dc.l $524288
00889558 0058 9824                  		dc.l $589824
0088955C 0065 5360                  		dc.l $655360
00889560 0072 0896                  		dc.l $720896
00889564 0078 6432                  		dc.l $786432
00889568 0085 1968                  		dc.l $851968
0088956C 0091 7504                  		dc.l $917504
00889570 0098 3040                  		dc.l $983040
00889574                            		even
00889574                            ; --------------------------------
00889574                            
00889574                            @jumpy:
00889574 0802 0007                  		btst	#7,d2
00889578 6700                       		beq.s	@not80
0088957A 0685 0000 0128             		add.l	#$128,d5
00889580 6100 0000                  		bsr	@fixhexdec
00889584                            @not80:
00889584 0282 0000 007F             		and.l	#$7F,d2
0088958A 4A82                       		tst.l	d2
0088958C 6700                       		beq.s	@lowrend
0088958E 0442 0001                  		sub.w	#1,d2
00889592                            @lelno:
00889592 0685 0000 0001             		add.l	#1,d5
00889598 6100 0000                  		bsr	@fixhexdec
0088959C 51CA FFF4                  		dbf	d2,@lelno
008895A0                            @lowrend:
008895A0 2405                       		move.l	d5,d2
008895A2 4844                       		swap	d4
008895A4 4E75                       		rts
008895A6                            
008895A6                            ; --------------------------------
008895A6                            
008895A6                            @fixhexdec:
008895A6 3805                       		move.w	d5,d4
008895A8 0244 000F                  		and.w	#$F,d4
008895AC 0C44 000A                  		cmp.w	#$A,d4
008895B0 6D00                       		blt.s	@lowr1
008895B2 0685 0000 0006             		add.l	#6,d5
008895B8                            @lowr1:
008895B8 3805                       		move.w	d5,d4
008895BA 0244 00F0                  		and.w	#$F0,d4
008895BE 0C44 00A0                  		cmp.w	#$A0,d4
008895C2 6D00                       		blt.s	@lowr2
008895C4 0685 0000 0060             		add.l	#$60,d5
008895CA                            @lowr2:
008895CA 3805                       		move.w	d5,d4
008895CC 0244 0F00                  		and.w	#$F00,d4
008895D0 0C44 0A00                  		cmp.w	#$A00,d4
008895D4 6D00                       		blt.s	@lowr3
008895D6 0685 0000 0600             		add.l	#$600,d5
008895DC                            @lowr3:
008895DC 3805                       		move.w	d5,d4
008895DE 0244 F000                  		and.w	#$F000,d4
008895E2 0C44 A000                  		cmp.w	#$A000,d4
008895E6 6500                       		bcs.s	@lowr4
008895E8 0685 0000 6000             		add.l	#$6000,d5
008895EE                            @lowr4:
008895EE 4845                       		swap	d5
008895F0 3805                       		move.w	d5,d4
008895F2 0244 000F                  		and.w	#$F,d4
008895F6 0C44 000A                  		cmp.w	#$A,d4
008895FA 6500                       		bcs.s	@lowr5
008895FC 0685 0000 0006             		add.l	#$6,d5
00889602                            @lowr5:
00889602 3805                       		move.w	d5,d4
00889604 0244 00F0                  		and.w	#$F0,d4
00889608 0C44 00A0                  		cmp.w	#$A0,d4
0088960C 6500                       		bcs.s	@lowr6
0088960E 0685 0000 0060             		add.l	#$60,d5
00889614                            @lowr6:
00889614 3805                       		move.w	d5,d4
00889616 0244 0F00                  		and.w	#$F00,d4
0088961A 0C44 0A00                  		cmp.w	#$A00,d4
0088961E 6500                       		bcs.s	@lowr7
00889620 0685 0000 0600             		add.l	#$600,d5
00889626                            @lowr7:
00889626 4845                       		swap	d5
00889628 4E75                       		rts
00889628 4E75                       		rts
0088962A                            		include	"system/input/code.asm"
0088962A                            ; ====================================================================
0088962A                            ; Input
0088962A                            ; ====================================================================
0088962A                            
0088962A                            		include	"system/input/map.asm"
0088962A                            ; ====================================================================
0088962A                            ; Input
0088962A                            ; ====================================================================
0088962A                            
0088962A                            ; ====================================================================
0088962A                            ; -------------------------------------------------
0088962A                            ; Variables
0088962A                            ; -------------------------------------------------
0088962A                            
0088962A =00000001                  JoyUp		equ	%00000001
0088962A =00000002                  JoyDown		equ	%00000010
0088962A =00000004                  JoyLeft		equ	%00000100
0088962A =00000008                  JoyRight	equ	%00001000
0088962A =00000010                  JoyB		equ	%00010000
0088962A =00000020                  JoyC		equ	%00100000
0088962A =00000040                  JoyA		equ	%01000000
0088962A =00000080                  JoyStart	equ	%10000000
0088962A =00000000                  bitJoyUp	equ	0
0088962A =00000001                  bitJoyDown	equ	1
0088962A =00000002                  bitJoyLeft	equ	2
0088962A =00000003                  bitJoyRight	equ	3
0088962A =00000004                  bitJoyB		equ	4
0088962A =00000005                  bitJoyC		equ	5
0088962A =00000006                  bitJoyA		equ	6
0088962A =00000007                  bitJoyStart	equ	7
0088962A                            
0088962A =00000001                  JoyZ		equ	%00000001
0088962A =00000002                  JoyY		equ	%00000010
0088962A =00000004                  JoyX		equ	%00000100
0088962A =00000008                  JoyMode		equ	%00001000
0088962A =00000000                  bitJoyZ		equ	0
0088962A =00000001                  bitJoyY		equ	1
0088962A =00000002                  bitJoyX		equ	2
0088962A =00000003                  bitJoyMode	equ	3
0088962A                            
0088962A                            ; --------------------------------------------
0088962A                            
0088962A                            		rsreset
0088962A =00000000                  CtrlID		rs.b	1
0088962A =00000001                  PadType		rs.b	1		;only TRUE $01 or FALSE $00
0088962A =00000002                  ExOnHold	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
0088962A =00000003                  OnHold		rs.b	1		;SACBRLDU
0088962A =00000004                  ExOnPress	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
0088962A =00000005                  OnPress		rs.b	1		;SACBRLDU
0088962A =00000006                  MouseX		rs.w	1		;TODO
0088962A =00000008                  MouseY		rs.w	1
0088962A =0000000A                  sizeof_control	rs.l	0
0088962A                            
0088962A                            ; ====================================================================
0088962A                            ; -------------------------------------------------
0088962A                            ; RAM
0088962A                            ; -------------------------------------------------
0088962A                            
0088962A                                            rsset	RAM_Input
0088962A =FFFFDE80                  RAM_Control_1	rs.b sizeof_control
0088962A =FFFFDE8A                  RAM_Control_2	rs.b sizeof_control
0088962A                            
0088962A                            ; --------------------------------------------
0088962A                            
0088962A =FFFFDE94                  sizeof_input	rs.l	0
0088962A                            ; 		inform 0,"input ram: %h",(sizeof_input-RAM_Input)
0088962A                             				
0088962A                            ; ====================================================================
0088962A                            ; -------------------------------------------------
0088962A                            ; Macros
0088962A                            ; -------------------------------------------------
0088962A                            
0088962A                            ; --------------------------------------------
0088962A                            ; --------------------------------------------
0088962A                            
0088962A                            ; ====================================================================
0088962A                            ; -------------------------------------------------
0088962A                            ; Read input
0088962A                            ; -------------------------------------------------
0088962A                            
0088962A                            Input_Read:
0088962A 4BF9 FFFF DE80             		lea	(RAM_Control_1),a5
00889630 7000                       		moveq	#0,d0
00889632 6100                       		bsr.s	@DoIt
00889634 4BF9 FFFF DE8A             		lea	(RAM_Control_2),a5
0088963A 7001                       		moveq	#1,d0
0088963C 6100                       		bsr.s	@DoIt
0088963E 4E75                       		rts
00889640                            
00889640                            ; ---------------------------------------
00889640                            
00889640                            @DoIt:
00889640 4DF9 00A1 0003             		lea	($A10003).l,a6
00889646 E348                       		lsl.w	#1,d0
00889648 DCC0                       		add.w	d0,a6			;Add result to port
0088964A 6100 0000                  		bsr	@FindJoypad
0088964E 1A80                       		move.b	d0,(a5)
00889650                            
00889650 0C00 000F                                  cmp.b	#$F,d0
00889654 6700                                       beq.s	@End
00889656 0C00 000D                  		cmp.b	#$D,d0
0088965A 6700                                       beq.s	@Controller
0088965C 0C00 0007                    		cmp.b	#7,d0			;Multitap
00889660 6700                                       beq.s	@End
00889662 0C00 0003                  		cmp.b	#3,d0
00889666 6700 0000                                  beq	@Mouse
0088966A                            
0088966A                            @End:
0088966A 4E75                       		rts
0088966C                            
0088966C                            ; ------------------------------------
0088966C                            ; Controller
0088966C                            ; ------------------------------------
0088966C                            
0088966C                            @Controller:
0088966C 1D7C 0040 0006             		move.b	#$40,6(a6)
00889672 4E71                       		nop
00889674 4E71                       		nop
00889676 1CBC 0040                  		move.b	#$40,(a6)		; Show CB|RLDU
0088967A 4E71                       		nop
0088967C 4E71                       		nop
0088967E 1CBC 0000                  		move.b	#$00,(a6)		; Show SA|RLDU
00889682 4E71                       		nop
00889684 4E71                       		nop
00889686 1CBC 0040                  		move.b	#$40,(a6)		; Show CB|RLDU
0088968A 4E71                       		nop
0088968C 4E71                       		nop
0088968E 1CBC 0000                  		move.b	#$00,(a6)		; Show SA|RLDU
00889692 4E71                       		nop
00889694 4E71                       		nop
00889696 1CBC 0040                  		move.b	#$40,(a6)		; "Okay OKAY!, I have more buttons"
0088969A 4E71                       		nop
0088969C 4E71                       		nop
0088969E 1016                       		move.b	(a6),d0
008896A0 1CBC 0000                   		move.b	#$00,(a6)		; "Heres my ID"
008896A4 4E71                         		nop
008896A6 4E71                         		nop
008896A8 1216                        		move.b	(a6),d1
008896AA 1CBC 0040                   		move.b	#$40,(a6)
008896AE 4E71                        		nop
008896B0 4E71                        		nop
008896B2                            		
008896B2 142D 0001                  		move.b	PadType(a5),d2
008896B6 0882 0000                  		bclr	#0,d2
008896BA 0241 000F                  		and.w	#$F,d1
008896BE 0C41 000F                  		cmp.w	#$F,d1
008896C2 6600                       		bne.s	@Original
008896C4                            		
008896C4 08C2 0000                  		bset	#0,d2
008896C8 7200                        		moveq	#0,d1
008896CA 122D 0002                   		move.b	ExOnHold(a5),d1
008896CE 4601                       		not.b	d1
008896D0 B101                        		eor.b	d0,d1
008896D2 C200                        		and.b	d0,d1
008896D4 0241 000F                   		and.w	#$F,d1
008896D8 1B41 0004                   		move.b	d1,ExOnPress(a5)
008896DC 4600                        		not.b	d0
008896DE 0240 000F                   		and.w	#$F,d0
008896E2 1B40 0002                   		move.b	d0,ExOnHold(a5)
008896E6                             		
008896E6                            @Original:	
008896E6 1B42 0001                  		move.b	d2,PadType(a5)
008896EA                            	
008896EA 1CBC 0000                  		move.b	#0,(a6)
008896EE 4E71                       		nop
008896F0 4E71                       		nop
008896F2 1016                       		move.b	(a6),d0
008896F4 E508                       		lsl.b	#2,d0
008896F6 0200 00C0                  		and.b	#$C0,d0	
008896FA 1CBC 0040                  		move.b	#$40,(a6)
008896FE 4E71                       		nop
00889700 4E71                       		nop
00889702 1216                       		move.b	(a6),d1
00889704                            ; 		move.w	#0,($A11100)
00889704 0201 003F                  		and.b	#$3F,d1
00889708 8001                       		or.b	d1,d0
0088970A 4600                       		not.b	d0
0088970C 122D 0003                  		move.b	OnHold(a5),d1
00889710 B101                       		eor.b	d0,d1
00889712 1B40 0003                  		move.b	d0,OnHold(a5)
00889716 C200                       		and.b	d0,d1
00889718 1B41 0005                  		move.b	d1,OnPress(a5)
0088971C 4E75                       		rts
0088971E                            
0088971E                            ; ; ------------------------------------
0088971E                            ; ; Multitap
0088971E                            ; ; ------------------------------------
0088971E                            ; 
0088971E                            ; @Multitap:
0088971E                            ; 		bra	@End
0088971E                            
0088971E                            ; ------------------------------------
0088971E                            ; Sega Mega Mouse
0088971E                            ;
0088971E                            ; in: d1 - port number
0088971E                            ; out: d0 - status
0088971E                            ;      d2
0088971E                            ; ------------------------------------
0088971E                            
0088971E                            @Mouse:
0088971E 7200                       		moveq	#0,d1
00889720 6100 0000                  		bsr	@ReadIt
00889724                            		
00889724 2002                       		move.l	d2,d0
00889726 4840                       		swap	d0
00889728 0240 00FF                  		and.w	#$FF,d0
0088972C 122D 0003                  		move.b	OnHold(a5),d1
00889730 B101                       		eor.b	d0,d1
00889732 1B40 0003                  		move.b	d0,OnHold(a5)
00889736 C200                        		and.b	d0,d1
00889738 1B41 0005                  		move.b	d1,OnPress(a5)
0088973C                            		
0088973C                            		;TODO
0088973C 3002                       		move.w	d2,d0
0088973E 0240 00FF                  		and.w	#$FF,d0
00889742 4880                       		ext.w	d0
00889744 4440                       		neg.w	d0
00889746 3B40 0008                   		move.w	d0,MouseY(a5)
0088974A                             		
0088974A E04A                        		lsr.w	#8,d2
0088974C 0242 00FF                   		and.w	#$FF,d2
00889750 4882                       		ext.w	d2
00889752 3B42 0006                   		move.w	d2,MouseX(a5)
00889756 6000 FF12                   		bra	@End
0088975A                            
0088975A                            ; ------------------------------------
0088975A                            
0088975A                            @ReadIt:
0088975A                            ; 		movem.l	d1/d3/d4/d7/a6,-(sp)
0088975A                            
0088975A 7000                       		moveq	#0,d0			;Error flag
0088975C 0C41 0002                  		cmp.w	#2,d1			;Control ID < 2?
00889760 6200 0000                  		bhi	@Error
00889764 D241                       		add.w	d1,d1
00889766                            	;	lea	($A10003),a6
00889766                            @Connect:
00889766 1D7C 0060 0006             		move.b	#$60,6(a6)
0088976C 4E71                                       nop
0088976E 4E71                                       nop
00889770 1CBC 0060                                  move.b	#$60,(a6)		;TH,TR=11 (END DATA)
00889774 7400                                       moveq	#0,d2
00889776 7600                                       moveq	#0,d3
00889778                            @NotReady:
00889778 0816 0004                   		btst	#4,(a6)
0088977C 67FA                        		beq.s	@NotReady
0088977E 1816                        		move.b	(a6),d4			;d4.b = ? 1 1 1 | 0 0 0
00889780 0204 000F                   		and.b	#$F,d4
00889784 4A04                        		tst.b	d4
00889786 6600 0000                   		bne	@Error			;No mouse
0088978A 1CBC 0020                   		move.b	#$20,(a6)		;Select t1 m1 1 1
0088978E 3E3C 00FE                   		move.w	#$FE,d7
00889792                            @lp1:
00889792 0816 0004                  		btst.b	#4,(a6)
00889796 6600                       		bne.s	@Mouse_10
00889798 51CF FFF8                  		dbra	d7,@lp1
0088979C 6000 0000                  		bra	@Error
008897A0                            		
008897A0                            @Mouse_10:
008897A0 1016                       		move.b	(a6),d0			;d0 = xxxx|xxxx|xxxx|t1 m1 1 1
008897A2 E148                       		lsl.w	#8,d0			;d0 = xxxx|t1 m1 1 1|0000|0000
008897A4 1CBC 0000                  		move.b	#0,(a6)
008897A8 4E71                       		nop
008897AA                            @lp2:
008897AA 0816 0004                  		btst	#4,(a6)
008897AE 6700                       		beq.s	@Mouse_20
008897B0 51CF FFF8                  		dbra	d7,@lp2
008897B4 6000 0000                  		bra	@Error
008897B8                            		
008897B8                            @Mouse_20:
008897B8 1616                       		move.b	(a6),d3
008897BA 1CBC 0020                  		move.b	#$20,(a6)
008897BE E14B                       		lsl.w	#8,d3
008897C0                            @lp3:
008897C0 0816 0004                  		btst	#4,(a6)
008897C4 6600                       		bne.s	@Mouse_30
008897C6 51CF FFF8                  		dbra	d7,@lp3
008897CA 6000 0000                  		bra	@Error
008897CE                            		
008897CE                            @Mouse_30:
008897CE 1616                       		move.b	(a6),d3
008897D0 E90B                       		lsl.b	#4,d3
008897D2 E84B                       		lsr.w	#4,d3
008897D4 1CBC 0000                  		move.b	#0,(a6)
008897D8 8043                       		or.w	d3,d0
008897DA 7600                       		moveq	#0,d3
008897DC                            @lp4:
008897DC 0816 0004                  		btst	#4,(a6)
008897E0 6700                                       beq.s	@Mouse_40
008897E2 51CF FFF8                                  dbra	d7,@lp4
008897E6 6000 0000                                  bra	@Error
008897EA                            
008897EA                            @Mouse_40:
008897EA 1416                       		move.b	(a6),d2
008897EC 1CBC 0020                  		move.b	#$20,(a6)
008897F0 E14A                       		lsl.w	#8,d2
008897F2                            @lp5:
008897F2 0816 0004                  		btst	#4,(a6)
008897F6 6600                       		bne.s	@Mouse_50
008897F8 51CF FFF8                  		dbra	d7,@lp5
008897FC 6000 0000                  		bra	@Error
00889800                            		
00889800                            @Mouse_50:
00889800 1416                       		move.b	(a6),d2
00889802 1CBC 0000                  		move.b	#0,(a6)
00889806 E90A                       		lsl.b	#4,d2
00889808 E94A                       		lsl.w	#4,d2
0088980A                            @lp6:
0088980A 0816 0004                  		btst	#4,(a6)
0088980E 6700                       		beq.s	@Mouse_60
00889810 51CF FFF8                  		dbra	d7,@lp6
00889814 6000 0000                  		bra	@Error
00889818                            
00889818                            @Mouse_60:
00889818 1416                       		move.b	(a6),d2
0088981A 1CBC 0020                  		move.b	#$20,(a6)
0088981E E90A                       		lsl.b	#4,d2
00889820 E98A                       		lsl.l	#4,d2
00889822                            @lp7:
00889822 0816 0004                  		btst	#4,(a6)
00889826 6600                       		bne.s	@Mouse_70
00889828 51CF FFF8                  		dbra	d7,@lp7
0088982C 6000                       		bra.s	@Error
0088982E                            
0088982E                            @Mouse_70:
0088982E 1416                       		move.b	(a6),d2
00889830 1CBC 0000                  		move.b	#0,(a6)
00889834 E90A                       		lsl.b	#4,d2
00889836 E98A                       		lsl.l	#4,d2
00889838                            @lp8:
00889838 0816 0004                  		btst	#4,(a6)
0088983C 6700                       		beq.s	@Mouse_80
0088983E 51CF 0000                  		dbra	d7,@Mouse_80
00889842 6000                       		bra.s	@Error
00889844                            
00889844                            @Mouse_80:
00889844 1416                       		move.b	(a6),d2
00889846 1CBC 0020                  		move.b	#$20,(a6)
0088984A E90A                       		lsl.b	#4,d2
0088984C E98A                       		lsl.l	#4,d2
0088984E                            @lp9:
0088984E 0816 0004                  		btst	#4,(a6)
00889852 6700                       		beq.s	@Mouse_90
00889854 51CF FFF8                  		dbra	d7,@lp9
00889858 6000                       		bra.s	@Error
0088985A                            
0088985A                            @Mouse_90:
0088985A 1416                       		move.b	(a6),d2
0088985C 1CBC 0060                  		move.b	#$60,(a6)
00889860 E90A                       		lsl.b	#4,d2
00889862 E88A                       		lsr.l	#4,d2
00889864                            @lp10:
00889864 0816 0004                  		btst	#4,(a6)
00889868 67FA                       		beq.s	@lp10
0088986A 0082 0000 0000             		or.l	#0,d2
00889870                            @Exit:
00889870 33FC 0000 00A1 1100        		move.w	#0,($A11100)
00889878                            ; 		movem.l	(sp)+,d1/d3/d4/d7/a6
00889878 4E75                       		rts
0088987A                            
0088987A                            @Error:
0088987A 1CBC 0060                  		move.b	#$60,(a6)
0088987E 4E71                       		nop
00889880 4E71                       		nop
00889882                            @erlp:
00889882 1CBC 0004                  		move.b	#4,(a6)
00889886 67FA                       		beq.s	@erlp
00889888 0082 8000 0000             		or.l	#$80000000,d2
0088988E 7000                       		moveq	#0,d0
00889890 33FC 0000 00A1 1100        		move.w	#0,($A11100)
00889898                            ; 		movem.l	(sp)+,d1/d3/d4/d7/a6
00889898 4E75                       		rts
0088989A                            
0088989A                            ; ------------------------------------
0088989A                            ; d0.w
0088989A                            ; $0F - Nothing
0088989A                            ; $0D - Controller
0088989A                            ; $07 - Multitap
0088989A                            ; $03 - Mouse
0088989A                            ;
0088989A                            ; d1.l
0088989A                            ; $00xx00yy - Key presses
0088989A                            ; ------------------------------------
0088989A                            
0088989A                            @FindJoypad:
0088989A 7000                       		moveq	#0,d0
0088989C 1CBC 0070                  		move.b	#$70,(a6)
008898A0 6100                       		bsr.s	@GetPress
008898A2 4841                       		swap	d1
008898A4 1CBC 0030                  		move.b	#$30,(a6)
008898A8 D040                       		add.w	d0,d0
008898AA                            
008898AA                            @GetPress:
008898AA 1216                       		move.b	(a6),d1
008898AC 1401                       		move.b	d1,d2
008898AE 0202 000C                  		and.b	#$C,d2
008898B2 6700                       		beq.s	@Nope1
008898B4 5240                       		addq.w	#1,d0
008898B6                            
008898B6                            @Nope1:
008898B6 D040                       		add.w	d0,d0
008898B8 1601                       		move.b	d1,d3
008898BA 0243 0003                  		and.w	#3,d3
008898BE 6700                       		beq.s	@Nope2
008898C0 5240                       		addq.w	#1,d0
008898C2                            
008898C2                            @Nope2:
008898C2 4E75                       		rts
008898C4                            		
008898C4                            ; ====================================================================
008898C4                            ; -------------------------------------------------
008898C4                            ; Subs
008898C4                            ; -------------------------------------------------
008898C4                            
008898C4                            Input_init:
008898C4                            ; 		move.w	#$100,($A11100).l
008898C4                            ; @WaitZ80:
008898C4                            ; 		btst	#0,($A11100).l
008898C4                            ; 		bne.s	@WaitZ80
008898C4                             
008898C4 7240                       		moveq	#$40,d1
008898C6 13C1 00A1 0009             		move.b	d1,($A10009).l
008898CC 13C1 00A1 000B             		move.b	d1,($A1000B).l
008898D2 13C1 00A1 000D             		move.b	d1,($A1000D).l
008898D8                            
008898D8                            ; 		move.w	#0,($A11100).l
008898D8 4E75                       		rts
008898DA                            		
008898DA                            		
008898DA                            		include	"system/sound/68k/main.asm"
008898DA                            ; ================================================================
008898DA                            ; SMEG Karasucia
008898DA                            ; Sound and Music Engine for Genesis (also MCD* and 32X**)
008898DA                            ;
008898DA                            ; (C)2013-2017 GF64
008898DA                            ; 
008898DA                            ; Reads patterns from a ImpulseTracker file (.it)
008898DA                            ;
008898DA                            ; Ticks:
008898DA                            ; 150 - NTSC
008898DA                            ; 120 - PAL
008898DA                            ;
008898DA                            ; uses assembler settings:
008898DA                            ; MCD     - for building to MCD (All the driver must be aligned
008898DA                            ;              to WordRAM or PRG-RAM)
008898DA                            ; MARS       - for building to 32x (CODE and
008898DA                            ;              DATA(Music/Sfx/Voices/Z80 samples) must be aligned to
008898DA                            ;              the 32x standards, uses bank 0 only,
008898DA                            ;              PWM Samples can be anywhere in ROM)
008898DA                            ; SMEG_Z80   - Use Z80, set to 0 while running from PRGRAM
008898DA                            ;                 
008898DA                            ; Limtations:
008898DA                            ; (Driver) - Effects: only volume and panning (Xxx) works
008898DA                            ; 
008898DA                            ; (MCD) - You cant use Z80 samples if your program is running
008898DA                            ;            on PRG-RAM (Z80 cant access RAM), if your program is
008898DA                            ;            running on WORD-RAM, set the permission to
008898DA                            ;            MainCPU (2M Mode) (not recommended)
008898DA                            ;            
008898DA                            ; * requires respective SubCPU code
008898DA                            ; ** requires respective SH2 code
008898DA                            ; ================================================================
008898DA                            
008898DA                            ;NOTE: Format
008898DA                            ; SONGFILE:
008898DA                            ; 		dc.b 12,0		; Numof_blocks, loop_block (-1 dont loop)
008898DA                            ; 		dc.l @pattern		; Pattern data
008898DA                            ;      		dc.l @instruments	; Instrument set
008898DA                            ;      		dc.w 8			; Number of channel settings
008898DA                            ;       	dc.b FM_6,64,$80,$0F	; Example of one (Channel,Vol,Pan,Extra)		
008898DA                            ;		...
008898DA                            ;
008898DA                            ; Extra:
008898DA                            ; FM: %????KEYS KEYS: FM Keys (ignored if not FM)
008898DA                            ; PSG: (not yet)
008898DA                            ; PCM/PWM: not yet
008898DA                            ; 
008898DA                            ; @instruments:
008898DA                            ; 		dc.w @ymha-@instruments
008898DA                            ; 		dc.w @psg-@instruments
008898DA                            ; 		dc.w @noise-@instruments
008898DA                            ; 		dc.w @psmpl-@instruments
008898DA                            ; 		even
008898DA                            ; @ymha:
008898DA                            ; 		;FM
008898DA                            ; 		dc.w INSTNUM,0
008898DA                            ; 		dc.l fmVoice_bass_ambient
008898DA                            ;    		
008898DA                            ;    		;FM3
008898DA                            ;    		dc.w $40|INSTNUM,0
008898DA                            ;    		dc.l fm_hatopen
008898DA                            ;    		dc.w $0511|$2000,$0328|$2000
008898DA                            ;    		dc.w $005E|$2000,$0328|$2000
008898DA                            ;    		
008898DA                            ;    		;Samples
008898DA                            ;   		dc.w $80|INSTNUM,12	; NUM,Pitch
008898DA                            ;   		dc.l wav_kick		; WAV Start
008898DA                            ;  		dc.l wav_kick_e		; WAV End
008898DA                            ;  		dc.l -1			; WAV Loop sample (0: start -1: none)
008898DA                            ;  		
008898DA                            ; 		dc.w -1			; ENDOFLIST
008898DA                            ; 		even
008898DA                            ; @psmpl:
008898DA                            ; 		dc.w -1			; Later
008898DA                            ; 		even
008898DA                            ; @psg:
008898DA                            ; 		dc.w -1			; Later
008898DA                            ; 		even
008898DA                            ; @noise:
008898DA                            ;  		dc.w 3,%101		; INSTNUM, PSG Noise setting
008898DA                            ;  		
008898DA                            ;  		dc.w 5,%101
008898DA                            ;  		dc.w 7,%100
008898DA                            ;  		
008898DA                            ; 		dc.w -1
008898DA                            ; 		even
008898DA                            
008898DA                            
008898DA                            ; GEMS style tick
008898DA                            ; 		dc.l fmSfx_Coin
008898DA                            ; 		dc.w $00AB|$3800,$0457|$3000
008898DA                            ; 		dc.w $0511|$3000,$0336|$2000
008898DA                            ;
008898DA                            ;    		dc.l fm_hatopen
008898DA                            ;    		dc.w $0511|$2000,$0328|$2000
008898DA                            ;    		dc.w $005E|$2000,$0328|$2000
008898DA                            ;
008898DA                            ;    		dc.l fm_hatclosed
008898DA                            ;    		dc.w $051C|$2000,$0328|$2000
008898DA                            ;    		dc.w $005E|$2000,$0328|$2000
008898DA                            ;
008898DA                            ;    		dc.l fm_hatclosed
008898DA                            ;    		dc.w $051C|$2000,$0328|$2000
008898DA                            ;    		dc.w $005E|$2000,$0328|$2000	
008898DA                            
008898DA                            ; ================================================================
008898DA                            
008898DA                            			rsreset
008898DA =00000000                  DrvStatus		rs.b 1		;Byte
008898DA =00000001                  snd_flags		rs.b 1		;Byte
008898DA =00000002                  PatternEnd		rs.b 1		;Byte
008898DA =00000003                  PatternLoop		rs.b 1		;Byte
008898DA =00000004                  SongRequest		rs.l 1 		;Long
008898DA =00000008                  SongStart		rs.l 1		;Long
008898DA =0000000C                  SongRead		rs.l 1		;Long
008898DA =00000010                  snd_instr		rs.l 1		;Long
008898DA =00000014                  SongPcmSamp		rs.l 1		;Long
008898DA =00000018                  TicksRequest		rs.w 1		;Word
008898DA =0000001A                  TicksRead		rs.w 1		;Word
008898DA =0000001C                  TicksSet		rs.w 1		;Word
008898DA =0000001E                  TempoRead 		rs.w 1		;Word
008898DA =00000020                  PattSize		rs.w 1		;Word
008898DA =00000022                  pattr_read		rs.w 1		;Word
008898DA =00000024                  CdOnlyFlags		rs.w 1		;Word
008898DA =00000026                  CurrPattern		rs.b 1		;Byte
008898DA =00000027                  PcmChnOnOff		rs.b 1		;Byte
008898DA =00000028                  PsgLast			rs.b 1		;Byte
008898DA =00000029                  snd_flagsBGM		rs.b 1		;Byte
008898DA =0000002A                  LastPattChn		rs.b 1		;Byte
008898DA =0000002B                  Psg_Vibrato		rs.b 1		;Byte
008898DA =0000002C                  Psg_AutoVol		rs.b 1		;Byte
008898DA =0000002E                  sizeof_SndBuff		rs.l 0
008898DA                            
008898DA                            ; --------------------------------------------
008898DA                            ; Channel settings
008898DA                            ; --------------------------------------------
008898DA                            
008898DA                            			rsreset
008898DA =00000000                  Chn_Freq		rs.w 1		;Word
008898DA =00000002                  Chn_Effect		rs.w 1		;Word
008898DA =00000004                  Chn_Portam		rs.w 1		;Word
008898DA =00000006                  Chn_Type		rs.b 1		;Byte
008898DA =00000007                  Chn_ID			rs.b 1		;Byte
008898DA =00000008                  Chn_Inst		rs.b 1		;Byte
008898DA =00000009                  Chn_Vol			rs.b 1		;Byte
008898DA =0000000A                  Chn_MainVol		rs.b 1		;Byte
008898DA =0000000B                  Chn_Note		rs.b 1		;Byte
008898DA =0000000C                  Chn_Pan			rs.b 1		;Byte
008898DA =0000000D                  Chn_FM_Key		rs.b 1		;Byte
008898DA =0000000E                  Chn_PCM_Pitch		rs.b 1		;Byte
008898DA                            ; Chn_PSG_Vibrato		rs.b 1		;Byte
008898DA =0000000F                  Chn_Timer		rs.b 1
008898DA =00000010                  sizeof_Chn		rs.l 0
008898DA                             
008898DA                             
008898DA                            			rsreset
008898DA =00000000                  instDYmha		rs.w 1
008898DA =00000002                  instDPsg		rs.w 1
008898DA =00000004                  instDNoise		rs.w 1
008898DA =00000006                  instDpsmpl		rs.w 1
008898DA                            
008898DA                            ; --------------------------------------------
008898DA                            ; Bits
008898DA                            ; --------------------------------------------
008898DA                            
008898DA =00000000                  bitPriority		equ	0
008898DA =00000001                  bitSfxOn		equ	1
008898DA =00000002                  bitEnabled		equ	2
008898DA                            
008898DA                            ;Status
008898DA =00000000                  bitFmDac		equ	0
008898DA =00000001                  bitDacNote		equ	1
008898DA =00000002                  bitTone3		equ	2
008898DA =00000003                  bitSpecial3		equ	3
008898DA                            
008898DA                            ; --------------------------------------------
008898DA                            ; Channel IDs
008898DA                            ; --------------------------------------------
008898DA                            
008898DA =00000000                  FM_1			equ	$00
008898DA =00000001                  FM_2			equ	$01
008898DA =00000002                  FM_3			equ	$02
008898DA =00000004                  FM_4			equ	$04
008898DA =00000005                  FM_5			equ	$05
008898DA =00000006                  FM_6			equ	$06
008898DA =00000080                  PSG_1			equ	$80
008898DA =000000A0                  PSG_2			equ	$A0
008898DA =000000C0                  PSG_3			equ	$C0
008898DA =000000E0                  NOISE			equ	$E0
008898DA =00000010                  PCM_1			equ	$10
008898DA =00000011                  PCM_2			equ	$11
008898DA =00000012                  PCM_3			equ	$12
008898DA =00000013                  PCM_4			equ	$13
008898DA =00000014                  PCM_5			equ	$14
008898DA =00000015                  PCM_6			equ	$15
008898DA =00000016                  PCM_7			equ	$16
008898DA =00000017                  PCM_8			equ	$17
008898DA =00000012                  max_chnl		equ	18
008898DA                            
008898DA                            ; --------------------------------------------
008898DA                            ; .IT request ($80+) format
008898DA                            ; --------------------------------------------
008898DA                            
008898DA =00000000                  bitNote			equ	0
008898DA =00000001                  bitInst			equ	1
008898DA =00000002                  bitVolume		equ	2
008898DA =00000003                  bitEffect		equ	3
008898DA =00000004                  bitSameNote		equ	4
008898DA =00000005                  bitSameInst		equ	5
008898DA =00000006                  bitSameVol		equ	6
008898DA =00000007                  bitSameEffect		equ	7
008898DA                            
008898DA                            ; --------------------------------------------
008898DA                            ; RAM
008898DA                            ; 
008898DA                            ; MAX: $400
008898DA                            ; --------------------------------------------
008898DA                            
008898DA                            			rsset RAM_Audio
008898DA =FFFFEF00                  RAM_SMEG_Buffer		rs.b sizeof_SndBuff
008898DA =FFFFEF2E                  RAM_SMEG_SfxBuff	rs.b sizeof_SndBuff
008898DA =FFFFEF5C                  RAM_SMEG_PrioList	rs.b max_chnl
008898DA =FFFFEF6E                  RAM_SMEG_Chnls_BGM	rs.b $10*max_chnl
008898DA =FFFFF08E                  RAM_SMEG_Chnls_SFX	rs.b $10*max_chnl
008898DA                            			
008898DA =FFFFF1AE                  sizeof_SMEG		rs.l 0
008898DA                            ;      			inform 0,"SMEG Uses: %h",sizeof_SMEG-RAM_Audio
008898DA                            			
008898DA                            ; ================================================================
008898DA                            ; -------------------------------------------
008898DA                            ; Macros
008898DA                            ; -------------------------------------------
008898DA                            
008898DA                            ; -----------------------------------------
008898DA                            
008898DA                            PCM_Entry	macro	cd_side,mars_side,loop,pitch
008898DA                            		
008898DA                            cdsize_size	= strlen(\cd_side)
008898DA                            		if MCD
008898DA                            		  if cdsize_size>$C
008898DA                            		    inform 2,"(SMEG) CD FILENAME TOO LONG"
008898DA                            		  elseif cdsize_size=$C
008898DA                            		    dc.b \cd_side
008898DA                            		  elseif cdsize_size<$C
008898DA                            		    dc.b \cd_side
008898DA                            		    rept $C-cdsize_size
008898DA                            		      dc.b 0
008898DA                            		    endr
008898DA                            		  elseif cdsize_size<=0
008898DA                            		    inform 2,"(SMEG) YOU FORGOT THE CD FILENAME"
008898DA                            		  endif
008898DA                            		  
008898DA                            		elseif MARS
008898DA                            		  dc.l mars_side
008898DA                            		endif
008898DA                            		
008898DA                            		dc.w loop
008898DA                            		dc.w pitch
008898DA                            		endm
008898DA                            
008898DA                            ; 		inform 0,"%h",RAM_SMEG_Buffer
008898DA                            
008898DA                            ; ================================================================
008898DA                            ; -------------------------------------------
008898DA                            ; External Calls
008898DA                            ; -------------------------------------------
008898DA                            
008898DA                            ;SegaPCM
008898DA =00000020                  CdTask_LoadPcm		equ	$20
008898DA =00000021                  CdTask_SetAddr		equ	$21
008898DA =00000022                  CdTask_SetFreq		equ	$22
008898DA =00000023                  CdTask_SetPan		equ	$23
008898DA =00000024                  CdTask_SetEnv		equ	$24
008898DA =00000025                  CdTask_SetOnOff		equ	$25
008898DA =00000026                  CdTask_ClearAllPcm	equ	$26
008898DA                            
008898DA                            ;MARS
008898DA =00000001                  marscall_Play		equ	1
008898DA =00000002                  marscall_Stop		equ	2
008898DA =00000003                  marscall_SetSmpl	equ	3
008898DA =00000004                  marscall_SetVol		equ	4
008898DA =00000005                  marscall_SetEntry	equ	5
008898DA                            	
008898DA                            ; ================================================================
008898DA                            ; -------------------------------------------
008898DA                            ; Init
008898DA                            ; -------------------------------------------
008898DA                            
008898DA                            Audio_Init:
008898DA 41F9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a0
008898E0 303C 02FF                  		move.w	#$2FF,d0
008898E4                            @ClrAll:
008898E4 4298                       		clr.l	(a0)+
008898E6 51C8 FFFC                  		dbf	d0,@ClrAll
008898EA                            		
008898EA                            ; -------------------------------------------
008898EA                            ; Z80
008898EA                            ; -------------------------------------------
008898EA                            
008898EA                            SMEG_Z80_Init:
008898EA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
008898F2 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
008898FA                            @WaitZ80:
008898FA 0839 0000 00A1 1100        		btst	#0,($A11100).l
00889902 66F6                       		bne.s	@WaitZ80
00889904                            
00889904 41F9 00A0 0000             		lea	($A00000).l,a0
0088990A 303C 1FFF                  		move.w	#$1FFF,d0
0088990E                            @cleanup:
0088990E 4218                       		clr.b	(a0)+
00889910 51C8 FFFC                  		dbf	d0,@cleanup
00889914                            		
00889914 41FA 0000                  		lea	Z80_Driver(pc),a0
00889918 43F9 00A0 0000             		lea	($A00000).l,a1
0088991E 323C 0000                  		move.w	#Z80_DriverEnd-Z80_Driver,d1
00889922                            @ToZ80:
00889922 12D8                       		move.b	(a0)+,(a1)+
00889924 51C9 FFFC                  		dbf	d1,@ToZ80
00889928                            
00889928                            ; -----------------------------------
00889928                            
00889928 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
00889930 4E71                       		nop
00889932 4E71                       		nop
00889934 4E71                       		nop
00889936 4E71                       		nop
00889938 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
00889940 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00889948                            ; 		rts
00889948                            		
00889948                            ; -------------------------------------------
00889948                            ; Stop ALL Sound
00889948                            ; -------------------------------------------
00889948                            
00889948                            SMEG_StopSnd:
00889948 103C 002B                  		move.b	#$2B,d0
0088994C 123C 0000                  		move.b	#$00,d1
00889950 6100 0000                  		bsr	SMEG_Z80_Off
00889954 6100 0000                  		bsr	FM_RegWrite_1
00889958 6100 0000                  		bsr	SMEG_Z80_On
0088995C 6100 0000                  		bsr	Audio_Sample_Stop
00889960                            		
00889960 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
00889966 0896 0002                  		bclr	#bitEnabled,(a6)
0088996A                            	
0088996A 6100 0000                  		bsr	SMEG_FM_Reset
0088996E 6100 0000                   		bsr	SMEG_PSG_Reset
00889972 6000 0000                  		bra	SMEG_PCM_Reset
00889976                            		
00889976                            ; -------------------------------------------
00889976                            ; Play Song
00889976                            ; -------------------------------------------
00889976                            
00889976                            SMEG_PlaySong:
00889976 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
0088997C 08D6 0002                  		bset	#bitEnabled,(a6)
00889980 4E75                       		rts
00889982                            		
00889982                            ; -------------------------------------------
00889982                            ; Load Song
00889982                            ;
00889982                            ; d0 - StartOfSong
00889982                            ; d1 - Ticks
00889982                            ; d2 - Type (0 - song, 1 - sfx)
00889982                            ; -------------------------------------------
00889982                            
00889982                            Audio_Track_Play:
00889982 4A42                       		tst.w	d2
00889984 6600                       		bne.s	@Sfx
00889986                            		
00889986 23C0 FFFF EF04             		move.l	d0,(RAM_SMEG_Buffer+SongRequest)
0088998C 33C1 FFFF EF18             		move.w	d1,(RAM_SMEG_Buffer+TicksRequest)
00889992 4E75                       		rts
00889994                            @Sfx:
00889994                            ; 		clr.w	(RAM_SMEG_SfxBuff+pattr_read)
00889994                            ; 		clr.w	(RAM_SMEG_SfxBuff+CurrPattern)
00889994                            ; 		move.l	(RAM_SMEG_SfxBuff+SongStart),(RAM_SMEG_SfxBuff+SongRead)
00889994                            ; 		cmp.l	(RAM_SMEG_SfxBuff+SongRequest),d0
00889994                            ; 		bne.s	@SameSfx
00889994                            		
00889994 23C0 FFFF EF32             		move.l	d0,(RAM_SMEG_SfxBuff+SongRequest)
0088999A 33C1 FFFF EF46             		move.w	d1,(RAM_SMEG_SfxBuff+TicksRequest)
008899A0                            @SameSfx:
008899A0 4E75                       		rts
008899A2                            		
008899A2                            ; ================================================================
008899A2                            ; -------------------------------------------
008899A2                            ; Run
008899A2                            ; -------------------------------------------
008899A2                            
008899A2                            Audio_Run:
008899A2 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
008899A8 6100 0000                  		bsr	@RequestSong
008899AC 0896 0000                  		bclr	#bitPriority,(a6)
008899B0 6100 0000                                  bsr	@ReadRow
008899B4                            
008899B4 4DF9 FFFF EF2E               		lea	(RAM_SMEG_SfxBuff),a6
008899BA 6100 0000                   		bsr	@RequestSfx
008899BE 08D6 0000                  		bset	#bitPriority,(a6)
008899C2 6100 0000                  		bsr	@ReadRow
008899C6                            		
008899C6                            ; -------------------------
008899C6                            ; MARS ONLY
008899C6                            ; Transfer 68k RAM using
008899C6                            ; framebuffer (offside)
008899C6                            ; -------------------------
008899C6                            
008899C6                            ; @marsturn:
008899C6                            ; 		btst	#7,(marsreg)	
008899C6                            ; 		bne.s	@busymars
008899C6                            ; 		
008899C6                            ; 		bchg	#0,($A1518B)
008899C6                            ; @waitfb:	btst	#1,($A1518B)
008899C6                            ; 		bne.s	@waitfb
008899C6                            ; 		lea	(RAM_SMEG_Chnls_BGM),a0
008899C6                            ; 		lea	(framebuffer+$14000),a1
008899C6                            ; 		move.w	#$10*max_chnl,d0
008899C6                            ; @copytomars:	
008899C6                            ; 		move.b	(a0)+,(a1)+
008899C6                            ; 		dbf	d0,@copytomars
008899C6                            ; 		bchg	#0,($A1518B)
008899C6                            ; @busymars:
008899C6                            
008899C6                            ; -------------------------
008899C6                            
008899C6                            @Wait:
008899C6 4E75                       		rts
008899C8                            
008899C8                            ; -------------------------------------------
008899C8                            ; Request song
008899C8                            ; -------------------------------------------
008899C8                            	
008899C8                            @RequestSong:
008899C8 4AAE 0004                  		tst.l	SongRequest(a6)
008899CC 6700                       		beq.s	@Same
008899CE 0896 0002                  		bclr	#bitEnabled,(a6)
008899D2 6100 FF74                   		bsr	SMEG_StopSnd			;d0-d1 are gone
008899D6 4AAE 0004                   		tst.l	SongRequest(a6)
008899DA 6B00                        		bmi.s	@Same
008899DC                             		
008899DC 422E 0026                  		clr.b	CurrPattern(a6)
008899E0 422E 0002                  		clr.b	PatternEnd(a6)
008899E4 426E 0020                  		clr.w	PattSize(a6)
008899E8 426E 0022                  		clr.w	pattr_read(a6)
008899EC 4BF9 FFFF EF6E             		lea	(RAM_SMEG_Chnls_BGM),a5
008899F2 422E 0027                  		clr.b	PcmChnOnOff(a6)
008899F6 422E 0000                                  clr.b	DrvStatus(a6)
008899FA 6100 0000                  		bsr	SMEG_Load_SetChnls
008899FE 6100 0000                   		bsr	SMEG_Load_SetExtChnls
00889A02 08D6 0002                  		bset	#bitEnabled,(a6)
00889A06                            
00889A06 426E 0018                  		clr.w	TicksRequest(a6)
00889A0A 42AE 0004                  		clr.l	SongRequest(a6)
00889A0E                            @Same:
00889A0E 4E75                       		rts
00889A10                            		
00889A10                            ; -------------------------------------------
00889A10                            ; Request sfx
00889A10                            ; -------------------------------------------
00889A10                            
00889A10                            @RequestSfx:
00889A10 4AAE 0004                  		tst.l	SongRequest(a6)
00889A14 67F8                       		beq.s	@Same
00889A16 6BF6                       		bmi.s	@Same
00889A18                            		
00889A18 0896 0002                  		bclr	#bitEnabled,(a6)
00889A1C 422E 0026                  		clr.b	CurrPattern(a6)
00889A20 422E 0002                  		clr.b	PatternEnd(a6)
00889A24 426E 0020                  		clr.w	PattSize(a6)
00889A28 426E 0022                  		clr.w	pattr_read(a6)
00889A2C                            		
00889A2C 422E 0027                  		clr.b	PcmChnOnOff(a6)
00889A30 422E 0000                                  clr.b	DrvStatus(a6)
00889A34                            ;                 bset	#bitSfxOn,(a6)
00889A34 4BF9 FFFF F08E             		lea	(RAM_SMEG_Chnls_SFX),a5
00889A3A 6100 0000                  		bsr	SMEG_Load_SetChnls
00889A3E 6100 0000                  		bsr	SMEG_Load_FixSfx
00889A42 08D6 0002                  		bset	#bitEnabled,(a6)
00889A46                            		
00889A46 426E 0018                  		clr.w	TicksRequest(a6)
00889A4A 42AE 0004                  		clr.l	SongRequest(a6)
00889A4E 4E75                       		rts
00889A50                            		
00889A50                            ; -------------------------------------------
00889A50                            ; Read row
00889A50                            ; -------------------------------------------
00889A50                            
00889A50                            @ReadRow:
00889A50 0816 0002                  		btst	#bitEnabled,(a6)
00889A54 6700 FF70                  		beq	@Wait
00889A58                            
00889A58 046E 0001 001A             		sub.w	#1,TicksRead(a6)
00889A5E 6A00 FF66                  		bpl	@Wait
00889A62 3D6E 001C 001A              		move.w	TicksSet(a6),TicksRead(a6)
00889A68                            
00889A68                            @NewRow:
00889A68 286E 000C                                  movea.l	SongRead(a6),a4
00889A6C                            
00889A6C                            ; --------------------------------
00889A6C                            ; New pattern
00889A6C                            ; --------------------------------
00889A6C                            
00889A6C                            @Next:
00889A6C 7A00                       		moveq	#0,d5
00889A6E 7C00                       		moveq	#0,d6
00889A70 3C2E 0020                   		move.w	PattSize(a6),d6
00889A74 0446 0001                    		sub.w	#1,d6
00889A78 3A2E 0022                    		move.w	pattr_read(a6),d5
00889A7C BC85                        		cmp.l	d5,d6
00889A7E 6400                        		bcc.s	@NoNextRow
00889A80                             		
00889A80 426E 0022                  		clr.w	pattr_read(a6)
00889A84 7A00                       		moveq	#0,d5
00889A86 7C00                       		moveq	#0,d6
00889A88 1C2E 0002                  		move.b	PatternEnd(a6),d6
00889A8C 1A2E 0026                  		move.b	CurrPattern(a6),d5
00889A90 BC45                       		cmp.w	d5,d6
00889A92 6E00                       		bgt.s	@NotEnd
00889A94                            		
00889A94 0C2E 00FF 0003             		cmp.b	#-1,PatternLoop(a6)
00889A9A 6700                       		beq.s	@exit
00889A9C                            		
00889A9C 286E 0008                  		movea.l	SongStart(a6),a4
00889AA0 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
00889AA4 1D5C 0020                   		move.b	(a4)+,PattSize(a6)
00889AA8 D8FC 0006                   		adda	#6,a4
00889AAC 2D4C 000C                  		move.l	a4,SongRead(a6)
00889AB0 1D6E 0003 0026             		move.b	PatternLoop(a6),CurrPattern(a6)
00889AB6 426E 001A                  		clr.w	TicksRead(a6)
00889ABA 4E75                       		rts
00889ABC                            		
00889ABC                            @exit:
00889ABC 0896 0002                  		bclr	#bitEnabled,(a6)
00889AC0 4E75                       		rts
00889AC2                            
00889AC2                            ; --------------------------------
00889AC2                            
00889AC2                            @NotEnd:
00889AC2 062E 0001 0026             		add.b	#1,CurrPattern(a6)
00889AC8 7000                       		moveq	#0,d0
00889ACA 102E 0026                  		move.b	CurrPattern(a6),d0
00889ACE B02E 0003                  		cmp.b	PatternLoop(a6),d0
00889AD2 6600                       		bne.s	@DontSaveLoop
00889AD4 2D4C 0008                  		move.l	a4,SongStart(a6)
00889AD8                            @DontSaveLoop:
00889AD8 7200                       		moveq	#0,d1
00889ADA 121C                       		move.b	(a4)+,d1
00889ADC 141C                       		move.b	(a4)+,d2
00889ADE E14A                       		lsl.w	#8,d2
00889AE0 8242                       		or	d2,d1
00889AE2 3D41 0020                  		move.w	d1,PattSize(a6)
00889AE6 D8FC 0006                  		adda	#6,a4
00889AEA                            		
00889AEA                            ; --------------------------------
00889AEA                            ; Current pattern
00889AEA                            ; --------------------------------
00889AEA                            
00889AEA                            @NoNextRow:
00889AEA 7C00                       		moveq	#0,d6
00889AEC 7000                       		moveq	#0,d0
00889AEE 101C                       		move.b	(a4)+,d0
00889AF0                            
00889AF0 4A40                       		tst.w	d0
00889AF2 6600                       		bne.s	@ValidNote
00889AF4                            
00889AF4 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889AFA 2D4C 000C                  		move.l	a4,SongRead(a6)
00889AFE 4E75                       		rts
00889B00                            
00889B00                            @ValidNote:
00889B00 4A00                       		tst.b	d0
00889B02 6A00                       		bpl.s	@Not80
00889B04 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889B0A 0880 0007                  		bclr	#7,d0
00889B0E 1C1C                       		move.b	(a4)+,d6
00889B10                            @Not80:
00889B10 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889B16 0440 0001                  		sub.w	#1,d0
00889B1A 1D40 002A                  		move.b	d0,LastPattChn(a6)
00889B1E                            
00889B1E 4BF9 FFFF EF6E             		lea 	(RAM_SMEG_Chnls_BGM),a5
00889B24 0816 0000                  		btst 	#bitPriority,(a6)
00889B28 6700                       		beq.s	@MusicPrio
00889B2A 4BF9 FFFF F08E             		lea 	(RAM_SMEG_Chnls_SFX),a5	
00889B30                            @MusicPrio:
00889B30 C0FC 0010                  		mulu.w	#sizeof_Chn,d0
00889B34 DAC0                       		adda	d0,a5
00889B36                            		
00889B36 4A46                       		tst.w	d6
00889B38 6700                       		beq.s	@NotRest
00889B3A 1B46 0006                  		move.b	d6,Chn_Type(a5)
00889B3E                            @NotRest:
00889B3E                            
00889B3E                            ; SFX: Mark used channel
00889B3E                            
00889B3E 0816 0000                  		btst 	#bitPriority,(a6)
00889B42 6700                       		beq.s	@MusicPrio2
00889B44 6100 0000                  		bsr	SMEG_FindPrioSlot
00889B48 16BC 0001                    		move.b	#1,(a3)
00889B4C                            @MusicPrio2:
00889B4C                             
00889B4C                            ; -------------
00889B4C                            ; Note
00889B4C                            ; -------------
00889B4C                            
00889B4C 082D 0004 0006             		btst	#bitSameNote,Chn_Type(a5)
00889B52 6600                       		bne.s	@PlayOnly
00889B54 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
00889B5A 6700                       		beq.s	@NoNote
00889B5C                            
00889B5C 426D 0004                  		clr.w	Chn_Portam(a5)
00889B60 1B5C 000B                                  move.b	(a4)+,Chn_Note(a5)
00889B64 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889B6A                            
00889B6A                            @PlayOnly:
00889B6A                            ; 		bsr	SMEG_ChannelRest
00889B6A                            
00889B6A                            @NoNote:
00889B6A                            
00889B6A                            ; -------------
00889B6A                            ; Instrument
00889B6A                            ; -------------
00889B6A                            
00889B6A 082D 0005 0006              		btst	#bitSameInst,Chn_Type(a5)
00889B70 6600                       		bne.s	@SameInst
00889B72 082D 0001 0006             		btst	#bitInst,Chn_Type(a5)
00889B78 6700                       		beq.s	@NoInst
00889B7A                            
00889B7A 1B5C 0008                  		move.b	(a4)+,Chn_Inst(a5)
00889B7E 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889B84                            
00889B84                            @SameInst:
00889B84 6100 0000                  		bsr	SMEG_SetVoice
00889B88                            @NoInst:
00889B88                            
00889B88                            ; -------------
00889B88                            ; Volume
00889B88                            ; -------------
00889B88                            
00889B88 082D 0006 0006              		btst	#bitSameVol,Chn_Type(a5)
00889B8E 6600                        		bne.s	@SameVol
00889B90 082D 0002 0006             		btst	#bitVolume,Chn_Type(a5)
00889B96 6700                       		beq.s	@NoVolume
00889B98                            
00889B98 7000                       		moveq 	#0,d0
00889B9A 101C                       		move.b 	(a4)+,d0
00889B9C 1B40 0009                  		move.b	d0,chn_vol(a5)
00889BA0 066E 0001 0022             		add.w 	#1,pattr_read(a6)
00889BA6                            @NoVolume:
00889BA6                            @SameVol:
00889BA6 6100 0000                   		bsr	@ChnVolume
00889BAA                             		
00889BAA                            ; -------------
00889BAA                            ; Effect
00889BAA                            ; -------------
00889BAA                            
00889BAA 082D 0007 0006              		btst	#bitSameEffect,Chn_Type(a5)
00889BB0 6600                        		bne.s	@SameEffect
00889BB2 082D 0003 0006             		btst	#bitEffect,Chn_Type(a5)
00889BB8 6700                       		beq.s	@NoEffect
00889BBA                            
00889BBA 1B5C 0002                  		move.b	(a4)+,Chn_Effect(a5)
00889BBE 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889BC4 1B5C 0003                  		move.b	(a4)+,Chn_Effect+1(a5)
00889BC8 066E 0001 0022             		add.w	#1,pattr_read(a6)
00889BCE                            @SameEffect:
00889BCE 6100 0000                  		bsr	@ChannelEffects
00889BD2                            @NoEffect:
00889BD2                            
00889BD2                            ; --------------
00889BD2                            ; Play the note
00889BD2                            ; --------------
00889BD2                            
00889BD2 082D 0004 0006              		btst	#bitSameNote,Chn_Type(a5)
00889BD8 6600                        		bne.s	@SameNote
00889BDA 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
00889BE0 6700 FE8A                  		beq	@Next
00889BE4                            @SameNote:
00889BE4 6100 0000                  		bsr	@ChannelPlay
00889BE8 6000 FE82                  		bra	@Next
00889BEC                            
00889BEC                            ; ================================================================
00889BEC                            ; -------------------------------
00889BEC                            ; PCM Frequencies
00889BEC                            ; -------------------------------
00889BEC                            
00889BEC                            		
00889BEC                            ; ================================================================
00889BEC                            ; -------------------------------
00889BEC                            ; Set Volume
00889BEC                            ; -------------------------------
00889BEC                            
00889BEC                            @ChnVolume:
00889BEC 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00889BF2 6700 0000                  		beq	@Return
00889BF6                            
00889BF6 0816 0000                  		btst	#bitPriority,(a6)
00889BFA 6600                       		bne.s	@SFX_ModeV
00889BFC 6100 0000                  		bsr	SMEG_FindPrioSlot
00889C00 4A13                         		tst.b	(a3)
00889C02 6600 0000                    		bne	@Return
00889C06                            @SFX_ModeV:
00889C06                            
00889C06 4A2D 0007                  		tst.b	Chn_ID(a5)
00889C0A 6B00 0000                  		bmi	@ChnVol_PSG
00889C0E 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00889C14 6C00 0000                  		bge	@ChnVol_PCM
00889C18                            		
00889C18 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
00889C1E 6600                       		bne.s	@NotSmplChk
00889C20 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
00889C26 6600 0000                  		bne	@Return
00889C2A                            @NotSmplChk:
00889C2A                            
00889C2A                            ; -------------------------------
00889C2A                            ; FM Volume
00889C2A                            ; -------------------------------
00889C2A                            
00889C2A 6100 0000                  		bsr	ChnlFM_srchIns
00889C2E 223C 7F7F 7F7F             		move.l	#$7F7F7F7F,d1
00889C34 0C42 FFFF                  		cmp.w	#-1,d2
00889C38 6700 0000                  		beq	@ForceOff
00889C3C 0802 0007                   		btst	#7,d2
00889C40 6600 0000                   		bne	@ForceOff
00889C44                             		
00889C44                            ;  		cmp.b	#64,chn_vol(a5)
00889C44                            ;  		bge	@Return
00889C44                            	
00889C44 D6FC 0004                   		adda.w	#4,a3
00889C48 2653                       		movea.l	(a3),a3
00889C4A D6FC 0015                    		adda	#$15,a3
00889C4E                            		
00889C4E 203C 4C44 4840             		move.l	#$4C444840,d0
00889C54 7200                        		moveq	#0,d1
00889C56 7400                        		moveq	#0,d2
00889C58 7600                        		moveq	#0,d3
00889C5A 162D 0007                   		move.b	chn_id(a5),d3
00889C5E 0243 0003                   		and.w	#%11,d3
00889C62                            
00889C62                             		;TODO: checar bien los TL
00889C62 122B 0003                   		move.b	3(a3),d1
00889C66 142D 0009                   		move.b	chn_vol(a5),d2
00889C6A 0402 0040                   		sub.b	#64,d2
00889C6E 9202                        		sub.b	d2,d1
00889C70 E189                        		lsl.l	#8,d1
00889C72                             		
00889C72 122B 0002                   		move.b	2(a3),d1
00889C76 142D 0009                   		move.b	chn_vol(a5),d2
00889C7A 0402 0040                   		sub.b	#64,d2
00889C7E 9202                        		sub.b	d2,d1
00889C80 E189                         		lsl.l	#8,d1
00889C82                              		
00889C82 122B 0001                   		move.b	1(a3),d1
00889C86 142D 0009                   		move.b	chn_vol(a5),d2
00889C8A 0402 0040                   		sub.b	#64,d2
00889C8E 9202                        		sub.b	d2,d1
00889C90 E189                         		lsl.l	#8,d1
00889C92                              		
00889C92 1213                        		move.b	(a3),d1
00889C94 142D 0009                   		move.b	chn_vol(a5),d2
00889C98 0402 0040                   		sub.b	#64,d2
00889C9C 9202                        		sub.b	d2,d1
00889C9E                            
00889C9E                            @ForceOff:
00889C9E 6100 0000                   		bsr	SMEG_Z80_OFF
00889CA2                            ;  		or.b	d3,d0
00889CA2                            ;  		bsr	SMEG_FM_FindWrite	;oops.
00889CA2 E088                        		lsr.l	#8,d0
00889CA4 E089                        		lsr.l	#8,d1
00889CA6 8003                        		or.b	d3,d0
00889CA8 6100 0000                    		bsr	SMEG_FM_FindWrite
00889CAC E088                        		lsr.l	#8,d0
00889CAE E089                        		lsr.l	#8,d1
00889CB0                            ;  		or.b	d3,d0
00889CB0                            ;   		bsr	SMEG_FM_FindWrite
00889CB0 E088                        		lsr.l	#8,d0
00889CB2 E089                        		lsr.l	#8,d1
00889CB4 8003                        		or.b	d3,d0
00889CB6 6100 0000                   		bsr	SMEG_FM_FindWrite
00889CBA 6000 0000                   		bra	SMEG_Z80_On
00889CBE                             	
00889CBE                            ; -------------------------------
00889CBE                            ; PSG Volume
00889CBE                            ; -------------------------------
00889CBE                            
00889CBE                            @ChnVol_PSG:
00889CBE 162D 0007                  		move.b	Chn_ID(a5),d3
00889CC2 0043 001F                  		or.w	#$1F,d3
00889CC6 102D 000B                  		move.b	chn_note(a5),d0
00889CCA 0C00 00FE                  		cmp.b	#-2,d0
00889CCE 6700 0000                  		beq	ChnPsg_Rest
00889CD2 0C00 00FF                  		cmp.b	#-1,d0
00889CD6 6700 0000                  		beq	ChnPsg_Rest
00889CDA 6000 0000                  		bra	ChnPsg_SetVol
00889CDE                            @Return:
00889CDE 4E75                       		rts
00889CE0                            
00889CE0                            ; -------------------------------
00889CE0                            ; PCM Volume
00889CE0                            ; -------------------------------
00889CE0                            
00889CE0                            @ChnVol_PCM:
00889CE0                               		
00889CE0 142D 0009                   		move.b	Chn_Vol(a5),d2
00889CE4 E64A                         		lsr.w	#3,d2
00889CE6                            ;  		and.w	#%11111110,d2
00889CE6                            ;  		moveq	#0,d1
00889CE6                            ;     		move.b	Chn_MainVol(a5),d1
00889CE6                            ;       	lsr.w	#4,d1
00889CE6                            ;      		lsl.w	#4,d1
00889CE6                            ;    		sub.b	d1,d2
00889CE6                            ;     		move.b	Chn_Vol(a5),d1
00889CE6                            ;       		lsr.w	#4,d1
00889CE6                            ;     		sub.b	d1,d2
00889CE6                                		
00889CE6 7200                           		moveq	#0,d1
00889CE8 122D 0007                      		move.b	Chn_ID(a5),d1
00889CEC 0241 000F                      		and.w	#$F,d1
00889CF0 13C1 00A1 5122                 		move.b	d1,(marsreg+comm2)
00889CF6 13C2 00A1 5123                		move.b	d2,(marsreg+comm2+1)
00889CFC 7004                         		moveq 	#marscall_SetVol,d0
00889CFE 6100 0000                    		bsr	SMEG_MARS_Call
00889D02                             		
00889D02 4E75                       		rts
00889D04                            		
00889D04                            ; ================================================================
00889D04                            ; -------------------------------
00889D04                            ; Channel effect
00889D04                            ; -------------------------------
00889D04                            
00889D04                            @ChannelEffects:
00889D04 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00889D0A 6700 0000                  		beq	@Null
00889D0E                            ; 		btst 	#bitPriority,(a6)
00889D0E                            ; 		bne.s	@SFX_Eff
00889D0E                            ; 		bsr	SMEG_FindPrioSlot
00889D0E                            ;   		tst.b	(a3)
00889D0E                            ;   		bne	@Return
00889D0E                            ; @SFX_Eff:
00889D0E                            
00889D0E 7000                       		moveq	#0,d0
00889D10 102D 0002                  		move.b	Chn_Effect(a5),d0
00889D14 D040                       		add.w	d0,d0
00889D16 323B 0000                  		move.w	@EffectList(pc,d0.w),d1
00889D1A 4EFB 1000                  		jmp	@EffectList(pc,d1.w)
00889D1E                            		
00889D1E                            ; -------------------------------
00889D1E                            
00889D1E 0000                       @EffectList:	dc.w	@Null-@EffectList
00889D20 0000                       		dc.w	@Flag_A-@EffectList
00889D22 0000                       		dc.w	@Null-@EffectList
00889D24 0000                       		dc.w	@Null-@EffectList
00889D26 0000                       		dc.w	@Flag_D-@EffectList
00889D28 0000                       		dc.w	@Flag_E-@EffectList
00889D2A 0000                       		dc.w	@Flag_F-@EffectList
00889D2C 0000                       		dc.w	@Null-@EffectList
00889D2E 0000                       		dc.w	@Null-@EffectList
00889D30 0000                       		dc.w	@Null-@EffectList
00889D32 0000                       		dc.w	@Null-@EffectList
00889D34 0000                       		dc.w	@Null-@EffectList
00889D36 0000                       		dc.w	@Null-@EffectList
00889D38 0000                       		dc.w	@Flag_M-@EffectList
00889D3A 0000                       		dc.w	@Null-@EffectList
00889D3C 0000                       		dc.w	@Null-@EffectList
00889D3E 0000                       		dc.w	@Null-@EffectList
00889D40 0000                       		dc.w	@Null-@EffectList
00889D42 0000                       		dc.w	@Null-@EffectList
00889D44 0000                       		dc.w	@Null-@EffectList
00889D46 0000                       		dc.w	@Null-@EffectList
00889D48 0000                       		dc.w	@Null-@EffectList
00889D4A 0000                       		dc.w	@Null-@EffectList
00889D4C 0000                       		dc.w	@Null-@EffectList
00889D4E 0000                       		dc.w	@Flag_X-@EffectList
00889D50 0000                       		dc.w	@Null-@EffectList
00889D52 0000                       		dc.w	@Flag_Z-@EffectList
00889D54                            		even
00889D54                            
00889D54                            ; -------------------------------
00889D54                            ; Null effect
00889D54                            ; -------------------------------
00889D54                            
00889D54                            @Null:
00889D54 4E75                       		rts
00889D56                            
00889D56                            ; -------------------------------
00889D56                            ; Flag A - Set Tick rate
00889D56                            ; -------------------------------
00889D56                            
00889D56                            @Flag_A:
00889D56 7000                       		moveq	#0,d0
00889D58 426E 001C                  		clr.w	TicksSet(a6)
00889D5C 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00889D60 0440 0001                  		sub.w	#1,d0
00889D64 1D40 001D                  		move.b	d0,TicksSet+1(a6)
00889D68 4E75                       		rts
00889D6A                            
00889D6A                            ; -------------------------------
00889D6A                            ; Flag D - Volume slide
00889D6A                            ; -------------------------------
00889D6A                            
00889D6A                            @Flag_D:
00889D6A 4E75                        rts
00889D6C                            ; 		moveq	#0,d0
00889D6C                            ; 		moveq	#0,d1
00889D6C                            ; 		move.b	Chn_Effect+1(a5),d0
00889D6C                            ; 		tst.b	Chn_ID(a5)
00889D6C                            ; 		bpl	@NotPSG
00889D6C                            ; 		lsl.w	#4,d0
00889D6C                            ; @NotPSG:
00889D6C                            ; 		move.b	Chn_Vol(a5),d1
00889D6C                            ; 		add.b	d0,d1
00889D6C                            ; 		move.b	d1,Chn_Vol(a5)
00889D6C                            ; 		bra	@ChnVolume
00889D6C                            
00889D6C                            ; -------------------------------
00889D6C                            ; Flag E - Portametro down
00889D6C                            ; -------------------------------
00889D6C                            
00889D6C                            @Flag_E:
00889D6C 7000                       		moveq	#0,d0
00889D6E 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00889D72 0640 0001                  		add.w	#1,d0
00889D76 4440                       		neg.w	d0
00889D78 6000                       		bra.s	@DoPortam
00889D7A                            
00889D7A                            ; -------------------------------
00889D7A                            ; Flag F - Portametro up
00889D7A                            ; -------------------------------
00889D7A                            
00889D7A                            @Flag_F:
00889D7A 7000                       		moveq	#0,d0
00889D7C 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00889D80 0640 0001                  		add.w	#1,d0
00889D84                            		
00889D84                            ; ---------------------
00889D84                            
00889D84                            @DoPortam:
00889D84 382D 0004                  		move.w	Chn_Portam(a5),d4
00889D88 4A44                       		tst.w	d4
00889D8A 6700 FF52                  		beq	@return
00889D8E                            		
00889D8E 4A2D 0007                  		tst.b	Chn_ID(a5)
00889D92 6B00                       		bmi.s	@psg_mode
00889D94 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00889D9A 6C00                       		bge.s	@pcm_mode
00889D9C                            		
00889D9C E548                       		lsl.w	#2,d0
00889D9E D840                       		add.w	d0,d4
00889DA0 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00889DA4 6000 0000                  		bra	SMEG_SetFreqFM
00889DA8                            		
00889DA8                            @psg_mode:
00889DA8 D040                       		add.w	d0,d0
00889DAA 9840                       		sub.w	d0,d4
00889DAC 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00889DB0 3004                       		move.w	d4,d0
00889DB2 122D 0007                  		move.b	Chn_ID(a5),d1
00889DB6 6000 0000                  		bra	ChnPsg_NoteFreq
00889DBA                            		
00889DBA                            @pcm_mode:
00889DBA 4E75                       		rts
00889DBC                            		
00889DBC                            ; -------------------------------
00889DBC                            ; Flag M - Set Channel Volume
00889DBC                            ; -------------------------------
00889DBC                            
00889DBC                            @Flag_M:
00889DBC 4E75                        rts
00889DBE                             
00889DBE                            ; 		moveq	#0,d0
00889DBE                            ; 		move.b	Chn_Effect+1(a5),d0
00889DBE                            ; 	;	tst.b	Chn_ID(a5)
00889DBE                            ; 	;	bpl	@NotPSG_H
00889DBE                            ; 
00889DBE                            ; 		neg.w	d0
00889DBE                            ; 		sub.w	#$D0,d0
00889DBE                            ; ;@NotPSG_H:
00889DBE                            ; 		move.b	d0,Chn_MainVol(a5)
00889DBE                            ; 		bra	@ChnVolume
00889DBE                            
00889DBE                            ; -------------------------------
00889DBE                            ; Flag X - Stereo
00889DBE                            ; -------------------------------
00889DBE                            
00889DBE                            @Flag_X:
00889DBE                            ; 		tst.b	Chn_ID(a5)
00889DBE                            ; 		bmi	@Null
00889DBE                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
00889DBE                            ; 		bge	@PCM_Pan
00889DBE                            		
00889DBE 1B6D 0003 000C             		move.b	Chn_Effect+1(a5),Chn_Pan(a5)
00889DC4 4E75                       		rts
00889DC6                            		
00889DC6                            ; 		moveq	#0,d0
00889DC6                            ; 		move.w	#$C0,d0
00889DC6                            ;                 cmp.b	#$80,Chn_Effect+1(a5)
00889DC6                            ;                 beq.s	@SetPan
00889DC6                            ; 		tst.b	Chn_Effect+1(a5)
00889DC6                            ; 		bmi.s	@Right
00889DC6                            ; 		bpl.s	@Left
00889DC6                            ; @SetPan:
00889DC6                            ; 		move.b	d0,Chn_Pan(a5)
00889DC6                            ; 		rts
00889DC6                            ; @Left:
00889DC6                            ; 		move.w	#$80,d0
00889DC6                            ; 		bra.s	@SetPan
00889DC6                            ; @Right:
00889DC6                            ; 		move.w	#$40,d0
00889DC6                            ; 		bra.s	@SetPan
00889DC6                            
00889DC6                            ; ; -------------------------------
00889DC6                            ; ; PCM Panning
00889DC6                            ; ; -------------------------------
00889DC6                            ; 
00889DC6                            ; @PCM_Pan:
00889DC6                            ; 		if MCD
00889DC6                            ; 		
00889DC6                            ; 		moveq	#0,d0
00889DC6                            ; 		move.b	#%11001100,d0				;TODO: dejarlo así
00889DC6                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
00889DC6                            ; 		beq.s	@Return2
00889DC6                            ;                  
00889DC6                            ;  		tst.b	Chn_Effect+1(a5)
00889DC6                            ;  		bmi.s	@Right2
00889DC6                            ; 		bpl.s	@Left2
00889DC6                            ; 		bra	@Return2
00889DC6                            ; @Right2:
00889DC6                            ;  		move.b	#%10000000,d0
00889DC6                            ;  		bra	@Return2
00889DC6                            ; @Left2:
00889DC6                            ; 		move.b	#%00001000,d0
00889DC6                            ; @Return2:
00889DC6                            ; 		move.b	d0,Chn_Pan(a5)
00889DC6                            ; 
00889DC6                            ; ; -------------------------------------------------
00889DC6                            ; 
00889DC6                            ;  		elseif MARS
00889DC6                            ;  
00889DC6                            ; 		move.w	#%11000000,d0
00889DC6                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
00889DC6                            ; 		beq	@Cont
00889DC6                            ;  		tst.b	Chn_Effect+1(a5)
00889DC6                            ;  		bmi.s	@pwmRight
00889DC6                            ; 		bpl.s	@pwmLeft
00889DC6                            ; 		bra	@Cont
00889DC6                            ;  		
00889DC6                            ; @pwmRight:
00889DC6                            ;  		move.w	#%01000000,d0
00889DC6                            ;  		bra.s	@Cont
00889DC6                            ; @pwmLeft:
00889DC6                            ; 		move.w	#%10000000,d0
00889DC6                            ; 
00889DC6                            ; @Cont:
00889DC6                            ; 		move.b	d0,Chn_Pan(a5)   		
00889DC6                            ; 		endif
00889DC6                            ; 		rts
00889DC6                            
00889DC6                            ; ======================================================
00889DC6                            ; -------------------------------
00889DC6                            ; Flag Z
00889DC6                            ; -------------------------------
00889DC6                            
00889DC6                            @Flag_Z:
00889DC6 7000                       		moveq	#0,d0
00889DC8 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00889DCC E848                       		lsr.w	#4,d0
00889DCE D040                       		add.w	d0,d0
00889DD0 323B 0000                  		move.w	@HashList(pc,d0.w),d1
00889DD4 102D 0003                  		move.b	Chn_Effect+1(a5),d0		;d0 - $0-$F argument
00889DD8 0200 000F                  		and.b	#$F,d0
00889DDC 4EFB 1000                  		jmp	@HashList(pc,d1.w)
00889DE0                            
00889DE0 FF74                       @HashList:	dc.w	@Null-@HashList		;$00
00889DE2 0000                       		dc.w	@FM_Key-@HashList		;$10 - FM Keys ON/OFF
00889DE4 FF74                       		dc.w	@Null-@HashList			;$20
00889DE6 FF74                       		dc.w	@Null-@HashList			;$30
00889DE8 0000                       		dc.w	@PSG-@HashList			;$40 - PSG Settings
00889DEA FF74                       		dc.w	@Null-@HashList			;$50
00889DEC FF74                       		dc.w	@Null-@HashList			;$60
00889DEE FF74                       		dc.w	@Null-@HashList			;$70
00889DF0 FF74                       		dc.w	@Null-@HashList			;$80
00889DF2 FF74                       		dc.w	@Null-@HashList			;$90
00889DF4 FF74                       		dc.w	@Null-@HashList			;$A0
00889DF6 FF74                       		dc.w	@Null-@HashList			;$B0
00889DF8 FF74                       		dc.w	@Null-@HashList			;$C0
00889DFA FF74                       		dc.w	@Null-@HashList			;$D0
00889DFC FF74                       		dc.w	@Null-@HashList			;$E0
00889DFE 0000                       		dc.w	@FixSfx-@HashList		;$F0 - Finish SFX flag (SFX only)
00889E00                            		even
00889E00                            
00889E00                            ; -------------------------------
00889E00                            
00889E00                            @DacStatus:
00889E00 4E75                        rts
00889E02                            
00889E02                            ; -------------------------------
00889E02                            
00889E02                            @FM_Key:
00889E02 0240 000F                  		and.w	#$F,d0
00889E06 E948                       		lsl.w	#4,d0
00889E08 1B40 000D                  		move.b	d0,Chn_FM_Key(a5)
00889E0C 4E75                       		rts
00889E0E                            
00889E0E                            ; -------------------------------
00889E0E                            
00889E0E                            @PSG:
00889E0E 4E75                        rts
00889E10                            
00889E10                            ; -------------------------------
00889E10                            
00889E10                            @FixSfx:
00889E10                            ;    		btst	#bitPriority,(a6)
00889E10                            ;   		bne	@Return
00889E10                            		
00889E10                            ;  		lea	(RAM_SMEG_Buffer),a3
00889E10                            ;  		move.b	snd_flagsBGM(a3),snd_flags(a3)
00889E10                            ; 		moveq 	#0,d0
00889E10                            ;  		move.b	PsgLast(a3),d0
00889E10                            ; 		add.w	#$E0,d0
00889E10                            ; 		bsr	@PutPSG
00889E10                            
00889E10                            ;  		moveq	#0,d0
00889E10                            ;  		move.b	LastPattChn(a6),d0
00889E10                            ; 		bsr	SMEG_FindPrioSlot
00889E10                            ;   		bclr	#0,(a3)
00889E10                             		
00889E10                            ;   		bclr	#bitSfxOn,(a6)				;SFX finished playing
00889E10 4E75                       		rts
00889E12                            		
00889E12                            ; ================================================================
00889E12                            ; -------------------------------
00889E12                            ; Channel play
00889E12                            ; -------------------------------
00889E12                            
00889E12                            @ChannelPlay:	
00889E12 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00889E18 6700 0000                  		beq	@Disabled
00889E1C                            		
00889E1C                            ;                 moveq	#0,d0
00889E1C                            ; 		move.b	Chn_Note(a5),d0
00889E1C                            ; 		sub.w	#1,Chn_Portam(a5)
00889E1C                            ; 		tst.b	Chn_Portam(a5)
00889E1C                            ; 		beq.s	@NoUp
00889E1C                            ; 		add.b	Chn_Portam(a5),d0
00889E1C                            ; 		bra.s	@NoDown
00889E1C                            ; @NoUp:
00889E1C                            ; 		tst.b	Chn_Portam+1(a5)
00889E1C                            ; 		beq.s	@NoDown
00889E1C                            ; 		sub.b	Chn_Portam+1(a5),d0
00889E1C                            ; @NoDown:
00889E1C                            
00889E1C                            ; --------------------------------
00889E1C                            
00889E1C                            ; BGM: Block channel
00889E1C                            
00889E1C 0816 0000                  		btst 	#bitPriority,(a6)
00889E20 6600                       		bne.s	@SFX_Check
00889E22 6100 0000                  		bsr	SMEG_FindPrioSlot
00889E26 4A13                         		tst.b	(a3)
00889E28 6600 FEB4                    		bne	@Return
00889E2C                              		
00889E2C                            ; --------------------------------
00889E2C                            
00889E2C                            ; SFX: Check NoteOff/NoteCut
00889E2C                            ; then clear flag
00889E2C                            
00889E2C                            @SFX_Check:
00889E2C 0816 0000                  		btst 	#bitPriority,(a6)
00889E30 6700                       		beq.s	@NotSFX
00889E32                            ; 		cmp.b	#-1,chn_note(a5)
00889E32                            ; 		beq	@DoIt
00889E32 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
00889E38 6600 0000                  		bne	@NotSFX
00889E3C                            @DoIt:
00889E3C 6100 0000                  		bsr	SMEG_FindPrioSlot
00889E40 4213                         		clr.b	(a3)
00889E42                            @NotSFX:
00889E42                            
00889E42                            ; --------------------------------
00889E42                            
00889E42 4A2D 0007                  		tst.b	Chn_ID(a5)
00889E46 6B00 0000                  		bmi	Chnl_PSG
00889E4A 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00889E50 6C00 0000                  		bge	@ChannelPlay_PCM
00889E54 0C2D 0002 0007             		cmp.b	#FM_3,Chn_ID(a5)
00889E5A 6700 0000                  		beq	@Chn3_ChkSpecial
00889E5E 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
00889E64 6700 0000                  		beq	@Chn6_ChkSmpl
00889E68 6000 0000                  		bra	@ChnPlay_FM
00889E6C                            		
00889E6C                            ; -------------------------------
00889E6C                            ; Play FM6 or DAC sample
00889E6C                            ; -------------------------------
00889E6C                            
00889E6C                            @Chn6_ChkSmpl:
00889E6C 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
00889E72 6700 0000                  		beq	@ChnPlay_FM6
00889E76 0C2D 00FF 000B             		cmp.b	#-1,chn_note(a5)
00889E7C 6700 0000                  		beq	@StopSmpl
00889E80 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
00889E86 6700 0000                  		beq	@StopSmpl
00889E8A                            		
00889E8A 7028                       		moveq	#$28,d0
00889E8C 7206                       		moveq	#6,d1
00889E8E 6100 0000                   		bsr	SMEG_Z80_Off
00889E92 6100 0000                  		bsr	FM_RegWrite_1
00889E96 6100 0000                  		bsr	SMEG_FM_SetPan
00889E9A 6100 0000                  		bsr	SMEG_Z80_On
00889E9E                            		
00889E9E                            ; 		btst 	#bitPriority,(a6)
00889E9E                            ; 		beq.s	@MusicPrio3
00889E9E                            ; 		bsr	SMEG_FindPrioSlot
00889E9E                            ;   		btst	#0,(a3)
00889E9E                            ;   		bne	@return
00889E9E                            ; @MusicPrio3:
00889E9E 6000 0000                  		bra	Audio_Sample_Play
00889EA2                            
00889EA2                            ; Stop
00889EA2                            
00889EA2                            @StopSmpl:
00889EA2                            ; 		btst 	#bitPriority,(a6)
00889EA2                            ; 		bne.s	@NotSfxDAC
00889EA2                            ; 		bsr	SMEG_FindPrioSlot
00889EA2                            ;   		bclr	#0,(a3)
00889EA2                            ; @NotSfxDAC:
00889EA2 6000 0000                  		bra	Audio_Sample_Stop
00889EA6                            		
00889EA6                            ; -------------------------------
00889EA6                            ; Play FM6 Normally
00889EA6                            ; -------------------------------
00889EA6                            
00889EA6                            @ChnPlay_FM6:
00889EA6 103C 002B                  		move.b	#$2B,d0
00889EAA 123C 0000                  		move.b	#$00,d1
00889EAE 6100 0000                  		bsr	SMEG_Z80_Off
00889EB2 6100 0000                  		bsr	FM_RegWrite_1
00889EB6 6100 0000                  		bsr	SMEG_Z80_On
00889EBA 6100 0000                  		bsr	Audio_Sample_Stop
00889EBE 6000 0000                  		bra	@ChnPlay_FM
00889EC2                            		
00889EC2                            ; -------------------------------
00889EC2                            ; Play FM3 Normally
00889EC2                            ; -------------------------------
00889EC2                            
00889EC2                            @Chn3_ChkSpecial:
00889EC2 6100 0000                  		bsr	SMEG_Z80_Off
00889EC6 6100 0000                  		bsr	SMEG_FM_SetPan
00889ECA 6100 0000                  		bsr	SMEG_Z80_On
00889ECE                            		
00889ECE 082E 0003 0001             		btst	#bitSpecial3,snd_flags(a6)
00889ED4 6700 0000                  		beq	@NoSpecial3
00889ED8                            		
00889ED8 6100 0000                  		bsr	ChnlFM_srchIns
00889EDC 0C42 FFFF                  		cmp.w	#-1,d2
00889EE0 6700 0000                  		beq	@NoSpecial3
00889EE4 0802 0006                   		btst	#6,d2
00889EE8 6700 0000                   		beq	@NoSpecial3
00889EEC                            		
00889EEC                            ;   		moveq	#$22,d0
00889EEC                            ;  		move.w	#%00001011,d1
00889EEC                            ; 		bsr	FM_RegWrite_1
00889EEC                            		
00889EEC 7027                         		moveq	#$27,d0		;CH3 enable
00889EEE 323C 0040                   		move.w	#%01000000,d1
00889EF2 6100 0000                   		bsr	SMEG_Z80_Off
00889EF6 6100 0000                  		bsr	FM_RegWrite_1
00889EFA 6100 0000                  		bsr	SMEG_Z80_On
00889EFE                            		
00889EFE 203C A9AD AAAE              		move.l	#$A9ADAAAE,d0
00889F04 322B 000E                   		move.w	$E(a3),d1
00889F08 E059                        		ror.w	#8,d1
00889F0A 6100 0000                   		bsr	SMEG_Z80_Off
00889F0E 6100 0000                  		bsr	FM_RegWrite_1
00889F12 E088                       		lsr.l	#8,d0
00889F14 E089                       		lsr.l	#8,d1
00889F16 6100 0000                  		bsr	FM_RegWrite_1
00889F1A E088                       		lsr.l	#8,d0
00889F1C 322B 000C                   		move.w	$C(a3),d1
00889F20 E059                        		ror.w	#8,d1
00889F22 6100 0000                  		bsr	FM_RegWrite_1
00889F26 E088                       		lsr.l	#8,d0
00889F28 E089                       		lsr.l	#8,d1
00889F2A 6100 0000                  		bsr	FM_RegWrite_1	
00889F2E 6100 0000                    		bsr	SMEG_Z80_On
00889F32                              		
00889F32 203C A2A6 A8AC              		move.l	#$A2A6A8AC,d0
00889F38 322B 000A                   		move.w	$A(a3),d1
00889F3C E059                        		ror.w	#8,d1
00889F3E 6100 0000                   		bsr	SMEG_Z80_Off
00889F42 6100 0000                  		bsr	FM_RegWrite_1
00889F46 E088                       		lsr.l	#8,d0
00889F48 E089                       		lsr.l	#8,d1
00889F4A 6100 0000                  		bsr	FM_RegWrite_1
00889F4E E088                       		lsr.l	#8,d0
00889F50 322B 0008                   		move.w	8(a3),d1
00889F54 E059                        		ror.w	#8,d1
00889F56 6100 0000                  		bsr	FM_RegWrite_1
00889F5A E088                       		lsr.l	#8,d0
00889F5C E089                       		lsr.l	#8,d1
00889F5E 6100 0000                  		bsr	FM_RegWrite_1
00889F62 6100 0000                  		bsr	SMEG_Z80_On
00889F66                            		
00889F66 7028                       		moveq	#$28,d0
00889F68 7200                       		moveq	#0,d1
00889F6A 122D 000D                  		move.b	Chn_FM_Key(a5),d1
00889F6E 822D 0007                  		or.b	Chn_ID(a5),d1
00889F72 6100 0000                  		bsr	SMEG_Z80_Off
00889F76 6100 0000                  		bsr	FM_RegWrite_1
00889F7A 6000 0000                   		bra	SMEG_Z80_On
00889F7E                             		
00889F7E                            @NoSpecial3:
00889F7E 7200                       		moveq	#0,d1
00889F80 7027                         		moveq	#$27,d0
00889F82 6100 0000                   		bsr	SMEG_Z80_Off
00889F86 6100 0000                  		bsr	FM_RegWrite_1
00889F8A 6100 0000                   		bsr	SMEG_Z80_On
00889F8E                            		
00889F8E                            ; -------------------------------
00889F8E                            ; Play FM1-FM5 normally
00889F8E                            ; -------------------------------
00889F8E                            
00889F8E                            @ChnPlay_FM:
00889F8E 6100 0000                  		bsr	SMEG_Z80_Off
00889F92 6100 0000                  		bsr	SMEG_FM_SetPan
00889F96 6100 0000                  		bsr	SMEG_Z80_On
00889F9A                            		
00889F9A 7000                        		moveq	#0,d0
00889F9C 102D 000B                  		move.b	chn_note(a5),d0
00889FA0 0C00 00FF                  		cmp.b	#-1,d0
00889FA4 6700 0000                  		beq	SMEG_FM_KeysOff
00889FA8 0C00 00FE                  		cmp.b	#-2,d0
00889FAC 6700 0000                  		beq	SMEG_FM_TotLvlOff
00889FB0                            		
00889FB0 6100 0000                  		bsr	SMEG_FM_KeysOff
00889FB4                            		
00889FB4 7000                       		moveq	#0,d0
00889FB6 7200                       		moveq	#0,d1
00889FB8 102D 000B                  		move.b	chn_note(a5),d0
00889FBC D040                       		add.w	d0,d0
00889FBE 45F9 0000 0000              		lea	(FreqList_FM),a2
00889FC4 3832 0000                  		move.w	(a2,d0.w),d4
00889FC8 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00889FCC 6000 0000                  		bra	SMEG_SetFreqFM
00889FD0                            @Disabled:
00889FD0 4E75                       		rts
00889FD2                            
00889FD2                            ; -------------------------------
00889FD2                            ; Play PCM
00889FD2                            ; -------------------------------
00889FD2                            
00889FD2                            @ChannelPlay_PCM:	
00889FD2                            ; 		if MCD
00889FD2                            ; 		
00889FD2                            ; 		tst.l	SongPcmSamp(a6)
00889FD2                            ; 		beq.s	@ReturnPCM
00889FD2                            ; 		bmi.s	@ReturnPCM
00889FD2                            ; 		
00889FD2                            ;  		moveq	#0,d1
00889FD2                            ;  		move.b	Chn_ID(a5),d1
00889FD2                            ;    		and.w	#$F,d1
00889FD2                            ;  		move.b	d1,($A12000+CommDataM)
00889FD2                            ;  		move.b	Chn_Pan(a5),d1
00889FD2                            ;  		move.b	d1,($A12000+CommDataM+1)
00889FD2                            ;  		moveq	#CdTask_SetPan,d0
00889FD2                            ;  		bsr	SMEG_CD_Call
00889FD2                            ;  		
00889FD2                            ; 		moveq	#0,d1
00889FD2                            ; 		move.b	Chn_ID(a5),d1
00889FD2                            ; 		and.b	#$F,d1
00889FD2                            ; 		move.b	d1,($A12000+CommDataM)
00889FD2                            ; 		move.w	Chn_Freq(a5),($A12000+CommDataM+2)
00889FD2                            ; 		moveq	#CdTask_SetFreq,d0
00889FD2                            ; 		bsr	SMEG_CD_Call
00889FD2                            ; 		bset	d1,PcmChnOnOff(a6)
00889FD2                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
00889FD2                            ; 		moveq	#CdTask_SetOnOff,d0
00889FD2                            ; 		bsr	SMEG_CD_Call
00889FD2                            ; 		
00889FD2                            ; @ReturnPCM:
00889FD2                            ;  		elseif MARS
00889FD2                            ; 
00889FD2                            ; 		tst.l	SongPcmSamp(a6)
00889FD2                            ; 		beq.s	@ReturnPCM
00889FD2                            ; 		bmi.s	@ReturnPCM
00889FD2                            ; 		
00889FD2                            ;   		moveq	#0,d1
00889FD2                            ;   		moveq	#0,d2
00889FD2                            ;        		move.b	Chn_ID(a5),d1
00889FD2                            ;      		and.w	#$F,d1
00889FD2                            ;       		or.b	Chn_Pan(a5),d1
00889FD2                            ;       		move.b	Chn_Note(a5),d2
00889FD2                            ;   		move.b	d1,(marsreg+comm2)			; Pan+Channel set
00889FD2                            ;   		move.b	d2,(marsreg+comm2+1)			; Note
00889FD2                            ;   		moveq 	#marscall_Play,d0
00889FD2                            ;   		bsr	SMEG_MARS_Call
00889FD2                            ; @ReturnPCM:
00889FD2                            ;  		endif
00889FD2                             		
00889FD2 4E75                       		rts
00889FD4                            
00889FD4                            ; --------------------------
00889FD4                            ; Set FM Frequency
00889FD4                            ; autodetected channel
00889FD4                            ; 
00889FD4                            ; d4 - Freq
00889FD4                            ; --------------------------
00889FD4                            
00889FD4                            SMEG_SetFreqFM:
00889FD4 7A00                       		moveq	#0,d5
00889FD6 1A2D 0007                  		move.b	Chn_ID(a5),d5
00889FDA 0C05 0004                  		cmp.b	#4,d5
00889FDE 6D00                       		blt.s	@FirstFM
00889FE0 0405 0004                  		sub.b	#4,d5
00889FE4                            @FirstFM:
00889FE4 303C 00A4                  		move.w	#$A4,d0
00889FE8 D005                       		add.b	d5,d0
00889FEA 7200                       		moveq	#0,d1
00889FEC E15C                       		rol.w	#8,d4
00889FEE 1204                       		move.b	d4,d1
00889FF0                            		
00889FF0 6100 0000                  		bsr	SMEG_Z80_Off
00889FF4 6100 0000                  		bsr	SMEG_FM_FindWrite
00889FF8 303C 00A0                  		move.w	#$A0,d0
00889FFC D005                       		add.b	d5,d0
00889FFE 7200                       		moveq	#0,d1
0088A000 E15C                       		rol.w	#8,d4
0088A002 1204                       		move.b	d4,d1
0088A004 6100 0000                  		bsr	SMEG_FM_FindWrite
0088A008                            
0088A008 7028                       		moveq	#$28,d0
0088A00A 7200                       		moveq	#0,d1
0088A00C 122D 000D                  		move.b	Chn_FM_Key(a5),d1
0088A010 822D 0007                  		or.b	Chn_ID(a5),d1
0088A014 6100 0000                  		bsr	FM_RegWrite_1
0088A018 6000 0000                  		bra	SMEG_Z80_On
0088A01C                            		
0088A01C                            ; Turn Total Level (the volume) off 
0088A01C                            
0088A01C                            SMEG_FM_TotLvlOff:
0088A01C 162D 0007                   		move.b	chn_id(a5),d3
0088A020 0243 0003                   		and.w	#%11,d3
0088A024 203C 4C44 4840             		move.l	#$4C444840,d0
0088A02A 323C 007F                  		move.w	#$7F,d1
0088A02E 6100 0000                   		bsr	SMEG_Z80_OFF
0088A032 8003                        		or.b	d3,d0
0088A034 6100 0000                   		bsr	SMEG_FM_FindWrite	;oops.
0088A038 E088                        		lsr.l	#8,d0
0088A03A 8003                        		or.b	d3,d0
0088A03C 6100 0000                    		bsr	SMEG_FM_FindWrite
0088A040 E088                        		lsr.l	#8,d0
0088A042 8003                        		or.b	d3,d0
0088A044 6100 0000                    		bsr	SMEG_FM_FindWrite
0088A048 E088                        		lsr.l	#8,d0
0088A04A 8003                        		or.b	d3,d0
0088A04C 6100 0000                   		bsr	SMEG_FM_FindWrite
0088A050 6100 0000                   		bsr	SMEG_Z80_On
0088A054                             		
0088A054                            ; Turn FM Keys off
0088A054                            
0088A054                            SMEG_FM_KeysOff:
0088A054 7028                       		moveq	#$28,d0
0088A056 7200                       		moveq	#0,d1
0088A058 D22D 0007                  		add.b	Chn_ID(a5),d1
0088A05C 6100 0000                   		bsr	SMEG_Z80_Off
0088A060 6100 0000                  		bsr	FM_RegWrite_1
0088A064 6000 0000                  		bra	SMEG_Z80_On
0088A068                            		
0088A068                            ; ----------------------------
0088A068                            ; PSG Channels
0088A068                            ; ----------------------------
0088A068                            
0088A068                            Chnl_PSG:
0088A068 122D 0007                  		move.b	Chn_ID(a5),d1
0088A06C 0C2D 00E0 0007             		cmp.b	#NOISE,Chn_ID(a5)
0088A072 6700                       		beq.s	Chnl_Noise
0088A074                            
0088A074 3601                       		move.w	d1,d3
0088A076 0043 001F                  		or.w	#$1F,d3
0088A07A 102D 000B                  		move.b	chn_note(a5),d0
0088A07E 0C00 00FE                  		cmp.b	#-2,d0
0088A082 6700                       		beq.s	ChnPsg_Rest
0088A084 0C00 00FF                  		cmp.b	#-1,d0
0088A088 6700                       		beq.s	ChnPsg_Rest
0088A08A                            		
0088A08A 45F9 0000 0000             		lea	(FreqList_PSG),a2
0088A090 D040                       		add.w	d0,d0
0088A092 3032 0000                  		move.w	(a2,d0.w),d0
0088A096 3B40 0004                  		move.w	d0,Chn_Portam(a5)
0088A09A 6100 0000                  		bsr	ChnPsg_NoteFreq
0088A09E                            		
0088A09E                            ChnPsg_SetVol:
0088A09E 0043 0010                  		or.w	#$10,d3
0088A0A2 0043 000F                  		or.w	#$F,d3
0088A0A6 4A2D 0009                  		tst.b	chn_vol(a5)
0088A0AA 6700                       		beq.s	ChnPsg_DoVol
0088A0AC 0243 00F0                  		and.w	#$F0,d3
0088A0B0 0C2D 0040 0009             		cmp.b	#64,chn_vol(a5)
0088A0B6 6C00                         		bge.s	ChnPsg_DoVol
0088A0B8 7000                         		moveq	#0,d0
0088A0BA 102D 0009                     		move.b	chn_vol(a5),d0
0088A0BE 4440                        		neg.w	d0
0088A0C0 E448                          		lsr.w	#2,d0
0088A0C2 0240 000F                    		and.w	#%1111,d0
0088A0C6 8640                         		or.w	d0,d3
0088A0C8                            
0088A0C8                            
0088A0C8                            ChnPsg_DoVol:
0088A0C8 13C3 00C0 0011              		move.b	d3,(sound_psg)
0088A0CE                            Chnl_Return:
0088A0CE 4E75                       		rts
0088A0D0                            		
0088A0D0                            ChnPsg_Rest:
0088A0D0 61F6                        		bsr.s	ChnPsg_DoVol
0088A0D2                            ; 		btst 	#bitPriority,(a6)
0088A0D2                            ; 		bne.s	Chnl_Return
0088A0D2                            ; 		bsr	SMEG_FindPrioSlot
0088A0D2                            ;   		bclr	#0,(a3)
0088A0D2 4E75                         		rts
0088A0D4                              		
0088A0D4                            ; ----------------------------
0088A0D4                            ; PSG Noise channel
0088A0D4                            ; ----------------------------
0088A0D4                            
0088A0D4                            Chnl_NOISE:
0088A0D4 246E 0010                  		movea.l	snd_instr(a6),a2
0088A0D8 302A 0004                  		move.w	instDNoise(a2),d0
0088A0DC D4C0                       		adda	d0,a2
0088A0DE                            		
0088A0DE 303C 0000                   		move.w	#%000,d0
0088A0E2                            @next:
0088A0E2 4A52                       		tst.w	(a2)
0088A0E4 6B00                       		bmi.s	@default
0088A0E6 7400                       		moveq	#0,d2
0088A0E8 142D 0008                  		move.b	chn_inst(a5),d2
0088A0EC B452                       		cmp.w	(a2),d2
0088A0EE 6700                       		beq.s	@found
0088A0F0 D4FC 0004                  		adda	#4,a2
0088A0F4 60EC                       		bra.s	@next
0088A0F6                            @found:
0088A0F6 302A 0002                   		move.w	2(a2),d0
0088A0FA                            
0088A0FA                            @default:
0088A0FA 323C 00E0                  		move.w	#$E0,d1
0088A0FE 3601                       		move.w	d1,d3
0088A100 0043 001F                  		or.w	#$1F,d3
0088A104                            
0088A104 142D 000B                  		move.b	chn_note(a5),d2
0088A108 0C02 00FF                  		cmp.b	#-1,d2
0088A10C 67C2                       		beq.s	ChnPsg_Rest
0088A10E 0C02 00FE                  		cmp.b	#-2,d2
0088A112 67BC                       		beq.s	ChnPsg_Rest
0088A114                            		
0088A114 08AE 0002 0001             		bclr	#bitTone3,snd_flags(a6)
0088A11A 0C40 0003                  		cmp.w	#%011,d0
0088A11E 6700                       		beq.s	@valdnoise
0088A120 0C40 0007                  		cmp.w	#%111,d0
0088A124 6600                       		bne.s	@deftone
0088A126                            @valdnoise:
0088A126 08EE 0002 0001             		bset	#bitTone3,snd_flags(a6)
0088A12C 13FC 00DF 00C0 0011        		move.b	#$C0|$1F,(sound_psg)
0088A134 8240                       		or.w	d0,d1
0088A136 13C1 00C0 0011             		move.b	d1,(sound_psg)
0088A13C                            		
0088A13C 102D 000B                  		move.b	chn_note(a5),d0
0088A140 0C00 00FF                  		cmp.b	#-1,d0
0088A144 6700 FF8A                  		beq	ChnPsg_Rest
0088A148 0C00 00FE                  		cmp.b	#-2,d0
0088A14C 6700 FF82                  		beq	ChnPsg_Rest
0088A150 0640 000C                  		add.w	#12,d0		; TODO: checar
0088A154 323C 00C0                  		move.w	#$C0,d1		; PSG3 freq
0088A158                            		
0088A158 45F9 0000 0000             		lea	(FreqList_PSG),a2
0088A15E D040                       		add.w	d0,d0
0088A160 3032 0000                  		move.w	(a2,d0.w),d0
0088A164 3B40 0004                  		move.w	d0,Chn_Portam(a5)
0088A168 6000 0000                  		bra	ChnPsg_NoteFreq
0088A16C                            		
0088A16C                            ; 		move.w	#$E0,d3		; NOISE volume
0088A16C                            ; 		bra	ChnPsg_SetVol
0088A16C                            		
0088A16C                            @deftone:
0088A16C 3601                       		move.w	d1,d3
0088A16E 3400                       		move.w	d0,d2
0088A170 0242 0007                  		and.w	#%111,d2
0088A174 8242                       		or.w	d2,d1
0088A176 13C1 00C0 0011             		move.b	d1,(sound_psg)
0088A17C 4E75                       		rts
0088A17E                            		
0088A17E                            ; 		move.w	#$E0,d3
0088A17E                            ; 		bra	ChnPsg_SetVol
0088A17E                            		
0088A17E                            ; ----------------------------
0088A17E                            ; PSG Noise channel Tone 3
0088A17E                            ; 
0088A17E                            ; input:
0088A17E                            ; d0 - freq
0088A17E                            ; d1 - channel
0088A17E                            ; 
0088A17E                            ; returns:
0088A17E                            ; d3 - last psg freq | channel
0088A17E                            ; ----------------------------
0088A17E                            
0088A17E                            ChnPsg_NoteFreq:
0088A17E 3601                       		move.w	d1,d3
0088A180 3400                       		move.w	d0,d2
0088A182 0242 000F                  		and.w	#%1111,d2
0088A186 8242                       		or.w	d2,d1
0088A188 13C1 00C0 0011             		move.b	d1,(sound_psg)
0088A18E E848                       		lsr.w	#4,d0
0088A190 0240 003F                  		and.w	#%00111111,d0
0088A194 13C0 00C0 0011             		move.b	d0,(sound_psg)
0088A19A 4E75                       		rts
0088A19C                            
0088A19C                            ; -------------------------------
0088A19C                            ; PSG Frequencies
0088A19C                            ; -------------------------------
0088A19C                            
0088A19C                            FreqList_PSG:
0088A19C 0000                       		dc.w 0		;C-0 $0
0088A19E 0000                       		dc.w 0
0088A1A0 0000                       		dc.w 0
0088A1A2 0000                       		dc.w 0
0088A1A4 0000                       		dc.w 0
0088A1A6 0000                       		dc.w 0
0088A1A8 0000                       		dc.w 0
0088A1AA 0000                       		dc.w 0
0088A1AC 0000                       		dc.w 0
0088A1AE 0000                       		dc.w 0
0088A1B0 0000                       		dc.w 0
0088A1B2 0000                       		dc.w 0
0088A1B4                            		
0088A1B4 0000                       		dc.w 0		;C-1 $C
0088A1B6 0000                       		dc.w 0
0088A1B8 0000                       		dc.w 0
0088A1BA 0000                       		dc.w 0
0088A1BC 0000                       		dc.w 0
0088A1BE 0000                       		dc.w 0
0088A1C0 0000                       		dc.w 0
0088A1C2 0000                       		dc.w 0
0088A1C4 0000                       		dc.w 0
0088A1C6 0000                       		dc.w 0
0088A1C8 0000                       		dc.w 0
0088A1CA 0000                       		dc.w 0
0088A1CC                            		
0088A1CC 0000                       		dc.w 0		;C-2 $18
0088A1CE 0000                       		dc.w 0
0088A1D0 0000                       		dc.w 0
0088A1D2 0000                       		dc.w 0
0088A1D4 0000                       		dc.w 0
0088A1D6 0000                       		dc.w 0
0088A1D8 0000                       		dc.w 0
0088A1DA 0000                       		dc.w 0
0088A1DC 0000                       		dc.w 0
0088A1DE 0000                       		dc.w 0
0088A1E0 0000                       		dc.w 0
0088A1E2 0000                       		dc.w 0
0088A1E4                            
0088A1E4 0000                       		dc.w 0		;C-3 $24
0088A1E6 0000                       		dc.w 0
0088A1E8 0000                       		dc.w 0
0088A1EA 0000                       		dc.w 0
0088A1EC 0000                       		dc.w 0
0088A1EE 0000                       		dc.w 0
0088A1F0 0000                       		dc.w 0
0088A1F2 0000                       		dc.w 0
0088A1F4 0000                       		dc.w 0
0088A1F6 03F8                       		dc.w $3F8
0088A1F8 03BF                                       dc.w $3BF
0088A1FA 0389                                       dc.w $389
0088A1FC                                            
0088A1FC 0356                       		dc.w $356	;C-4 $30
0088A1FE 0326                                       dc.w $326
0088A200 02F9                                       dc.w $2F9
0088A202 02CE                                       dc.w $2CE
0088A204 02A5                                       dc.w $2A5
0088A206 0280                                       dc.w $280
0088A208 025C                                       dc.w $25C
0088A20A 023A                                       dc.w $23A
0088A20C 021A                                       dc.w $21A
0088A20E 01FB                       		dc.w $1FB
0088A210 01DF                                       dc.w $1DF
0088A212 01C4                                       dc.w $1C4
0088A214                                            
0088A214 01AB                                       dc.w $1AB	;C-5 $3C
0088A216 0193                                       dc.w $193
0088A218 017D                                       dc.w $17D
0088A21A 0167                                       dc.w $167
0088A21C 0153                                       dc.w $153
0088A21E 0140                                       dc.w $140
0088A220 012E                       		dc.w $12E
0088A222 011D                                       dc.w $11D
0088A224 010D                                       dc.w $10D
0088A226 00FE                                       dc.w $FE
0088A228 00EF                                       dc.w $EF
0088A22A 00E2                                       dc.w $E2
0088A22C                                            
0088A22C 00D6                                       dc.w $D6	;C-6 $48
0088A22E 00C9                                       dc.w $C9
0088A230 00BE                                       dc.w $BE
0088A232 00B4                                       dc.w $B4
0088A234 00A9                       		dc.w $A9
0088A236 00A0                                       dc.w $A0
0088A238 0097                                       dc.w $97
0088A23A 008F                                       dc.w $8F
0088A23C 0087                                       dc.w $87
0088A23E 007F                                       dc.w $7F
0088A240 0078                                       dc.w $78
0088A242 0071                                       dc.w $71
0088A244                                            
0088A244 006B                                       dc.w $6B	;C-7 $54
0088A246 0065                                       dc.w $65
0088A248 005F                       		dc.w $5F
0088A24A 005A                                       dc.w $5A
0088A24C 0055                                       dc.w $55
0088A24E 0050                                       dc.w $50
0088A250 004B                                       dc.w $4B
0088A252 0047                                       dc.w $47
0088A254 0043                                       dc.w $43
0088A256 0040                                       dc.w $40
0088A258 003C                                       dc.w $3C
0088A25A 0039                                       dc.w $39
0088A25C                                            
0088A25C 0036                       		dc.w $36	;C-8 $60
0088A25E 0033                                       dc.w $33
0088A260 0030                                       dc.w $30
0088A262 002D                                       dc.w $2D
0088A264 002B                                       dc.w $2B
0088A266 0028                                       dc.w $28
0088A268 0026                                       dc.w $26
0088A26A 0024                                       dc.w $24
0088A26C 0022                                       dc.w $22
0088A26E 0020                                       dc.w $20
0088A270 001F                       		dc.w $1F
0088A272 001D                                       dc.w $1D
0088A274                                            
0088A274 001B                                       dc.w $1B	;C-9 $6C
0088A276 001A                                       dc.w $1A
0088A278 0018                                       dc.w $18
0088A27A 0017                                       dc.w $17
0088A27C 0016                                       dc.w $16
0088A27E 0015                                       dc.w $15
0088A280 0013                                       dc.w $13
0088A282 0012                                       dc.w $12
0088A284 0011                       		dc.w $11
0088A286 0010                        		dc.w $10 ;Custom...
0088A288 0009                        		dc.w $9
0088A28A 0008                        		dc.w $8
0088A28C                            
0088A28C                            		even
0088A28C                            		
0088A28C                            ; -------------------------------
0088A28C                            ; FM Frequencies
0088A28C                            ; -------------------------------
0088A28C                            
0088A28C                            FreqList_FM:
0088A28C                            ; 		dc.w $269	;NULL
0088A28C 028D                       		dc.w $28d	;C-0 $00
0088A28E 02B4                       		dc.w $2b4
0088A290 02DD                       		dc.w $2dd
0088A292 0309                       		dc.w $309
0088A294 0337                       		dc.w $337
0088A296 0368                       		dc.w $368
0088A298 039C                       		dc.w $39c
0088A29A 03D3                       		dc.w $3d3
0088A29C 040D                       		dc.w $40d
0088A29E 044B                       		dc.w $44b
0088A2A0 048C                       		dc.w $48c
0088A2A2 0269                       		dc.w $269
0088A2A4 028D                       		dc.w $28d	;C-1 $0C
0088A2A6 02B4                       		dc.w $2b4
0088A2A8 02DD                       		dc.w $2dd
0088A2AA 0309                       		dc.w $309
0088A2AC 0337                       		dc.w $337
0088A2AE 0368                       		dc.w $368
0088A2B0 039C                       		dc.w $39c
0088A2B2 03D3                       		dc.w $3d3
0088A2B4 040D                       		dc.w $40d
0088A2B6 044B                       		dc.w $44b
0088A2B8 048C                       		dc.w $48c
0088A2BA 0A69                       		dc.w $a69
0088A2BC 0A8D                       		dc.w $a8d	;C-2 $18
0088A2BE 0AB4                       		dc.w $ab4
0088A2C0 0ADD                       		dc.w $add
0088A2C2 0B09                       		dc.w $b09
0088A2C4 0B37                       		dc.w $b37
0088A2C6 0B68                       		dc.w $b68
0088A2C8 0B9C                       		dc.w $b9c
0088A2CA 0BD3                       		dc.w $bd3
0088A2CC 0C0D                       		dc.w $c0d
0088A2CE 0C4B                       		dc.w $c4b
0088A2D0 0C8C                       		dc.w $c8c
0088A2D2 1269                       		dc.w $1269
0088A2D4 128D                       		dc.w $128d	;C-3 $24
0088A2D6 12B4                       		dc.w $12b4
0088A2D8 12DD                       		dc.w $12dd
0088A2DA 1309                       		dc.w $1309
0088A2DC 1337                       		dc.w $1337
0088A2DE 1368                       		dc.w $1368
0088A2E0 139C                       		dc.w $139c
0088A2E2 13D3                       		dc.w $13d3
0088A2E4 140D                       		dc.w $140d
0088A2E6 144B                       		dc.w $144b
0088A2E8 148C                       		dc.w $148c
0088A2EA 1A69                       		dc.w $1a69
0088A2EC 1A8D                       		dc.w $1a8d	;C-4 $30
0088A2EE 1AB4                       		dc.w $1ab4
0088A2F0 1ADD                       		dc.w $1add
0088A2F2 1B09                       		dc.w $1b09
0088A2F4 1B37                       		dc.w $1b37
0088A2F6 1B68                       		dc.w $1b68
0088A2F8 1B9C                       		dc.w $1b9c
0088A2FA 1BD3                       		dc.w $1bd3
0088A2FC 1C0D                       		dc.w $1c0d
0088A2FE 1C4B                       		dc.w $1c4b
0088A300 1C8C                       		dc.w $1c8c
0088A302 2269                       		dc.w $2269
0088A304 228D                       		dc.w $228d	;C-5 $3C
0088A306 22B4                       		dc.w $22b4
0088A308 22DD                       		dc.w $22dd
0088A30A 2309                       		dc.w $2309
0088A30C 2337                       		dc.w $2337
0088A30E 2368                       		dc.w $2368
0088A310 239C                       		dc.w $239c
0088A312 23D3                       		dc.w $23d3
0088A314 240D                       		dc.w $240d
0088A316 244B                       		dc.w $244b
0088A318 248C                       		dc.w $248c
0088A31A 2A69                       		dc.w $2a69
0088A31C 2A8D                       		dc.w $2a8d	;C-6 $48
0088A31E 2AB4                       		dc.w $2ab4
0088A320 2ADD                       		dc.w $2add
0088A322 2B09                       		dc.w $2b09
0088A324 2B37                       		dc.w $2b37
0088A326 2B68                       		dc.w $2b68
0088A328 2B9C                       		dc.w $2b9c
0088A32A 2BD3                       		dc.w $2bd3
0088A32C 2C0D                       		dc.w $2c0d
0088A32E 2C4B                       		dc.w $2c4b
0088A330 2C8C                       		dc.w $2c8c
0088A332 3269                       		dc.w $3269	;C-7 $54
0088A334 328D                       		dc.w $328d
0088A336 32B4                       		dc.w $32b4
0088A338 32DD                       		dc.w $32dd
0088A33A 3309                       		dc.w $3309
0088A33C 3337                       		dc.w $3337
0088A33E 3368                       		dc.w $3368
0088A340 339C                       		dc.w $339c
0088A342 33D3                       		dc.w $33d3
0088A344 340D                       		dc.w $340d
0088A346 344B                       		dc.w $344b
0088A348 348C                       		dc.w $348c
0088A34A                            		even
0088A34A                            		
0088A34A                            ; ; -------------------------------
0088A34A                            ; ; Mute/Rest channel
0088A34A                            ; ; -------------------------------
0088A34A                            ; 
0088A34A                            ; SMEG_ChannelRest:
0088A34A                            ; 		cmp.b	#$FF,Chn_ID(a5)
0088A34A                            ; 		beq	@Return
0088A34A                            ; 		
0088A34A                            ; ; 		btst	#bitPriority,(a6)
0088A34A                            ; ; 		beq.s	@SFX_Mode
0088A34A                            ; ; 		btst	#bitSfxOn,(RAM_SMEG_SfxBuff)
0088A34A                            ; ; 		beq.s	@SFX_Mode
0088A34A                            ; ;  		lea	(RAM_SMEG_PrioList),a3
0088A34A                            ; ;  		moveq	#0,d1
0088A34A                            ; ;  		move.b	LastPattChn(a6),d1
0088A34A                            ; ; 		btst	#0,(a3,d1.w)
0088A34A                            ; ; 		bne	@Return
0088A34A                            ; ; @SFX_Mode:
0088A34A                            ; 
0088A34A                            ; 		tst.b	Chn_ID(a5)
0088A34A                            ; 		bmi.s	@PSG_Rest
0088A34A                            ; 
0088A34A                            ;                 cmp.b	#6,Chn_ID(a5)
0088A34A                            ;                 bne.s	@NoChk6
0088A34A                            ; 		btst	#bitFmDac,snd_flags(a6)
0088A34A                            ; 		bne.s	@DAC_Rest
0088A34A                            ; 
0088A34A                            ; @NoChk6:
0088A34A                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
0088A34A                            ; 		bge	@PCM_Rest
0088A34A                            ; 		
0088A34A                            ; 		moveq	#$28,d0
0088A34A                            ;                 moveq	#0,d1
0088A34A                            ; 		move.b	Chn_ID(a5),d1
0088A34A                            ; 		bsr	SMEG_Z80_Off
0088A34A                            ; 		bsr	FM_RegWrite_1
0088A34A                            ; 		bsr	SMEG_Z80_On
0088A34A                            ; 
0088A34A                            ; @Return:
0088A34A                            ; 		rts
0088A34A                            ; 
0088A34A                            ; ; -------------------------------
0088A34A                            ; ; PSG Rest
0088A34A                            ; ; -------------------------------
0088A34A                            ; 
0088A34A                            ; @PSG_Rest:
0088A34A                            ; 		moveq	#0,d0
0088A34A                            ; 		move.b	Chn_ID(a5),d0
0088A34A                            ; 		add.b	#$1F,d0
0088A34A                            ; 		move.b	d0,($C00011)
0088A34A                            ; 
0088A34A                            ; @Disabled:
0088A34A                            ; 		rts
0088A34A                            ; 
0088A34A                            ; ; -------------------------------
0088A34A                            ; ; DAC Rest
0088A34A                            ; ; -------------------------------
0088A34A                            ; 
0088A34A                            ; @DAC_Rest:
0088A34A                            ;   		bsr	SMEG_Z80_Off
0088A34A                            ; 		moveq	#$2B,d0
0088A34A                            ;                 moveq	#0,d1
0088A34A                            ;   		bsr	FM_RegWrite_1
0088A34A                            ; 
0088A34A                            ; 		moveq	#0,d0
0088A34A                            ; 		move.b	d0,($A001E0+$D)
0088A34A                            ; 		bsr	SMEG_Z80_On
0088A34A                            ; 		rts
0088A34A                            ; 
0088A34A                            ; ; -------------------------------
0088A34A                            ; ; PCM Rest
0088A34A                            ; ; -------------------------------
0088A34A                            ; 
0088A34A                            ; @PCM_Rest:
0088A34A                            ;  		if MCD
0088A34A                            ;  		
0088A34A                            ; 		tst.l	SongPcmSamp(a6)
0088A34A                            ; 		beq.s	@ReturnPCM
0088A34A                            ; 		bmi.s	@ReturnPCM
0088A34A                            ; 		
0088A34A                            ; 		moveq	#0,d1
0088A34A                            ; 		move.b	Chn_ID(a5),d1
0088A34A                            ; 		and.b	#$F,d1
0088A34A                            ; 		bclr	d1,PcmChnOnOff(a6)
0088A34A                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
0088A34A                            ; 		moveq	#CdTask_SetOnOff,d0
0088A34A                            ; 		bsr	SMEG_CD_Call
0088A34A                            ; 		
0088A34A                            ;  		elseif MARS
0088A34A                            ;  		
0088A34A                            ; 		tst.l	SongPcmSamp(a6)
0088A34A                            ; 		beq.s	@ReturnPCM
0088A34A                            ; 		bmi.s	@ReturnPCM
0088A34A                            ; 		
0088A34A                            ;   		moveq	#0,d0
0088A34A                            ;   		move.b	Chn_ID(a5),d0
0088A34A                            ;   		and.w	#$F,d0
0088A34A                            ;   		move.b	d0,(marsreg+comm2)
0088A34A                            ;   		moveq	#marscall_Stop,d0
0088A34A                            ;   		bsr	SMEG_MARS_Call
0088A34A                            ;     		
0088A34A                            ; 		endif
0088A34A                            ; @ReturnPCM:
0088A34A                            ; 		rts
0088A34A                            		
0088A34A                            ; ================================================================
0088A34A                            ; Subs
0088A34A                            ; ================================================================
0088A34A                            
0088A34A                            ; -------------------------------------------
0088A34A                            ; Extra channels communication
0088A34A                            ; -------------------------------------------
0088A34A                            
0088A34A                            SMEG_CD_Call:
0088A34A 4E75                       		rts
0088A34C                            
0088A34C                            SMEG_MARS_Call:
0088A34C                            ;  		bsr	Mars_Task_Slave
0088A34C                            ;  		bra	Mars_Wait_Slave
0088A34C 4E75                        		rts
0088A34E                             		
0088A34E                            ; -------------------------------------------
0088A34E                            ; Set instrument
0088A34E                            ; -------------------------------------------
0088A34E                            
0088A34E                            SMEG_SetVoice:
0088A34E 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
0088A354 6700 0000                  		beq	@Return
0088A358                            		
0088A358 0816 0000                  		btst	#bitPriority,(a6)
0088A35C 6600                       		bne.s	@SFX_ModeV
0088A35E 6100 0000                  		bsr	SMEG_FindPrioSlot
0088A362 4A13                         		tst.b	(a3)
0088A364 6600 0000                    		bne	@Return
0088A368                            @SFX_ModeV:
0088A368                            
0088A368                            
0088A368 4AAE 0010                  		tst.l	snd_instr(a6)
0088A36C 6700 0000                  		beq	@Return
0088A370                            		
0088A370 4A2D 0007                  		tst.b	Chn_ID(a5)
0088A374 6B00                       		bmi.s	@Return
0088A376 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
0088A37C 6C00 0000                  		bge	SMEG_SetVoice_PCM
0088A380 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
0088A386 6700 0000                  		beq	SMEG_SetVoice_DAC
0088A38A                            		
0088A38A 6000 0000                   		bra	SetVoice_FM
0088A38E                            @Return:
0088A38E 4E75                        		rts
0088A390                            		
0088A390                            ; -------------------------------------------
0088A390                            ; Send DAC
0088A390                            ; -------------------------------------------
0088A390                            
0088A390                            SMEG_SetVoice_DAC:
0088A390 6100 0000                  		bsr	ChnlFM_srchIns
0088A394 0C42 FFFF                  		cmp.w	#-1,d2
0088A398 6700                       		beq.s	@Return
0088A39A                            		
0088A39A 0802 0007                   		btst	#7,d2
0088A39E 6600                        		bne.s	@Sample_Mode
0088A3A0 08AE 0000 0001             		bclr	#bitFmDac,snd_flags(a6)
0088A3A6 6000 0000                  		bra	SetVoice_FM
0088A3AA                             		
0088A3AA                            @Sample_Mode:
0088A3AA 08EE 0000 0001             		bset	#bitFmDac,snd_flags(a6)
0088A3B0 202B 0004                  		move.l	4(a3),d0
0088A3B4 222B 0008                  		move.l	8(a3),d1
0088A3B8 0481 0000 0001             		sub.l	#1,d1
0088A3BE 242B 000C                  		move.l	$C(a3),d2
0088A3C2 7600                       		moveq	#0,d3
0088A3C4 162D 000B                  		move.b	chn_note(a5),d3
0088A3C8 D66B 0002                   		add.w	2(a3),d3
0088A3CC 6000 0000                   		bra	Audio_Sample_Set
0088A3D0                            @Return:
0088A3D0 4E75                       		rts
0088A3D2                            		
0088A3D2                            ; -------------------------------------------
0088A3D2                            ; Send FM
0088A3D2                            ; -------------------------------------------
0088A3D2                            
0088A3D2                            SetVoice_FM:
0088A3D2 6100 0000                  		bsr	ChnlFM_srchIns
0088A3D6 08AE 0003 0001             		bclr	#bitSpecial3,snd_flags(a6)
0088A3DC 0C42 FFFF                  		cmp.w	#-1,d2
0088A3E0 6700 0000                  		beq	@Return
0088A3E4 0802 0007                   		btst	#7,d2
0088A3E8 6600 0000                   		bne	@Return
0088A3EC 0802 0006                   		btst	#6,d2
0088A3F0 6700                        		beq.s	@notFM3
0088A3F2 08EE 0003 0001              		bset	#bitSpecial3,snd_flags(a6)
0088A3F8                            @notFM3:
0088A3F8                            
0088A3F8                            ;  		adda.w	#4,a3
0088A3F8 266B 0004                  		movea.l	4(a3),a3
0088A3FC 7000                       		moveq	#0,d0
0088A3FE 102D 0007                  		move.b	Chn_ID(a5),d0
0088A402 0C00 0004                  		cmp.b	#4,d0
0088A406 6D00                       		blt.s	@Low3
0088A408 0400 0004                  		sub.b	#4,d0
0088A40C                            @Low3:
0088A40C                            
0088A40C 4840                       		swap	d0
0088A40E 303C 0028                  		move.w	#$28,d0
0088A412 7200                       		moveq	#0,d1
0088A414 122D 0007                  		move.b	Chn_ID(a5),d1
0088A418 6100 0000                  		bsr	SMEG_Z80_Off
0088A41C 6100 0000                  		bsr	FM_RegWrite_1
0088A420 4840                       		swap	d0
0088A422                            
0088A422 45FA 0000                  		lea	SMEG_FM_RegList(pc),a2
0088A426 3C00                       		move.w	d0,d6
0088A428 7818                       		moveq	#$18,d4
0088A42A                            @Next:
0088A42A 3A06                       		move.w	d6,d5
0088A42C 101A                       		move.b	(a2)+,d0
0088A42E 3600                       		move.w	d0,d3
0088A430 D045                       		add.w	d5,d0
0088A432 121B                       		move.b	(a3)+,d1
0088A434                            
0088A434 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
0088A43A 6C00                       		bge.s	@Chn456
0088A43C 6100 0000                  		bsr	FM_RegWrite_1
0088A440 51CC FFE8                  		dbf	d4,@Next
0088A444 6000                       		bra.s	@BackZ80
0088A446                            
0088A446                            @Chn456:
0088A446 6100 0000                  		bsr	FM_RegWrite_2
0088A44A 51CC FFDE                  		dbf	d4,@Next
0088A44E                            @BackZ80:
0088A44E 6100 0000                  		bsr	SMEG_Z80_On
0088A452                            @Return:
0088A452 4E75                       		rts
0088A454                            
0088A454                            ; -------------------------------------------
0088A454                            ; Set FM panning
0088A454                            ; -------------------------------------------
0088A454                            
0088A454                            SMEG_FM_SetPan:
0088A454 4A2D 0007                  		tst.b	Chn_ID(a5)
0088A458 6B00 0000                  		bmi	@Return
0088A45C                            		
0088A45C 7200                       		moveq	#0,d1
0088A45E 122D 000C                    		move.b	chn_pan(a5),d1
0088A462 EC49                         		lsr.w	#6,d1
0088A464 0241 0003                    		and.w	#%11,d1
0088A468 123B 1000                    		move.b	@list(pc,d1.w),d1
0088A46C 0241 00C0                    		and.w	#%11000000,d1
0088A470 303C 00B4                    		move.w	#$B4,d0
0088A474 142D 0007                    		move.b	chn_id(a5),d2
0088A478 0242 0003                    		and.w	#%11,d2
0088A47C 8042                         		or.w	d2,d0
0088A47E 6000 0000                   		bra	SMEG_FM_FindWrite
0088A482                            		
0088A482 8080 C040                  @list:		dc.b $80,$80,$C0,$40
0088A486                            		even
0088A486                            		
0088A486                            		
0088A486 303C 00B4                  		move.w	#$B4,d0
0088A48A 7400                       		moveq	#0,d2
0088A48C 142D 0007                  		move.b	Chn_ID(a5),d2
0088A490 7200                       		moveq	#0,d1
0088A492 122D 000C                  		move.b	Chn_Pan(a5),d1
0088A496                            
0088A496 6100 0000                  		bsr	SMEG_Z80_Off
0088A49A 0C02 0003                  		cmp.b	#3,d2
0088A49E 6E00                       		bgt.s	@SecondFM
0088A4A0 D042                       		add.w	d2,d0
0088A4A2 6100 0000                  		bsr	FM_RegWrite_1
0088A4A6 6000                       		bra.s	@BackZ80
0088A4A8                            @SecondFM:
0088A4A8 0442 0004                  		sub.w	#4,d2
0088A4AC D042                       		add.w	d2,d0
0088A4AE 6100 0000                  		bsr	FM_RegWrite_2
0088A4B2                            @BackZ80:
0088A4B2 6100 0000                  		bsr	SMEG_Z80_On
0088A4B6                            @Return:
0088A4B6 4E75                       		rts
0088A4B8                            
0088A4B8                            ; ---------------------
0088A4B8                            
0088A4B8                            ChnlFM_srchIns:
0088A4B8 266E 0010                  		movea.l	snd_instr(a6),a3
0088A4BC 302B 0000                   		move.w	instDYmha(a3),d0
0088A4C0 D6C0                        		adda	d0,a3
0088A4C2                            @next:
0088A4C2 4841                       		swap	d1
0088A4C4 4A53                       		tst.w	(a3)
0088A4C6 6B00 0000                   		bmi	@NoteOff
0088A4CA 7000                        		moveq	#0,d0
0088A4CC 102D 0008                  		move.b	chn_inst(a5),d0
0088A4D0 3213                       		move.w	(a3),d1
0088A4D2 3401                       		move.w	d1,d2
0088A4D4 0241 003F                  		and.w	#$3F,d1
0088A4D8 B041                       		cmp.w	d1,d0
0088A4DA 6700                       		beq.s	@found
0088A4DC D6FC 0008                  		adda	#8,a3		;inst,oct,firstlong
0088A4E0 0802 0007                  		btst	#7,d2
0088A4E4 6600                       		bne.s	@doit
0088A4E6 0802 0006                  		btst	#6,d2
0088A4EA 67D6                       		beq.s	@next
0088A4EC                            @doit:
0088A4EC D6FC 0008                  		adda	#8,a3		;scndlong,thrdlong
0088A4F0 60D0                       		bra.s	@next
0088A4F2                            @NoteOff:
0088A4F2 4841                       		swap	d1
0088A4F4 74FF                       		moveq	#-1,d2
0088A4F6                            @found:
0088A4F6 4E75                       		rts
0088A4F8                            		
0088A4F8                            ; --------------------------------------------
0088A4F8                            ; Play a sample
0088A4F8                            ;
0088A4F8                            ; Input:
0088A4F8                            ; d0 | LONG - Start
0088A4F8                            ; d1 | LONG - End
0088A4F8                            ; d2 | LONG - Loop point
0088A4F8                            ;              0 = From start
0088A4F8                            ;             -1 = No loop
0088A4F8                            ; d3 | WORD - Note ($3C - default)
0088A4F8                            ; --------------------------------------------
0088A4F8                            
0088A4F8                            Audio_Sample_Set:
0088A4F8 6100 0000                  		bsr	SMEG_Z80_Off
0088A4FC                            		
0088A4FC 41F9 00A0 0180             		lea	($A00180),a0
0088A502 E198                       		rol.l	#8,d0
0088A504 10C0                       		move.b	d0,(a0)+
0088A506 E198                       		rol.l	#8,d0
0088A508 10C0                       		move.b	d0,(a0)+		
0088A50A E198                       		rol.l	#8,d0
0088A50C 10C0                       		move.b	d0,(a0)+
0088A50E E198                       		rol.l	#8,d0
0088A510 10C0                       		move.b	d0,(a0)+
0088A512                            		
0088A512 0481 0000 0001              		sub.l	#1,d1
0088A518 E199                       		rol.l	#8,d1
0088A51A 10C1                       		move.b	d1,(a0)+
0088A51C E199                       		rol.l	#8,d1
0088A51E 10C1                       		move.b	d1,(a0)+		
0088A520 E199                       		rol.l	#8,d1
0088A522 10C1                       		move.b	d1,(a0)+
0088A524 E199                       		rol.l	#8,d1
0088A526 10C1                       		move.b	d1,(a0)+
0088A528                            		
0088A528 7200                       		moveq	#0,d1
0088A52A 2800                       		move.l	d0,d4
0088A52C 0C82 FFFF FFFF             		cmp.l	#-1,d2
0088A532 6700                       		beq.s	@no_loop
0088A534 7202                       		moveq	#2,d1
0088A536 2800                       		move.l	d0,d4
0088A538 D882                       		add.l	d2,d4
0088A53A                            @no_loop:
0088A53A E19C                       		rol.l	#8,d4
0088A53C 10C4                       		move.b	d4,(a0)+
0088A53E E19C                       		rol.l	#8,d4
0088A540 10C4                       		move.b	d4,(a0)+		
0088A542 E19C                       		rol.l	#8,d4
0088A544 10C4                       		move.b	d4,(a0)+
0088A546 E19C                       		rol.l	#8,d4
0088A548 10C4                       		move.b	d4,(a0)+
0088A54A                            
0088A54A 1081                       		move.b	d1,(a0)
0088A54C                            		
0088A54C 3003                       		move.w	d3,d0
0088A54E 6000 0000                  		bra	AudioSmplNote_go
0088A552                            
0088A552                            ; --------------------------------------------
0088A552                            ; Stop the current sample
0088A552                            ; --------------------------------------------
0088A552                            
0088A552                            Audio_Sample_Play:
0088A552 6100 0000                  		bsr	SMEG_Z80_Off
0088A556                            		
0088A556 1039 00A0 018C             		move.b	($A0018C).l,d0
0088A55C 08C0 0000                  		bset	#0,d0
0088A560 13C0 00A0 018C             		move.b	d0,($A0018C).l
0088A566                             		
0088A566 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0088A56E 4E75                       		rts
0088A570                            		
0088A570                            ; --------------------------------------------
0088A570                            ; Stop the current sample
0088A570                            ; --------------------------------------------
0088A570                            
0088A570                            Audio_Sample_Stop:
0088A570 6100 0000                  		bsr	SMEG_Z80_Off
0088A574                            		
0088A574 13FC 0040 00A0 018C        		move.b	#$40,($A0018C).l
0088A57C                             		
0088A57C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0088A584 4E75                       		rts
0088A586                            		
0088A586                            ; --------------------------------------------
0088A586                            ; Modify sample note
0088A586                            ;
0088A586                            ; d3 | WORD - Note
0088A586                            ; --------------------------------------------
0088A586                            
0088A586                            Audio_Sample_Note:
0088A586 6100 0000                  		bsr	SMEG_Z80_Off
0088A58A                            		
0088A58A                            AudioSmplNote_go:
0088A58A                            ; 		sub.w	#24,d0			; skip 2 octaves
0088A58A ED48                       		lsl.w	#6,d0
0088A58C 0640 01C0                   		add.w	#$1C0,d0
0088A590 13C0 00A0 00DC             		move.b	d0,($A000DC)		; ld bc,(NEW ADDRESS)
0088A596 E048                       		lsr.w	#8,d0			;
0088A598 13C0 00A0 00DD              		move.b	d0,($A000DD)		;
0088A59E                             		
0088A59E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0088A5A6 4E75                       		rts
0088A5A8                            
0088A5A8                            ; -------------------------------------------
0088A5A8                            ; Send PCM/PWM
0088A5A8                            ; -------------------------------------------
0088A5A8                            
0088A5A8                            SMEG_SetVoice_PCM:
0088A5A8                               		
0088A5A8 4AAE 0014                  		tst.l	SongPcmSamp(a6)
0088A5AC 6700                       		beq.s	@FinishList
0088A5AE 6B00                       		bmi.s	@FinishList
0088A5B0                            		
0088A5B0 7200                           		moveq	#0,d1
0088A5B2 7400                          		moveq	#0,d2
0088A5B4 266E 0014                       		movea.l	SongPcmSamp(a6),a3
0088A5B8 122D 0008                      		move.b	Chn_Inst(a5),d1
0088A5BC                            @NextPcm:
0088A5BC 4A53                            		tst.w	(a3)
0088A5BE 6B00                            		bmi.s	@GiveUp
0088A5C0 1413                            		move.b	(a3),d2
0088A5C2 B401                            		cmp.b	d1,d2
0088A5C4 6700                            		beq.s	@FoundPcm
0088A5C6 D6FC 0002                       		adda	#2,a3
0088A5CA 60F0                            		bra.s	@NextPcm
0088A5CC                            @FoundPcm:
0088A5CC 122B 0001                    		move.b	1(a3),d1
0088A5D0                            @GiveUp:
0088A5D0 0441 0001                     		sub.w	#1,d1
0088A5D4 7400                          		moveq	#0,d2
0088A5D6 142D 0007                     		move.b	Chn_ID(a5),d2
0088A5DA 0242 000F                     		and.w	#$F,d2
0088A5DE 13C2 00A1 5122                		move.b	d2,(marsreg+comm2)
0088A5E4 13C1 00A1 5123               		move.b	d1,(marsreg+comm2+1)
0088A5EA 7003                        		moveq 	#marscall_SetSmpl,d0
0088A5EC 6100 FD5E                   		bsr	SMEG_MARS_Call
0088A5F0                              		
0088A5F0                            @FinishList:
0088A5F0 4E75                       		rts
0088A5F2                            		
0088A5F2                            ; -------------------------------------------
0088A5F2                            ; Reset FM
0088A5F2                            ; -------------------------------------------
0088A5F2                            
0088A5F2                            SMEG_FM_Reset:
0088A5F2 6100 0000                  		bsr	SMEG_Z80_Off
0088A5F6                            
0088A5F6 7028                       		moveq	#$28,d0
0088A5F8 7200                       		moveq	#0,d1
0088A5FA 6100 0000                  		bsr	FM_RegWrite_1
0088A5FE 7028                       		moveq	#$28,d0
0088A600 7201                       		moveq	#1,d1
0088A602 6100 0000                  		bsr	FM_RegWrite_1
0088A606 7028                       		moveq	#$28,d0
0088A608 7202                       		moveq	#2,d1
0088A60A 6100 0000                  		bsr	FM_RegWrite_1
0088A60E 7028                       		moveq	#$28,d0
0088A610 7204                       		moveq	#4,d1
0088A612 6100 0000                  		bsr	FM_RegWrite_1
0088A616 7028                       		moveq	#$28,d0
0088A618 7205                       		moveq	#5,d1
0088A61A 6100 0000                  		bsr	FM_RegWrite_1
0088A61E 7028                       		moveq	#$28,d0
0088A620 7206                       		moveq	#6,d1
0088A622 6100 0000                  		bsr	FM_RegWrite_1
0088A626                            
0088A626 6000 0000                  		bra	SMEG_Z80_On
0088A62A                            
0088A62A                            ; -------------------------------------------
0088A62A                            ; Find FM
0088A62A                            ; -------------------------------------------
0088A62A                            
0088A62A                            SMEG_FM_FindWrite:
0088A62A 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
0088A630 6C00                       		bge.s	@Second
0088A632 6000 0000                  		bra	FM_RegWrite_1
0088A636                            @Second:
0088A636 6000 0000                  		bra	FM_RegWrite_2
0088A63A                            
0088A63A                            ; -------------------------------------------
0088A63A                            ; Write to FM register
0088A63A                            ; -------------------------------------------
0088A63A                            
0088A63A                            FM_RegWrite_1:
0088A63A 1439 00A0 4000             		move.b	($A04000).l,d2
0088A640 0802 0007                  		btst	#7,d2
0088A644 66F4                       		bne.s	FM_RegWrite_1
0088A646 13C0 00A0 4000             		move.b	d0,($A04000).l
0088A64C                            @Loop:
0088A64C 1439 00A0 4000             		move.b	($A04000).l,d2
0088A652 0802 0007                  		btst	#7,d2
0088A656 66F4                       		bne.s	@Loop
0088A658 13C1 00A0 4001             		move.b	d1,($A04001).l
0088A65E 4E75                       		rts
0088A660                            
0088A660                            FM_RegWrite_2:
0088A660 1439 00A0 4000             		move.b	($A04000).l,d2
0088A666 0802 0007                  		btst	#7,d2
0088A66A 66F4                       		bne.s	FM_RegWrite_2
0088A66C 13C0 00A0 4002             		move.b	d0,($A04002).l
0088A672                            @Loop:
0088A672 1439 00A0 4000             		move.b	($A04000).l,d2
0088A678 0802 0007                  		btst	#7,d2
0088A67C 66F4                       		bne.s	@Loop
0088A67E 13C1 00A0 4003             		move.b	d1,($A04003).l
0088A684 4E75                       		rts
0088A686                            		
0088A686                            SMEG_Z80_Off:
0088A686 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0088A68E                            @WaitZ80;\@:
0088A68E 0839 0000 00A1 1100        		btst	#0,($A11100).l
0088A696 66F6                       		bne.s	@WaitZ80;\@
0088A698 4E75                       		rts
0088A69A                            		
0088A69A                            ; USES d2
0088A69A                            
0088A69A                            SMEG_Z80_On:
0088A69A 1439 00A0 018C             		move.b	($A0018C),d2
0088A6A0 0802 0007                  		btst	#7,d2
0088A6A4 6700                       		beq.s	@stopped;\@
0088A6A6                            @busywait;\@:
0088A6A6 1439 00A0 4000             		move.b	($A04000).l,d2
0088A6AC 0802 0007                  		btst	#7,d2
0088A6B0 66F4                       		bne.s	@busywait;\@
0088A6B2 13FC 002A 00A0 4000        		move.b	#$2A,(sound_ym_1)
0088A6BA 1439 00A0 018F             		move.b	($A0018F),d2
0088A6C0 13C2 00A0 4001             		move.b	d2,(sound_ym_2)
0088A6C6                            @stopped;\@:
0088A6C6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0088A6CE 4E75                       		rts
0088A6D0                            		
0088A6D0                            ; -----------------------
0088A6D0                            ; Setup channels
0088A6D0                            ; -----------------------
0088A6D0                            
0088A6D0                            SMEG_Load_SetChnls:
0088A6D0 286E 0004                  		movea.l	SongRequest(a6),a4				;a4 - Music data
0088A6D4 3D6E 0018 001C             		move.w	TicksRequest(a6),TicksSet(a6)
0088A6DA                            
0088A6DA                            ; -----------------------
0088A6DA                            ; Get the
0088A6DA                            ; PatternEnd/PatternLoop
0088A6DA                            ; numbers
0088A6DA                            ; -----------------------
0088A6DA                            
0088A6DA 1D5C 0002                  		move.b	(a4)+,PatternEnd(a6)
0088A6DE 1D5C 0003                  		move.b	(a4)+,PatternLoop(a6)
0088A6E2                            		
0088A6E2                            ; -----------------------
0088A6E2                            ; Get instruments
0088A6E2                            ; -----------------------
0088A6E2                            
0088A6E2 2D5C 0008                  		move.l	(a4)+,SongStart(a6)
0088A6E6 2D5C 0010                  		move.l	(a4)+,snd_instr(a6)
0088A6EA                            
0088A6EA                            ; -----------------------
0088A6EA                            ; Setup the channel IDs
0088A6EA                            ; -----------------------
0088A6EA                            
0088A6EA 303C 0011                  		move.w	#max_chnl-1,d0
0088A6EE 341C                       		move.w	(a4)+,d2
0088A6F0 0442 0001                  		sub.w	#1,d2
0088A6F4                            @SetId:
0088A6F4 1B7C 0001 0006             		move.b	#1,Chn_Type(a5)
0088A6FA 1B7C 00FF 0007             		move.b	#-1,Chn_ID(a5)
0088A700 4A42                       		tst.w	d2
0088A702 6B00                       		bmi.s	@Disabled
0088A704 0442 0001                  		sub.w	#1,d2
0088A708 1B5C 0007                  		move.b	(a4)+,Chn_ID(a5)
0088A70C 1B5C 0009                   		move.b	(a4)+,Chn_Vol(a5)
0088A710 1B5C 000C                   		move.b	(a4)+,Chn_Pan(a5)
0088A714 161C                        		move.b	(a4)+,d3
0088A716 4A2D 0007                   		tst.b	chn_id(a5)
0088A71A 6B00                        		bmi.s	@is_psg
0088A71C 0C2D 0010 0007              		cmp.b	#PCM_1,chn_id(a5)
0088A722 6C00                        		bge.s	@is_pcm
0088A724                             		
0088A724 E94B                        		lsl.w	#4,d3
0088A726 1B43 000D                   		move.b	d3,Chn_FM_Key(a5)
0088A72A 6000                       		bra.s	@Disabled
0088A72C                            @is_pcm:
0088A72C 4E71                       		nop 
0088A72E 6000                       		bra.s	@Disabled
0088A730                            		
0088A730                            @is_psg:
0088A730 122D 0007                  		move.b	Chn_ID(a5),d1
0088A734 0001 001F                  		or.b	#$1F,d1
0088A738 13C1 00C0 0011             		move.b	d1,(sound_psg)
0088A73E                             		
0088A73E                            @Disabled:
0088A73E DAFC 0010                  		adda 	#sizeof_Chn,a5
0088A742 51C8 FFB0                  		dbf	d0,@SetId
0088A746                             		
0088A746                            ; ; -----------------------
0088A746                            ; ; Master volumes
0088A746                            ; ; -----------------------
0088A746                            ; 
0088A746                            ; 		moveq	#(max_chnl)-1,d0
0088A746                            ; @SetVol:
0088A746                            ; 		move.b	(a4)+,Chn_MainVol(a5)
0088A746                            ; 		adda 	#sizeof_Chn,a5
0088A746                            ; 		dbf	d0,@SetVol
0088A746                            
0088A746                            ; -----------------------
0088A746                            ; last steps
0088A746                            ; -----------------------
0088A746                            
0088A746 286E 0008                  		movea.l	SongStart(a6),a4
0088A74A 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
0088A74E 1D5C 0020                  		move.b	(a4)+,PattSize(a6)
0088A752 426E 0022                  		clr.w	pattr_read(a6)
0088A756 D8FC 0006                  		adda	#6,a4
0088A75A 2D4C 000C                  		move.l	a4,SongRead(a6)
0088A75E 4E75                       		rts
0088A760                            		
0088A760                            ; -----------------------
0088A760                            ; Search used slot
0088A760                            ; 
0088A760                            ; Uses d3
0088A760                            ; -----------------------
0088A760                            
0088A760                            SMEG_FindPrioSlot:
0088A760 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
0088A766                            ;  		inform 0,"%h",RAM_SMEG_PrioList
0088A766                             		
0088A766 7600                        		moveq	#0,d3
0088A768 162D 0007                   		move.b	Chn_ID(a5),d3
0088A76C 0803 0007                   		btst	#7,d3
0088A770 6600                        		bne.s	@PSG_slots
0088A772 0C03 0010                   		cmp.b	#PCM_1,d3
0088A776 6C00                        		bge.s	@PCM_Slots
0088A778 0C03 0004                   		cmp.b	#4,d3
0088A77C 6D00                        		blt.s	@leftFM
0088A77E 0443 0001                   		sub.w	#1,d3
0088A782                            @leftFM:
0088A782 6000                       		bra.s	@set_slot
0088A784                            
0088A784                            @PSG_slots:
0088A784 EA4B                       		lsr.w	#5,d3
0088A786 0243 0003                  		and.w	#%11,d3
0088A78A 0643 0006                  		add.w	#6,d3
0088A78E 6000                       		bra.s	@set_slot
0088A790                            
0088A790                            @PCM_Slots:
0088A790 0443 0010                  		sub.w	#PCM_1,d3
0088A794                            @set_slot:
0088A794 D6C3                       		add.w	d3,a3
0088A796 4E75                       		rts
0088A798                            		
0088A798                            ; -----------------------
0088A798                            ; Turn off the unused
0088A798                            ; channels
0088A798                            ; -----------------------
0088A798                            
0088A798                            SMEG_Load_FixSfx:
0088A798 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
0088A79E                             		
0088A79E                            ; FM Check
0088A79E                            
0088A79E 7605                        		moveq	#6-1,d3
0088A7A0 7028                        		moveq	#$28,d0
0088A7A2 7200                        		moveq	#0,d1
0088A7A4                            @chknextfm1:
0088A7A4 4A13                       		tst.b	(a3)
0088A7A6 6700                       		beq.s	@off_fm
0088A7A8 4213                       		clr.b	(a3)
0088A7AA                            		
0088A7AA 0C01 0006                  		cmp.b	#6,d1
0088A7AE 6600                       		bne.s	@notdac
0088A7B0 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
0088A7B6 6700                       		beq.s	@notdac
0088A7B8                            		
0088A7B8 6100 FDB6                  		bsr	Audio_Sample_Stop
0088A7BC 6000                       		bra.s	@off_fm
0088A7BE                            		
0088A7BE                            @notdac:
0088A7BE 6100 FEC6                  		bsr	SMEG_Z80_Off
0088A7C2 6100 FE76                  		bsr	FM_RegWrite_1
0088A7C6 6100 FED2                  		bsr	SMEG_Z80_On
0088A7CA                            @off_fm:
0088A7CA D6FC 0001                  		adda 	#1,a3
0088A7CE                            
0088A7CE 0641 0001                  		add.w	#1,d1
0088A7D2 0C41 0003                  		cmp.w	#3,d1
0088A7D6 6600                       		bne.s	@nope
0088A7D8 0641 0001                  		add.w	#1,d1
0088A7DC                            @nope:
0088A7DC 51CB FFC6                  		dbf	d3,@chknextfm1
0088A7E0                            		
0088A7E0                            ; PSG check
0088A7E0                            
0088A7E0 323C 009F                  		move.w	#$9F,d1
0088A7E4 303C 0003                  		move.w	#4-1,d0
0088A7E8                            @chknextpsg:
0088A7E8 4A13                       		tst.b	(a3)
0088A7EA 6700                       		beq.s	@off_psg
0088A7EC 4213                       		clr.b	(a3)
0088A7EE 13C1 00C0 0011             		move.b	d1,(sound_psg)
0088A7F4                            @off_psg:
0088A7F4 D6FC 0001                  		adda	#1,a3
0088A7F8 0641 0020                  		add.w	#$20,d1
0088A7FC 51C8 FFEA                  		dbf	d0,@chknextpsg
0088A800                            		
0088A800                            ; TODO: PCM check
0088A800                            
0088A800                            ; 		lea	(RAM_SMEG_Chnls_BGM),a5
0088A800                            ; 		moveq	#(max_chnl)-1,d4
0088A800                            ; @SetId:
0088A800                            ; 		move.b	#$80,Chn_Pan(a5)
0088A800                            ; 
0088A800                            ; 		tst.b	Chn_ID(a5)
0088A800                            ; 		bmi.s	@NotFM
0088A800                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
0088A800                            ; 		bge.s	@NotFM
0088A800                            ; 
0088A800                            ; 		clr.b	Chn_FM_Key(a5)
0088A800                            ; 		move.b	#%00001111,Chn_FM_Key(a5)
0088A800                            ; 		move.b	#$C0,Chn_Pan(a5)
0088A800                            ; 		bsr	SMEG_FM_SetPan
0088A800                            ; @NotFM:
0088A800                            ; 		adda 	#sizeof_Chn,a5
0088A800                            ; 		dbf	d4,@SetId
0088A800                            		
0088A800                            ; 		bsr	SMEG_Z80_Off
0088A800                            ; 		moveq	#$2B,d0
0088A800                            ;                 moveq	#0,d1
0088A800                            ;   		bsr	FM_RegWrite_1
0088A800                            ;   		
0088A800                            ; 		moveq	#0,d0
0088A800                            ; 		move.b	d0,($A001E0+$D)
0088A800                            ; 		bsr	SMEG_Z80_On
0088A800                            		
0088A800 4E75                       		rts
0088A802                            		
0088A802                            ; -----------------------
0088A802                            ; Exclusive features
0088A802                            ;
0088A802                            ; TODO: creo que es
0088A802                            ; mala idea hacer esperar
0088A802                            ; al VBlank ya que moví
0088A802                            ; la rutina esta
0088A802                            ; -----------------------
0088A802                            
0088A802                            SMEG_Load_SetExtChnls:
0088A802                            		
0088A802 4DF9 FFFF EF00               		lea	(RAM_SMEG_Buffer),a6
0088A808 4AAE 0014                    		tst.l	SongPcmSamp(a6)
0088A80C 6700                          		beq.s	@Return
0088A80E                              		
0088A80E 2A6E 0014                     		movea.l	SongPcmSamp(a6),a5
0088A812 7200                          		moveq	#0,d1
0088A814                            @NextSamp:
0088A814 4A55                           		tst.w	(a5)
0088A816 6B00                           		bmi.s	@Finish
0088A818                            
0088A818 23DD 00A1 512C                 		move.l	(a5)+,(marsreg+comm12)		;Sample addr (start/end)
0088A81E 33DD 00A1 512A                 		move.w	(a5)+,(marsreg+comm10)		;Sample loop
0088A824 301D                           		move.w	(a5)+,d0
0088A826 13C0 00A1 5123                 		move.b	d0,(marsreg+comm2+1)		;Note transpose
0088A82C 13C1 00A1 5122                 		move.b	d1,(marsreg+comm2)		;Sample slot
0088A832 7005                          		moveq	#marscall_SetEntry,d0
0088A834 6100 FB16                     		bsr	SMEG_MARS_Call
0088A838                                   		
0088A838 0641 0001                          	add.w	#1,d1
0088A83C 60D6                        		bra.s	@NextSamp
0088A83E                            @Finish:
0088A83E DAFC 0002                    		adda	#2,a5
0088A842 2D4D 0014                    		move.l	a5,SongPcmSamp(a6)		;Second list		
0088A846                            		
0088A846                            @Return:
0088A846 4E75                       		rts
0088A848                            		
0088A848                            ; -------------------------------------------
0088A848                            ; Reset PSG
0088A848                            ; -------------------------------------------
0088A848                            
0088A848                            SMEG_PSG_Reset:
0088A848 13FC 009F 00C0 0011        		move.b	#$9F,($C00011).l
0088A850 13FC 00BF 00C0 0011        		move.b	#$BF,($C00011).l
0088A858 13FC 00DF 00C0 0011        		move.b	#$DF,($C00011).l
0088A860 13FC 00FF 00C0 0011        		move.b	#$FF,($C00011).l
0088A868 4E75                       		rts
0088A86A                            
0088A86A                            ; -------------------------------------------
0088A86A                            ; Reset PCM
0088A86A                            ; -------------------------------------------
0088A86A                            
0088A86A                            SMEG_PCM_Reset:
0088A86A 4AAE 0014                  		tst.l	SongPcmSamp(a6)
0088A86E 6700                       		beq.s	@NoResetPCM
0088A870 6B00 0000                  		bmi	@NoResetPCM
0088A874                            		
0088A874                            		
0088A874 13FC 0000 00A1 5122          		move.b	#0,(marsreg+comm2)
0088A87C 7002                         		moveq	#marscall_Stop,d0
0088A87E 6100 FACC                    		bsr	SMEG_MARS_Call
0088A882 13FC 0001 00A1 5122          		move.b	#1,(marsreg+comm2)
0088A88A 7002                         		moveq	#marscall_Stop,d0
0088A88C 6100 FABE                    		bsr	SMEG_MARS_Call
0088A890 13FC 0002 00A1 5122          		move.b	#2,(marsreg+comm2)
0088A898 7002                         		moveq	#marscall_Stop,d0
0088A89A 6100 FAB0                    		bsr	SMEG_MARS_Call
0088A89E 13FC 0003 00A1 5122           		move.b	#3,(marsreg+comm2)
0088A8A6 7002                         		moveq	#marscall_Stop,d0
0088A8A8 6100 FAA2                    		bsr	SMEG_MARS_Call
0088A8AC 13FC 0004 00A1 5122           		move.b	#4,(marsreg+comm2)
0088A8B4 7002                         		moveq	#marscall_Stop,d0
0088A8B6 6100 FA94                    		bsr	SMEG_MARS_Call
0088A8BA 13FC 0005 00A1 5122          		move.b	#5,(marsreg+comm2)
0088A8C2 7002                         		moveq	#marscall_Stop,d0
0088A8C4 6100 FA86                    		bsr	SMEG_MARS_Call
0088A8C8 13FC 0006 00A1 5122          		move.b	#6,(marsreg+comm2)
0088A8D0 7002                         		moveq	#marscall_Stop,d0
0088A8D2 6100 FA78                    		bsr	SMEG_MARS_Call
0088A8D6 13FC 0007 00A1 5122          		move.b	#7,(marsreg+comm2)
0088A8DE 7002                         		moveq	#marscall_Stop,d0
0088A8E0 6100 FA6A                    		bsr	SMEG_MARS_Call
0088A8E4                              		
0088A8E4                            
0088A8E4                            @NoResetPCM:
0088A8E4 4E75                       		rts
0088A8E6                            
0088A8E6                            ; ================================================================
0088A8E6                            ; -------------------------------------------------
0088A8E6                            ; Data
0088A8E6                            ; -------------------------------------------------
0088A8E6                            
0088A8E6                            ; -------------------------------
0088A8E6                            ; FM Register list
0088A8E6                            ; -------------------------------
0088A8E6                            
0088A8E6                            SMEG_FM_RegList:
0088A8E6 B0                         		dc.b $B0
0088A8E7 3038 343C                  		dc.b $30,$38,$34,$3C
0088A8EB 5058 545C                  		dc.b $50,$58,$54,$5C
0088A8EF 6068 646C                  		dc.b $60,$68,$64,$6C
0088A8F3 7078 747C                  		dc.b $70,$78,$74,$7C
0088A8F7 8088 848C                  		dc.b $80,$88,$84,$8C
0088A8FB 4048 444C                  		dc.b $40,$48,$44,$4C
0088A900 00                         		even
0088A900                            	
0088A900                            ; -------------------------------
0088A900                            ; Z80 Driver
0088A900                            ; -------------------------------
0088A900                            
0088A900                            Z80_Driver:	incbin	"system/sound/z80/main.bin"
0088BA00                            Z80_DriverEnd:
0088BA00                            		even
0088BA00                            		
0088BA00                            ; ---------------------------------------------------
0088BA00                            ; ---------------------------------------------------
0088BA00                            		
0088BA00                            ; ====================================================================
0088BA00                            ; -------------------------------------------------
0088BA00                            ; Main
0088BA00                            ; -------------------------------------------------
0088BA00                            
0088BA00                            		include	"engine/md.asm"
0088BA00                            ; ====================================================================
0088BA00                            ; Main engine
0088BA00                            ; ====================================================================
0088BA00                            
0088BA00                            		include	"engine/ram.asm"
0088BA00                            ; ====================================================================
0088BA00                            ; -------------------------------------------------
0088BA00                            ; RAM
0088BA00                            ; 
0088BA00                            ; Put your features here
0088BA00                            ; (players lives, keys, current level, map, etc.)
0088BA00                            ; -------------------------------------------------
0088BA00                            
0088BA00                                            rsset	RAM_Engine
0088BA00 =FFFFDC00                  RAM_P1_Lives	rs.w	1
0088BA00 =FFFFDC02                  RAM_P1_Coins	rs.w	1
0088BA00 =FFFFDC04                  RAM_P1_Hits	rs.w	1
0088BA00 =FFFFDC06                  RAM_CurrLevel	rs.w	1
0088BA00 =FFFFDC08                  sizeof_engine	rs.l	0
0088BA00                            ; 		inform 0,"engine ram: %h",(sizeof_engine-RAM_Engine)
0088BA00                            ; 		inform 0,"engine ram: %h",(sizeof_engine-RAM_Engine)
0088BA00                            
0088BA00                            ; ====================================================================
0088BA00                            ; -------------------------------------------------
0088BA00                            ; Engine Main loop
0088BA00                            ; -------------------------------------------------
0088BA00                            
0088BA00                            MD_Main:
0088BA00 6100 D774                  		bsr	System_Init		; init System
0088BA04 6100 DED4                  		bsr	Audio_Init		; init Audio
0088BA08 6100 D11E                  		bsr	Video_Init		; init Video
0088BA0C 6100 DEB6                   		bsr	Input_Init		; init Input
0088BA10                            
0088BA10                            ; -------------------------------------------------
0088BA10                            
0088BA10 46FC 2000                   		move.w	#$2000,sr
0088BA14                            Main_Loop:
0088BA14 7000                       		moveq	#0,d0
0088BA16 1039 FFFF DE4F             		move.b	(RAM_GameMode),d0
0088BA1C E548                       		lsl.w	#2,d0
0088BA1E 207B 0000                  		movea.l	@list(pc,d0.w),a0
0088BA22 4E90                       		jsr	(a0)
0088BA24                            		
0088BA24 60EE                       		bra.s	Main_Loop
0088BA26                            		
0088BA26                            ; ====================================================================
0088BA26                            ; -------------------------------------------------
0088BA26                            ; Data
0088BA26                            ; -------------------------------------------------
0088BA26                            
0088BA26                            @list:
0088BA26 0000 0000                  		dc.l	mode_Title
0088BA2A 0000 0000                  		dc.l	mode_Level
0088BA2E 0000 0000                  		dc.l	mode_Title
0088BA32 0000 0000                  		dc.l	mode_Title
0088BA36 0000 0000                  		dc.l	mode_Title
0088BA3A 0000 0000                  		dc.l	mode_Title
0088BA3E 0000 0000                  		dc.l	mode_Title
0088BA42 0000 0000                  		dc.l	mode_Title
0088BA46                            		even
0088BA46                            		
0088BA46                            ; ====================================================================
0088BA46                            ; -------------------------------------------------
0088BA46                            ; Default interrupts
0088BA46                            ; -------------------------------------------------
0088BA46                            
0088BA46                            		include	"system/ints.asm"
0088BA46                            ; ====================================================================
0088BA46                            ; -------------------------------------------------
0088BA46                            ; VBlank
0088BA46                            ; -------------------------------------------------
0088BA46                            
0088BA46                            MD_Vint:
0088BA46 0839 0007 FFFF DE4E         		btst	#7,(RAM_IntFlags)
0088BA4E 6600 0000                   		bne	@nope
0088BA52 08F9 0007 FFFF DE4E         		bset	#7,(RAM_IntFlags)
0088BA5A 48F9 7FFF FFFF DE0C        		movem.l	a0-a6/d0-d7,(RAM_VIntRegs)
0088BA62                            		
0088BA62 3039 00C0 0004             		move.w	(vdp_ctrl),d0
0088BA68 0800 0000                  		btst	#0,d0
0088BA6C 6700                       		beq.s	@JapAme
0088BA6E 303C 06BC                  		move.w	#$6BC,d0
0088BA72 51C8 FFFE                  		dbf	d0,*
0088BA76                            @JapAme:
0088BA76                            
0088BA76 6100 DBB2                   		bsr	Input_Read
0088BA7A 6100 D366                  		bsr	PalFade_Upd
0088BA7E 6100 D5EC                  		bsr	DMA_Read
0088BA82                            		
0088BBAA                            		
0088BBAA 6100 DDF6                   		bsr	Audio_run			; NO MOVERLO
0088BBAE 4CF9 7FFF FFFF DE0C        		movem.l	(RAM_VIntRegs),a0-a6/d0-d7
0088BBB6 08F9 0001 FFFF DE4E         		bset	#1,(RAM_IntFlags)		; VBlank done flag
0088BBBE 08B9 0007 FFFF DE4E         		bclr	#7,(RAM_IntFlags)
0088BBC6                             
0088BBC6                            @nope:
0088BBC6 08B9 0000 FFFF DE4E         		bclr	#0,(RAM_IntFlags)		; Frame done flag
0088BBCE 4E73                       		rte
0088BBD0                             		
0088BBD0                            ; ====================================================================
0088BBD0                            ; -------------------------------------------------
0088BBD0                            ; HBlank
0088BBD0                            ; -------------------------------------------------
0088BBD0                            
0088BBD0                            MD_HInt:
0088BBD0 4E73                       		rte
0088BBD0 4E73                       		rte
0088BBD2                            		
0088BBD2                            ; ====================================================================
0088BBD2                            ; -------------------------------------------------
0088BBD2                            ; CODE
0088BBD2                            ; -------------------------------------------------
0088BBD2                            
0088BBD2                            		;obj already set in MARS
0088BBD2                            		include	"engine/modes/title/md.asm"
0088BBD2                            ; ====================================================================
0088BBD2                            ; -------------------------------------------------
0088BBD2                            ; Title
0088BBD2                            ; -------------------------------------------------
0088BBD2                            
0088BBD2                            ; ====================================================================
0088BBD2                            ; --------------------------------------------
0088BBD2                            ; RAM
0088BBD2                            ; --------------------------------------------
0088BBD2                            
0088BBD2                            		rsset RAM_ModeBuffer
0088BBD2                            ; this_counter	rs.l 1
0088BBD2 =FFFFBC00                  model_buff	rs.b $20
0088BBD2 =FFFFBC20                  test_val	rs.l 1
0088BBD2                            
0088BBD2                            ; ====================================================================
0088BBD2                            ; --------------------------------------------
0088BBD2                            ; Init
0088BBD2                            ; --------------------------------------------
0088BBD2                            
0088BBD2                            mode_Title:
0088BBE4 46FC 2700                  		move.w	#$2700,sr
0088BBE8 6100 CF86                  		bsr	Video_ClearAll
0088BBEC 6100 DD5A                    		bsr	SMEG_StopSnd
0088BBF0                              		
0088BBF0 23FC 5000 0003 00C0 0004   		move.l	#$50000003,(vdp_ctrl)
0088BBFA 41F9 0000 0000             		lea	(Art_DebugFont),a0
0088BC00 303C 0000                  		move.w	#((Art_DebugFont_e-Art_DebugFont)/4)-1,d0
0088BC04                            @dbg_loop:
0088BC04 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0088BC0A 51C8 FFF8                  		dbf	d0,@dbg_loop
0088BC0E 43F9 FFFF E9D0              		lea	(RAM_PalFade),a1
0088BC14 41F9 0000 0000             		lea	(Pal_Title),a0
0088BC1A 303C 000F                  		move.w	#16-1,d0
0088BC1E                            @pal_loop2:
0088BC1E 32D8                       		move.w	(a0)+,(a1)+
0088BC20 51C8 FFFC                  		dbf	d0,@pal_loop2
0088BC24 337C 0644 001C             		move.w	#$644,$1C(a1)
0088BC2A 337C 0EEE 001E             		move.w	#$EEE,$1E(a1)
0088BC30                            		
0088BC30                            ; MARS: Model viewer
0088BC30                            		
0088BC30                            ; 		if MARS
0088BC30                            ; 		
0088BC30                            ; 		lea	(Asc_MarsMdl),a0
0088BC30                            ; 		moveq	#0,d0
0088BC30                            ; 		move.l	#$00010001,d1
0088BC30                            ; 		move.w	#$580|$2000,d2
0088BC30                            ; 		bsr	Video_PrintText
0088BC30                            ; 		bsr	MarsMdl_Init
0088BC30                            ; 
0088BC30                            ; ; Else: Text
0088BC30                            ; 
0088BC30                            ;    		else
0088BC30                               		
0088BC30 41F9 0000 0000             		lea	(Asc_Karasucia),a0
0088BC36 7000                       		moveq	#0,d0
0088BC38 223C 0001 0001             		move.l	#$00010001,d1
0088BC3E 343C 2680                  		move.w	#$680|$2000,d2
0088BC42 6100 D158                  		bsr	Video_PrintText
0088BC46                            		
0088BC46                            ; 		lea	(Map_Title),a0
0088BC46                            ;  		moveq	#0,d0
0088BC46                            ;  		move.l	#$00000000,d1
0088BC46                            ;    		move.l	#$0027001B,d2
0088BC46                            ;    		moveq	#1,d3
0088BC46                            ;    		bsr	Video_MakeMap
0088BC46                            ; 		move.l	#$40200000,(vdp_ctrl)
0088BC46                            ; 		lea	(Art_Title),a0
0088BC46                            ; 		move.w	#(Art_Title_End-Art_Title)/4,d0
0088BC46                            ; @art_loop:
0088BC46                            ; 		move.l	(a0)+,(vdp_data)
0088BC46                            ; 		dbf	d0,@art_loop
0088BC46                            		
0088BC46                            ;     		endif
0088BC46                               		
0088BC46 13FC 0007 FFFF ED1B          		move.b	#%111,(RAM_VidRegs+$B)
0088BC4E 6100 CFA6                    		bsr	Video_Update
0088BC52                               		
0088BC52                            ;    		if MCD=0
0088BC52                            ;  		move.l	#TEST_IT,d0
0088BC52                            ;  		moveq 	#2,d1
0088BC52                            ;  		moveq	#0,d2
0088BC52                            ;   		bsr	Audio_Track_play
0088BC52                            ;   		endif
0088BC52                            ;   		move.l	#TEST_IT_2,d0
0088BC52                            ;   		move.w 	#2,d1
0088BC52                            ;   		moveq	#0,d2
0088BC52                            ;   		bsr	Audio_Track_play
0088BC52                            		
0088BC52                            ;  		if MCD=0
0088BC52                            ; 		move.l	#TEST_WAV,d0
0088BC52                            ; 		move.l	#TEST_WAV_end,d1
0088BC52                            ; 		moveq	#0,d2
0088BC52                            ; 		move.w	#12*4,d3
0088BC52                            ; 		bsr	Audio_Sample_Set
0088BC52                            ; 		bsr	Audio_Sample_Play
0088BC52                            ;  		endif
0088BC52                            		
0088BC52 46FC 2000                   		move.w	#$2000,sr
0088BC68                            		
0088BC68                            ; --------------------------------------------
0088BC68                            ; Loop
0088BC68                            ; --------------------------------------------
0088BC68                            
0088BC68                            ; 		move.l	#$300000,(test_val)
0088BC68                            @loop:
0088BC68 6100 D164                   		bsr	Video_vsync
0088BC6C                            		
0088BC6C                            ;  		moveq	#0,d0
0088BC6C                            ; 		move.l	#$00080008,d1
0088BC6C                            ; 		move.l	(test_val),d2
0088BC6C                            ; 		move.w	#$680|$2000,d3
0088BC6C                            ; 		moveq	#6,d4
0088BC6C                            ; 		bsr	Video_PrintVal
0088BC6C                            ; 
0088BC6C                            ;  		moveq	#0,d0
0088BC6C                            ; 		move.l	#$00080009,d1
0088BC6C                            ; 		move.l	(test_val),d2
0088BC6C                            ; 		move.w	#$680|$2000,d3
0088BC6C                            ; 		moveq	#2,d4
0088BC6C                            ; 		bsr	Video_PrintVal
0088BC6C                            		
0088BC6C                            ; 		add.l	#1,(test_val)
0088BC6C                            
0088BC6C                            ; 		if MARS
0088BC6C                            ; 		bsr	MarsMdl_Upd
0088BC6C                            ; 		endif
0088BC6C                            
0088BC6C                            ; ------------
0088BC6C                            ; TESTING SFX
0088BC6C                            ; ------------
0088BC6C                            
0088BC6C                            		
0088BC6C                            ; ------------
0088BC6C                            
0088BC6C 0839 0007 FFFF DE85        		btst	#bitJoyStart,(RAM_Control_1+OnPress)
0088BC74 6700 FFF2                   		beq	@loop
0088BC78 4279 FFFF DC06              		clr.w	(RAM_CurrLevel)
0088BC7E 13FC 0001 FFFF DE4F        		move.b	#1,(RAM_GameMode)
0088BC86 4E75                       		rts
0088BC88                            		
0088BC88                            ; ====================================================================
0088BC88                            ; --------------------------------------------
0088BC88                            ; Subs
0088BC88                            ; --------------------------------------------
0088BC88                            
0088BC88                            BG_DEFORM:
0088BC88 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
0088BC8E 3606                       		move.w	d6,d3
0088BC90 343C 00DF                  		move.w	#224-1,d2
0088BC94                            @loop_hor:
0088BC94 3003                       		move.w	d3,d0
0088BC96 6100 D55C                  		bsr	CalcSine
0088BC9A E848                       		lsr.w	#4,d0
0088BC9C 3080                       		move.w	d0,(a0)
0088BC9E D0FC 0004                  		adda	#4,a0
0088BCA2 0643 0001                  		add.w	#1,d3
0088BCA6 51CA FFEC                  		dbf	d2,@loop_hor
0088BCAA                            		
0088BCAA 41F9 FFFF E2C0             		lea	(RAM_ScrlVer),a0
0088BCB0 3606                       		move.w	d6,d3
0088BCB2 343C 0013                  		move.w	#(320/16)-1,d2
0088BCB6                            @loop_ver:
0088BCB6 3003                       		move.w	d3,d0
0088BCB8 6100 D53A                  		bsr	CalcSine
0088BCBC E848                       		lsr.w	#4,d0
0088BCBE 3080                       		move.w	d0,(a0)
0088BCC0 D0FC 0004                  		adda	#4,a0
0088BCC4 0643 0002                  		add.w	#2,d3
0088BCC8 51CA FFEC                  		dbf	d2,@loop_ver
0088BCCC                            		
0088BCCC 0646 0001                  		add.w	#1,d6
0088BCD0 4E75                       		rts
0088BCD2                            	
0088BCD2                            ; ; --------------------------------------------
0088BCD2                            ; ; MARS ONLY
0088BCD2                            ; ; 
0088BCD2                            ; ; 3d test
0088BCD2                            ; ; --------------------------------------------
0088BCD2                            ; 
0088BCD2                            ; 		if MARS
0088BCD2                            ; MarsMdl_Init:
0088BCD2                            ; 		clr.w	(model_buff+$10)
0088BCD2                            ; 		bsr	MarsMdl_Set
0088BCD2                            ; 
0088BCD2                            ; ; ------------------
0088BCD2                            ; ; Loop
0088BCD2                            ; ; ------------------
0088BCD2                            ; 
0088BCD2                            ; MarsMdl_Upd:
0088BCD2                            ; 		move.b	(RAM_Control_1+ExOnHold),d4
0088BCD2                            ; 		btst	#bitJoyX,d4
0088BCD2                            ;  		beq.s	@not_X
0088BCD2                            ;  		add.w	#1,(model_buff+4)
0088BCD2                            ; @not_X:
0088BCD2                            ; 		btst	#bitJoyY,d4
0088BCD2                            ;  		beq.s	@not_Y
0088BCD2                            ;  		sub.w	#1,(model_buff+4)
0088BCD2                            ; @not_Y:
0088BCD2                            ; 		move.b	(RAM_Control_1+OnHold),d4
0088BCD2                            ; 		btst	#bitJoyRight,d4
0088BCD2                            ;  		beq.s	@not_right
0088BCD2                            ;  		sub.w	#1,(model_buff)
0088BCD2                            ; @not_right:
0088BCD2                            ; 		btst	#bitJoyLeft,d4
0088BCD2                            ;  		beq.s	@not_left
0088BCD2                            ;  		add.w	#1,(model_buff)
0088BCD2                            ; @not_left:
0088BCD2                            ; 		btst	#bitJoyDown,d4
0088BCD2                            ;  		beq.s	@not_down
0088BCD2                            ;  		sub.w	#1,(model_buff+2)
0088BCD2                            ; @not_down:
0088BCD2                            ; 		btst	#bitJoyUp,d4
0088BCD2                            ;  		beq.s	@not_up
0088BCD2                            ;  		add.w	#1,(model_buff+2)
0088BCD2                            ; @not_up:
0088BCD2                            ; 
0088BCD2                            ; 
0088BCD2                            ; 		move.b	(RAM_Control_1+OnPress),d4
0088BCD2                            ; 		btst	#bitJoyB,d4
0088BCD2                            ;  		beq.s	@not_B
0088BCD2                            ;  		add.w	#1,(model_buff+$10)
0088BCD2                            ;  		bsr	MarsMdl_Set
0088BCD2                            ; @not_B:
0088BCD2                            ; 		btst	#bitJoyA,d4
0088BCD2                            ;  		beq.s	@not_A
0088BCD2                            ;  		sub.w	#1,(model_buff+$10)
0088BCD2                            ;  		bsr	MarsMdl_Set
0088BCD2                            ; @not_A:
0088BCD2                            ; 		btst	#bitJoyC,d4
0088BCD2                            ;  		beq.s	@not_C
0088BCD2                            ;  		clr.w	(model_buff)
0088BCD2                            ;  		clr.w	(model_buff+2)
0088BCD2                            ;  		move.w	#0,(model_buff+4)
0088BCD2                            ;  		clr.w	(model_buff+6)
0088BCD2                            ;  		clr.w	(model_buff+8)
0088BCD2                            ;  		clr.w	(model_buff+$A)
0088BCD2                            ; @not_C:
0088BCD2                            ; 
0088BCD2                            ; ; Contoller 2
0088BCD2                            ; 
0088BCD2                            ; 		move.b	(RAM_Control_2+OnHold),d4
0088BCD2                            ; 		btst	#bitJoyRight,d4
0088BCD2                            ;  		beq.s	@not_right2
0088BCD2                            ;  		add.w	#1,(model_buff+8)
0088BCD2                            ; @not_right2:
0088BCD2                            ; 		btst	#bitJoyLeft,d4
0088BCD2                            ;  		beq.s	@not_left2
0088BCD2                            ;  		sub.w	#1,(model_buff+8)
0088BCD2                            ; @not_left2:
0088BCD2                            ; 		btst	#bitJoyDown,d4
0088BCD2                            ;  		beq.s	@not_down2
0088BCD2                            ;  		add.w	#1,(model_buff+6)
0088BCD2                            ; @not_down2:
0088BCD2                            ; 		btst	#bitJoyUp,d4
0088BCD2                            ;  		beq.s	@not_up2
0088BCD2                            ;  		sub.w	#1,(model_buff+6)
0088BCD2                            ; @not_up2:
0088BCD2                            ; 
0088BCD2                            ; 		btst	#bitJoyB,d4
0088BCD2                            ;  		beq.s	@not_B2
0088BCD2                            ;  		add.w	#1,(model_buff+$A)
0088BCD2                            ; @not_B2:
0088BCD2                            ; 		btst	#bitJoyA,d4
0088BCD2                            ;  		beq.s	@not_A2
0088BCD2                            ;  		sub.w	#1,(model_buff+$A)
0088BCD2                            ; @not_A2:
0088BCD2                            ; 
0088BCD2                            ; ; ------------------------
0088BCD2                            ; ; Show values
0088BCD2                            ; ; ------------------------
0088BCD2                            ; 
0088BCD2                            ; 		lea	(model_buff),a1
0088BCD2                            ; 		moveq	#2,d6
0088BCD2                            ; 		move.l	#$00050002,d7
0088BCD2                            ; @next3:
0088BCD2                            ; 		moveq	#0,d0
0088BCD2                            ; 		move.l	d7,d1
0088BCD2                            ; 		move.w	(a1)+,d2
0088BCD2                            ; 		move.w	#$2000|$580,d3
0088BCD2                            ; 		moveq	#1,d4
0088BCD2                            ; 		bsr	Video_PrintVal
0088BCD2                            ; 		add.l	#$00050000,d7
0088BCD2                            ; 		dbf	d6,@next3
0088BCD2                            ; 		
0088BCD2                            ; 		lea	(model_buff+6),a1
0088BCD2                            ; 		moveq	#2,d6
0088BCD2                            ; 		move.l	#$00050003,d7
0088BCD2                            ; @next4:
0088BCD2                            ; 		moveq	#0,d0
0088BCD2                            ; 		move.l	d7,d1
0088BCD2                            ; 		move.w	(a1)+,d2
0088BCD2                            ; 		move.w	#$2000|$580,d3
0088BCD2                            ; 		moveq	#1,d4
0088BCD2                            ; 		bsr	Video_PrintVal
0088BCD2                            ; 		add.l	#$00050000,d7
0088BCD2                            ; 		dbf	d6,@next4
0088BCD2                            ; 		
0088BCD2                            ; 		moveq	#0,d0
0088BCD2                            ; 		move.l	#$0008001A,d1
0088BCD2                            ; 		move.w	(marsreg+comm14),d2
0088BCD2                            ; 		move.w	#$2000|$580,d3
0088BCD2                            ; 		moveq	#1,d4
0088BCD2                            ; 		bsr	Video_PrintVal
0088BCD2                            ; 
0088BCD2                            ; ; 		lea	(marsreg+comm0),a1
0088BCD2                            ; ; 		moveq	#3,d6
0088BCD2                            ; ; 		move.l	#$00010019,d7
0088BCD2                            ; ; @next:
0088BCD2                            ; ; 		moveq	#0,d0
0088BCD2                            ; ; 		move.l	d7,d1
0088BCD2                            ; ; 		move.w	(a1)+,d2
0088BCD2                            ; ; 		move.w	#$2000|$580,d3
0088BCD2                            ; ; 		moveq	#1,d4
0088BCD2                            ; ; 		bsr	Video_PrintVal
0088BCD2                            ; ; 		add.l	#$00050000,d7
0088BCD2                            ; ; 		dbf	d6,@next
0088BCD2                            ; ; 		
0088BCD2                            ; ; 		lea	(marsreg+comm8),a1
0088BCD2                            ; ; 		moveq	#3,d6
0088BCD2                            ; ; 		move.l	#$0001001A,d7
0088BCD2                            ; ; @next2:
0088BCD2                            ; ; 		moveq	#0,d0
0088BCD2                            ; ; 		move.l	d7,d1
0088BCD2                            ; ; 		move.w	(a1)+,d2
0088BCD2                            ; ; 		move.w	#$2000|$580,d3
0088BCD2                            ; ; 		moveq	#1,d4
0088BCD2                            ; ; 		bsr	Video_PrintVal
0088BCD2                            ; ; 		add.l	#$00050000,d7
0088BCD2                            ; ; 		dbf	d6,@next2
0088BCD2                            ; 		
0088BCD2                            ; ; ------------------------
0088BCD2                            ; ; Send data
0088BCD2                            ; ; ------------------------
0088BCD2                            ; 
0088BCD2                            ; @busy:		tst.b	(marsreg+comm0+1)
0088BCD2                            ; 		bne.s	@busy
0088BCD2                            ; 		clr.l	(marsreg+comm4)
0088BCD2                            ; 		clr.l	(marsreg+comm8)
0088BCD2                            ; 		move.w	#$14,(marsreg+comm0)
0088BCD2                            ; 		lea	(marsreg+comm4),a0
0088BCD2                            ; 		move.w	#0,(a0)+
0088BCD2                            ; 		move.w	(model_buff),(a0)+
0088BCD2                            ; 		move.w	(model_buff+2),(a0)+
0088BCD2                            ; 		move.w	(model_buff+4),(a0)+
0088BCD2                            ;  		bset	#0,(marsreg+intctl)
0088BCD2                            ;  		
0088BCD2                            ; @busy2:		tst.b	(marsreg+comm0+1)
0088BCD2                            ; 		bne.s	@busy2
0088BCD2                            ; 		clr.l	(marsreg+comm4)
0088BCD2                            ; 		clr.l	(marsreg+comm8)
0088BCD2                            ; 		move.w	#$15,(marsreg+comm0)
0088BCD2                            ; 		lea	(marsreg+comm4),a0
0088BCD2                            ; 		move.w	#0,(a0)+
0088BCD2                            ; 		move.w	(model_buff+6),(a0)+
0088BCD2                            ; 		move.w	(model_buff+8),(a0)+
0088BCD2                            ; 		move.w	(model_buff+$A),(a0)+
0088BCD2                            ;  		bset	#0,(marsreg+intctl)
0088BCD2                            ; 		rts
0088BCD2                            ; 		
0088BCD2                            ; ; ------------------------------------
0088BCD2                            ; 
0088BCD2                            ; MarsMdl_Set:
0088BCD2                            ; 		btst	#0,(marsreg+intctl)
0088BCD2                            ; 		bne.s	@busyinit
0088BCD2                            ; 		move.w	#$10,(marsreg+comm0)
0088BCD2                            ; 		lea	(marsreg+comm4),a0
0088BCD2                            ; 		move.w	(model_buff+$10),d0
0088BCD2                            ; 		lsl.w	#4,d0
0088BCD2                            ; 		move.l	List_Models(pc,d0.w),(a0)+
0088BCD2                            ; 		move.w	#0,(a0)+
0088BCD2                            ;  		bset	#0,(marsreg+intctl)
0088BCD2                            ;  		
0088BCD2                            ;  		clr.l	(model_buff)
0088BCD2                            ;  		move.w	#0,(model_buff+4)
0088BCD2                            ;  		
0088BCD2                            ;  		clr.l	(model_buff+6)
0088BCD2                            ; 		clr.w	(model_buff+$A)
0088BCD2                            ; 		
0088BCD2                            ; ; 		move.w	(model_buff+$10),d0
0088BCD2                            ; ; 		lsl.w	#4,d0
0088BCD2                            ; ;  		lea 	List_Models+4(pc,d0.w),a0
0088BCD2                            ; ; 		moveq	#0,d0
0088BCD2                            ; ; 		move.l	#$00170001,d1
0088BCD2                            ; ; 		move.w	#$580|$2000,d2
0088BCD2                            ; ; 		bsr	Video_PrintText
0088BCD2                            ;  		
0088BCD2                            ; @busyinit:
0088BCD2                            ; 		rts
0088BCD2                            ; 		
0088BCD2                            ; 		endif
0088BCD2                            		
0088BCD2                            ; ====================================================================
0088BCD2                            ; --------------------------------------------
0088BCD2                            ; VBlank
0088BCD2                            ; --------------------------------------------
0088BCD2                            
0088BCD2                            ; ====================================================================		
0088BCD2                            ; --------------------------------------------
0088BCD2                            ; HBlank
0088BCD2                            ; --------------------------------------------
0088BCD2                            		
0088BCD2                            ; ====================================================================		
0088BCD2                            ; --------------------------------------------
0088BCD2                            ; Data
0088BCD2                            ; --------------------------------------------
0088BCD2                            
0088BCD2                            List_Models:
0088BCD2 0000 0000                  		dc.l mdldata_cube
0088BCD6 5465 7874 7572 6543 7562+  		dc.b "TextureCube",0
0088BCE2 0000 0000                  		dc.l mdldata_sphere
0088BCE6 4963 6F20 7370 6865 7265+  		dc.b "Ico sphere ",0
0088BCF2 0000 0000                  		dc.l mdldata_monkey
0088BCF6 4D6F 6E6B 6579 2020 2020+  		dc.b "Monkey     ",0
0088BD02 0000 0000                  		dc.l mdldata_field
0088BD06 536D 616C 6C20 6669 656C+  		dc.b "Small field",0
0088BD12 0000 0000                  		dc.l mdldata_world
0088BD16 4269 6720 6669 656C 6420+  		dc.b "Big field  ",0
0088BD22                            		even
0088BD22                            		
0088BD22                            		
0088BD22 4F62 6A20 2D58 2D20 202D+  Asc_MarsMdl:	dc.b "Obj -X-  -Y-  -Z-  Wld -X-  -Y-  -Z- ",$A
0088BD48 2020 5020 3030 3030 2030+  		dc.b "  P 0000 0000 0000   P 0000 0000 0000",$A
0088BD6E 2020 5220 3030 3030 2030+  		dc.b "  R 0000 0000 0000   R 0000 0000 0000",$A
0088BD94 0A                         		dc.b $A
0088BD95 0A                         		dc.b $A
0088BD96 0A                         		dc.b $A
0088BD97 0A                         		dc.b $A
0088BD98 0A                         		dc.b $A
0088BD99 0A                         		dc.b $A
0088BD9A 0A                         		dc.b $A
0088BD9B 0A                         		dc.b $A
0088BD9C 0A                         		dc.b $A
0088BD9D 0A                         		dc.b $A
0088BD9E 0A                         		dc.b $A
0088BD9F 0A                         		dc.b $A
0088BDA0 0A                         		dc.b $A
0088BDA1 0A                         		dc.b $A
0088BDA2 0A                         		dc.b $A
0088BDA3 0A                         		dc.b $A
0088BDA4 0A                         		dc.b $A
0088BDA5 0A                         		dc.b $A
0088BDA6 0A                         		dc.b $A
0088BDA7 0A                         		dc.b $A
0088BDA8 0A                         		dc.b $A
0088BDA9 0A                         		dc.b $A
0088BDAA 4661 6365 733A 2030 3030+  		dc.b "Faces: 0000",$A
0088BDB6 00                         		dc.b 0
0088BDB8 00                         		even
0088BDB8                            		
0088BDB8                            Asc_Karasucia:
0088BDB8 4B61 7261 7375 6369 612D+  		dc.b "Karasucia-MD game engine",$A
0088BDD1 0A                         		dc.b $A
0088BDD2 5072 6F6A 6563 743A 2044+  		dc.b "Project: Dominoe Adventures",$A
0088BDEE 0A                         		dc.b $A
0088BDEF 0A                         		dc.b $A
0088BDF0 0A                         		dc.b $A
0088BDF1 0A                         		dc.b $A
0088BDF2 0A                         		dc.b $A
0088BDF3 0A                         		dc.b $A
0088BDF4 0A                         		dc.b $A
0088BDF5 0A                         		dc.b $A
0088BDF6 0A                         		dc.b $A
0088BDF7 0A                         		dc.b $A
0088BDF8 0A                         		dc.b $A
0088BDF9 0A                         		dc.b $A
0088BDFA 0A                         		dc.b $A
0088BDFB 0A                         		dc.b $A
0088BDFC 0A                         		dc.b $A
0088BDFD 0A                         		dc.b $A
0088BDFE 0A                         		dc.b $A
0088BDFF 0A                         		dc.b $A
0088BE00 0A                         		dc.b $A
0088BE01 0A                         		dc.b $A
0088BE02 0A                         		dc.b $A
0088BE03 0A                         		dc.b $A
0088BE04 2843 2947 4636 3420 3230+  		dc.b "(C)GF64 2017"
0088BE10 00                         		dc.b 0
0088BE12 00                         		even
0088BE12                            		
0088BE12                            Art_DebugFont:	incbin "engine/shared/dbgfont.bin"
0088CE12                            Art_DebugFont_e:
0088CE12                            		even
0088CE12                            		
0088CE12                            		
0088CE12                            		include "engine/modes/level/md.asm"
0088CE12                            ; ====================================================================
0088CE12                            ; -------------------------------------------------
0088CE12                            ; Level
0088CE12                            ; 
0088CE12                            ; CODE ONLY
0088CE12                            ; -------------------------------------------------
0088CE12                            
0088CE12                            ; --------------------------------------------
0088CE12                            ; RAM
0088CE12                            ; --------------------------------------------
0088CE12                            
0088CE12                            		rsset RAM_ModeBuffer
0088CE12                            ;Prize data: $FF0000-$FF87FF
0088CE12 =FFFFBC00                  RAM_Level	rs.b $440
0088CE12 =FFFFC040                  RAM_ObjectSys	rs.b $1B80
0088CE12 =FFFFDBC0                  sizeof_lvl	rs.l 0
0088CE12                            ;       		inform 0,"Level mode uses: %h",(sizeof_lvl-RAM_ModeBuffer)
0088CE12                            		
0088CE12                            ; --------------------------------------------
0088CE12                            ; Init
0088CE12                            ; --------------------------------------------
0088CE12                            
0088CE12                            mode_Level:
0088CE24 46FC 2700                  		move.w	#$2700,sr
0088CE28 4279 FFFF DC06             		clr.w	(RAM_CurrLevel)
0088CE2E 6100 BD40                  		bsr	Video_ClearAll
0088CE32                            		
0088CE32                            ; --------------
0088CE32                            ; Load resources
0088CE32                            ; --------------
0088CE32                            
0088CE32 41F9 0000 0000             		lea	(Pal_LvlCoinItms),a0
0088CE38 43F9 FFFF EA10             		lea	(RAM_PalFade+$40),a1
0088CE3E 303C 000F                  		move.w	#16-1,d0
0088CE42                            @copyextpal:
0088CE42 32D8                       		move.w	(a0)+,(a1)+
0088CE44 51C8 FFFC                  		dbf	d0,@copyextpal
0088CE48                            		
0088CE48 41F9 0000 0000             		lea	(Pal_Player),a0
0088CE4E 303C 000F                  		move.w	#16-1,d0
0088CE52                            @copychrpal:
0088CE52 32D8                       		move.w	(a0)+,(a1)+
0088CE54 51C8 FFFC                  		dbf	d0,@copychrpal
0088CE58                            		
0088CE58                            		;Same art for everything
0088CE58 41F9 0000 0000             		lea	(Art_Lvl_Test),a0
0088CE5E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,(vdp_ctrl)
0088CE68 303C 0000                  		move.w	#((Art_Lvl_Test_e-Art_Lvl_Test)/4)-1,d0
0088CE6C                            @copy_art:
0088CE6C 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0088CE72 51C8 FFF8                  		dbf	d0,@copy_art
0088CE76                            		
0088CE76 41F9 0000 0000             		lea	(Art_LvlBG_Test),a0
0088CE7C 23FC 7800 0000 00C0 0004   		move.l	#$78000000,(vdp_ctrl)
0088CE86 303C 0000                  		move.w	#((Art_LvlBG_Test_e-Art_LvlBG_Test)/4)-1,d0
0088CE8A                            @dobgart:
0088CE8A 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0088CE90 51C8 FFF8                  		dbf	d0,@dobgart
0088CE94                               				
0088CE94 6100 0000                  		bsr	Level_Init
0088CE98 43F9 0000 0000                		lea	(artdata_Level_Test),a1
0088CE9E 6100 0000                     		bsr	Level_LoadArtList
0088CEA2                            
0088CEA2                            ; **************
0088CEA2                            ; DEBUG ONLY
0088CEA2                            ; **************
0088CEA2                            
0088CEA2 23FC 5000 0003 00C0 0004   		move.l	#$50000003,(vdp_ctrl)
0088CEAC 41F9 0088 BE12             		lea	(Art_DebugFont),a0
0088CEB2 303C 03FF                  		move.w	#((Art_DebugFont_e-Art_DebugFont)/4)-1,d0
0088CEB6                            @dbg_loop:
0088CEB6 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0088CEBC 51C8 FFF8                  		dbf	d0,@dbg_loop
0088CEC0                            		
0088CEC0                            ;    		move.l	#$40800001,(vdp_ctrl)		
0088CEC0                            ;    		move.l	#$17100000,(vdp_data)
0088CEC0                            ;    		move.l	#$71700000,(vdp_data)
0088CEC0                            ;    		move.l	#$17100000,(vdp_data)
0088CEC0                            ;      		move.w	#1,(RAM_CurrLevel)
0088CEC0                                 		
0088CEC0                            ;      		if MCD=0
0088CEC0                            ;  		move.l	#TEST_IT,d0
0088CEC0                            ;  		moveq 	#7,d1
0088CEC0                            ;  		moveq	#0,d2
0088CEC0                            ;   		bsr	Audio_Track_play
0088CEC0                            ;   		endif
0088CEC0                            		
0088CEC0                            ; --------------
0088CEC0                            ; Restart
0088CEC0                            ; --------------
0088CEC0                            
0088CEC0                            @restart:
0088CEC0 6100 BD06                  		bsr	Video_ClearScroll
0088CEC4 6100 BCC0                  		bsr	Video_ClearSprites
0088CEC8 6100 0000                    		bsr	Objects_Init
0088CECC 6100 0000                  		bsr	Level_FromList
0088CED0 6100 0000                    		bsr	Level_Draw
0088CED4 6100 0000                     		bsr	Level_Run
0088CED8                               		
0088CED8 41F9 0000 0000             		lea	(Map_LvlBG_Test),a0
0088CEDE 7001                        		moveq	#1,d0
0088CEE0 223C 0000 0000              		move.l	#$00000000,d1
0088CEE6 243C 003F 001F                		move.l	#$003F001F,d2
0088CEEC 363C 21C0                     		move.w	#$21C0,d3
0088CEF0 6100 BE54                     		bsr	Video_MakeMap
0088CEF4                               		
0088CEF4 203C 0000 0000               		move.l	#Music_Level1,d0
0088CEFA 7201                         		moveq 	#1,d1
0088CEFC 7400                         		moveq	#0,d2
0088CEFE 6100 CA82                    		bsr	Audio_Track_play
0088CF02                              		
0088CF02 46FC 2000                   		move.w	#$2000,sr
0088CF06                             		
0088CF06 6100 0000                    		bsr	Objects_Run
0088CF0A                            ; 		bsr	Level_DbgInit
0088CF1C                             		
0088CF1C                            ; --------------------------------------------
0088CF1C                            ; Loop
0088CF1C                            ; --------------------------------------------
0088CF1C                            
0088CF1C                            @loop:
0088CF1C 6100 BEB0                   		bsr	Video_vsync
0088CF20                             		
0088CF20 6100 0000                     		bsr	Level_BlockUpd	
0088CF24 6100 0000                    		bsr	Objects_Run
0088CF28 6100 0000                     		bsr	Level_Run
0088CF2C                            ;    		bsr	Level_Debug
0088CF2C                            		
0088CF2C                            ; -----------------------------------------
0088CF2C                            
0088CF2C 0839 0007 FFFF DE85        		btst	#bitJoyStart,(RAM_Control_1+OnPress)
0088CF34 6700                        		beq.s	@ignore_st
0088CF36 4239 FFFF DE4F              		clr.b	(RAM_GameMode)
0088CF3C 4E75                        		rts
0088CF3E                            @ignore_st:
0088CF3E                            ; 		btst	#bitJoyA,(RAM_Control_2+OnHold)
0088CF3E                            ;  		beq.s	@ignore_d
0088CF3E                            ;  		move.b	#1,(RAM_ModeReset)
0088CF3E                            ;   		add.w	#1,(RAM_CurrLevel)
0088CF3E                            ; 
0088CF3E                            ; @ignore_d:
0088CF3E 4A39 FFFF DE4C             		tst.b	(RAM_ModeReset)
0088CF44 6700 FFD6                  		beq	@loop
0088CF48 4239 FFFF DE4C             		clr.b	(RAM_ModeReset)
0088CF4E                            		
0088CF4E 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
0088CF54 6700                       		beq.s	@gameover
0088CF68 46FC 2700                   		move.w	#$2700,sr
0088CF6C 6000 FF52                   		bra	@Restart
0088CF70                            
0088CF70                            ; --------------------------------------------
0088CF70                            ; Game Over
0088CF70                            ; --------------------------------------------
0088CF70                            
0088CF70                            @gameover:
0088CF70 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
0088CF76 4E75                       		rts
0088CF78                            		
0088CF78                            ; ====================================================================
0088CF78                            ; --------------------------------------------
0088CF78                            ; Subs
0088CF78                            ; --------------------------------------------
0088CF78                            
0088CF78                            Level_DbgInit:
0088CF78                            ; 		move.w	#$EEE,(RAM_PalFade+$42)
0088CF78 41FA 0000                  		lea	ascDebugTop(pc),a0
0088CF7C 7002                       		moveq	#2,d0
0088CF7E 223C 0000 0000             		move.l	#$00000000,d1
0088CF84 343C 0680                  		move.w	#$680,d2
0088CF88 6100 BE12                  		bsr	Video_PrintText
0088CF8C                            		
0088CF8C 23FC 9100 9201 00C0 0004   		move.l	#$91009201,(vdp_ctrl)
0088CF96                            		
0088CF96                            Level_Debug:
0088CF96                            ;  		moveq	#2,d0
0088CF96                            ; 		move.l	#$00060000,d1
0088CF96                            ; 		moveq	#0,d2
0088CF96                            ; 		move.w	(RAM_P1_Coins),d2
0088CF96                            ; 		move.w	#$680,d3
0088CF96                            ; 		moveq	#4,d4
0088CF96                            ; 		bsr	Video_PrintVal
0088CF96                            ; 
0088CF96                            ;  		moveq	#2,d0
0088CF96                            ; 		move.l	#$000F0000,d1
0088CF96                            ; 		moveq	#0,d2
0088CF96                            ; 		move.w	(RAM_P1_Hits),d2
0088CF96                            ; 		move.w	#$680,d3
0088CF96                            ; 		moveq	#4,d4
0088CF96                            ; 		bsr	Video_PrintVal
0088CF96                            
0088CF96 7002                        		moveq	#2,d0
0088CF98 223C 001B 0000             		move.l	#$001B0000,d1
0088CF9E 2439 0000 0000             		move.l	(RAM_ObjBuffer+obj_y_spd),d2
0088CFA4 363C 0680                  		move.w	#$680,d3
0088CFA8 7802                       		moveq	#2,d4
0088CFAA 6100 BD2E                  		bsr	Video_PrintVal
0088CFAE                            		
0088CFAE 7002                        		moveq	#2,d0
0088CFB0 223C 0018 0000             		move.l	#$00180000,d1
0088CFB6 7400                       		moveq	#0,d2
0088CFB8 1439 0000 0000             		move.b	(RAM_ObjBuffer+obj_col),d2
0088CFBE 363C 0680                  		move.w	#$680,d3
0088CFC2 7800                       		moveq	#0,d4
0088CFC4 6100 BD14                  		bsr	Video_PrintVal
0088CFC8                            		
0088CFC8 7002                        		moveq	#2,d0
0088CFCA 223C 000C 0000             		move.l	#$000C0000,d1
0088CFD0 7400                       		moveq	#0,d2
0088CFD2 1439 0000 0000             		move.b	(RAM_ObjBuffer+obj_status),d2
0088CFD8 363C 0680                  		move.w	#$680,d3
0088CFDC 7800                       		moveq	#0,d4
0088CFDE 6000 BCFA                  		bra	Video_PrintVal
0088CFE2                            		
0088CFE2                            ; -----------------------
0088CFE2                            
0088CFE2                            Level_FromList:
0088CFE2 3039 FFFF DC06             		move.w	(RAM_CurrLevel),d0
0088CFE8 E948                       		lsl.w	#4,d0
0088CFEA 49F9 0000 0000             		lea	(LevelList),a4
0088CFF0 2074 0000                  		movea.l	(a4,d0.w),a0
0088CFF4 6100 0000                  		bsr	Level_Load
0088CFF8 43F9 0000 0000             		lea	(RAM_LvlPlanes),a1
0088CFFE 1374 0000 0000             		move.b	(a4,d0.w),lvl_type(a1)
0088D004                            		
0088D004 41F9 0000 0000             		lea	(Pal_LvlMain_Gray),a0
0088D00A 43F9 FFFF E9D0             		lea	(RAM_PalFade),a1
0088D010 7000                       		moveq	#0,d0
0088D012 303C 001F                  		move.w	#32-1,d0
0088D016                            @copy_pal:
0088D016 32D8                       		move.w	(a0)+,(a1)+
0088D018 51C8 FFFC                  		dbf	d0,@copy_pal
0088D01C                            		
0088D01C 3239 FFFF DC06             		move.w	(RAM_CurrLevel),d1
0088D022 E949                       		lsl.w	#4,d1
0088D024                            		
0088D024 7000                       		moveq	#0,d0
0088D026 3034 1008                   		move.w	8(a4,d1.w),d0
0088D02A 4840                        		swap	d0
0088D02C 3034 100A                     		move.w	$A(a4,d1.w),d0
0088D030 4239 0000 0000                 		clr.b	(RAM_ObjBuffer+obj_index)
0088D036 23FC 0000 0000 0000 0000       		move.l	#Obj_Player,(RAM_ObjBuffer)
0088D040 6100 0000                      		bsr	Plyr_SetStartPos
0088D044                            		
0088D044 3239 FFFF DC06             		move.w	(RAM_CurrLevel),d1
0088D04A E949                       		lsl.w	#4,d1
0088D04C 43F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*4)),a1
0088D052 3374 100C 0000              		move.w	$C(a4,d1.w),obj_x(a1)
0088D058 3374 100E 0000                		move.w	$E(a4,d1.w),obj_y(a1)
0088D05E 237C 0000 0000 0000        		move.l	#Obj_EndFlag,obj_code(a1)
0088D066 43F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*6)),a1	
0088D06C 237C 0000 0000 0000        		move.l	#Obj_HudInfo,obj_code(a1)
0088D074 337C 0000 0000             		move.w	#0,obj_x(a1)
0088D07A 337C 0000 0000             		move.w	#0,obj_y(a1)
0088D080 4E75                       		rts
0088D082                            		
0088D082 6F62 6A5F 7374 6174 7573+  ascDebugTop:	dc.b "obj_status: 00 obj_col: 00              ",0
0088D0AB                            ; 		dc.b "                              00000000",0
0088D0AC 00                         		even
0088D0AC                            		
0088D0AC                            ; --------------------------------------------
0088D0AC                            
0088D0AC                            		include	"engine/modes/level/subs/level.asm"
0088D0AC                            ; ====================================================================
0088D0AC                            ; ---------------------------------------------
0088D0AC                            ; Level system
0088D0AC                            ; ---------------------------------------------
0088D0AC                            
0088D0AC                            ; *** NOTES ***
0088D0AC                            ; MAX Prize size: $7FFF
0088D0AC                            
0088D0AC                            ; --------------------------------------------
0088D0AC                            ; Variables
0088D0AC                            ; --------------------------------------------
0088D0AC                            
0088D0AC                            		rsreset
0088D0AC =00000000                  lvl_objects	rs.l 1
0088D0AC =00000004                  lvl_blocks	rs.l 1
0088D0AC =00000008                  lvl_przblocks	rs.l 1
0088D0AC =0000000C                  lvl_layout	rs.l 1
0088D0AC =00000010                  lvl_hilayout	rs.l 1
0088D0AC =00000014                  lvl_collision	rs.l 1
0088D0AC =00000018                  lvl_prizes	rs.l 1
0088D0AC =0000001C                  lvl_x		rs.l 1
0088D0AC =00000020                  lvl_y		rs.l 1
0088D0AC =00000024                  lvl_x_camspd	rs.l 1
0088D0AC =00000028                  lvl_y_camspd	rs.l 1
0088D0AC =0000002C                  lvl_timer	rs.l 1
0088D0AC =00000030                  lvl_size_x	rs.w 1
0088D0AC =00000032                  lvl_size_y	rs.w 1
0088D0AC =00000034                  lvl_maxcam_x	rs.w 1
0088D0AC =00000036                  lvl_maxcam_y	rs.w 1
0088D0AC =00000038                  lvl_camflags	rs.w 1
0088D0AC =0000003A                  lvl_flags	rs.w 1
0088D0AC =0000003C                  lvl_type	rs.w 1
0088D0AC =0000003E                  lvl_lastx	rs.w 1
0088D0AC =00000040                  lvl_lasty	rs.w 1
0088D0AC =00000042                  sizeof_lvlpln	rs.l 0
0088D0AC                            
0088D0AC                            ; --------------------------------------------
0088D0AC                            
0088D0AC =00000046                  max_lvlobj	equ	70
0088D0AC                            
0088D0AC =00000000                  bitLvlDirR	equ	0
0088D0AC =00000001                  bitLvlDirL	equ	1
0088D0AC =00000002                  bitLvlDirD	equ	2
0088D0AC =00000003                  bitLvlDirU	equ	3
0088D0AC =00000004                  bitLvlDontUpd	equ	4
0088D0AC                            
0088D0AC                            ; RAM_LevelPrizes	equ	$FF0000
0088D0AC                            
0088D0AC                            ; --------------------------------------------
0088D0AC                            ; RAM
0088D0AC                            ; --------------------------------------------
0088D0AC                            
0088D0AC                            		rsset RAM_Level
0088D0AC =FFFFBC00                  RAM_LvlPlanes	rs.b sizeof_lvlpln
0088D0AC =FFFFBC42                  RAM_LevelObjPos	rs.w (max_lvlobj)*5
0088D0AC =FFFFBEFE                  RAM_LvlAnim	rs.w 16
0088D0AC =FFFFBF1E                  RAM_PrizeHide	rs.w 1+(2*16)
0088D0AC =FFFFBF60                  RAM_PrizeShow	rs.w 1+(2*16)
0088D0AC =FFFFBFA2                  RAM_PrizeUsed	rs.w 1+(2*16)
0088D0AC                            
0088D0AC =FFFFBFE4                  sizeof_lvl2	rs.l 0
0088D0AC                            ;    		inform 0,"Level system uses: %h",(sizeof_lvl2-RAM_Level)
0088D0AC                            		
0088D0AC                            ; ====================================================================	
0088D0AC                            ; --------------------------------------------
0088D0AC                            ; Init
0088D0AC                            ; --------------------------------------------
0088D0AC                            
0088D0AC                            Level_Init:
0088D0AC 4279 FFFF DC02             		clr.w	(RAM_P1_Coins)
0088D0B2 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
0088D0B8 6600                       		bne.s	@firsttime
0088D0BA 33FC 0003 FFFF DC00        		move.w	#3,(RAM_P1_Lives)
0088D0C2                            @firsttime:
0088D0C2 13FC 0003 FFFF ED1B          		move.b	#%11,(RAM_VidRegs+$B)		; H: line V: full
0088D0CA                            ;      		move.b	#%10000111,(RAM_VidRegs+$C)	; H40 + Double interlace
0088D0CA 13FC 0001 FFFF ED20          		move.b	#1,(RAM_VidRegs+$10)		; 512x256 layer size
0088D0D2 6100 BB22                    		bsr	Video_Update
0088D0D6                             		
0088D0D6 41F9 0000 0000             		lea	(Art_LvlPrizes),a0
0088D0DC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,(vdp_ctrl)
0088D0E6 303C 0000                  		move.w	#((Art_LvlPrizes_e-Art_LvlPrizes)/4)-1,d0
0088D0EA                            @doprzart:
0088D0EA 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0088D0F0 51C8 FFF8                  		dbf	d0,@doprzart
0088D0F4                            		
0088D0F4                            ; 		move.w	#-1,(RAM_LvlPlanes+lvl_lastx)b
0088D0F4                            ; 		move.w	#-1,(RAM_LvlPlanes+lvl_lasty)		
0088D0F4 4E75                       		rts
0088D0F6                            		
0088D0F6                            ; ====================================================================		
0088D0F6                            ; --------------------------------------------
0088D0F6                            ; Loop
0088D0F6                            ; --------------------------------------------
0088D0F6                            
0088D0F6                            Level_Run:
0088D0F6 4DF9 FFFF BC00             		lea	(RAM_LvlPlanes),a6
0088D0FC                            		
0088D0FC 6100 0000                   		bsr	Lvl_RefreshObj
0088D100 6100 0000                  		bsr	Lvl_DrawScrl
0088D104 6100 0000                  		bsr	Lvl_Animation
0088D108 6000 0000                  		bra	Lvl_Deform
0088D10C                            		
0088D10C                            ; -----------------------------------
0088D10C                             
0088D10C                            Level_BlockUpd:
0088D10C 4DF9 FFFF BC00             		lea	(RAM_LvlPlanes),a6
0088D112 4BF9 FFFF BF1E             		lea	(RAM_PrizeHide),a5
0088D118 3C15                       		move.w	(a5),d6
0088D11A 425D                       		clr.w	(a5)+
0088D11C 4A46                       		tst.w	d6
0088D11E 6700                       		beq.s	@skip_hide
0088D120 0446 0001                  		sub.w	#1,d6
0088D124                            @next_hide:
0088D124 2015                       		move.l	(a5),d0
0088D126 6100 0000                   		bsr	Lvl_DoHidePrz
0088D12A 429D                        		clr.l	(a5)+
0088D12C 51CE FFF6                   		dbf	d6,@next_hide
0088D130                            @skip_hide:
0088D130                            
0088D130 4BF9 FFFF BF60             		lea	(RAM_PrizeShow),a5
0088D136 3C15                       		move.w	(a5),d6
0088D138 425D                       		clr.w	(a5)+
0088D13A 4A46                       		tst.w	d6
0088D13C 6700                       		beq.s	@skip_show
0088D13E 0446 0001                  		sub.w	#1,d6
0088D142                            @next_show:
0088D142 2015                       		move.l	(a5),d0
0088D144 6100 0000                   		bsr	Lvl_DoShowPrz
0088D148 429D                        		clr.l	(a5)+
0088D14A 51CE FFF6                   		dbf	d6,@next_show
0088D14E                            @skip_show:
0088D14E                            		
0088D14E 4E75                       		rts
0088D150                            		
0088D150                            ; ====================================================================
0088D150                            ; --------------------------------------------
0088D150                            ; Subs
0088D150                            ; --------------------------------------------
0088D150                            
0088D150                            Lvl_DrawScrl:
0088D150                            
0088D150                            ; -----------------------------------
0088D150                            ; RIGHT
0088D150                            ; -----------------------------------
0088D150                            
0088D150 302E 003E                  		move.w	lvl_lastx(a6),d0
0088D154 322E 001C                  		move.w	lvl_x(a6),d1
0088D158 B240                       		cmp.w	d0,d1
0088D15A 6700 0000                  		beq	@dontupdL
0088D15E 3D41 003E                  		move.w	d1,lvl_lastx(a6)
0088D162                            		
0088D162 082E 0000 003A             		btst	#bitLvlDirR,lvl_flags(a6)
0088D168 6700 0000                  		beq	@dontupdR
0088D16C 08AE 0000 003A             		bclr	#bitLvlDirR,lvl_flags(a6)
0088D172 303C 4000                  		move.w	#$4000,d0
0088D176 2A6E 000C                  		movea.l	lvl_layout(a6),a5
0088D17A 286E 0010                  		movea.l lvl_hilayout(a6),a4
0088D17E 266E 0018                  		movea.l	lvl_prizes(a6),a3
0088D182                            		
0088D182 382E 0020                  		move.w	lvl_y(a6),d4
0088D186 3404                       		move.w	d4,d2
0088D188 E84A                       		lsr.w	#4,d2
0088D18A C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
0088D18E DAC2                        		adda	d2,a5
0088D190 D8C2                        		adda 	d2,a4
0088D192 D6C2                        		adda	d2,a3
0088D194                             		
0088D194 3604                        		move.w	d4,d3
0088D196 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
0088D19A 0644 0150                  		add.w	#$150,d4
0088D19E 3204                       		move.w	d4,d1
0088D1A0 E849                       		lsr.w	#4,d1
0088D1A2 DAC1                        		adda	d1,a5
0088D1A4 D8C1                        		adda 	d1,a4
0088D1A6 D6C1                        		adda	d1,a3
0088D1A8                            
0088D1A8 E44C                       		lsr.w	#2,d4
0088D1AA 0244 007C                  		and.w	#$7C,d4
0088D1AE E94B                       		lsl.w	#4,d3			; VDP YPOS
0088D1B0 0243 0F00                  		and.w	#$F00,d3
0088D1B4 D843                       		add.w	d3,d4
0088D1B6 8840                       		or.w	d0,d4
0088D1B8 4844                       		swap	d4
0088D1BA 383C 0003                   		move.w	#3,d4
0088D1BE                             		
0088D1BE 363C 000F                   		move.w	#$F,d3
0088D1C2                            ;   		move.l	#$00010001,d1
0088D1C2                            @nextblkR:
0088D1C2 7000                       		moveq	#0,d0
0088D1C4 246E 0004                  		movea.l	lvl_blocks(a6),a2
0088D1C8 1013                       		move.b	(a3),d0
0088D1CA 4A00                        		tst.b	d0
0088D1CC 6700                        		beq.s	@noPrzR
0088D1CE 0800 0007                   		btst	#7,d0
0088D1D2 6600                        		bne.s	@noPrzR
0088D1D4 0240 007F                   		and.w	#$7F,d0
0088D1D8 246E 0008                  		movea.l	lvl_przblocks(a6),a2
0088D1DC 6000                       		bra.s	@hasprzR
0088D1DE                            @noPrzR:
0088D1DE 1015                       		move.b	(a5),d0
0088D1E0 4A14                       		tst.b 	(a4)
0088D1E2 6700                       		beq.s 	@hasprzR
0088D1E4 1014                       		move.b 	(a4),d0
0088D1E6                            @hasprzR:
0088D1E6                            		
0088D1E6 E748                       		lsl.w	#3,d0
0088D1E8 3232 0002                  		move.w	2(a2,d0.w),d1
0088D1EC 4841                       		swap	d1
0088D1EE 3232 0000                  		move.w	(a2,d0.w),d1
0088D1F2 3432 0006                   		move.w	6(a2,d0.w),d2
0088D1F6 4842                        		swap	d2
0088D1F8 3432 0004                   		move.w	4(a2,d0.w),d2
0088D1FC                            
0088D1FC 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
0088D202 0684 0080 0000              		add.l	#$00800000,d4
0088D208 0284 4FFE 0003               		and.l	#$4FFE0003,d4
0088D20E                              		
0088D20E 4843                         		swap	d3
0088D210 1639 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d3
0088D216 0243 0006                   		and.w	#%110,d3
0088D21A 6700                        		beq.s	@dontShftV_R
0088D21C E249                        		lsr.w	#1,d1
0088D21E E24A                        		lsr.w	#1,d2
0088D220                            @dontShftV_R:
0088D220 4843                       		swap	d3
0088D222 4A14                       		tst.b 	(a4)
0088D224 6700                       		beq.s 	@nohiprioR
0088D226 0041 8000                  		or.w 	#$8000,d1
0088D22A 0042 8000                  		or.w 	#$8000,d2
0088D22E                            @nohiprioR:
0088D22E 33C1 00C0 0000              		move.w	d1,(vdp_data)
0088D234 33C2 00C0 0000              		move.w	d2,(vdp_data)
0088D23A                             		
0088D23A 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
0088D240 0241 0006                   		and.w	#%110,d1
0088D244 6600                        		bne.s	@dontupdR_2
0088D246                             		
0088D246 4841                        		swap	d1
0088D248 4842                        		swap	d2
0088D24A 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
0088D250 0684 0080 0000              		add.l	#$00800000,d4
0088D256 0284 4FFE 0003               		and.l	#$4FFE0003,d4
0088D25C 4A14                         		tst.b 	(a4)
0088D25E 6700                       		beq.s 	@nohiprioR_2
0088D260 0041 8000                  		or.w 	#$8000,d1
0088D264 0042 8000                  		or.w 	#$8000,d2
0088D268                            @nohiprioR_2:
0088D268 33C1 00C0 0000              		move.w	d1,(vdp_data)
0088D26E 33C2 00C0 0000              		move.w	d2,(vdp_data)
0088D274                             		
0088D274                            @dontupdR_2:
0088D274 DAEE 0030                   		add.w	lvl_size_x(a6),a5
0088D278 D8EE 0030                   		add.w 	lvl_size_x(a6),a4
0088D27C D6EE 0030                   		add.w	lvl_size_x(a6),a3
0088D280 51CB FF40                  		dbf	d3,@nextblkR
0088D284                            @dontupdR:
0088D284                            	
0088D284                            ; -----------------------------------
0088D284                            ; LEFT
0088D284                            ; -----------------------------------
0088D284                            
0088D284 082E 0001 003A             		btst	#bitLvlDirL,lvl_flags(a6)
0088D28A 6700 0000                  		beq	@dontupdL
0088D28E 08AE 0001 003A             		bclr	#bitLvlDirL,lvl_flags(a6)
0088D294 303C 4000                  		move.w	#$4000,d0
0088D298 2A6E 000C                  		movea.l	lvl_layout(a6),a5
0088D29C 286E 0010                  		movea.l lvl_hilayout(a6),a4
0088D2A0 266E 0018                  		movea.l	lvl_prizes(a6),a3
0088D2A4                            		
0088D2A4 382E 0020                  		move.w	lvl_y(a6),d4
0088D2A8 3404                       		move.w	d4,d2
0088D2AA E84A                       		lsr.w	#4,d2
0088D2AC C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
0088D2B0 DAC2                        		adda	d2,a5
0088D2B2 D8C2                        		adda	d2,a4
0088D2B4 D6C2                        		adda	d2,a3
0088D2B6 3604                        		move.w	d4,d3
0088D2B8                             		
0088D2B8 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
0088D2BC 0444 0010                       		sub.w	#$010,d4		; TODO CHECAR SI FUNCIONA BIEN
0088D2C0 3204                       		move.w	d4,d1
0088D2C2 E849                       		lsr.w	#4,d1
0088D2C4 DAC1                        		adda	d1,a5
0088D2C6 D8C1                        		adda	d1,a4
0088D2C8 D6C1                        		adda	d1,a3
0088D2CA                             		
0088D2CA E44C                       		lsr.w	#2,d4
0088D2CC 0244 007C                  		and.w	#$7C,d4
0088D2D0 E94B                       		lsl.w	#4,d3			; VDP YPOS
0088D2D2 0243 0F00                  		and.w	#$F00,d3
0088D2D6 D843                       		add.w	d3,d4
0088D2D8 8840                       		or.w	d0,d4
0088D2DA 4844                       		swap	d4
0088D2DC 383C 0003                   		move.w	#3,d4
0088D2E0                             		
0088D2E0 363C 000F                   		move.w	#$F,d3
0088D2E4                            ;  		move.l	#$00010001,d1
0088D2E4                            @nextblkL:
0088D2E4 7000                       		moveq	#0,d0
0088D2E6 246E 0004                  		movea.l	lvl_blocks(a6),a2
0088D2EA 1013                       		move.b	(a3),d0
0088D2EC 4A00                        		tst.b	d0
0088D2EE 6700                        		beq.s	@noPrzL
0088D2F0 0800 0007                   		btst	#7,d0
0088D2F4 6600                        		bne.s	@noPrzL
0088D2F6 0240 007F                   		and.w	#$7F,d0
0088D2FA 246E 0008                  		movea.l	lvl_przblocks(a6),a2
0088D2FE 6000                       		bra.s	@hasprzL
0088D300                            @noPrzL:
0088D300 1015                       		move.b	(a5),d0
0088D302 4A14                       		tst.b 	(a4)
0088D304 6700                       		beq.s 	@hasprzL
0088D306 1014                       		move.b 	(a4),d0
0088D308                            @hasprzL:
0088D308 E748                       		lsl.w	#3,d0
0088D30A 3232 0002                  		move.w	2(a2,d0.w),d1
0088D30E 4841                       		swap	d1
0088D310 3232 0000                  		move.w	(a2,d0.w),d1
0088D314 3432 0006                   		move.w	6(a2,d0.w),d2
0088D318 4842                        		swap	d2
0088D31A 3432 0004                   		move.w	4(a2,d0.w),d2
0088D31E                            
0088D31E 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
0088D324 0684 0080 0000              		add.l	#$00800000,d4
0088D32A 0284 4FFE 0003               		and.l	#$4FFE0003,d4
0088D330                              		
0088D330 4843                         		swap	d3
0088D332 1639 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d3
0088D338 0243 0006                   		and.w	#%110,d3
0088D33C 6700                        		beq.s	@dontShftV_L
0088D33E E249                        		lsr.w	#1,d1
0088D340 E24A                        		lsr.w	#1,d2
0088D342                            @dontShftV_L:
0088D342 4843                       		swap	d3
0088D344 4A14                       		tst.b 	(a4)
0088D346 6700                       		beq.s 	@nohiprioL
0088D348 0041 8000                  		or.w	#$8000,d1
0088D34C 0042 8000                  		or.w 	#$8000,d2
0088D350                            @nohiprioL:
0088D350 33C1 00C0 0000              		move.w	d1,(vdp_data)
0088D356 33C2 00C0 0000              		move.w	d2,(vdp_data)
0088D35C                             		
0088D35C 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
0088D362 0241 0006                   		and.w	#%110,d1
0088D366 6600                        		bne.s	@dontupdL_2
0088D368                             		
0088D368 4841                        		swap	d1
0088D36A 4842                        		swap	d2
0088D36C 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
0088D372 0684 0080 0000              		add.l	#$00800000,d4
0088D378 0284 4FFE 0003               		and.l	#$4FFE0003,d4
0088D37E 4A14                       		tst.b 	(a4)
0088D380 6700                       		beq.s 	@nohiprioL_2
0088D382 0041 8000                  		or.w	#$8000,d1
0088D386 0042 8000                  		or.w 	#$8000,d2
0088D38A                            @nohiprioL_2:
0088D38A 33C1 00C0 0000              		move.w	d1,(vdp_data)
0088D390 33C2 00C0 0000              		move.w	d2,(vdp_data)
0088D396                             		
0088D396                            @dontupdL_2:
0088D396 DAEE 0030                   		add.w	lvl_size_x(a6),a5
0088D39A D8EE 0030                   		add.w	lvl_size_x(a6),a4
0088D39E D6EE 0030                   		add.w	lvl_size_x(a6),a3
0088D3A2 51CB FF40                  		dbf	d3,@nextblkL
0088D3A6                            @dontupdL:
0088D3A6                            
0088D3A6                            ; -----------------------------------
0088D3A6                            ; DOWN
0088D3A6                            ; -----------------------------------
0088D3A6                            
0088D3A6 302E 0040                  		move.w	lvl_lasty(a6),d0
0088D3AA 322E 0020                  		move.w	lvl_y(a6),d1
0088D3AE B240                       		cmp.w	d0,d1
0088D3B0 6700 0000                  		beq	@dontupdU
0088D3B4 3D41 0040                  		move.w	d1,lvl_lasty(a6)
0088D3B8                            		
0088D3B8 082E 0002 003A             		btst	#bitLvlDirD,lvl_flags(a6)
0088D3BE 6700 0000                  		beq	@dontupdD
0088D3C2 08AE 0002 003A             		bclr	#bitLvlDirD,lvl_flags(a6)
0088D3C8                            			
0088D3C8 2A6E 000C                  		movea.l	lvl_layout(a6),a5
0088D3CC 286E 0010                  		movea.l lvl_hilayout(a6),a4
0088D3D0 266E 0018                  		movea.l	lvl_prizes(a6),a3
0088D3D4                            
0088D3D4 382E 0020                  		move.w	lvl_y(a6),d4
0088D3D8 303C 4000                  		move.w	#$4000,d0
0088D3DC 0644 00E0                  		add.w	#$0E0,d4
0088D3E0 3404                       		move.w	d4,d2
0088D3E2 E84A                       		lsr.w	#4,d2
0088D3E4 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
0088D3E8 DAC2                        		adda	d2,a5
0088D3EA D8C2                        		adda	d2,a4
0088D3EC D6C2                        		adda	d2,a3
0088D3EE 3604                        		move.w	d4,d3
0088D3F0                            
0088D3F0 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
0088D3F4 3404                       		move.w	d4,d2
0088D3F6 3204                       		move.w	d4,d1
0088D3F8 E849                       		lsr.w	#4,d1
0088D3FA DAC1                        		adda	d1,a5
0088D3FC D8C1                        		adda 	d1,a4
0088D3FE D6C1                        		adda	d1,a3
0088D400 E44C                       		lsr.w	#2,d4
0088D402 0244 007C                  		and.w	#$7C,d4
0088D406 E94B                       		lsl.w	#4,d3			; VDP YPOS
0088D408 0243 0F00                  		and.w	#$F00,d3
0088D40C 8843                       		or.w	d3,d4
0088D40E 8840                       		or.w	d0,d4
0088D410 4844                       		swap	d4
0088D412 383C 0003                   		move.w	#3,d4
0088D416                            
0088D416 363C 0015                   		move.w	#$15,d3
0088D41A                            ;  		move.l	#$00010001,d1
0088D41A 2A04                        		move.l	d4,d5
0088D41C 0285 4F80 0003              		and.l	#$4F800003,d5
0088D422 0284 007E 0000              		and.l	#$007E0000,d4
0088D428                            @nextblkD:
0088D428                            
0088D428 7000                       		moveq	#0,d0
0088D42A 246E 0004                  		movea.l	lvl_blocks(a6),a2
0088D42E 1013                       		move.b	(a3),d0
0088D430 4A00                       		tst.b	d0
0088D432 6700                       		beq.s	@noPrzD
0088D434 0800 0007                  		btst	#7,d0
0088D438 6600 0000                  		bne	@noPrzD
0088D43C 0240 007F                  		and.w	#$7F,d0
0088D440 246E 0008                  		movea.l	lvl_przblocks(a6),a2
0088D444 6000                       		bra.s	@hasprzD
0088D446                            @noPrzD:
0088D446 1015                       		move.b	(a5),d0
0088D448 4A14                       		tst.b 	(a4)
0088D44A 6700                       		beq.s 	@hasprzD
0088D44C 1014                       		move.b 	(a4),d0
0088D44E                            @hasprzD:
0088D44E                            
0088D44E                            
0088D44E                            ; 		moveq	#0,d0
0088D44E                            ; 		movea.l	lvl_przblocks(a6),a2
0088D44E                            ; 		move.b	(a3),d0
0088D44E                            ; 		tst.b	d0
0088D44E                            ; 		bne.s	@hasprzD
0088D44E                            ; 		movea.l	lvl_blocks(a6),a2
0088D44E                            ; 		move.b	(a5),d0
0088D44E                            ; 		tst.b 	(a4)
0088D44E                            ; 		beq.s 	@hasprzD
0088D44E                            ; 		move.b	(a4),d0
0088D44E                            ; @hasprzD:
0088D44E E748                       		lsl.w	#3,d0
0088D450                            		
0088D450 3232 0000                  		move.w	(a2,d0.w),d1
0088D454 4841                       		swap	d1
0088D456 3232 0004                  		move.w	4(a2,d0.w),d1
0088D45A 3432 0002                   		move.w	2(a2,d0.w),d2
0088D45E 4842                        		swap	d2
0088D460 3432 0006                   		move.w	6(a2,d0.w),d2
0088D464                             		
0088D464 8885                       		or.l	d5,d4
0088D466 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
0088D46C                             		
0088D46C                            *  		move.b	(RAM_VidRegs+$C),d2
0088D46C                            *  		and.w	#%110,d2
0088D46C                            *  		beq.s	@dontshftD
0088D46C                            *  		swap 	d1
0088D46C                            *  		move.w	d1,d2
0088D46C                            *  		and.w	#$7FF,d2
0088D46C                            *  		and.w	#$F800,d1
0088D46C                            *  		lsr.w	#1,d2
0088D46C                            *  		or.w	d2,d1
0088D46C                            *  		swap 	d1
0088D46C                            *  		move.w	d1,d2
0088D46C                            *  		and.w	#$7FF,d2
0088D46C                            *  		and.w	#$F800,d1
0088D46C                            *  		lsr.w	#1,d2
0088D46C                            *  		or.w	d2,d1
0088D46C                            *  		
0088D46C                            * @dontshftD:
0088D46C                             		
0088D46C 4A14                         		tst.b 	(a4)
0088D46E 6700                        		beq.s	@nohiprioD
0088D470 0081 8000 8000              		or.l	#$80008000,d1
0088D476                            @nohiprioD:
0088D476 23C1 00C0 0000              		move.l	d1,(vdp_data)
0088D47C                            
0088D47C                            *   		move.b	(RAM_VidRegs+$C),d0
0088D47C                            *  		and.w	#%110,d0
0088D47C                            *  		bne.s	@dontshftD_2
0088D47C                             		
0088D47C 2005                         		move.l	d5,d0
0088D47E 8084                       		or.l	d4,d0
0088D480 0680 0080 0000               		add.l	#$00800000,d0
0088D486 23C0 00C0 0004               		move.l	d0,(vdp_ctrl)
0088D48C 4A14                         		tst.b 	(a4)
0088D48E 6700                        		beq.s	@nohiprioD_2
0088D490 0082 8000 8000              		or.l	#$80008000,d2
0088D496                            @nohiprioD_2:
0088D496 23C2 00C0 0000              		move.l	d2,(vdp_data)
0088D49C                             		
0088D49C                            @dontshftD_2:
0088D49C 0684 0004 0000              		add.l	#$040000,d4
0088D4A2 0284 007E 0000               		and.l	#$7E0000,d4
0088D4A8                              		
0088D4A8 DAFC 0001                   		add.w	#1,a5
0088D4AC D8FC 0001                   		add.w	#1,a4
0088D4B0 D6FC 0001                   		add.w	#1,a3
0088D4B4 51CB FF72                  		dbf	d3,@nextblkD
0088D4B8                            @dontupdD:
0088D4B8                            
0088D4B8                            ; -----------------------------------
0088D4B8                            ; UP
0088D4B8                            ; -----------------------------------
0088D4B8                            
0088D4B8 082E 0003 003A             		btst	#bitLvlDirU,lvl_flags(a6)
0088D4BE 6700 0000                  		beq	@dontupdU
0088D4C2 08AE 0003 003A             		bclr	#bitLvlDirU,lvl_flags(a6)
0088D4C8 2A6E 000C                  		movea.l	lvl_layout(a6),a5
0088D4CC 286E 0010                  		movea.l lvl_hilayout(a6),a4
0088D4D0 266E 0018                  		movea.l	lvl_prizes(a6),a3
0088D4D4                            
0088D4D4 303C 4000                  		move.w	#$4000,d0
0088D4D8 382E 0020                  		move.w	lvl_y(a6),d4
0088D4DC 3204                       		move.w	d4,d1
0088D4DE 4841                       		swap	d1
0088D4E0 3404                       		move.w	d4,d2
0088D4E2 E84A                       		lsr.w	#4,d2
0088D4E4 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
0088D4E8 DAC2                        		adda	d2,a5
0088D4EA D8C2                        		adda 	d2,a4
0088D4EC D6C2                        		adda	d2,a3
0088D4EE 3604                        		move.w	d4,d3
0088D4F0                             		
0088D4F0 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
0088D4F4 3404                       		move.w	d4,d2
0088D4F6 3204                       		move.w	d4,d1
0088D4F8 E849                       		lsr.w	#4,d1
0088D4FA DAC1                        		adda	d1,a5
0088D4FC D8C1                        		adda 	d1,a4
0088D4FE D6C1                        		adda	d1,a3
0088D500 E44C                       		lsr.w	#2,d4
0088D502 0244 007C                  		and.w	#$7C,d4
0088D506 E94B                       		lsl.w	#4,d3			; VDP YPOS
0088D508 0243 0F00                  		and.w	#$F00,d3
0088D50C 8843                       		or.w	d3,d4
0088D50E 8840                       		or.w	d0,d4
0088D510 4844                       		swap	d4
0088D512 383C 0003                   		move.w	#3,d4
0088D516                             		
0088D516 4841                        		swap	d1
0088D518 3401                        		move.w	d1,d2
0088D51A 363C 0015                   		move.w	#$15,d3
0088D51E                            ;  		move.l	#$00010001,d1
0088D51E 2A04                        		move.l	d4,d5
0088D520 0285 4F80 0003              		and.l	#$4F800003,d5
0088D526 0284 007E 0000              		and.l	#$007E0000,d4
0088D52C                            @nextblkU:
0088D52C 7000                       		moveq	#0,d0
0088D52E 246E 0004                  		movea.l	lvl_blocks(a6),a2
0088D532 1013                       		move.b	(a3),d0
0088D534 4A00                       		tst.b	d0
0088D536 6700                       		beq.s	@noPrzU
0088D538 0800 0007                  		btst	#7,d0
0088D53C 6600 0000                  		bne	@noPrzU
0088D540 0240 007F                  		and.w	#$7F,d0
0088D544 246E 0008                  		movea.l	lvl_przblocks(a6),a2
0088D548 6000                       		bra.s	@hasprzU
0088D54A                            @noPrzU:
0088D54A 1015                       		move.b	(a5),d0
0088D54C 4A14                       		tst.b 	(a4)
0088D54E 6700                       		beq.s 	@hasprzU
0088D550 1014                       		move.b 	(a4),d0
0088D552                            @hasprzU:
0088D552                            
0088D552                            ; 		moveq	#0,d0
0088D552                            ; 		movea.l	lvl_przblocks(a6),a2
0088D552                            ; 		move.b	(a3),d0
0088D552                            ; 		tst.b	d0
0088D552                            ; 		bne.s	@hasprzU
0088D552                            ; 		movea.l	lvl_blocks(a6),a2
0088D552                            ; 		move.b	(a5),d0
0088D552                            ; 		tst.b 	(a4)
0088D552                            ; 		beq.s 	@hasprzU
0088D552                            ; 		move.b 	(a4),d0
0088D552                            ; @hasprzU:
0088D552 E748                       		lsl.w	#3,d0
0088D554                            		
0088D554 3232 0000                  		move.w	(a2,d0.w),d1
0088D558 4841                       		swap	d1
0088D55A 3232 0004                  		move.w	4(a2,d0.w),d1
0088D55E 3432 0002                   		move.w	2(a2,d0.w),d2
0088D562 4842                        		swap	d2
0088D564 3432 0006                   		move.w	6(a2,d0.w),d2
0088D568                             		
0088D568 8885                       		or.l	d5,d4
0088D56A 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
0088D570 4A14                        		tst.b 	(a4)
0088D572 6700                        		beq.s	@nohiprioU
0088D574 0081 8000 8000              		or.l	#$80008000,d1
0088D57A                            @nohiprioU:
0088D57A 23C1 00C0 0000              		move.l	d1,(vdp_data)
0088D580 2005                         		move.l	d5,d0
0088D582 8084                       		or.l	d4,d0
0088D584 0680 0080 0000               		add.l	#$00800000,d0
0088D58A 23C0 00C0 0004              		move.l	d0,(vdp_ctrl)
0088D590 4A14                        		tst.b 	(a4)
0088D592 6700                        		beq.s	@nohiprioU_2
0088D594 0082 8000 8000              		or.l	#$80008000,d2
0088D59A                            @nohiprioU_2:
0088D59A 23C2 00C0 0000              		move.l	d2,(vdp_data)
0088D5A0                             		
0088D5A0                            @nohiprioU_3:
0088D5A0 0684 0004 0000              		add.l	#$040000,d4
0088D5A6 0284 007E 0000               		and.l	#$7E0000,d4
0088D5AC                              		
0088D5AC DAFC 0001                   		add.w	#1,a5
0088D5B0 D8FC 0001                   		add.w 	#1,a4
0088D5B4 D6FC 0001                   		add.w	#1,a3
0088D5B8 51CB FF72                  		dbf	d3,@nextblkU
0088D5BC                            @dontupdU:
0088D5BC 4E75                       		rts
0088D5BE                            	
0088D5BE                            ; --------------------------------------------
0088D5BE                            ; Lvl_Animation
0088D5BE                            ; --------------------------------------------
0088D5BE                            
0088D5BE                            Lvl_Animation
0088D5BE 4BF9 FFFF BEFE             		lea	(RAM_LvlAnim),a5
0088D5C4                            ; 		lea	(Art_AnimCoin),a4
0088D5C4                            		
0088D5C4 0455 0001                  		sub.w	#1,(a5)
0088D5C8 6A00 0000                  		bpl	@pluswait
0088D5CC 3ABC 0005                  		move.w	#5,(a5)
0088D5D0                            		
0088D5D0 7200                       		moveq	#0,d1
0088D5D2 7400                       		moveq	#0,d2
0088D5D4 203C 0000 0000             		move.l	#Art_AnimCoin,d0
0088D5DA 322D 0002                  		move.w	2(a5),d1
0088D5DE 0641 0001                  		add.w	#1,d1
0088D5E2 0C41 0006                  		cmp.w	#6,d1
0088D5E6 6600                       		bne.s	@stay
0088D5E8 4241                       		clr.w	d1
0088D5EA                            @stay:
0088D5EA 3B41 0002                  		move.w	d1,2(a5)
0088D5EE E149                       		lsl.w	#8,d1
0088D5F0 D081                       		add.l	d1,d0
0088D5F2                            		
0088D5F2 23FC 9400 9380 00C0 0004   		move.l	#$94009380,(vdp_ctrl)	; Size: $40
0088D5FC                            
0088D5FC 0280 000F FFFF             		and.l	#$FFFFF,d0
0088D602                             		
0088D602 E288                        		lsr.l	#1,d0
0088D604 2200                       		move.l	d0,d1
0088D606 4841                       		swap	d1
0088D608 0241 00FF                  		and.w	#$FF,d1
0088D60C 0041 9700                  		or.w	#$9700,d1
0088D610 3400                       		move.w	d0,d2
0088D612 0240 00FF                  		and.w	#$FF,d0
0088D616 0040 9500                  		or.w	#$9500,d0
0088D61A E04A                       		lsr.w	#8,d2
0088D61C 0242 00FF                  		and.w	#$FF,d2
0088D620 0042 9600                  		or.w	#$9600,d2
0088D624 4842                       		swap	d2
0088D626 8082                       		or.l	d2,d0
0088D628 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
0088D62E 33C1 00C0 0004             		move.w	d1,(vdp_ctrl)
0088D634                            		
0088D634                            		;At: $380
0088D634 3F3C 0082                  		move.w	#$0002|$80,-(sp)
0088D638 3F3C 7400                  		move.w	#$7400,-(sp)
0088D63C 33DF 00C0 0004             		move.w	(sp)+,(vdp_ctrl)
0088D642 33FC 0100 00A1 1100         		move.w	#$100,($A11100)
0088D64A                            @WaitZ80:
0088D64A 0839 0000 00A1 1100         		btst	#0,($A11100)
0088D652 66F6                         		bne.s	@WaitZ80
0088D654 33DF 00C0 0004             		move.w	(sp)+,(vdp_ctrl)
0088D65A 33FC 0000 00A1 1100         		move.w	#0,($A11100).l
0088D662                            @pluswait:
0088D662 4E75                       		rts
0088D664                            		
0088D664                            ; --------------------------------------------
0088D664                            ; Lvl_Deform
0088D664                            ; --------------------------------------------
0088D664                            
0088D664                            Lvl_Deform:
0088D664 302E 0020                  		move.w	lvl_y(a6),d0
0088D668 33C0 FFFF E2C0             		move.w	d0,(RAM_ScrlVer)
0088D66E 3800                       		move.w	d0,d4
0088D670 E844                       		asr.w	#4,d4
0088D672 33C4 FFFF E2C2             		move.w	d4,(RAM_ScrlVer+2)
0088D678 7A00                       		moveq	#0,d5
0088D67A 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
0088D680 362E 001C                  		move.w	lvl_x(a6),d3
0088D684 4443                       		neg.w	d3
0088D686                            		
0088D686                            ; Sun
0088D686 7000                       		moveq	#0,d0
0088D688 343C 001B                  		move.w	#(28)-1,d2
0088D68C 9444                       		sub.w	d4,d2
0088D68E 6B00 0000                  		bmi	@rest_fg
0088D692                            @lyr1:
0088D692 30C3                       		move.w	d3,(a0)+
0088D694 30C0                       		move.w	d0,(a0)+
0088D696 0645 0001                  		add.w	#1,d5
0088D69A 0C45 00E0                  		cmp.w	#224,d5
0088D69E 6E00 0000                  		bgt	@exit_now
0088D6A2 51CA FFEE                  		dbf	d2,@lyr1
0088D6A6                            		
0088D6A6                            ; Clouds 1
0088D6A6 3003                       		move.w	d3,d0
0088D6A8 E840                       		asr.w	#4,d0
0088D6AA 343C 001B                  		move.w	#(28)-1,d2
0088D6AE 0C44 001C                  		cmp.w	#28,d4
0088D6B2 6D00                       		blt.s	@lyr2
0088D6B4 9444                       		sub.w	d4,d2
0088D6B6 6B00                       		bmi.s	@rest_fg
0088D6B8                            @lyr2:
0088D6B8 30C3                       		move.w	d3,(a0)+
0088D6BA 30C0                       		move.w	d0,(a0)+
0088D6BC 0645 0001                  		add.w	#1,d5
0088D6C0 0C45 00E0                  		cmp.w	#224,d5
0088D6C4 6E00                       		bgt.s	@exit_now
0088D6C6 51CA FFF0                  		dbf	d2,@lyr2
0088D6CA                            		
0088D6CA                            ; Clouds 2
0088D6CA 3003                       		move.w	d3,d0
0088D6CC EA40                       		asr.w	#5,d0
0088D6CE 343C 001F                  		move.w	#(32)-1,d2
0088D6D2                            ; 		cmp.w	#28,d4
0088D6D2                            ; 		blt.s	@lyr3
0088D6D2                            ; 		sub.w	d4,d2
0088D6D2                            ; 		bmi.s	@rest_fg
0088D6D2                            @lyr3:
0088D6D2 30C3                       		move.w	d3,(a0)+
0088D6D4 30C0                       		move.w	d0,(a0)+
0088D6D6 0645 0001                  		add.w	#1,d5
0088D6DA 0C45 00E0                  		cmp.w	#224,d5
0088D6DE 6E00                       		bgt.s	@exit_now
0088D6E0 51CA FFF0                  		dbf	d2,@lyr3
0088D6E4                            
0088D6E4                            ; Mountains 1
0088D6E4 3003                       		move.w	d3,d0
0088D6E6 E840                       		asr.w	#4,d0
0088D6E8 343C 0024                  		move.w	#(37)-1,d2
0088D6EC                            @lyr4:
0088D6EC 30C3                       		move.w	d3,(a0)+
0088D6EE 30C0                       		move.w	d0,(a0)+
0088D6F0 0645 0001                  		add.w	#1,d5
0088D6F4 0C45 00E0                  		cmp.w	#224,d5
0088D6F8 6E00                       		bgt.s	@exit_now
0088D6FA 51CA FFF0                  		dbf	d2,@lyr4
0088D6FE                            
0088D6FE                            ; Mountains 2
0088D6FE 3003                       		move.w	d3,d0
0088D700 E640                       		asr.w	#3,d0
0088D702 343C 0024                  		move.w	#(37)-1,d2
0088D706                            @lyr5:
0088D706 30C3                       		move.w	d3,(a0)+
0088D708 30C0                       		move.w	d0,(a0)+
0088D70A 0645 0001                  		add.w	#1,d5
0088D70E 0C45 00E0                  		cmp.w	#224,d5
0088D712 6E00                       		bgt.s	@exit_now
0088D714 51CA FFF0                  		dbf	d2,@lyr5
0088D718                            		
0088D718                            ; Mountains 2
0088D718 3003                       		move.w	d3,d0
0088D71A E440                       		asr.w	#2,d0
0088D71C 343C 002F                  		move.w	#(48)-1,d2
0088D720                            @lyr6:
0088D720 30C3                       		move.w	d3,(a0)+
0088D722 30C0                       		move.w	d0,(a0)+
0088D724 0645 0001                  		add.w	#1,d5
0088D728 0C45 00E0                  		cmp.w	#224,d5
0088D72C 6E00                       		bgt.s	@exit_now
0088D72E 51CA FFF0                  		dbf	d2,@lyr6
0088D732                            		
0088D732                            ; ----------------
0088D732                            ; Rest of BG
0088D732                            
0088D732                            @rest_fg:
0088D732 30C3                       		move.w	d3,(a0)+
0088D734 4258                       		clr.w	(a0)+
0088D736 0645 0001                  		add.w	#1,d5
0088D73A 0C45 00E0                  		cmp.w	#224,d5
0088D73E 6DF2                       		blt.s	@rest_fg
0088D740                            
0088D740                            @exit_now:
0088D740 06AE 0000 0001 002C        		add.l	#1,lvl_timer(a6)
0088D748 4E75                       		rts
0088D74A                            		
0088D74A                            ; 		lea	(RAM_ScrlHor),a0
0088D74A                            ; 		move.w	#224-1,d1
0088D74A                            ; @nxt_h:
0088D74A                            ; 		move.w	lvl_x(a6),d0
0088D74A                            ; 		neg.w	d0
0088D74A                            ; 		move.w	d0,(a0)+
0088D74A                            ; 		asr.w	#2,d0
0088D74A                            ; 		move.w	d0,(a0)+
0088D74A                            ; 		dbf	d1,@nxt_h
0088D74A                            ; 		
0088D74A                            ; 		move.w	lvl_y(a6),d0
0088D74A                            ; 		move.w	d0,(RAM_ScrlVer)
0088D74A                            ; 		asr.w	#2,d0
0088D74A                            ; 		move.w	d0,(RAM_ScrlVer+2)
0088D74A                            
0088D74A                            ; --------------------------------------------
0088D74A                            ; Level_Load
0088D74A                            ; 
0088D74A                            ; a0 | Data
0088D74A                            ; --------------------------------------------
0088D74A                            
0088D74A                            Level_Load:
0088D74A                            ; 		lea	(Level_Test),a0
0088D74A 43F9 00FF 0000             		lea	($FF0000),a1
0088D750 303C 1FFF                  		move.w	#(($8000)/4)-1,d0
0088D754                            @clrram:
0088D754 4299                       		clr.l	(a1)+
0088D756 51C8 FFFC                  		dbf	d0,@clrram
0088D75A                            		
0088D75A 43F9 FFFF BC00             		lea	(RAM_LvlPlanes),a1
0088D760 4279 FFFF BF1E             		clr.w	(RAM_PrizeHide)
0088D766 4279 FFFF BF60             		clr.w	(RAM_PrizeShow)
0088D76C 4269 001C                  		clr.w	lvl_x(a1)
0088D770 4269 0020                  		clr.w	lvl_y(a1)
0088D774 283C FFFF 0000             		move.l	#$FFFF0000,d4
0088D77A 3018                       		move.w	(a0)+,d0
0088D77C 3340 0030                  		move.w	d0,lvl_size_x(a1)
0088D780 3340 0034                  		move.w	d0,lvl_maxcam_x(a1)
0088D784 3018                       		move.w	(a0)+,d0
0088D786 3340 0032                  		move.w	d0,lvl_size_y(a1)
0088D78A 3340 0036                  		move.w	d0,lvl_maxcam_y(a1)
0088D78E 2358 0000                  		move.l	(a0)+,lvl_objects(a1)
0088D792                            @loop:
0088D792                            ; 		tst.w	(a0)
0088D792                            ; 		bmi.s	@exit
0088D792                            		
0088D792 2358 0004                  		move.l	(a0)+,lvl_blocks(a1)
0088D796 2018                       		move.l	(a0)+,d0
0088D798 4A80                       		tst.l	d0
0088D79A 6A00                       		bpl.s	@nullprz
0088D79C 237C 0000 0000 0008        		move.l	#vram_prizes,lvl_przblocks(a1)
0088D7A4                            @nullprz:
0088D7A4 2358 000C                  		move.l	(a0)+,lvl_layout(a1)
0088D7A8 2358 0010                  		move.l	(a0)+,lvl_hilayout(a1)
0088D7AC                            		
0088D7AC 2358 0014                  		move.l	(a0)+,lvl_collision(a1)
0088D7B0 2344 0018                  		move.l	d4,lvl_prizes(a1)
0088D7B4 2458                       		movea.l	(a0)+,a2
0088D7B6 2644                       		movea.l	d4,a3
0088D7B8                            @nextrle:
0088D7B8 7000                       		moveq	#0,d0
0088D7BA 7200                       		moveq	#0,d1
0088D7BC 101A                       		move.b	(a2)+,d0
0088D7BE 0C00 00FF                  		cmp.b	#-1,d0
0088D7C2 6700                       		beq.s	@Finish
0088D7C4 121A                       		move.b	(a2)+,d1
0088D7C6 4A40                       		tst.w	d0
0088D7C8 6700                       		beq.s	@oops
0088D7CA 0440 0001                  		sub.w	#1,d0
0088D7CE                            @CopyIt:
0088D7CE 16C1                       		move.b	d1,(a3)+
0088D7D0 0684 0000 0001             		add.l	#1,d4
0088D7D6 51C8 FFF6                  		dbf	d0,@CopyIt
0088D7DA                            @oops:
0088D7DA 60DC                       		bra.s	@nextrle
0088D7DC                            @Finish:
0088D7DC                            ; 		adda	#sizeof_lvlpln,a1
0088D7DC                            ; 		bra.s	@loop
0088D7DC                            ; @exit:
0088D7DC                            		
0088D7DC                            ; ----------------------------------		
0088D7DC                            ; Load object from the list
0088D7DC                            ; ----------------------------------
0088D7DC                            
0088D7DC 47F9 FFFF BC42             		lea	(RAM_LevelObjPos),a3
0088D7E2 323C 0045                  		move.w	#max_lvlobj-1,d1
0088D7E6                            @clrlist:
0088D7E6 429B                       		clr.l	(a3)+
0088D7E8 429B                       		clr.l	(a3)+
0088D7EA 425B                       		clr.w	(a3)+
0088D7EC 51C9 FFF8                  		dbf	d1,@clrlist
0088D7F0                            		
0088D7F0 2479 FFFF BC00             		movea.l	(RAM_LvlPlanes+lvl_objects),a2
0088D7F6 47F9 FFFF BC42             		lea	(RAM_LevelObjPos),a3
0088D7FC 323C 0045                  		move.w	#max_lvlobj-1,d1
0088D800                            @NextObj:
0088D800 4A92                       		tst.l	(a2)
0088D802 6700                       		beq.s	@Nothing
0088D804 201A                        		move.l	(a2)+,d0
0088D806 0280 00FF FFFF              		and.l 	#$FFFFFF,d0
0088D80C 26C0                        		move.l	d0,(a3)+
0088D80E 26DA                       		move.l	(a2)+,(a3)+
0088D810 36DA                       		move.w	(a2)+,(a3)+
0088D812 51C9 FFEC                  		dbf	d1,@NextObj
0088D816                            @Nothing:
0088D816 4E75                       		rts
0088D818                            		
0088D818                            ; --------------------------------------------
0088D818                            ; Draw the level on screen
0088D818                            ; 
0088D818                            ; Uses:
0088D818                            ; d0-d5/a2-a5
0088D818                            ; --------------------------------------------
0088D818                            
0088D818                            Level_Draw:
0088D818 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088D81E 203C 4000 0003             		move.l	#$40000003,d0		; VDP Address
0088D824 322D 001C                    		move.w	lvl_x(a5),d1		; X pos
0088D828 342D 0020                    		move.w	lvl_y(a5),d2		; Y pos
0088D82C E84A                          		lsr.w	#4,d2			; Ypos: xxx0 > 0xxx
0088D82E 0242 000F                     		and.w	#$F,d2			; 0xxx > 00xx
0088D832 E14A                          		lsl.w	#8,d2			; 00xx > xx00
0088D834 0242 3FFF                     		and.w	#$3FFF,d2
0088D838 E849                          		lsr.w	#4,d1			; Xpos: xxx0 > 0xxx
0088D83A E549                           		lsl.w	#2,d1			; 0xxx * 2
0088D83C 4840                           		swap	d0
0088D83E D042                          		add.w	d2,d0			; +Y VDP
0088D840 D001                         		add.b	d1,d0			; +X VDP
0088D842 0200 007F                         		and.b	#$7F,d0
0088D846 4840                             		swap	d0
0088D848                            		
0088D848 382D 0020                  		move.w	lvl_y(a5),d4
0088D84C E84C                       		lsr.w	#4,d4
0088D84E C8ED 0030                  		mulu.w	lvl_size_x(a5),d4
0088D852 3A2D 001C                  		move.w	lvl_x(a5),d5
0088D856 E84D                       		lsr.w	#4,d5
0088D858 DA44                       		add.w	d4,d5
0088D85A 0245 7FFF                  		and.w	#$7FFF,d5
0088D85E 4845                       		swap 	d5
0088D860                            		
0088D860 3A3C 0016                  		move.w	#$16,d5
0088D864                            @do_row:
0088D864 286D 000C                   		movea.l	lvl_layout(a5),a4
0088D868 266D 0010                   		movea.l	lvl_hilayout(a5),a3
0088D86C 246D 0018                   		movea.l	lvl_prizes(a5),a2
0088D870 4845                        		swap	d5
0088D872 D8C5                        		adda 	d5,a4
0088D874 D6C5                        		adda 	d5,a3
0088D876 D4C5                        		adda	d5,a2
0088D878 4845                        		swap 	d5
0088D87A                             		
0088D87A 2600                       		move.l	d0,d3
0088D87C 780F                        		moveq	#$F,d4
0088D87E                            ;  		move.b	(RAM_VidRegs+$C),d2
0088D87E                            ;   		and.w	#%110,d2
0088D87E                            ;   		beq.s	@block
0088D87E                            ;   		moveq	#$1F,d4
0088D87E                            ;  
0088D87E                            @block:
0088D87E 226D 0008                  		movea.l	lvl_przblocks(a5),a1
0088D882 7400                        		moveq	#0,d2	
0088D884 1412                        		move.b	(a2),d2
0088D886 4A02                        		tst.b	d2
0088D888 6700                        		beq.s	@noprzblk
0088D88A 0802 0007                   		btst	#7,d2
0088D88E 6700                        		beq.s	@hasPrzDrw
0088D890                            @noprzblk:
0088D890 1414                         		move.b	(a4),d2
0088D892 226D 0004                     		movea.l	lvl_blocks(a5),a1
0088D896 4A13                        		tst.b	(a3)
0088D898 6700                        		beq.s	@hasprzDrw
0088D89A 1413                        		move.b	(a3),d2
0088D89C                            @hasprzDrw:
0088D89C E74A                       		lsl.w	#3,d2
0088D89E 3231 2000                  		move.w	(a1,d2.w),d1
0088D8A2 4841                        		swap	d1
0088D8A4 3231 2004                   		move.w	4(a1,d2.w),d1
0088D8A8                             		
0088D8A8 4844                        		swap	d4
0088D8AA 1839 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d4
0088D8B0 0244 0006                   		and.w	#%110,d4
0088D8B4 6700                        		beq.s	@NoDouble
0088D8B6 E249                        		lsr.w	#1,d1
0088D8B8 4841                        		swap	d1
0088D8BA E249                        		lsr.w	#1,d1
0088D8BC 4841                        		swap	d1
0088D8BE                            @NoDouble:
0088D8BE 4844                       		swap	d4
0088D8C0 23C3 00C0 0004              		move.l	d3,(vdp_ctrl)
0088D8C6 4A13                        		tst.b	(a3)
0088D8C8 6700                        		beq.s	@nohiprio
0088D8CA 0081 8000 8000              		or.l 	#$80008000,d1
0088D8D0                            @nohiprio:
0088D8D0 23C1 00C0 0000              		move.l	d1,(vdp_data)
0088D8D6 0683 0080 0000              		add.l	#$00800000,d3
0088D8DC                              		
0088D8DC 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
0088D8E2 0241 0006                   		and.w	#%110,d1
0088D8E6 6600                        		bne.s	@NoDouble2
0088D8E8 3231 2002                  		move.w	2(a1,d2.w),d1
0088D8EC 4841                        		swap	d1
0088D8EE 3231 2006                   		move.w	6(a1,d2.w),d1
0088D8F2 23C3 00C0 0004             		move.l	d3,(vdp_ctrl)
0088D8F8 4A13                        		tst.b	(a3)
0088D8FA 6700                        		beq.s	@nohiprio2
0088D8FC 0081 8000 8000              		or.l 	#$80008000,d1
0088D902                            @nohiprio2:
0088D902 23C1 00C0 0000              		move.l	d1,(vdp_data)
0088D908 0683 0080 0000              		add.l	#$00800000,d3
0088D90E 0283 4F7C 0003              		and.l	#$4F7C0003,d3
0088D914                            @NoDouble2:		
0088D914 322D 0030                  		move.w	lvl_size_x(a5),d1
0088D918 D8C1                       		adda	d1,a4
0088D91A D6C1                       		adda	d1,a3
0088D91C D4C1                       		adda	d1,a2
0088D91E 51CC FF5E                  		dbf	d4,@block
0088D922                            	
0088D922 0680 0004 0000             		add.l	#$40000,d0
0088D928 0280 4F7C 0003             		and.l	#$4F7C0003,d0
0088D92E 4845                       		swap 	d5
0088D930 0645 0001                  		add.w	#1,d5
0088D934 4845                       		swap 	d5
0088D936 51CD FF2C                  		dbf	d5,@do_row
0088D93A                            
0088D93A                            ; ----------------------------------
0088D93A                            ; Check for objects ON the
0088D93A                            ; same screen as the player
0088D93A                            ; ----------------------------------
0088D93A                            
0088D93A 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
0088D940 49F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*16)),a4	;Start of level objects
0088D946 7601                       		moveq	#1,d3			; Starting at 1
0088D948                            @next_obj:
0088D948 4A95                       		tst.l	(a5)
0088D94A 6700 0000                  		beq	@finish
0088D94E 0815 0007                   		btst	#7,(a5)			;ON SCREEN flag?
0088D952 6600 0000                   		bne	@next
0088D956                            @found_obj:
0088D956 7800                         		moveq	#(max_objects-8)-1,d4
0088D958                            @nxtav_obj:
0088D958 4AAC 0000                  		tst.l	obj_code(a4)	
0088D95C 6700                       		beq.s	@valid
0088D95E D8FC 0000                  		adda	#sizeof_obj,a4
0088D962 51CC FFF4                  		dbf	d4,@nxtav_obj
0088D966                            		
0088D966                            @valid:
0088D966 396D 0004 0000             		move.w	4(a5),obj_x(a4)
0088D96C 396D 0006 0000             		move.w	6(a5),obj_y(a4)
0088D972 1943 0000                  		move.b	d3,obj_spwnindx(a4)
0088D976                            		
0088D976 7200                          		moveq	#0,d1
0088D978 122D 0008                      		move.b	8(a5),d1
0088D97C 422C 0000                      		clr.b	obj_status(a4)
0088D980 0801 0007                      		btst	#7,d1
0088D984 6700                           		beq.s	@dont_flip_l
0088D986 08EC 008C 0000               		bset	#bitobj_flipH,obj_status(a4)
0088D98C                            @dont_flip_l:
0088D98C 0801 0006                      		btst	#6,d1
0088D990 6700                           		beq.s	@dont_flip_d
0088D992 08EC 00CC 0000               		bset	#bitobj_flipV,obj_status(a4)
0088D998                            @dont_flip_d:
0088D998 122D 0008                   		move.b	8(a5),d1
0088D99C 0241 003F                   		and.w	#$3F,d1
0088D9A0 1941 0000                  		move.b	d1,obj_subid(a4)
0088D9A4 2015                        		move.l	(a5),d0
0088D9A6 0280 00FF FFFF               		and.l 	#$FFFFFF,d0
0088D9AC 2940 0000                   		move.l	d0,obj_code(a4)
0088D9B0 08D5 0007                   		bset	#7,(a5)			;SET ON SCREEN flag
0088D9B4 D8FC 0000                  		adda	#sizeof_obj,a4
0088D9B8                            @next:
0088D9B8 0643 0001                  		add.w	#1,d3
0088D9BC DAFC 000A                  		adda	#$A,a5
0088D9C0 6000 FF86                  		bra	@next_obj
0088D9C4                            @finish:
0088D9C4 4E75                            		rts
0088D9C6                            		
0088D9C6                            ; ----------------------------------		
0088D9C6                            
0088D9C6                            Level_HidePrize:
0088D9C6 49F9 FFFF BF20             		lea	(RAM_PrizeHide+2),a4
0088D9CC 3839 FFFF BF1E             		move.w	(RAM_PrizeHide),d4
0088D9D2 E54C                       		lsl.w	#2,d4
0088D9D4 D8C4                       		adda	d4,a4
0088D9D6                            ; @chknext:
0088D9D6                            ; 		tst.l	(a4)
0088D9D6                            ; 		beq.s	@free
0088D9D6                            ; 		adda	#4,a4
0088D9D6                            ; 		bra.s	@chknext
0088D9D6                            ; @free:
0088D9D6 2880                       		move.l	d0,(a4)
0088D9D8 0679 0001 FFFF BF1E        		add.w	#1,(RAM_PrizeHide)
0088D9E0                            @same:
0088D9E0 4E75                       		rts
0088D9E2                            		
0088D9E2                            ; ----------------------------------
0088D9E2                            
0088D9E2                            Level_ShowPrize:
0088D9E2 49F9 FFFF BF62             		lea	(RAM_PrizeShow+2),a4
0088D9E8 3839 FFFF BF60             		move.w	(RAM_PrizeShow),d4
0088D9EE E54C                       		lsl.w	#2,d4
0088D9F0 D8C4                       		adda	d4,a4
0088D9F2                            ; @chknext:
0088D9F2                            ; 		tst.l	(a4)
0088D9F2                            ; 		beq.s	@free
0088D9F2                            ; 		adda	#4,a4
0088D9F2                            ; 		bra.s	@chknext
0088D9F2                            ; @free:
0088D9F2 2880                       		move.l	d0,(a4)
0088D9F4 0679 0001 FFFF BF60        		add.w	#1,(RAM_PrizeShow)
0088D9FC                            @same:
0088D9FC 4E75                       		rts
0088D9FE                            
0088D9FE                            ; ----------------------------------
0088D9FE                            
0088D9FE                            ; Level_CheckPrize:
0088D9FE                            ;  		moveq	#0,d4
0088D9FE                            ;  		lea	(RAM_PrizeHide),a3
0088D9FE                            ;  		move.w	(a3)+,d5
0088D9FE                            ;  		tst.w	d5
0088D9FE                            ;  		beq.s	@free
0088D9FE                            ; 		sub.w	#1,d5
0088D9FE                            ; @chknext:
0088D9FE                            ;  		cmp.l	(a3)+,d0
0088D9FE                            ;  		beq.s	@found
0088D9FE                            ;  		dbf	d5,@chknext
0088D9FE                            ;  		bra.s	@free
0088D9FE                            ; 
0088D9FE                            ; @found:
0088D9FE                            ;  nop
0088D9FE                            ; ;  		bra.s * ;moveq	#-1,d4
0088D9FE                            ;  		
0088D9FE                            ; @free:
0088D9FE                            ;  		tst.l	d4
0088D9FE                            ; 		rts
0088D9FE                            		
0088D9FE                            ; ----------------------------------		
0088D9FE                            ; load level objects while moving
0088D9FE                            ; ----------------------------------
0088D9FE                            
0088D9FE                            Lvl_RefreshObj:
0088D9FE 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
0088DA04 49F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*16)),a4
0088DA0A 7601                       		moveq	#1,d3			; Starting at 1
0088DA0C                            @next_obj:
0088DA0C 4A95                       		tst.l	(a5)
0088DA0E 6700 0000                  		beq	@finish
0088DA12 0815 0006                  		btst	#6,(a5)			; GONE flag?
0088DA16 6600 0000                  		bne	@next
0088DA1A 0815 0007                   		btst	#7,(a5)			; ON SCREEN flag?
0088DA1E 6600 0000                   		bne	@next
0088DA22                            		
0088DA22 4843                       		swap	d3
0088DA24                            
0088DA24 302E 001C                     		move.w	lvl_x(a6),d0
0088DA28 322D 0004                         		move.w	4(a5),d1
0088DA2C 3400                           		move.w	d0,d2
0088DA2E 0642 0140                      		add.w	#320,d2
0088DA32                                		
0088DA32 0642 0038                     		add.w	#$38,d2
0088DA36 B242                            		cmp.w	d2,d1
0088DA38 6E00 0000                        		bgt	@tooright  		
0088DA3C 0442 0008                     		sub.w	#$8,d2
0088DA40 B242                            		cmp.w	d2,d1
0088DA42 6D00 0000                        		blt	@tooright
0088DA46 363C 0001                        		move.w	#1,d3
0088DA4A                            @tooright:
0088DA4A 0440 0038                     		sub.w	#$38,d0
0088DA4E B240                             		cmp.w	d0,d1
0088DA50 6D00 0000                         		blt	@tooleft
0088DA54 0640 0008                     		add.w	#$8,d0
0088DA58 B240                            		cmp.w	d0,d1
0088DA5A 6C00 0000                        		bge	@tooleft
0088DA5E 363C 0001                        		move.w	#1,d3
0088DA62                            @tooleft:
0088DA62                            
0088DA62                            		
0088DA62 302E 0020                      		move.w	lvl_y(a6),d0
0088DA66 322D 0006                         		move.w	6(a5),d1
0088DA6A 3400                            		move.w	d0,d2
0088DA6C 0642 00E0                      		add.w	#224,d2
0088DA70                            		
0088DA70 0642 0058                     		add.w	#$58,d2
0088DA74 B242                            		cmp.w	d2,d1
0088DA76 6C00 0000                        		bge	@toodown 		
0088DA7A 0442 0008                     		sub.w	#$8,d2
0088DA7E B242                            		cmp.w	d2,d1
0088DA80 6D00 0000                        		blt	@toodown
0088DA84 363C 0001                        		move.w	#1,d3
0088DA88                            @toodown:
0088DA88 0440 0058                     		sub.w	#$58,d0
0088DA8C B240                             		cmp.w	d0,d1
0088DA8E 6D00 0000                         		blt	@tooup
0088DA92 0640 0008                     		add.w	#$8,d0
0088DA96 B240                            		cmp.w	d0,d1
0088DA98 6C00 0000                        		bge	@tooup
0088DA9C 363C 0001                        		move.w	#1,d3
0088DAA0                            @tooup:
0088DAA0                            
0088DAA0                            
0088DAA0 3003                       		move.w	d3,d0
0088DAA2 4843                       		swap	d3
0088DAA4 4A40                       		tst.w	d0
0088DAA6 6700                       		beq.s	@next
0088DAA8                              		
0088DAA8                            @found_obj:
0088DAA8 7800                         		moveq	#(max_objects-16)-1,d4
0088DAAA                            @nxtav_obj:
0088DAAA 4AAC 0000                  		tst.l	obj_code(a4)
0088DAAE 6700                       		beq.s	@valid
0088DAB0 B62C 0000                  		cmp.b	obj_spwnindx(a4),d3
0088DAB4 6700                       		beq.s	@next
0088DAB6 D8FC 0000                  		adda	#sizeof_obj,a4
0088DABA 51CC FFEE                  		dbf	d4,@nxtav_obj
0088DABE 6000                       		bra.s	@next
0088DAC0                            		
0088DAC0                            @valid:
0088DAC0 264C                       		movea.l	a4,a3
0088DAC2 323C 0000                  		move.w	#sizeof_obj,d1
0088DAC6                            @cleanup:
0088DAC6 421B                       		clr.b	(a3)+
0088DAC8 51C9 FFFC                  		dbf	d1,@cleanup
0088DACC                            		
0088DACC 396D 0004 0000             		move.w	4(a5),obj_x(a4)
0088DAD2 396D 0006 0000             		move.w	6(a5),obj_y(a4)
0088DAD8 1943 0000                  		move.b	d3,obj_spwnindx(a4)
0088DADC                            		
0088DADC 7200                          		moveq	#0,d1
0088DADE 122D 0008                      		move.b	8(a5),d1
0088DAE2 422C 0000                      		clr.b	obj_status(a4)
0088DAE6 0801 0007                      		btst	#7,d1
0088DAEA 6700                           		beq.s	@dont_flip_l
0088DAEC 08EC 008C 0000               		bset	#bitobj_flipH,obj_status(a4)
0088DAF2                            
0088DAF2                            @dont_flip_l:
0088DAF2 0801 0006                      		btst	#6,d1
0088DAF6 6700                           		beq.s	@dont_flip_d
0088DAF8 08EC 00CC 0000               		bset	#bitobj_flipV,obj_status(a4)
0088DAFE                            @dont_flip_d:
0088DAFE 122D 0008                   		move.b	8(a5),d1
0088DB02 0241 003F                   		and.w	#$3F,d1
0088DB06 1941 0000                  		move.b	d1,obj_subid(a4)
0088DB0A 2015                        		move.l	(a5),d0
0088DB0C 0280 00FF FFFF               		and.l 	#$FFFFFF,d0
0088DB12 2940 0000                   		move.l	d0,obj_code(a4)
0088DB16 08D5 0007                   		bset	#7,(a5)			;SET ON SCREEN flag
0088DB1A D8FC 0000                  		adda	#sizeof_obj,a4
0088DB1E                            @next:
0088DB1E 0643 0001                  		add.w	#1,d3
0088DB22 DAFC 000A                  		adda	#$A,a5
0088DB26 6000 FEE4                  		bra	@next_obj
0088DB2A                            @finish:
0088DB2A 4E75                       		rts
0088DB2C                             	
0088DB2C                            ; ----------------------------------
0088DB2C                            ; d0 - ID
0088DB2C                            ; ----------------------------------
0088DB2C                            
0088DB2C                            Lvl_DoHidePrz:
0088DB2C                            		;TODO: Up/Left checks
0088DB2C 2800                       		move.l	d0,d4
0088DB2E E88C                       		lsr.l	#4,d4
0088DB30 0244 FFF0                  		and.w	#$FFF0,d4
0088DB34 3A2E 0020                   		move.w	lvl_y(a6),d5
0088DB38 B845                        		cmp.w	d5,d4
0088DB3A 6D00                        		blt.s	LvlPrzReadRet
0088DB3C 2800                       		move.l	d0,d4
0088DB3E 4844                       		swap	d4
0088DB40 0244 FFF0                  		and.w	#$FFF0,d4
0088DB44 3A2E 001C                   		move.w	lvl_x(a6),d5
0088DB48 B845                        		cmp.w	d5,d4
0088DB4A 6D00                        		blt.s	LvlPrzReadRet
0088DB4C                             		
0088DB4C 2800                        		move.l	d0,d4			;Postion | XXX?????
0088DB4E 4844                        		swap	d4			;????XXX?
0088DB50 E44C                        		lsr.w	#2,d4			;????0XXX
0088DB52 0284 0000 007C              		and.l	#$7C,d4
0088DB58 2A00                        		move.l	d0,d5			;???YYY??
0088DB5A 0245 0F00                    		and.w	#$F00,d5
0088DB5E D845                          		add.w	d5,d4
0088DB60 2A3C 4000 0003              		move.l	#$40000003,d5
0088DB66 4845                        		swap	d5
0088DB68 8A44                        		or.w	d4,d5
0088DB6A 4845                        		swap	d5
0088DB6C                             		
0088DB6C 286E 000C                    		movea.l	lvl_layout(a6),a4	;Layout data
0088DB70 2800                        		move.l	d0,d4
0088DB72 0284 000F FF00              		and.l	#$000FFF00,d4
0088DB78 E08C                        		lsr.l	#8,d4
0088DB7A 0284 0000 0FFF              		and.l	#$FFF,d4
0088DB80 C8EE 0030                   		mulu.w	lvl_size_x(a6),d4
0088DB84 D8C4                        		adda	d4,a4	
0088DB86 2800                         		move.l	d0,d4
0088DB88 0284 FFF0 0000              		and.l	#$FFF00000,d4
0088DB8E 4844                         		swap	d4
0088DB90 E84C                         		lsr.w	#4,d4
0088DB92 D8C4                          		add.w 	d4,a4
0088DB94 7800                           		moveq	#0,d4
0088DB96 1814                          		move.b	(a4),d4
0088DB98 286E 0004                  		movea.l	lvl_blocks(a6),a4	;Draw blocks
0088DB9C 6000                       		bra.s	LvlPrzReadBlk
0088DB9E                            LvlPrzReadRet:
0088DB9E 4E75                       		rts
0088DBA0                            		
0088DBA0                            ; ----------------------------------
0088DBA0                            ; d0 - ID
0088DBA0                            ; ----------------------------------
0088DBA0                            
0088DBA0                            Lvl_DoShowPrz:
0088DBA0                            		;TODO: Up/Left checks
0088DBA0 2800                       		move.l	d0,d4
0088DBA2 E88C                       		lsr.l	#4,d4
0088DBA4 0244 FFF0                  		and.w	#$FFF0,d4
0088DBA8 3A2E 0020                   		move.w	lvl_y(a6),d5
0088DBAC B845                        		cmp.w	d5,d4
0088DBAE 6DEE                        		blt.s	LvlPrzReadRet
0088DBB0 2800                       		move.l	d0,d4
0088DBB2 4844                       		swap	d4
0088DBB4 0244 FFF0                  		and.w	#$FFF0,d4
0088DBB8 3A2E 001C                   		move.w	lvl_x(a6),d5
0088DBBC B845                        		cmp.w	d5,d4
0088DBBE 6DDE                        		blt.s	LvlPrzReadRet
0088DBC0                             		
0088DBC0 2800                        		move.l	d0,d4			;Postion | XXX?????
0088DBC2 4844                        		swap	d4			;????XXX?
0088DBC4 E44C                        		lsr.w	#2,d4			;????0XXX
0088DBC6 0284 0000 007C              		and.l	#$7C,d4
0088DBCC 2A00                        		move.l	d0,d5			;???YYY??
0088DBCE 0285 0000 0F00               		and.l	#$F00,d5
0088DBD4 8845                          		or.w	d5,d4
0088DBD6 2A3C 4000 0003              		move.l	#$40000003,d5
0088DBDC 4845                        		swap	d5
0088DBDE 8A44                        		or.w	d4,d5
0088DBE0 4845                        		swap	d5 		
0088DBE2 286E 0018                    		movea.l	lvl_prizes(a6),a4	;Layout data
0088DBE6 2800                        		move.l	d0,d4
0088DBE8 0284 000F FF00              		and.l	#$000FFF00,d4
0088DBEE E08C                        		lsr.l	#8,d4
0088DBF0 0284 0000 0FFF              		and.l	#$FFF,d4
0088DBF6 C8EE 0030                   		mulu.w	lvl_size_x(a6),d4
0088DBFA                            ;  		lsl.w	#1,d4
0088DBFA D8C4                        		adda	d4,a4	
0088DBFC 2800                         		move.l	d0,d4
0088DBFE 0284 FFF0 0000              		and.l	#$FFF00000,d4
0088DC04 4844                         		swap	d4
0088DC06 E84C                         		lsr.w	#4,d4
0088DC08                            ;    		lsl.w	#1,d4
0088DC08 D8C4                          		add.w	d4,a4
0088DC0A 7800                           		moveq	#0,d4
0088DC0C 1814                          		move.b	(a4),d4
0088DC0E 286E 0008                  		movea.l	lvl_przblocks(a6),a4	;Draw blocks
0088DC12                            		
0088DC12                            LvlPrzReadBlk:
0088DC12 E78C                         		lsl.l	#3,d4
0088DC14 0284 0000 FFFF               		and.l	#$FFFF,d4
0088DC1A D8C4                          		adda 	d4,a4
0088DC1C                               		
0088DC1C 23C5 00C0 0004              		move.l	d5,(vdp_ctrl).l
0088DC22 3814                        		move.w	(a4),d4
0088DC24 4844                        		swap	d4
0088DC26 382C 0004                   		move.w	4(a4),d4
0088DC2A 23C4 00C0 0000              		move.l	d4,(vdp_data).l
0088DC30 0685 0080 0000              		add.l	#$800000,d5
0088DC36 23C5 00C0 0004              		move.l	d5,(vdp_ctrl).l
0088DC3C 382C 0002                   		move.w	2(a4),d4
0088DC40 4844                        		swap	d4
0088DC42 382C 0006                   		move.w	6(a4),d4
0088DC46 23C4 00C0 0000              		move.l	d4,(vdp_data).l
0088DC4C                            @ignore:
0088DC4C 4E75                        		rts	
0088DC4E                            		
0088DC4E                            ; ----------------------------------		
0088DC4E                            ; Load art data
0088DC4E                            ; 
0088DC4E                            ; a1 - the list
0088DC4E                            ; ----------------------------------
0088DC4E                            
0088DC4E                            Level_LoadArtList:
0088DC4E 4A51                       		tst.w	(a1)
0088DC50 6B00                       		bmi.s	@Finish
0088DC52 2059                       		move.l	(a1)+,a0		;Addr
0088DC54 3019                        		move.w	(a1)+,d0		;VRAM
0088DC56 3219                        		move.w	(a1)+,d1		;Size
0088DC58 6100 AFD2                   		bsr	VDP_SendData_L
0088DC5C 60F0                        		bra.s	Level_LoadArtList
0088DC5E                             		
0088DC5E                            @Finish:
0088DC5E 4E75                       		rts
0088DC60                            		
0088DC60                            ; =================================================================
0088DC60                            ; --------------------------------------------
0088DC60                            ; Data
0088DC60                            ; --------------------------------------------
0088DC60                            
0088DC60                            vram_prizes:
0088DC60 0000 0001 0000 0001        		dc.l $0001,$0001		; $00 FILLER
0088DC68 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $01 Breakable: normal
0088DC70 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $02  **  **  : 1 coin
0088DC78 0580 0581 0582 0583         		dc.w $580,$581,$582,$583	; $03  **  **  : 10 coins
0088DC80 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $04  **  **  : ???
0088DC88 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $05  **  **  : ???
0088DC90 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $06  **  **  : ???
0088DC98 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $07  **  **  : 1 up
0088DCA0 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $08 Block ! : 1 coin
0088DCA8 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $09  ****   : 10 coins
0088DCB0 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0A  ****   : ???
0088DCB8 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0B  ****   : ???
0088DCC0 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0C  ****   : ???
0088DCC8 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0D  ****   : ???
0088DCD0 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0E  ****   : 1 up
0088DCD8 059C 059D 059E 059F        		dc.w $59C,$59D,$59E,$59F	; $0F Empty block
0088DCE0                            		
0088DCE0 4580 4581 4582 4583        		dc.w $4580,$4581,$4582,$4583	;$10+
0088DCE8 4580 4581 4582 4583        		dc.w $4580,$4581,$4582,$4583
0088DCF0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DCF8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD00 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD08 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD10 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD18 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD20 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
0088DD28 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD30 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD38 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD40 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD48 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD50 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD58 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD60                            
0088DD60 4594 4595 4596 4597        		dc.w $4594,$4595,$4596,$4597	;$20+ Bouncing block
0088DD68 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD70 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD78 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD80 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD88 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD90 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DD98 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDA0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
0088DDA8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDB0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDB8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDC0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDC8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDD0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDD8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDE0                            		
0088DDE0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	;$30+
0088DDE8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDF0 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DDF8 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DE00 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DE08 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DE10 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DE18 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DE20 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
0088DE28 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DE30 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DE38 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DE40 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DE48 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DE50 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DE58 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0088DE60                            		
0088DE60 45A0 45A1 45A2 45A3        		dc.w $45A0,$45A1,$45A2,$45A3	;$40 - Coins
0088DE68 45A4 45A5 45A6 45A7        		dc.w $45A4,$45A5,$45A6,$45A7
0088DE70                            		even
0088DE70                            
0088DE70                            ; --------------------------------------------
0088DE70                            
0088DE70                            col_SlopeData:
0088DE70 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0088DE80 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;$01
0088DE90 0F0E 0D0C 0B0A 0908 0706+  		dc.b $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00	;$02
0088DEA0 0001 0203 0405 0607 0809+  		dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F	;$03
0088DEB0                            		
0088DEB0 0F0F 0E0E 0D0D 0C0C 0B0B+  		dc.b $0F,$0F,$0E,$0E,$0D,$0D,$0C,$0C,$0B,$0B,$0A,$0A,$09,$09,$08,$08
0088DEC0 0707 0606 0505 0404 0303+  		dc.b $07,$07,$06,$06,$05,$05,$04,$04,$03,$03,$02,$02,$01,$01,$00,$00
0088DED0                            		
0088DED0 0000 0101 0202 0303 0404+  		dc.b $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
0088DEE0 0808 0909 0A0A 0B0B 0C0C+  		dc.b $08,$08,$09,$09,$0A,$0A,$0B,$0B,$0C,$0C,$0D,$0D,$0E,$0E,$0F,$0F
0088DEF0                            		
0088DEF0 0F0F 0F0F 0E0E 0E0E 0D0D+  		dc.b $0F,$0F,$0F,$0F,$0E,$0E,$0E,$0E,$0D,$0D,$0D,$0D,$0C,$0C,$0C,$0C
0088DF00 0B0B 0B0B 0A0A 0A0A 0909+  		dc.b $0B,$0B,$0B,$0B,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$08,$08,$08,$08
0088DF10 0707 0707 0606 0606 0505+  		dc.b $07,$07,$07,$07,$06,$06,$06,$06,$05,$05,$05,$05,$04,$04,$04,$04
0088DF20 0303 0303 0202 0202 0101+  		dc.b $03,$03,$03,$03,$02,$02,$02,$02,$01,$01,$01,$01,$00,$00,$00,$00
0088DF30                            		
0088DF30 0000 0000 0101 0101 0202+  		dc.b $00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03
0088DF40 0404 0404 0505 0505 0606+  		dc.b $04,$04,$04,$04,$05,$05,$05,$05,$06,$06,$06,$06,$07,$07,$07,$07
0088DF50 0808 0808 0909 0909 0A0A+  		dc.b $08,$08,$08,$08,$09,$09,$09,$09,$0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B
0088DF60 0C0C 0C0C 0D0D 0D0D 0E0E+  		dc.b $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D,$0E,$0E,$0E,$0E,$0F,$0F,$0F,$0F
0088DF70                            		even
0088DF70                            		
0088DF70                            		
0088DF70                            		include	"engine/modes/level/subs/objects.asm"
0088DF70                            ; ====================================================================
0088DF70                            ; -------------------------------------------------
0088DF70                            ; Objects system
0088DF70                            ; -------------------------------------------------
0088DF70                            
0088DF70                            ; NOTES:
0088DF70                            ; Current object Slots:
0088DF70                            ;   00   | Player 1 (HARD-CODED)
0088DF70                            ;   01   | PLANNED (Second player if needed)
0088DF70                            ;   02   | HUD (TODO)
0088DF70                            ;   03   | Eng flag
0088DF70                            ;   04   | FREE
0088DF70                            ;   05   | FREE
0088DF70                            ;   06   | FREE
0088DF70                            ;   07   | FREE
0088DF70                            ; 08-15  | Blocks+Action objects (Auto-arrangled)
0088DF70                            ; 16-MAX | Level objects (Auto-arrangled)
0088DF70                            
0088DF70                            ; --------------------------------------------
0088DF70                            ; Variables
0088DF70                            ; --------------------------------------------
0088DF70                            
0088DF70 =00000040                  max_objects	equ	64
0088DF70 =00000040                  max_microspr	equ	64
0088DF70                            
0088DF70                            ; --------------------------------------------
0088DF70                            
0088DF70                            		rsreset
0088DF70 =00000000                  obj_code	rs.l	1		; Object code 
0088DF70 =00000004                  obj_size	rs.l	1		; Object size (see below)
0088DF70                            
0088DF70 =00000008                  obj_x		rs.l	1		; Object X Position
0088DF70 =0000000C                  obj_y		rs.l	1		; Object Y Position
0088DF70 =00000010                  obj_x_spd	rs.l	1		; Object X Speed
0088DF70 =00000014                  obj_y_spd	rs.l	1		; Object Y Gravity
0088DF70                            ; obj_maps	rs.l	1
0088DF70                            
0088DF70 =00000018                  obj_anim_next	rs.w	1		; Object animation increment (obj_anim + obj_anim_next)
0088DF70 =0000001A                  obj_anim_id	rs.w	1		; Object animation to read (current|saved)
0088DF70                            ; obj_vram	rs.w	1		; Object VRAM
0088DF70 =0000001C                  obj_anim_spd	rs.b	1		; Object animation delay
0088DF70 =0000001D                  obj_index	rs.b	1		; Object code index
0088DF70 =0000001E                  obj_status	rs.b	1		; Object status
0088DF70 =0000001F                  obj_subid	rs.b	1		; Object SubID
0088DF70 =00000020                  obj_frame	rs.b	1		; Object display frame
0088DF70                            ; obj_frame_old	rs.b	1		; Object last frame (DMA)
0088DF70 =00000021                  obj_spwnindx	rs.b	1		; Object respawn index (this - 1)
0088DF70 =00000022                  obj_col		rs.b	1		; Object collision
0088DF70 =00000023                  obj_null	rs.b	1		; FILLER
0088DF70                            
0088DF70 =00000024                  obj_ram		rs.b	$40		; Object RAM
0088DF70 =00000064                  sizeof_obj	rs.l	0
0088DF70                            
0088DF70                            ; --------------------------------
0088DF70                            ; obj_size
0088DF70                            ; --------------------------------
0088DF70                            
0088DF70                            		rsreset
0088DF70 =00000000                  objsize_l	rs.b	1
0088DF70 =00000001                  objsize_r	rs.b	1
0088DF70 =00000002                  objsize_u	rs.b	1
0088DF70 =00000003                  objsize_d	rs.b	1
0088DF70                            
0088DF70                            ; --------------------------------
0088DF70                            ; obj_status
0088DF70                            ; --------------------------------
0088DF70                            
0088DF70 =00000000                  bitobj_flipH	equ	0		; set to flip Sprite Horizontally
0088DF70 =00000001                  bitobj_flipV	equ	1		; set to flip Sprite Vertically
0088DF70 =00000002                  bitobj_air	equ	2		; set if floating/jumping
0088DF70 =00000003                  bitobj_hurt	equ	3		; set if we are hurt (Touched by enemy or player)
0088DF70                            
0088DF70 =00000006                  bitobj_hit	equ	6		; set to we can hit objects
0088DF70 =00000007                  bitobj_stay	equ	7		; set to stay on-screen
0088DF70                            
0088DF70                            ; --------------------------------
0088DF70                            ; obj_col
0088DF70                            ; --------------------------------
0088DF70                            
0088DF70 =00000000                  bitcol_floor	equ	0		; Set for Touching floor
0088DF70 =00000001                  bitcol_ceiling	equ	1		; 
0088DF70 =00000002                  bitcol_wall_r	equ	2		; set for Touching floor/wall/Ceiling
0088DF70 =00000003                  bitcol_wall_l	equ	3		;
0088DF70 =00000004                  bitcol_obj	equ	4
0088DF70 =00000005                  bitcol_obju	equ	5
0088DF70 =00000006                  bitcol_objl	equ	6
0088DF70 =00000007                  bitcol_objr	equ	7
0088DF70                            
0088DF70                            ; =================================================================
0088DF70                            ; ------------------------------------------------
0088DF70                            ; RAM
0088DF70                            ; ------------------------------------------------
0088DF70                            
0088DF70                            		rsset RAM_ObjectSys
0088DF70 =FFFFC040                  RAM_ObjBuffer	rs.b (sizeof_obj*max_objects)
0088DF70 =FFFFD940                  RAM_ObjBackup	rs.l 2
0088DF70 =FFFFD948                  RAM_MicrSprBuff	rs.l max_microspr*2
0088DF70 =FFFFDB48                  RAM_ObjMaxCoins	rs.l 16
0088DF70 =FFFFDB88                  RAM_MicrSprCntr	rs.w 1
0088DF70 =FFFFDB8A                  RAM_ObjCount	rs.w 1
0088DF70 =FFFFDB8C                  sizeof_objbuff	rs.l 0
0088DF70                            ; 		inform 0,"Objects system uses: %h",sizeof_objbuff-RAM_ObjectSys
0088DF70                            		
0088DF70                            ; ====================================================================		
0088DF70                            ; --------------------------------------------
0088DF70                            ; Init
0088DF70                            ; --------------------------------------------
0088DF70                            
0088DF70                            Objects_Init:
0088DF70 41F9 FFFF C040              		lea	(RAM_ObjBuffer),a0
0088DF76 303C 18FF                  		move.w	#(sizeof_obj*max_objects)-1,d0
0088DF7A                            @ClrObjs:
0088DF7A 4218                        		clr.b	(a0)+
0088DF7C 51C8 FFFC                   		dbf	d0,@ClrObjs
0088DF80 4279 FFFF DB88              		clr.w	(RAM_MicrSprCntr)
0088DF86 4E75                       		rts
0088DF88                             
0088DF88                            ; ====================================================================	
0088DF88                            ; --------------------------------------------
0088DF88                            ; Loop
0088DF88                            ; --------------------------------------------
0088DF88                            
0088DF88                            Objects_Run:
0088DF88 6100 B1BC                    		bsr	Sprites_Reset
0088DF8C                            
0088DF8C                            ; -----------------------------
0088DF8C                            ; Run objects
0088DF8C                            ; -----------------------------
0088DF8C                            
0088DF8C 4279 FFFF DB8A             		clr.w	(RAM_ObjCount)
0088DF92 4DF9 FFFF C040              		lea	(RAM_ObjBuffer),a6
0088DF98 3E3C 003F                   		move.w	#max_objects-1,d7
0088DF9C                            @Next:
0088DF9C 4A96                        		tst.l	(a6)
0088DF9E 6700                        		beq.s	@NoAddr
0088DFA0                             		
0088DFA0 48F9 4080 FFFF D940         		movem.l	a6/d7,(RAM_ObjBackup)
0088DFA8 2A6E 0000                    		movea.l	obj_code(a6),a5
0088DFAC 4E95                         		jsr	(a5)
0088DFAE 4CF9 4080 FFFF D940         		movem.l	(RAM_ObjBackup),a6/d7
0088DFB6 0679 0001 FFFF DB8A          		add.w	#1,(RAM_ObjCount)
0088DFBE                            @NoAddr:
0088DFBE DCFC 0064                   		adda	#sizeof_obj,a6
0088DFC2 51CF FFD8                   		dbf	d7,@Next
0088DFC6                             		
0088DFC6                            ; -----------------------------
0088DFC6                            ; Show the sprites
0088DFC6                            ; -----------------------------
0088DFC6                            
0088DFC6                            ; Object_DrawObjects:
0088DFC6 45F9 FFFF D948              		lea	(RAM_MicrSprBuff),a2
0088DFCC                            @NextFrm:
0088DFCC 4A92                        		tst.l	(a2)
0088DFCE 6700                        		beq.s	@NoAddrFrm
0088DFD0 6100 0000                   		bsr	Object_MicroToSpr
0088DFD4 429A                        		clr.l	(a2)+
0088DFD6 429A                        		clr.l	(a2)+
0088DFD8 60F2                         		bra.s	@NextFrm
0088DFDA                            @NoAddrFrm:
0088DFDA 4279 FFFF DB88               		clr.w	(RAM_MicrSprCntr)
0088DFE0 4E75                       		rts
0088DFE2                            ; 		inform 0,"%h",RAM_MicrSprBuff
0088DFE2                            		
0088DFE2                            ; ====================================================================
0088DFE2                            ; ----------------------------------------------
0088DFE2                            ; Subs
0088DFE2                            ; ----------------------------------------------
0088DFE2                            
0088DFE2                            ; **********************************************
0088DFE2                            ; Object display
0088DFE2                            ; **********************************************
0088DFE2                            
0088DFE2                            ; ----------------------------------------------
0088DFE2                            ; Object_DynArt
0088DFE2                            ; 
0088DFE2                            ; Input:
0088DFE2                            ; d0 | LONG - VRAM|Frame
0088DFE2                            ; d1 | LONG - DPLC data
0088DFE2                            ; d2 | LONG - Art data
0088DFE2                            ;
0088DFE2                            ; Uses:
0088DFE2                            ; a3/d3-d7
0088DFE2                            ; ----------------------------------------------
0088DFE2                             
0088DFE2                            Object_DPLC:
0088DFE2                            ; 		cmp.b	obj_frame_old(a6),d0
0088DFE2                            ; 		beq.s	@EndAll
0088DFE2 0240 00FF                  		and.w	#$FF,d0
0088DFE6                            ; 		move.b	d0,obj_frame_old(a6)
0088DFE6 2641                       		movea.l	d1,a3
0088DFE8 E348                       		lsl.w	#1,d0
0088DFEA D6F3 0000                      		adda	(a3,d0.w),a3
0088DFEE 7C00                          		moveq	#0,d6
0088DFF0 3C1B                          		move.w	(a3)+,d6
0088DFF2 6700 0000                     		beq	@EndAll
0088DFF6 0446 0001                     		sub.w	#1,d6
0088DFFA 4840                          		swap	d0
0088DFFC 0240 07FF                     		and.w	#$7FF,d0
0088E000 7A00                          		moveq	#0,d5
0088E002 3A00                          		move.w	d0,d5		;d5 - VRAM (base)
0088E004 2E02                          		move.l	d2,d7
0088E006                            @Next:
0088E006 3213                            		move.w	(a3),d1
0088E008 E049                            		lsr.w	#8,d1
0088E00A 3801                            		move.w	d1,d4
0088E00C E84C                            		lsr.w	#4,d4		;d4 - Next VRAM
0088E00E 0244 000F                       		and.w	#$F,d4
0088E012 0644 0001                       		add.w	#1,d4
0088E016 0641 0010                       		add.w	#$10,d1		;Size + 1
0088E01A 4841                            		swap	d1		;Size|ROM+Here
0088E01C 321B                             		move.w	(a3)+,d1
0088E01E 0241 0FFF                        		and.w	#$FFF,d1
0088E022 EB49                            		lsl.w	#5,d1
0088E024 2007                            		move.l	d7,d0
0088E026 7600                             		moveq	#0,d3
0088E028 3601                             		move.w	d1,d3
0088E02A D083                             		add.l	d3,d0		;ROM Addr + Cell number
0088E02C                                 		
0088E02C 4841                       		swap	d1		;(Broken)|Size
0088E02E 3405                       		move.w	d5,d2
0088E030 6100 B0E0                      		bsr	DMA_Set		;** TODO **
0088E034 DA44                       		add.w	d4,d5		;Next VRAM
0088E036 51CE FFCE                     		dbf	d6,@Next
0088E03A                             
0088E03A                            @EndAll:
0088E03A 4E75                        		rts
0088E03C                             
0088E03C                            ; ----------------------------------------------
0088E03C                            ; Object_Show
0088E03C                            ; 
0088E03C                            ; Input:
0088E03C                            ; a6 - Current object
0088E03C                            ; d0 - VRAM | Frame
0088E03C                            ; 
0088E03C                            ; Uses:
0088E03C                            ; a3/d0-d1
0088E03C                            ; 
0088E03C                            ; WARNING: WITH THIS METHOD, OBJECTS MUST BE
0088E03C                            ; AFTER $FF8000 SO IT CAN CORRECTLY
0088E03C                            ; CHECK BETWEEN OBJECTS AND
0088E03C                            ; SEPARATE SPRITES
0088E03C                            ; ----------------------------------------------
0088E03C                            
0088E03C                            Object_Show:	
0088E03C 47F9 FFFF D948             		lea	(RAM_MicrSprBuff),a3
0088E042 3439 FFFF DB88             		move.w	(RAM_MicrSprCntr),d2
0088E048 E74A                       		lsl.w	#3,d2
0088E04A D6C2                       		adda	d2,a3
0088E04C                            ; @next:		
0088E04C                            ; 		tst.l	(a3)
0088E04C                            ; 		beq.s	@free
0088E04C                            ; 		adda	#8,a3
0088E04C                            ; 		bra.s	@next
0088E04C                            @free:
0088E04C B6FC DB48                   		cmpa.w	#(RAM_MicrSprBuff+($200))&$FFFF,a3	; TODO: mejor check
0088E050 6C00                        		bge.s	@full
0088E052                             		
0088E052 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E058 342E 0008                   		move.w	obj_x(a6),d2
0088E05C 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0088E062 6600                        		bne.s	@onscrn_X
0088E064 946D 001C                   		sub.w	lvl_x(a5),d2
0088E068                            @onscrn_X:
0088E068 0642 0080                   		add.w	#$80,d2
0088E06C 0C42 0040                    		cmp.w	#$40,d2
0088E070 6D00 0000                    		blt	@full
0088E074 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
0088E078 6E00 0000                   		bgt	@full
0088E07C                            
0088E07C 4842                        		swap	d2
0088E07E 342E 000C                   		move.w	obj_y(a6),d2
0088E082 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0088E088 6600                        		bne.s	@onscrn_Y
0088E08A 946D 0020                  		sub.w	lvl_y(a5),d2
0088E08E                            @onscrn_Y:
0088E08E 0642 0080                   		add.w	#$80,d2
0088E092 0C42 0040                   		cmp.w	#$40,d2
0088E096 6D00 0000                   		blt	@full
0088E09A 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
0088E09E 6E00 0000                  		bgt	@full
0088E0A2                                		
0088E0A2 36CE                       		move.w	a6,(a3)+	; (Object_RAM & $FFFF)
0088E0A4 0240 00FF                  		and.w	#$FF,d0
0088E0A8 E148                       		lsl.w	#8,d0
0088E0AA 4840                       		swap	d0
0088E0AC 36C0                       		move.w	d0,(a3)+	; VRAM
0088E0AE 4240                       		clr.w	d0
0088E0B0 8280                        		or.l	d0,d1	
0088E0B2 26C1                       		move.l	d1,(a3)+	; Frame | Maps data
0088E0B4                            		
0088E0B4 0679 0001 FFFF DB88        		add.w	#1,(RAM_MicrSprCntr)
0088E0BC                            @full:		
0088E0BC 4E75                        		rts
0088E0BE                            
0088E0BE                            ; ----------------------------------------------
0088E0BE                            ; Object_ExtSprite
0088E0BE                            ; 
0088E0BE                            ; Input:
0088E0BE                            ; d0 -    X | Y
0088E0BE                            ; d1 - Size | VRAM
0088E0BE                            ; 
0088E0BE                            ; Uses:
0088E0BE                            ; d4-d5, a3/d5
0088E0BE                            ; ----------------------------------------------
0088E0BE                            
0088E0BE                            Object_ExtSprite:
0088E0BE 47F9 FFFF D948             		lea	(RAM_MicrSprBuff),a3
0088E0C4 3839 FFFF DB88             		move.w	(RAM_MicrSprCntr),d4
0088E0CA E74C                       		lsl.w	#3,d4
0088E0CC D6C4                       		adda	d4,a3
0088E0CE                            ; @next:		
0088E0CE                            ; 		tst.l	(a3)
0088E0CE                            ; 		beq.s	@free
0088E0CE                            ; 		adda	#8,a3
0088E0CE                            ; 		bra.s	@next
0088E0CE                            @free:
0088E0CE B6FC DB48                   		cmpa.w	#(RAM_MicrSprBuff+($200))&$FFFF,a3	; TODO: mejor check
0088E0D2 6C00                        		bge.s	@full
0088E0D4                             		
0088E0D4 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E0DA                            		
0088E0DA 2A00                       		move.l	d0,d5
0088E0DC 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0088E0E2 6600                        		bne.s	@onscrn_Y
0088E0E4 9A6D 0020                    		sub.w	lvl_y(a5),d5
0088E0E8                            @onscrn_Y:
0088E0E8 0645 0080                    		add.w	#$80,d5
0088E0EC 0C45 0040                   		cmp.w	#$40,d5
0088E0F0 6D00 0000                   		blt	@full
0088E0F4 0C45 01A0                  		cmp.w	#(224+$80)+$40,d5
0088E0F8 6E00 0000                  		bgt	@full
0088E0FC 0245 7FFF                   		and.w	#$7FFF,d5
0088E100 3685                         		move.w	d5,(a3)
0088E102                            
0088E102 4845                       		swap	d5
0088E104 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0088E10A 6600                        		bne.s	@onscrn_X
0088E10C 9A6D 001C                     		sub.w	lvl_x(a5),d5
0088E110                            @onscrn_X:
0088E110 0645 0080                    		add.w	#$80,d5
0088E114 0C45 0040                    		cmp.w	#$40,d5
0088E118 6D00 0000                    		blt	@full
0088E11C 0C45 0200                   		cmp.w	#(320+$80)+$40,d5
0088E120 6E00 0000                   		bgt	@full
0088E124 0245 7FFF                  		and.w	#$7FFF,d5
0088E128 3745 0006                    		move.w	d5,6(a3)
0088E12C                            
0088E12C 2801                         		move.l	d1,d4
0088E12E 3744 0004                   		move.w	d4,4(a3)
0088E132 4844                        		swap	d4
0088E134 3A04                        		move.w	d4,d5
0088E136 0245 000F                   		and.w	#$F,d5
0088E13A 3745 0002                     		move.w	d5,2(a3)
0088E13E 4844                          		swap	d4
0088E140                               		
0088E140 0679 0001 FFFF DB88           		add.w	#1,(RAM_MicrSprCntr)
0088E148                            @full:		
0088E148 4E75                        		rts
0088E14A                             		
0088E14A                            ; ----------------------------------------------
0088E14A                            ; Object_Delete
0088E14A                            ; 
0088E14A                            ; Input:
0088E14A                            ; a6 - Current object
0088E14A                            ; ----------------------------------------------
0088E14A                            
0088E14A                            Object_Delete:
0088E14A 7000                       		moveq	#0,d0
0088E14C 102E 0021                  		move.b 	obj_spwnindx(a6),d0
0088E150 4A00                       		tst.b	d0
0088E152 6700                       		beq.s	@offindx
0088E154 0440 0001                  		sub.w	#1,d0
0088E158 C0FC 000A                  		mulu.w	#$A,d0
0088E15C 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
0088E162 DAC0                       		adda	d0,a5
0088E164 0895 0007                  		bclr	#7,(a5)			;Reset ON SCREEN flag
0088E168                            @offindx:
0088E168                            
0088E168                            ;  		clr.l	obj_code(a6)
0088E168                            ; 		clr.b	obj_index(a6)
0088E168                            		
0088E168 303C 0063                  		move.w	#sizeof_obj-1,d0
0088E16C                            @delete:
0088E16C 421E                       		clr.b	(a6)+
0088E16E 51C8 FFFC                  		dbf	d0,@delete
0088E172 4E75                        		rts
0088E174                             		
0088E174                            ; ----------------------------------------------
0088E174                            ; Object_MicroToSpr
0088E174                            ; 
0088E174                            ; grab an entry from the microlist
0088E174                            ; and convert it to sprites
0088E174                            ; ----------------------------------------------
0088E174                            
0088E174                            Object_MicroToSpr:
0088E174 7000                       		moveq	#0,d0
0088E176 3012                       		move.w	(a2),d0
0088E178 4A40                       		tst.w	d0
0088E17A 6B00                       		bmi.s	@FromObject
0088E17C                            		
0088E17C 4BF9 FFFF E5C0              		lea	(RAM_SprControl),a5
0088E182 286D 0000                  		movea.l	sprite_free(a5),a4
0088E186 B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
0088E18A 6E00 0000                   		bgt	Object_Return
0088E18E                             		
0088E18E 3412                         		move.w	(a2),d2
0088E190 0C42 0040                   		cmp.w	#$40,d2
0088E194 6D00 0000                   		blt	@no_sprite
0088E198 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
0088E19C 6E00 0000                  		bgt	@no_sprite
0088E1A0 3882                        		move.w	d2,(a4)
0088E1A2 342A 0006                   		move.w	6(a2),d2
0088E1A6 0C42 0040                    		cmp.w	#$40,d2
0088E1AA 6D00 0000                    		blt	@no_sprite
0088E1AE 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
0088E1B2 6E00 0000                   		bgt	@no_sprite
0088E1B6 3942 0006                   		move.w	d2,6(a4)
0088E1BA                            	
0088E1BA 342A 0002                  		move.w	2(a2),d2
0088E1BE 302D 0004                  		move.w	sprite_link(a5),d0
0088E1C2 066D 0001 0004              		add.w	#1,sprite_link(a5)
0088E1C8 E14A                            		lsl.w	#8,d2
0088E1CA 0242 0F00                  		and.w	#$0F00,d2
0088E1CE 8042                       		or.w	d2,d0
0088E1D0 3940 0002                  		move.w	d0,2(a4)
0088E1D4 396A 0004 0004             		move.w	4(a2),4(a4)
0088E1DA                             
0088E1DA D8FC 0008                    		adda	#8,a4
0088E1DE 2B4C 0000                  		move.l	a4,sprite_free(a5)
0088E1E2 4E75                       		rts
0088E1E4                            
0088E1E4                            @no_sprite:
0088E1E4 4294                       		clr.l	(a4)
0088E1E6 42AC 0004                  		clr.l	4(a4)
0088E1EA 4E75                       		rts
0088E1EC                            		
0088E1EC                            ; ----------------------------------------------
0088E1EC                            
0088E1EC                            @FromObject:
0088E1EC 0080 00FF 0000             		or.l	#$FF0000,d0
0088E1F2 2C40                       		movea.l	d0,a6
0088E1F4 302A 0002                   		move.w	2(a2),d0
0088E1F8 4840                       		swap	d0
0088E1FA 102A 0004                  		move.b	4(a2),d0
0088E1FE 0240 00FF                  		and.w	#$FF,d0
0088E202 222A 0004                  		move.l	4(a2),d1
0088E206 0281 00FF FFFF             		and.l	#$FFFFFF,d1
0088E20C                            		
0088E20C 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E212 342E 0008                   		move.w	obj_x(a6),d2
0088E216 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0088E21C 6600                        		bne.s	@onscrn_X_obj
0088E21E 946D 001C                   		sub.w	lvl_x(a5),d2
0088E222                            @onscrn_X_obj:
0088E222 0642 0080                   		add.w	#$80,d2
0088E226 0C42 0040                    		cmp.w	#$40,d2
0088E22A 6D00 0000                    		blt	Object_Return
0088E22E 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
0088E232 6E00 0000                   		bgt	Object_Return
0088E236 4842                        		swap	d2
0088E238 342E 000C                   		move.w	obj_y(a6),d2
0088E23C 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0088E242 6600                        		bne.s	@onscrn_Y_obj
0088E244 946D 0020                  		sub.w	lvl_y(a5),d2
0088E248                            @onscrn_Y_obj:
0088E248 0642 0080                   		add.w	#$80,d2
0088E24C 0C42 0040                   		cmp.w	#$40,d2
0088E250 6D00 0000                   		blt	Object_Return
0088E254 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
0088E258 6E00 0000                  		bgt	Object_Return
0088E25C                            
0088E25C 4243                       		clr.w	d3
0088E25E 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
0088E264 6700                       		beq.s	@Right_LR
0088E266 08C3 0000                  		bset	#0,d3
0088E26A                            @Right_LR:
0088E26A 082E 0001 001E             		btst	#bitobj_flipV,obj_status(a6)
0088E270 6700                       		beq.s	@Right_UD
0088E272 08C3 0001                  		bset	#1,d3
0088E276                            @Right_UD:
0088E276                            
0088E276                            ; ----------------------------------------------
0088E276                            ; Object_BldSpr_List
0088E276                            ; 
0088E276                            ; Input:
0088E276                            ; d0 - VRAM|Frame
0088E276                            ; d1 - Mappings data address
0088E276                            ; d2 - X-pos|Y-pos 
0088E276                            ; d3 - Flags
0088E276                            ;
0088E276                            ; Output:
0088E276                            ; d3 - New sprite link
0088E276                            ; 
0088E276                            ; Uses:
0088E276                            ; a3-a5/d4
0088E276                            ; ----------------------------------------------
0088E276                            
0088E276                            ; TODO: esto no checa el final
0088E276                            
0088E276                            Object_BldSpr_List:
0088E276 4BF9 FFFF E5C0              		lea	(RAM_SprControl),a5
0088E27C 286D 0000                  		movea.l	sprite_free(a5),a4
0088E280 B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
0088E284 6E00 0000                   		bgt	Object_Return
0088E288                             		
0088E288 2641                        		movea.l	d1,a3
0088E28A E348                        		lsl.w	#1,d0
0088E28C D6F3 0000                   		adda	(a3,d0.w),a3
0088E290                             		
0088E290 0283 0000 FFFF             		and.l	#$FFFF,d3
0088E296 7C00                        		moveq	#0,d6
0088E298 1C1B                        		move.b	(a3)+,d6
0088E29A 6700 0000                   		beq	Object_Return
0088E29E 0446 0001                   		sub.w	#1,d6
0088E2A2                            @Next:
0088E2A2                            
0088E2A2                            ; ------------
0088E2A2                            ; Ypos check
0088E2A2                            ; ------------
0088E2A2                            
0088E2A2                            ; TODO: hacer el mismo fix de abajo despues
0088E2A2                            
0088E2A2 3202                       		move.w	d2,d1
0088E2A4 1013                        		move.b	(a3),d0
0088E2A6 4880                        		ext.w	d0
0088E2A8                             		
0088E2A8 0803 0001                     		btst	#1,d3		; VFlip flag?
0088E2AC 6700 0000                    		beq	@DontFlip
0088E2B0 182B 0001                   		move.b	1(a3),d4
0088E2B4 0244 0003                    		and.w	#%11,d4
0088E2B8 E74C                         		lsl.w	#3,d4
0088E2BA D044                         		add.w	d4,d0
0088E2BC 4440                       		neg.w	d0
0088E2BE                            @DontFlip:
0088E2BE D240                        		add.w	d0,d1
0088E2C0 1039 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d0
0088E2C6 0240 0006                   		and.w	#%00000110,d0
0088E2CA 6700                        		beq.s	@normal
0088E2CC 0641 0070                  		add.w	#$70,d1	
0088E2D0                            @normal:
0088E2D0 38C1                        		move.w	d1,(a4)+
0088E2D2                            		
0088E2D2                            ; ------------
0088E2D2                            ; Size
0088E2D2                            ; ------------
0088E2D2                            
0088E2D2 18EB 0001                   		move.b	1(a3),(a4)+		; Size
0088E2D6 4240                        		clr.w	d0
0088E2D8 102D 0005                   		move.b	5(a5),d0
0088E2DC D02D 0004                   		add.b	sprite_link(a5),d0
0088E2E0 18C0                        		move.b	d0,(a4)+		; Link
0088E2E2 066D 0001 0004              		add.w	#1,sprite_link(a5)
0088E2E8                             
0088E2E8                            ; ------------
0088E2E8                            ; Vram
0088E2E8                            ; ------------
0088E2E8                            
0088E2E8 4240                         		clr.w	d0			; Vram
0088E2EA 102B 0002                    		move.b	2(a3),d0
0088E2EE E148                         		lsl.w	#8,d0
0088E2F0 102B 0003                    		move.b	3(a3),d0
0088E2F4 4840                         		swap	d0
0088E2F6 3200                         		move.w	d0,d1
0088E2F8 4840                         		swap	d0
0088E2FA D240                         		add.w	d0,d1
0088E2FC                              	
0088E2FC 0803 0000                     		btst	#0,d3			;Left flag?
0088E300 6700                          		beq.s	@Right
0088E302 0041 0800                     		or.w	#$800,d1
0088E306                            @Right:
0088E306 0803 0001                     		btst	#1,d3			;V flag?
0088E30A 6700                          		beq.s	@Down
0088E30C 0041 1000                     		or.w	#$1000,d1
0088E310                            @Down:
0088E310 38C1                         		move.w	d1,(a4)+
0088E312                            		
0088E312                            ; ------------
0088E312                            ; Xpos check
0088E312                            ; ------------
0088E312                            
0088E312 4240                        		clr.w	d0
0088E314 7200                        		moveq	#0,d1
0088E316 7800                        		moveq	#0,d4
0088E318 4842                        		swap	d2
0088E31A 3202                        		move.w	d2,d1
0088E31C 4842                        		swap	d2
0088E31E                             		
0088E31E 102B 0004                   		move.b	4(a3),d0
0088E322 4880                        		ext.w	d0
0088E324 0803 0000                     		btst	#0,d3			;Left flag?
0088E328 6700 0000                    		beq	@ContX
0088E32C                            
0088E32C 182B 0001                   		move.b	1(a3),d4
0088E330 0244 000C                    		and.w	#%1100,d4
0088E334 E34C                         		lsl.w	#1,d4
0088E336 D044                         		add.w	d4,d0
0088E338 4440                       		neg.w	d0
0088E33A 0440 0008                    		sub.w	#8,d0			;TODO: mala idea
0088E33E                            
0088E33E                            @ContX:
0088E33E D240                        		add.w	d0,d1
0088E340 38C1                        		move.w	d1,(a4)+
0088E342 D6FC 0005                   		adda 	#5,a3
0088E346 51CE FF5A                   		dbf	d6,@Next
0088E34A 2B4C 0000                   		move.l	a4,sprite_free(a5)
0088E34E                             		
0088E34E B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
0088E352 6E00                        		bgt.s	Object_Return
0088E354 429C                        		clr.l	(a4)+
0088E356 429C                        		clr.l	(a4)+
0088E358                            Object_Return:
0088E358 4E75                        		rts
0088E35A                             		
0088E35A                            ; ----------------------------------------------
0088E35A                            ; Object_IsGone
0088E35A                            ; ----------------------------------------------
0088E35A                            
0088E35A                            Object_IsGone:
0088E35A 7000                       		moveq	#0,d0
0088E35C 102E 0021                  		move.b 	obj_spwnindx(a6),d0
0088E360 4A00                       		tst.b	d0
0088E362 6700                       		beq.s	@offindx
0088E364 0440 0001                  		sub.w	#1,d0
0088E368 C0FC 000A                  		mulu.w	#$A,d0
0088E36C 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
0088E372 DAC0                       		adda	d0,a5
0088E374 08D5 0006                  		bset	#6,(a5)			; Set GONE flag
0088E378                            @offindx:
0088E378 4E75                       		rts
0088E37A                            		
0088E37A                            ; ----------------------------------------------
0088E37A                            ; Object_OffCheck
0088E37A                            ; ----------------------------------------------
0088E37A                            
0088E37A                            Object_OffCheck:
0088E37A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E380 49F9 FFFF BC42             		lea	(RAM_LevelObjPos),a4
0088E386                            		
0088E386 7000                       		moveq	#0,d0
0088E388 102E 0021                  		move.b 	obj_spwnindx(a6),d0
0088E38C 4A00                       		tst.b	d0
0088E38E 6700                       		beq.s	@return
0088E390 0440 0001                  		sub.w	#1,d0
0088E394 C0FC 000A                  		mulu.w	#$A,d0
0088E398 D8C0                       		adda	d0,a4
0088E39A                            		
0088E39A 302D 0020                     		move.w	lvl_y(a5),d0
0088E39E 3400                          		move.w	d0,d2
0088E3A0 322E 000C                       		move.w	obj_y(a6),d1
0088E3A4 0641 0060                       		add.w	#$60,d1
0088E3A8 B240                            		cmp.w	d0,d1
0088E3AA 6D00                            		blt.s	Object_OffDelete
0088E3AC 0642 0140                         		add.w	#224+$60,d2
0088E3B0 322E 000C                        		move.w	obj_y(a6),d1
0088E3B4 B242                             		cmp.w	d2,d1
0088E3B6 6E00                             		bgt.s	Object_OffDelete
0088E3B8                                 		
0088E3B8 302D 001C                    		move.w	lvl_x(a5),d0
0088E3BC 3400                         		move.w	d0,d2
0088E3BE 322E 0008                      		move.w	obj_x(a6),d1
0088E3C2 0641 0040                      		add.w	#$40,d1
0088E3C6 B240                           		cmp.w	d0,d1
0088E3C8 6D00                           		blt.s	Object_OffDelete
0088E3CA 0642 0180                        		add.w	#320+$40,d2		;TODO: horizontal mode 
0088E3CE 322E 0008                       		move.w	obj_x(a6),d1
0088E3D2 B242                            		cmp.w	d2,d1
0088E3D4 6E00                            		bgt.s	Object_OffDelete
0088E3D6                                 		
0088E3D6                            ;      		; Check for suicide
0088E3D6                            ; 		move.w	lvl_size_y(a5),d0		; Bottomless pit
0088E3D6                            ; 		lsl.w	#4,d0
0088E3D6                            ; 		move.w	obj_y(a6),d1
0088E3D6                            ; 		moveq	#0,d2
0088E3D6                            ; 		move.b	obj_size+2(a6),d2
0088E3D6                            ; 		lsl.w	#3,d2
0088E3D6                            ; 		sub.w	d2,d1
0088E3D6                            ; 		cmp.w	d0,d1
0088E3D6                            ; 		blt	@return
0088E3D6                            ; 		
0088E3D6                            ; 		bset	#7,(a4)
0088E3D6                            ; 		clr.l	obj_code(a6)
0088E3D6                            ; 		clr.b	obj_index(a6)
0088E3D6                            @return:
0088E3D6 4E75                       		rts
0088E3D8                            		
0088E3D8                            ; a4 - respawn slot of this object
0088E3D8                            
0088E3D8                            Object_OffDelete:
0088E3D8 0894 0007                  		bclr	#7,(a4)			; Reset ON SCREEN flag
0088E3DC                            @offindx:
0088E3DC                            
0088E3DC 42AE 0000                  		clr.l	obj_code(a6)
0088E3E0 422E 001D                  		clr.b	obj_index(a6)
0088E3E4                            @Return:
0088E3E4 4E75                        		rts
0088E3E6                            		
0088E3E6                            ; ----------------------------------------------
0088E3E6                            ; Object animation
0088E3E6                            ; 
0088E3E6                            ; Input
0088E3E6                            ; d1 | LONG - Animation data
0088E3E6                            ; 
0088E3E6                            ; Output
0088E3E6                            ; d0 | WORD - Frame
0088E3E6                            ; 
0088E3E6                            ; Uses:
0088E3E6                            ; d2
0088E3E6                            ; ----------------------------------------------
0088E3E6                             
0088E3E6                            Object_Animate:
0088E3E6 4A81                        		tst.l	d1
0088E3E8 6700                         		beq.s	@Return
0088E3EA 7400                        		moveq	#0,d2
0088E3EC 142E 001B                   		move.b	obj_anim_id+1(a6),d2
0088E3F0 B42E 001A                   		cmp.b	obj_anim_id(a6),d2
0088E3F4 6700                        		beq.s	@SameThing
0088E3F6 1D6E 001A 001B              		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
0088E3FC 426E 0018                   		clr.w	obj_anim_next(a6)
0088E400                            @SameThing:
0088E400 142E 001A                   		move.b	obj_anim_id(a6),d2
0088E404 0C02 00FF                   		cmp.b	#-1,d2
0088E408 6700                        		beq.s	@Return
0088E40A E34A                        		lsl.w	#1,d2
0088E40C 2041                       		movea.l	d1,a0
0088E40E D0F0 2000                   		adda	(a0,d2.w),a0
0088E412                             
0088E412 1418                        		move.b	(a0)+,d2
0088E414 0C02 00FF                   		cmp.b	#-1,d2
0088E418 6700                        		beq.s	@keepspd
0088E41A 042E 0001 001C              		sub.b	#1,obj_anim_spd(a6)
0088E420 6A00                        		bpl.s	@Return
0088E422 1D42 001C                  		move.b	d2,obj_anim_spd(a6)
0088E426                            @keepspd:
0088E426 7200                        		moveq	#0,d1
0088E428 342E 0018                   		move.w	obj_anim_next(a6),d2
0088E42C 1210                        		move.b	(a0),d1
0088E42E D0C2                        		adda	d2,a0
0088E430                             
0088E430 0280 FFFF 0000              		and.l	#$FFFF0000,d0
0088E436 1010                        		move.b	(a0),d0
0088E438 0C00 00FF                   		cmp.b	#$FF,d0
0088E43C 6700                        		beq.s	@NoAnim
0088E43E 0C00 00FE                   		cmp.b	#$FE,d0
0088E442 6700                        		beq.s	@GoToFrame
0088E444 0C00 00FD                   		cmp.b	#$FD,d0
0088E448 6700                        		beq.s	@LastFrame
0088E44A                             		
0088E44A 1D40 0020                   		move.b	d0,obj_frame(a6)
0088E44E 066E 0001 0018              		add.w	#1,obj_anim_next(a6)
0088E454                            @Return:
0088E454 4E75                        		rts
0088E456                             
0088E456                            @NoAnim:
0088E456 3D7C 0001 0018              		move.w	#1,obj_anim_next(a6)
0088E45C 3001                        		move.w	d1,d0
0088E45E 1D40 0020                   		move.b	d0,obj_frame(a6)
0088E462 4E75                       		rts
0088E464                            @LastFrame:
0088E464 422E 001C                   		clr.b	obj_anim_spd(a6)
0088E468 4E75                       		rts
0088E46A                            @GoToFrame:
0088E46A 426E 0018                  		clr.w	obj_anim_next(a6)
0088E46E 1D68 0001 0019             		move.b	1(a0),obj_anim_next+1(a6)
0088E474 4E75                       		rts
0088E476                            	
0088E476                            ; ------------------------------------------------
0088E476                            
0088E476                            Object_ShowPoints:
0088E476 302E 0008                   		move.w	obj_x(a6),d0
0088E47A 0440 0004                   		sub.w	#4,d0
0088E47E 4840                        		swap	d0
0088E480 302E 000C                   		move.w	obj_y(a6),d0
0088E484 0440 0004                   		sub.w	#4,d0
0088E488 7200                        		moveq	#0,d1
0088E48A 323C 0587                   		move.w	#$587,d1
0088E48E 6000 FC2E                   		bra	Object_ExtSprite
0088E492                             		
0088E492                             		
0088E492 382E 000C                   		move.w	obj_y(a6),d4
0088E496 7400                        		moveq	#0,d2
0088E498 142E 0007                   		move.b	obj_size+3(a6),d2
0088E49C E74A                        		lsl.w	#3,d2
0088E49E D842                        		add.w	d2,d4
0088E4A0 6100 0000                   		bsr	@leftright
0088E4A4 382E 000C                   		move.w	obj_y(a6),d4
0088E4A8 7400                        		moveq	#0,d2
0088E4AA 142E 0006                   		move.b	obj_size+2(a6),d2
0088E4AE E74A                        		lsl.w	#3,d2
0088E4B0 9842                        		sub.w	d2,d4
0088E4B2                            
0088E4B2                            ;  		rts
0088E4B2                            @leftright:
0088E4B2 302E 0008                   		move.w	obj_x(a6),d0
0088E4B6 0440 0002                   		sub.w	#2,d0
0088E4BA 4840                        		swap	d0
0088E4BC 3004                        		move.w	d4,d0
0088E4BE 7200                        		moveq	#0,d1
0088E4C0 323C 0587                   		move.w	#$587,d1
0088E4C4 6100 FBF8                   		bsr	Object_ExtSprite
0088E4C8                             		
0088E4C8 302E 0008                   		move.w	obj_x(a6),d0
0088E4CC 7400                        		moveq	#0,d2
0088E4CE 142E 0004                   		move.b	obj_size(a6),d2
0088E4D2 E74A                        		lsl.w	#3,d2
0088E4D4 9042                        		sub.w	d2,d0
0088E4D6 4840                        		swap	d0
0088E4D8 3004                        		move.w	d4,d0
0088E4DA 6100 FBE2                   		bsr	Object_ExtSprite
0088E4DE                             		
0088E4DE 302E 0008                   		move.w	obj_x(a6),d0
0088E4E2 0440 0003                   		sub.w	#3,d0
0088E4E6 7400                        		moveq	#0,d2
0088E4E8 142E 0005                   		move.b	obj_size+1(a6),d2
0088E4EC E74A                        		lsl.w	#3,d2
0088E4EE D042                        		add.w	d2,d0
0088E4F0 4840                        		swap	d0
0088E4F2 3004                        		move.w	d4,d0
0088E4F4 6000 FBC8                   		bra	Object_ExtSprite
0088E4F8                             	
0088E4F8                            ; **********************************************
0088E4F8                            ; Object level collision
0088E4F8                            ; **********************************************
0088E4F8                            
0088E4F8                            ; ************************
0088E4F8                            ; Find floor collision
0088E4F8                            ; CENTER
0088E4F8                            ; 
0088E4F8                            ; Input:
0088E4F8                            ; a6 - Object to read
0088E4F8                            ; a5 - Level buffer
0088E4F8                            ; a4 - Layout data
0088E4F8                            ; 
0088E4F8                            ; Output:
0088E4F8                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
0088E4F8                            ; 
0088E4F8                            ; Uses:
0088E4F8                            ; a3-a4 | d4-d5
0088E4F8                            ; ************************
0088E4F8                            
0088E4F8                            object_FindPrz_Floor:
0088E4F8 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E4FE 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088E502 6000                         		bra.s	objSearchCol_Floor
0088E504                              		
0088E504                            object_FindCol_Floor:
0088E504 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E50A 286D 0014                    		movea.l	lvl_collision(a5),a4
0088E50E                            
0088E50E                            objSearchCol_Floor:
0088E50E 7000                       		moveq	#0,d0
0088E510 7800                       		moveq	#0,d4
0088E512 7A00                       		moveq	#0,d5
0088E514 382E 000C                   		move.w	obj_y(a6),d4
0088E518 1A2E 0007                   		move.b	obj_size+3(a6),d5
0088E51C E74D                        		lsl.w	#3,d5
0088E51E D845                        		add.w	d5,d4
0088E520 4A44                        		tst.w	d4
0088E522 6B00 0000                   		bmi	@no_col
0088E526 3A2D 0032                   		move.w	lvl_size_y(a5),d5
0088E52A E94D                        		lsl.w	#4,d5
0088E52C B845                        		cmp.w	d5,d4
0088E52E 6C00 0000                   		bge	@no_col
0088E532 3A04                        		move.w	d4,d5
0088E534 E98D                          		lsl.l	#4,d5
0088E536 2005                           		move.l	d5,d0
0088E538 E84C                         		lsr.w	#4,d4
0088E53A C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0088E53E D8C4                         		adda	d4,a4
0088E540                             		
0088E540                            ; ------------------------
0088E540                            ; X check
0088E540                            ; ------------------------
0088E540                            
0088E540 264C                         		movea.l	a4,a3
0088E542 382E 0008                   		move.w	obj_x(a6),d4
0088E546 4A44                        		tst.w	d4
0088E548 6B00                        		bmi.s	@force_on
0088E54A 3A2D 0030                   		move.w	lvl_size_x(a5),d5
0088E54E E94D                        		lsl.w	#4,d5
0088E550 B845                         		cmp.w	d5,d4
0088E552 6C00                         		bge.s	@force_on
0088E554 E84C                        		lsr.w	#4,d4
0088E556 D6C4                        		adda 	d4,a3
0088E558                            ;  		btst	#7,(a3)
0088E558                            ;  		bne.s	@no_col
0088E558                            ;  		tst.b	(a3)
0088E558                            ;  		beq.s	@no_col
0088E558 E94C                        		lsl.w	#4,d4
0088E55A 4844                        		swap	d4
0088E55C 8084                        		or.l	d4,d0			;XXXYYY00
0088E55E                               		
0088E55E 1013                        		move.b	(a3),d0	
0088E560 4E75                        		rts
0088E562                             		
0088E562                            @force_on:
0088E562 7001                        		moveq	#1,d0
0088E564                            @no_col:
0088E564 4E75                       		rts
0088E566                            		
0088E566                            ; ************************
0088E566                            ; Find side collision
0088E566                            ; CENTER
0088E566                            ;
0088E566                            ; Input:
0088E566                            ; a6 - Object to read
0088E566                            ; a5 - Level buffer
0088E566                            ; a4 - Layout data
0088E566                            ; 
0088E566                            ; Output:
0088E566                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
0088E566                            ; 
0088E566                            ; Uses:
0088E566                            ; a3-a4 | d4-d5
0088E566                            ; ************************
0088E566                            
0088E566                            object_FindPrz_Wall:
0088E566 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E56C 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088E570 6000                         		bra.s	objSearchCol_Wall
0088E572                              		
0088E572                            object_FindCol_Wall:
0088E572 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E578 286D 0014                    		movea.l	lvl_collision(a5),a4
0088E57C                            
0088E57C                            objSearchCol_Wall:
0088E57C 7000                       		moveq	#0,d0
0088E57E 7800                       		moveq	#0,d4
0088E580 7A00                       		moveq	#0,d5
0088E582 382E 000C                   		move.w	obj_y(a6),d4
0088E586 1A2E 0007                   		move.b	obj_size+3(a6),d5
0088E58A E74D                        		lsl.w	#3,d5
0088E58C D845                        		add.w	d5,d4
0088E58E 0444 0001                   		sub.w	#1,d4
0088E592 4A44                        		tst.w	d4
0088E594 6B00 0000                   		bmi	@no_col
0088E598 3A2D 0032                   		move.w	lvl_size_y(a5),d5
0088E59C E94D                        		lsl.w	#4,d5
0088E59E B845                        		cmp.w	d5,d4
0088E5A0 6C00 0000                   		bge	@no_col
0088E5A4 E84C                        		lsr.w	#4,d4
0088E5A6 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
0088E5AA D8C4                        		adda	d4,a4
0088E5AC E18C                        		lsl.l	#8,d4
0088E5AE 2004                        		move.l	d4,d0
0088E5B0                             		
0088E5B0                            ; ------------------------
0088E5B0                            ; X check
0088E5B0                            ; ------------------------
0088E5B0                            
0088E5B0 264C                        		movea.l	a4,a3
0088E5B2 382E 0008                   		move.w	obj_x(a6),d4
0088E5B6 4A44                        		tst.w	d4
0088E5B8 6B00                        		bmi.s	@force_on
0088E5BA 3A2D 0030                   		move.w	lvl_size_x(a5),d5
0088E5BE E94D                        		lsl.w	#4,d5
0088E5C0 B845                         		cmp.w	d5,d4
0088E5C2 6C00                         		bge.s	@force_on
0088E5C4 E84C                        		lsr.w	#4,d4
0088E5C6 D6C4                        		adda 	d4,a3
0088E5C8 E94C                        		lsl.w	#4,d4
0088E5CA 4844                        		swap	d4
0088E5CC                             		
0088E5CC 7A00                       		moveq	#0,d5
0088E5CE 382E 000C                     		move.w	obj_y(a6),d4
0088E5D2 1A2E 0007                     		move.b	obj_size+3(a6),d5
0088E5D6 E74D                          		lsl.w	#3,d5
0088E5D8 D845                          		add.w	d5,d4
0088E5DA                               		
0088E5DA 0444 0001                     		sub.w	#1,d4
0088E5DE 3A2D 0032                   		move.w	lvl_size_y(a5),d5
0088E5E2 E94D                        		lsl.w	#4,d5
0088E5E4 4845                        		swap	d5
0088E5E6 1A2E 0006                   		move.b	obj_size+2(a6),d5
0088E5EA 0245 00FF                    		and.w	#$FF,d5
0088E5EE E24D                         		lsr.w	#1,d5
0088E5F0 4A45                          		tst.w	d5
0088E5F2 6700                          		beq.s	@nxt_y
0088E5F4 0445 0001                     		sub.w	#1,d5
0088E5F8                            @nxt_y:
0088E5F8 4845                       		swap	d5
0088E5FA 4A44                        		tst.w	d4
0088E5FC 6B00                        		bmi.s	@force_on
0088E5FE B845                        		cmp.w	d5,d4
0088E600 6C00                        		bge.s	@zero_y
0088E602 0813 0007                   		btst	#7,(a3)
0088E606 6600                        		bne.s	@zero_y
0088E608 4A13                       		tst.b	(a3)
0088E60A 6700                       		beq.s	@zero_y
0088E60C 8084                         		or.l	d4,d0
0088E60E 4844                         		swap	d4
0088E610 E98C                         		lsl.l	#4,d4
0088E612 0284 000F FF00               		and.l	#$000FFF00,d4
0088E618 8084                         		or.l	d4,d0
0088E61A 1013                        		move.b	(a3),d0
0088E61C 4E75                        		rts
0088E61E                            @zero_y:
0088E61E 96ED 0030                   		suba	lvl_size_x(a5),a3
0088E622 0444 0010                   		sub.w	#$10,d4
0088E626 4845                       		swap	d5
0088E628 51CD FFCE                    		dbf	d5,@nxt_y
0088E62C                            
0088E62C                            @force_on:
0088E62C 103C 0000                  		move.b	#0,d0
0088E630                            @no_col:
0088E630 4E75                       		rts
0088E632                            
0088E632                            ; ************************
0088E632                            ; Find Ceiling collision
0088E632                            ; CENTER
0088E632                            ; 
0088E632                            ; Input:
0088E632                            ; a6 - Object to read
0088E632                            ; a5 - Level buffer
0088E632                            ; a4 - Layout data
0088E632                            
0088E632                            ; Output:
0088E632                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
0088E632                            ; 
0088E632                            ; Uses:
0088E632                            ; a3-a4 | d4-d5
0088E632                            ; ************************
0088E632                            
0088E632                            object_FindPrz_Ceiling:
0088E632 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E638 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088E63C 6000                         		bra.s	objSearchCol_Ceiling
0088E63E                              		
0088E63E                            object_FindCol_Ceiling:
0088E63E 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E644 286D 0014                    		movea.l	lvl_collision(a5),a4
0088E648                              		
0088E648                            objSearchCol_Ceiling:
0088E648 7000                       		moveq	#0,d0
0088E64A 7800                       		moveq	#0,d4
0088E64C 7A00                       		moveq	#0,d5
0088E64E 382E 000C                   		move.w	obj_y(a6),d4
0088E652 1A2E 0006                      		move.b	obj_size+2(a6),d5
0088E656 E74D                           		lsl.w	#3,d5
0088E658 9845                           		sub.w	d5,d4			;UP SIZE
0088E65A 4A44                        		tst.w	d4
0088E65C 6B00 0000                   		bmi	@no_col
0088E660 3A2D 0032                   		move.w	lvl_size_y(a5),d5
0088E664 E94D                        		lsl.w	#4,d5
0088E666 B845                        		cmp.w	d5,d4
0088E668 6C00 0000                   		bge	@no_col
0088E66C E84C                        		lsr.w	#4,d4
0088E66E 0244 0FFF                   		and.w	#$FFF,d4
0088E672 3004                        		move.w	d4,d0
0088E674 E188                        		lsl.l	#8,d0			;000YYY00
0088E676 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
0088E67A D8C4                        		adda	d4,a4
0088E67C                            		
0088E67C                            ; ------------------------
0088E67C                            ; X check
0088E67C                            ; ------------------------
0088E67C                            
0088E67C 264C                        		movea.l	a4,a3
0088E67E 382E 0008                   		move.w	obj_x(a6),d4
0088E682 0444 0001                   		sub.w	#1,d4
0088E686 4A44                        		tst.w	d4
0088E688 6B00                        		bmi.s	@no_col
0088E68A 3A2D 0030                   		move.w	lvl_size_x(a5),d5
0088E68E E94D                        		lsl.w	#4,d5
0088E690 B845                          		cmp.w	d5,d4
0088E692 6C00                          		bge.s	@no_col
0088E694 E84C                        		lsr.w	#4,d4
0088E696 D6C4                        		adda 	d4,a3
0088E698                            ;  		btst	#7,(a3)
0088E698                            ;  		bne.s	@no_col
0088E698                            ;  		tst.b	(a3)
0088E698                            ;  		beq.s	@no_col
0088E698 E94C                        		lsl.w	#4,d4
0088E69A 4844                        		swap	d4
0088E69C 8084                        		or.l	d4,d0			;XXXYYY00
0088E69E 1013                        		move.b	(a3),d0	
0088E6A0                            @no_col:
0088E6A0 4E75                       		rts
0088E6A2                            		
0088E6A2                            ; ************************
0088E6A2                            ; Find floor collision
0088E6A2                            ; Left/Right points
0088E6A2                            ;
0088E6A2                            ; Input:
0088E6A2                            ; a6 - Object to read
0088E6A2                            ; a5 - Level buffer
0088E6A2                            ; a4 - Layout data
0088E6A2                            ; 
0088E6A2                            ; Output:
0088E6A2                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
0088E6A2                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
0088E6A2                            ; 
0088E6A2                            ; Uses:
0088E6A2                            ; a3 | d4-d5
0088E6A2                            ; ************************
0088E6A2                            
0088E6A2                            object_FindPrz_FloorSides:
0088E6A2 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E6A8 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088E6AC 6000                       		bra.s	objSearchCol_FloorSides
0088E6AE                            		
0088E6AE                            object_FindCol_FloorSides:
0088E6AE 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E6B4 286D 0014                    		movea.l	lvl_collision(a5),a4
0088E6B8                              		
0088E6B8                            objSearchCol_FloorSides:
0088E6B8 7000                       		moveq	#0,d0
0088E6BA 7200                       		moveq	#0,d1
0088E6BC                            
0088E6BC 7800                       		moveq	#0,d4
0088E6BE 7A00                       		moveq	#0,d5
0088E6C0 382E 000C                   		move.w	obj_y(a6),d4
0088E6C4 1A2E 0007                    		move.b	obj_size+3(a6),d5
0088E6C8 E74D                        		lsl.w	#3,d5
0088E6CA D845                        		add.w	d5,d4
0088E6CC 4A44                        		tst.w	d4
0088E6CE 6B00 0000                   		bmi	@no_col
0088E6D2 3A2D 0032                    		move.w	lvl_size_y(a5),d5
0088E6D6 E94D                         		lsl.w	#4,d5
0088E6D8 B845                         		cmp.w	d5,d4
0088E6DA 6C00 0000                    		bge	@no_col
0088E6DE E84C                        		lsr.w	#4,d4
0088E6E0 3004                         		move.w	d4,d0
0088E6E2 3204                         		move.w	d4,d1
0088E6E4 E188                         		lsl.l	#8,d0			; LEFT 000YYY00
0088E6E6 E189                         		lsl.l	#8,d1			;RIGHT 000YYY00
0088E6E8 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
0088E6EC D8C4                        		adda	d4,a4
0088E6EE                            
0088E6EE                            ; ------------------------
0088E6EE                            ; X check
0088E6EE                            ; 
0088E6EE                            ; LEFT
0088E6EE                            ; ------------------------
0088E6EE                            
0088E6EE 7800                        		moveq	#0,d4
0088E6F0 7A00                       		moveq	#0,d5
0088E6F2 3A2E 0008                    		move.w	obj_x(a6),d5
0088E6F6 382D 0030                   		move.w	lvl_size_x(a5),d4
0088E6FA E94C                        		lsl.w	#4,d4
0088E6FC BA44                             		cmp.w	d4,d5
0088E6FE 6D00                             		blt.s	@dontfix_l
0088E700 0445 0001                        		sub.w	#1,d5
0088E704                            @dontfix_l:
0088E704 4A45                        		tst.w	d5
0088E706 6B00                        		bmi.s	@zero_l
0088E708                             		
0088E708 3805                        		move.w	d5,d4
0088E70A E84C                        		lsr.w	#4,d4
0088E70C 264C                        		movea.l	a4,a3
0088E70E D6C4                        		adda 	d4,a3
0088E710 4845                        		swap	d5		; d5 - XRead | Free
0088E712 1A2E 0004                   		move.b	obj_size(a6),d5
0088E716 0245 00FF                   		and.w	#$FF,d5		; d5 - XRead | Loop
0088E71A 4A45                        		tst.w	d5
0088E71C 6700                        		beq.s	@zero_l
0088E71E                            @Next_col_l:
0088E71E 4845                        		swap	d5		; d5 - Loop | Xread
0088E720                             		
0088E720 4A13                        		tst.b	(a3)
0088E722 6700                        		beq.s	@No_col_l
0088E724 0813 0007                   		btst	#7,(a3)
0088E728 6600                        		bne.s	@No_col_l
0088E72A 3805                        		move.w	d5,d4
0088E72C 0244 FFF0                   		and.w	#$FFF0,d4
0088E730 4844                        		swap	d4
0088E732 8284                        		or.l	d4,d1		; LEFT XXXYYY00
0088E734 1213                       		move.b	(a3),d1
0088E736 6000                        		bra.s	@zero_l
0088E738                            @No_col_l:
0088E738                            
0088E738 0445 0008                   		sub.w	#8,d5
0088E73C 6A00                          		bpl.s	@Fine_l
0088E73E 4245                          		clr.w	d5
0088E740                            @Fine_l:
0088E740 3805                        		move.w	d5,d4
0088E742 E84C                        		lsr.w	#4,d4
0088E744 264C                        		movea.l	a4,a3
0088E746 D6C4                        		adda 	d4,a3
0088E748 4845                        		swap	d5		; d5 - XRead | Loop
0088E74A 51CD FFD2                   		dbf	d5,@Next_col_l
0088E74E                            @zero_l:
0088E74E                            		
0088E74E                            ; ------------------------
0088E74E                            ; X check
0088E74E                            ; 
0088E74E                            ; RIGHT
0088E74E                            ; ------------------------
0088E74E                            
0088E74E 7800                        		moveq	#0,d4
0088E750 7A00                        		moveq	#0,d5
0088E752 3A2E 0008                   		move.w	obj_x(a6),d5
0088E756 0445 0001                   		sub.w	#1,d5
0088E75A 4A45                        		tst.w	d5
0088E75C 6B00                        		bmi.s	@no_col
0088E75E 382D 0030                   		move.w	lvl_size_x(a5),d4
0088E762 E94C                        		lsl.w	#4,d4
0088E764 BA44                          		cmp.w	d4,d5
0088E766 6C00                           		bge.s	@no_col
0088E768                            
0088E768 3805                        		move.w	d5,d4
0088E76A E84C                        		lsr.w	#4,d4
0088E76C 264C                        		movea.l	a4,a3
0088E76E D6C4                        		adda 	d4,a3
0088E770 4845                        		swap	d5		;d5 - XRead | Free
0088E772 1A2E 0005                   		move.b	obj_size+1(a6),d5
0088E776 0245 00FF                   		and.w	#$FF,d5		;d5 - XRead | Loop
0088E77A 4A45                        		tst.w	d5
0088E77C 6700                        		beq.s	@no_col
0088E77E                             		
0088E77E                            @Next_col_r:
0088E77E 4845                        		swap	d5		;d5 - Loop | Xread
0088E780 4A13                        		tst.b	(a3)
0088E782 6700                        		beq.s	@No_col_r
0088E784 0813 0007                   		btst	#7,(a3)
0088E788 6600                        		bne.s	@No_col_r
0088E78A 382D 0030                   		move.w	lvl_size_x(a5),d4
0088E78E E94C                        		lsl.w	#4,d4
0088E790 BA44                          		cmp.w	d4,d5
0088E792 6C00                           		bge.s	@no_col
0088E794                                		
0088E794 3805                        		move.w	d5,d4
0088E796 0244 FFF0                   		and.w	#$FFF0,d4
0088E79A 4844                        		swap	d4
0088E79C 8084                        		or.l	d4,d0		; RIGHT XXXYYY00
0088E79E 1013                       		move.b	(a3),d0
0088E7A0 4E75                        		rts
0088E7A2                             		
0088E7A2                            @No_col_r:
0088E7A2 0645 0008                   		add.w	#8,d5
0088E7A6 3805                        		move.w	d5,d4
0088E7A8 E84C                        		lsr.w	#4,d4
0088E7AA 264C                        		movea.l	a4,a3
0088E7AC D6C4                        		adda 	d4,a3
0088E7AE 4845                        		swap	d5		;d5 - XRead | Loop
0088E7B0 51CD FFCC                   		dbf	d5,@Next_col_r
0088E7B4                             		
0088E7B4                            ; ------------------------
0088E7B4                            
0088E7B4                            @no_col:
0088E7B4 4E75                       		rts
0088E7B6                            
0088E7B6                            ; ************************
0088E7B6                            ; Find side collision
0088E7B6                            ; LEFT/RIGHT
0088E7B6                            ;
0088E7B6                            ; Input:
0088E7B6                            ; (Nothing)
0088E7B6                            ; 
0088E7B6                            ; Output:
0088E7B6                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
0088E7B6                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
0088E7B6                            ; 
0088E7B6                            ; Uses:
0088E7B6                            ; a3-a4 | d4-d5
0088E7B6                            ; ************************
0088E7B6                            
0088E7B6                            object_FindPrz_WallSides:
0088E7B6 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E7BC 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088E7C0 6000                         		bra.s	objSearchCol_WallSides
0088E7C2                              		
0088E7C2                            object_FindCol_WallSides:
0088E7C2 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088E7C8 286D 0014                    		movea.l	lvl_collision(a5),a4
0088E7CC                              		
0088E7CC                            objSearchCol_WallSides:
0088E7CC 7000                        		moveq	#0,d0
0088E7CE 7200                        		moveq	#0,d1
0088E7D0 7800                        		moveq	#0,d4
0088E7D2 7A00                        		moveq	#0,d5
0088E7D4                            
0088E7D4                            ; ------------------------
0088E7D4                            ; Left
0088E7D4                            ; ------------------------
0088E7D4                            
0088E7D4 4A2E 0004                  		tst.b	obj_size(a6)
0088E7D8 6700 0000                  		beq	@ignore_l
0088E7DC                            			
0088E7DC                            ; --------------
0088E7DC                            ; LEFT DOWN
0088E7DC                            ; --------------
0088E7DC                            
0088E7DC 3A2E 000C                    		move.w	obj_y(a6),d5
0088E7E0 4A45                         		tst.w	d5
0088E7E2 6B00 0000                  		bmi	@ignore_l
0088E7E6 382D 0032                  		move.w	lvl_size_y(a5),d4
0088E7EA E94C                       		lsl.w	#4,d4
0088E7EC BA44                       		cmp.w	d4,d5
0088E7EE 6C00 0000                  		bge	@ignore_l
0088E7F2 4845                         		swap	d5
0088E7F4 4245                         		clr.w	d5
0088E7F6 1A2E 0007                    		move.b	obj_size+3(a6),d5	
0088E7FA 4A45                         		tst.w	d5
0088E7FC 6700 0000                    		beq	@ignore_l
0088E800 0445 0001                    		sub.w	#1,d5
0088E804                            @next_passld:
0088E804 4845                       		swap	d5
0088E806 4A45                       		tst.w	d5
0088E808 6B00 0000                  		bmi	@ignore_l
0088E80C 3805                       		move.w	d5,d4
0088E80E 4844                       		swap	d4
0088E810 382E 0008                  		move.w	obj_x(a6),d4
0088E814 0444 0001                  		sub.w	#1,d4
0088E818 4245                       		clr.w	d5
0088E81A 1A2E 0004                  		move.b	obj_size(a6),d5
0088E81E E74D                       		lsl.w	#3,d5
0088E820 9845                       		sub.w	d5,d4			; left X size
0088E822 4A44                       		tst.w	d4
0088E824 6B00 0000                  		bmi	@forceset_l
0088E828 E84C                       		lsr.w	#4,d4
0088E82A 264C                        		movea.l	a4,a3
0088E82C D6C4                       		adda	d4,a3
0088E82E 4844                       		swap	d4
0088E830 3A04                       		move.w	d4,d5
0088E832 E84C                         		lsr.w	#4,d4
0088E834 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0088E838 D6C4                         		adda	d4,a3
0088E83A                              		
0088E83A 0813 0007                    		btst	#7,(a3)
0088E83E 6600                         		bne.s	@next_ld
0088E840 4A13                         		tst.b	(a3)
0088E842 6600 0000                    		bne	@found_l
0088E846                            @next_ld:
0088E846 0645 0008                  		add.w	#8,d5
0088E84A 382D 0032                  		move.w	lvl_size_y(a5),d4
0088E84E E94C                       		lsl.w	#4,d4
0088E850 BA44                       		cmp.w	d4,d5
0088E852 6C00                       		bge.s	@gone_ld
0088E854                            		
0088E854 4845                       		swap	d5
0088E856 51CD FFAC                  		dbf	d5,@next_passld
0088E85A                            @gone_ld:
0088E85A                            
0088E85A                            ; --------------
0088E85A                            ; LEFT UP
0088E85A                            ; --------------
0088E85A                            
0088E85A 3A2E 000C                    		move.w	obj_y(a6),d5
0088E85E 4A45                         		tst.w	d5
0088E860 6B00 0000                  		bmi	@ignore_l
0088E864 382D 0032                  		move.w	lvl_size_y(a5),d4
0088E868 E94C                       		lsl.w	#4,d4
0088E86A BA44                       		cmp.w	d4,d5
0088E86C 6C00 0000                  		bge	@ignore_l
0088E870 4845                         		swap	d5
0088E872 4245                         		clr.w	d5
0088E874 1A2E 0006                    		move.b	obj_size+2(a6),d5	
0088E878 4A45                         		tst.w	d5
0088E87A 6700                         		beq.s	@ignore_l
0088E87C 0445 0001                    		sub.w	#1,d5
0088E880                            @next_passlu:
0088E880 4845                       		swap	d5
0088E882 4A45                       		tst.w	d5
0088E884 6B00                       		bmi.s	@ignore_l
0088E886 3805                       		move.w	d5,d4
0088E888 4844                       		swap	d4
0088E88A 382E 0008                  		move.w	obj_x(a6),d4
0088E88E 0444 0001                  		sub.w	#1,d4
0088E892 4245                       		clr.w	d5
0088E894 1A2E 0004                  		move.b	obj_size(a6),d5
0088E898 E74D                       		lsl.w	#3,d5
0088E89A 9845                       		sub.w	d5,d4			; left X size
0088E89C 4A44                       		tst.w	d4
0088E89E 6B00                       		bmi.s	@forceset_l
0088E8A0 E84C                       		lsr.w	#4,d4
0088E8A2 264C                        		movea.l	a4,a3
0088E8A4 D6C4                       		adda	d4,a3
0088E8A6 4844                       		swap	d4
0088E8A8 3A04                       		move.w	d4,d5
0088E8AA E84C                         		lsr.w	#4,d4
0088E8AC C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0088E8B0 D6C4                         		adda	d4,a3
0088E8B2                              		
0088E8B2 0813 0007                    		btst	#7,(a3)
0088E8B6 6600                         		bne.s	@next_lu
0088E8B8 4A13                         		tst.b	(a3)
0088E8BA 6600                         		bne.s	@found_l	
0088E8BC                            @next_lu:
0088E8BC 0445 0008                  		sub.w	#8,d5
0088E8C0 4A45                       		tst.w	d5
0088E8C2 6B00                       		bmi.s	@ignore_l
0088E8C4 4845                       		swap	d5
0088E8C6 51CD FFB8                  		dbf	d5,@next_passlu
0088E8CA                            		
0088E8CA 6000                       		bra.s	@ignore_l
0088E8CC                            		
0088E8CC                            ; --------------
0088E8CC                            ; Found left
0088E8CC                            ; --------------
0088E8CC                            
0088E8CC                            @forceset_l:
0088E8CC 123C 0001                  		move.b	#1,d1
0088E8D0 6000                       		bra.s	@ignore_l
0088E8D2                            		
0088E8D2                            @found_l:
0088E8D2 0285 0000 FFF0             		and.l	#$FFF0,d5
0088E8D8 E98D                       		lsl.l	#4,d5
0088E8DA 8285                       		or.l	d5,d1
0088E8DC 7A00                        		moveq	#0,d5
0088E8DE 382E 0008                  		move.w	obj_x(a6),d4
0088E8E2 0444 0001                  		sub.w	#1,d4
0088E8E6 1A2E 0004                  		move.b	obj_size(a6),d5
0088E8EA E74D                       		lsl.w	#3,d5
0088E8EC 9845                       		sub.w	d5,d4
0088E8EE 0284 0000 FFF0             		and.l	#$FFF0,d4
0088E8F4 4844                       		swap	d4
0088E8F6 8284                       		or.l	d4,d1
0088E8F8 1213                        		move.b	(a3),d1
0088E8FA                            @ignore_l:
0088E8FA                            
0088E8FA                            ; ------------------------
0088E8FA                            ; Right
0088E8FA                            ; ------------------------
0088E8FA                             
0088E8FA 4A2E 0005                  		tst.b	obj_size+1(a6)
0088E8FE 6700 0000                  		beq	@ignore_r
0088E902                            		
0088E902                            ; --------------
0088E902                            ; RIGHT DOWN
0088E902                            ; --------------
0088E902                            
0088E902 7A00                       		moveq	#0,d5
0088E904 3A2E 000C                    		move.w	obj_y(a6),d5
0088E908 4A45                         		tst.w	d5
0088E90A 6B00 0000                  		bmi	@ignore_r
0088E90E 382D 0032                  		move.w	lvl_size_y(a5),d4
0088E912 E94C                       		lsl.w	#4,d4
0088E914 BA44                       		cmp.w	d4,d5
0088E916 6C00 0000                  		bge	@ignore_r
0088E91A 4845                         		swap	d5
0088E91C 4245                         		clr.w	d5
0088E91E 1A2E 0007                    		move.b	obj_size+3(a6),d5	
0088E922 4A45                         		tst.w	d5
0088E924 6700 0000                    		beq	@ignore_r
0088E928 0445 0001                    		sub.w	#1,d5
0088E92C                            @next_passrd:
0088E92C 4845                       		swap	d5
0088E92E 4A45                       		tst.w	d5
0088E930 6B00 0000                  		bmi	@ignore_r
0088E934                            		
0088E934 3805                       		move.w	d5,d4
0088E936 4844                       		swap	d4
0088E938 382E 0008                  		move.w	obj_x(a6),d4
0088E93C 4245                       		clr.w	d5
0088E93E 1A2E 0005                  		move.b	obj_size+1(a6),d5
0088E942 E74D                       		lsl.w	#3,d5
0088E944 D845                       		add.w	d5,d4			; left X size
0088E946 3A2D 0030                  		move.w	lvl_size_x(a5),d5
0088E94A E94D                       		lsl.w	#4,d5
0088E94C B845                       		cmp.w	d5,d4
0088E94E 6C00 0000                  		bge	@forceset_r
0088E952                            		
0088E952 E84C                       		lsr.w	#4,d4
0088E954 264C                        		movea.l	a4,a3
0088E956 D6C4                       		adda	d4,a3
0088E958 4844                       		swap	d4
0088E95A 3A04                       		move.w	d4,d5
0088E95C E84C                         		lsr.w	#4,d4
0088E95E C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0088E962 D6C4                         		adda	d4,a3
0088E964                              		
0088E964 0813 0007                    		btst	#7,(a3)
0088E968 6600                         		bne.s	@next_rd
0088E96A 4A13                         		tst.b	(a3)
0088E96C 6600 0000                    		bne	@found_r
0088E970                            @next_rd:
0088E970 0645 0008                  		add.w	#8,d5
0088E974 382D 0032                  		move.w	lvl_size_y(a5),d4
0088E978 E94C                       		lsl.w	#4,d4
0088E97A BA44                       		cmp.w	d4,d5
0088E97C 6C00                       		bge.s	@gone_rd
0088E97E 4845                       		swap	d5
0088E980 51CD FFAA                  		dbf	d5,@next_passrd
0088E984                            @gone_rd:
0088E984                            
0088E984                            ; --------------
0088E984                            ; RIGHT UP
0088E984                            ; --------------
0088E984                            
0088E984 7A00                       		moveq	#0,d5
0088E986 3A2E 000C                    		move.w	obj_y(a6),d5
0088E98A 4A45                         		tst.w	d5
0088E98C 6B00 0000                  		bmi	@ignore_r
0088E990 382D 0032                  		move.w	lvl_size_y(a5),d4
0088E994 E94C                       		lsl.w	#4,d4
0088E996 BA44                       		cmp.w	d4,d5
0088E998 6C00 0000                  		bge	@ignore_r
0088E99C 4845                         		swap	d5
0088E99E 4245                         		clr.w	d5
0088E9A0 1A2E 0006                    		move.b	obj_size+2(a6),d5	
0088E9A4 4A45                         		tst.w	d5
0088E9A6 6700                         		beq.s	@ignore_r
0088E9A8 0445 0001                    		sub.w	#1,d5
0088E9AC                            @next_passru:
0088E9AC 4845                       		swap	d5
0088E9AE 4A45                       		tst.w	d5
0088E9B0 6B00                       		bmi.s	@ignore_r
0088E9B2                            		
0088E9B2 3805                       		move.w	d5,d4
0088E9B4 4844                       		swap	d4
0088E9B6 382E 0008                  		move.w	obj_x(a6),d4
0088E9BA 4245                       		clr.w	d5
0088E9BC 1A2E 0005                  		move.b	obj_size+1(a6),d5
0088E9C0 E74D                       		lsl.w	#3,d5
0088E9C2 D845                       		add.w	d5,d4			; left X size
0088E9C4 3A2D 0030                  		move.w	lvl_size_x(a5),d5
0088E9C8 E94D                       		lsl.w	#4,d5
0088E9CA B845                       		cmp.w	d5,d4
0088E9CC 6C00                       		bge.s	@forceset_r
0088E9CE                            		
0088E9CE E84C                       		lsr.w	#4,d4
0088E9D0 264C                        		movea.l	a4,a3
0088E9D2 D6C4                       		adda	d4,a3
0088E9D4 4844                       		swap	d4
0088E9D6                            		
0088E9D6 3A04                       		move.w	d4,d5
0088E9D8 E84C                         		lsr.w	#4,d4
0088E9DA C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0088E9DE D6C4                         		adda	d4,a3
0088E9E0                              		
0088E9E0 0813 0007                    		btst	#7,(a3)
0088E9E4 6600                         		bne.s	@next_ru
0088E9E6 4A13                         		tst.b	(a3)
0088E9E8 6600                         		bne.s	@found_r
0088E9EA                            @next_ru:
0088E9EA 0445 0008                  		sub.w	#8,d5
0088E9EE 4A45                       		tst.w	d5
0088E9F0 6B00                       		bmi.s	@ignore_r
0088E9F2                            		
0088E9F2 4845                       		swap	d5
0088E9F4 51CD FFB6                  		dbf	d5,@next_passru
0088E9F8                            
0088E9F8 6000                       		bra.s	@ignore_r
0088E9FA                            
0088E9FA                            ; --------------
0088E9FA                            ; Found right
0088E9FA                            ; --------------
0088E9FA                            
0088E9FA                            @forceset_r:
0088E9FA 103C 0001                  		move.b	#1,d0
0088E9FE 6000                       		bra.s	@ignore_r
0088EA00                            		
0088EA00                            @found_r:
0088EA00 0285 0000 FFF0             		and.l	#$FFF0,d5
0088EA06 E98D                       		lsl.l	#4,d5
0088EA08 8085                       		or.l	d5,d0
0088EA0A 7A00                        		moveq	#0,d5
0088EA0C 382E 0008                  		move.w	obj_x(a6),d4
0088EA10 1A2E 0005                  		move.b	obj_size+1(a6),d5
0088EA14 E74D                       		lsl.w	#3,d5
0088EA16 D845                       		add.w	d5,d4
0088EA18 0284 0000 FFF0             		and.l	#$FFF0,d4
0088EA1E 4844                       		swap	d4
0088EA20 8084                       		or.l	d4,d0
0088EA22 1013                        		move.b	(a3),d0	
0088EA24                            @ignore_r:
0088EA24                            		
0088EA24                            ; ------------------------
0088EA24                            ; Finish checking
0088EA24                            ; ------------------------
0088EA24                            
0088EA24 4E75                       		rts
0088EA26                            		
0088EA26                            ; ************************
0088EA26                            ; Find ceiling collision
0088EA26                            ; LEFT/RIGHT
0088EA26                            ; 
0088EA26                            ; Input:
0088EA26                            ; (Nothing)
0088EA26                            ; 
0088EA26                            ; Output:
0088EA26                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
0088EA26                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
0088EA26                            ; 
0088EA26                            ; Uses:
0088EA26                            ; a3-a4 | d4-d5
0088EA26                            ; ************************
0088EA26                            
0088EA26                            object_FindPrz_CeilingSides:
0088EA26 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EA2C 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088EA30 6000                         		bra.s	objSearchCol_CeilingSides
0088EA32                              		
0088EA32                            object_FindCol_CeilingSides:
0088EA32 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EA38 286D 0014                    		movea.l	lvl_collision(a5),a4
0088EA3C                              		
0088EA3C                            objSearchCol_CeilingSides:
0088EA3C 7000                       		moveq	#0,d0
0088EA3E 7200                       		moveq	#0,d1
0088EA40 7800                        		moveq	#0,d4
0088EA42 3A2E 000C                    		move.w	obj_y(a6),d5
0088EA46                            ;   		add.w	#4,d5
0088EA46 182E 0006                     		move.b	obj_size+2(a6),d4
0088EA4A E74C                          		lsl.w	#3,d4
0088EA4C                            ;     		sub.w	#1,d4
0088EA4C 9A44                          		sub.w	d4,d5			;UP SIZE
0088EA4E 4A45                         		tst.w	d5
0088EA50 6B00 0000                    		bmi	@no_col
0088EA54 382D 0032                   		move.w	lvl_size_y(a5),d4
0088EA58 E94C                        		lsl.w	#4,d4
0088EA5A BA44                        		cmp.w	d4,d5
0088EA5C 6C00 0000                   		bge	@no_col
0088EA60                             		
0088EA60 E84D                         		lsr.w	#4,d5
0088EA62 3005                         		move.w	d5,d0
0088EA64 3205                         		move.w	d5,d1
0088EA66 E188                         		lsl.l	#8,d0			; LEFT 000YYY00
0088EA68 E189                         		lsl.l	#8,d1			;RIGHT 000YYY00
0088EA6A CAED 0030                   		mulu.w	lvl_size_x(a5),d5
0088EA6E D8C5                         		adda	d5,a4
0088EA70                            
0088EA70                            ; ------------------------
0088EA70                            ; X check
0088EA70                            ; 
0088EA70                            ; LEFT
0088EA70                            ; ------------------------
0088EA70                            
0088EA70 7800                        		moveq	#0,d4
0088EA72 7A00                       		moveq	#0,d5
0088EA74 3A2E 0008                    		move.w	obj_x(a6),d5
0088EA78 382D 0030                   		move.w	lvl_size_x(a5),d4
0088EA7C E94C                        		lsl.w	#4,d4
0088EA7E BA44                             		cmp.w	d4,d5
0088EA80 6D00                             		blt.s	@dontfix_l
0088EA82 0445 0001                        		sub.w	#1,d5
0088EA86                            @dontfix_l:
0088EA86 4A45                        		tst.w	d5
0088EA88 6B00                        		bmi.s	@zero_l
0088EA8A 3805                        		move.w	d5,d4
0088EA8C E84C                        		lsr.w	#4,d4
0088EA8E 264C                        		movea.l	a4,a3
0088EA90 D6C4                        		adda 	d4,a3
0088EA92                             		
0088EA92 4845                        		swap	d5		; d5 - XRead | Free
0088EA94 1A2E 0004                   		move.b	obj_size(a6),d5
0088EA98 0245 00FF                   		and.w	#$FF,d5		; d5 - XRead | Loop
0088EA9C 4A45                        		tst.w	d5
0088EA9E 6700                        		beq.s	@zero_l
0088EAA0                            @Next_col_l:
0088EAA0 4845                        		swap	d5		; d5 - Loop | Xread
0088EAA2                             		
0088EAA2 4A13                        		tst.b	(a3)
0088EAA4 6700                        		beq.s	@No_col_l
0088EAA6 3805                        		move.w	d5,d4
0088EAA8 0244 FFF0                   		and.w	#$FFF0,d4
0088EAAC 4844                        		swap	d4
0088EAAE 8284                        		or.l	d4,d1		; LEFT XXXYYY00
0088EAB0 1213                       		move.b	(a3),d1
0088EAB2 6000                        		bra.s	@zero_l
0088EAB4                            @No_col_l:
0088EAB4                            
0088EAB4 0445 0008                   		sub.w	#8,d5
0088EAB8 6A00                          		bpl.s	@Fine_l
0088EABA 4245                          		clr.w	d5
0088EABC                            @Fine_l:
0088EABC 3805                        		move.w	d5,d4
0088EABE E84C                        		lsr.w	#4,d4
0088EAC0 264C                        		movea.l	a4,a3
0088EAC2 D6C4                        		adda 	d4,a3
0088EAC4 4845                        		swap	d5		; d5 - XRead | Loop
0088EAC6 51CD FFD8                   		dbf	d5,@Next_col_l
0088EACA                            @zero_l:
0088EACA                            		
0088EACA                            ; ------------------------
0088EACA                            ; X check
0088EACA                            ; 
0088EACA                            ; RIGHT
0088EACA                            ; ------------------------
0088EACA                            
0088EACA 7800                        		moveq	#0,d4
0088EACC 7A00                        		moveq	#0,d5
0088EACE 3A2E 0008                   		move.w	obj_x(a6),d5
0088EAD2 0445 0001                   		sub.w	#1,d5
0088EAD6 4A45                        		tst.w	d5
0088EAD8 6B00                        		bmi.s	@no_col
0088EADA 382D 0030                   		move.w	lvl_size_x(a5),d4
0088EADE E94C                        		lsl.w	#4,d4
0088EAE0 BA44                          		cmp.w	d4,d5
0088EAE2 6C00                           		bge.s	@no_col
0088EAE4                            
0088EAE4 3805                        		move.w	d5,d4
0088EAE6 E84C                        		lsr.w	#4,d4
0088EAE8 264C                        		movea.l	a4,a3
0088EAEA D6C4                        		adda 	d4,a3
0088EAEC                             		
0088EAEC 4845                        		swap	d5		;d5 - XRead | Free
0088EAEE 1A2E 0005                   		move.b	obj_size+1(a6),d5
0088EAF2 0245 00FF                   		and.w	#$FF,d5		;d5 - XRead | Loop
0088EAF6 4A45                        		tst.w	d5
0088EAF8 6700                        		beq.s	@no_col
0088EAFA                             		
0088EAFA                            @Next_col_r:
0088EAFA 4845                        		swap	d5		;d5 - Loop | Xread
0088EAFC 4A13                        		tst.b	(a3)
0088EAFE 6700                        		beq.s	@No_col_r
0088EB00 382D 0030                   		move.w	lvl_size_x(a5),d4
0088EB04 E94C                        		lsl.w	#4,d4
0088EB06 BA44                          		cmp.w	d4,d5
0088EB08 6C00                           		bge.s	@no_col
0088EB0A                                		
0088EB0A 3805                        		move.w	d5,d4
0088EB0C 0244 FFF0                   		and.w	#$FFF0,d4
0088EB10 4844                        		swap	d4
0088EB12 8084                        		or.l	d4,d0		; RIGHT XXXYYY00
0088EB14 1013                       		move.b	(a3),d0
0088EB16 4E75                        		rts
0088EB18                             		
0088EB18                            @No_col_r:
0088EB18 0645 0008                   		add.w	#8,d5
0088EB1C 3805                        		move.w	d5,d4
0088EB1E E84C                        		lsr.w	#4,d4
0088EB20 264C                        		movea.l	a4,a3
0088EB22 D6C4                        		adda 	d4,a3
0088EB24 4845                        		swap	d5		;d5 - XRead | Loop
0088EB26 51CD FFD2                   		dbf	d5,@Next_col_r
0088EB2A                             		
0088EB2A                            ; ------------------------
0088EB2A                            
0088EB2A                            @no_col:
0088EB2A 4E75                       		rts
0088EB2C                             	
0088EB2C                            ; ************************
0088EB2C                            ; Find Center collision
0088EB2C                            ;
0088EB2C                            ; Input:
0088EB2C                            ; a6 - Object
0088EB2C                            ; a5 - RAM_LvlPlanes
0088EB2C                            ; a4 - Collision data
0088EB2C                            ; 
0088EB2C                            ; Output:
0088EB2C                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
0088EB2C                            ; 
0088EB2C                            ; Uses:
0088EB2C                            ; a3 | d4-d5
0088EB2C                            ; ************************
0088EB2C                            
0088EB2C                            ; TODO: no agarra los X/Y
0088EB2C                            
0088EB2C                            object_FindPrz_Center:
0088EB2C 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EB32 286D 0018                    		movea.l	lvl_prizes(a5),a4
0088EB36 6000                         		bra.s	objSearchCol_Center
0088EB38                              		
0088EB38                            object_FindCol_Center:
0088EB38 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EB3E 286D 0014                    		movea.l	lvl_collision(a5),a4
0088EB42                            
0088EB42                            objSearchCol_Center:
0088EB42 7000                       		moveq	#0,d0
0088EB44 7800                       		moveq	#0,d4
0088EB46 7A00                       		moveq	#0,d5
0088EB48 382E 000C                   		move.w	obj_y(a6),d4
0088EB4C 4A44                        		tst.w	d4
0088EB4E 6B00 0000                   		bmi	@no_col
0088EB52 3A2D 0032                   		move.w	lvl_size_y(a5),d5
0088EB56 E94D                        		lsl.w	#4,d5
0088EB58 B845                        		cmp.w	d5,d4
0088EB5A 6C00 0000                   		bge	@no_col
0088EB5E E84C                         		lsr.w	#4,d4
0088EB60 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0088EB64 D8C4                         		adda	d4,a4
0088EB66 0284 0000 0FFF               		and.l	#$FFF,d4
0088EB6C E18C                         		lsl.l	#8,d4
0088EB6E 8084                          		or.l	d4,d0
0088EB70                            
0088EB70                            ; ------------------------
0088EB70                            		
0088EB70 264C                         		movea.l	a4,a3
0088EB72 382E 0008                   		move.w	obj_x(a6),d4
0088EB76 4A44                        		tst.w	d4
0088EB78 6B00                        		bmi.s	@force_on
0088EB7A 3A2D 0030                   		move.w	lvl_size_x(a5),d5
0088EB7E E94D                         		lsl.w	#4,d5
0088EB80 B845                         		cmp.w	d5,d4
0088EB82 6C00                         		bge.s	@force_on
0088EB84 3A04                         		move.w	d4,d5
0088EB86 4845                        		swap	d5
0088EB88 8085                        		or.l	d5,d0			; XXXYYY00
0088EB8A E84C                        		lsr.w	#4,d4
0088EB8C D6C4                        		adda 	d4,a3
0088EB8E                              		
0088EB8E 4A13                       		tst.b	(a3)
0088EB90 6700                       		beq.s	@no_col		
0088EB92 1013                       		move.b	(a3),d0
0088EB94 4E75                       		rts
0088EB96                            @force_on:
0088EB96 7000                       		moveq	#0,d0
0088EB98                            @no_col:
0088EB98 4E75                       		rts
0088EB9A                            		
0088EB9A                            ; ************************
0088EB9A                            ; Sets a object in the floor
0088EB9A                            ; DOWN/UP
0088EB9A                            ; CENTER
0088EB9A                            ; 
0088EB9A                            ; Input:
0088EB9A                            ; d0 - Floor ID
0088EB9A                            ; (Object's current Ypos)
0088EB9A                            ; 
0088EB9A                            ; Output:
0088EB9A                            ; d7 | LONG - Y speed result
0088EB9A                            ; 
0088EB9A                            ; Uses:
0088EB9A                            ; a3-a4 | d3-d4
0088EB9A                            ; ************************
0088EB9A                            
0088EB9A                            object_SetCol_Floor:
0088EB9A 0800 0006                  		btst	#6,d0
0088EB9E 6600 0000                  		bne	@check_special
0088EBA2 0C00 0001                  		cmp.b	#1,d0
0088EBA6 6700 0000                  		beq	@floorsolid
0088EBAA 4A87                          		tst.l	d7
0088EBAC 6B00                          		bmi.s	@NoCol
0088EBAE                               		
0088EBAE 222E 000C                     		move.l	obj_y(a6),d1
0088EBB2 2601                          		move.l	d1,d3
0088EBB4 47F9 0088 DE70               		lea	(col_SlopeData),a3
0088EBBA 0240 003F                    		and.w	#$3F,d0
0088EBBE 3200                         		move.w	d0,d1
0088EBC0 E949                         		lsl.w	#4,d1
0088EBC2 D6C1                         		adda	d1,a3
0088EBC4 202E 0008                   		move.l	obj_x(a6),d0
0088EBC8 4840                        		swap	d0
0088EBCA 0240 000F                   		and.w	#$F,d0
0088EBCE 1033 0000                   		move.b	(a3,d0.w),d0
0088EBD2 0280 0000 000F                 		and.l	#$F,d0
0088EBD8 0281 FFF0 0000                 		and.l	#$FFF00000,d1
0088EBDE 4840                         		swap	d0
0088EBE0 D280                        		add.l	d0,d1
0088EBE2                             		
0088EBE2                            ; 		btst	#bitobj_air,obj_status(a6)
0088EBE2                            ; 		beq.s	@dontchk
0088EBE2 D687                         		add.l	d7,d3
0088EBE4 B681                         		cmp.l	d1,d3
0088EBE6 6D00                         		blt.s	@NoCol
0088EBE8                            @dontchk:
0088EBE8 2D41 000C                    		move.l	d1,obj_y(a6)	; TODO: REPARAME
0088EBEC                              		
0088EBEC 08AE 0002 001E                		bclr	#bitobj_air,obj_status(a6)
0088EBF2 4287                        		clr.l	d7
0088EBF4 4A86                            		tst.l	d6
0088EBF6 6700                            		beq.s	@NoCol
0088EBF8 2E3C 0001 0000                 		move.l	#$10000,d7
0088EBFE                            @NoCol:
0088EBFE 4E75                       		rts
0088EC00                            
0088EC00                            @floorsolid:
0088EC00 08AE 0002 001E             		bclr	#bitobj_air,obj_status(a6)	
0088EC06 02AE FFF8 0000 000C        		and.l	#$FFF80000,obj_y(a6)		; TODO: REPARAME
0088EC0E 4287                       		clr.l	d7
0088EC10 4E75                       		rts
0088EC12                            
0088EC12                            ; ---------------------
0088EC12                            ; Check $80+ collision
0088EC12                            ; Floor
0088EC12                            ; ---------------------
0088EC12                            
0088EC12                            @check_special:
0088EC12 4E75                       		rts
0088EC14                            		
0088EC14                            ; ************************
0088EC14                            ; Sets collision on the object
0088EC14                            ; Ceiling
0088EC14                            ; 
0088EC14                            ; Input:
0088EC14                            ; d0 - Floor ID
0088EC14                            ; 
0088EC14                            ; Output:
0088EC14                            ; d7 | LONG - Y speed result
0088EC14                            ; 
0088EC14                            ; Uses:
0088EC14                            ; a3-a4 | d3-d4
0088EC14                            ; ************************
0088EC14                            
0088EC14                            object_SetCol_Ceiling:
0088EC14 0800 0006                  		btst	#6,d0
0088EC18 6600 0000                  		bne	@floorsolid
0088EC1C 0C00 0001                  		cmp.b	#1,d0
0088EC20 6700 0000                  		beq	@floorsolid
0088EC24                            ;    		tst.l	d7
0088EC24                            ;    		bpl.s	@NoCol
0088EC24                               		
0088EC24                            ;    		move.l	obj_y(a6),d1
0088EC24                            ;    		move.l	d1,d3
0088EC24                            ;   		lea	(col_SlopeData),a3
0088EC24                            ;   		and.w	#$3F,d0
0088EC24                            ;   		move.w	d0,d1
0088EC24                            ;   		lsl.w	#4,d1
0088EC24                            ;   		adda	d1,a3
0088EC24                            ;  		move.l	obj_x(a6),d0
0088EC24                            ;  		swap	d0
0088EC24                            ;  		and.w	#$F,d0
0088EC24                            ;  		move.b	(a3,d0.w),d0
0088EC24                            ;     		and.l	#$F,d0
0088EC24                            ;     		and.l	#$FFF00000,d1
0088EC24                            ;   		swap	d0
0088EC24                            ;  		add.l	d0,d1
0088EC24                            ;  		
0088EC24                            ; ; 		btst	#bitobj_air,obj_status(a6)
0088EC24                            ; ; 		beq.s	@dontchk
0088EC24                            ;   		add.l	d7,d3
0088EC24                            ;   		cmp.l	d1,d3
0088EC24                            ;   		blt.s	@NoCol
0088EC24                            ; @dontchk:
0088EC24                            ;   		move.l	d1,obj_y(a6)	; TODO: REPARAME
0088EC24                            ;   		
0088EC24                            ;    		bclr	#bitobj_air,obj_status(a6)
0088EC24                            ;  		clr.l	d7
0088EC24                            ;      		tst.l	d6
0088EC24                            ;      		beq.s	@NoCol
0088EC24                            ;     		move.l	#$10000,d7
0088EC24                            ; @NoCol:
0088EC24                            ; 		rts
0088EC24                            ; 
0088EC24                            @floorsolid:
0088EC24 4287                       		clr.l	d7
0088EC26 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
0088EC2C 02AE FFF8 0000 000C        		and.l	#$FFF80000,obj_y(a6)
0088EC34 7800                       		moveq	#0,d4
0088EC36 182E 0007                  		move.b	obj_size+3(a6),d4
0088EC3A E74C                       		lsl.w	#3,d4
0088EC3C D96E 000C                  		add.w	d4,obj_y(a6)
0088EC40                            @NoCol:
0088EC40 4E75                       		rts
0088EC42                            		
0088EC42                            ; ************************
0088EC42                            ; Sets a object in the wall
0088EC42                            ; LEFT/RIGHT
0088EC42                            ; CENTER
0088EC42                            ; 
0088EC42                            ; Input:
0088EC42                            ; d0 - Floor ID
0088EC42                            ; (Object's current Ypos)
0088EC42                            ; 
0088EC42                            ; Output:
0088EC42                            ; d7 | LONG - Y speed result
0088EC42                            ; 
0088EC42                            ; Uses:
0088EC42                            ; a3-a4 | d3-d4
0088EC42                            ; ************************
0088EC42                            
0088EC42                            ; TODO: para que mierdas era esto
0088EC42                            
0088EC42                            object_SetCol_Wall:
0088EC42                            ; 		move.w	obj_y(a6),d1		;TODO: REPARAME
0088EC42                            ; 		sub.w	#1,d1
0088EC42                            ; 		move.w	d1,d3
0088EC42                            ; 		and.w	#$FFF0,d1 		
0088EC42                            ;      		lea	(col_SlopeData),a3
0088EC42                            ;       		and.w	#$FF,d0
0088EC42                            ;      		lsl.w	#4,d0
0088EC42                            ;       		adda	d0,a3
0088EC42                            ;       		move.w	obj_x(a6),d0
0088EC42                            ;       		and.w	#$F,d0
0088EC42                            ;       		move.b	(a3,d0.w),d2
0088EC42                            ;       		and.w	#$F,d2
0088EC42                            ;       		add.w	d2,d1
0088EC42                            ;       		
0088EC42                            ;  		btst	#bitobj_air,obj_status(a6)
0088EC42                            ; 		beq.s	@dontchkLR
0088EC42                            ;   		cmp.w	d1,d3
0088EC42                            ;   		blt.s	@NoCol_LR
0088EC42                            ; @dontchkLR:
0088EC42                            ;    		move.w	d1,obj_y(a6)		;TODO: REPARAME
0088EC42                            
0088EC42                            @NoCol_LR:
0088EC42 4E75                       		rts
0088EC44                            	
0088EC44                            ; **********************************************
0088EC44                            ; Object interaction
0088EC44                            ; **********************************************
0088EC44                            
0088EC44                            ; ----------------------------------
0088EC44                            ; objTouch
0088EC44                            ; 
0088EC44                            ; touch/hit detection
0088EC44                            ; 
0088EC44                            ; Uses: d0-d4
0088EC44                            ; ----------------------------------
0088EC44                            
0088EC44                            objTouch:
0088EC44 6100 0000                  		bsr	objTouch_Top
0088EC48 3600                       		move.w	d0,d3
0088EC4A 6100 0000                  		bsr	objTouch_Bottom
0088EC4E 8640                       		or.w	d0,d3
0088EC50 6100 0000                  		bsr	objTouch_Sides
0088EC54 8640                       		or.w	d0,d3
0088EC56 4840                       		swap	d0
0088EC58 8640                       		or.w	d0,d3
0088EC5A 3003                       		move.w	d3,d0
0088EC5C 4E75                       		rts
0088EC5E                            		
0088EC5E                            ; ---------------------------
0088EC5E                            ; Seperate touches
0088EC5E                            ; ---------------------------
0088EC5E                            
0088EC5E                            objTouch_Top:
0088EC5E 4200                       		clr.b	d0
0088EC60 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088EC66 780F                       		moveq	#16-1,d4
0088EC68                            @check_again:
0088EC68 4AAC 0000                  		tst.l	obj_code(a4)
0088EC6C 6700 0000                  		beq	@notfound
0088EC70 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
0088EC76 6700                       		beq.s	@notfound
0088EC78                            		
0088EC78                            ;  		tst.l	obj_y_spd(a4)
0088EC78                            ;  		bmi.s	@lowrY
0088EC78                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
0088EC78                            ;  		bne.s	@lowrY
0088EC78 7200                       		moveq	#0,d1
0088EC7A                            		
0088EC7A                            		; Check LEFT
0088EC7A 7400                          		moveq	#0,d2
0088EC7C 322E 0008                     		move.w	obj_x(a6),d1
0088EC80 142E 0004                     		move.b	obj_size(a6),d2
0088EC84 E74A                          		lsl.w	#3,d2
0088EC86 9242                          		sub.w	d2,d1
0088EC88 342C 0008                     		move.w	obj_x(a4),d2
0088EC8C 4841                           		swap	d1
0088EC8E 122C 0005                     		move.b	obj_size+1(a4),d1
0088EC92 E749                          		lsl.w	#3,d1
0088EC94 D441                             		add.w	d1,d2
0088EC96 4841                           		swap	d1
0088EC98 B242                          		cmp.w	d2,d1
0088EC9A 6C00                          		bge.s	@lowrY
0088EC9C                               		; Check RIGHT
0088EC9C 7400                          		moveq	#0,d2
0088EC9E 322E 0008                     		move.w	obj_x(a6),d1
0088ECA2 142E 0005                     		move.b	obj_size+1(a6),d2
0088ECA6 E74A                          		lsl.w	#3,d2
0088ECA8 D242                          		add.w	d2,d1
0088ECAA 342C 0008                     		move.w	obj_x(a4),d2
0088ECAE 4841                           		swap	d1
0088ECB0 122C 0004                     		move.b	obj_size(a4),d1
0088ECB4 E749                          		lsl.w	#3,d1
0088ECB6 9441                       		sub.w	d1,d2
0088ECB8 4841                           		swap	d1
0088ECBA B242                           		cmp.w	d2,d1
0088ECBC 6F00                           		ble.s	@lowrY
0088ECBE                            
0088ECBE                                		; Check Top, and $C pixels more
0088ECBE 322E 000C                     		move.w	obj_y(a6),d1
0088ECC2 7400                          		moveq	#0,d2
0088ECC4 142E 0006                     		move.b	obj_size+2(a6),d2
0088ECC8 E74A                          		lsl.w	#3,d2
0088ECCA 9242                          		sub.w	d2,d1
0088ECCC 4841                          		swap	d1
0088ECCE 342C 000C                     		move.w	obj_y(a4),d2
0088ECD2 122C 0007                     		move.b	obj_size+3(a4),d1
0088ECD6 E749                          		lsl.w	#3,d1
0088ECD8 D441                          		add.w	d1,d2
0088ECDA 4841                          		swap	d1
0088ECDC B242                          		cmp.w	d2,d1
0088ECDE 6E00                          		bgt.s	@lowrY
0088ECE0 0641 000C                       		add.w	#$C,d1
0088ECE4 B242                           		cmp.w	d2,d1
0088ECE6 6D00                           		blt.s	@lowrY
0088ECE8                                		
0088ECE8 103C 0001                     		move.b	#1,d0
0088ECEC                            @lowrY:
0088ECEC                            
0088ECEC 4A00                       		tst.b	d0
0088ECEE 6600 0000                  		bne	@wecanhurt
0088ECF2                            @notfound:
0088ECF2 D8FC 0064                  		adda	#sizeof_obj,a4
0088ECF6 51CC FF70                  		dbf	d4,@check_again
0088ECFA                            @wecanhurt:
0088ECFA 4E75                          		rts
0088ECFC                               		
0088ECFC                            ; ----------------------------------
0088ECFC                            
0088ECFC                            objTouch_Bottom:
0088ECFC 4200                       		clr.b	d0
0088ECFE 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088ED04 780F                       		moveq	#16-1,d4
0088ED06                            @check_again:
0088ED06 4AAC 0000                  		tst.l	obj_code(a4)
0088ED0A 6700 0000                  		beq	@notfound
0088ED0E 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
0088ED14 6700 0000                  		beq	@notfound
0088ED18                            		
0088ED18                            ;  		tst.l	obj_y_spd(a4)
0088ED18                            ;  		bmi.s	@lowrY
0088ED18                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
0088ED18                            ;  		bne.s	@lowrY
0088ED18 7200                       		moveq	#0,d1
0088ED1A                            		
0088ED1A                            		; Check LEFT
0088ED1A 7400                          		moveq	#0,d2
0088ED1C 322E 0008                     		move.w	obj_x(a6),d1
0088ED20 142E 0004                     		move.b	obj_size(a6),d2
0088ED24 E74A                          		lsl.w	#3,d2
0088ED26 9242                          		sub.w	d2,d1
0088ED28 342C 0008                     		move.w	obj_x(a4),d2
0088ED2C 4841                           		swap	d1
0088ED2E 122C 0005                     		move.b	obj_size+1(a4),d1
0088ED32 E749                          		lsl.w	#3,d1
0088ED34 D441                             		add.w	d1,d2
0088ED36 4841                           		swap	d1
0088ED38 B242                          		cmp.w	d2,d1
0088ED3A 6C00                          		bge.s	@lowrY
0088ED3C                               		; Check RIGHT
0088ED3C 7400                          		moveq	#0,d2
0088ED3E 322E 0008                     		move.w	obj_x(a6),d1
0088ED42 142E 0005                     		move.b	obj_size+1(a6),d2
0088ED46 E74A                          		lsl.w	#3,d2
0088ED48 D242                          		add.w	d2,d1
0088ED4A 342C 0008                     		move.w	obj_x(a4),d2
0088ED4E 4841                           		swap	d1
0088ED50 122C 0004                     		move.b	obj_size(a4),d1
0088ED54 E749                          		lsl.w	#3,d1
0088ED56 9441                       		sub.w	d1,d2
0088ED58 4841                           		swap	d1
0088ED5A B242                           		cmp.w	d2,d1
0088ED5C 6F00                           		ble.s	@lowrY
0088ED5E                            
0088ED5E                                		; Check Top, and $C pixels more
0088ED5E 322E 000C                     		move.w	obj_y(a6),d1
0088ED62 7400                          		moveq	#0,d2
0088ED64 142E 0007                     		move.b	obj_size+3(a6),d2
0088ED68 E74A                          		lsl.w	#3,d2
0088ED6A D242                          		add.w	d2,d1
0088ED6C 4841                          		swap	d1
0088ED6E 342C 000C                     		move.w	obj_y(a4),d2
0088ED72 122C 0006                     		move.b	obj_size+2(a4),d1
0088ED76 E749                          		lsl.w	#3,d1
0088ED78 9441                          		sub.w	d1,d2
0088ED7A 4841                          		swap	d1
0088ED7C B441                          		cmp.w	d1,d2
0088ED7E 6E00                          		bgt.s	@lowrY
0088ED80 0441 000C                       		sub.w	#$C,d1
0088ED84 B441                           		cmp.w	d1,d2
0088ED86 6D00                           		blt.s	@lowrY
0088ED88                                		
0088ED88 103C 0001                     		move.b	#1,d0
0088ED8C                            @lowrY:
0088ED8C                            
0088ED8C 4A00                       		tst.b	d0
0088ED8E 6600 0000                  		bne	@wecanhurt
0088ED92                            @notfound:
0088ED92 D8FC 0064                  		adda	#sizeof_obj,a4
0088ED96 51CC FF6E                  		dbf	d4,@check_again
0088ED9A                            @wecanhurt:
0088ED9A 4E75                          		rts
0088ED9C                            
0088ED9C                            ; ----------------------------------
0088ED9C                            
0088ED9C                            objTouch_Sides:
0088ED9C 7000                       		moveq	#0,d0
0088ED9E 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088EDA4 780F                       		moveq	#16-1,d4
0088EDA6                            @check_again:
0088EDA6 4AAC 0000                  		tst.l	obj_code(a4)
0088EDAA 6700 0000                  		beq	@notfound
0088EDAE 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
0088EDB4 6700 0000                  		beq	@notfound
0088EDB8                            		
0088EDB8                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
0088EDB8                            ;  		bne	@lowrY
0088EDB8                             		
0088EDB8 7200                            		moveq	#0,d1
0088EDBA 7400                          		moveq	#0,d2
0088EDBC 322E 000C                      		move.w	obj_y(a6),d1
0088EDC0 7400                           		moveq	#0,d2
0088EDC2 142E 0006                      		move.b	obj_size+2(a6),d2
0088EDC6 E74A                           		lsl.w	#3,d2
0088EDC8 9242                           		sub.w	d2,d1
0088EDCA 4841                           		swap	d1
0088EDCC 342C 000C                      		move.w	obj_y(a4),d2
0088EDD0 122C 0007                      		move.b	obj_size+3(a4),d1
0088EDD4 E749                           		lsl.w	#3,d1
0088EDD6 D441                           		add.w	d1,d2
0088EDD8 4841                           		swap	d1
0088EDDA B242                           		cmp.w	d2,d1
0088EDDC 6E00 0000                      		bgt	@lowrY
0088EDE0                                		
0088EDE0 322E 000C                      		move.w	obj_y(a6),d1
0088EDE4 7400                           		moveq	#0,d2
0088EDE6 142E 0007                      		move.b	obj_size+3(a6),d2
0088EDEA E74A                           		lsl.w	#3,d2
0088EDEC D242                           		add.w	d2,d1
0088EDEE 4841                           		swap	d1
0088EDF0 342C 000C                      		move.w	obj_y(a4),d2
0088EDF4 122C 0006                      		move.b	obj_size+2(a4),d1
0088EDF8 E749                           		lsl.w	#3,d1
0088EDFA 9441                           		sub.w	d1,d2
0088EDFC 4841                           		swap	d1
0088EDFE B242                           		cmp.w	d2,d1
0088EE00 6D00 0000                      		blt	@lowrY
0088EE04                            
0088EE04                                 		; X Sides check
0088EE04 7200                            		moveq	#0,d1
0088EE06 7400                          		moveq	#0,d2
0088EE08 322E 0008                     		move.w	obj_x(a6),d1
0088EE0C 142E 0005                     		move.b	obj_size+1(a6),d2
0088EE10 E74A                          		lsl.w	#3,d2
0088EE12 D242                          		add.w	d2,d1
0088EE14 242C 0008                     		move.l	obj_x(a4),d2
0088EE18 D4AC 0010                     		add.l	obj_x_spd(a4),d2
0088EE1C 4842                          		swap	d2
0088EE1E 4841                           		swap	d1
0088EE20 122C 0004                      		move.b	obj_size(a4),d1
0088EE24 E749                            		lsl.w	#3,d1
0088EE26 9441                            		sub.w	d1,d2
0088EE28 4841                            		swap	d1
0088EE2A B441                           		cmp.w	d1,d2
0088EE2C 6E00                           		bgt.s	@lowrY_L
0088EE2E 0441 0008                      		sub.w	#8,d1
0088EE32 B441                           		cmp.w	d1,d2
0088EE34 6D00                           		blt.s	@lowrY_L 
0088EE36 303C 0001                      		move.w	#1,d0
0088EE3A                            
0088EE3A                            @lowrY_L:
0088EE3A 4840                            		swap	d0
0088EE3C 7200                            		moveq	#0,d1
0088EE3E 7400                          		moveq	#0,d2
0088EE40 322E 0008                     		move.w	obj_x(a6),d1
0088EE44 142E 0004                     		move.b	obj_size(a6),d2
0088EE48 E74A                          		lsl.w	#3,d2
0088EE4A 9242                          		sub.w	d2,d1
0088EE4C 342C 0008                     		move.w	obj_x(a4),d2
0088EE50 4841                           		swap	d1
0088EE52 122C 0005                      		move.b	obj_size+1(a4),d1
0088EE56 E749                           		lsl.w	#3,d1
0088EE58 D441                           		add.w	d1,d2
0088EE5A 4841                           		swap	d1
0088EE5C B242                          		cmp.w	d2,d1
0088EE5E 6E00                          		bgt.s	@lowrY
0088EE60 0641 0008                     		add.w	#8,d1
0088EE64 B242                          		cmp.w	d2,d1
0088EE66 6D00                          		blt.s	@lowrY 
0088EE68 303C 0001                     		move.w	#1,d0
0088EE6C                            @lowrY:
0088EE6C                            		
0088EE6C 4A80                       		tst.l	d0
0088EE6E 6600 0000                  		bne	@wecanhurt
0088EE72                            @notfound:
0088EE72 D8FC 0064                  		adda	#sizeof_obj,a4
0088EE76 51CC FF2E                  		dbf	d4,@check_again
0088EE7A                            @wecanhurt:
0088EE7A 4E75                          		rts
0088EE7C                               			
0088EE7C                            ; ----------------------------------
0088EE7C                            
0088EE7C                            objPlyrSetFloor:
0088EE7C 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088EE82 4AAC 0014                  		tst.l	obj_y_spd(a4)
0088EE86 6B00                       		bmi.s	@return
0088EE88 082C 001C 0000             		btst	#bitPlyrClimb,plyr_status(a4)
0088EE8E 6600                       		bne.s	@return
0088EE90                            ; 		lea	(RAM_LvlPlanes),a5
0088EE90                            		
0088EE90 42AC 0014                     		clr.l	obj_y_spd(a4)
0088EE94 302E 000C                   		move.w	obj_y(a6),d0
0088EE98 3200                        		move.w	d0,d1
0088EE9A 7400                          		moveq	#0,d2
0088EE9C 142E 0006                     		move.b	obj_size+2(a6),d2
0088EEA0 E74A                          		lsl.w	#3,d2
0088EEA2 9042                          		sub.w	d2,d0
0088EEA4 7400                          		moveq	#0,d2
0088EEA6 142C 0007                     		move.b	obj_size+3(a4),d2
0088EEAA E74A                          		lsl.w	#3,d2
0088EEAC 9042                          		sub.w	d2,d0
0088EEAE                            ;    		cmp.w	d0,d1
0088EEAE                            ;    		blt.s	@lowrY
0088EEAE 297C 0001 0000 0014           		move.l	#$10000,obj_y_spd(a4)
0088EEB6                            ; @lowrY:
0088EEB6 3940 000C                     		move.w	d0,obj_y(a4)
0088EEBA                               		
0088EEBA                            ; 		bsr	object_PlyrFlgs_floor
0088EEBA 08AC 0002 001E                  		bclr	#bitobj_air,obj_status(a4)
0088EEC0 08EC 0004 0022                  		bset	#bitcol_obj,obj_col(a4)
0088EEC6 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
0088EECE 6600 0000                  		bne	@return
0088EED2 397C 0000 0000                 		move.w	#varJumpTimer,plyr_jumptmr(a4)
0088EED8                            @return:
0088EED8 4E75                          		rts
0088EEDA                              	
0088EEDA                            ; ----------------------------------
0088EEDA                            
0088EEDA                            objPlyrSetCeiling:
0088EEDA 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088EEE0 082C 001C 0000             		btst	#bitPlyrClimb,plyr_status(a4)
0088EEE6 6600                       		bne.s	@return
0088EEE8 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EEEE 42AC 0014                  		clr.l	obj_y_spd(a4)
0088EEF2 08EC 0002 001E                  		bset	#bitobj_air,obj_status(a4)
0088EEF8                            ;      		bset	#bitcol_obju,obj_col(a4)
0088EEF8                                 		
0088EEF8                            ;      		bset	#bitcol_floor,obj_col(a4)
0088EEF8                            ;  		move.w	obj_y(a6),d0
0088EEF8                            ;    		moveq	#0,d2
0088EEF8                            ;    		move.b	obj_size+2(a6),d2
0088EEF8                            ;    		lsl.w	#3,d2
0088EEF8                            ;    		sub.w	d2,d0
0088EEF8                            ;    		move.w	d0,obj_y(a4)
0088EEF8                            @return:
0088EEF8 4E75                          		rts
0088EEFA                               		
0088EEFA                            ; ----------------------------------
0088EEFA                            
0088EEFA                            objPlyrSetWall_R:
0088EEFA 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088EF00 082C 001C 0000             		btst	#bitPlyrClimb,plyr_status(a4)
0088EF06 6600                       		bne.s	objPlyrColReturn
0088EF08 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EF0E 42AC 0010                  		clr.l	obj_x_spd(a4)
0088EF12 08EC 0002 0022                  		bset	#bitcol_wall_r,obj_col(a4)
0088EF18 302E 0008                   		move.w	obj_x(a6),d0
0088EF1C 7400                          		moveq	#0,d2
0088EF1E 142E 0004                     		move.b	obj_size(a6),d2
0088EF22 E74A                          		lsl.w	#3,d2
0088EF24 9042                          		sub.w	d2,d0
0088EF26 7400                          		moveq	#0,d2
0088EF28 142C 0005                     		move.b	obj_size+1(a4),d2
0088EF2C E74A                          		lsl.w	#3,d2
0088EF2E 9042                          		sub.w	d2,d0
0088EF30 6000                          		bra.s	objPlyrSetWLX
0088EF32                            		
0088EF32                            ; ----------------------------------
0088EF32                            
0088EF32                            objPlyrSetWall_L:
0088EF32 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088EF38 082C 001C 0000             		btst	#bitPlyrClimb,plyr_status(a4)
0088EF3E 6600                       		bne.s	objPlyrColReturn
0088EF40 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EF46 42AC 0010                  		clr.l	obj_x_spd(a4)
0088EF4A 08EC 0003 0022                  		bset	#bitcol_wall_l,obj_col(a4)
0088EF50 302E 0008                   		move.w	obj_x(a6),d0
0088EF54                            ;  		add.w	#1,d0
0088EF54 7400                          		moveq	#0,d2
0088EF56 142E 0005                     		move.b	obj_size+1(a6),d2
0088EF5A E74A                          		lsl.w	#3,d2
0088EF5C D042                          		add.w	d2,d0
0088EF5E                               		
0088EF5E 7400                          		moveq	#0,d2
0088EF60 142C 0004                     		move.b	obj_size(a4),d2
0088EF64 E74A                          		lsl.w	#3,d2
0088EF66 D042                          		add.w	d2,d0
0088EF68                            objPlyrSetWLX:
0088EF68 4A40                          		tst.w	d0
0088EF6A 6A00                          		bpl.s	@plus_x
0088EF6C 4240                          		clr.w	d0
0088EF6E                            @plus_x:
0088EF6E 342D 0030                  		move.w	lvl_size_x(a5),d2
0088EF72 E94A                       		lsl.w	#4,d2
0088EF74 B042                       		cmp.w	d2,d0
0088EF76 6D00                       		blt.s	@plusr_x
0088EF78 3002                       		move.w	d2,d0
0088EF7A                            @plusr_x:
0088EF7A 3940 0008                     		move.w	d0,obj_x(a4)
0088EF7E                            objPlyrColReturn:
0088EF7E 4E75                          		rts
0088EF80                               		
0088EF80                            ; ----------------------------------
0088EF80                            ; What to do if object touched the
0088EF80                            ; player
0088EF80                            ; 
0088EF80                            ; Input:
0088EF80                            ; a4 - Player object
0088EF80                            ; 
0088EF80                            ; Uses:
0088EF80                            ; d4
0088EF80                            ; 
0088EF80                            ; Returns:
0088EF80                            ; beq.s Nothing
0088EF80                            ; bne.s Touched
0088EF80                            ; ----------------------------------
0088EF80                            
0088EF80                            objPlyrHurtKill:
0088EF80 7800                       		moveq	#0,d4
0088EF82 200C                       		move.l	a4,d0
0088EF84 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0	; Player?
0088EF8A 6600                       		bne.s	@settrue
0088EF8C 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
0088EF92 0C2C 0000 001D             		cmp.b	#varPlyrMdDead,obj_index(a4)
0088EF98 6700                       		beq.s	@return
0088EF9A 08EC 0003 001E             		bset	#bitobj_hurt,obj_status(a4)
0088EFA0 0C2C 0000 001A             		cmp.b	#varPlyAniJump,obj_anim_id(a4)
0088EFA6 6700                       		beq.s	@stomppikudo
0088EFA8 082C 0002 001E              		btst	#bitobj_air,obj_status(a4)
0088EFAE 6600                        		bne.s	@stomppikudo
0088EFB0 6000                       		bra.s	@return
0088EFB2                            		
0088EFB2                            @stomppikudo:
0088EFB2 082C 0004 0022             		btst	#bitcol_obj,obj_col(a4)
0088EFB8 66FE                       		bne.s	*;@return
0088EFBA 4AAC 0014                   		tst.l	obj_y_spd(a4)
0088EFBE 6B00                       		bmi.s	@return
0088EFC0 6700                       		beq.s	@return	
0088EFC2                            @hurtanywy:
0088EFC2 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
0088EFC8                            @settrue:
0088EFC8 7801                       		moveq	#1,d4
0088EFCA                            @return:
0088EFCA 4A44                       		tst.w	d4
0088EFCC 4E75                       		rts
0088EFCE                            		
0088EFCE                            ; Object_ChkPlyrHit:
0088EFCE                            ; 		lea	(RAM_ObjBuffer),a4
0088EFCE                            ; 		moveq	#0,d5
0088EFCE                            ; 		cmp.b	#varPlyAniJump,obj_anim_id(a4)
0088EFCE                            ; 		bne.s	@objhit
0088EFCE                            ; 		moveq	#-1,d5
0088EFCE                            ; @objhit:
0088EFCE                            ; 		tst.w	d5
0088EFCE                            ; 		rts
0088EFCE                            
0088EFCE                            ; ----------------------------------
0088EFCE                            ; Prize ceiling action
0088EFCE                            ; 
0088EFCE                            ; Output:
0088EFCE                            ; d4 - Collision out
0088EFCE                            ; ----------------------------------
0088EFCE                            
0088EFCE                            Object_PrzActionCeil:
0088EFCE 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088EFD4 7A00                       		moveq	#0,d5
0088EFD6 1A00                       		move.b	d0,d5
0088EFD8 0805 0007                  		btst	#7,d5
0088EFDC 6600                       		bne.s	@its_hidden
0088EFDE DA45                       		add.w	d5,d5
0088EFE0 3C3B 5000                  		move.w	@block_list(pc,d5.w),d6
0088EFE4 4EFB 6000                  		jmp	@block_list(pc,d6.w)
0088EFE8                            		
0088EFE8                            ; --------------------------
0088EFE8                            ; Reveral hidden block
0088EFE8                            ; --------------------------
0088EFE8                            
0088EFE8                            @its_hidden:
0088EFE8 6100 0000                   		bsr	Prize_Locate
0088EFEC 0200 007F                   		and.b	#$7F,d0
0088EFF0 1680                        		move.b	d0,(a3)
0088EFF2                             		
0088EFF2                            ;  		bsr	Level_HidePrize
0088EFF2 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
0088EFF8 264C                       		movea.l	a4,a3
0088EFFA 323C 0007                  		move 	#8-1,d1
0088EFFE                            @chksame2:
0088EFFE B0AB 0024                  		cmp.l	obj_ram(a3),d0
0088F002 6700 0000                  		beq	@solidblock
0088F006 D6FC 0064                  		adda 	#sizeof_obj,a3
0088F00A 51C9 FFF2                  		dbf	d1,@chksame2	
0088F00E                            
0088F00E 323C 0003                  		move 	#4-1,d1
0088F012                            @next_obj2:
0088F012 4AAC 0000                  		tst.l	obj_code(a4)
0088F016 6700                       		beq.s	@free2
0088F018 D8FC 0064                  		adda	#sizeof_obj,a4
0088F01C 51C9 FFF4                  		dbf	d1,@next_obj2
0088F020 6000                       		bra.s	@ranout2
0088F022                            @free2:
0088F022 6100 0000                   		bsr	blkobj_setcoords
0088F026 197C 0001 001F             		move.b	#1,obj_subid(a4)
0088F02C 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
0088F034 2940 0024                  		move.l	d0,obj_ram(a4)
0088F038                            		
0088F038 203C 0000 0000               		move.l	#SndSfx_BONK,d0
0088F03E 323C 0003                    		move.w 	#3,d1
0088F042 7401                         		moveq	#1,d2
0088F044 6100 A93C                    		bsr	Audio_Track_play
0088F048                            @ranout2:
0088F048                            ; 		moveq	#0,d4
0088F048 4E75                        		rts
0088F04A                             		
0088F04A                            ; ----------------------------------
0088F04A                            
0088F04A                            @block_list:
0088F04A 0000                       		dc.w 0
0088F04C 0000                       		dc.w @break_block-@block_list
0088F04E 0000                       		dc.w @bump_1coin-@block_list
0088F050 0000                       		dc.w @bump_10coin-@block_list
0088F052 0000                       		dc.w @break_block-@block_list
0088F054 0000                       		dc.w @break_block-@block_list
0088F056 0000                       		dc.w @break_block-@block_list
0088F058 0000                       		dc.w @bump_1up-@block_list
0088F05A 0000                       		dc.w @bump_1coin-@block_list
0088F05C 0000                       		dc.w @bump_10coin-@block_list
0088F05E 0000                       		dc.w @bump_1up-@block_list
0088F060 0000                       		dc.w @bump_block-@block_list
0088F062 0000                       		dc.w @bump_block-@block_list
0088F064 0000                       		dc.w @bump_block-@block_list
0088F066 0000                       		dc.w @bump_block-@block_list
0088F068 0000                       		dc.w @bump_block-@block_list
0088F06A                            		
0088F06A 0000                       		dc.w @break_block-@block_list	
0088F06C 0000                       		dc.w @break_block-@block_list
0088F06E 0000                       		dc.w @break_block-@block_list
0088F070 0000                       		dc.w @break_block-@block_list
0088F072 0000                       		dc.w @break_block-@block_list
0088F074 0000                       		dc.w @break_block-@block_list
0088F076 0000                       		dc.w @break_block-@block_list
0088F078 0000                       		dc.w @break_block-@block_list
0088F07A 0000                       		dc.w @break_block-@block_list
0088F07C 0000                       		dc.w @break_block-@block_list
0088F07E 0000                       		dc.w @break_block-@block_list
0088F080 0000                       		dc.w @break_block-@block_list
0088F082 0000                       		dc.w @break_block-@block_list
0088F084 0000                       		dc.w @break_block-@block_list
0088F086 0000                       		dc.w @break_block-@block_list	
0088F088 0000                       		dc.w @break_block-@block_list
0088F08A                            		
0088F08A 0000                       		dc.w @trampoline-@block_list	
0088F08C 0000                       		dc.w @break_block-@block_list
0088F08E 0000                       		dc.w @break_block-@block_list
0088F090 0000                       		dc.w @break_block-@block_list
0088F092 0000                       		dc.w @break_block-@block_list
0088F094 0000                       		dc.w @break_block-@block_list
0088F096 0000                       		dc.w @break_block-@block_list
0088F098 0000                       		dc.w @break_block-@block_list
0088F09A 0000                       		dc.w @break_block-@block_list
0088F09C 0000                       		dc.w @break_block-@block_list
0088F09E 0000                       		dc.w @break_block-@block_list
0088F0A0 0000                       		dc.w @break_block-@block_list
0088F0A2 0000                       		dc.w @break_block-@block_list
0088F0A4 0000                       		dc.w @break_block-@block_list
0088F0A6 0000                       		dc.w @break_block-@block_list	
0088F0A8 0000                       		dc.w @break_block-@block_list
0088F0AA                            		
0088F0AA 0000                       		dc.w @break_block-@block_list	
0088F0AC 0000                       		dc.w @break_block-@block_list
0088F0AE 0000                       		dc.w @break_block-@block_list
0088F0B0 0000                       		dc.w @break_block-@block_list
0088F0B2 0000                       		dc.w @break_block-@block_list
0088F0B4 0000                       		dc.w @break_block-@block_list
0088F0B6 0000                       		dc.w @break_block-@block_list
0088F0B8 0000                       		dc.w @break_block-@block_list
0088F0BA 0000                       		dc.w @break_block-@block_list
0088F0BC 0000                       		dc.w @break_block-@block_list
0088F0BE 0000                       		dc.w @break_block-@block_list
0088F0C0 0000                       		dc.w @break_block-@block_list
0088F0C2 0000                       		dc.w @break_block-@block_list
0088F0C4 0000                       		dc.w @break_block-@block_list
0088F0C6 0000                       		dc.w @break_block-@block_list	
0088F0C8 0000                       		dc.w @break_block-@block_list
0088F0CA                            		
0088F0CA 0000                       		dc.w @coin_red-@block_list
0088F0CC 0000                       		dc.w @coin_blue-@block_list
0088F0CE                            		
0088F0CE                            ; ----------------------------------
0088F0CE                            ; Normal breakable block
0088F0CE                            ; ----------------------------------
0088F0CE                            
0088F0CE                            @break_block:
0088F0CE 6100 0000                  		bsr	@chk_breakblk
0088F0D2 6600                       		bne.s	@oops
0088F0D4 6100 0000                   		bsr	Prize_Delete
0088F0D8 6100 0000                   		bsr	blkobj_overwrite
0088F0DC                            		
0088F0DC 6100 0000                  		bsr	blkobj_setcoords
0088F0E0 2940 0024                  		move.l	d0,obj_ram(a4)
0088F0E4 422C 001F                  		clr.b	obj_subid(a4)
0088F0E8 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
0088F0F0                            		
0088F0F0 203C 0000 0000               		move.l	#SndSfx_PUM,d0
0088F0F6 323C 0004                    		move.w 	#4,d1
0088F0FA 7401                         		moveq	#1,d2
0088F0FC 6100 A884                    		bsr	Audio_Track_play
0088F100                            @oops:
0088F100 7801                         		moveq	#1,d4
0088F102 2E3C 0001 0000               		move.l	#$10000,d7
0088F108 4E75                         		rts
0088F10A                            		
0088F10A                            ; ----------------------------------
0088F10A                            ; BUMP block
0088F10A                            ; ----------------------------------
0088F10A                            
0088F10A                            @bump_1coin:
0088F10A 7601                       		moveq	#1,d3
0088F10C 6000                       		bra.s	@bump_coinarg
0088F10E                            @bump_10coin:
0088F10E 760A                       		moveq	#10,d3
0088F110 6000                       		bra.s	@bump_coinarg
0088F112                            
0088F112                            ; ----------------------------------
0088F112                            
0088F112                            @bump_block:
0088F112 7600                       		moveq	#0,d3
0088F114                            @bump_coinarg:
0088F114 6100 0000                  		bsr	blkobj_chkdupl
0088F118 66E6                       		bne.s	@oops
0088F11A                            
0088F11A 6100 0000                  		bsr	blkobj_overwrite
0088F11E 6100 0000                   		bsr	blkobj_setcoords
0088F122 2400                       		move.l	d0,d2
0088F124 2940 0024                  		move.l	d0,obj_ram(a4)
0088F128 197C 0001 001F             		move.b	#1,obj_subid(a4)
0088F12E 4A03                       		tst.b	d3
0088F130 6700                       		beq.s	@noexsubid
0088F132 197C 0002 001F             		move.b	#2,obj_subid(a4)
0088F138 0C03 000A                  		cmp.b	#10,d3
0088F13C 6600                       		bne.s	@noexsubid
0088F13E 197C 0003 001F             		move.b	#3,obj_subid(a4)
0088F144                            @noexsubid:
0088F144                            
0088F144 0C02 000F                  		cmp.b	#$F,d2
0088F148 6700                       		beq.s	@SolidOnly
0088F14A D779 FFFF DC02             		add.w	d3,(RAM_P1_Coins)
0088F150 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
0088F158 6D00                         		blt.s	@dontadd1up2
0088F15A 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
0088F160 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
0088F168                            @dontadd1up2:
0088F168                            
0088F168                            ; 		add.b	#1,obj_subid(a4)
0088F168                            @SolidOnly:
0088F168 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
0088F170                            
0088F170 203C 0000 0000               		move.l	#SndSfx_BonkCoin,d0
0088F176 7202                         		moveq 	#2,d1
0088F178                              		
0088F178 0C02 000F                  		cmp.b	#$F,d2
0088F17C 6600                       		bne.s	@Alt_Sfx
0088F17E 203C 0000 0000               		move.l	#SndSfx_BONK,d0
0088F184 323C 0003                    		move.w 	#3,d1
0088F188 0C43 000A                    		cmp.w	#10,d3
0088F18C 6600                         		bne.s	@Alt_Sfx
0088F18E 7201                         		moveq	#1,d1
0088F190                            @Alt_Sfx:
0088F190 7401                       		moveq	#1,d2
0088F192 6100 A7EE                    		bsr	Audio_Track_play
0088F196                              		
0088F196 6000                       		bra.s	@solidblock
0088F198                            		
0088F198                            ; ----------------------------------
0088F198                            
0088F198                            @bump_1up:
0088F198 6100 0000                  		bsr	blkobj_chkdupl
0088F19C 6600 FF62                  		bne	@oops
0088F1A0                            
0088F1A0 6100 0000                  		bsr	blkobj_overwrite
0088F1A4 6100 0000                   		bsr	blkobj_setcoords
0088F1A8 2400                       		move.l	d0,d2
0088F1AA 2940 0024                  		move.l	d0,obj_ram(a4)
0088F1AE 197C 0004 001F             		move.b	#4,obj_subid(a4)
0088F1B4 0679 0001 FFFF DC00        		add.w	#1,(RAM_P1_Lives)
0088F1BC 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
0088F1C4                            		
0088F1C4                            		;TODO: 1up sound
0088F1C4                            		
0088F1C4                            @solidblock:
0088F1C4 7801                         		moveq	#1,d4
0088F1C6 2E3C 0001 0000               		move.l	#$10000,d7
0088F1CC 4E75                         		rts
0088F1CE                              		
0088F1CE                            ; ----------------------------------
0088F1CE                            ; A Coin, from top
0088F1CE                            ; ----------------------------------
0088F1CE                            
0088F1CE                            @coin_red:
0088F1CE 7801                       		moveq	#1,d4
0088F1D0 6000                       		bra.s	@setcoin
0088F1D2                            @coin_blue:
0088F1D2 7805                       		moveq	#5,d4
0088F1D4                            @setcoin:
0088F1D4 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
0088F1DA 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
0088F1E2 6D00                         		blt.s	@dontadd1up
0088F1E4 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
0088F1EA 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
0088F1F2                            @dontadd1up:
0088F1F2                              		
0088F1F2 6100 0000                   		bsr	Prize_Delete
0088F1F6 6100 E7CE                  		bsr	Level_HidePrize
0088F1FA                              		
0088F1FA 203C 0000 0000               		move.l	#SndSfx_COIN,d0
0088F200 7202                         		moveq 	#2,d1
0088F202 7401                         		moveq	#1,d2
0088F204 6100 A77C                    		bsr	Audio_Track_play
0088F208 7800                       		moveq	#0,d4		
0088F20A 4E75                       		rts
0088F20C                            		
0088F20C                            ; ----------------------------------
0088F20C                            ; Normal breakable block
0088F20C                            ; ----------------------------------
0088F20C                            
0088F20C                            @trampoline:
0088F20C 6100 0000                  		bsr	goToTrampolineWhy
0088F210                            		
0088F210 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0088F216 2E3C 0008 0000             		move.l	#$80000,d7
0088F21C 4E75                       		rts
0088F21E                            		
0088F21E                            ; -------------------------------
0088F21E                            ; check for active object
0088F21E                            ; d2 - sub-id
0088F21E                            ; -------------------------------
0088F21E                            
0088F21E                            @chk_breakblk:
0088F21E 7401                       		moveq	#1,d2
0088F220 7800                       		moveq	#0,d4
0088F222 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
0088F228 264C                       		movea.l	a4,a3
0088F22A 7207                       		moveq 	#8-1,d1
0088F22C                            @checkhdnbmp:
0088F22C 0CAB 0000 0000 0000        		cmp.l	#obj_prize,obj_code(a3)
0088F234 6600                       		bne.s	@notprz
0088F236 B42B 001F                  		cmp.b	obj_subid(a3),d2
0088F23A 6600                       		bne.s	@notprz
0088F23C 7801                       		moveq	#1,d4
0088F23E 7200                       		moveq	#0,d1
0088F240                            @notprz:
0088F240 D6FC 0064                  		adda 	#sizeof_obj,a3
0088F244 51C9 FFE6                  		dbf	d1,@checkhdnbmp
0088F248 4A44                       		tst.w	d4
0088F24A 4E75                       		rts
0088F24C                            
0088F24C                            ; -------------------------------
0088F24C                            ; check for duplicate object
0088F24C                            ; using obj_ram
0088F24C                            ; -------------------------------
0088F24C                            
0088F24C                            blkobj_chkdupl:
0088F24C 7800                       		moveq	#0,d4
0088F24E 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
0088F254 7207                       		moveq 	#8-1,d1
0088F256                            @chksame234:
0088F256 B0AC 0024                   		cmp.l	obj_ram(a4),d0
0088F25A 6600                        		bne.s	@notequl
0088F25C 0644 0001                   		add.w	#1,d4
0088F260                            @notequl:
0088F260 D8FC 0064                   		adda 	#sizeof_obj,a4
0088F264 51C9 FFF0                   		dbf	d1,@chksame234
0088F268 4A44                        		tst.w	d4
0088F26A 4E75                        		rts
0088F26C                             		
0088F26C                            ; -------------------------------
0088F26C                            ; Overwrite prize object if its
0088F26C                            ; the same
0088F26C                            ; -------------------------------
0088F26C                            
0088F26C                            blkobj_overwrite:
0088F26C 7800                       		moveq	#0,d4
0088F26E 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
0088F274 7207                       		moveq 	#8-1,d1
0088F276                            @chksame23:
0088F276 B0AC 0024                   		cmp.l	obj_ram(a4),d0
0088F27A 6600 0000                   		bne	@notsame
0088F27E                             		
0088F27E 264C                        		movea.l	a4,a3
0088F280 343C 0063                   		move.w	#sizeof_obj-1,d2
0088F284                            @delete:
0088F284 421B                        		clr.b	(a3)+
0088F286 51CA FFFC                   		dbf	d2,@delete
0088F28A                            @notsame:
0088F28A 0CAC 0000 0000 0000        		cmp.l	#obj_prize,obj_code(a4)
0088F292 6600                       		bne.s	@found
0088F294 D8FC 0064                   		adda 	#sizeof_obj,a4
0088F298 51C9 FFDC                   		dbf	d1,@chksame23
0088F29C                            @found:
0088F29C 4E75                       		rts
0088F29E                            		
0088F29E                            ; ----------------------------------
0088F29E                            ; obj_coords
0088F29E                            ; ----------------------------------
0088F29E                            
0088F29E                            blkobj_setcoords:
0088F29E 2800                       		move.l	d0,d4
0088F2A0 E88C                       		lsr.l	#4,d4
0088F2A2 0244 FFF0                  		and.w	#$FFF0,d4
0088F2A6 0644 0008                   		add.w	#8,d4
0088F2AA 3944 000C                   		move.w	d4,obj_y(a4)
0088F2AE E08C                       		lsr.l	#8,d4
0088F2B0 E88C                       		lsr.l	#4,d4
0088F2B2 0244 FFF0                  		and.w	#$FFF0,d4
0088F2B6 0644 0008                   		add.w	#8,d4
0088F2BA 3944 0008                   		move.w	d4,obj_x(a4)
0088F2BE                             		
0088F2BE 206D 0008                  		movea.l	lvl_przblocks(a5),a0
0088F2C2 3800                       		move.w	d0,d4
0088F2C4 0244 00FF                  		and.w	#$FF,d4
0088F2C8 E74C                       		lsl.w	#3,d4
0088F2CA 3830 4000                  		move.w	(a0,d4.w),d4
0088F2CE 3944 0028                  		move.w	d4,obj_ram+4(a4)
0088F2D2 4E75                        		rts
0088F2D4                             	
0088F2D4                            goToTrampolineWhy:
0088F2D4 6100 FF76                  		bsr	blkobj_chkdupl
0088F2D8 6600 0000                  		bne	@oopstr
0088F2DC                            
0088F2DC 6100 FF8E                  		bsr	blkobj_overwrite
0088F2E0 6100 FFBC                   		bsr	blkobj_setcoords
0088F2E4 2940 0024                  		move.l	d0,obj_ram(a4)
0088F2E8 197C 0005 001F             		move.b	#5,obj_subid(a4)
0088F2EE 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
0088F2F6 6100 E6CE                  		bsr	Level_HidePrize
0088F2FA                            @oopstr:
0088F2FA 7801                       		moveq	#1,d4
0088F2FC 4E75                       		rts
0088F2FE                            		
0088F2FE                            ; ----------------------------------
0088F2FE                            ; block subs
0088F2FE                            ; 
0088F2FE                            ; d0 - XXXYYYID
0088F2FE                            ; a5 - RAM_LvlPlanes
0088F2FE                            ; ----------------------------------
0088F2FE                            
0088F2FE                            Prize_Locate:
0088F2FE 266D 0018                  		movea.l	lvl_prizes(a5),a3
0088F302 2800                       		move.l	d0,d4
0088F304 E08C                       		lsr.l	#8,d4
0088F306 0284 0000 0FFF             		and.l	#$FFF,d4
0088F30C C8ED 0030                  		mulu.w	lvl_size_x(a5),d4
0088F310 D6C4                       		adda	d4,a3
0088F312 2800                       		move.l	d0,d4
0088F314 4844                       		swap	d4
0088F316 E84C                       		lsr.w	#4,d4
0088F318 0284 0000 0FFF             		and.l	#$FFF,d4
0088F31E D6C4                       		adda	d4,a3
0088F320 4E75                       		rts
0088F322                            		
0088F322                            Prize_Delete:
0088F322 61DA                       		bsr.s	Prize_Locate
0088F324 4213                       		clr.b	(a3)
0088F326 4E75                       		rts
0088F328                            		
0088F328                            ; **********************************************
0088F328                            ; Object action
0088F328                            ; **********************************************
0088F328                            
0088F328                            ; ---------------------------
0088F328                            ; Object action: mark 
0088F328                            ; stomped by player
0088F328                            ; 
0088F328                            ; Input:
0088F328                            ; d0 | LONG - Mappings
0088F328                            ; d1 | WORD - VRAM
0088F328                            ; d2 | BYTE - Frame
0088F328                            ; a4 | Object who touched it
0088F328                            ; ---------------------------
0088F328                            
0088F328                            objAction_SetStomp:
0088F328 422E 001D                  		clr.b	obj_index(a6)		; Clear index
0088F32C 422E 001F                  		clr.b	obj_subid(a6)		; Subaction: Stomp
0088F330 2D40 0024                  		move.l	d0,obj_ram(a6)		; Last frame
0088F334 3D41 0028                  		move.w	d1,obj_ram+4(a6)
0088F338 1D42 002A                  		move.b	d2,obj_ram+6(a6)
0088F33C 2D43 002C                  		move.l	d3,obj_ram+8(a6)
0088F340 2D7C 0000 0000 0000        		move.l	#obj_actionscript,obj_code(a6)
0088F348 4E75                       		rts
0088F34A                            		
0088F34A                            ; =================================================================
0088F34A                            ; --------------------------------------------
0088F34A                            ; Includes
0088F34A                            ; --------------------------------------------
0088F34A                            
0088F34A                              		include	"engine/modes/level/data/objects/player/code.asm"
0088F34A                            ; =================================================================
0088F34A                            ; Object
0088F34A                            ; 
0088F34A                            ; Player
0088F34A                            ; =================================================================
0088F34A                            
0088F34A                            ; =================================================================
0088F34A                            ; ------------------------------------------------
0088F34A                            ; Variables
0088F34A                            ; ------------------------------------------------
0088F34A                            
0088F34A =00006780                  varPlyrVRAM	equ	$6000|$780
0088F34A =00000140                  varScrlHor	equ	320
0088F34A =0000000B                  varJumpTimer	equ	11
0088F34A =00000060                  varHurtTimer	equ	96
0088F34A                            
0088F34A =00000002                  varPlyAniJump	equ	2
0088F34A =00000002                  varPlyrMdDead	equ	2
0088F34A                            
0088F34A =00000005                  bitPlyrClimb	equ	5
0088F34A =00000006                  bitPlyrCancelY	equ	6
0088F34A =00000007                  bitPlyrBusy	equ	7
0088F34A                            
0088F34A                            ; =================================================================
0088F34A                            ; ------------------------------------------------
0088F34A                            ; RAM
0088F34A                            ; ------------------------------------------------
0088F34A                            
0088F34A                            		rsset obj_ram
0088F34A =00000024                  plyr_lvltrgt	rs.w	1
0088F34A =00000026                  plyr_jumptmr	rs.w	1
0088F34A =00000028                  plyr_hits	rs.w	1
0088F34A =0000002A                  plyr_hittime	rs.w	1
0088F34A =0000002C                  plyr_spccol	rs.b	1		; %00000LCR
0088F34A =0000002D                  plyr_status	rs.b	1		; %000000FB
0088F34A                            
0088F34A                            ; =================================================================
0088F34A                            ; ------------------------------------------------
0088F34A                            ; Code start
0088F34A                            ; ------------------------------------------------
0088F34A                            
0088F34A                            Obj_Player:
0088F34A 7000                        		moveq	#0,d0
0088F34C 102E 001D                   		move.b	obj_index(a6),d0
0088F350 D040                        		add.w	d0,d0
0088F352 323B 0000                   		move.w	@Index(pc,d0.w),d1
0088F356 4EBB 1000                   		jsr	@Index(pc,d1.w)
0088F35A                             		
0088F35A                             		;Render
0088F35A 7000                        		moveq	#0,d0
0088F35C 303C 6780                      		move.w	#varPlyrVRAM,d0
0088F360 0C2E 0002 001D             		cmp.b	#varPlyrMdDead,obj_index(a6)
0088F366 6600                       		bne.s	@dontforce
0088F368 0040 8000                  		or.w	#$8000,d0
0088F36C                            @dontforce:
0088F36C 4840                           		swap	d0
0088F36E 102E 0020                     		move.b	obj_frame(a6),d0
0088F372 223C 0000 0000              		move.l	#ani_player,d1
0088F378 6100 F06C                  		bsr	Object_Animate
0088F37C                            		
0088F37C 082E 0000 002B             		btst	#0,plyr_hittime+1(a6)
0088F382 6600                       		bne.s	@return
0088F384                            		
0088F384 102E 0020                     		move.b	obj_frame(a6),d0	
0088F388 223C 0000 0000              		move.l	#map_player,d1
0088F38E 6100 ECAC                    		bsr	Object_Show
0088F392                             		
0088F392 203C 6780 0000                		move.l	#(varPlyrVRAM<<16),d0
0088F398 102E 0020                     		move.b	obj_frame(a6),d0
0088F39C 223C 0000 0000             		move.l	#dplc_player,d1
0088F3A2 243C 0000 0000             		move.l	#art_player,d2
0088F3A8 6000 EC38                  		bra	Object_DPLC
0088F3AC                            
0088F3AC                            @return:
0088F3AC 4E75                       		rts
0088F3AE                            		
0088F3AE                            ; ------------------------------------------------
0088F3AE                            
0088F3AE                            @Index:
0088F3AE 0000                       		dc.w ObjPlyr_Init-@Index
0088F3B0 0000                       		dc.w ObjPlyr_Main-@Index
0088F3B2 0000                       		dc.w ObjPlyr_Die-@Index
0088F3B4                            		even
0088F3B4                            
0088F3B4                            ; =================================================================
0088F3B4                            ; ------------------------------------------------
0088F3B4                            ; Index $00: Init
0088F3B4                            ; ------------------------------------------------
0088F3B4                            
0088F3B4                            ObjPlyr_Init:
0088F3B4 062E 0001 001D             		add.b	#1,obj_index(a6)
0088F3BA 2D7C 0101 0202 0004        		move.l	#$01010202,obj_size(a6)
0088F3C2                            ; 		bset	#bitobj_flipV,obj_status(a6)
0088F3C2                            		
0088F3C2                            ; 		tst.w	(RAM_P1_Hits)
0088F3C2                            ; 		beq.s	@iszerohits
0088F3C2                            ; 		bpl.s	@dontresthit
0088F3C2                            ; @iszerohits:
0088F3C2 33FC 0003 FFFF DC04        		move.w	#3,(RAM_P1_Hits)
0088F3CA                            @dontresthit:
0088F3CA 426E 002A                  		clr.w	plyr_hittime(a6)
0088F3CE 08EE 0006 001E              		bset	#bitobj_hit,obj_status(a6)
0088F3D4                             		
0088F3D4                            ; =================================================================
0088F3D4                            ; ------------------------------------------------
0088F3D4                            ; Index $01: Main
0088F3D4                            ; ------------------------------------------------
0088F3D4                            
0088F3D4                            ObjPlyr_Main:
0088F3D4                            ; 		btst	#bitJoyA,(RAM_Control_2+OnPress)
0088F3D4                            ; 		beq.s	@NotDbg
0088F3D4                            ; 		clr.l	obj_x(a6)
0088F3D4                            ; 		clr.l	obj_y(a6)
0088F3D4                            ; 		clr.l	obj_x_spd(a6)
0088F3D4                            ; 		clr.l	obj_y_spd(a6)
0088F3D4                            ; 		lea	(RAM_LvlPlanes),a5
0088F3D4                            ; 		clr.w	lvl_x(a5)
0088F3D4                            ; 		clr.w	lvl_y(a5)
0088F3D4                            ; 		movem.l	a6,-(sp)
0088F3D4                            ; 		bsr	Level_Draw
0088F3D4                            ; 		movem.l	(sp)+,a6
0088F3D4                            ; @NotDbg:
0088F3D4 0839 0003 FFFF DE82        		btst	#bitJoyMode,(RAM_Control_1+ExOnHold)
0088F3DC 6700                       		beq.s	@NotWnd
0088F3DE 6000 0000                  		bra	PlyrDebugMove
0088F3E2                            @NotWnd:
0088F3E2                            
0088F3E2                            ; 		btst	#bitJoyX,(RAM_Control_1+ExOnPress)
0088F3E2                            ; 		beq.s	@NotWnd3
0088F3E2                            ; 		bchg	#3,(RAM_VidRegs+$C)
0088F3E2                            ; 		bchg	#bitobj_flipH,obj_status(a6)
0088F3E2                            ; 		bsr	Video_Update
0088F3E2                            ; @NotWnd3:
0088F3E2                            ; 		btst	#bitJoyY,(RAM_Control_1+ExOnPress)
0088F3E2                            ; 		beq.s	@NotWnd2
0088F3E2                            ; 		bchg	#bitobj_flipV,obj_status(a6)
0088F3E2                            ; @NotWnd2:
0088F3E2                            
0088F3E2                            ; ----------------------------------
0088F3E2                            ; Falling frame
0088F3E2                            ; ----------------------------------
0088F3E2                            
0088F3E2                            ; 		btst	#bitobj_air,obj_status(a6)
0088F3E2                            ; 		beq.s	@idleanim
0088F3E2                            ; 		tst.l	obj_y_spd(a6)
0088F3E2                            ; 		beq.s	@idleanim
0088F3E2                            ; 		bmi.s	@idleanim
0088F3E2                            ; 		move.b	#3,obj_anim_id(a6)
0088F3E2                            ; @idleanim:
0088F3E2                            
0088F3E2 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088F3E8 302D 0032                  		move.w	lvl_size_y(a5),d0		; Bottomless pit
0088F3EC E948                       		lsl.w	#4,d0
0088F3EE 322E 000C                  		move.w	obj_y(a6),d1
0088F3F2 7400                       		moveq	#0,d2
0088F3F4 142E 0006                  		move.b	obj_size+2(a6),d2
0088F3F8 E74A                       		lsl.w	#3,d2
0088F3FA 9242                       		sub.w	d2,d1
0088F3FC B240                       		cmp.w	d0,d1
0088F3FE 6E00 0000                  		bgt	PlyrLevelReset
0088F402                            		
0088F402 4A6E 002A                  		tst.w	plyr_hittime(a6)
0088F406 6600                       		bne.s	@counting
0088F408 082E 0003 001E             		btst	#bitobj_hurt,obj_status(a6)
0088F40E 6700                       		beq.s	@no_action
0088F410                            		
0088F410 4A6E 002A                  		tst.w	plyr_hittime(a6)
0088F414 6600                       		bne.s	@ignore
0088F416 0479 0001 FFFF DC04        		sub.w	#1,(RAM_P1_Hits)
0088F41E 3D7C 0060 002A             		move.w	#varHurtTimer,plyr_hittime(a6)
0088F424                            		
0088F424 4A79 FFFF DC04             		tst.w	(RAM_P1_Hits)
0088F42A 6600                       		bne.s	@counting
0088F42C 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
0088F432 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
0088F438 1D7C 0002 001D             		move.b	#2,obj_index(a6)		; Mode $02: dead
0088F43E 1D7C 0005 001A             		move.b	#5,obj_anim_id(a6)		; Animation $05
0088F444 2D7C 0001 0000 0010        		move.l	#$10000,obj_x_spd(a6)
0088F44C 2D7C FFFC 0000 0014        		move.l	#-$40000,obj_y_spd(a6)
0088F454                            @ignore:
0088F454 4E75                       		rts
0088F456                            		
0088F456                            @counting:
0088F456 046E 0001 002A             		sub.w	#1,plyr_hittime(a6)
0088F45C 6600                       		bne.s	@no_action
0088F45E 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
0088F464                            @no_action:
0088F464 6000 0000                  		bra	PlyrPhysics
0088F468                            		
0088F468                            ; =================================================================
0088F468                            ; ------------------------------------------------
0088F468                            ; Index $01: Main
0088F468                            ; ------------------------------------------------
0088F468                            
0088F468                            ObjPlyr_Die:
0088F468 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0088F46E 2C2E 0010                  		move.l	obj_x_spd(a6),d6
0088F472 2E2E 0014                  		move.l	obj_y_spd(a6),d7
0088F476 0687 0000 4000             		add.l	#$4000,d7
0088F47C                            		
0088F47C DDAE 0008                  		add.l	d6,obj_x(a6)
0088F480 DFAE 000C                  		add.l	d7,obj_y(a6)
0088F484                            		
0088F484 302D 0032                  		move.w	lvl_size_y(a5),d0
0088F488 E948                       		lsl.w	#4,d0
0088F48A 322E 000C                  		move.w	obj_y(a6),d1
0088F48E 7400                       		moveq	#0,d2
0088F490 142E 0006                  		move.b	obj_size+2(a6),d2
0088F494 E74A                       		lsl.w	#3,d2
0088F496 9242                       		sub.w	d2,d1
0088F498 B240                       		cmp.w	d0,d1
0088F49A 6E00                       		bgt.s	PlyrLevelReset
0088F49C                            		
0088F49C 2D46 0010                  		move.l	d6,obj_x_spd(a6)
0088F4A0 2D47 0014                  		move.l	d7,obj_y_spd(a6)
0088F4A4 4E75                       		rts
0088F4A6                            		
0088F4A6                            ; =================================================================
0088F4A6                            ; ----------------------------------
0088F4A6                            ; Level reset
0088F4A6                            ; ----------------------------------
0088F4A6                            
0088F4A6                            PlyrLevelReset:
0088F4A6 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
0088F4AE                            		
0088F4AE 0479 0001 FFFF DC00        		sub.w	#1,(RAM_P1_Lives)
0088F4B6 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
0088F4BC 6600                       		bne.s	@ignore
0088F4BE                            		;GAME OVER stuff goes here
0088F4BE 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
0088F4C4                            		
0088F4C4                            @ignore:
0088F4C4 4E75                       		rts
0088F4C6                            		
0088F4C6                            ; ----------------------------------
0088F4C6                            
0088F4C6                            PlyrDebugMove:
0088F4C6 08AE 0005 002D             		bclr	#bitPlyrClimb,plyr_status(a6)
0088F4CC 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
0088F4D2 422E 0022                  		clr.b	obj_col(a6)
0088F4D6                            		
0088F4D6 0839 0003 FFFF DE83        		btst	#bitJoyRight,(RAM_Control_1+OnHold)
0088F4DE 6700                       		beq.s	@DNotRight
0088F4E0 06AE 0005 0000 0008        		add.l	#$50000,obj_x(a6)
0088F4E8 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
0088F4EE                            @DNotRight:
0088F4EE 0839 0002 FFFF DE83        		btst	#bitJoyLeft,(RAM_Control_1+OnHold)
0088F4F6 6700                       		beq.s	@DNotLeft
0088F4F8 04AE 0005 0000 0008        		sub.l	#$50000,obj_x(a6)
0088F500 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
0088F506                            @DNotLeft:
0088F506 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
0088F50E 6700                       		beq.s	@DNotDown
0088F510 06AE 0005 0000 000C        		add.l	#$50000,obj_y(a6)
0088F518                            @DNotDown:
0088F518 0839 0000 FFFF DE83        		btst	#bitJoyUp,(RAM_Control_1+OnHold)
0088F520 6700                       		beq.s	@DNotUp
0088F522 04AE 0005 0000 000C        		sub.l	#$50000,obj_y(a6)
0088F52A                            @DNotUp:
0088F52A 2D7C 0000 0001 0010        		move.l	#1,obj_x_spd(a6)		;Temporal
0088F532 2D7C 0000 0001 0014        		move.l	#1,obj_y_spd(a6)
0088F53A                            		
0088F53A 6000 0000                    		bra	Plyr_LvlCamera
0088F53E                              		
0088F53E                            ; ----------------------------------
0088F53E                            ; Player physics
0088F53E                            ; ----------------------------------
0088F53E                            
0088F53E                            PlyrPhysics:
0088F53E 2C2E 0010                  		move.l	obj_x_spd(a6),d6
0088F542 2E2E 0014                  		move.l	obj_y_spd(a6),d7
0088F546                            
0088F546                            ; ------------------------
0088F546                            ; Animation ID
0088F546                            ; ------------------------
0088F546                            
0088F546 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088F54C 6600                       		bne.s	@walking
0088F54E 082E 0002 001E             		btst	#bitobj_air,obj_status(a6)
0088F554 6600                       		bne.s	@walking
0088F556                            
0088F556 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
0088F55C 4A86                       		tst.l	d6
0088F55E 6600                       		bne.s	@walking
0088F560 422E 001A                  		clr.b	obj_anim_id(a6)
0088F564                            @walking:
0088F564                            
0088F564                            ; ***************
0088F564                            ; X Speed stuff
0088F564                            ; ***************
0088F564                            
0088F564 6100 0000                  		bsr	@Player_Friction
0088F568 6100 0000                  		bsr	@Player_Walk
0088F56C DDAE 0008                  		add.l	d6,obj_x(a6)			;X + X Speed
0088F570 6100 0000                  		bsr	PlyrColRead_Wall
0088F574                            		
0088F574                            ; ***************
0088F574                            ; Y Speed stuff
0088F574                            ; ***************
0088F574                            ; 
0088F574 6100 0000                  		bsr	@Player_Jump
0088F578 DFAE 000C                  		add.l	d7,obj_y(a6)			;Y + Y Speed
0088F57C 6100 0000                    		bsr	PlyrColRead_Ceiling
0088F580 6100 0000                  		bsr	PlyrColRead_Floor
0088F584                            
0088F584                            ; ***************
0088F584                            ; Save them
0088F584                            ; ***************
0088F584                            
0088F584 2D46 0010                  		move.l	d6,obj_x_spd(a6)
0088F588 2D47 0014                  		move.l	d7,obj_y_spd(a6)
0088F58C                            		
0088F58C 6000 0000                   		bra	Plyr_LvlCamera
0088F590                            	
0088F590                            ; =================================================================
0088F590                            ; ------------------------------------------------
0088F590                            ; Subs
0088F590                            ; ------------------------------------------------
0088F590                            
0088F590                            ; **********************************
0088F590                            ; Player Walk
0088F590                            ; **********************************
0088F590                            
0088F590                            @Player_Walk:
0088F590 2806                       		move.l	d6,d4
0088F592 0839 0003 FFFF DE83        		btst	#bitJoyRight,(RAM_Control_1+OnHold)
0088F59A 6700                       		beq.s	@NotRight
0088F59C 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088F5A2 6600                       		bne.s	@NotMuchRight
0088F5A4 7000                       		moveq	#0,d0
0088F5A6 3039 FFFF BC34             		move.w	(RAM_LvlPlanes+lvl_maxcam_x),d0
0088F5AC E948                       		lsl.w	#4,d0
0088F5AE 322E 0008                  		move.w	obj_x(a6),d1
0088F5B2 B240                       		cmp.w	d0,d1
0088F5B4 6E00                       		bgt.s	@NotRight
0088F5B6                            	
0088F5B6                            ; 		tst.l	d4
0088F5B6                            ; 		bpl.s	@NotRunningR
0088F5B6 203C 0001 E000             		move.l	#$1E000,d0
0088F5BC 0839 0004 FFFF DE83         		btst	#bitJoyB,(RAM_Control_1+OnHold)
0088F5C4 6700                        		beq.s	@NotRunningR
0088F5C6 203C 0002 8000              		move.l	#$28000,d0
0088F5CC                            @NotRunningR:
0088F5CC                            
0088F5CC 0686 0000 4800             		add.l	#$4800,d6
0088F5D2 BC80                       		cmp.l	d0,d6
0088F5D4 6D00                       		blt.s	@NotMuchRight
0088F5D6 2C00                       		move.l	d0,d6
0088F5D8                            @NotMuchRight:
0088F5D8 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
0088F5DE                            
0088F5DE                            @NotRight:
0088F5DE 0839 0002 FFFF DE83        		btst	#bitJoyLeft,(RAM_Control_1+OnHold)
0088F5E6 6700                       		beq.s	@NotLeft
0088F5E8 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088F5EE 6600                       		bne.s	@NotMuchLeft
0088F5F0 4AAE 0008                  		tst.l	obj_x(a6)
0088F5F4 6700                       		beq.s	@NotLeft
0088F5F6 6B00                       		bmi.s	@NotLeft
0088F5F8                            		
0088F5F8                            ; 		tst.l	d4
0088F5F8                            ; 		bmi.s	@NotRunningL
0088F5F8 203C FFFE 0000             		move.l	#-$20000,d0
0088F5FE 0839 0004 FFFF DE83         		btst	#bitJoyB,(RAM_Control_1+OnHold)
0088F606 6700                        		beq.s	@NotRunningL
0088F608 203C FFFD 0000              		move.l	#-$30000,d0
0088F60E                            @NotRunningL:
0088F60E                            
0088F60E                            		
0088F60E 0486 0000 4800             		sub.l	#$4800,d6
0088F614 BC80                       		cmp.l	d0,d6
0088F616 6E00                       		bgt.s	@NotMuchLeft
0088F618 2C00                       		move.l	d0,d6
0088F61A                            @NotMuchLeft:
0088F61A 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
0088F620                            @NotLeft:		
0088F620 4E75                       		rts
0088F622                            		
0088F622                            ; **********************************
0088F622                            ; Player Friction
0088F622                            ; **********************************
0088F622                            
0088F622                            @Player_Friction:
0088F622 283C 0000 2400             		move.l	#$2400,d4			;Friction
0088F628 4A86                       		tst.l	d6
0088F62A 6700                       		beq.s	@FineSpeed
0088F62C 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
0088F632 6600                       		bne.s	@Left
0088F634 9C84                       		sub.l	d4,d6
0088F636 6A00                       		bpl.s	@FineSpeed
0088F638 4286                       		clr.l	d6
0088F63A 4E75                       		rts
0088F63C                            @Left:
0088F63C DC84                       		add.l	d4,d6
0088F63E 6B00                       		bmi.s	@FineSpeed
0088F640                            		
0088F640                            @ignoreR:
0088F640 4286                       		clr.l	d6
0088F642                            @FineSpeed:	
0088F642 4E75                       		rts
0088F644                            
0088F644                            ; **********************************
0088F644                            ; Player jump
0088F644                            ; **********************************
0088F644                            
0088F644                            @Player_Jump:
0088F644 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088F64A 6600                       		bne.s	@JumpFromLadder
0088F64C 082E 0006 002D             		btst	#bitPlyrCancelY,plyr_status(a6)
0088F652 6600                       		bne.s	@JumpFromLadder
0088F654                            		
0088F654 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
0088F65C 6700 0000                  		beq	@IsFalling
0088F660                            		
0088F660 0C6E 000B 0026              		cmp.w	#varJumpTimer,plyr_jumptmr(a6)
0088F666 6600                        		bne.s	@onair
0088F668 082E 0004 0022               		btst	#bitcol_obj,obj_col(a6)
0088F66E 6600                           		bne.s	@onair
0088F670 082E 0000 0022               		btst	#bitcol_floor,obj_col(a6)
0088F676 6700                           		beq.s	@IsFalling
0088F678                            @onair:
0088F678                            
0088F678 046E 0001 0026             		sub.w	#1,plyr_jumptmr(a6)
0088F67E 6B00                       		bmi.s	@IsFalling
0088F680                            
0088F680 082E 0002 001E              		btst	#bitobj_air,obj_status(a6)
0088F686 6600                        		bne.s	@onair2
0088F688                            
0088F688 1D7C 0002 001A              		move.b	#varPlyAniJump,obj_anim_id(a6)
0088F68E 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
0088F694 08AE 0000 0022                  		bclr	#bitcol_floor,obj_col(a6)
0088F69A 08AE 0004 0022                  		bclr	#bitcol_obj,obj_col(a6)
0088F6A0 2E3C FFFB E000                		move.l	#-$42000,d7
0088F6A6 2006                          		move.l	d6,d0
0088F6A8 E480                          		asr.l	#2,d0
0088F6AA 4A80                          		tst.l	d0
0088F6AC 6B00                          		bmi.s	@dontnegx
0088F6AE 4480                          		neg.l	d0
0088F6B0                            @dontnegx:
0088F6B0 DE80                       		add.l	d0,d7
0088F6B2                            		
0088F6B2 203C 0000 0000               		move.l	#SndSfx_PlyrJump,d0
0088F6B8 7201                         		moveq 	#1,d1
0088F6BA 7401                         		moveq	#1,d2
0088F6BC 6100 A2C4                    		bsr	Audio_Track_play
0088F6C0                            @onair2:
0088F6C0 4E75                          		rts
0088F6C2                              
0088F6C2                            ; ----------------------------------
0088F6C2                            
0088F6C2                            @JumpFromLadder:
0088F6C2 0839 0005 FFFF DE85        		btst	#bitJoyC,(RAM_Control_1+OnPress)
0088F6CA 6700 0000                  		beq	@IsFalling
0088F6CE                            		
0088F6CE 08AE 0005 002D             		bclr	#bitPlyrClimb,plyr_status(a6)
0088F6D4 08EE 0002 001E              		bset	#bitobj_air,obj_status(a6)
0088F6DA 1D7C 0002 001A              		move.b	#2,obj_anim_id(a6)
0088F6E0 4286                          		clr.l	d6
0088F6E2 4287                          		clr.l	d7
0088F6E4 4E75                        		rts
0088F6E6                             		
0088F6E6                            ; ----------------------------------
0088F6E6                            
0088F6E6                            @IsFalling:
0088F6E6 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088F6EC 6600                       		bne.s	@low_fall
0088F6EE 082E 0000 0022                		btst	#bitcol_floor,obj_col(a6)
0088F6F4 6600                           		bne.s	@low_fall
0088F6F6                            
0088F6F6 0687 0000 4800              		add.l	#$4800,d7
0088F6FC 0C87 0010 0000             		cmp.l	#$100000,d7
0088F702 6D00                       		blt.s	@low_fall
0088F704 2E3C 0010 0000             		move.l	#$100000,d7
0088F70A                            @low_fall:
0088F70A 4E75                       		rts
0088F70C                            		
0088F70C                            ; **********************************
0088F70C                            ; Object to Level layout collision
0088F70C                            ; **********************************
0088F70C                            
0088F70C                            ; ----------------------------------
0088F70C                            ; floor collision
0088F70C                            ; ----------------------------------
0088F70C                            
0088F70C                            PlyrColRead_Floor:
0088F70C 08AE 0000 0022              		bclr	#bitcol_floor,obj_col(a6)
0088F712 08AE 0002 001E              		bclr	#bitobj_air,obj_status(a6)
0088F718                             		
0088F718 082E 0004 0022              		btst	#bitcol_obj,obj_col(a6)
0088F71E 6600                        		bne.s	@dont
0088F720 08EE 0002 001E              		bset	#bitobj_air,obj_status(a6)
0088F726                            @dont:
0088F726 08AE 0004 0022              		bclr	#bitcol_obj,obj_col(a6)
0088F72C                             		
0088F72C 4A87                       		tst.l	d7
0088F72E 6B00                       		bmi.s	@going_up
0088F730                            
0088F730                            ; 		bsr	object_FindPrz_Floor		;TODO: no sirve en prizes
0088F730                            ;  		btst	#7,d0
0088F730                            ;  		beq.s	@cntrnrml
0088F730                            ; 		clr.b	d0
0088F730                            ; @cntrnrml:
0088F730                            ; 		tst.b	d0
0088F730                            ; 		bne	@przfloor_center
0088F730                            
0088F730 6100 EF70                   		bsr 	object_FindPrz_FloorSides
0088F734                             		
0088F734 4A00                       		tst.b	d0
0088F736 6600 0000                  		bne	@przfloor_right
0088F73A 2001                       		move.l	d1,d0
0088F73C 4A00                       		tst.b	d0
0088F73E 6600 0000                  		bne	@przfloor_left
0088F742                            
0088F742 6100 EDC0                  		bsr	object_FindCol_Floor
0088F746 6100 0000                  		bsr	@center_special
0088F74A 4A00                       		tst.b	d0
0088F74C 6600                       		bne.s	@found_center
0088F74E 6100 EF5E                   		bsr 	object_FindCol_FloorSides
0088F752 6100 0000                  		bsr	@right_special
0088F756 4A00                       		tst.b	d0
0088F758 6600 0000                  		bne	@found_sides
0088F75C 2001                       		move.l	d1,d0
0088F75E 6100 0000                  		bsr	@left_special
0088F762 4A00                       		tst.b	d0
0088F764 6600 0000                  		bne	@found_sides
0088F768                            @going_up:
0088F768                            
0088F768 4E75                       		rts
0088F76A                            		
0088F76A                            ; ----------------------------------
0088F76A                            
0088F76A                            @found_center:
0088F76A 0C00 0001                  		cmp.b	#1,d0
0088F76E 6700 0000                  		beq	@floorsolid
0088F772                            
0088F772 6000                       		bra.s	@SlopeCenter
0088F774                            		
0088F774                            ; ----------------------------------
0088F774                            
0088F774                            @found_sides:
0088F774 0C00 0001                  		cmp.b	#1,d0
0088F778 6700 0000                  		beq	@floorsolid
0088F77C 4E75                       		rts
0088F77E                            
0088F77E                            ; ----------------------------------
0088F77E                            
0088F77E                            @SlopeCenter:
0088F77E 4A87                          		tst.l	d7
0088F780 6B00 0000                     		bmi	@NoCol
0088F784                               				
0088F784 222E 000C                     		move.l	obj_y(a6),d1
0088F788 2401                          		move.l	d1,d2
0088F78A 47F9 0088 DE70               		lea	(col_SlopeData),a3
0088F790 0240 00FF                    		and.w	#$FF,d0
0088F794 3200                         		move.w	d0,d1
0088F796 E949                         		lsl.w	#4,d1
0088F798 D6C1                         		adda	d1,a3
0088F79A 202E 0008                   		move.l	obj_x(a6),d0
0088F79E 4840                        		swap	d0
0088F7A0 0240 000F                   		and.w	#$F,d0
0088F7A4 1033 0000                   		move.b	(a3,d0.w),d0
0088F7A8 0240 000F                      		and.w	#$F,d0
0088F7AC 0281 FFF0 0000                 		and.l	#$FFF00000,d1
0088F7B2 4840                         		swap	d0
0088F7B4 0280 FFFF 0000               		and.l	#$FFFF0000,d0
0088F7BA D280                        		add.l	d0,d1
0088F7BC                             		
0088F7BC                             		;TODO: no recuerdo pa que
0088F7BC                             		;era este fix
0088F7BC                             		; tambien ver que pedo
0088F7BC                             		; porque dominou no
0088F7BC                             		; se queda pegado a los slopes
0088F7BC                             		
0088F7BC                            ;  		move.l	obj_x_spd(a6),d0
0088F7BC                            ;  		btst	#bitobj_flipH,obj_status(a6)
0088F7BC                            ;  		beq.s	@right
0088F7BC                            ;  		neg.l	d0
0088F7BC                            ; @right:
0088F7BC                            ; 		cmp.l	#$20000,d0
0088F7BC                            ; 		bge.s	@dontchk
0088F7BC 082E 0002 001E               		btst	#bitobj_air,obj_status(a6)
0088F7C2 6700                         		beq.s	@dontchk
0088F7C4 B481                         		cmp.l	d1,d2
0088F7C6 6D00                         		blt.s	@NoCol
0088F7C8                            @dontchk:
0088F7C8 2E3C 0005 0000              		move.l	#$50000,d7
0088F7CE 2D41 000C                    		move.l	d1,obj_y(a6)
0088F7D2 6100 0000                     		bsr	@objFloorFlags
0088F7D6                            @NoCol:
0088F7D6 4E75                       		rts
0088F7D8                            		
0088F7D8                            ; ----------------------------------
0088F7D8                            ; Event block: on floor
0088F7D8                            ; ----------------------------------
0088F7D8                            
0088F7D8                            @center_special:
0088F7D8 0800 0006                  		btst	#6,d0
0088F7DC 6700                       		beq.s	@return
0088F7DE 6100 0000                  		bsr	plyrColEntry
0088F7E2 3814                       		move.w	(a4),d4
0088F7E4 6000 0000                  		bra	plyrColGo
0088F7E8                            		
0088F7E8                            @left_special:
0088F7E8 0800 0006                  		btst	#6,d0
0088F7EC 6700                       		beq.s	@return
0088F7EE 6100 0000                  		bsr	plyrColEntry
0088F7F2 382C 0002                  		move.w	2(a4),d4
0088F7F6 6000 0000                  		bra	plyrColGo
0088F7FA                            		
0088F7FA                            @right_special:
0088F7FA 0800 0006                  		btst	#6,d0
0088F7FE 6700                       		beq.s	@return
0088F800 6100 0000                  		bsr	plyrColEntry
0088F804 382C 0004                  		move.w	4(a4),d4
0088F808 6000 0000                  		bra	plyrColGo
0088F80C                            @return:
0088F80C 4E75                       		rts
0088F80E                            
0088F80E                            ; ----------------------------------
0088F80E                            ; Prizes on floor
0088F80E                            ; ----------------------------------
0088F80E                            
0088F80E                            @przfloor_center:
0088F80E                            @przfloor_left:
0088F80E                            @przfloor_right:
0088F80E 7801                       		moveq	#1,d4
0088F810                            		
0088F810 0C00 0020                  		cmp.b	#$20,d0
0088F814 6700                       		beq.s	@trampoline
0088F816                            		
0088F816 0C00 0040                  		cmp.b	#$40,d0		;> $40?
0088F81A 6D00                       		blt.s	@a_coin
0088F81C 0200 003F                  		and.b	#$3F,d0
0088F820 7801                       		moveq	#1,d4
0088F822 4A00                       		tst.b	d0
0088F824 6700                       		beq.s	@setcoin
0088F826 7805                       		moveq	#5,d4
0088F828                            @setcoin:
0088F828 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
0088F82E 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
0088F836 6D00                         		blt.s	@dontadd1up
0088F838 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
0088F83E 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
0088F846                            @dontadd1up:
0088F846                            
0088F846 6100 FADA                  		bsr	Prize_Delete
0088F84A 6100 E17A                  		bsr	Level_HidePrize
0088F84E                            		
0088F84E 203C 0000 0000               		move.l	#SndSfx_COIN,d0
0088F854 7202                         		moveq 	#2,d1
0088F856 7401                         		moveq	#1,d2
0088F858 6100 A128                    		bsr	Audio_Track_play
0088F85C 7800                       		moveq	#0,d4
0088F85E                            @a_coin:
0088F85E 4A44                       		tst.w	d4
0088F860 6600                       		bne.s	@floorsolid
0088F862 4E75                       		rts
0088F864                            		
0088F864                            ; $20
0088F864                            
0088F864                            @trampoline:
0088F864 6100 FA6E                  		bsr	goToTrampolineWhy
0088F868                            		
0088F868 2E3C FFF8 0000             		move.l	#-$80000,d7
0088F86E 7801                       		moveq	#1,d4
0088F870 4E75                       		rts
0088F872                            		
0088F872                            ; ----------------------------------
0088F872                            
0088F872                            ; @check_prz_id:
0088F872                            ;    		bsr	Object_PrzActionCeil
0088F872                            ;   		tst.w	d4
0088F872                            ;   		bne	@ceilingsolid
0088F872                            ; 		rts
0088F872                            		
0088F872                            ;       	bsr	level_CheckPrize
0088F872                            ;        	bne	@floorsolid
0088F872                            ;        	rts
0088F872                            
0088F872                            ; ----------------------------------
0088F872                            		
0088F872                            @floorsolid:
0088F872 6100 0000                  		bsr	@objFloorFlags
0088F876 02AE FFF0 0000 000C         		and.l	#$FFF00000,obj_y(a6)
0088F87E 4287                       		clr.l	d7
0088F880 4E75                       		rts
0088F882                            
0088F882                            ; ----------------------------------
0088F882                            
0088F882                            @objFloorFlags:
0088F882 08EE 0000 0022               		bset	#bitcol_floor,obj_col(a6)
0088F888 08AE 0002 001E             		bclr	#bitobj_air,obj_status(a6)
0088F88E                            		
0088F88E 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
0088F896 6600 0000                  		bne	@onhold
0088F89A 3D7C 000B 0026                 		move.w	#varJumpTimer,plyr_jumptmr(a6)
0088F8A0                            @onhold:
0088F8A0 08AE 0005 002D              		bclr	#bitPlyrClimb,plyr_status(a6)
0088F8A6 08AE 0006 002D             		bclr	#bitPlyrCancelY,plyr_status(a6)
0088F8AC 4E75                       		rts
0088F8AE                            		
0088F8AE                            ; ----------------------------------
0088F8AE                            ; ceiling collision
0088F8AE                            ; ----------------------------------
0088F8AE                            
0088F8AE                            PlyrColRead_Ceiling:
0088F8AE 08AE 0001 0022             		bclr	#bitcol_ceiling,obj_col(a6)
0088F8B4 4A87                       		tst.l	d7
0088F8B6 6A00                       		bpl.s	@doing_down
0088F8B8                            		
0088F8B8 6100 F178                   		bsr 	object_FindCol_CeilingSides
0088F8BC 2400                        		move.l	d0,d2
0088F8BE 2601                        		move.l	d1,d3
0088F8C0 6100 F164                   		bsr 	object_FindPrz_CeilingSides
0088F8C4 4A00                       		tst.b	d0
0088F8C6 6600 0000                  		bne	@przceil_right
0088F8CA 2002                       		move.l	d2,d0
0088F8CC 6100 0000                  		bsr	@right_special
0088F8D0 4A00                       		tst.b	d0
0088F8D2 6600 0000                   		bne	@ceiling_sides
0088F8D6 2001                       		move.l	d1,d0
0088F8D8 4A00                       		tst.b	d0
0088F8DA 6600 0000                  		bne	@przceil_left
0088F8DE 2003                       		move.l	d3,d0
0088F8E0 6100 0000                  		bsr	@left_special
0088F8E4 4A00                       		tst.b	d0
0088F8E6 6600 0000                  		bne	@ceiling_sides
0088F8EA                            		
0088F8EA 6100 ED46                  		bsr	object_FindPrz_Ceiling
0088F8EE 4A00                       		tst.b	d0
0088F8F0 6600 0000                  		bne	@przceil_center
0088F8F4 6100 ED48                  		bsr	object_FindCol_Ceiling
0088F8F8 6100 0000                  		bsr	@center_special
0088F8FC 4A00                       		tst.b	d0
0088F8FE 6600                       		bne.s	@ceiling_center
0088F900                            		
0088F900                            @doing_down:
0088F900 4E75                       		rts
0088F902                            
0088F902                            ; ----------------------------------
0088F902                            
0088F902                            @ceiling_center:
0088F902                            ; 		cmp.b	#1,d0
0088F902                            ;  		beq.s	@ceilingsolid
0088F902                            ;  		rts
0088F902                            
0088F902                            ; ----------------------------------
0088F902                            
0088F902                            @ceiling_sides:
0088F902 0C00 0001                  		cmp.b	#1,d0
0088F906 6700                       		beq.s	@ceilingsolid
0088F908 4E75                       		rts
0088F90A                            
0088F90A                            ; ----------------------------------
0088F90A                            
0088F90A                            @ceilingsolid:
0088F90A 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
0088F910 08EE 0001 0022              		bset	#bitcol_ceiling,obj_col(a6)
0088F916 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
0088F91C                            ; 		move.l	#$10000,d7
0088F91C                            ;         	add.w	#$10,obj_y(a6)
0088F91C                            ;       	and.l	#$FFF80000,obj_y(a6)
0088F91C                            
0088F91C                            ; 		move.l	d0,d1
0088F91C                            ; 		lsr.l	#4,d1
0088F91C                            ; 		and.w	#$FFF0,d1
0088F91C                            ; 		add.w	#$10,d1
0088F91C                            ; 		add.w	#$20,d1
0088F91C                            ; 		move.w	d1,obj_y(a6)
0088F91C                            		
0088F91C 4E75                        		rts
0088F91E                            		
0088F91E                            ; ----------------------------------
0088F91E                            ; Event block: ceiling
0088F91E                            ; ----------------------------------
0088F91E                            
0088F91E                            @center_special:
0088F91E 0800 0006                  		btst	#6,d0
0088F922 6700                       		beq.s	@return
0088F924 6100 0000                  		bsr	plyrColEntry
0088F928 382C 000C                  		move.w	$C(a4),d4
0088F92C 6000 0000                  		bra	plyrColGo
0088F930                            		
0088F930                            @left_special:
0088F930 0800 0006                  		btst	#6,d0
0088F934 6700                       		beq.s	@return
0088F936 6100 0000                  		bsr	plyrColEntry
0088F93A 382C 000E                  		move.w	$E(a4),d4
0088F93E 6000 0000                  		bra	plyrColGo
0088F942                            		
0088F942                            @right_special:
0088F942 0800 0006                  		btst	#6,d0
0088F946 6700                       		beq.s	@return
0088F948 6100 0000                  		bsr	plyrColEntry
0088F94C 382C 0010                  		move.w	$10(a4),d4
0088F950 6000 0000                  		bra	plyrColGo
0088F954                            		
0088F954                            @return:
0088F954 4E75                       		rts
0088F956                            		
0088F956                            ; ----------------------------------
0088F956                            
0088F956                            @przceil_center:
0088F956                            @przceil_left:
0088F956                            @przceil_right:
0088F956 6100 F676                     		bsr	Object_PrzActionCeil
0088F95A 4A44                         		tst.w	d4
0088F95C 6600 FFAC                    		bne	@ceilingsolid
0088F960 4E75                       		rts
0088F962                            		
0088F962                            ; ----------------------------------
0088F962                            ; d0 - LEFT
0088F962                            ; d1 - RIGHT
0088F962                            ; d2 - CENTER
0088F962                            ; ----------------------------------
0088F962                            
0088F962                            ; @prizes_ceiling:
0088F962                            ; 		move.l	d0,d3
0088F962                            ; 		btst	#bitobj_flipH,obj_status(a6)
0088F962                            ; 		beq.s	@itsleft
0088F962                            ; 		exg.l	d1,d3
0088F962                            ; @itsleft:
0088F962                            ; 
0088F962                            ;    		move.l	d2,d0
0088F962                            ;    		tst.b	d0
0088F962                            ;    		beq.s	@przc_no_c
0088F962                            ;   		bsr	Object_PrzActionCeil
0088F962                            ;  		tst.w	d4
0088F962                            ;  		bne	@ceilingsolid
0088F962                            ; @przc_no_c:
0088F962                            ; 
0088F962                            ; 		move.l	d1,d0
0088F962                            ; 		tst.b	d0
0088F962                            ; 		beq.s	@przc_no_r
0088F962                            ; 		bsr	Object_PrzActionCeil
0088F962                            ; 		tst.w	d4
0088F962                            ; 		bne	@ceilingsolid
0088F962                            ; @przc_no_r:
0088F962                            ;  		move.l	d3,d0
0088F962                            ;  		tst.b	d0
0088F962                            ;  		beq.s	@przc_no_l
0088F962                            ;  		bsr	Object_PrzActionCeil
0088F962                            ; 		tst.w	d4
0088F962                            ; 		bne	@ceilingsolid
0088F962                            ; @przc_no_l:
0088F962                            ; 		rts
0088F962                            		
0088F962                            ; **********************************
0088F962                            ; Wall collision
0088F962                            ; **********************************
0088F962                            
0088F962                            PlyrColRead_Wall:
0088F962 08AE 0002 0022             		bclr	#bitcol_wall_r,obj_col(a6)
0088F968 08AE 0003 0022             		bclr	#bitcol_wall_l,obj_col(a6)
0088F96E                            		
0088F96E                            		; Ignorar PRIZEs si Player esta
0088F96E                            		; en modo escalera
0088F96E 082E 0005 002D              		btst	#bitPlyrClimb,plyr_status(a6)
0088F974 6600                        		bne.s	@okaydntchk
0088F976 6100 EBEE                  		bsr	object_FindPrz_Wall
0088F97A 2400                       		move.l	d0,d2
0088F97C 6100 EE38                  		bsr	object_FindPrz_WallSides
0088F980 0800 0007                   		btst	#7,d0
0088F984 6700                        		beq.s	@righthidn
0088F986 4200                        		clr.b	d0
0088F988                            @righthidn:
0088F988 4A00                       		tst.b	d0
0088F98A 6600 0000                  		bne	@przwall_right
0088F98E 2001                       		move.l	d1,d0
0088F990 0800 0007                   		btst	#7,d0
0088F994 6700                        		beq.s	@lefthidn
0088F996 4200                        		clr.b	d0
0088F998                            @lefthidn:
0088F998 4A00                       		tst.b	d0
0088F99A 6600 0000                  		bne	@przwall_left
0088F99E                            @okaydntchk:
0088F99E                            
0088F99E 6100 EBD2                  		bsr	object_FindCol_Wall
0088F9A2 6100 0000                  		bsr	@center_special
0088F9A6 4A00                       		tst.b	d0
0088F9A8 6600                       		bne.s	@wall_center
0088F9AA                            		
0088F9AA 6100 EE16                   		bsr 	object_FindCol_WallSides
0088F9AE 6100 0000                  		bsr	@right_special
0088F9B2 4A00                       		tst.b	d0
0088F9B4 6600 0000                  		bne	@wall_right
0088F9B8                            		
0088F9B8 2001                       		move.l	d1,d0
0088F9BA 6100 0000                  		bsr	@left_special
0088F9BE 4A00                       		tst.b	d0
0088F9C0 6600 0000                  		bne	@wall_left
0088F9C4 4E75                       		rts
0088F9C6                            		
0088F9C6                            ; ----------------------------------
0088F9C6                            
0088F9C6                            @wall_center:
0088F9C6 0C40 0001                  		cmp.w	#1,d0
0088F9CA 6700 0000                   		beq	@wallsolid_slope
0088F9CE                            		
0088F9CE 4A87                       		tst.l	d7
0088F9D0 6B00                       		bmi.s	@NoCol_LR
0088F9D2 082E 0002 001E                		btst	#bitobj_air,obj_status(a6)
0088F9D8 6600                          		bne.s	@NoCol_LR
0088F9DA 4287                           		clr.l	d7	
0088F9DC 08AE 0002 001E                 		bclr	#bitobj_air,obj_status(a6)
0088F9E2                                		
0088F9E2 322E 000C                  		move.w	obj_y(a6),d1
0088F9E6 0441 0001                  		sub.w	#1,d1
0088F9EA 3601                       		move.w	d1,d3
0088F9EC 0241 FFF0                  		and.w	#$FFF0,d1 		
0088F9F0 47F9 0088 DE70                  		lea	(col_SlopeData),a3
0088F9F6 0240 00FF                        		and.w	#$FF,d0
0088F9FA E948                            		lsl.w	#4,d0
0088F9FC D6C0                             		adda	d0,a3
0088F9FE 302E 0008                        		move.w	obj_x(a6),d0
0088FA02 0240 000F                        		and.w	#$F,d0
0088FA06 1433 0000                        		move.b	(a3,d0.w),d2
0088FA0A 0242 000F                        		and.w	#$F,d2
0088FA0E D242                             		add.w	d2,d1
0088FA10                                  		
0088FA10 082E 0002 001E              		btst	#bitobj_air,obj_status(a6)
0088FA16 6700                       		beq.s	@dontchkLR
0088FA18 B641                         		cmp.w	d1,d3
0088FA1A 6D00                         		blt.s	@NoCol_LR
0088FA1C                            @dontchkLR:
0088FA1C 3D41 000C                     		move.w	d1,obj_y(a6)
0088FA20                            
0088FA20                            @NoCol_LR:
0088FA20 4E75                       		rts
0088FA22                            
0088FA22                            ; ----------------------------------
0088FA22                            ; Prizes on walls
0088FA22                            ; ----------------------------------	
0088FA22                            
0088FA22                            @przwall_left:
0088FA22 6100 0000                  		bsr	@check_wll_prz
0088FA26 4A44                          		tst.w	d4
0088FA28 6600 0000                     		bne	@wallsolid_l
0088FA2C 4E75                       		rts
0088FA2E                            @przwall_right:
0088FA2E 6100 0000                  		bsr	@check_wll_prz
0088FA32 4A44                          		tst.w	d4
0088FA34 6600 0000                     		bne	@wallsolid_r
0088FA38 4E75                       		rts
0088FA3A                            	
0088FA3A                            ; ----------------------------------
0088FA3A                            
0088FA3A                            @check_wll_prz:
0088FA3A 7801                       		moveq	#1,d4
0088FA3C                            		
0088FA3C 0C00 0020                  		cmp.b	#$20,d0
0088FA40 6700                       		beq.s	@trampolinewll
0088FA42                            		
0088FA42 0C00 0040                  		cmp.b	#$40,d0		;> $40?
0088FA46 6D00                       		blt.s	@notcoin
0088FA48 0200 003F                  		and.b	#$3F,d0
0088FA4C 7801                       		moveq	#1,d4
0088FA4E 4A00                       		tst.b	d0
0088FA50 6700                       		beq.s	@setcoin
0088FA52 7805                       		moveq	#5,d4
0088FA54                            @setcoin:
0088FA54 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
0088FA5A 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
0088FA62 6D00                         		blt.s	@dontadd1up2
0088FA64 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
0088FA6A 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
0088FA72                            @dontadd1up2:
0088FA72                            
0088FA72 6100 F8AE                  		bsr	Prize_Delete
0088FA76 6100 DF4E                  		bsr	Level_HidePrize
0088FA7A                            ; 		move.l	d0,(RAM_LvlPlanes+lvl_przreq)
0088FA7A                            ; 		bset	#bitLvlHidePrz,(RAM_LvlPlanes+lvl_flags)
0088FA7A                            
0088FA7A 203C 0000 0000               		move.l	#SndSfx_COIN,d0
0088FA80 7202                         		moveq 	#2,d1
0088FA82 7401                         		moveq	#1,d2
0088FA84 6100 9EFC                    		bsr	Audio_Track_play
0088FA88 7800                       		moveq	#0,d4
0088FA8A                            		
0088FA8A                            @notcoin:
0088FA8A 4E75                       		rts
0088FA8C                            		
0088FA8C                            @trampolinewll:
0088FA8C 6100 F846                  		bsr	goToTrampolineWhy
0088FA90                            
0088FA90                            ; 		and.w	#$FFF8,obj_x(a6)
0088FA90                            		
0088FA90 203C FFF8 0000             		move.l	#-$80000,d0
0088FA96                            ; 		btst	#bitobj_flipH,obj_status(a6)
0088FA96                            ; 		bne.s	@lefty
0088FA96                            ; 		tst.l	d6
0088FA96                            ; 		bpl.s	@righy
0088FA96                            ; @lefty:
0088FA96                            ; 		neg.l	d0
0088FA96                            ; @righy:
0088FA96 2C00                       		move.l	d0,d6
0088FA98 7800                       		moveq	#0,d4
0088FA9A 4E75                       		rts
0088FA9C                            		
0088FA9C                            ; ----------------------------------
0088FA9C                            
0088FA9C                            @wall_right:
0088FA9C                            ; 		btst	#bitobj_flipH,obj_status(a6)
0088FA9C                            ; 		bne.s	@return_w
0088FA9C 0C00 0002                    		cmp.b	#2,d0
0088FAA0 6C00                         		bge.s	@return_w
0088FAA2 0C00 0001                   		cmp.b	#1,d0
0088FAA6 6700                         		beq.s	@wallsolid_r
0088FAA8 4E75                         		rts
0088FAAA                              		
0088FAAA                            @wall_left:
0088FAAA                            ; 		btst	#bitobj_flipH,obj_status(a6)
0088FAAA                            ; 		beq.s	@return_w
0088FAAA 0C00 0002                    		cmp.b	#2,d0
0088FAAE 6C00                         		bge.s	@return_w
0088FAB0 0C00 0001                    		cmp.b	#1,d0
0088FAB4 6700                         		beq.s	@wallsolid_l
0088FAB6                            @return_w:
0088FAB6 4E75                       		rts
0088FAB8                            		
0088FAB8                            ; ----------------------------------
0088FAB8                            
0088FAB8                            @wallsolid_r:
0088FAB8 026E FFF8 0008             		and.w	#$FFF8,obj_x(a6)
0088FABE                            		
0088FABE 4286                       		clr.l	d6
0088FAC0 08EE 0002 0022             		bset	#bitcol_wall_r,obj_col(a6)
0088FAC6 4E75                       		rts
0088FAC8                            
0088FAC8                            ; ----------------------------------
0088FAC8                            
0088FAC8                            @wallsolid_l:
0088FAC8 066E 0004 0008             		add.w	#4,obj_x(a6)
0088FACE 026E FFF8 0008             		and.w	#$FFF8,obj_x(a6)
0088FAD4                            		
0088FAD4                            ; 		moveq	#0,d4
0088FAD4                            ; 		move.b	obj_size(a6),d4
0088FAD4                            ; 		lsl.w	#3,d4
0088FAD4                            ; 		move.w	obj_x(a6),d5
0088FAD4                            ; 		sub.w	#1,d5
0088FAD4                            ; 		sub.w	d4,d5
0088FAD4                            ; 		tst.w	d5
0088FAD4                            ; 		bpl.s	@noleftlvl
0088FAD4                            ; 		
0088FAD4                            ; 		moveq	#0,d0
0088FAD4                            ; 		add.w	d4,d0
0088FAD4                            ; 		move.w	d0,obj_x(a6)
0088FAD4                            ; 		bra.s	@leftend
0088FAD4                            ; @noleftlvl:
0088FAD4                            ; 		move.l	d0,d2
0088FAD4                            ; 		swap	d2
0088FAD4                            ; 		and.w	#$FFF0,d2
0088FAD4                            ; 		add.w	#$10,d2
0088FAD4                            ; 		add.w	#8,d2
0088FAD4                            ; 		move.w	d2,obj_x(a6)
0088FAD4                            ; @leftend:
0088FAD4 4286                       		clr.l	d6
0088FAD6 08EE 0003 0022             		bset	#bitcol_wall_l,obj_col(a6)
0088FADC 4E75                       		rts
0088FADE                            
0088FADE                            ; ----------------------------------
0088FADE                            
0088FADE                            @wallsolid_slope:
0088FADE 082E 0000 001E                  		btst	#bitobj_flipH,obj_status(a6)
0088FAE4 6600                       		bne.s	@wllflg_l
0088FAE6 08EE 0002 0022             		bset	#bitcol_wall_r,obj_col(a6)
0088FAEC 4E75                       		rts
0088FAEE                            @wllflg_l:
0088FAEE 08EE 0003 0022             		bset	#bitcol_wall_l,obj_col(a6)
0088FAF4 4E75                       		rts
0088FAF6                             		
0088FAF6                            ; ----------------------------------
0088FAF6                            ; Event block: on wall
0088FAF6                            ; ----------------------------------
0088FAF6                            
0088FAF6                            @center_special:
0088FAF6 0800 0006                  		btst	#6,d0
0088FAFA 6700                       		beq.s	@return
0088FAFC 6100 0000                  		bsr	plyrColEntry
0088FB00 382C 0006                  		move.w	6(a4),d4
0088FB04 6000 0000                  		bra	plyrColGo
0088FB08                            		
0088FB08                            @left_special:
0088FB08 0800 0006                  		btst	#6,d0
0088FB0C 6700                       		beq.s	@return
0088FB0E 6100 0000                  		bsr	plyrColEntry
0088FB12 382C 0008                  		move.w	8(a4),d4
0088FB16 6000 0000                  		bra	plyrColGo
0088FB1A                            		
0088FB1A                            @right_special:
0088FB1A 0800 0006                  		btst	#6,d0
0088FB1E 6700                       		beq.s	@return
0088FB20 6100 0000                  		bsr	plyrColEntry
0088FB24 382C 000A                  		move.w	$A(a4),d4
0088FB28 6000 0000                  		bra	plyrColGo
0088FB2C                            		
0088FB2C                            @return:
0088FB2C 4E75                       		rts
0088FB2E                            		
0088FB2E                            ; ---------------------------------------------
0088FB2E                            ; EVENT BLOCKS ($80+)
0088FB2E                            ; ---------------------------------------------
0088FB2E                            
0088FB2E                            plyrColEntry:
0088FB2E 2800                       		move.l	d0,d4
0088FB30 0244 003F                  		and.w	#$3F,d4
0088FB34 C8FC 0012                  		mulu.w	#$12,d4
0088FB38 49FA 0000                  		lea	plyEvnList(pc),a4
0088FB3C D8C4                       		adda	d4,a4
0088FB3E 4E75                       		rts
0088FB40                            plyrColGo:
0088FB40 0284 0000 FFFF             		and.l	#$FFFF,d4
0088FB46 0684 0000 0000             		add.l	#plyEvnList,d4
0088FB4C 2844                       		movea.l	d4,a4
0088FB4E 4ED4                       		jmp	(a4)
0088FB50                            	
0088FB50                            ; ---------------------------------------------
0088FB50                            ;   Floor Center |   Floor Left |   Floor Right
0088FB50                            ;    Wall Center |    Wall Left |    Wall Right
0088FB50                            ; Ceiling Center | Ceiling Left | Ceiling Right
0088FB50                            ; 
0088FB50                            ; d0 - Return collision (xpos|ypos|byte)
0088FB50                            ; DO NOT USE d1 WHILE CHECKING SIDES
0088FB50                            ; ---------------------------------------------
0088FB50                            
0088FB50                            plyEvnList:
0088FB50                            	; $40 - Exit level (old)
0088FB50 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
0088FB56 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
0088FB5C 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
0088FB62                            	; $41 - Ladder (climbing mode)
0088FB62 0000 0000 0000             	dc.w @event41_flr-plyEvnList,@event41_flrsd-plyEvnList,@event41_flrsd-plyEvnList
0088FB68 0000 0000 0000             	dc.w @event41_wll-plyEvnList,       @unused-plyEvnList,       @unused-plyEvnList
0088FB6E 0000 0000 0000             	dc.w      @unused-plyEvnList,       @unused-plyEvnList,       @unused-plyEvnList
0088FB74                            	; $42 - Spikes (Up)
0088FB74 0000 0000 0000             	dc.w @event42-plyEvnList,@event42-plyEvnList,@event42-plyEvnList
0088FB7A 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FB80 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FB86                            	;$83
0088FB86 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB8C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB92 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB98                            	;$84
0088FB98 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FB9E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBA4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBAA                            	;$85
0088FBAA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBB0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBB6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBBC                            	;$86
0088FBBC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBC2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBC8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBCE                            	;$87
0088FBCE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBD4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBDA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBE0                            	;$88
0088FBE0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBE6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBEC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBF2                            	;$89
0088FBF2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBF8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FBFE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC04                            	;$8A
0088FC04 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC0A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC10 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC16                            	;$8B
0088FC16 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC1C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC22 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC28                            	;$8C
0088FC28 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC2E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC34 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC3A                            	;$8D
0088FC3A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC40 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC46 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC4C                            	;$8E
0088FC4C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC52 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC58 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC5E                            	;$8F
0088FC5E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC64 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC6A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FC70                            	
0088FC70                            	;$90
0088FC70 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
0088FC76 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
0088FC7C 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
0088FC82                            	;$91
0088FC82 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
0088FC88 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
0088FC8E 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
0088FC94                            	;$92
0088FC94 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
0088FC9A 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
0088FCA0 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
0088FCA6                            	;$93
0088FCA6 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
0088FCAC 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
0088FCB2 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
0088FCB8                            	;$94
0088FCB8 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FCBE 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FCC4 0000 0000 0000             	dc.w @event54_cei-plyEvnList,@event54_cei-plyEvnList,@event54_cei-plyEvnList
0088FCCA                            	;$95
0088FCCA 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FCD0 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FCD6 0000 0000 0000             	dc.w @event55_cei-plyEvnList,@event55_cei-plyEvnList,@event55_cei-plyEvnList
0088FCDC                            	;$96
0088FCDC 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FCE2 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FCE8 0000 0000 0000             	dc.w @event56_cei-plyEvnList,@event56_cei-plyEvnList,@event56_cei-plyEvnList
0088FCEE                            	;$97
0088FCEE 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FCF4 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0088FCFA 0000 0000 0000             	dc.w @event57_cei-plyEvnList,@event57_cei-plyEvnList,@event57_cei-plyEvnList
0088FD00                            	;$98
0088FD00 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD06 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD0C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD12                            	;$99
0088FD12 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD18 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD1E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD24                            	;$9A
0088FD24 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD2A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD30 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD36                            	;$9B
0088FD36 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD3C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD42 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD48                            	;$9C
0088FD48 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD4E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD54 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD5A                            	;$9D
0088FD5A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD60 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD66 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD6C                            	;$9E
0088FD6C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD72 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD78 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD7E                            	;$9F
0088FD7E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD84 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD8A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD90                            
0088FD90                            	;$A0
0088FD90 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD96 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FD9C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDA2                            	;$A1
0088FDA2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDA8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDAE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDB4                            	;$A2
0088FDB4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDBA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDC0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDC6                            	;$A3
0088FDC6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDCC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDD2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDD8                            	;$A4
0088FDD8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDDE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDE4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDEA                            	;$A5
0088FDEA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDF0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDF6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FDFC                            	;$A6
0088FDFC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE02 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE08 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE0E                            	;$A7
0088FE0E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE14 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE1A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE20                            	;$A8
0088FE20 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE26 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE2C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE32                            	;$A9
0088FE32 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE38 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE3E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE44                            	;$AA
0088FE44 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE4A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE50 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE56                            	;$AB
0088FE56 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE5C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE62 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE68                            	;$AC
0088FE68 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE6E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE74 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE7A                            	;$AD
0088FE7A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE80 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE86 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE8C                            	;$AE
0088FE8C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE92 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE98 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FE9E                            	;$AF
0088FE9E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FEA4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FEAA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0088FEB0                            		
0088FEB0                            ; ----------------------------------
0088FEB0                            ; EVENT $80
0088FEB0                            ; ----------------------------------
0088FEB0                            
0088FEB0                            @event40:
0088FEB0 4200                       		clr.b	d0
0088FEB2 4A39 FFFF DE4C             		tst.b	(RAM_ModeReset)
0088FEB8 6600                       		bne.s	@already
0088FEBA 0679 0001 FFFF DC06          		add.w	#1,(RAM_CurrLevel)
0088FEC2 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
0088FECA                            @already:
0088FECA 4E75                       		rts
0088FECC                            		
0088FECC                            ; ----------------------------------
0088FECC                            ; EVENT $41
0088FECC                            ; ----------------------------------
0088FECC                            
0088FECC                            @event41_flr:
0088FECC 4282                       		clr.l	d2
0088FECE 6100 EC68                  		bsr	object_FindCol_Center
0088FED2 0C00 0041                  		cmp.b	#$41,d0
0088FED6 6700 0000                  		beq	@unused_flag
0088FEDA 7401                       		moveq	#1,d2	
0088FEDC                            @notclimb:
0088FEDC                            
0088FEDC                            		
0088FEDC 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
0088FEE4 6700 0000                  		beq	@unused_flag
0088FEE8                            		
0088FEE8 2400                       		move.l	d0,d2
0088FEEA 6100 E7C2                  		bsr	object_FindCol_FloorSides
0088FEEE 0C00 0041                  		cmp.b	#$41,d0
0088FEF2 6700                       		beq.s	@usethis
0088FEF4 2001                       		move.l	d1,d0
0088FEF6 0C00 0041                  		cmp.b	#$41,d0
0088FEFA 6700                       		beq.s	@usethis
0088FEFC 2002                       		move.l	d2,d0
0088FEFE                            @usethis:
0088FEFE 4286                       		clr.l	d6
0088FF00 4287                       		clr.l	d7
0088FF02 0280 FFF0 0000             		and.l	#$FFF00000,d0
0088FF08 0680 0008 0000             		add.l	#$80000,d0
0088FF0E 2D40 0008                  		move.l	d0,obj_x(a6)
0088FF12 08EE 0005 002D             		bset	#bitPlyrClimb,plyr_status(a6)
0088FF18 08AE 0000 0022             		bclr	#bitcol_floor,obj_col(a6)
0088FF1E 1D7C 0004 001A               		move.b	#4,obj_anim_id(a6)
0088FF24 1D7C 000C 0020              		move.b	#12,obj_frame(a6)		;FRAME 12
0088FF2A 066E 0008 000C             		add.w	#8,obj_y(a6)
0088FF30 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
0088FF36                            
0088FF36                            ; 		clr.l	d0
0088FF36 4E75                       		rts
0088FF38                             		
0088FF38                            ; --------------------
0088FF38                            
0088FF38                            @event41_flrsd:
0088FF38                            ; 		clr.l	d0
0088FF38                            ; 		rts
0088FF38                            		
0088FF38                            ; --------------------
0088FF38                            
0088FF38                            @event41_cei:
0088FF38 4280                       		clr.l	d0
0088FF3A 4E75                       		rts
0088FF3C                            		
0088FF3C                            ; --------------------
0088FF3C                            
0088FF3C                            @event41_wll:
0088FF3C                            ;  		clr.l	d0
0088FF3C 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088FF42 6700                       		beq.s	@notwaitclmb
0088FF44 1D7C 00FF 001A              		move.b	#-1,obj_anim_id(a6)
0088FF4A 4286                       		clr.l	d6
0088FF4C 4287                       		clr.l	d7
0088FF4E                            @notwaitclmb:
0088FF4E                            ; 		move.l	d0,d2
0088FF4E 0839 0000 FFFF DE83         		btst	#bitJoyUp,(RAM_Control_1+OnHold)
0088FF56 6700                        		beq.s	@dontclimb
0088FF58 1D7C 0004 001A               		move.b	#4,obj_anim_id(a6)
0088FF5E 082E 0005 002D              		btst	#bitPlyrClimb,plyr_status(a6)
0088FF64 6600                        		bne.s	@alrdup
0088FF66                             		
0088FF66 6100 EBD0                    		bsr	object_FindCol_Center
0088FF6A 0C00 0041                   		cmp.b	#$41,d0
0088FF6E 6700                        		beq.s	@canclimb
0088FF70 6100 E592                     		bsr	object_FindCol_Floor
0088FF74 0C00 0041                   		cmp.b	#$41,d0
0088FF78 6600                        		bne.s	@dontclimb
0088FF7A                            @canclimb:
0088FF7A 0280 FFF0 0000              		and.l	#$FFF00000,d0
0088FF80 0680 0008 0000               		add.l	#$80000,d0
0088FF86 2D40 0008                   		move.l	d0,obj_x(a6)
0088FF8A                             		
0088FF8A                            @alrdup:
0088FF8A 04AE 0001 6000 000C         		sub.l	#$16000,obj_y(a6)
0088FF92 4286                        		clr.l	d6
0088FF94 4287                        		clr.l	d7
0088FF96 08EE 0005 002D               		bset	#bitPlyrClimb,plyr_status(a6)
0088FF9C 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
0088FFA2                             
0088FFA2                            @dontclimb:
0088FFA2 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
0088FFAA 6700                       		beq.s	@dontclimbd
0088FFAC                            		
0088FFAC 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0088FFB2 6600                       		bne.s	@alrddwn
0088FFB4 6100 EB82                  		bsr	object_FindCol_Center
0088FFB8 0C00 0041                  		cmp.b	#$41,d0
0088FFBC 6600                       		bne.s	@dontclimbd
0088FFBE 0280 FFF0 0000             		and.l	#$FFF00000,d0
0088FFC4 0680 0008 0000              		add.l	#$80000,d0
0088FFCA 2D40 0008                  		move.l	d0,obj_x(a6)
0088FFCE                            @alrddwn:
0088FFCE 06AE 0001 6000 000C        		add.l	#$16000,obj_y(a6)
0088FFD6 4286                       		clr.l	d6
0088FFD8 4287                       		clr.l	d7
0088FFDA 08EE 0005 002D              		bset	#bitPlyrClimb,plyr_status(a6)
0088FFE0 1D7C 0004 001A              		move.b	#4,obj_anim_id(a6)
0088FFE6 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
0088FFEC                            @dontclimbd:
0088FFEC                            
0088FFEC 4280                       		clr.l	d0
0088FFEE 4E75                       		rts
0088FFF0                            
0088FFF0                            ; --------------------
0088FFF0                            
0088FFF0                            @unused_flag:
0088FFF0 1002                        		move.b	d2,d0
0088FFF2 4E75                        		rts
0088FFF4                            
0088FFF4                            ; ----------------------------------
0088FFF4                            ; EVENT $82
0088FFF4                            ; ----------------------------------
0088FFF4                            
0088FFF4                            @event42:
0088FFF4 08EE 0003 001E             		bset	#bitobj_hurt,obj_status(a6)
0088FFFA                            		
0088FFFA 103C 0001                  		move.b	#1,d0
0088FFFE 4E75                       		rts
00890000                            		
00890000                            ; ----------------------------------
00890000                            ; EVENT $90
00890000                            ;
00890000                            ; CHECKS COLOR
00890000                            ; ----------------------------------
00890000                            
00890000                            @event50_check:
00890000 0C79 000E FFFF E8F6        		cmp.w	#$00E,(RAM_Palette+$26)
00890008 6700 0000                  		beq	@event_solid
0089000C 6000 0000                  		bra	@unused
00890010                            
00890010                            ; ----------------------------------
00890010                            ; EVENT $91
00890010                            ;
00890010                            ; CHECKS COLOR
00890010                            ; ----------------------------------
00890010                            
00890010                            @event51_check:
00890010 0C79 0E00 FFFF E8FC        		cmp.w	#$E00,(RAM_Palette+$2C)
00890018 6700 0000                  		beq	@event_solid
0089001C 6000 0000                  		bra	@unused
00890020                            		
00890020                            ; ----------------------------------
00890020                            ; EVENT $92
00890020                            ;
00890020                            ; CHECKS COLOR
00890020                            ; ----------------------------------
00890020                            
00890020                            @event52_check:
00890020 0C79 00E0 FFFF E902        		cmp.w	#$0E0,(RAM_Palette+$32)
00890028 6700 0000                  		beq	@event_solid
0089002C 6000 0000                  		bra	@unused
00890030                            
00890030                            ; ----------------------------------
00890030                            ; EVENT $93
00890030                            ;
00890030                            ; CHECKS COLOR
00890030                            ; ----------------------------------
00890030                            
00890030                            @event53_check:
00890030 0C79 00EE FFFF E908        		cmp.w	#$0EE,(RAM_Palette+$38)
00890038 6700 0000                  		beq	@event_solid
0089003C 6000 0000                  		bra	@unused
00890040                            		
00890040                            ; ----------------------------------
00890040                            ; EVENT $94
00890040                            ; 
00890040                            ; CHECKS COLOR
00890040                            ; ----------------------------------
00890040                            
00890040                            @event54_cei:
00890040 243C 0323 1102             		move.l	#$03231102,d2
00890046 0C79 000E FFFF E8F6        		cmp.w	#$00E,(RAM_Palette+$26)
0089004E 6600                       		bne.s	@fade_this
00890050 243C 0423 1102             		move.l	#$04231102,d2
00890056                            @fade_this:
00890056 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
0089005C 6600                       		bne.s	@busy_pal
0089005E 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
00890064                            @busy_pal:
00890064 103C 0001                  		move.b	#1,d0
00890068 4E75                       		rts
0089006A                            
0089006A                            ; ----------------------------------
0089006A                            ; EVENT $95
0089006A                            ; 
0089006A                            ; CHECKS COLOR
0089006A                            ; ----------------------------------
0089006A                            
0089006A                            @event55_cei:
0089006A 243C 0383 1402             		move.l	#$03831402,d2
00890070 0C79 0E00 FFFF E8FC        		cmp.w	#$E00,(RAM_Palette+$2C)
00890078 6600                       		bne.s	@fade_this_b
0089007A 243C 0483 1402             		move.l	#$04831402,d2
00890080                            @fade_this_b:
00890080 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00890086 6600                       		bne.s	@busy_pal_b
00890088 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
0089008E                            @busy_pal_b:
0089008E 103C 0001                  		move.b	#1,d0
00890092 4E75                       		rts
00890094                            	
00890094                            ; ----------------------------------
00890094                            ; EVENT $96
00890094                            ; 
00890094                            ; CHECKS COLOR
00890094                            ; ----------------------------------
00890094                            
00890094                            @event56_cei:
00890094 243C 0343 1702             		move.l	#$03431702,d2
0089009A 0C79 00E0 FFFF E902        		cmp.w	#$0E0,(RAM_Palette+$32)
008900A2 6600                       		bne.s	@fade_this_g
008900A4 243C 0443 1702             		move.l	#$04431702,d2
008900AA                            @fade_this_g:
008900AA 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
008900B0 6600                       		bne.s	@busy_pal_g
008900B2 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
008900B8                            @busy_pal_g:
008900B8 103C 0001                  		move.b	#1,d0
008900BC 4E75                       		rts
008900BE                            
008900BE                            ; ----------------------------------
008900BE                            ; EVENT $97
008900BE                            ; 
008900BE                            ; CHECKS COLOR
008900BE                            ; ----------------------------------
008900BE                            
008900BE                            @event57_cei:
008900BE 243C 0363 1A02             		move.l	#$03631A02,d2
008900C4 0C79 00EE FFFF E908        		cmp.w	#$0EE,(RAM_Palette+$38)
008900CC 6600                       		bne.s	@fade_this_y
008900CE 243C 0463 1A02             		move.l	#$04631A02,d2
008900D4                            @fade_this_y:
008900D4 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
008900DA 6600                       		bne.s	@busy_pal_y
008900DC 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
008900E2                            @busy_pal_y:
008900E2 103C 0001                  		move.b	#1,d0
008900E6 4E75                       		rts
008900E8                            		
008900E8                            ; ----------------------------------
008900E8                            ; Full solid
008900E8                            ; ----------------------------------
008900E8                            
008900E8                            @event_solid:
008900E8 103C 0001                  		move.b	#1,d0
008900EC 4E75                       		rts
008900EE                            		
008900EE                            ; ----------------------------------
008900EE                            ; Return
008900EE                            ; ----------------------------------
008900EE                            
008900EE                            @unused:
008900EE 4280                       		clr.l	d0
008900F0 4E75                       		rts
008900F2                            		
008900F2                            ; ---------------------------------------------
008900F2                            ; Move level camera
008900F2                            ; ---------------------------------------------
008900F2                            
008900F2                            Plyr_LvlCamera:
008900F2 4BF9 FFFF BC00              		lea	(RAM_LvlPlanes),a5
008900F8                             		
008900F8                            ; 		move.b	lvl_settings(a5),d0
008900F8                            ; 		and.w	#$F,d0
008900F8                            ; 		add.w	d0,d0
008900F8                            ; 		move.w	@ScrollTypes(pc,d0.w),d1
008900F8                            ; 		jmp	@ScrollTypes(pc,d1.w)
008900F8                            ; 		
008900F8                            ; ; -----------------------------------
008900F8                            ; 
008900F8                            ; @ScrollTypes:
008900F8                            ; 		dc.w @Scrl_Normal-@ScrollTypes
008900F8                            ; 		dc.w @Scrl_Section-@Scrolltypes
008900F8                            ; 		dc.w 0
008900F8                            ; 		dc.w 0
008900F8                            ; 		dc.w 0
008900F8                            ; 		dc.w 0
008900F8                            ; 		dc.w 0
008900F8                            ; 		dc.w 0
008900F8                            ; 		dc.w 0
008900F8                            	
008900F8                            ; -----------------------------------
008900F8                            ; Default scroll
008900F8                            ; 
008900F8                            ; Autochecks the level size
008900F8                            ; -----------------------------------
008900F8                            
008900F8                            @Scrl_Normal:
008900F8 7400                       		moveq	#0,d2
008900FA 7600                       		moveq	#0,d3
008900FC                            		
008900FC 383C 0140                  		move.w	#320,d4
00890100 1039 FFFF ED1C             		move.b	(RAM_VidRegs+$C),d0
00890106 0240 0081                  		and.w	#%10000001,d0
0089010A 6600                       		bne.s	@normal_hor
0089010C 383C 0100                  		move.w	#256,d4
00890110                            @normal_hor:
00890110 3004                       		move.w	d4,d0
00890112 E848                       		lsr.w	#4,d0
00890114 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00890118 B240                       		cmp.w	d0,d1
0089011A 6F00                       		ble.s	@DontScrollHor
0089011C                            		
0089011C 302E 0008                  		move.w	obj_x(a6),d0
00890120 7A00                       		moveq	#0,d5
00890122 3204                       		move.w	d4,d1
00890124 E249                       		lsr.w	#1,d1
00890126 9041                       		sub.w	d1,d0
00890128 6B00                       		bmi.s	@Wait_X
0089012A 3A00                       		move.w	d0,d5
0089012C                            		
0089012C 322D 001C                   		move.w	lvl_x(a5),d1
00890130 B245                        		cmp.w	d5,d1
00890132 6700                        		beq.s	@Wait_X		
00890134 7000                        		moveq	#bitLvlDirR,d0
00890136 BA41                         		cmp.w	d1,d5
00890138 6E00                         		bgt.s	@RightDir
0089013A 7001                         		moveq	#bitLvlDirL,d0	
0089013C                            @RightDir:
0089013C 01ED 003A                    		bset	d0,lvl_flags(a5)
00890140                             		
00890140                            @Wait_X:
00890140 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00890144 3004                       		move.w	d4,d0
00890146 E848                       		lsr.w	#4,d0
00890148 9240                       		sub.w	d0,d1
0089014A 3005                       		move.w	d5,d0
0089014C 0440 0001                  		sub.w	#1,d0
00890150 E949                       		lsl.w	#4,d1
00890152 B041                       		cmp.w	d1,d0
00890154 6D00                       		blt.s	@NotEnd_X
00890156 3A01                       		move.w	d1,d5
00890158                            @NotEnd_X:
00890158 3005                       		move.w	d5,d0
0089015A E848                       		lsr.w	#4,d0
0089015C 3B45 001C                  		move.w	d5,lvl_x(a5)
00890160                            
00890160                            @DontScrollHor:
00890160                            
00890160                            ; ------------------------
00890160                            ; Update Vertical
00890160                            ; scrolling
00890160                            ; ------------------------
00890160                            
00890160 0C6D 000E 0036              		cmp.w	#(224/16),lvl_maxcam_y(a5)
00890166 6F00 0000                   		ble	@single_Y
0089016A                             		
0089016A 3A2D 0020                    		move.w	lvl_y(a5),d5
0089016E 382E 000C                    		move.w	obj_y(a6),d4
00890172 986D 0020                    		sub.w	lvl_y(a5),d4
00890176                              		
00890176 0C44 0068                    		cmp.w	#(224/2)-8,d4
0089017A 6D00                         		blt.s	@Do_Up
0089017C 0C44 007E                    		cmp.w	#(224/2)+14,d4
00890180 6F00                         		ble.s	@Set_Y
00890182                              		
00890182 302E 000C                  		move.w	obj_y(a6),d0
00890186 0440 007E                  		sub.w	#(224/2)+14,d0
0089018A 3A00                       		move.w	d0,d5
0089018C 08ED 0002 003A                   		bset	#bitLvlDirD,lvl_flags(a5)
00890192 6000                             		bra.s	@Set_Y
00890194                                  		
00890194                            @Do_Up:
00890194 302E 000C                  		move.w	obj_y(a6),d0
00890198 0440 0068                  		sub.w	#(224/2)-8,d0
0089019C 3A00                       		move.w	d0,d5
0089019E 08ED 0003 003A                   		bset	#bitLvlDirU,lvl_flags(a5)
008901A4                                  		
008901A4 6000                       		bra.s	@Set_Y
008901A6                            		
008901A6                            @old_yscrl:
008901A6 3A2E 000C                    		move.w	obj_y(a6),d5			; Old
008901AA 383C 0080                   		move.w	#(224/2)+$10,d4
008901AE 9A44                        		sub.w	d4,d5
008901B0 08ED 0002 003A                  		bset	#bitLvlDirD,lvl_flags(a5)
008901B6 08ED 0003 003A                  		bset	#bitLvlDirU,lvl_flags(a5)
008901BC                                 		
008901BC                            ;  		sub.w	#((224/2)+$10),d5
008901BC                            ;  		move.w	obj_y(a6),d0			; New
008901BC                            ;  		sub.w	#((224/2)+$20),d0
008901BC                            ;  		add.w	lvl_y(a5),d0
008901BC                            ;  		asr.w	#3,d0
008901BC                            ;  		add.w	d0,d0
008901BC                            ;  		move.w	d0,d5
008901BC                             		
008901BC                            ;  		moveq	#bitLvlDirD,d2
008901BC                            ;    		cmp.w	d5,d1
008901BC                            ;    		bgt.s	@drwydown
008901BC                            ;    		bset	#bitLvlDirU,d2
008901BC                            ; @drwydown:
008901BC                            
008901BC                            ;     		bset	#bitLvlDirD,lvl_flags(a5)
008901BC                            ;     		bset	#bitLvlDirU,lvl_flags(a5)
008901BC                               		
008901BC                            ; --------------------------------
008901BC                             	
008901BC                            @Set_Y:
008901BC 4A45                        		tst.w	d5
008901BE 6A00                        		bpl.s	@onyplus
008901C0 4245                        		clr.w	d5
008901C2                            @onyplus:
008901C2 7200                       		moveq	#0,d1
008901C4 322D 0036                    		move.w	lvl_maxcam_y(a5),d1
008901C8 0441 000E                    		sub.w	#(224/16),d1
008901CC E949                         		lsl.w	#4,d1
008901CE                            ;   		swap	d1
008901CE BA41                         		cmp.w	d1,d5
008901D0 6D00                         		blt.s	@notbotmd
008901D2 3A01                         		move.w	d1,d5
008901D4                            @notbotmd:
008901D4 3B45 0020                  		move.w	d5,lvl_y(a5)
008901D8                            		
008901D8                            @single_Y:
008901D8 4E75                       		rts
008901DA                            ; 		
008901DA                            ; ; -----------------------------------
008901DA                            ; ; Dungeon Scroll
008901DA                            ; ; -----------------------------------
008901DA                            ; 
008901DA                            ; @Scrl_Section:
008901DA                            ; 		btst	#bitobj_flipH,obj_status(a6)
008901DA                            ; 		bne.s	@LeftCheck
008901DA                            ; 		
008901DA                            ; ; RIGHT
008901DA                            ; 
008901DA                            ;  		btst	#0,plyr_status(a6)
008901DA                            ;  		bne.s	@MoveRight
008901DA                            ;  		
008901DA                            ; 		move.w	obj_x(a6),d1
008901DA                            ; 		move.w	#320,d0
008901DA                            ; 		move.w	d0,d2
008901DA                            ; 		add.w	lvl_x(a5),d2
008901DA                            ; 		move.w	d2,plyr_lvltrgt(a6)
008901DA                            ; 		add.w	#8,d0
008901DA                            ;  		add.w	lvl_x(a5),d0
008901DA                            ;  		cmp.w	d0,d1
008901DA                            ; 		blt.s	@UpDownChk
008901DA                            ;  		
008901DA                            ;  		bset	#0,plyr_status(a6)
008901DA                            ;  		clr.l	obj_x_spd(a6)
008901DA                            ;  		clr.l	obj_y_spd(a6)
008901DA                            ; 
008901DA                            ; @MoveRight:
008901DA                            ;   		move.w	lvl_x(a5),d1
008901DA                            ;  		lea	(RAM_ScrlHor),a4
008901DA                            ;  		move.w	#224-1,d3
008901DA                            ; @doline2:
008901DA                            ;  		move.w	d1,d0
008901DA                            ;  		neg.w	d0
008901DA                            ;  		move.w	d0,(a4)+
008901DA                            ;  		asr.w	#4,d0
008901DA                            ;  		move.w	d0,(a4)+
008901DA                            ;  		dbf	d3,@doline2
008901DA                            ;  		
008901DA                            ;   		move.w	plyr_lvltrgt(a6),d0
008901DA                            ;   		move.w	lvl_x(a5),d1
008901DA                            ;   		cmp.w 	d0,d1
008901DA                            ;   		bcs.s	@KeepScrlR
008901DA                            ;  		bclr	#0,plyr_status(a6)
008901DA                            ;   		move.w	d1,lvl_x(a5)
008901DA                            ; 		rts
008901DA                            ; @KeepScrlR:
008901DA                            ;  		add.w	#4,lvl_x(a5)
008901DA                            ;       		bset	#bitLvlDirR,lvl_flags(a5)
008901DA                            ;        		rts
008901DA                            ; 		
008901DA                            ; @LeftCheck:
008901DA                            ;        		
008901DA                            ; 		
008901DA                            ; @UpDownChk:
008901DA                            ;  		bclr	#0,plyr_status(a6)
008901DA                            ; 		rts
008901DA                            		
008901DA                            ; =================================================================
008901DA                            ; 
008901DA                            Plyr_SetStartPos:
008901DA 4DF9 FFFF C040               		lea	(RAM_ObjBuffer),a6
008901E0 4BF9 FFFF BC00              		lea	(RAM_LvlPlanes),a5
008901E6                             		
008901E6 3D40 000C                   		move.w	d0,obj_y(a6)
008901EA 4840                        		swap	d0
008901EC 3D40 0008                   		move.w	d0,obj_x(a6)
008901F0                             		
008901F0                            ; ----------------------------------------
008901F0                             
008901F0 383C 0140                  		move.w	#320,d4
008901F4                            ; 		btst	#bit_hortype,lvl_prio(a5)
008901F4                            ; 		beq.s	@normal_hor
008901F4                            ; 		move.w	#256,d4
008901F4                            ; @normal_hor:
008901F4 3004                       		move.w	d4,d0
008901F6 E848                       		lsr.w	#4,d0
008901F8 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
008901FC B240                       		cmp.w	d0,d1
008901FE 6F00                       		ble.s	@DontScrollHor
00890200                            		
00890200 362E 0008                  		move.w	obj_x(a6),d3
00890204 7400                       		moveq	#0,d2
00890206 3204                       		move.w	d4,d1
00890208 E249                       		lsr.w	#1,d1
0089020A 9641                       		sub.w	d1,d3
0089020C 6B00                       		bmi.s	@Wait_X
0089020E 3403                       		move.w	d3,d2
00890210                            @Wait_X:
00890210 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00890214 3004                       		move.w	d4,d0
00890216 E848                       		lsr.w	#4,d0
00890218 9240                       		sub.w	d0,d1
0089021A 3002                       		move.w	d2,d0
0089021C 0440 0001                  		sub.w	#1,d0
00890220 E949                       		lsl.w	#4,d1
00890222 B041                       		cmp.w	d1,d0
00890224 6D00                       		blt.s	@NotEnd_X
00890226 3401                       		move.w	d1,d2
00890228                            @NotEnd_X:
00890228 3002                       		move.w	d2,d0
0089022A E848                       		lsr.w	#4,d0
0089022C 3B42 001C                  		move.w	d2,lvl_x(a5)
00890230                            
00890230                            @DontScrollHor:
00890230                            
00890230                            ; ----------------------------------------
00890230                            
00890230 426D 0020                  		clr.w	lvl_y(a5)
00890234 0C6D 000E 0036              		cmp.w	#(224/16),lvl_maxcam_y(a5)
0089023A 6F00                        		ble.s	@Return
0089023C 362E 000C                  		move.w	obj_y(a6),d3
00890240 7400                       		moveq	#0,d2
00890242 0443 0084                  		sub.w	#((224/2)+$14),d3	;aprox
00890246 6B00                       		bmi.s	@Wait_Y
00890248 3403                       		move.w	d3,d2
0089024A                            @Wait_Y:
0089024A 322D 0036                   		move.w	lvl_maxcam_y(a5),d1
0089024E 0441 000E                   		sub.w	#(224/16),d1
00890252 3002                        		move.w	d2,d0
00890254 0440 0001                   		sub.w	#1,d0
00890258 E949                        		lsl.w	#4,d1
0089025A B041                        		cmp.w	d1,d0
0089025C 6D00                        		blt.s	@NotEnd_Y
0089025E 3401                        		move.w	d1,d2
00890260                            @NotEnd_Y:
00890260 3B42 0020                  		move.w	d2,lvl_y(a5)
00890264                             		
00890264                            @Return:
00890264 4E75                        		rts
00890266                            
00890266                            ; =================================================================
00890266                            ; ------------------------------------------------
00890266                            ; EXTERNAL Routines for the player
00890266                            ; ------------------------------------------------
00890266                            
00890266                            ; TODO
00890266                            
00890266                            ; =================================================================
00890266                            ; ------------------------------------------------
00890266                            ; Data
00890266                            ; ------------------------------------------------
00890266                            		
00890266                            Ani_Player:
00890266 0000                       		dc.w @Idle-Ani_Player		;$00
00890268 0000                       		dc.w @Walk-Ani_Player
0089026A 0000                       		dc.w @Jump_1-Ani_Player
0089026C 0000                        		dc.w @Jump_2-Ani_Player
0089026E 0000                        		dc.w @ClimbMove-Ani_Player	;$04
00890270 0000                        		dc.w @Die-Ani_Player
00890272                            		even
00890272                            @Idle:
00890272 06                          		dc.b 6
00890273 0000 0000 0000 0000 0000+   		dc.b 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
0089028F FF                         		dc.b -1
00890290                            		even
00890290                            @Jump_1:	
00890290 04                          		dc.b 4
00890291 0A                          		dc.b $A
00890292 FF                         		dc.b -1
00890294 00                         		even
00890294                            @Jump_2:	
00890294 04                          		dc.b 4
00890295 0B                           		dc.b $B
00890296 FF                          		dc.b -1
00890298 00                          		even
00890298                            @Walk:
00890298 03                          		dc.b 3
00890299 0203 0405 0607 0809         		dc.b 2,3,4,5,6,7,8,9
008902A1 FF                         		dc.b -1
008902A2                            		even
008902A2                            @ClimbMove:
008902A2 04                         		dc.b 4
008902A3 0C0D 0E0F 0E0D             		dc.b 12,13,14,15,14,13
008902A9 FF                         		dc.b -1
008902AA                            		even	
008902AA                            @Die:
008902AA 04                         		dc.b 4
008902AB 10                         		dc.b 16
008902AC FF                         		dc.b -1
008902AE 00                         		even
008902AE 00                         		even
008902AE                               		include	"engine/modes/level/data/objects/dadou/code.asm"
008902AE                            ; =================================================================
008902AE                            ; Object
008902AE                            ; 
008902AE                            ; Dadou
008902AE                            ; =================================================================
008902AE                            
008902AE                            ; =================================================================
008902AE                            ; ------------------------------------------------
008902AE                            ; Variables
008902AE                            ; ------------------------------------------------
008902AE                            
008902AE =00006420                  varVramDadou	equ	$6000|$420
008902AE                            
008902AE                            ; =================================================================
008902AE                            ; ------------------------------------------------
008902AE                            ; RAM
008902AE                            ; ------------------------------------------------
008902AE                            
008902AE                            		rsset Obj_Ram
008902AE =00000024                  timer_1		rs.w 1
008902AE                            
008902AE                            ; =================================================================
008902AE                            ; ------------------------------------------------
008902AE                            ; Code start
008902AE                            ; ------------------------------------------------
008902AE                            
008902AE                            Obj_Dadou:
008902AE 7000                        		moveq	#0,d0
008902B0 102E 001D                   		move.b	obj_index(a6),d0
008902B4 D040                        		add.w	d0,d0
008902B6 323B 0000                   		move.w	@Index(pc,d0.w),d1
008902BA 4EBB 1000                   		jsr	@Index(pc,d1.w)
008902BE                             		
008902BE 6100 E0BA                   		bsr	Object_OffCheck
008902C2 203C 6420 0000                		move.l	#(varVramDadou<<16),d0
008902C8 223C 0000 0000              		move.l	#ani_dadou,d1
008902CE 6100 E116                  		bsr	Object_Animate
008902D2                            		
008902D2 203C 6420 0000                 		move.l	#(varVramDadou<<16),d0
008902D8 102E 0020                   		move.b	obj_frame(a6),d0
008902DC 223C 0000 0000             		move.l	#map_dadou,d1
008902E2 6000 DD58                   		bra	Object_Show
008902E6                             		
008902E6                            ; ------------------------------------------------
008902E6                            
008902E6                            @Index:
008902E6 0000                       		dc.w @Init-@Index
008902E8 0000                       		dc.w @Stand-@Index
008902EA 0000                       		dc.w @Walk-@Index
008902EC                            		even
008902EC                            		
008902EC                            ; =================================================================
008902EC                            ; ------------------------------------------------
008902EC                            ; Index $00: Init
008902EC                            ; ------------------------------------------------
008902EC                            
008902EC                            @Init:
008902EC 2D7C 0101 0102 0004        		move.l	#$01010102,obj_size(a6)
008902F4 2D7C 0000 8000 0014        		move.l	#$8000,obj_y_spd(a6)
008902FC                            		
008902FC 3D7C 00C0 0024             		move.w	#$C0,timer_1(a6)
00890302 6100 0000                  		bsr	@Go_Stand
00890306                            		
00890306                            ; =================================================================
00890306                            ; ------------------------------------------------                  
00890306                            ; Index $01: Stand
00890306                            ; ------------------------------------------------
00890306                            
00890306                            @Stand:
00890306                            ; 		sub.w	#1,timer_1(a6)
00890306                            ; 		bpl.s	@Pyhsics
00890306                            ; 
00890306                            ; 		move.w	#$C0,timer_1(a6)
00890306 6000 0000                  		bra	@Go_Walk
0089030A                            		
0089030A                            ; =================================================================
0089030A                            ; ------------------------------------------------                  
0089030A                            ; Index $01: Walk
0089030A                            ; ------------------------------------------------
0089030A                            
0089030A                            @Walk:
0089030A                            ; 		sub.w	#1,timer_1(a6)
0089030A                            ; 		bpl.s	@Pyhsics
0089030A                            ; 		
0089030A                            ; 		move.w	#$C0,timer_1(a6)
0089030A                            ; 		bchg	#bitobj_flipH,obj_status(a6)
0089030A                            ; 		bra	@Go_Stand
0089030A                            		
0089030A 6000 0000                  		bra	@Pyhsics
0089030E                            		
0089030E                            ; =================================================================
0089030E                            ; ------------------------------------------------
0089030E                            ; Subs
0089030E                            ; ------------------------------------------------
0089030E                            
0089030E                            @Go_Stand:
0089030E 42AE 0010                  		clr.l	obj_x_spd(a6)
00890312 422E 001A                  		clr.b	obj_anim_id(a6)
00890316 1D7C 0001 001D             		move.b	#1,obj_index(a6)
0089031C 4E75                       		rts
0089031E                            	
0089031E                            ; --------------------------------------
0089031E                            
0089031E                            @Go_Walk:
0089031E 2D7C 0000 4000 0010        		move.l	#$4000,obj_x_spd(a6)
00890326 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
0089032C 6600                       		bne.s	@right
0089032E 2D7C FFFF C000 0010        		move.l	#-$4000,obj_x_spd(a6)
00890336                            @right:
00890336 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
0089033C 1D7C 0002 001D             		move.b	#2,obj_index(a6)
00890342 4E75                       		rts
00890344                            	
00890344                            ; ------------------------------------------------
00890344                            ; Pyhsics
00890344                            ; ------------------------------------------------
00890344                            
00890344                            @Pyhsics:
00890344 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0089034A 2C2E 0010                   		move.l	obj_x_spd(a6),d6
0089034E 2E2E 0014                   		move.l	obj_y_spd(a6),d7
00890352                             		
00890352 DDAE 0008                   		add.l	d6,obj_x(a6)
00890356 6100 0000                   		bsr	@WallCheck
0089035A                            		
0089035A                            ; ----------------------------------
0089035A                            
0089035A 0687 0000 8000               		add.l	#$8000,d7
00890360 0C87 0004 0000               		cmp.l	#$40000,d7
00890366 6D00                         		blt.s	@low_y
00890368 2E3C 0004 0000               		move.l	#$40000,d7
0089036E                            @low_y:
0089036E DFAE 000C                    		add.l	d7,obj_y(a6)
00890372                              		
00890372                            ; 		lea	(RAM_LvlPlanes),a5
00890372                            ; 		move.w	lvl_size_y(a5),d0
00890372                            ; 		lsl.w	#4,d0
00890372                            ; 		move.w	obj_y(a6),d1
00890372                            ; 		moveq	#0,d2
00890372                            ; 		move.b	obj_size+2(a6),d2
00890372                            ; 		lsl.w	#3,d2
00890372                            ; 		sub.w	d2,d1
00890372                            ; 		cmp.w	d0,d1
00890372                            ; 		bge	@delete
00890372                            ; 		
00890372 4A87                         		tst.l	d7
00890374 6B00                         		bmi.s	@no_floor
00890376                              
00890376 6100 E180                  		bsr	object_FindPrz_Floor
0089037A 2400                       		move.l	d0,d2
0089037C 4A00                       		tst.b	d0
0089037E 6600                       		bne.s	@from_prize
00890380 6100 E320                   		bsr 	object_FindPrz_FloorSides
00890384 4A00                       		tst.b	d0
00890386 6600 0000                  		bne	@from_prize;@swap_dir_wl
0089038A 2001                       		move.l	d1,d0
0089038C 4A00                       		tst.b	d0
0089038E 6600 0000                  		bne	@from_prize
00890392                            		
00890392 6100 E170                  		bsr	object_FindCol_Floor
00890396 2400                       		move.l	d0,d2
00890398 4A00                       		tst.b	d0
0089039A 6600                       		bne.s	@set_floor
0089039C 6100 E310                   		bsr 	object_FindCol_FloorSides
008903A0 4A00                       		tst.b	d0
008903A2 6600 0000                  		bne	@set_floor;@swap_dir_wl
008903A6 2001                       		move.l	d1,d0
008903A8 4A00                       		tst.b	d0
008903AA 6700 0000                  		beq	@no_floor
008903AE                            		
008903AE 6000                       		bra.s	@set_floor
008903B0                            ; @swap_dir_wl:
008903B0                            ; 		neg.l	d6
008903B0                            ; 		bchg	#bitobj_flipH,obj_status(a6)
008903B0                            ; 		bra.s	@no_floor
008903B0                            
008903B0                            @from_prize:
008903B0 0C00 0040                  		cmp.b	#$40,d0
008903B4 6C00                       		bge.s	@set_floor
008903B6 103C 0001                  		move.b	#1,d0
008903BA                            		
008903BA                            @set_floor:
008903BA 6100 E7DE                    		bsr 	object_SetCol_Floor
008903BE                              		
008903BE                            @no_floor:
008903BE                            
008903BE 2D46 0010                   		move.l	d6,obj_x_spd(a6)
008903C2 2D47 0014                   		move.l	d7,obj_y_spd(a6)
008903C6                             		
008903C6                            ; ----------------------------------
008903C6                            ; Check if touched
008903C6                            ; ----------------------------------
008903C6                            
008903C6                            @check_touch:
008903C6 6100 E896                  		bsr	objTouch_Top
008903CA 4A00                       		tst.b	d0
008903CC 6600                       		bne.s	@touch_flag
008903CE 6100 E92C                  		bsr	objTouch_Bottom
008903D2 4A00                       		tst.b	d0
008903D4 6600                       		bne.s	@touch_flag
008903D6                            		
008903D6 6100 E9C4                  		bsr	objTouch_Sides
008903DA 4A00                       		tst.b	d0
008903DC 6600                       		bne.s	@touch_flag
008903DE 4840                       		swap	d0
008903E0 4A00                       		tst.b	d0
008903E2 6600                       		bne.s	@touch_flag
008903E4 4E75                       		rts
008903E6                            		
008903E6                            ; -----------------------------------
008903E6                            
008903E6                            @touch_flag:
008903E6 6100 EB98                  		bsr	objPlyrHurtKill
008903EA 6700                       		beq.s	@return
008903EC 323C 6420                     		move.w	#varVramDadou,d1
008903F0 142E 0020                   		move.b	obj_frame(a6),d2
008903F4 203C 0000 0000             		move.l	#map_dadou,d0
008903FA 260C                       		move.l	a4,d3
008903FC 6100 EF2A                  		bsr	objAction_SetStomp
00890400 6000 DF58                  		bra	Object_IsGone
00890404                            @return:
00890404 4E75                       		rts
00890406                            		
00890406                            ; =================================================================
00890406                            
00890406                            @WallCheck:
00890406 6100 E15E                     		bsr	object_FindPrz_Wall
0089040A 4A00                          		tst.b	d0
0089040C 6600                          		bne.s	@foundprzwl
0089040E 6100 E162                    		bsr	object_FindCol_Wall
00890412 4A00                         		tst.b	d0
00890414 6700                         		beq.s	@chk_right
00890416                            @foundprzwl:
00890416 0800 0006                    		btst	#6,d0
0089041A 6600                         		bne.s	@chk_right
0089041C                            ;    		cmp.b	#2,d0
0089041C                            ;    		blt.s	@chk_right
0089041C 6100 E824                    		bsr	object_SetCol_Wall
00890420                            ;    		bra.s	@endchk
00890420                            @chk_right:
00890420                            
00890420                            		;TODO: Prize check
00890420                            ;   		bsr	object_FindPrz_WallSides
00890420                            ;   		tst.b	d0
00890420                            ;   		bne.s	@przrotx
00890420                            ;   		move.l	d1,d0
00890420                            ;   		tst.b	d0
00890420                            ;   		bne.s	@przrotx
00890420                            
00890420 6100 E3A0                    		bsr	object_FindCol_WallSides
00890424 0800 0006                    		btst	#6,d0
00890428 6600                         		bne.s	@endchk
0089042A 0801 0006                    		btst	#6,d1
0089042E 6600                         		bne.s	@endchk
00890430 4A00                         		tst.b	d0
00890432 6600                         		bne.s	@leftws
00890434 4A01                         		tst.b	d1
00890436 6600                         		bne.s	@rightws
00890438 6000                          		bra.s	@endchk
0089043A                            @przrotx:
0089043A                            	
0089043A                            @leftws:
0089043A 0C01 0002                  		cmp.b	#2,d1
0089043E 6C00                       		bge.s	@endchk
00890440 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00890446 6700                       		beq.s	@endchk
00890448 6000                       		bra.s	@rotatex
0089044A                            @rightws:
0089044A 0C01 0002                  		cmp.b	#2,d1
0089044E 6C00                       		bge.s	@endchk
00890450 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00890456 6600                       		bne.s	@endchk
00890458                            @rotatex:
00890458 4486                        		neg.l	d6
0089045A 086E 0000 001E              		bchg	#bitobj_flipH,obj_status(a6)
00890460                            @endchk:
00890460 4E75                       		rts
00890462                            		
00890462                            ; ------------------------------------------------
00890462                            ; Data
00890462                            ; ------------------------------------------------
00890462                            		
00890462                            ; ----------------------------------------
00890462                            
00890462                            ani_dadou:
00890462 0000                       		dc.w @Idle-ani_dadou
00890464 0000                       		dc.w @Walk-ani_dadou
00890466                            		even
00890466                            @Idle:
00890466 08                          		dc.b 8
00890467 0000 0000 0000 0000 0001+   		dc.b 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
00890478 FF                         		dc.b $FF
0089047A 00                         		even
0089047A                            @Walk:
0089047A 06                          		dc.b 6
0089047B 0203 0405 0607 0809         		dc.b 2,3,4,5,6,7,8,9
00890483 FF                         		dc.b $FF
00890484                            		even	
00890484                            		even	
00890484                               		include	"engine/modes/level/data/objects/pikudo/code.asm"
00890484                            ; =================================================================
00890484                            ; Object
00890484                            ; 
00890484                            ; Pikudo
00890484                            ; =================================================================
00890484                            
00890484                            ; =================================================================
00890484                            ; ------------------------------------------------
00890484                            ; Variables
00890484                            ; ------------------------------------------------
00890484                            
00890484 =000004D0                  varVramPikudo	equ	$4D0
00890484 =000000AA                  varTimerWait	equ	170
00890484 =0000001E                  varTimerAttck	equ	30
00890484                            
00890484                            ; =================================================================
00890484                            ; ------------------------------------------------
00890484                            ; RAM
00890484                            ; ------------------------------------------------
00890484                            
00890484                            		rsset Obj_Ram
00890484 =00000024                  timerpik1	rs.w 1
00890484 =00000026                  timerpik2	rs.w 1
00890484 =00000028                  lastx		rs.w 1
00890484 =0000002A                  lasty		rs.w 1
00890484                            
00890484                            ; =================================================================
00890484                            ; ------------------------------------------------
00890484                            ; Code start
00890484                            ; ------------------------------------------------
00890484                            
00890484                            Obj_Pikudo:
00890484 7000                        		moveq	#0,d0
00890486 102E 001D                   		move.b	obj_index(a6),d0
0089048A D040                        		add.w	d0,d0
0089048C 323B 0000                   		move.w	@Index(pc,d0.w),d1
00890490 4EBB 1000                   		jsr	@Index(pc,d1.w)
00890494                             		
00890494 6100 DEE4                   		bsr	Object_OffCheck
00890498 203C 04D0 0000                		move.l	#(varVramPikudo<<16),d0
0089049E 223C 0000 0000              		move.l	#ani_pikudo,d1
008904A4 6100 DF40                  		bsr	Object_Animate
008904A8                            		
008904A8 203C 04D0 0000                 		move.l	#(varVramPikudo<<16),d0
008904AE 102E 0020                   		move.b	obj_frame(a6),d0
008904B2 223C 0000 0000             		move.l	#map_pikudo,d1
008904B8 6000 DB82                   		bra	Object_Show
008904BC                             		
008904BC                            ; ------------------------------------------------
008904BC                            
008904BC                            @Index:
008904BC 0000                       		dc.w @Init-@Index
008904BE 0000                       		dc.w @Stand-@Index
008904C0 0000                       		dc.w @Attack-@Index
008904C2                            		even
008904C2                            		
008904C2                            ; =================================================================
008904C2                            ; ------------------------------------------------
008904C2                            ; Index $00: Init
008904C2                            ; ------------------------------------------------
008904C2                            
008904C2                            @Init:
008904C2 062E 0001 001D             		add.b	#1,obj_index(a6)
008904C8 422E 001A                  		clr.b	obj_anim_id(a6)
008904CC 422E 0020                  		clr.b	obj_frame(a6)
008904D0 2D7C 0101 0202 0004        		move.l	#$01010202,obj_size(a6)
008904D8 42AE 0010                  		clr.l	obj_x_spd(a6)
008904DC 3D7C 00AA 0024             		move.w	#varTimerWait,timerpik1(a6)
008904E2 3D6E 0008 0028             		move.w	obj_x(a6),lastx(a6)
008904E8 3D6E 000C 002A             		move.w	obj_y(a6),lasty(a6)
008904EE                            		
008904EE                            ; =================================================================
008904EE                            ; ------------------------------------------------                  
008904EE                            ; Index $01: Stand
008904EE                            ; ------------------------------------------------
008904EE                            
008904EE                            @Stand:
008904EE 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
008904F4 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
008904FA 302C 0008                  		move.w	obj_x(a4),d0
008904FE B06E 0008                  		cmp.w	obj_x(a6),d0
00890502 6D00                       		blt.s	@leftside
00890504 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
0089050A                            @leftside:
0089050A                            
0089050A 6100 E132                  		bsr	object_FindCol_Ceiling
0089050E 4A00                       		tst.b	d0
00890510 6600                       		bne.s	@ignore
00890512 6100 E51E                  		bsr	object_FindCol_CeilingSides
00890516 4A00                       		tst.b	d0
00890518 6600                       		bne.s	@ignore	
0089051A 4A01                       		tst.b	d1
0089051C 6600                       		bne.s	@ignore
0089051E                            		
0089051E 302E 000C                  		move.w	obj_y(a6),d0
00890522 B06E 002A                  		cmp.w	lasty(a6),d0
00890526 6F00                       		ble.s	@ignore
00890528                            		
00890528                            ; 		
00890528                            ; 		bsr	object_FindPrz_CeilingSides
00890528                            ; 		move.l	d0,d2
00890528                            ; 		bsr	object_FindPrz_CeilingSides
00890528                            ; 		or.l	d1,d0
00890528                            ; 		or.l	d2,d0
00890528                            ; 		btst	#7,d0
00890528                            ; 		bne.s	@cont2
00890528                            ; 		btst	#6,d0
00890528                            ; 		bne.s	@cont2
00890528                            ; 		tst.b	d0
00890528                            ; 		bne.s	@ignore
00890528                            ; @cont2:
00890528                            
00890528 046E 0001 000C             		sub.w	#1,obj_y(a6)
0089052E                            @ignore:
0089052E                            
0089052E 046E 0001 0024             		sub.w	#1,timerpik1(a6)
00890534 6A00                       		bpl.s	@waitpik1
00890536                            		
00890536 203C 0000 0000               		move.l	#SndSfx_BEEBUZZ,d0
0089053C 7202                         		moveq 	#2,d1
0089053E 7401                         		moveq	#1,d2
00890540 6100 9440                    		bsr	Audio_Track_play
00890544                              		
00890544 1D7C 0002 001D             		move.b	#2,obj_index(a6)
0089054A 3D7C 001E 0024             		move.w	#varTimerAttck,timerpik1(a6)
00890550 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
00890556 2D7C FFFE 1000 0010        		move.l	#-$1F000,obj_x_spd(a6)
0089055E 2D7C 0002 0000 0014        		move.l	#$20000,obj_y_spd(a6)
00890566 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
0089056C 6700                       		beq.s	@waitpik1
0089056E 44AE 0010                  		neg.l	obj_x_spd(a6)
00890572                            
00890572                            @waitpik1:
00890572 6000 0000                  		bra	@check_touch
00890576                            		
00890576                            ; =================================================================
00890576                            ; ------------------------------------------------                  
00890576                            ; Index $02: Attack
00890576                            ; ------------------------------------------------
00890576                            
00890576                            @Attack:
00890576 2C2E 0010                  		move.l	obj_x_spd(a6),d6
0089057A 2E2E 0014                  		move.l	obj_y_spd(a6),d7
0089057E                            		
0089057E DDAE 0008                  		add.l	d6,obj_x(a6)
00890582 DFAE 000C                  		add.l	d7,obj_y(a6)
00890586                            		
00890586                            ; Check for floor or walls
00890586                            
00890586 6100 DF7C                  		bsr	object_FindCol_Floor
0089058A 4A00                       		tst.b	d0
0089058C 6600                       		bne.s	@forceend
0089058E 6100 DF68                  		bsr	object_FindPrz_Floor
00890592 0800 0007                  		btst	#7,d0
00890596 6600                       		bne.s	@cont
00890598 0800 0006                  		btst	#6,d0
0089059C 6600                       		bne.s	@cont	
0089059E 4A00                       		tst.b	d0
008905A0 6600                       		bne.s	@forceend
008905A2                            @cont:
008905A2                            
008905A2 6100 DFCE                  		bsr	object_FindCol_Wall
008905A6 4A00                       		tst.b	d0
008905A8 6684                       		bne.s	@ignore
008905AA 6100 E216                  		bsr	object_FindCol_WallSides
008905AE 4A00                       		tst.b	d0
008905B0 6600 FF7C                  		bne	@ignore		
008905B4 4A01                       		tst.b	d1
008905B6 6600 FF76                  		bne	@ignore
008905BA                            		
008905BA 6100 E1FA                  		bsr	object_FindPrz_WallSides
008905BE 2400                       		move.l	d0,d2
008905C0 6100 E1F4                  		bsr	object_FindPrz_WallSides
008905C4 8081                       		or.l	d1,d0
008905C6 8082                       		or.l	d2,d0
008905C8 0800 0007                  		btst	#7,d0
008905CC 6600                       		bne.s	@cont3
008905CE 0800 0006                  		btst	#6,d0
008905D2 6600                       		bne.s	@cont3
008905D4 4A00                       		tst.b	d0
008905D6 6600                       		bne.s	@forceend
008905D8                            @cont3:
008905D8                            
008905D8 046E 0001 0024             		sub.w	#1,timerpik1(a6)
008905DE 6A00                       		bpl.s	@waitpik2
008905E0 6000                       		bra.s	@end2
008905E2                            @forceend:
008905E2 046E 0008 002A             		sub.w	#8,lasty(a6)
008905E8                            @end2:
008905E8                            
008905E8 1D7C 0001 001D             		move.b	#1,obj_index(a6)
008905EE 3D7C 00AA 0024             		move.w	#varTimerWait,timerpik1(a6)
008905F4 422E 001A                  		clr.b	obj_anim_id(a6)
008905F8 4286                       		clr.l	d6
008905FA 4287                       		clr.l	d7
008905FC                            @waitpik2:
008905FC                            
008905FC 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00890600 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00890604 6000 0000                  		bra	@check_touch
00890608                            		
00890608                            ; =================================================================
00890608                            ; ------------------------------------------------
00890608                            ; Subs
00890608                            ; ------------------------------------------------
00890608                            
00890608                            ; @Go_Stand:
00890608                            ; 		clr.l	obj_x_spd(a6)
00890608                            ; 		clr.b	obj_anim_id(a6)
00890608                            ; 		move.b	#1,obj_index(a6)
00890608                            ; 		rts
00890608                            ; 	
00890608                            ; ; --------------------------------------
00890608                            ; 
00890608                            ; @Go_Walk:
00890608                            ; 		move.l	#$4000,obj_x_spd(a6)
00890608                            ; 		btst	#bitobj_flipH,obj_status(a6)
00890608                            ; 		bne.s	@right
00890608                            ; 		move.l	#-$4000,obj_x_spd(a6)
00890608                            ; @right:
00890608                            ; 		move.b	#1,obj_anim_id(a6)
00890608                            ; 		move.b	#2,obj_index(a6)
00890608                            ; 		rts
00890608                            ; 	
00890608                            ; ; ------------------------------------------------
00890608                            ; ; Pyhsics
00890608                            ; ; ------------------------------------------------
00890608                            ; 
00890608                            ; @Pyhsics:
00890608                            ; 		lea	(RAM_LvlPlanes),a5
00890608                            ;  		move.l	obj_x_spd(a6),d6
00890608                            ;  		move.l	obj_y_spd(a6),d7
00890608                            ;  		
00890608                            ;  		add.l	d6,obj_x(a6)
00890608                            ;  		bsr	@WallCheck
00890608                            ; 		
00890608                            ; ; ----------------------------------
00890608                            ; 
00890608                            ;   		add.l	#$8000,d7
00890608                            ;   		cmp.l	#$40000,d7
00890608                            ;   		blt.s	@low_y
00890608                            ;   		move.l	#$40000,d7
00890608                            ; @low_y:
00890608                            ;   		add.l	d7,obj_y(a6)
00890608                            ;   		
00890608                            ; ; 		lea	(RAM_LvlPlanes),a5
00890608                            ; ; 		move.w	lvl_size_y(a5),d0
00890608                            ; ; 		lsl.w	#4,d0
00890608                            ; ; 		move.w	obj_y(a6),d1
00890608                            ; ; 		moveq	#0,d2
00890608                            ; ; 		move.b	obj_size+2(a6),d2
00890608                            ; ; 		lsl.w	#3,d2
00890608                            ; ; 		sub.w	d2,d1
00890608                            ; ; 		cmp.w	d0,d1
00890608                            ; ; 		bge	@delete
00890608                            ; ; 		
00890608                            ;   		tst.l	d7
00890608                            ;   		bmi.s	@no_floor
00890608                            ;   
00890608                            ; 		bsr	object_FindPrz_Floor
00890608                            ; 		move.l	d0,d2
00890608                            ; 		tst.b	d0
00890608                            ; 		bne.s	@from_prize
00890608                            ;  		bsr 	object_FindPrz_FloorSides
00890608                            ; 		tst.b	d0
00890608                            ; 		bne	@from_prize;@swap_dir_wl
00890608                            ; 		move.l	d1,d0
00890608                            ; 		tst.b	d0
00890608                            ; 		bne	@from_prize
00890608                            ; 		
00890608                            ; 		bsr	object_FindCol_Floor
00890608                            ; 		move.l	d0,d2
00890608                            ; 		tst.b	d0
00890608                            ; 		bne.s	@set_floor
00890608                            ;  		bsr 	object_FindCol_FloorSides
00890608                            ; 		tst.b	d0
00890608                            ; 		bne	@set_floor;@swap_dir_wl
00890608                            ; 		move.l	d1,d0
00890608                            ; 		tst.b	d0
00890608                            ; 		beq	@no_floor
00890608                            ; 		
00890608                            ; 		bra.s	@set_floor
00890608                            ; ; @swap_dir_wl:
00890608                            ; ; 		neg.l	d6
00890608                            ; ; 		bchg	#bitobj_flipH,obj_status(a6)
00890608                            ; ; 		bra.s	@no_floor
00890608                            ; 
00890608                            ; @from_prize:
00890608                            ; 		cmp.b	#$40,d0
00890608                            ; 		bge.s	@set_floor
00890608                            ; 		move.b	#1,d0
00890608                            ; 		
00890608                            ; @set_floor:
00890608                            ;   		bsr 	object_SetCol_Floor
00890608                            ;   		
00890608                            ; @no_floor:
00890608                            ; 
00890608                            ;  		move.l	d6,obj_x_spd(a6)
00890608                            ;  		move.l	d7,obj_y_spd(a6)
00890608                             		
00890608                            ; ----------------------------------
00890608                            ; Check if touched
00890608                            ; ----------------------------------
00890608                            
00890608                            @check_touch:
00890608 6100 E654                  		bsr	objTouch_Top
0089060C 4A00                       		tst.b	d0
0089060E 6600                       		bne.s	@touch_flag
00890610 6100 E6EA                  		bsr	objTouch_Bottom
00890614 4A00                       		tst.b	d0
00890616 6600                       		bne.s	@touch_flag
00890618                            		
00890618 6100 E782                  		bsr	objTouch_Sides
0089061C 4A00                       		tst.b	d0
0089061E 6600                       		bne.s	@touch_flag;_side
00890620 4840                       		swap	d0
00890622 4A00                       		tst.b	d0
00890624 6600                       		bne.s	@touch_flag;_side
00890626 4E75                       		rts
00890628                            		
00890628                            ; -----------------------------------
00890628                            
00890628                            @touch_flag:
00890628 6100 E956                  		bsr	objPlyrHurtKill
0089062C 6700                       		beq.s	@return
0089062E                            		
0089062E 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
00890634 323C 04D0                     		move.w	#varVramPikudo,d1
00890638 142E 0020                   		move.b	obj_frame(a6),d2
0089063C 203C 0000 0000             		move.l	#map_pikudo,d0
00890642 260C                       		move.l	a4,d3
00890644 6100 ECE2                  		bsr	objAction_SetStomp
00890648 6000 DD10                  		bra	Object_IsGone
0089064C                            @return:
0089064C 4E75                       		rts
0089064E                            		
0089064E                            ; =================================================================
0089064E                            
0089064E                            @WallCheck:
0089064E 6100 DF16                     		bsr	object_FindPrz_Wall
00890652 4A00                          		tst.b	d0
00890654 6600                          		bne.s	@foundprzwl
00890656 6100 DF1A                    		bsr	object_FindCol_Wall
0089065A 4A00                         		tst.b	d0
0089065C 6700                         		beq.s	@chk_right
0089065E                            @foundprzwl:
0089065E 0800 0006                    		btst	#6,d0
00890662 6600                         		bne.s	@chk_right
00890664                            ;    		cmp.b	#2,d0
00890664                            ;    		blt.s	@chk_right
00890664 6100 E5DC                    		bsr	object_SetCol_Wall
00890668                            ;    		bra.s	@endchk
00890668                            @chk_right:
00890668                            
00890668                            		;TODO: Prize check
00890668                            ;   		bsr	object_FindPrz_WallSides
00890668                            ;   		tst.b	d0
00890668                            ;   		bne.s	@przrotx
00890668                            ;   		move.l	d1,d0
00890668                            ;   		tst.b	d0
00890668                            ;   		bne.s	@przrotx
00890668                            
00890668 6100 E158                    		bsr	object_FindCol_WallSides
0089066C 0800 0006                    		btst	#6,d0
00890670 6600                         		bne.s	@endchk
00890672 0801 0006                    		btst	#6,d1
00890676 6600                         		bne.s	@endchk
00890678 4A00                         		tst.b	d0
0089067A 6600                         		bne.s	@leftws
0089067C 4A01                         		tst.b	d1
0089067E 6600                         		bne.s	@rightws
00890680 6000                          		bra.s	@endchk
00890682                            @przrotx:
00890682                            	
00890682                            @leftws:
00890682 0C01 0002                  		cmp.b	#2,d1
00890686 6C00                       		bge.s	@endchk
00890688 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
0089068E 6700                       		beq.s	@endchk
00890690 6000                       		bra.s	@rotatex
00890692                            @rightws:
00890692 0C01 0002                  		cmp.b	#2,d1
00890696 6C00                       		bge.s	@endchk
00890698 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
0089069E 6600                       		bne.s	@endchk
008906A0                            @rotatex:
008906A0 4486                        		neg.l	d6
008906A2 086E 0000 001E              		bchg	#bitobj_flipH,obj_status(a6)
008906A8                            @endchk:
008906A8 4E75                       		rts
008906AA                            
008906AA                            ; ------------------------------------------------
008906AA                            ; Data
008906AA                            ; ------------------------------------------------
008906AA                            		
008906AA                            ; ----------------------------------------
008906AA                            
008906AA                            ani_pikudo:
008906AA 0000                       		dc.w @Idle-ani_pikudo
008906AC 0000                       		dc.w @Attack-ani_pikudo
008906AE                            		even
008906AE                            @Idle:
008906AE 03                          		dc.b 3
008906AF 0001 0001 0001 0001 0001+   		dc.b 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2
008906CE 0100 0100 0100 0100 0100+   		dc.b 1,0,1,0,1,0,1,0,1,0,1
008906D9 FF                         		dc.b $FF
008906DA                            		even
008906DA                            @Attack:
008906DA 02                          		dc.b 2
008906DB 0304                        		dc.b 3,4
008906DD FF                         		dc.b $FF
008906DE                            		even
008906DE                            		even
008906DE                               		include	"engine/modes/level/data/objects/platform/code.asm"
008906DE                            ; =================================================================
008906DE                            ; Object
008906DE                            ; 
008906DE                            ; Platforms
008906DE                            ; =================================================================
008906DE                            
008906DE                            ; =================================================================
008906DE                            ; ------------------------------------------------
008906DE                            ; Variables
008906DE                            ; ------------------------------------------------
008906DE                            
008906DE =00002530                  varVramPlatfrm	equ	$2000|$530
008906DE                            
008906DE                            ; =================================================================
008906DE                            ; ------------------------------------------------
008906DE                            ; RAM
008906DE                            ; ------------------------------------------------
008906DE                            
008906DE                            		rsset obj_ram
008906DE =00000024                  last_x		rs.w	1
008906DE =00000026                  last_y		rs.w	1
008906DE =00000028                  tanvalue	rs.w	1
008906DE                            
008906DE                            ; =================================================================
008906DE                            ; ------------------------------------------------
008906DE                            ; Code start
008906DE                            ; ------------------------------------------------
008906DE                            
008906DE                            Obj_Platform:
008906DE 7000                        		moveq	#0,d0
008906E0 102E 001D                   		move.b	obj_index(a6),d0
008906E4 D040                        		add.w	d0,d0
008906E6 323B 0000                   		move.w	@Index(pc,d0.w),d1
008906EA 4EBB 1000                   		jsr	@Index(pc,d1.w)
008906EE                             		
008906EE                             		;TODO: si hago este check se 
008906EE                             		;desincronizan
008906EE                            ;  		bsr	Object_OffCheck
008906EE                            
008906EE                            ;    		move.l	#(varVramPlatfrm<<16),d0
008906EE                            ;  		move.l	#ani_chamoy,d1
008906EE                            ; 		bsr	Object_Animate
008906EE 203C 2530 0000              		move.l	#(varVramPlatfrm<<16),d0
008906F4 102E 0020                   		move.b	obj_frame(a6),d0
008906F8 223C 0000 0000             		move.l	#objMap_platform,d1
008906FE 6000 D93C                   		bra	Object_Show
00890702                             		
00890702                            ; =================================================================
00890702                            ; ------------------------------------------------
00890702                            ; Code index
00890702                            ; ------------------------------------------------
00890702                            
00890702                            @Index:
00890702 0000                       		dc.w	@Init-@Index
00890704 0000                       		dc.w	@Main-@Index
00890706                            		even
00890706                            		
00890706                            ; =================================================================
00890706                            ; ------------------------------------------------
00890706                            ; Sub-id
00890706                            ; ------------------------------------------------
00890706                            
00890706                            @id_list:
00890706 0000 0000                  		dc.w @left_right_sin-@id_list,0
0089070A 0303 0100                  		dc.l $03030100
0089070E 0000 0000                  		dc.w @left_right_cos-@id_list,0
00890712 0303 0100                  		dc.l $03030100
00890716 0000 0000                  		dc.w @up_down_sin-@id_list,0
0089071A 0303 0100                  		dc.l $03030100
0089071E 0000 0000                  		dc.w @up_down_cos-@id_list,0
00890722 0303 0100                  		dc.l $03030100
00890726 0000 0000                  		dc.w @rotate_right-@id_list,0
0089072A 0303 0100                  		dc.l $03030100
0089072E 0000 0000                  		dc.w @rotate_left-@id_list,0
00890732 0303 0100                  		dc.l $03030100	
00890736 0000 0000                  		dc.w @stepfall-@id_list,0
0089073A 0303 0100                  		dc.l $03030100
0089073E                            		
0089073E                            ; =================================================================
0089073E                            ; ------------------------------------------------
0089073E                            ; Index $00: Init
0089073E                            ; ------------------------------------------------
0089073E                            
0089073E                            @Init:
0089073E 062E 0001 001D             		add.b	#1,obj_index(a6)
00890744 2D7C 0303 0001 0004        		move.l	#$03030001,obj_size(a6)		;failsafe
0089074C 2D7C 0000 8000 0014        		move.l	#$8000,obj_y_spd(a6)
00890754 3D6E 0008 0024             		move.w	obj_x(a6),last_x(a6)
0089075A 3D6E 000C 0026             		move.w	obj_y(a6),last_y(a6)
00890760 422E 0020                  		clr.b	obj_frame(a6)
00890764                            		
00890764                            ; =================================================================
00890764                            ; ------------------------------------------------                  
00890764                            ; Index $01: Main
00890764                            ; ------------------------------------------------
00890764                            
00890764                            @Main:
00890764 7A00                        		moveq	#0,d5
00890766                             		
00890766 7000                       		moveq	#0,d0
00890768 102E 001F                  		move.b	obj_subid(a6),d0
0089076C E748                       		lsl.w	#3,d0
0089076E 2D7B 009A 0004              		move.l	@id_list+4(pc,d0.w),obj_size(a6)
00890774 323B 0090                  		move.w	@id_list(pc,d0.w),d1
00890778 4EBB 108C                  		jsr	@id_list(pc,d1.w)
0089077C                             		
0089077C 6100 E4E0                  		bsr	objTouch_Top
00890780 200C                       		move.l	a4,d0
00890782 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
00890788 6600                       		bne.s	@return
0089078A 4A00                       		tst.b	d0
0089078C 6700                       		beq.s	@return
0089078E 0C2C 0002 001D             		cmp.b	#varPlyrMdDead,obj_index(a4)
00890794 6700                       		beq.s	@return
00890796 6100 E6E4                  		bsr	objPlyrSetFloor
0089079A 4AAC 0014                  		tst.l	obj_y_spd(a4)
0089079E 6B00                       		bmi.s	@return
008907A0 9B6C 0008                     		sub.w	d5,obj_x(a4)
008907A4                            @return:
008907A4 4E75                       		rts
008907A6                             	
008907A6                            ; ---------------------------
008907A6                            ; Left/Right
008907A6                            ; ---------------------------
008907A6                            	
008907A6                            @left_right_cos:
008907A6 302E 0028                    		move.w	tanvalue(a6),d0
008907AA                            
008907AA 6000 0000                    		bra	@do_lr
008907AE                              
008907AE                            @left_right_sin:
008907AE 302E 0028                    		move.w	tanvalue(a6),d0
008907B2 4440                         		neg.w	d0
008907B4                              		
008907B4                            @do_lr:
008907B4 6100 8A3E                    		bsr	CalcSine
008907B8 E640                         		asr.w	#3,d0
008907BA 342E 0024                    		move.w	last_x(a6),d2
008907BE D440                         		add.w	d0,d2
008907C0 3A2E 0008                    		move.w	obj_x(a6),d5
008907C4 9A42                         		sub.w	d2,d5
008907C6 3D42 0008                    		move.w	d2,obj_x(a6)
008907CA                              		
008907CA 066E 0001 0028              		add.w	#1,tanvalue(a6)
008907D0 4E75                         		rts
008907D2                             
008907D2                            ; ---------------------------
008907D2                            ; Up/Down
008907D2                            ; ---------------------------
008907D2                            
008907D2                            @up_down_cos:
008907D2 302E 0028                  		move.w	tanvalue(a6),d0
008907D6 4440                       		neg.w	d0
008907D8 6000                       		bra.s	@do_ud
008907DA                            @up_down_sin:
008907DA 302E 0028                    		move.w	tanvalue(a6),d0
008907DE                            @do_ud:
008907DE 6100 8A14                    		bsr	CalcSine
008907E2 E640                         		asr.w	#3,d0
008907E4 342E 0026                    		move.w	last_y(a6),d2
008907E8 D440                         		add.w	d0,d2
008907EA                            ;   		move.w	obj_y(a6),d4
008907EA                            ;   		sub.w	d2,d4
008907EA 3D42 000C                     		move.w	d2,obj_y(a6)
008907EE                            
008907EE 066E 0001 0028              		add.w	#1,tanvalue(a6)
008907F4 4E75                        		rts
008907F6                             		
008907F6                            ; ---------------------------
008907F6                            ; rotate_right
008907F6                            ; ---------------------------
008907F6                            
008907F6                            @rotate_right:
008907F6                            ;   		move.w	#$20,d4
008907F6                              		
008907F6 302E 0028                    		move.w	tanvalue(a6),d0
008907FA 6100 89F8                    		bsr	CalcSine
008907FE C1FC 0040                    		muls	#$40,d0
00890802 E080                         		asr.l	#8,d0
00890804 342E 0024                    		move.w	last_x(a6),d2
00890808 D440                         		add.w	d0,d2
0089080A 3A2E 0008                    		move.w	obj_x(a6),d5
0089080E 9A42                         		sub.w	d2,d5
00890810 3D42 0008                    		move.w	d2,obj_x(a6)
00890814                               		
00890814 302E 0028                    		move.w	tanvalue(a6),d0
00890818 E348                         		lsl.w	#1,d0
0089081A 6100 89D8                    		bsr	CalcSine
0089081E C3FC 0030                    		muls	#$30,d1
00890822 E081                         		asr.l	#8,d1
00890824 342E 0026                    		move.w	last_y(a6),d2
00890828 D441                         		add.w	d1,d2
0089082A 3D42 000C                     		move.w	d2,obj_y(a6)
0089082E                            
0089082E 066E 0001 0028              		add.w	#1,tanvalue(a6)
00890834 4E75                        		rts
00890836                             		
00890836                            ; ---------------------------
00890836                            ; rotate_left
00890836                            ; ---------------------------
00890836                            
00890836                            @rotate_left:
00890836 066E 0001 0028              		add.w	#1,tanvalue(a6)
0089083C 4E75                        		rts
0089083E                            
0089083E                            ; ---------------------------
0089083E                            ; StepFall
0089083E                            ; ---------------------------
0089083E                            
0089083E                            @stepfall:
0089083E 6100 E41E                  		bsr	objTouch_Top
00890842 4A00                       		tst.b	d0
00890844 6700 FF5E                  		beq	@return
00890848 200C                       		move.l	a4,d0
0089084A 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
00890850 6600 FF52                  		bne	@return
00890854 4AAC 0014                  		tst.l	obj_y_spd(a4)
00890858 6B00 FF4A                  		bmi	@return
0089085C                            		
0089085C 066E 0003 000C             		add.w	#3,obj_y(a6)
00890862 4E75                       		rts
00890862 4E75                       		rts
00890864                               		include	"engine/modes/level/data/objects/prize/code.asm"
00890864                            ; =================================================================
00890864                            ; Object
00890864                            ; 
00890864                            ; The prize
00890864                            ; =================================================================
00890864                            
00890864                            ; =================================================================
00890864                            ; ------------------------------------------------
00890864                            ; Variables
00890864                            ; ------------------------------------------------
00890864                            
00890864 =0000C5A8                  vramCoinRed	equ	$C000|$5A8
00890864 =0000C5AC                  vramCoinBlue	equ	$C000|$5AC
00890864 =0000C5B0                  vram1up		equ	$C000|$5B0
00890864 =0000C594                  vramJmpBlock	equ	$C000|$594
00890864                            
00890864                            ; =================================================================
00890864                            ; ------------------------------------------------
00890864                            ; RAM
00890864                            ; ------------------------------------------------
00890864                            
00890864                            		rsset obj_ram
00890864 =00000024                  this_pos	rs.l 1			; Block type and X/Y position
00890864 =00000028                  this_vram	rs.w 1			; Vram (top left)
00890864 =0000002A                  this_counter	rs.w 1			; Counter (coins, etc.)
00890864                            
00890864 =0000002C                  y_coin_spd	rs.l 1
00890864 =00000030                  y_pos_coin	rs.l 1
00890864 =00000034                  x_pos_main	rs.w 1
00890864 =00000036                  y_pos_main	rs.w 1
00890864 =00000038                  x_pos_l		rs.w 1
00890864 =0000003A                  x_pos_r		rs.w 1
00890864 =0000003C                  tmr_1		rs.w 1
00890864 =0000003E                  block_flags	rs.b 1
00890864                            
00890864                            ; =================================================================
00890864                            ; ------------------------------------------------
00890864                            ; Code start
00890864                            ; ------------------------------------------------
00890864                            
00890864                            obj_prize:
00890864 7000                        		moveq	#0,d0
00890866 102E 001D                   		move.b	obj_index(a6),d0
0089086A D040                        		add.w	d0,d0
0089086C 323B 0000                   		move.w	@Index(pc,d0.w),d1
00890870 4EFB 1000                   		jmp	@Index(pc,d1.w)
00890874                             		
00890874                            ; ------------------------------------------------
00890874                            
00890874                            @Index:
00890874 0000                       		dc.w	@Init-@Index
00890876 0000                       		dc.w	@Main-@Index
00890878                            		even
00890878                            		
00890878                            ; =================================================================
00890878                            ; ------------------------------------------------
00890878                            ; Index $00: Init
00890878                            ; ------------------------------------------------
00890878                            
00890878                            @Init:
00890878 062E 0001 001D             		add.b	#1,obj_index(a6)
0089087E 202E 0024                  		move.l	this_pos(a6),d0
00890882 4840                        		swap	d0
00890884 0240 FFF0                   		and.w	#$FFF0,d0
00890888 3D40 0008                   		move.w	d0,obj_x(a6)
0089088C 4840                        		swap	d0
0089088E E848                        		lsr.w	#4,d0
00890890 0240 FFF0                   		and.w	#$FFF0,d0
00890894 3D40 000C                   		move.w	d0,obj_y(a6)
00890898                            
00890898 202E 0024                   		move.l	this_pos(a6),d0
0089089C 6100 D128                  		bsr	Level_HidePrize
008908A0                            
008908A0 2D7C FFFC 0000 0014         		move.l	#-$40000,obj_y_spd(a6)
008908A8 4A2E 001F                   		tst.b	obj_subid(a6)
008908AC 6700                        		beq.s	@not_brick
008908AE 2D7C FFFE 0000 0014         		move.l	#-$20000,obj_y_spd(a6)
008908B6                            @not_brick:
008908B6 3D6E 0008 0034              		move.w	obj_x(a6),x_pos_main(a6)
008908BC 302E 000C                   		move.w	obj_y(a6),d0
008908C0 3D40 0036                   		move.w	d0,y_pos_main(a6)
008908C4 0440 0010                   		sub.w	#$10,d0
008908C8 4840                        		swap	d0
008908CA 2D40 0030                   		move.l	d0,y_pos_coin(a6)
008908CE                             		
008908CE 3D6E 0008 0038              		move.w	obj_x(a6),x_pos_l(a6)
008908D4 3D6E 0008 003A              		move.w	obj_x(a6),x_pos_r(a6)
008908DA 066E 0008 003A              		add.w	#8,x_pos_r(a6)
008908E0 2D7C FFFC 0000 002C         		move.l	#-$40000,y_coin_spd(a6)
008908E8                             		
008908E8 2D7C 0101 0101 0004         		move.l	#$01010101,obj_size(a6)
008908F0 08EE 0006 001E              		bset	#bitobj_hit,obj_status(a6)
008908F6                             		
008908F6                            ; =================================================================
008908F6                            ; ------------------------------------------------                  
008908F6                            ; Index $01: Main
008908F6                            ; ------------------------------------------------
008908F6                            
008908F6                            @Main:
008908F6 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
008908FC 7000                        		moveq	#0,d0
008908FE 102E 001F                   		move.b	obj_subid(a6),d0
00890902 0200 007F                   		and.b	#$7F,d0
00890906 D040                        		add.w	d0,d0
00890908 323B 0000                   		move.w	@subtypes(pc,d0.w),d1
0089090C 4EFB 1000                   		jmp	@subtypes(pc,d1.w)
00890910                            		
00890910                            ; ------------------------------------------------
00890910                            ; Subs
00890910                            ; ------------------------------------------------
00890910                            
00890910                            @subtypes:
00890910 0000                       		dc.w @destroy-@subtypes		; $00 - Breakable block
00890912 0000                       		dc.w @bump_solid-@subtypes	; $01 - Bump, normal
00890914 0000                       		dc.w @bump_coin-@subtypes	; $02 - Bump, add red coin (1)
00890916 0000                       		dc.w @bump_coin_blue-@subtypes	; $03 - Bump, add blue coin (2)
00890918 0000                       		dc.w @bump_1up-@subtypes	; $04 - Bump, add extra life
0089091A 0000                       		dc.w @trampoline-@subtypes	; $05 - Trampoline animation
0089091C                            		
0089091C                            ; ------------------------------------------------
0089091C                            ; Return
0089091C                            ; ------------------------------------------------
0089091C                            
0089091C                            @return:
0089091C 4E75                       		rts
0089091E                            		
0089091E                            ; ------------------------------------------------
0089091E                            ; Destroy block
0089091E                            ; ------------------------------------------------
0089091E                            
0089091E                            @destroy:
0089091E 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00890922                            		
00890922 223C 0000 0000             		move.l	#$0000,d1
00890928 4841                       		swap	d1
0089092A 322E 0028                  		move.w	this_vram(a6),d1
0089092E 0041 8000                  		or.w	#$8000,d1
00890932                            		
00890932 362E 003A                  		move.w	x_pos_r(a6),d3
00890936 066E 0001 003A             		add.w	#1,x_pos_r(a6)
0089093C 4843                       		swap	d3
0089093E 342E 0038                  		move.w	x_pos_l(a6),d2
00890942 046E 0001 0038             		sub.w	#1,x_pos_l(a6)
00890948 4842                       		swap	d2
0089094A                            	
0089094A 2002                       		move.l	d2,d0
0089094C 302E 000C                  		move.w	obj_y(a6),d0
00890950 0480 0006 0000             		sub.l	#$60000,d0
00890956 0440 0010                  		sub.w	#$10,d0
0089095A 6100 D762                  		bsr	Object_ExtSprite
0089095E 2003                       		move.l	d3,d0
00890960 0641 0002                   		add.w	#2,d1
00890964 302E 000C                  		move.w	obj_y(a6),d0
00890968 0680 0004 0000             		add.l	#$40000,d0	
0089096E 0440 0014                  		sub.w	#$14,d0
00890972 6100 D74A                  		bsr	Object_ExtSprite
00890976 2002                       		move.l	d2,d0
00890978 0441 0001                   		sub.w	#1,d1
0089097C 302E 000C                  		move.w	obj_y(a6),d0
00890980 0480 0001 0000             		sub.l	#$10000,d0
00890986 6100 D736                  		bsr	Object_ExtSprite
0089098A 2003                       		move.l	d3,d0
0089098C 0641 0002                   		add.w	#2,d1
00890990 302E 000C                  		move.w	obj_y(a6),d0
00890994 0680 0003 0000             		add.l	#$30000,d0
0089099A 0440 0004                  		sub.w	#4,d0
0089099E 6100 D71E                  		bsr	Object_ExtSprite
008909A2                            		
008909A2 0687 0000 4000              		add.l	#$4000,d7
008909A8 4A87                        		tst.l	d7
008909AA 6B00                        		bmi.s	@minus
008909AC 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
008909B2                            @minus:
008909B2 DFAE 000C                  		add.l	d7,obj_y(a6)
008909B6                            		
008909B6 322E 000C                  		move.w	obj_y(a6),d1
008909BA 303C 0140                  		move.w	#320,d0
008909BE D06D 0020                  		add.w	lvl_y(a5),d0
008909C2 B240                       		cmp.w	d0,d1
008909C4 6D00                       		blt.s	@lower_y
008909C6 4EF9 0088 E14A             		jmp	Object_Delete
008909CC                            @lower_y:
008909CC 2D47 0014                   		move.l	d7,obj_y_spd(a6)
008909D0 4E75                           		rts
008909D2                            		
008909D2                            ; ------------------------------------------------
008909D2                            ; Bump, nothing (or reveral hidden block)
008909D2                            ; ------------------------------------------------
008909D2                            
008909D2                            @bump_solid:
008909D2 2E2E 0014                  		move.l	obj_y_spd(a6),d7
008909D6 2C2E 002C                  		move.l	y_coin_spd(a6),d6
008909DA                            		
008909DA                            ; 		move.l	#$0005,d1
008909DA                            ; 		swap	d1
008909DA                            ; 		move.w	#vramCoinRed,d1
008909DA                            ;  		move.l	y_pos_coin(a6),d0
008909DA                            ;  		move.w	obj_x(a6),d0
008909DA                            ;  		swap	d0
008909DA                            ; 		bsr	Object_ExtSprite
008909DA                            		
008909DA 082E 0000 003E              		btst	#0,block_flags(a6)
008909E0 6600                        		bne.s	@stopblock
008909E2 223C 0000 0005             		move.l	#$0005,d1
008909E8 4841                       		swap	d1
008909EA 322E 0028                  		move.w	this_vram(a6),d1
008909EE 0041 8000                  		or.w	#$8000,d1
008909F2                            		
008909F2 302E 0008                  		move.w	obj_x(a6),d0
008909F6 4840                       		swap	d0
008909F8 302E 000C                  		move.w	obj_y(a6),d0
008909FC 6100 D6C0                  		bsr	Object_ExtSprite
00890A00 0687 0000 4000              		add.l	#$4000,d7
00890A06 4A87                        		tst.l	d7
00890A08 6B00                        		bmi.s	@minus2
00890A0A 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00890A10                            @minus2:
00890A10 DFAE 000C                  		add.l	d7,obj_y(a6)
00890A14                            @stopblock:
00890A14 0686 0000 4000              		add.l	#$4000,d6
00890A1A DDAE 0030                  		add.l	d6,y_pos_coin(a6)
00890A1E                            		
00890A1E 302E 000C                  		move.w	obj_y(a6),d0
00890A22 322E 0036                  		move.w	y_pos_main(a6),d1
00890A26 B041                       		cmp.w	d1,d0
00890A28 6F00                       		ble.s	@return3
00890A2A                            		
00890A2A 202E 0024                   		move.l	this_pos(a6),d0
00890A2E 6100 E8CE                  		bsr	Prize_Locate
00890A32                            ; 		move.b	#$F,d0
00890A32                            ; 		move.b	d0,(a3)
00890A32 6100 CFAE                   		bsr	Level_ShowPrize
00890A36 08EE 0000 003E              		bset	#0,block_flags(a6)
00890A3C 4EF9 0088 E14A              		jmp	Object_Delete
00890A42                             		
00890A42                            @return3:
00890A42                            
00890A42                            ; 		move.w	y_pos_coin(a6),d0
00890A42                            ; 		move.w	y_pos_main(a6),d1
00890A42                            ; 		sub.w	#$10,d1
00890A42                            ; 		cmp.w	d1,d0
00890A42                            ; 		ble.s	@return2
00890A42                            ;   		jmp	Object_Delete
00890A42                            ;   		
00890A42                            ; @return2:
00890A42 2D46 002C                  		move.l	d6,y_coin_spd(a6)
00890A46 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00890A4A 4E75                        		rts
00890A4C                             		
00890A4C                            ; ------------------------------------------------
00890A4C                            ; Bump block
00890A4C                            ; ------------------------------------------------
00890A4C                            
00890A4C                            @bump_1up:
00890A4C 223C 0000 0005             		move.l	#$0005,d1
00890A52 4841                       		swap	d1
00890A54 323C C5B0                  		move.w	#vram1up,d1
00890A58 202E 0030                   		move.l	y_pos_coin(a6),d0
00890A5C 302E 0008                   		move.w	obj_x(a6),d0
00890A60 4840                        		swap	d0
00890A62 6100 D65A                  		bsr	Object_ExtSprite
00890A66 6000                       		bra.s	@from_coin_blue
00890A68                            		
00890A68                            @bump_coin_blue:
00890A68 223C 0000 0005             		move.l	#$0005,d1
00890A6E 4841                       		swap	d1
00890A70 323C C5AC                  		move.w	#vramCoinBlue,d1
00890A74 202E 0030                   		move.l	y_pos_coin(a6),d0
00890A78 302E 0008                   		move.w	obj_x(a6),d0
00890A7C 4840                        		swap	d0
00890A7E 6100 D63E                  		bsr	Object_ExtSprite
00890A82 6000                       		bra.s	@from_coin_blue
00890A84                            		
00890A84                            @bump_coin:
00890A84 223C 0000 0005             		move.l	#$0005,d1
00890A8A 4841                       		swap	d1
00890A8C 323C C5A8                  		move.w	#vramCoinRed,d1
00890A90 202E 0030                   		move.l	y_pos_coin(a6),d0
00890A94 302E 0008                   		move.w	obj_x(a6),d0
00890A98 4840                        		swap	d0
00890A9A 6100 D622                  		bsr	Object_ExtSprite
00890A9E                            		
00890A9E                            @from_coin_blue:
00890A9E 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00890AA2 2C2E 002C                  		move.l	y_coin_spd(a6),d6
00890AA6                            		
00890AA6 082E 0000 003E              		btst	#0,block_flags(a6)
00890AAC 6600                        		bne.s	@stopblock2
00890AAE 223C 0000 0005             		move.l	#$0005,d1
00890AB4 4841                       		swap	d1
00890AB6 322E 0028                  		move.w	this_vram(a6),d1
00890ABA 0041 8000                  		or.w	#$8000,d1
00890ABE                            		
00890ABE 302E 0008                  		move.w	obj_x(a6),d0
00890AC2 4840                       		swap	d0
00890AC4 302E 000C                  		move.w	obj_y(a6),d0
00890AC8 6100 D5F4                  		bsr	Object_ExtSprite
00890ACC 0687 0000 4000              		add.l	#$4000,d7
00890AD2 4A87                        		tst.l	d7
00890AD4 6B00                        		bmi.s	@minus3
00890AD6 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00890ADC                            @minus3:
00890ADC DFAE 000C                  		add.l	d7,obj_y(a6)
00890AE0                            @stopblock2:
00890AE0 0686 0000 4000              		add.l	#$4000,d6
00890AE6 DDAE 0030                  		add.l	d6,y_pos_coin(a6)
00890AEA                            		
00890AEA 302E 000C                  		move.w	obj_y(a6),d0
00890AEE 322E 0036                  		move.w	y_pos_main(a6),d1
00890AF2 B041                       		cmp.w	d1,d0
00890AF4 6F00                       		ble.s	@return4
00890AF6                            		
00890AF6 202E 0024                   		move.l	this_pos(a6),d0
00890AFA 6100 E802                  		bsr	Prize_Locate
00890AFE 103C 000F                  		move.b	#$F,d0
00890B02 1680                       		move.b	d0,(a3)
00890B04 6100 CEDC                   		bsr	Level_ShowPrize
00890B08 08EE 0000 003E              		bset	#0,block_flags(a6)
00890B0E 4EF9 0088 E14A              		jmp	Object_Delete
00890B14                             		
00890B14                            @return4:
00890B14                            
00890B14 302E 0030                  		move.w	y_pos_coin(a6),d0
00890B18 322E 0036                  		move.w	y_pos_main(a6),d1
00890B1C 0441 0010                  		sub.w	#$10,d1
00890B20 B041                       		cmp.w	d1,d0
00890B22 6F00                       		ble.s	@return5
00890B24 4EF9 0088 E14A               		jmp	Object_Delete
00890B2A                              		
00890B2A                            @return5:
00890B2A 2D46 002C                  		move.l	d6,y_coin_spd(a6)
00890B2E 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00890B32 4E75                       		rts
00890B34                            		
00890B34                            ; ------------------------------------------------
00890B34                            ; Trampoline
00890B34                            ; ------------------------------------------------
00890B34                            
00890B34                            @trampoline:
00890B34 062E 0001 003C             		add.b	#1,tmr_1(a6)
00890B3A 0C2E 0010 003C             		cmp.b	#16,tmr_1(a6)
00890B40 6C00                       		bge.s	@finish
00890B42                            		
00890B42 223C 0000 0005             		move.l	#$0005,d1
00890B48 4841                       		swap	d1
00890B4A 323C C594                  		move.w	#vramJmpBlock,d1
00890B4E 102E 003D                  		move.b	tmr_1+1(a6),d0
00890B52 0600 0001                  		add.b	#1,d0
00890B56 0240 0002                  		and.w	#%10,d0
00890B5A E348                       		lsl.w	#1,d0
00890B5C D240                       		add.w	d0,d1
00890B5E 062E 0001 003D             		add.b	#1,tmr_1+1(a6)
00890B64                            		
00890B64 302E 0008                   		move.w	obj_x(a6),d0
00890B68 4840                        		swap	d0
00890B6A 302E 000C                   		move.w	obj_y(a6),d0
00890B6E 6000 D54E                  		bra	Object_ExtSprite
00890B72                            		
00890B72                            @finish:
00890B72 202E 0024                   		move.l	this_pos(a6),d0
00890B76 6100 CE6A                  		bsr	Level_ShowPrize
00890B7A 4EF9 0088 E14A               		jmp	Object_Delete
00890B80                              		
00890B80                            ; =================================================================
00890B80                            ; ------------------------------------------------
00890B80                            ; Subs
00890B80                            ; ------------------------------------------------
00890B80                            
00890B80                            		
00890B80                            ; =================================================================
00890B80                            		
00890B80                            		
00890B80                                		include	"engine/modes/level/data/objects/ball/code.asm" 
00890B80                            ; =================================================================
00890B80                            ; Object
00890B80                            ; 
00890B80                            ; A Ball
00890B80                            ; =================================================================
00890B80                            
00890B80                            ; =================================================================
00890B80                            ; ------------------------------------------------
00890B80                            ; Variables
00890B80                            ; ------------------------------------------------
00890B80                            
00890B80 =000044B8                  varVramBall	equ	$4000|$4B8
00890B80                            
00890B80                            ; =================================================================
00890B80                            ; ------------------------------------------------
00890B80                            ; Code start
00890B80                            ; ------------------------------------------------
00890B80                            
00890B80                            Obj_Ball:
00890B80 7000                        		moveq	#0,d0
00890B82 102E 001D                   		move.b	obj_index(a6),d0
00890B86 D040                        		add.w	d0,d0
00890B88 323B 0000                   		move.w	@Index(pc,d0.w),d1
00890B8C 4EBB 1000                   		jsr	@Index(pc,d1.w)
00890B90 6100 D7E8                   		bsr	Object_OffCheck
00890B94                             		
00890B94 203C 44B8 0000             		move.l	#(varVramBall<<16),d0
00890B9A 102E 0020                  		move.b	obj_frame(a6),d0
00890B9E 223C 0000 0000             		move.l	#map_Ball,d1
00890BA4 6000 D496                   		bra	Object_Show
00890BA8                             		
00890BA8                            ; ------------------------------------------------
00890BA8                            
00890BA8                            @Index:
00890BA8 0000                       		dc.w	@Init-@Index
00890BAA 0000                       		dc.w	@Main-@Index
00890BAC                            		even
00890BAC                            		
00890BAC                            ; =================================================================
00890BAC                            ; ------------------------------------------------
00890BAC                            ; Index $00: Init
00890BAC                            ; ------------------------------------------------
00890BAC                            
00890BAC                            @Init:
00890BAC 062E 0001 001D             		add.b	#1,obj_index(a6)
00890BB2 2D7C 0101 0101 0004        		move.l	#$01010101,obj_size(a6)
00890BBA 2D7C 0000 6000 0014        		move.l	#$6000,obj_y_spd(a6)
00890BC2 422E 0020                  		clr.b	obj_frame(a6)
00890BC6 422E 001C                  		clr.b	obj_anim_spd(a6)
00890BCA 2D7C FFFE 8000 0010        		move.l	#-$18000,obj_x_spd(a6)
00890BD2                            		
00890BD2                            ; =================================================================
00890BD2                            ; ------------------------------------------------                  
00890BD2                            ; Index $01: Main
00890BD2                            ; ------------------------------------------------
00890BD2                            
00890BD2                            @Main:
00890BD2                            ; 		bsr.s	@move_ball
00890BD2                            ; 		bra	@check_touch
00890BD2                            		
00890BD2                            ; =================================================================
00890BD2                            ; ------------------------------------------------
00890BD2                            ; Subs
00890BD2                            ; ------------------------------------------------
00890BD2                            
00890BD2                            @move_ball:
00890BD2 2C2E 0010                   		move.l	obj_x_spd(a6),d6
00890BD6 2E2E 0014                   		move.l	obj_y_spd(a6),d7
00890BDA DDAE 0008                   		add.l	d6,obj_x(a6)
00890BDE DFAE 000C                   		add.l	d7,obj_y(a6)
00890BE2                             		
00890BE2 4AAE 0008                   		tst.l	obj_x(a6)
00890BE6 6A00                        		bpl.s	@fine_x
00890BE8 42AE 0008                   		clr.l	obj_x(a6)
00890BEC 2C3C 0002 0000             		move.l	#$20000,d6
00890BF2                            @fine_x:
00890BF2 7000                       		moveq	#0,d0
00890BF4 3039 FFFF BC30             		move.w	(RAM_LvlPlanes+lvl_size_x),d0
00890BFA E948                       		lsl.w	#4,d0
00890BFC 4840                       		swap	d0
00890BFE 222E 0008                  		move.l	obj_x(a6),d1
00890C02 B280                       		cmp.l	d0,d1
00890C04 6D00                       		blt.s	@fine_x_r
00890C06 2C3C FFFE 0000             		move.l	#-$20000,d6
00890C0C                            @fine_x_r:
00890C0C                            	
00890C0C                            ; ----------------------------------
00890C0C                            
00890C0C 0687 0000 4000              		add.l	#$4000,d7
00890C12 0C87 0008 0000              		cmp.l	#$80000,d7
00890C18 6D00                        		blt.s	@low_y
00890C1A 2E3C 0008 0000              		move.l	#$80000,d7
00890C20                            @low_y:
00890C20                             		
00890C20 4A87                        		tst.l	d7
00890C22 6A00                        		bpl.s	@Freec
00890C24 6100 DA0C                  		bsr	object_FindPrz_Ceiling
00890C28 4A00                       		tst.b	d0
00890C2A 6600                       		bne.s	@FndCeilPrz
00890C2C 6100 DDF8                  		bsr	object_FindPrz_CeilingSides
00890C30 4A00                       		tst.b	d0
00890C32 6600                       		bne.s	@FndCeilPrz
00890C34 2001                       		move.l	d1,d0
00890C36 4A00                       		tst.b	d0
00890C38 6600                       		bne.s	@FndCeilPrz
00890C3A                            		
00890C3A 6100 DA02                  		bsr	object_FindCol_Ceiling
00890C3E 0800 0006                  		btst	#6,d0
00890C42 6600                       		bne.s	@Freec
00890C44 4A00                       		tst.b	d0
00890C46 6600                       		bne.s	@FoundCeiling
00890C48 6100 DDE8                  		bsr	object_FindCol_CeilingSides
00890C4C 4A00                       		tst.b	d0
00890C4E 6600                       		bne.s	@FoundCeiling
00890C50 2001                       		move.l	d1,d0
00890C52 4A00                       		tst.b	d0
00890C54 6600                       		bne.s	@FoundCeiling
00890C56 6000                       		bra.s	@Freec
00890C58                            @FndCeilPrz:
00890C58 0800 0007                  		btst	#7,d0
00890C5C 6600                       		bne.s	@Freec
00890C5E                            @FoundCeiling:
00890C5E 0800 0006                  		btst	#6,d0
00890C62 6600                       		bne.s	@Freec
00890C64                            		
00890C64 6100 DFAE                  		bsr	object_SetCol_Ceiling
00890C68                            		
00890C68                            ; ----------------------------------
00890C68                            
00890C68                            @Freec:	
00890C68 4A87                        		tst.l	d7
00890C6A 6B00                        		bmi.s	@Free
00890C6C                             	
00890C6C 6100 D88A                  		bsr	object_FindPrz_Floor
00890C70 0800 0007                  		btst	#7,d0
00890C74 6600                       		bne.s	@Free
00890C76 0800 0006                  		btst	#6,d0
00890C7A 6600                       		bne.s	@Free
00890C7C 4A00                       		tst.b	d0
00890C7E 6600                       		bne.s	@przflr
00890C80                            		
00890C80 6100 D882                  		bsr	object_FindCol_Floor
00890C84 0800 0006                  		btst	#6,d0
00890C88 6600                       		bne.s	@Free
00890C8A 4A00                       		tst.b	d0
00890C8C 6700                       		beq.s	@Free
00890C8E                            
00890C8E                            @przflr:
00890C8E 6100 DF0A                  		bsr	object_SetCol_Floor
00890C92 2E3C FFFA 0000              		move.l	#-$60000,d7
00890C98                            
00890C98 203C 0000 0000               		move.l	#SndSfx_PING,d0
00890C9E 7202                         		moveq 	#2,d1
00890CA0 7401                         		moveq	#1,d2
00890CA2 6100 8CDE                    		bsr	Audio_Track_play
00890CA6                            @Free:
00890CA6                            
00890CA6                            ; ----------------------------------------
00890CA6                            
00890CA6                            ;  		bsr	object_FindPrz_WallSides
00890CA6                            ; ;  		tst.l	d6
00890CA6                            ; ;  		bmi.s	@to_left
00890CA6                            ; 		btst	#7,d0
00890CA6                            ; 		bne.s	@FreeWall2
00890CA6                            ; 		btst	#6,d0
00890CA6                            ; 		bne.s	@FreeWall2
00890CA6                            ; 		tst.b	d0
00890CA6                            ; 		bne.s	@FoundW
00890CA6                            ; 		bra.s	@FreeWall2
00890CA6                            ; @to_left:
00890CA6                            ; ; 		tst.l	d6
00890CA6                            ; ; 		bpl.s	@FreeWall2
00890CA6                            ; 		btst	#7,d1
00890CA6                            ; 		bne.s	@FreeWall2
00890CA6                            ; 		btst	#6,d1
00890CA6                            ; 		bne.s	@FreeWall2
00890CA6                            ; 		tst.b	d1
00890CA6                            ; 		bne.s	@FoundW
00890CA6                            ; 		
00890CA6                            ; @FreeWall2:
00890CA6 6100 DB1A                  		bsr	object_FindCol_WallSides
00890CAA 4A86                       		tst.l	d6
00890CAC 6B00                       		bmi.s	@dontlft
00890CAE 4A00                        		tst.b	d0
00890CB0 6600                        		bne.s	@FoundW
00890CB2                            @dontlft:
00890CB2 4A86                       		tst.l	d6
00890CB4 6A00                       		bpl.s	@FreeWall
00890CB6 2001                       		move.l	d1,d0
00890CB8 4A00                         		tst.b	d0
00890CBA 6600                        		bne.s	@FoundW
00890CBC 6000                       		bra.s	@FreeWall
00890CBE                            
00890CBE                            @FoundW:
00890CBE 0C00 0002                  		cmp.b	#2,d0
00890CC2 6C00                       		bge.s	@FreeWall
00890CC4                            ; 		bsr	object_SetCol_Wall
00890CC4 4486                       		neg.l	d6
00890CC6 086E 0000 001E             		bchg	#bitobj_flipH,obj_status(a6)
00890CCC                            @FreeWall:
00890CCC                            
00890CCC                            ; ------------------------------------
00890CCC                            
00890CCC 042E 0001 001C              		sub.b	#1,obj_anim_spd(a6)
00890CD2 6A00                        		bpl.s	@plusanim
00890CD4 1D7C 0007 001C              		move.b	#7,obj_anim_spd(a6)
00890CDA 062E 0001 0020               		add.b	#1,obj_frame(a6)
00890CE0 022E 0003 0020              		and.b	#%11,obj_frame(a6)
00890CE6                            @plusanim:
00890CE6                            
00890CE6                            ; ------------------------------------
00890CE6                            
00890CE6 2D46 0010                   		move.l	d6,obj_x_spd(a6)
00890CEA 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00890CEE                            ; 		rts
00890CEE                            		
00890CEE                            ; =================================================================
00890CEE                            ; ----------------------------------
00890CEE                            ; Check if touched
00890CEE                            ; ----------------------------------
00890CEE                            
00890CEE                            @check_touch:
00890CEE 6100 DF6E                  		bsr	objTouch_Top
00890CF2 4A00                       		tst.b	d0
00890CF4 6600                       		bne.s	@touch_flag
00890CF6 6100 E004                  		bsr	objTouch_Bottom
00890CFA 4A00                       		tst.b	d0
00890CFC 6600                       		bne.s	@touch_flag
00890CFE                            		
00890CFE 6100 E09C                  		bsr	objTouch_Sides
00890D02 4A00                       		tst.b	d0
00890D04 6600                       		bne.s	@touch_flag
00890D06 4840                       		swap	d0
00890D08 4A00                       		tst.b	d0
00890D0A 6600                       		bne.s	@touch_flag
00890D0C 4E75                       		rts
00890D0E                            		
00890D0E                            ; -----------------------------------
00890D0E                            
00890D0E                            @touch_flag:
00890D0E 6100 E270                  		bsr	objPlyrHurtKill
00890D12 6700                       		beq.s	@return
00890D14 323C 44B8                     		move.w	#varVramBall,d1
00890D18 142E 0020                   		move.b	obj_frame(a6),d2
00890D1C 203C 0000 0000             		move.l	#map_Ball,d0
00890D22 260C                       		move.l	a4,d3
00890D24 6100 E602                  		bsr	objAction_SetStomp
00890D28 6000 D630                  		bra	Object_IsGone
00890D2C                            @return:
00890D2C 4E75                       		rts
00890D2C 4E75                       		rts
00890D2E                               		include	"engine/modes/level/data/objects/endflag/code.asm"
00890D2E                            ; =================================================================
00890D2E                            ; Object
00890D2E                            ; 
00890D2E                            ; Level end flag
00890D2E                            ; =================================================================
00890D2E                            
00890D2E                            ; =================================================================
00890D2E                            ; ------------------------------------------------
00890D2E                            ; Variables
00890D2E                            ; ------------------------------------------------
00890D2E                            
00890D2E =00006540                  varEndFlagVRAM	equ	$6000|$540
00890D2E                            
00890D2E                            ; =================================================================
00890D2E                            ; ------------------------------------------------
00890D2E                            ; Code start
00890D2E                            ; ------------------------------------------------
00890D2E                            
00890D2E                            Obj_EndFlag:
00890D2E 7000                        		moveq	#0,d0
00890D30 102E 001D                   		move.b	obj_index(a6),d0
00890D34 D040                        		add.w	d0,d0
00890D36 323B 0000                   		move.w	@Index(pc,d0.w),d1
00890D3A 4EBB 1000                   		jsr	@Index(pc,d1.w)
00890D3E                            		
00890D3E 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00890D44 302E 0008                  		move.w	obj_x(a6),d0
00890D48 0440 0140                  		sub.w	#320,d0
00890D4C 322C 0008                  		move.w	obj_x(a4),d1
00890D50 B240                       		cmp.w	d0,d1
00890D52 6D00                       		blt.s	@im_gone
00890D54                            		
00890D54 203C 6540 0000                 		move.l	#(varEndFlagVRAM<<16),d0
00890D5A 102E 0020                     		move.b	obj_frame(a6),d0	
00890D5E 223C 0000 0000              		move.l	#mapObj_EndFlag,d1
00890D64 6100 D2D6                    		bsr	Object_Show
00890D68                             		
00890D68 203C 6540 0000                		move.l	#(varEndFlagVRAM<<16),d0
00890D6E 102E 0020                     		move.b	obj_frame(a6),d0
00890D72 223C 0000 0000             		move.l	#dplcObj_EndFlag,d1
00890D78 243C 0000 0000             		move.l	#artObj_EndFlag,d2
00890D7E 6000 D262                  		bra	Object_DPLC
00890D82                            		
00890D82                            @im_gone:
00890D82 4E75                       		rts
00890D84                            		
00890D84                            ; ------------------------------------------------
00890D84                            
00890D84                            @Index:
00890D84 0000                       		dc.w	@Init-@Index
00890D86 0000                       		dc.w	@Main-@Index
00890D88                            		even
00890D88                            		
00890D88                            ; =================================================================
00890D88                            ; ------------------------------------------------
00890D88                            ; Index $00: Init
00890D88                            ; ------------------------------------------------
00890D88                            
00890D88                            @Init:
00890D88 062E 0001 001D             		add.b	#1,obj_index(a6)
00890D8E 2D7C 0202 0303 0004        		move.l	#$02020303,obj_size(a6)
00890D96 4E75                       		rts
00890D98                            		
00890D98                            ; =================================================================
00890D98                            ; ------------------------------------------------                  
00890D98                            ; Index $01: Main
00890D98                            ; ------------------------------------------------
00890D98                            
00890D98                            @Main:
00890D98 042E 0001 001C             		sub.b	#1,obj_anim_spd(a6)
00890D9E 6A00                       		bpl.s	@plus
00890DA0 1D7C 0006 001C             		move.b	#6,obj_anim_spd(a6)
00890DA6 062E 0001 0020             		add.b	#1,obj_frame(a6)
00890DAC 0C2E 0003 0020             		cmp.b	#3,obj_frame(a6)
00890DB2 6D00                       		blt.s	@plus
00890DB4 422E 0020                  		clr.b	obj_frame(a6)
00890DB8                            @plus:
00890DB8 6100 DE8A                  		bsr	objTouch
00890DBC 4A00                       		tst.b	d0
00890DBE 6700                       		beq.s	@return
00890DC0                            
00890DC0 0679 0001 FFFF DC06          		add.w	#1,(RAM_CurrLevel)
00890DC8 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
00890DD0                            @return:
00890DD0 4E75                       		rts
00890DD2                            		
00890DD2                            ; =================================================================
00890DD2                            		
00890DD2                            		
00890DD2                                		include	"engine/modes/level/data/objects/actionscript/code.asm"  
00890DD2                            ; =================================================================
00890DD2                            ; Object (SPECIAL)
00890DD2                            ; 
00890DD2                            ; Action script
00890DD2                            ; =================================================================
00890DD2                            
00890DD2                            ; =================================================================
00890DD2                            ; ------------------------------------------------
00890DD2                            ; Variables
00890DD2                            ; ------------------------------------------------
00890DD2                            
00890DD2                            		rsset obj_ram
00890DD2 =00000024                  gotMaps		rs.l 1
00890DD2 =00000028                  gotVram		rs.w 1
00890DD2 =0000002A                  gotFrame	rs.w 1 		;its a byte
00890DD2 =0000002C                  gotWho		rs.l 1
00890DD2                            
00890DD2                            ; =================================================================
00890DD2                            ; ------------------------------------------------
00890DD2                            ; Code start
00890DD2                            ; ------------------------------------------------
00890DD2                            
00890DD2                            obj_actionscript:
00890DD2 7000                       		moveq	#0,d0
00890DD4 102E 001D                  		move.b	obj_index(a6),d0
00890DD8 D040                       		add.w	d0,d0
00890DDA 323B 0000                  		move.w	@list(pc,d0.w),d1
00890DDE 4EFB 1000                  		jmp	@list(pc,d1.w)
00890DE2                            	
00890DE2                            ; ------------------------------------------------
00890DE2                            
00890DE2                            @list:
00890DE2 0000                       		dc.w @killobj_init-@list
00890DE4 0000                       		dc.w @killobj_main-@list
00890DE6                            
00890DE6 0000                       		dc.w 0
00890DE8 0000                       		dc.w 0
00890DEA                            		
00890DEA                            ; ------------------------------------------------
00890DEA                            ; Action: kill object
00890DEA                            ; ------------------------------------------------
00890DEA                            
00890DEA                            @killobj_init:
00890DEA 002E 0001 001D             		or.b	#1,obj_index(a6)
00890DF0 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
00890DF6 08AE 0006 001E             		bclr	#bitobj_hit,obj_status(a6)
00890DFC                            		
00890DFC 08EE 0001 001E             		bset	#bitobj_FlipV,obj_status(a6)
00890E02 2D7C FFFC 0000 0014        		move.l	#-$40000,obj_y_spd(a6)
00890E0A                            
00890E0A                            		;Read player
00890E0A 202E 002C                  		move.l	gotWho(a6),d0
00890E0E 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
00890E14 6600                       		bne.s	@notplayer
00890E16 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00890E1C 297C FFFD 0000 0014        		move.l	#-$30000,obj_y_spd(a4)
00890E24 197C 0002 001A              		move.b	#varPlyAniJump,obj_anim_id(a4)
00890E2A 08EC 0002 001E             		bset 	#bitobj_air,obj_status(a4)
00890E30                            @notplayer:
00890E30 203C 0000 0000               		move.l	#SndSfx_HitEnemy,d0
00890E36 7202                         		moveq 	#2,d1
00890E38 7401                         		moveq	#1,d2
00890E3A 6100 8B46                    		bsr	Audio_Track_play
00890E3E                              		
00890E3E                            ; --------------------------
00890E3E                            
00890E3E                            @killobj_main:
00890E3E 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00890E42 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00890E46 0687 0000 4000             		add.l	#$4000,d7
00890E4C DDAE 0008                  		add.l	d6,obj_x(a6)
00890E50 DFAE 000C                  		add.l	d7,obj_y(a6)
00890E54 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00890E58 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00890E5C                            		
00890E5C 6100 D51C                   		bsr	Object_OffCheck
00890E60 7000                       		moveq	#0,d0
00890E62 302E 0028                      		move.w	gotVram(a6),d0
00890E66 4840                           		swap	d0
00890E68 102E 002A                   		move.b	gotFrame(a6),d0
00890E6C 222E 0024                  		move.l	gotMaps(a6),d1
00890E70 6000 D1CA                   		bra	Object_Show
00890E74                            		
00890E74                            ; ------------------------------------------------
00890E74                            ; Action: hurt the enemy
00890E74                            ; ------------------------------------------------
00890E74                            
00890E74                            ; =================================================================
00890E74                            ; =================================================================
00890E74                                		include	"engine/modes/level/data/objects/hudinfo/code.asm"  
00890E74                            ; =================================================================
00890E74                            ; Object
00890E74                            ; 
00890E74                            ; Level end flag
00890E74                            ; =================================================================
00890E74                            
00890E74                            ; =================================================================
00890E74                            ; ------------------------------------------------
00890E74                            ; Variables
00890E74                            ; ------------------------------------------------
00890E74                            
00890E74 =0000C580                  varHudBase	equ	$C000|$580
00890E74 =0000C5A8                  varVramHudCoinR	equ	$C000|$5A8
00890E74 =0000C5AC                  varVramHudCoinB	equ	$C000|$5AC
00890E74 =0000C5B0                  varHudLife	equ	$C000|$5B0
00890E74 =0000C5BC                  varHudLifeBar	equ	$C000|$5BC
00890E74 =0000C5C0                  varHudDigits	equ	$C000|$5C0
00890E74                            
00890E74                            		rsset obj_ram
00890E74 =00000024                  ramLastCoins	rs.w	1
00890E74 =00000026                  ramDecCoins 	rs.w	1
00890E74 =00000028                  ramLastLives	rs.w	1
00890E74 =0000002A                  ramDecLives 	rs.w	1
00890E74                            
00890E74                            ; =================================================================
00890E74                            ; ------------------------------------------------
00890E74                            ; Code start
00890E74                            ; ------------------------------------------------
00890E74                            
00890E74                            obj_HudInfo:
00890E74 7000                        		moveq	#0,d0
00890E76 102E 001D                   		move.b	obj_index(a6),d0
00890E7A D040                        		add.w	d0,d0
00890E7C 323B 0000                   		move.w	@Index(pc,d0.w),d1
00890E80 4EFB 1000                   		jmp	@Index(pc,d1.w)
00890E84                             		
00890E84                            ; ------------------------------------------------
00890E84                            
00890E84                            @Index:
00890E84 0000                       		dc.w	@Init-@Index
00890E86 0000                       		dc.w	@Main-@Index
00890E88                            		even
00890E88                            		
00890E88                            ; =================================================================
00890E88                            ; ------------------------------------------------
00890E88                            ; Index $00: Init
00890E88                            ; ------------------------------------------------
00890E88                            
00890E88                            @Init:
00890E88 062E 0001 001D             		add.b	#1,obj_index(a6)
00890E8E 08EE 0007 001E              		bset	#bitobj_stay,obj_status(a6)
00890E94 3D7C 0000 0024             		move.w	#0,ramLastCoins(a6)
00890E9A                            		
00890E9A 3D7C 0001 0024             		move.w	#1,ramLastCoins(a6)
00890EA0 3D7C 0001 0028             		move.w	#1,ramLastLives(a6)
00890EA6                            		
00890EA6                            ; =================================================================
00890EA6                            ; ------------------------------------------------                  
00890EA6                            ; Index $01: Main
00890EA6                            ; ------------------------------------------------
00890EA6                            
00890EA6                            @Main:
00890EA6 203C 0008 0008             		move.l	#8<<16|8,d0
00890EAC 223C 0005 C5A8             		move.l	#5<<16|varVramHudCoinR,d1
00890EB2 6100 D20A                  		bsr	Object_ExtSprite
00890EB6 203C 0008 0018             		move.l	#8<<16|24,d0
00890EBC 223C 0005 C5B0             		move.l	#5<<16|varHudLife,d1
00890EC2 6100 D1FA                  		bsr	Object_ExtSprite
00890EC6                            		
00890EC6                            
00890EC6 203C 0008 0030             		move.l	#8<<16|48,d0
00890ECC 223C 0000 C5BC             		move.l	#varHudLifeBar,d1
00890ED2 3439 FFFF DC04             		move.w	(RAM_P1_Hits),d2
00890ED8 0C42 0008                  		cmp.w	#8,d2
00890EDC 6D00                       		blt.s	@lower
00890EDE 343C 0008                  		move.w	#8,d2
00890EE2                            @lower:
00890EE2 4A42                       		tst.w	d2
00890EE4 6700                       		beq.s	@dead
00890EE6 0442 0001                  		sub.w	#1,d2
00890EEA 4A42                       		tst.w	d2
00890EEC 6600                       		bne.s	@addbox
00890EEE 0641 0001                  		add.w	#1,d1
00890EF2                            @addbox:
00890EF2 6100 D1CA                  		bsr	Object_ExtSprite
00890EF6 0680 0008 0000             		add.l	#$80000,d0
00890EFC 51CA FFF4                  		dbf	d2,@addbox
00890F00                            @dead:
00890F00                            
00890F00 7400                       		moveq	#0,d2
00890F02 3439 FFFF DC02             		move.w	(RAM_P1_Coins),d2
00890F08 B46E 0024                  		cmp.w	ramLastCoins(a6),d2
00890F0C 6700                       		beq.s	@dontupdc
00890F0E 3D42 0024                  		move.w	d2,ramLastCoins(a6)
00890F12 6100 8578                  		bsr	HexToDec
00890F16 3D42 0026                  		move.w	d2,ramDecCoins(a6)
00890F1A                            @dontupdc:
00890F1A 203C 0018 0010             		move.l	#24<<16|16,d0
00890F20 342E 0026                  		move.w	ramDecCoins(a6),d2
00890F24 6100 0000                  		bsr	@showsprval
00890F28                            		
00890F28 7400                       		moveq	#0,d2
00890F2A 3439 FFFF DC00             		move.w	(RAM_P1_Lives),d2
00890F30 B46E 0028                  		cmp.w	ramLastLives(a6),d2
00890F34 6700                       		beq.s	@dontupdlvs
00890F36 3D42 0028                  		move.w	d2,ramLastLives(a6)
00890F3A 6100 8550                  		bsr	HexToDec
00890F3E 3D42 002A                  		move.w	d2,ramDecLives(a6)
00890F42                            @dontupdlvs:
00890F42 203C 0018 0020             		move.l	#24<<16|32,d0
00890F48 342E 002A                  		move.w	ramDecLives(a6),d2
00890F4C                            		
00890F4C                            ; -----------------------------
00890F4C                            
00890F4C                            @showsprval:
00890F4C 7601                       		moveq	#1,d3
00890F4E E89A                       		ror.l	#4,d2
00890F50                            @nxtcoinnum:
00890F50 7200                       		moveq	#0,d1
00890F52 1202                       		move.b	d2,d1
00890F54 0201 000F                  		and.b	#$F,d1
00890F58 0641 C5C0                  		add.w	#varHudDigits,d1
00890F5C E99A                       		rol.l	#4,d2
00890F5E 0680 0008 0000             		add.l	#$00080000,d0
00890F64 6100 D158                  		bsr	Object_ExtSprite	
00890F68 51CB FFE6                  		dbf	d3,@nxtcoinnum
00890F6C 4E75                       		rts
00890F6E                            		
00890F6E                            ; =================================================================
00890F6E                            		
00890F6E                            		
00890F6E                                		
00890F6E                                		
00890F6E                            		
00890F6E                            ; ====================================================================
00890F6E                            ; --------------------------------------------
00890F6E                            ; VBlank
00890F6E                            ; --------------------------------------------
00890F6E                            
00890F6E                            ; ====================================================================		
00890F6E                            ; --------------------------------------------
00890F6E                            ; HBlank
00890F6E                            ; --------------------------------------------
00890F6E                            		
00890F6E                            ; ====================================================================
00890F6E                            ; ====================================================================
00890F6E                            		
00890F6E                            		inform 0,"MARS IPL ends at: %h",*-marsipl
00010F6E                            	
00010F6E                            ; ====================================================================
00010F6E                            ; -------------------------------------------------
00010F6E                            ; DATA
00010F6E                            ; -------------------------------------------------
00010F6E                            
00910F6E                            THIS_BANK_1:
00910F6E                            		include	"engine/modes/title/data.asm"
00910F6E                            ; ====================================================================
00910F6E                            ; -------------------------------------------------
00910F6E                            ; Title DATA
00910F6E                            ; -------------------------------------------------
00910F6E                            		
00910F6E                            Pal_Title:	incbin	"engine/modes/title/data/pal.bin"
00910F8E                            		even
00910F8E                            Map_Title:	incbin	"engine/modes/title/data/map.bin"
0091184E                            		even
0091184E                            Art_Title:	incbin	"engine/modes/title/data/art.bin"
00913B2E                            Art_Title_End:	even
00913B2E                            
00913B2E                            ; Pal_Gen3:	incbin	"engine/modes/title/data/pal_2.bin"
00913B2E                            ; 		even
00913B2E                            ; Map_Gen3:	incbin	"engine/modes/title/data/map_2.bin"
00913B2E                            ; 		even
00913B2E                            ; Art_Gen3:	incbin	"engine/modes/title/data/art_2.bin"
00913B2E                            ; Art_Gen3_End:	even
00913B2E                            
00913B2E                            ; -------------------------------------------------
00913B2E                            				
00913B2E                            ; --------------------------
00913B2E                            ; SFX: COIN
00913B2E                            ; --------------------------
00913B2E                            
00913B2E                            Snd_TestNotes:
00913B2E 00FF                       		dc.b 0,-1
00913B30 0000 0000                  		dc.l @notes
00913B34 0000 0000                       		dc.l @ins
00913B38 0001                            		dc.w 1
00913B3A 0240 800F                        		dc.b FM_3,64,$80,$F
00913B3E                            @notes:		incbin "engine/sound/testins.bin"
00913BF4 00                               		even
00913BF4 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins 
00913BFA 0001 0000                  @ymha:		dc.w 1,0
00913BFE 0000 0000                  		dc.l test_fm
00913C02 0002 0000                  		dc.w 2,0
00913C06 0000 0000                  		dc.l test_fm+$19
00913C0A 0003 0000                  		dc.w 3,0
00913C0E 0000 0000                  		dc.l test_fm
00913C12 0004 0000                  		dc.w 4,0
00913C16 0000 0000                  		dc.l test_fm
00913C1A 0005 0000                  		dc.w 5,0
00913C1E 0000 0000                  		dc.l test_fm
00913C22 0006 0000                  		dc.w 6,0
00913C26 0000 0000                  		dc.l test_fm
00913C2A                            	
00913C2A 0001 0004                  @noise:		dc.w 1,%100
00913C2E                            		even
00913C2E                            
00913C2E                            test_fm:	incbin	"engine/sound/instruments/FM/bass/bass_jazz.bin"
00913C47                            		incbin	"engine/sound/instruments/FM/brass/brass_trumpet.bin"
00913C60                            		even
00913C60                            		
00913C60                            ; -------------------------------------------------
00913C60                            
00913C60                            fmVoice_bell_1:
00913C60                            		incbin	"engine/sound/instruments/fm/bell/bell_xmas.bin"
00913C7A 00                         		even
00913C7A                            fmVoice_piano_rave:
00913C7A                            		incbin	"engine/sound/instruments/fm/piano/piano_rave_old.bin"
00913C94 00                         		even
00913C94                            fmVoice_bass_ambient:
00913C94                            		incbin	"engine/sound/instruments/fm/bass/bass_ambient.bin"
00913CAE 00                         		even
00913CAE                            fmVoice_bass_2:
00913CAE                            		incbin	"engine/sound/instruments/fm/bass/bass_low.bin"
00913CC8 00                         		even
00913CC8                            fmVoice_belllow:
00913CC8                            		incbin	"engine/sound/instruments/fm/brass/brass_funny.bin"
00913CE2 00                         		even
00913CE2                            fmVoice_flaute_2:
00913CE2                            		incbin	"engine/sound/instruments/fm/ding_1.bin"
00913CFC 00                         		even
00913CFC                            fmVoice_brass_trumpet:
00913CFC                            		incbin	"engine/sound/instruments/fm/brass/brass_trumpet.bin"
00913D16 00                         		even
00913D16                            fmVoice_bell_low:
00913D16                            		incbin	"engine/sound/instruments/fm/bell/bell_low.bin"
00913D30 00                         		even
00913D30                            		
00913D30                            fm_hatopen:
00913D30                            		incbin	"engine/sound/instruments/fm/drums/fm3_openhat.bin"
00913D4A 00                         		even
00913D4A                            fm_hatclosed:
00913D4A                            		incbin	"engine/sound/instruments/fm/drums/fm3_closedhat.bin"
00913D64 00                         		even
00913D64                            
00913D64                            fmVoice_dolp_wha:
00913D64                            		incbin	"engine/sound/instruments/fm/fx/dolphin_wah.bin"
00913DE2 00                         		even
00913DE2                            fmVoice_openhat:
00913DE2                            		incbin	"engine/sound/instruments/fm/wsb95_bullpen.bin"
00913E92 00                         		even
00913E92                            ; 		
00913E92                            ; 		cnop 0,$8000
00913E92                            ; wav_yobeats:	incbin	"engine/sound/instruments/dac/beat_yo.wav",$2C
00913E92                            ; wav_yobeats_e:	even
00913E92                            ; 
00913E92                            ; hrdcbyte:	incbin	"engine/sound/instruments/dac/hrdcbyte.wav",$2C
00913E92                            ; hrdcbyte_e:	even
00913E92                            ; 
00913E92                            ; dnceheye:	incbin	"engine/sound/instruments/dac/dnceheye.wav",$2C
00913E92                            ; dnceheye_e:	even
00913E92                            
00913E92                            ; 		if MCD|MARS=0
00913E92                            ; TEST_WAV:	incbin "ideas/test.wav",$2C,$200000
00913E92                            ; TEST_WAV_end:	even
00913E92                            ; 		endif
00913E92                            
00913E92                            wav_kick:	incbin	"engine/sound/instruments/dac/sauron_kick.wav",$2C
00914E20                            wav_kick_e:
00914E20                            wav_tom:	incbin	"engine/sound/instruments/dac/sauron_tom.wav",$2C
009159DA                            wav_tom_e:
009159DA                            wav_snare:	incbin	"engine/sound/instruments/dac/snare.wav",$2C
00916DAE                            wav_snare_e:
00916DAE                            		even
00916DAE                            		
00916DAE                            		
00916DAE                            		include "engine/modes/level/data.asm"
00916DAE                            ; =================================================================
00916DAE                            ; ------------------------------------------------
00916DAE                            ; DMA art
00916DAE                            ; ------------------------------------------------
00916DAE                            
00916DAE                            		cnop 0,$4000
00918000                            Art_Player:	incbin	"engine/modes/level/data/objects/player/data/art.bin"
009198C0                            		even
009198C0                            artObj_EndFlag:	incbin	"engine/modes/level/data/objects/endflag/data/art.bin"
0091A780                             		even
0091A780                            Art_AnimCoin:	incbin	"engine/modes/level/data/layouts/coin_art.bin"
0091AD80                            		even
0091AD80                            
0091AD80                            ; =================================================================
0091AD80                            ; ------------------------------------------------
0091AD80                            ; Non-DMA art
0091AD80                            ; ------------------------------------------------
0091AD80                            	
0091AD80                            ; ---------------------------
0091AD80                            ; Objects
0091AD80                            ; ---------------------------
0091AD80                            
0091AD80                            		cnop 0,$800
0091B000                            Art_dadou:	incbin	"engine/modes/level/data/objects/dadou/data/art.bin"
0091C100                            art_dadou_end:
0091C100                             		even
0091C100                            Art_pikudo:	incbin	"engine/modes/level/data/objects/pikudo/data/art.bin"
0091C9A0                            art_pikudo_end:
0091C9A0                             		even
0091C9A0                             		
0091C9A0                            artObj_Platform:
0091C9A0                            		incbin	"engine/modes/level/data/objects/platform/data/art.bin"
0091CA60                            artObj_Platform_e:
0091CA60                             		even
0091CA60                            artObj_Ball:	incbin	"engine/modes/level/data/objects/ball/data/art.bin"
0091CD60                            artObj_Ball_e:	even
0091CD60                             		
0091CD60                            ; =================================================================
0091CD60                            ; ------------------------------------------------
0091CD60                            ; Other stuff
0091CD60                            ; ------------------------------------------------
0091CD60                            
0091CD60                            ; ---------------------------
0091CD60                            ; Player
0091CD60                            ; ---------------------------
0091CD60                            
0091CD60                            Map_Player:	include	"engine/modes/level/data/objects/player/data/map.asm"
0091CD60                            @mappings:
0091CD60 0000                       		dc.w @frame_0-@mappings
0091CD62 0000                       		dc.w @frame_1-@mappings
0091CD64 0000                       		dc.w @frame_2-@mappings
0091CD66 0000                       		dc.w @frame_3-@mappings
0091CD68 0000                       		dc.w @frame_4-@mappings
0091CD6A 0000                       		dc.w @frame_5-@mappings
0091CD6C 0000                       		dc.w @frame_6-@mappings
0091CD6E 0000                       		dc.w @frame_7-@mappings
0091CD70 0000                       		dc.w @frame_8-@mappings
0091CD72 0000                       		dc.w @frame_9-@mappings
0091CD74 0000                       		dc.w @frame_10-@mappings
0091CD76 0000                       		dc.w @frame_11-@mappings
0091CD78 0000                       		dc.w @frame_12-@mappings
0091CD7A 0000                       		dc.w @frame_13-@mappings
0091CD7C 0000                       		dc.w @frame_14-@mappings
0091CD7E 0000                       		dc.w @frame_15-@mappings
0091CD80 0000                       		dc.w @frame_16-@mappings
0091CD82                            @frame_0:
0091CD82 03                         		dc.b $3
0091CD83                            
0091CD83 000C 0000 F0               		dc.b $0,$C,$0,$0,$F0
0091CD88 F005 0004 F8               		dc.b $F0,$5,$0,$4,$F8
0091CD8D 0804 0008 F8               		dc.b $8,$4,$0,$8,$F8
0091CD92                            		even
0091CD92                            @frame_1:
0091CD92 03                         		dc.b $3
0091CD93                            
0091CD93 000C 0000 F0               		dc.b $0,$C,$0,$0,$F0
0091CD98 F005 0004 F8               		dc.b $F0,$5,$0,$4,$F8
0091CD9D 0804 0008 F8               		dc.b $8,$4,$0,$8,$F8
0091CDA2                            		even
0091CDA2                            @frame_2:
0091CDA2 04                         		dc.b $4
0091CDA3                            
0091CDA3 0009 0000 F0               		dc.b $0,$9,$0,$0,$F0
0091CDA8 F005 0006 F8               		dc.b $F0,$5,$0,$6,$F8
0091CDAD F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0091CDB2 0800 000B 08               		dc.b $8,$0,$0,$B,$8
0091CDB8 00                         		even
0091CDB8                            @frame_3:
0091CDB8 03                         		dc.b $3
0091CDB9                            
0091CDB9 F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0091CDBE F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0091CDC3 0800 0009 08               		dc.b $8,$0,$0,$9,$8
0091CDC8                            		even
0091CDC8                            @frame_4:
0091CDC8 02                         		dc.b $2
0091CDC9                            
0091CDC9 F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0091CDCE F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0091CDD4 00                         		even
0091CDD4                            @frame_5:
0091CDD4 03                         		dc.b $3
0091CDD5                            
0091CDD5 080C 0000 F0               		dc.b $8,$C,$0,$0,$F0
0091CDDA F006 0004 F8               		dc.b $F0,$6,$0,$4,$F8
0091CDDF F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0091CDE4                            		even
0091CDE4                            @frame_6:
0091CDE4 04                         		dc.b $4
0091CDE5                            
0091CDE5 0009 0000 F0               		dc.b $0,$9,$0,$0,$F0
0091CDEA F005 0006 F8               		dc.b $F0,$5,$0,$6,$F8
0091CDEF F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0091CDF4 0800 000B 08               		dc.b $8,$0,$0,$B,$8
0091CDFA 00                         		even
0091CDFA                            @frame_7:
0091CDFA 03                         		dc.b $3
0091CDFB                            
0091CDFB F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0091CE00 F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0091CE05 0800 0009 08               		dc.b $8,$0,$0,$9,$8
0091CE0A                            		even
0091CE0A                            @frame_8:
0091CE0A 02                         		dc.b $2
0091CE0B                            
0091CE0B F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0091CE10 F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0091CE16 00                         		even
0091CE16                            @frame_9:
0091CE16 03                         		dc.b $3
0091CE17                            
0091CE17 080C 0000 F0               		dc.b $8,$C,$0,$0,$F0
0091CE1C F006 0004 F8               		dc.b $F0,$6,$0,$4,$F8
0091CE21 F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0091CE26                            		even
0091CE26                            @frame_10:
0091CE26 04                         		dc.b $4
0091CE27                            
0091CE27 F807 0000 F0               		dc.b $F8,$7,$0,$0,$F0
0091CE2C F008 0008 F8               		dc.b $F0,$8,$0,$8,$F8
0091CE31 F802 000B 00               		dc.b $F8,$2,$0,$B,$0
0091CE36 F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0091CE3C 00                         		even
0091CE3C                            @frame_11:
0091CE3C 04                         		dc.b $4
0091CE3D                            
0091CE3D F807 0000 F0               		dc.b $F8,$7,$0,$0,$F0
0091CE42 F008 0008 F8               		dc.b $F0,$8,$0,$8,$F8
0091CE47 F802 000B 00               		dc.b $F8,$2,$0,$B,$0
0091CE4C F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0091CE52 00                         		even
0091CE52                            @frame_12:
0091CE52 03                         		dc.b $3
0091CE53                            
0091CE53 F008 0000 F0               		dc.b $F0,$8,$0,$0,$F0
0091CE58 F803 0003 F8               		dc.b $F8,$3,$0,$3,$F8
0091CE5D F802 0007 00               		dc.b $F8,$2,$0,$7,$0
0091CE62                            		even
0091CE62                            @frame_13:
0091CE62 04                         		dc.b $4
0091CE63                            
0091CE63 F009 0000 F0               		dc.b $F0,$9,$0,$0,$F0
0091CE68 0002 0006 F8               		dc.b $0,$2,$0,$6,$F8
0091CE6D 0001 0009 00               		dc.b $0,$1,$0,$9,$0
0091CE72 F800 000B 08               		dc.b $F8,$0,$0,$B,$8
0091CE78 00                         		even
0091CE78                            @frame_14:
0091CE78 03                         		dc.b $3
0091CE79                            
0091CE79 F00D 0000 F0               		dc.b $F0,$D,$0,$0,$F0
0091CE7E 0005 0008 F8               		dc.b $0,$5,$0,$8,$F8
0091CE83 1000 000C 00               		dc.b $10,$0,$0,$C,$0
0091CE88                            		even
0091CE88                            @frame_15:
0091CE88 03                         		dc.b $3
0091CE89                            
0091CE89 F808 0000 F0               		dc.b $F8,$8,$0,$0,$F0
0091CE8E F008 0003 F8               		dc.b $F0,$8,$0,$3,$F8
0091CE93 0006 0006 F8               		dc.b $0,$6,$0,$6,$F8
0091CE98                            		even
0091CE98                            @frame_16:
0091CE98 05                         		dc.b $5
0091CE99                            
0091CE99 F80C 0000 E8               		dc.b $F8,$C,$0,$0,$E8
0091CE9E 000D 0004 F0               		dc.b $0,$D,$0,$4,$F0
0091CEA3 1000 000C 00               		dc.b $10,$0,$0,$C,$0
0091CEA8 F001 000D 08               		dc.b $F0,$1,$0,$D,$8
0091CEAD F801 000F 10               		dc.b $F8,$1,$0,$F,$10
0091CEB2                            		even
0091CEB2                            		even
0091CEB2                            		even
0091CEB2                            DPLC_Player:	include	"engine/modes/level/data/objects/player/data/plc.asm"
0091CEB2                            @dplc:
0091CEB2 0000                       		dc.w @frame_0-@dplc
0091CEB4 0000                       		dc.w @frame_1-@dplc
0091CEB6 0000                       		dc.w @frame_2-@dplc
0091CEB8 0000                       		dc.w @frame_3-@dplc
0091CEBA 0000                       		dc.w @frame_4-@dplc
0091CEBC 0000                       		dc.w @frame_5-@dplc
0091CEBE 0000                       		dc.w @frame_6-@dplc
0091CEC0 0000                       		dc.w @frame_7-@dplc
0091CEC2 0000                       		dc.w @frame_8-@dplc
0091CEC4 0000                       		dc.w @frame_9-@dplc
0091CEC6 0000                       		dc.w @frame_10-@dplc
0091CEC8 0000                       		dc.w @frame_11-@dplc
0091CECA 0000                       		dc.w @frame_12-@dplc
0091CECC 0000                       		dc.w @frame_13-@dplc
0091CECE 0000                       		dc.w @frame_14-@dplc
0091CED0 0000                       		dc.w @frame_15-@dplc
0091CED2 0000                       		dc.w @frame_16-@dplc
0091CED4                            @frame_0:
0091CED4 0003                       		dc.w $3
0091CED6                            
0091CED6 3000                       		dc.w $3000
0091CED8 3004                       		dc.w $3004
0091CEDA 1008                       		dc.w $1008
0091CEDC                            @frame_1:
0091CEDC 0003                       		dc.w $3
0091CEDE                            
0091CEDE 300A                       		dc.w $300A
0091CEE0 300E                       		dc.w $300E
0091CEE2 1012                       		dc.w $1012
0091CEE4                            @frame_2:
0091CEE4 0004                       		dc.w $4
0091CEE6                            
0091CEE6 5014                       		dc.w $5014
0091CEE8 301A                       		dc.w $301A
0091CEEA 001E                       		dc.w $1E
0091CEEC 001F                       		dc.w $1F
0091CEEE                            @frame_3:
0091CEEE 0003                       		dc.w $3
0091CEF0                            
0091CEF0 7020                       		dc.w $7020
0091CEF2 0028                       		dc.w $28
0091CEF4 0029                       		dc.w $29
0091CEF6                            @frame_4:
0091CEF6 0002                       		dc.w $2
0091CEF8                            
0091CEF8 702A                       		dc.w $702A
0091CEFA 0032                       		dc.w $32
0091CEFC                            @frame_5:
0091CEFC 0003                       		dc.w $3
0091CEFE                            
0091CEFE 3033                       		dc.w $3033
0091CF00 5037                       		dc.w $5037
0091CF02 003D                       		dc.w $3D
0091CF04                            @frame_6:
0091CF04 0004                       		dc.w $4
0091CF06                            
0091CF06 503E                       		dc.w $503E
0091CF08 3044                       		dc.w $3044
0091CF0A 0048                       		dc.w $48
0091CF0C 0049                       		dc.w $49
0091CF0E                            @frame_7:
0091CF0E 0003                       		dc.w $3
0091CF10                            
0091CF10 704A                       		dc.w $704A
0091CF12 0052                       		dc.w $52
0091CF14 0053                       		dc.w $53
0091CF16                            @frame_8:
0091CF16 0002                       		dc.w $2
0091CF18                            
0091CF18 7054                       		dc.w $7054
0091CF1A 005C                       		dc.w $5C
0091CF1C                            @frame_9:
0091CF1C 0003                       		dc.w $3
0091CF1E                            
0091CF1E 305D                       		dc.w $305D
0091CF20 5061                       		dc.w $5061
0091CF22 0067                       		dc.w $67
0091CF24                            @frame_10:
0091CF24 0004                       		dc.w $4
0091CF26                            
0091CF26 7068                       		dc.w $7068
0091CF28 2070                       		dc.w $2070
0091CF2A 2073                       		dc.w $2073
0091CF2C 0076                       		dc.w $76
0091CF2E                            @frame_11:
0091CF2E 0004                       		dc.w $4
0091CF30                            
0091CF30 7077                       		dc.w $7077
0091CF32 207F                       		dc.w $207F
0091CF34 2082                       		dc.w $2082
0091CF36 0085                       		dc.w $85
0091CF38                            @frame_12:
0091CF38 0003                       		dc.w $3
0091CF3A                            
0091CF3A 2086                       		dc.w $2086
0091CF3C 3089                       		dc.w $3089
0091CF3E 208D                       		dc.w $208D
0091CF40                            @frame_13:
0091CF40 0004                       		dc.w $4
0091CF42                            
0091CF42 5090                       		dc.w $5090
0091CF44 2096                       		dc.w $2096
0091CF46 1099                       		dc.w $1099
0091CF48 009B                       		dc.w $9B
0091CF4A                            @frame_14:
0091CF4A 0003                       		dc.w $3
0091CF4C                            
0091CF4C 709C                       		dc.w $709C
0091CF4E 30A4                       		dc.w $30A4
0091CF50 00A8                       		dc.w $A8
0091CF52                            @frame_15:
0091CF52 0003                       		dc.w $3
0091CF54                            
0091CF54 20A9                       		dc.w $20A9
0091CF56 20AC                       		dc.w $20AC
0091CF58 50AF                       		dc.w $50AF
0091CF5A                            @frame_16:
0091CF5A 0005                       		dc.w $5
0091CF5C                            
0091CF5C 30B5                       		dc.w $30B5
0091CF5E 70B9                       		dc.w $70B9
0091CF60 00C1                       		dc.w $C1
0091CF62 10C2                       		dc.w $10C2
0091CF64 10C4                       		dc.w $10C4
0091CF64 10C4                       		dc.w $10C4
0091CF66                            		even
0091CF66                            Pal_Player:	incbin	"engine/modes/level/data/objects/player/data/pal.bin"
0091CF86                            Pal_Player_End:
0091CF86                            		even
0091CF86                            
0091CF86                            ; ---------------------------
0091CF86                            ; Objects
0091CF86                            ; ---------------------------
0091CF86                            
0091CF86                            Map_dadou:	include	"engine/modes/level/data/objects/dadou/data/map.asm"
0091CF86                            @mappings:
0091CF86 0000                       		dc.w @frame_0-@mappings
0091CF88 0000                       		dc.w @frame_1-@mappings
0091CF8A 0000                       		dc.w @frame_2-@mappings
0091CF8C 0000                       		dc.w @frame_3-@mappings
0091CF8E 0000                       		dc.w @frame_4-@mappings
0091CF90 0000                       		dc.w @frame_5-@mappings
0091CF92 0000                       		dc.w @frame_6-@mappings
0091CF94 0000                       		dc.w @frame_7-@mappings
0091CF96 0000                       		dc.w @frame_8-@mappings
0091CF98 0000                       		dc.w @frame_9-@mappings
0091CF9A                            @frame_0:
0091CF9A 03                         		dc.b $3
0091CF9B                            
0091CF9B F80A 0000 F0               		dc.b $F8,$A,$0,$0,$F0
0091CFA0 F004 0009 00               		dc.b $F0,$4,$0,$9,$0
0091CFA5 F801 000B 08               		dc.b $F8,$1,$0,$B,$8
0091CFAA                            		even
0091CFAA                            @frame_1:
0091CFAA 03                         		dc.b $3
0091CFAB                            
0091CFAB F80A 000D F0               		dc.b $F8,$A,$0,$D,$F0
0091CFB0 F004 0016 00               		dc.b $F0,$4,$0,$16,$0
0091CFB5 F801 0018 08               		dc.b $F8,$1,$0,$18,$8
0091CFBA                            		even
0091CFBA                            @frame_2:
0091CFBA 02                         		dc.b $2
0091CFBB                            
0091CFBB F80A 001A F0               		dc.b $F8,$A,$0,$1A,$F0
0091CFC0 F801 0023 08               		dc.b $F8,$1,$0,$23,$8
0091CFC6 00                         		even
0091CFC6                            @frame_3:
0091CFC6 02                         		dc.b $2
0091CFC7                            
0091CFC7 F00E 0025 F0               		dc.b $F0,$E,$0,$25,$F0
0091CFCC 0808 0031 F8               		dc.b $8,$8,$0,$31,$F8
0091CFD2 00                         		even
0091CFD2                            @frame_4:
0091CFD2 02                         		dc.b $2
0091CFD3                            
0091CFD3 F00E 0034 F0               		dc.b $F0,$E,$0,$34,$F0
0091CFD8 0808 0040 F8               		dc.b $8,$8,$0,$40,$F8
0091CFDE 00                         		even
0091CFDE                            @frame_5:
0091CFDE 02                         		dc.b $2
0091CFDF                            
0091CFDF F00E 0043 F0               		dc.b $F0,$E,$0,$43,$F0
0091CFE4 0804 004F F8               		dc.b $8,$4,$0,$4F,$F8
0091CFEA 00                         		even
0091CFEA                            @frame_6:
0091CFEA 02                         		dc.b $2
0091CFEB                            
0091CFEB F80A 0051 F0               		dc.b $F8,$A,$0,$51,$F0
0091CFF0 F801 005A 08               		dc.b $F8,$1,$0,$5A,$8
0091CFF6 00                         		even
0091CFF6                            @frame_7:
0091CFF6 02                         		dc.b $2
0091CFF7                            
0091CFF7 F00E 005C F0               		dc.b $F0,$E,$0,$5C,$F0
0091CFFC 0804 0068 F8               		dc.b $8,$4,$0,$68,$F8
0091D002 00                         		even
0091D002                            @frame_8:
0091D002 02                         		dc.b $2
0091D003                            
0091D003 F00E 006A F0               		dc.b $F0,$E,$0,$6A,$F0
0091D008 0808 0076 F8               		dc.b $8,$8,$0,$76,$F8
0091D00E 00                         		even
0091D00E                            @frame_9:
0091D00E 02                         		dc.b $2
0091D00F                            
0091D00F F00E 0079 F0               		dc.b $F0,$E,$0,$79,$F0
0091D014 0808 0085 F8               		dc.b $8,$8,$0,$85,$F8
0091D01A 00                         		even
0091D01A 00                         		even
0091D01A                             		even
0091D01A                            Map_pikudo:	include	"engine/modes/level/data/objects/pikudo/data/map.asm"
0091D01A                            @mappings:
0091D01A 0000                       		dc.w @frame_0-@mappings
0091D01C 0000                       		dc.w @frame_1-@mappings
0091D01E 0000                       		dc.w @frame_2-@mappings
0091D020 0000                       		dc.w @frame_3-@mappings
0091D022 0000                       		dc.w @frame_4-@mappings
0091D024                            @frame_0:
0091D024 04                         		dc.b $4
0091D025                            
0091D025 F009 0000 F0               		dc.b $F0,$9,$0,$0,$F0
0091D02A E804 0006 F8               		dc.b $E8,$4,$0,$6,$F8
0091D02F 0009 0008 F8               		dc.b $0,$9,$0,$8,$F8
0091D034 F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0091D03A 00                         		even
0091D03A                            @frame_1:
0091D03A 04                         		dc.b $4
0091D03B                            
0091D03B F009 000F F0               		dc.b $F0,$9,$0,$F,$F0
0091D040 E804 0015 F8               		dc.b $E8,$4,$0,$15,$F8
0091D045 0009 0017 F8               		dc.b $0,$9,$0,$17,$F8
0091D04A F800 001D 08               		dc.b $F8,$0,$0,$1D,$8
0091D050 00                         		even
0091D050                            @frame_2:
0091D050 04                         		dc.b $4
0091D051                            
0091D051 F009 001E F0               		dc.b $F0,$9,$0,$1E,$F0
0091D056 E804 0024 F8               		dc.b $E8,$4,$0,$24,$F8
0091D05B 0009 0026 F8               		dc.b $0,$9,$0,$26,$F8
0091D060 F800 002C 08               		dc.b $F8,$0,$0,$2C,$8
0091D066 00                         		even
0091D066                            @frame_3:
0091D066 01                         		dc.b $1
0091D067                            
0091D067 F00B 002D F8               		dc.b $F0,$B,$0,$2D,$F8
0091D06C                            		even
0091D06C                            @frame_4:
0091D06C 01                         		dc.b $1
0091D06D                            
0091D06D F00B 0039 F8               		dc.b $F0,$B,$0,$39,$F8
0091D072                            		even
0091D072                            		even
0091D072                             		even
0091D072                            Map_ball:	include	"engine/modes/level/data/objects/ball/data/map.asm"
0091D072                            @mappings:
0091D072 0000                       		dc.w @frame_0-@mappings
0091D074 0000                       		dc.w @frame_1-@mappings
0091D076 0000                       		dc.w @frame_2-@mappings
0091D078 0000                       		dc.w @frame_3-@mappings
0091D07A                            @frame_0:
0091D07A 01                         		dc.b $1
0091D07B                            
0091D07B F806 0000 F8               		dc.b $F8,$6,$0,$0,$F8
0091D080                            		even
0091D080                            @frame_1:
0091D080 01                         		dc.b $1
0091D081                            
0091D081 F806 0006 F8               		dc.b $F8,$6,$0,$6,$F8
0091D086                            		even
0091D086                            @frame_2:
0091D086 01                         		dc.b $1
0091D087                            
0091D087 F806 000C F8               		dc.b $F8,$6,$0,$C,$F8
0091D08C                            		even
0091D08C                            @frame_3:
0091D08C 01                         		dc.b $1
0091D08D                            
0091D08D F806 0012 F8               		dc.b $F8,$6,$0,$12,$F8
0091D092                            		even
0091D092                            		even
0091D092                             		even
0091D092                            objMap_Platform:include	"engine/modes/level/data/objects/platform/data/map.asm"
0091D092                            @mappings:
0091D092 0000                       		dc.w @frame_0-@mappings
0091D094                            @frame_0:
0091D094 02                         		dc.b $2
0091D095                            
0091D095 F80C 0000 E8               		dc.b $F8,$C,$0,$0,$E8
0091D09A F804 0004 08               		dc.b $F8,$4,$0,$4,$8
0091D0A0 00                         		even
0091D0A0 00                         		even
0091D0A0                             		even
0091D0A0                            mapObj_EndFlag:	include	"engine/modes/level/data/objects/endflag/data/map.asm"
0091D0A0                            @mappings:
0091D0A0 0000                       		dc.w @frame_0-@mappings
0091D0A2 0000                       		dc.w @frame_1-@mappings
0091D0A4 0000                       		dc.w @frame_2-@mappings
0091D0A6                            @frame_0:
0091D0A6 07                         		dc.b $7
0091D0A7                            
0091D0A7 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
0091D0AC E00B 0004 E8               		dc.b $E0,$B,$0,$4,$E8
0091D0B1 0005 0010 E8               		dc.b $0,$5,$0,$10,$E8
0091D0B6 000C 0014 F8               		dc.b $0,$C,$0,$14,$F8
0091D0BB E80E 0018 00               		dc.b $E8,$E,$0,$18,$0
0091D0C0 E004 0024 08               		dc.b $E0,$4,$0,$24,$8
0091D0C5 0000 0026 18               		dc.b $0,$0,$0,$26,$18
0091D0CA                            		even
0091D0CA                            @frame_1:
0091D0CA 07                         		dc.b $7
0091D0CB                            
0091D0CB 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
0091D0D0 E00F 0004 E8               		dc.b $E0,$F,$0,$4,$E8
0091D0D5 0005 0014 E8               		dc.b $0,$5,$0,$14,$E8
0091D0DA 000C 0018 F8               		dc.b $0,$C,$0,$18,$F8
0091D0DF E80A 001C 08               		dc.b $E8,$A,$0,$1C,$8
0091D0E4 E000 0025 10               		dc.b $E0,$0,$0,$25,$10
0091D0E9 0000 0026 18               		dc.b $0,$0,$0,$26,$18
0091D0EE                            		even
0091D0EE                            @frame_2:
0091D0EE 07                         		dc.b $7
0091D0EF                            
0091D0EF 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
0091D0F4 E00F 0004 E8               		dc.b $E0,$F,$0,$4,$E8
0091D0F9 0005 0014 E8               		dc.b $0,$5,$0,$14,$E8
0091D0FE 000C 0018 F8               		dc.b $0,$C,$0,$18,$F8
0091D103 E007 001C 08               		dc.b $E0,$7,$0,$1C,$8
0091D108 E001 0024 18               		dc.b $E0,$1,$0,$24,$18
0091D10D F801 0026 18               		dc.b $F8,$1,$0,$26,$18
0091D112                            		even
0091D112                            		even
0091D112                             		even
0091D112                            dplcObj_EndFlag:include	"engine/modes/level/data/objects/endflag/data/plc.asm"
0091D112                            @dplc:
0091D112 0000                       		dc.w @frame_0-@dplc
0091D114 0000                       		dc.w @frame_1-@dplc
0091D116 0000                       		dc.w @frame_2-@dplc
0091D118                            @frame_0:
0091D118 0007                       		dc.w $7
0091D11A                            
0091D11A 3000                       		dc.w $3000
0091D11C B004                       		dc.w $B004
0091D11E 3010                       		dc.w $3010
0091D120 3014                       		dc.w $3014
0091D122 B018                       		dc.w $B018
0091D124 1024                       		dc.w $1024
0091D126 0026                       		dc.w $26
0091D128                            @frame_1:
0091D128 0007                       		dc.w $7
0091D12A                            
0091D12A 3027                       		dc.w $3027
0091D12C F02B                       		dc.w $F02B
0091D12E 303B                       		dc.w $303B
0091D130 303F                       		dc.w $303F
0091D132 8043                       		dc.w $8043
0091D134 004C                       		dc.w $4C
0091D136 004D                       		dc.w $4D
0091D138                            @frame_2:
0091D138 0007                       		dc.w $7
0091D13A                            
0091D13A 304E                       		dc.w $304E
0091D13C F052                       		dc.w $F052
0091D13E 3062                       		dc.w $3062
0091D140 3066                       		dc.w $3066
0091D142 706A                       		dc.w $706A
0091D144 1072                       		dc.w $1072
0091D146 1074                       		dc.w $1074
0091D146 1074                       		dc.w $1074
0091D148                            		even
0091D148                            		
0091D148                            ; ====================================================================
0091D148                            ; -------------------------------------------------
0091D148                            ; Level DATA
0091D148                            ; -------------------------------------------------
0091D148                            
0091D148                            LevelList:
0091D148 0000 0000                  		dc.l $01<<24|Lvl_Zone1		; Level data
0091D14C 0000 0000                  		dc.l Pal_LvlMain_Gray		; Palette
0091D150 0020 00F0                  		dc.w $20,$F0			; Player X/Y
0091D154 1140 0068                  		dc.w $1140,$68			; End flag X/Y
0091D158                            ; 		dc.l $01<<24|Lvl_Zone2
0091D158                            ; 		dc.l Pal_LvlMain_Gray
0091D158                            ; 		dc.w $20,$D0
0091D158                            ; 		dc.w 0,0
0091D158                            ; 		dc.l Lvl_Zone3
0091D158                            ; 		dc.l Pal_LvlMain_Gray
0091D158                            ; 		dc.w $28,$250
0091D158                            ; 		dc.w 0,0
0091D158                            ; 		dc.l Lvl_Zone1
0091D158                            ; 		dc.l Pal_LvlMain_Gray
0091D158                            ; 		dc.w $10,0
0091D158                            ; 		dc.w 0,0
0091D158                            ; 		dc.l Lvl_Zone1
0091D158                            ; 		dc.l Pal_LvlMain_Gray
0091D158                            ; 		dc.w $10,0
0091D158                            ; 		dc.w 0,0
0091D158                            ; 		even
0091D158                            		
0091D158                            artdata_Level_Test:
0091D158 0091 B000                   		dc.l art_dadou
0091D15C 6420                       		dc.w varVramDadou
0091D15E 043F                        		dc.w ((art_dadou_end-art_dadou)/4)-1
0091D160 0091 CA60                    		dc.l artObj_Ball
0091D164 44B8                       		dc.w varVramBall
0091D166 00BF                        		dc.w ((artObj_Ball_e-artObj_Ball)/4)-1
0091D168 0091 C100                   		dc.l Art_pikudo
0091D16C 04D0                       		dc.w varVramPikudo
0091D16E 0227                        		dc.w ((Art_pikudo_end-Art_pikudo)/4)-1
0091D170                             		
0091D170 0091 C9A0                   		dc.l artObj_Platform
0091D174 2530                        		dc.w varVramPlatfrm
0091D176 002F                        		dc.w ((artObj_Platform_e-artObj_Platform)/4)-1
0091D178                             		
0091D178 FFFF                        		dc.w -1
0091D17A                             		even
0091D17A                             		
0091D17A                            ; --------------------------------------------
0091D17A                            ; Levels
0091D17A                            ; --------------------------------------------
0091D17A                            
0091D17A 0118 0018                  Lvl_Zone1:	dc.w 280,24
0091D17E 0000 0000                  		dc.l @objects
0091D182 0000 0000 FFFF FFFF        		dc.l @FG_blk,-1			; Block VRAM / Prize VRAM (-1, use defaults) 
0091D18A 0000 0000 0000 0000        		dc.l @FG_lay_low,@FG_lay_hi	; Level layout hi/low
0091D192 0000 0000 0000 0000        		dc.l @FG_col,@FG_prz		; Collision / Prizes
0091D19A                            ; 		dc.w -1
0091D19A                            		
0091D19A                            @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/1/fg_lay_low.bin"
0091EBDA                             		even
0091EBDA                            @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/1/fg_lay_hi.bin"
0092061A                             		even	
0092061A                            @FG_col:	incbin	"engine/modes/level/data/layouts/main/1/fg_col.bin"
0092205A                             		even
0092205A                            @FG_prz:	incbin	"engine/modes/level/data/layouts/main/1/fg_prz.bin"
00922104                             		even 
00922104                            @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
00922904                             		even
00922904                            @objects:	include	"engine/modes/level/data/layouts/main/1/objlist.asm"
00922904 0089 02AE                  		dc.l obj_dadou
00922908 01F8 00AC                  		dc.w 504,172
0092290C 00                         		dc.b 0
0092290D 00                         		dc.b 0
0092290E                            
0092290E 0089 06DE                  		dc.l obj_platform
00922912 0348 00E0                  		dc.w 840,224
00922916 00                         		dc.b 0
00922917 00                         		dc.b 0
00922918                            
00922918 0089 06DE                  		dc.l obj_platform
0092291C 03E8 00F8                  		dc.w 1000,248
00922920 01                         		dc.b 1
00922921 00                         		dc.b 0
00922922                            
00922922 0089 0484                  		dc.l obj_pikudo
00922926 049C 00DC                  		dc.w 1180,220
0092292A 00                         		dc.b 0
0092292B 00                         		dc.b 0
0092292C                            
0092292C 0089 06DE                  		dc.l obj_platform
00922930 0358 0178                  		dc.w 856,376
00922934 01                         		dc.b 1
00922935 00                         		dc.b 0
00922936                            
00922936 0089 06DE                  		dc.l obj_platform
0092293A 03E0 0168                  		dc.w 992,360
0092293E 00                         		dc.b 0
0092293F 00                         		dc.b 0
00922940                            
00922940 0089 06DE                  		dc.l obj_platform
00922944 0610 00C8                  		dc.w 1552,200
00922948 01                         		dc.b 1
00922949 00                         		dc.b 0
0092294A                            
0092294A 0089 0B80                  		dc.l obj_ball
0092294E 064C 0100                  		dc.w 1612,256
00922952 00                         		dc.b 0
00922953 00                         		dc.b 0
00922954                            
00922954 0089 02AE                  		dc.l obj_dadou
00922958 080C 00CC                  		dc.w 2060,204
0092295C 00                         		dc.b 0
0092295D 00                         		dc.b 0
0092295E                            
0092295E 0089 0484                  		dc.l obj_pikudo
00922962 0648 0084                  		dc.w 1608,132
00922966 00                         		dc.b 0
00922967 00                         		dc.b 0
00922968                            
00922968 0089 0B80                  		dc.l obj_ball
0092296C 0900 0104                  		dc.w 2304,260
00922970 00                         		dc.b 0
00922971 00                         		dc.b 0
00922972                            
00922972 0089 02AE                  		dc.l obj_dadou
00922976 09A8 00EC                  		dc.w 2472,236
0092297A 00                         		dc.b 0
0092297B 00                         		dc.b 0
0092297C                            
0092297C 0089 02AE                  		dc.l obj_dadou
00922980 0A94 0108                  		dc.w 2708,264
00922984 00                         		dc.b 0
00922985 00                         		dc.b 0
00922986                            
00922986 0089 06DE                  		dc.l obj_platform
0092298A 09E8 0100                  		dc.w 2536,256
0092298E 02                         		dc.b 2
0092298F 00                         		dc.b 0
00922990                            
00922990 0089 02AE                  		dc.l obj_dadou
00922994 0CB8 0140                  		dc.w 3256,320
00922998 00                         		dc.b 0
00922999 00                         		dc.b 0
0092299A                            
0092299A 0089 02AE                  		dc.l obj_dadou
0092299E 0CC4 0080                  		dc.w 3268,128
009229A2 00                         		dc.b 0
009229A3 00                         		dc.b 0
009229A4                            
009229A4 0089 02AE                  		dc.l obj_dadou
009229A8 0BFC 00C0                  		dc.w 3068,192
009229AC 80                         		dc.b 0x80
009229AD 00                         		dc.b 0
009229AE                            
009229AE 0000 0000                  		dc.l 0
009229AE 0000 0000                  		dc.l 0
009229B2                             		even
009229B2                            
009229B2                            ; --------------------------------------------
009229B2                            
009229B2                            ; Lvl_Zone2:	dc.w 228,14
009229B2                            ; 		dc.l @objects
009229B2                            ; 		dc.l @FG_blk,-1			;Block VRAM / Prize VRAM (-1, use defaults) 
009229B2                            ; 		dc.l @FG_lay_low,@FG_lay_hi	;Level layout hi/low
009229B2                            ; 		dc.l @FG_col,@FG_prz		;Collision / Prizes
009229B2                            ; ; 		dc.w -1
009229B2                            ; 		
009229B2                            ; @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/2/fg_lay_low.bin"
009229B2                            ;  		even
009229B2                            ; @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/2/fg_lay_hi.bin"
009229B2                            ;  		even	
009229B2                            ; @FG_col:	incbin	"engine/modes/level/data/layouts/main/2/fg_col.bin"
009229B2                            ;  		even
009229B2                            ; @FG_prz:	incbin	"engine/modes/level/data/layouts/main/2/fg_prz.bin"
009229B2                            ;  		even 
009229B2                            ; @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
009229B2                            ;  		even
009229B2                            ; @objects:	include	"engine/modes/level/data/layouts/main/2/objlist.asm"
009229B2                            ;  		even
009229B2                             
009229B2                            ; --------------------------------------------
009229B2                            
009229B2                            ; Lvl_Zone3:	dc.w 20,40
009229B2                            ; 		dc.l @objects
009229B2                            ; 		dc.l @FG_blk,-1			;Block VRAM / Prize VRAM (-1, use defaults) 
009229B2                            ; 		dc.l @FG_lay_low,@FG_lay_hi	;Level layout hi/low
009229B2                            ; 		dc.l @FG_col,@FG_prz		;Collision / Prizes
009229B2                            ; ; 		dc.w -1
009229B2                            ; 		
009229B2                            ; @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/3/fg_lay_low.bin"
009229B2                            ;  		even
009229B2                            ; @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/3/fg_lay_hi.bin"
009229B2                            ;  		even	
009229B2                            ; @FG_col:	incbin	"engine/modes/level/data/layouts/main/3/fg_col.bin"
009229B2                            ;  		even
009229B2                            ; @FG_prz:	incbin	"engine/modes/level/data/layouts/main/3/fg_prz.bin"
009229B2                            ;  		even 
009229B2                            ; @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
009229B2                            ;  		even
009229B2                            ; @objects:	include	"engine/modes/level/data/layouts/main/3/objlist.asm"
009229B2                            ;  		even
009229B2                            
009229B2                            ; --------------------------------------------
009229B2                            
009229B2                            Pal_LvlMain_Gray:
009229B2                            		incbin	"engine/modes/level/data/layouts/main/lvl_pal.bin"
009229D2                            		incbin	"engine/modes/level/data/layouts/main/bg_pal.bin"
009229F2                            		even
009229F2                            		
009229F2                            Art_Lvl_Test:	incbin	"engine/modes/level/data/layouts/main/lvl_art.bin"
00926052                            Art_Lvl_Test_e:	even
00926052                            
00926052                            Art_LvlBG_Test:	incbin	"engine/modes/level/data/layouts/main/bg_art.bin"
0092AC12                            Art_LvlBG_Test_e:
0092AC12                            		even
0092AC12                            Map_LvlBG_Test:	incbin	"engine/modes/level/data/layouts/main/bg_map.bin"
0092BC12                            Map_LvlBG_Test_e:
0092BC12                            		even
0092BC12                            		
0092BC12                            ; --------------------------------------------
0092BC12                            
0092BC12                            Art_LvlPrizes:	incbin	"engine/modes/level/data/layouts/prizes_art.bin"
0092C812                            		even
0092C812                            Art_LvlPrizes_e:
0092C812                            
0092C812                            Pal_LvlCoinItms	incbin	"engine/modes/level/data/layouts/lvlitems_pal.bin"
0092C832                            		even
0092C832                            		
0092C832                            ; ====================================================================
0092C832                            ; -------------------------------------------------
0092C832                            ; Sound data
0092C832                            ; -------------------------------------------------
0092C832                            
0092C832                            ; --------------------------
0092C832                            ; MUSIC level 1
0092C832                            ; --------------------------
0092C832                            
0092C832                            Music_Level1:
0092C832 0B02                       		dc.b 11,2
0092C834 0000 0000                  		dc.l @notes
0092C838 0000 0000                       		dc.l @ins
0092C83C 000A                            		dc.w 10
0092C83E 0040 800F                        		dc.b FM_1,64,$80,$0F
0092C842 0140 800F                        		dc.b FM_2,64,$80,$0F
0092C846 0240 800F                        		dc.b FM_3,64,$80,$0F
0092C84A 0440 800F                  		dc.b FM_4,64,$80,$0F
0092C84E 0540 800F                  		dc.b FM_5,64,$80,$0F
0092C852 0640 800F                   		dc.b FM_6,64,$80,$0F
0092C856 8040 800F                   		dc.b PSG_1,64,$80,$0F
0092C85A A040 800F                   		dc.b PSG_2,64,$80,$0F
0092C85E C040 800F                   		dc.b PSG_3,64,$80,$0F
0092C862 E040 800F                   		dc.b NOISE,64,$80,$0F
0092C866                             		even
0092C866                            @notes:		incbin "engine/sound/music/level0.it",$50+$11B
0092DF4C                                  		even
0092DF4C 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins
0092DF52                            		even
0092DF52                            		
0092DF52 0001 0000                  @ymha: 		dc.w 1,0
0092DF56 0000 0000                  		dc.l fmBass_jazz
0092DF5A 0042 0000                  		dc.w 2|$40,0
0092DF5E 0000 0000                  		dc.l fm3drum_tick
0092DF62 38AB 3457                  		dc.w $00AB|$3800,$0457|$3000
0092DF66 3511 2336                  		dc.w $0511|$3000,$0336|$2000
0092DF6A 0083 FFE8                    		dc.w 3|$80,-24
0092DF6E 0000 0000                    		dc.l wav_stKick
0092DF72 0000 0000                   		dc.l wav_stKick_e
0092DF76 FFFF FFFF                   		dc.l -1
0092DF7A 0084 FFE8                    		dc.w 4|$80,-24
0092DF7E 0000 0000                    		dc.l wav_stSnare
0092DF82 0000 0000                   		dc.l wav_stSnare_e
0092DF86 FFFF FFFF                   		dc.l -1
0092DF8A FFFF                       		dc.w -1
0092DF8C                            		even
0092DF8C                            
0092DF8C 0005 0004                  @noise: 	dc.w 5,%100
0092DF90 FFFF                       		dc.w -1
0092DF92                            		even
0092DF92                            		
0092DF92                            ; --------------------------
0092DF92                            ; SFX: BONK
0092DF92                            ; --------------------------
0092DF92                            
0092DF92 00FF                       SndSfx_BONK:	dc.b 0,-1
0092DF94 0000 0000                  		dc.l @pattern
0092DF98 0000 0000                       		dc.l @instruments
0092DF9C 0003                            		dc.w 3
0092DF9E 0540 800E                        		dc.b FM_5,64,$80,%1110
0092DFA2 0640 800F                        		dc.b FM_6,64,$80,$F
0092DFA6 A040 800F                        		dc.b PSG_2,64,$80,$F
0092DFAA                            @pattern:	incbin "engine/sound/sfx/bonk.it",$50+$FC+$28
0092E04C                                  		even
0092E04C                            
0092E04C 0000                       @instruments: 	dc.w @ymha-@instruments
0092E04E FFFF                       		dc.w -1
0092E050 0000                       		dc.w @noise-@instruments
0092E052 FFFF                       		dc.w -1
0092E054                            		even
0092E054                            		
0092E054 0002 0000                  @ymha: 		dc.w 2,0
0092E058 0000 0000                     		dc.l FMSfx_Bump
0092E05C                            
0092E05C 0083 FFF0                     		dc.w $80|3,-16
0092E060 0000 0000                     		dc.l WAVE_lwpnch
0092E064 0000 0000                     		dc.l WAVE_lwpnch_e
0092E068 FFFF FFFF                     		dc.l -1
0092E06C                               		
0092E06C FFFF                       		dc.w -1	;EOL
0092E06E                            		even
0092E06E 0002 0005                  @noise: 	dc.w 2,%101
0092E072 FFFF                       		dc.w -1
0092E074                            		even
0092E074                            		
0092E074                            ; --------------------------
0092E074                            ; SFX: Bonk a coin
0092E074                            ; --------------------------
0092E074                            
0092E074                            SndSfx_BonkCoin:
0092E074 00FF                       		dc.b 0,-1
0092E076 0000 0000                  		dc.l @pattern
0092E07A 0000 0000                       		dc.l @instruments
0092E07E 0004                            		dc.w 4
0092E080 0540 800E                        		dc.b FM_5,64,$80,%1110
0092E084 0640 800F                        		dc.b FM_6,64,$80,$F
0092E088 A040 800F                        		dc.b PSG_2,64,$80,$F
0092E08C C040 800F                        		dc.b PSG_3,64,$80,$F
0092E090                            @pattern:	incbin "engine/sound/sfx/bonkcoin.it",$50+$12C
0092E15C 00                               		even
0092E15C                            
0092E15C 0000                       @instruments: 	dc.w @ymha-@instruments
0092E15E FFFF                       		dc.w -1
0092E160 0000                       		dc.w @noise-@instruments
0092E162 FFFF                       		dc.w -1
0092E164                            		even
0092E164                            		
0092E164 0002 0000                  @ymha: 		dc.w 2,0
0092E168 0000 0000                     		dc.l FMSfx_Bump
0092E16C                            
0092E16C 0083 FFF0                     		dc.w $80|3,-16
0092E170 0000 0000                     		dc.l WAVE_lwpnch
0092E174 0000 0000                     		dc.l WAVE_lwpnch_e
0092E178 FFFF FFFF                     		dc.l -1
0092E17C                               		
0092E17C FFFF                       		dc.w -1	;EOL
0092E17E                            		even
0092E17E 0002 0005                  @noise: 	dc.w 2,%101
0092E182 FFFF                       		dc.w -1
0092E184                            		even
0092E184                            		
0092E184                            ; --------------------------
0092E184                            ; SFX: PUM
0092E184                            ; --------------------------
0092E184                            
0092E184                            SndSfx_PUM:
0092E184 00FF                       		dc.b 0,-1
0092E186 0000 0000                  		dc.l @pattern
0092E18A 0000 0000                       		dc.l @instruments
0092E18E 0003                            		dc.w 3
0092E190 0540 800F                        		dc.b FM_5,64,$80,$0F
0092E194 E040 800F                        		dc.b NOISE,64,$80,$0F
0092E198 0640 800F                        		dc.b FM_6,64,$80,$0F
0092E19C                            @pattern:	incbin "engine/sound/sfx/blkbump.it",$F4+$50+$20
0092E23E                                  		even
0092E23E                            
0092E23E 0000                       @instruments:	dc.w @ymha-@instruments
0092E240 FFFF                       		dc.w -1
0092E242 0000                       		dc.w @noise-@instruments
0092E244                            		even
0092E244                            
0092E244 0001 0000                  @ymha: 		dc.w 1,0
0092E248 0000 0000                     		dc.l FMSfx_Punch
0092E24C                               		
0092E24C 0083 0000                     		dc.w $80|3,0
0092E250 0000 0000                     		dc.l WAVE_lwpnch
0092E254 0000 0000                     		dc.l WAVE_lwpnch_e
0092E258 FFFF FFFF                     		dc.l -1
0092E25C                               		
0092E25C FFFF                       		dc.w -1	;EOL
0092E25E                            		even
0092E25E                            @noise:
0092E25E 0002 0006                   		dc.w 2,%110
0092E262 FFFF                       		dc.w -1
0092E264                            		even
0092E264                            
0092E264                            ; --------------------------
0092E264                            ; SFX: PING
0092E264                            ; --------------------------
0092E264                            
0092E264                            SndSfx_PING:
0092E264 00FF                       		dc.b 0,-1
0092E266 0000 0000                  		dc.l @notes
0092E26A 0000 0000                       		dc.l @ins
0092E26E 0002                            		dc.w 2
0092E270 E040 800F                        		dc.b NOISE,64,$80,$0F
0092E274 0640 800F                        		dc.b FM_6,64,$80,$0F
0092E278                            @notes:		incbin "engine/sound/sfx/pingball.it",$50+$DC
0092E312                                  		even
0092E312 0000                       @ins: 		dc.w @ymha-@ins
0092E314 FFFF                       		dc.w -1
0092E316 0000                       		dc.w @noise-@ins
0092E318                            		even
0092E318                            @noise:
0092E318 0001 0004                   		dc.w 1,%100
0092E31C FFFF                       		dc.w -1
0092E31E                            		even
0092E31E                            @ymha:
0092E31E 0081 0000                  		dc.w $80|1,0
0092E322 0000 0000                  		dc.l WAVE_sfxBall
0092E326 0000 0000                  		dc.l WAVE_sfxBall_e
0092E32A FFFF FFFF                  		dc.l -1
0092E32E                            		
0092E32E FFFF                       		dc.w -1
0092E330                            		even
0092E330                            		
0092E330                            ; --------------------------
0092E330                            ; SFX: COIN
0092E330                            ; --------------------------
0092E330                            
0092E330                            SndSfx_COIN:
0092E330 00FF                       		dc.b 0,-1
0092E332 0000 0000                  		dc.l @notes
0092E336 0000 0000                       		dc.l @ins
0092E33A 0002                            		dc.w 2
0092E33C 8040 800F                        		dc.b PSG_1,64,$80,$F
0092E340 A040 800F                        		dc.b PSG_2,64,$80,$F
0092E344                            @notes:		incbin "engine/sound/sfx/coin.it",$50+$D4+8
0092E3EA                                  		even
0092E3EA FFFF                       @ins: 		dc.w -1
0092E3EC FFFF                       		dc.w -1
0092E3EE FFFF                       		dc.w -1
0092E3F0                            		even
0092E3F0                            		
0092E3F0                            ; --------------------------
0092E3F0                            ; SFX: COIN
0092E3F0                            ; --------------------------
0092E3F0                            
0092E3F0                            SndSfx_BEEBUZZ:
0092E3F0 00FF                       		dc.b 0,-1
0092E3F2 0000 0000                  		dc.l @notes
0092E3F6 0000 0000                       		dc.l @ins
0092E3FA 0001                            		dc.w 1
0092E3FC 0540 800F                        		dc.b FM_5,64,$80,$F
0092E400                            @notes:		incbin "engine/sound/sfx/beebuzz.it",$50+$D4
0092E4B0                                  		even
0092E4B0 0000                       @ins: 		dc.w @ymha-@ins
0092E4B2 FFFF                       		dc.w -1
0092E4B4 FFFF                       		dc.w -1
0092E4B6                            		even
0092E4B6                            @ymha:
0092E4B6 0001 0000                  		dc.w 1,0
0092E4BA 0000 0000                  		dc.l fmSfx_BUZZ
0092E4BE FFFF FFFF                  		dc.l -1
0092E4C2                            		
0092E4C2 FFFF                       		dc.w -1
0092E4C4                            		even
0092E4C4                            		
0092E4C4                            ; --------------------------
0092E4C4                            ; SFX: COIN
0092E4C4                            ; --------------------------
0092E4C4                            
0092E4C4                            SndSfx_PlyrJump:
0092E4C4 00FF                       		dc.b 0,-1
0092E4C6 0000 0000                  		dc.l @notes
0092E4CA 0000 0000                       		dc.l @ins
0092E4CE 0001                            		dc.w 1
0092E4D0 E040 800F                        		dc.b NOISE,64,$80,$F
0092E4D4                            @notes:		incbin "engine/sound/sfx/plyrjump.it",$50+$DC
0092E584 00                               		even
0092E584 FFFF FFFF 0000             @ins:		dc.w -1,-1,@noise-@ins
0092E58A 0001 0004                  @noise:		dc.w 1,%100
0092E58E                            		even
0092E58E                               
0092E58E                            ; --------------------------
0092E58E                            ; SFX: COIN
0092E58E                            ; --------------------------
0092E58E                            
0092E58E                            SndSfx_HitEnemy:
0092E58E 00FF                       		dc.b 0,-1
0092E590 0000 0000                  		dc.l @notes
0092E594 0000 0000                  		dc.l @ins
0092E598 0002                       		dc.w 2
0092E59A 0640 800F                  		dc.b FM_6,64,$80,$F
0092E59E E040 800F                  		dc.b NOISE,64,$80,$F
0092E5A2                            @notes:		incbin "engine/sound/sfx/bumpenemy.it",$50+$D4
0092E64E 00                         		even
0092E64E 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins
0092E654 0001 0000                  @ymha:		dc.w 1,0
0092E658 0000 0000                  		dc.l FMSfx_Punch
0092E65C 0002 0006                  @noise:		dc.w 2,%110
0092E660                            		
0092E660                            ; --------------------------
0092E660                            ; instruments
0092E660                            ; --------------------------
0092E660                            
0092E660                            fmBass_jazz:	incbin	"engine/sound/instruments/FM/bass/bass_jazz.bin"
0092E67A 00                         		even
0092E67A                            fm3drum_tick: 	incbin	"engine/sound/instruments/fm/drums/fm3_tick.bin"
0092E694 00                         		even
0092E694                            		
0092E694                            FMSfx_Punch:	incbin	"engine/sound/instruments/FM/fmsfx_boomlong.bin"
0092E6AE 00                         		even
0092E6AE                            FMSfx_Bump:	incbin	"engine/sound/instruments/FM/fmsfx_bump.bin"
0092E6C8 00                         		even
0092E6C8                            fmSfx_BUZZ:	incbin	"engine/sound/instruments/FM/old/socket_voiceset.bin",$19*18,$19
0092E6E2 00                         		even
0092E6E2                            		
0092E6E2                            WAVE_lwbonk:	incbin	"engine/sound/instruments/DAC/sfxbonk.wav",$2C
0092FBA8 00                         WAVE_lwbonk_e:	even
0092FBA8                            WAVE_lwpnch:	incbin	"engine/sound/instruments/DAC/sfxhithard.wav",$2C
00931760 00                         WAVE_lwpnch_e:	even
00931760                            WAVE_sfxBall:	incbin	"engine/sound/instruments/DAC/sfxBallTick.wav",$2C
009336B4                            WAVE_sfxBall_e:	even
009336B4                            wav_stKick:	incbin	"engine/sound/instruments/DAC/stKick.wav",$2C
0093469C                            wav_stKick_e:	even
0093469C                            wav_stSnare:	incbin	"engine/sound/instruments/DAC/stSnare.wav",$2C
0093679C                            wav_stSnare_e:	even
0093679C                            wav_stSnare_e:	even
0093679C                            		
0093679C                            		inform 0,"This 68k BANK uses: %h",*-THIS_BANK_1
0003679C                            
0003679C                            ; ====================================================================
0003679C                            ; -------------------------------------------------
0003679C                            ; 68k DATA
0003679C                            ; -------------------------------------------------
0003679C                            
0003679C                            ; ====================================================================
0003679C                            ; -------------------------------------------------
0003679C                            ; MARS ONLY: sh2-ready DATA
0003679C                            ; -------------------------------------------------
0003679C                            
0003679C                            		obj *+$22000000
2203679C                            		
2203679C                            ; --------------------------------------------
2203679C                            	
2203679C 0000 0000 0000 0000 0000+  mdldata_cube:	dc.l @faces,@points,mdldata_material
220367A8                            @faces:		incbin "ideas/models/cube_fce.bin"
220367F0                            		align 4
220367F0                            @points: 	incbin "ideas/models/cube_vrt.bin"
22036820                            		align 4
22036820                            		
22036820 0000 0000 0000 0000 0000+  mdldata_sphere:	dc.l @faces,@points,mdldata_material
2203682C                            @faces:		incbin "ideas/models/sphere_fce.bin"
22036B4C                            		align 4
22036B4C                            @points: 	incbin "ideas/models/sphere_vrt.bin"
22036C48                            		align 4
22036C48                            
22036C48 0000 0000 0000 0000 0000+  mdldata_field:	dc.l @faces,@points,mdldata_material
22036C54                            @faces:		incbin "ideas/models/field_fce.bin"
22037854                            		align 4
22037854                            @points: 	incbin "ideas/models/field_vrt.bin"
22037F1A 0000                       		align 4
22037F1C                            
22037F1C 0000 0000 0000 0000 0000+  mdldata_world:	dc.l @faces,@points,mdldata_material
22037F28                            @faces:		incbin "ideas/models/world_fce.bin"
2203A694                            		align 4
2203A694                            @points: 	incbin "ideas/models/world_vrt.bin"
2203BBAC                            		align 4
2203BBAC                            	
2203BBAC 0000 0000 0000 0000 0000+  mdldata_monkey:	dc.l @faces,@points,mdldata_material
2203BBB8                            @faces:		incbin "ideas/models/monkey_fce.bin"
2203D2E8                            		align 4
2203D2E8                            @points: 	incbin "ideas/models/monkey_vrt.bin"
2203DECA 0000                       		align 4
2203DECC                            		
2203DECC                            ; --------------------------------------------
2203DECC                            
2203DECC                            mdldata_material:
2203DECC                            
2203DECC                            		;BETTY
2203DECC 8000 0000                         		dc.l $80000000|0		; ID
2203DED0 0000 0000                    		dc.l texturepack+$312		; Texture address     | (-1) Solid color mode
2203DED4 0140 0000                    		dc.l (320<<16)			; Texture Width+Entry | Solid color
2203DED8 0000 0140 0000 0000          		dc.l 320,  0
2203DEE0 0000 0000 0000 0000          		dc.l   0,  0
2203DEE8 0000 0000 0000 00DF          		dc.l   0,223
2203DEF0 0000 0140 0000 00DF               		dc.l 320,223
2203DEF8                                   		
2203DEF8                                   		;ZACATE
2203DEF8                            ;		tex_01
2203DEF8 8000 0001                         		dc.l $80000000|1		; ID
2203DEFC 0000 0000                    		dc.l texturepack+$312		; Texture address     | (-1) Solid color mode
2203DF00 0140 0000                    		dc.l (320<<16)			; Texture Width+Entry | Solid color
2203DF04 0000 003F 0000 00E0          		dc.l  63,224
2203DF0C 0000 0000 0000 00E0          		dc.l   0,224
2203DF14 0000 0000 0000 011F          		dc.l   0,287
2203DF1C 0000 003F 0000 011F               		dc.l  63,287
2203DF24                            
2203DF24                                   		;CASAS
2203DF24 8000 0002                         		dc.l $80000000|2		; ID
2203DF28 0000 0000                    		dc.l texturepack+$312		; Texture address     | (-1) Solid color mode
2203DF2C 0140 0000                    		dc.l (320<<16)			; Texture Width+Entry | Solid color
2203DF30 0000 007F 0000 0120          		dc.l 127,288
2203DF38 0000 0000 0000 0120          		dc.l   0,288
2203DF40 0000 0000 0000 016D          		dc.l   0,365
2203DF48 0000 007F 0000 016D               		dc.l 127,365
2203DF50                                   		
2203DF50                                   		;CAMINO,left
2203DF50 8000 0003                         		dc.l $80000000|3		; ID
2203DF54 0000 0000                    		dc.l texturepack+$312		; Texture address     | (-1) Solid color mode
2203DF58 0140 0000                    		dc.l (320<<16)			; Texture Width+Entry | Solid color
2203DF5C 0000 007F 0000 00E0          		dc.l 127,224
2203DF64 0000 0040 0000 00E0          		dc.l  64,224
2203DF6C 0000 0040 0000 011F          		dc.l  64,287
2203DF74 0000 007F 0000 011F               		dc.l 127,287
2203DF7C                                   		
2203DF7C                                   		;CAMINO, right
2203DF7C 8000 0004                         		dc.l $80000000|4		; ID
2203DF80 0000 0000                    		dc.l texturepack+$312		; Texture address     | (-1) Solid color mode
2203DF84 0140 0000                    		dc.l (320<<16)			; Texture Width+Entry | Solid color
2203DF88 0000 00BF 0000 00E0          		dc.l 191,224
2203DF90 0000 0080 0000 00E0          		dc.l 128,224
2203DF98 0000 0080 0000 011F          		dc.l 128,287
2203DFA0 0000 00BF 0000 011F               		dc.l 191,287
2203DFA8                                   		
2203DFA8 FFFF FFFF                  		dc.l -1
2203DFAC                            		align 4
2203DFAC                            
2203DFAC                            		cnop 0,$10000
22040000 4151 5549                  		dc.b "AQUI"
22040004                            texturepack:
22040004                            		incbin "ideas/textures.tga"
22058330                            		align 4
22058330                            		
22058330                            ; --------------------------------------------
22058330                            ; SOUND
22058330                            ; --------------------------------------------
22058330                            
22058330                            ; 		dc.b "LEFT"
22058330                            ; 		incbin "ideas/L.wav",$2C,$1C8000
22058330                            ; 
22058330                            ; 		dc.b "RGHT"
22058330                            ; 		incbin "ideas/R.wav",$2C,$1C8000
22058330                            
22058330                            ; --------------------------------------------
22058330                            
22058330                            		objend
00058330                            		
00058330                            ; ====================================================================
00058330                            ; -------------------------------------------------
00058330                            ; END
00058330                            ; -------------------------------------------------
00058330                            		
00058330                            ROM_END:
00058330                            		inform 0,"ROM Size: %h",ROM_END
00058330                            		cnop 0,$80000
