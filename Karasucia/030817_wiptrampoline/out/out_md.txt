00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; GAME
00000000                            ; -------------------------------------------------
00000000                            
00000000                            		include	"system/macros.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Macros
00000000                            ; -------------------------------------------------
00000000                            
00000000                            align		macro
00000000                            		cnop 0,\1
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Pick ROM section
00000000                            ; --------------------------------------------
00000000                            
00000000                            romSection	macro where
00000000                            CODE		=	*+$880000
00000000                            DATA		=	*+marsbank
00000000                            RAM		=	$FF0000
00000000                            WRAM		=	$200000
00000000                            ; ---------------------------
00000000                            		if MCD|MARS == True
00000000                            		obj \1
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; ---------------------------
00000000                            
00000000                            romSectionEnd	macro
00000000                            		if MCD
00000000                            		objend
00000000                            		elseif MARS
00000000                            		objend
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Video
00000000                            ; --------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; dmaTask
00000000                            ; --------------------------------------------
00000000                            
00000000                            dmaTask		macro
00000000                            FILL		=	$C0000000+1
00000000                            COPY		=	$C0000000+2
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA FILL
00000000                            ; (FILL,byte,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		if \1=FILL
00000000                            		
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                            		move.w	#$9780,(vdp_ctrl)
00000000                            		move.l	#\3|$80,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait1\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait1\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA COPY
00000000                            ; (COPY,from,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		elseif \1=COPY
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\2>>1)&$FF00)>>8)|(($9500+((\2>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$97C0,(vdp_ctrl)
00000000                            		move.l	#\3|$C0,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait2\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait2\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA ROM/RAM to VDP
00000000                            ; (from,to,size)
00000000                            ; ---------------------------
00000000                            		else
00000000                            		;\1 from | \2 to | \3 size
00000000                             		move.l	#$9400+(((\3)&$FF00)>>9)|(($9300+(((\3)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\1>>1)&$FF00)>>8)|(($9500+((\1>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(vdp_ctrl)
00000000                            		
00000000                            ; 		move.l	#\2|$80,(vdp_ctrl)		;new attempt
00000000                            		move.w	#((\2&$FFFF))|$80,-(sp)
00000000                            		move.w	#(((\2)>>16)&$FFFF),-(sp)
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#$100,($A11100)
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100)
00000000                              		bne.s	@WaitZ80_\@
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#0,($A11100).l
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            
00000000                            fade		macro
00000000                            in = 1
00000000                            out = 0
00000000                            		if \1=in
00000000                             		move.l	#$0101003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		elseif \1=out
00000000                            		
00000000                            		move.l	#$0201003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            ; System
00000000                            ; --------------------------------------------
00000000                            
00000000                            z80		macro
00000000                            ON = 1
00000000                            OFF = 0
00000000                            		if \1=OFF
00000000                            		
00000000                             		move.w	#$100,($A11100).l
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100).l
00000000                              		bne.s	@WaitZ80_\@
00000000                            		elseif \1=ON
00000000                            		
00000000                              		move.w	#0,($A11100).l
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            		
00000000                            		include	"system/ram.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; RAM
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; ---------------------------
00000000                            ; Setup
00000000                            ; ---------------------------
00000000                            
00000000                                            rsset	$FFFFBC00
00000000 =FFFFBC00                  RAM_ModeBuffer	rs.b	$2000
00000000 =FFFFDC00                  RAM_Engine      rs.b	$200
00000000 =FFFFDE00                  RAM_System      rs.b	$80
00000000 =FFFFDE80                  RAM_Input	rs.b	$80
00000000 =FFFFDF00                  RAM_Video       rs.b	$1000
00000000 =FFFFEF00                  RAM_Audio       rs.b	$400
00000000 =FFFFF300                  endof_ram	rs.l	0
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            		include	"system/hardware/map.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Variables
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; I/O
00000000                            ; --------------------------------------------
00000000                            
00000000 =00A10001                  port_ver	equ	$A10001
00000000 =00A14000                  port_tmss	equ	$A14000
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; VDP
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00000                  vdp_data	equ	$C00000
00000000 =00C00004                  vdp_ctrl	equ	$C00004
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MD Audio
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00011                  sound_psg	equ	$C00011
00000000 =00A04000                  sound_ym_1	equ	$A04000
00000000 =00A04001                  sound_ym_2	equ	$A04001
00000000 =00A04002                  sound_ym_3	equ	$A04002
00000000 =00A04003                  sound_ym_4	equ	$A04003
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MARS only
00000000                            ; --------------------------------------------
00000000                            
00000000 =00840000                  framebuffer	equ	$840000
00000000 =00860000                  overwrite	equ	$860000
00000000 =00880000                  marsipl		equ	$880000
00000000 =00900000                  marsbank	equ	$900000
00000000 =00A130EC                  mars_ID		equ	$a130ec		; MARS ID "MARS"
00000000                            
00000000 =00A15100                  marsreg		equ	$a15100
00000000 =00000000                  access		equ	$00		; byte		; MARS VDP access control
00000000 =00000001                  adapter		equ	$01		; byte		; MARS adapter control
00000000 =00000003                  intctl		equ	$03		; byte		; SH2 interrupt control
00000000 =00000005                  bankctl		equ	$05		; byte		; BANK conterol
00000000 =00000007                  dreqctl		equ	$07		; byte		; DREQ control
00000000 =00000008                  dreqsource	equ	$08		; long		; 68 to SH DREQ source address
00000000 =0000000C                  dreqdest	equ	$0c		; long		; 68 to SH DREQ destination address
00000000 =00000010                  dreqlength	equ	$10		; word		; 68 to SH DREQ length
00000000 =00000012                  dreqfifo	equ	$12		; word		; 68 to SH DREQ FIFO
00000000 =0000001B                  segatv		equ	$1b		; byte		; SEGA TV Reg.
00000000 =00000020                  comm0		equ	$20		; 		; Communcation Reg.
00000000 =00000022                  comm2		equ	$22		; 		; Communcation Reg.
00000000 =00000024                  comm4		equ	$24		; 		; Communcation Reg.
00000000 =00000026                  comm6		equ	$26		; 		; Communcation Reg.
00000000 =00000028                  comm8		equ	$28		; 		; Communcation Reg.
00000000 =00000029                  comm9		equ	$29		; 		; Communcation Reg.
00000000 =0000002A                  comm10		equ	$2a		; 		; Communcation Reg.
00000000 =0000002C                  comm12		equ	$2c		; 		; Communcation Reg.
00000000 =0000002E                  comm14		equ	$2e		; 		; Communcation Reg.
00000000                            
00000000 =00000080                  tvmode		equ	$80		; byte		; NTSC/PAL
00000000 =00000081                  bitmapmode	equ	$81		; byte		; BitMap Mode Reg.
00000000 =00000083                  shift		equ	$83		; byte		; Packed Pixel Dot Shift
00000000 =00000085                  filllength	equ	$85		; byte		; DRAM Fill Length
00000000 =00000086                  fillstart	equ	$86		; word		; DRAM Fill Start Address
00000000 =00000088                  filldata	equ	$88		; word		; DRAM Fill Data
00000000 =0000008A                  vdpsts		equ	$8a		; byte		; VDP status
00000000 =0000008B                  framectl	equ	$8b		; byte		; Frame Buffer Control
00000000                            
00000000 =00A15200                  palette		equ	$a15200		; 256 words	; Palette Data
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; OTHER
00000000                            ; --------------------------------------------
00000000                            
00000000                            		
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Header / Init
00000000                            ; -------------------------------------------------
00000000                            
00000000                            		include	"system/hardware/md/head.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Header
00000000                            ; 
00000000                            ; MD
00000000                            ; -------------------------------------------------
00000000                            
00000000 0000 0000                  		dc.l 0
00000004 0000 0000                  		dc.l MD_Entry
00000008 0000 0000                  		dc.l MD_Err_Bus
0000000C 0000 0000                  		dc.l MD_Err_Addr
00000010 0000 0000                  		dc.l MD_Err_Illg
00000014 0000 0000                  		dc.l MD_Err_Div
00000018 0000 0000                  		dc.l MD_Err_CHK
0000001C 0000 0000                  		dc.l MD_Err_TRAPV
00000020 0000 0000                  		dc.l MD_Err_Privl
00000024 0000 0000                  		dc.l MD_Err_TRACE
00000028 0000 0000                  		dc.l MD_Err_EMU10
0000002C 0000 0000                  		dc.l MD_Err_EMU11
00000030 0000 0000 0000 0000 0000+  		align	$70
00000070 0000 0000                  		dc.l RAM_HintJumpTo
00000074 0000 0000                  		align	$78
00000078 0000 0000                  		dc.l RAM_VintJumpTo
0000007C 0000 0000 0000 0000 0000+  		align	$100
00000100 5345 4741 204D 4547 4120+  		dc.b "SEGA MEGA DRIVE "
00000110 0000 0000 0000 0000 0000+  		align	$120
00000120 4C61 7320 6176 656E 7475+  		dc.b "Las aventuras de Dominoe"
00000138 0000 0000 0000 0000 0000+  		align	$150
00000150 446F 6D69 6E6F 6520 4164+  		dc.b "Dominoe Adventures"
00000162 0000 0000 0000 0000 0000+  		align	$200
00000200                            
00000200                            ; ====================================================================
00000200                            ; -------------------------------------------------
00000200                            ; Entry
00000200                            ; -------------------------------------------------
00000200                            
00000200                            MD_Entry:
00000200 46FC 2700                  		move.w	#$2700,sr
00000204 4AB9 00A1 0008             		tst.l	($A10008).l		;Test Port A control
0000020A 6600                       		bne.s	@PortA_Ok
0000020C 4A79 00A1 000C             		tst.w	($A1000C).l		;Test Port C control
00000212                            @PortA_Ok:
00000212 6600 0000                  		bne	@Hot
00000216                            
00000216 1039 00A1 0001             		move.b	(port_ver),d0
0000021C 0200 000F                  		and.b	#%1111,d0
00000220 6700                       		beq.s	@Skip
00000222 23F9 0000 0100 00A1 4000   		move.l	($100),(port_tmss)
0000022C                            		
0000022C 41F9 FFFF 0000             		lea	($FFFF0000).l,a0
00000232 323C 7FFF                  		move.w	#$7FFF,d1
00000236                            @ClearRAM:
00000236 4258                       		clr.w	(a0)+
00000238 51C9 FFFC                  		dbf	d1,@ClearRAM
0000023C 4CF9 7FFF 00FF 0000        		movem.l	($FF0000).l,d0-a6
00000244                            		
00000244                            @Skip:
00000244 4A79 00C0 0004             		tst.w	(vdp_ctrl).l		;test if VDP works
0000024A                            @Hot:
0000024A 6000 0000                  		bra	MD_Main
0000024E                            		
0000024E                            ; ====================================================================
0000024E                            ; -------------------------------------------------
0000024E                            ; Error handler
0000024E                            ; -------------------------------------------------
0000024E                            
0000024E                            MD_Err_Bus:
0000024E 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrBus,($FFFFBBBC)
00000258 6000                       		bra.s	MD_Error
0000025A                            MD_Err_Addr:
0000025A 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrAddr,($FFFFBBBC)
00000264 6000                       		bra.s	MD_Error
00000266                            MD_Err_Illg:
00000266 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrIllg,($FFFFBBBC)
00000270 6000                       		bra.s	MD_Error
00000272                            MD_Err_Div:
00000272 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
0000027C 6000                       		bra.s	MD_Error
0000027E                            MD_Err_CHK:
0000027E 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
00000288 6000                       		bra.s	MD_Error
0000028A                            MD_Err_TRAPV:
0000028A 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
00000294 6000                       		bra.s	MD_Error
00000296                            MD_Err_Privl:
00000296 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
000002A0 6000                       		bra.s	MD_Error
000002A2                            MD_Err_TRACE:
000002A2 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
000002AC 6000                       		bra.s	MD_Error
000002AE                            MD_Err_EMU10:
000002AE 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
000002B8 6000                       		bra.s	MD_Error
000002BA                            MD_Err_EMU11:
000002BA 23FC 0000 0000 FFFF BBBC   		move.l	#Asc_ErrTEMP,($FFFFBBBC)
000002C4                            		
000002C4                            MD_Error:
000002C4 48F9 FFFF FFFF BBC0        		movem.l	d0-a7,($FFFFBBC0)
000002CC 46FC 2700                  		move.w	#$2700,sr
000002D0                            		
000002D0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_ctrl)
000002DA 33FC 0000 00C0 0000        		move.w	#$0000,(vdp_data)
000002E2                            
000002E2 4A79 0000 0000             		tst.w	(RAM_Palette+$1E)
000002E8 6600                       		bne.s	@alrdy2
000002EA 23FC C01E 0000 00C0 0004   		move.l	#$C01E0000,(vdp_ctrl)
000002F4 33FC 0EEE 00C0 0000        		move.w	#$0EEE,(vdp_data)
000002FC                            @alrdy2:
000002FC 23FC 5800 0003 00C0 0004   		move.l	#$58000003,(vdp_ctrl)
00000306 41F9 0000 0000             		lea	(Art_DebugFont),a0
0000030C 303C 0007                  		move.w	#(($20)/4)-1,d0
00000310                            @dbg_loop:
00000310 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
00000316 51C8 FFF8                  		dbf	d0,@dbg_loop
0000031A                            		
0000031A 207C 0000 0000             		movea.l	#AscErr_Base,a0
00000320 7002                       		moveq	#2,d0
00000322 223C 0000 0000             		move.l	#$00000000,d1
00000328 343C 8680                  		move.w	#$8680,d2
0000032C 6100 0000                  		bsr	Video_PrintText
00000330                            		
00000330 2079 FFFF BBBC             		movea.l	($FFFFBBBC),a0
00000336 7002                       		moveq	#2,d0
00000338 223C 0001 0001             		move.l	#$00010001,d1
0000033E 343C 8680                  		move.w	#$8680,d2
00000342 6100 0000                  		bsr	Video_PrintText
00000346                            		
00000346                            ; 		movea.l	($FFFFBBFC),a0
00000346                            ; 		moveq	#2,d0
00000346                            ; 		move.l	#$001B0003,d1
00000346                            ; 		move.l	-4(a0),d2
00000346                            ; 		move.w	#$680,d3
00000346                            ; 		moveq	#2,d4
00000346                            ; 		bsr	Video_PrintVal
00000346                            		
00000346 2E3C 0002 0007             		move.l	#$00020007,d7
0000034C 43F9 FFFF BBC0             		lea	($FFFFBBC0),a1
00000352                            @loopy:
00000352 7002                       		moveq	#2,d0
00000354 223C 0004 0000             		move.l	#$00040000,d1
0000035A 4847                       		swap	d7
0000035C 3207                       		move.w	d7,d1
0000035E 0647 0001                  		add.w	#1,d7
00000362 4847                       		swap	d7
00000364 2419                       		move.l	(a1)+,d2
00000366 363C 8680                  		move.w	#$8680,d3
0000036A 7802                       		moveq	#2,d4
0000036C 6100 0000                  		bsr	Video_PrintVal
00000370 51CF FFE0                  		dbf	d7,@loopy
00000374                            		
00000374 2E3C 0002 0007             		move.l	#$00020007,d7
0000037A 43F9 FFFF BBE0             		lea	($FFFFBBE0),a1
00000380                            @loopy2:
00000380 7002                       		moveq	#2,d0
00000382 223C 0010 0000             		move.l	#$00100000,d1
00000388 4847                       		swap	d7
0000038A 3207                       		move.w	d7,d1
0000038C 0647 0001                  		add.w	#1,d7
00000390 4847                       		swap	d7
00000392 2419                       		move.l	(a1)+,d2
00000394 363C 8680                  		move.w	#$8680,d3
00000398 7802                       		moveq	#2,d4
0000039A 6100 0000                  		bsr	Video_PrintVal
0000039E 51CF FFE0                  		dbf	d7,@loopy2
000003A2                            		
000003A2 23FC 8700 920A 00C0 0004   		move.l	#$8700920A,(vdp_ctrl)
000003AC 60FE                       		bra.s	*
000003AE                            
000003AE 4255 5320 4552 524F 5220+  Asc_ErrBus: 	dc.b "BUS ERROR                              ",0
000003D6                            		even
000003D6 4144 4452 4553 5320 4572+  Asc_ErrAddr: 	dc.b "ADDRESS Error (R/W to an odd address)  ",0
000003FE                            		even
000003FE 494C 4C45 4741 4C20 496E+  Asc_ErrIllg: 	dc.b "ILLEGAL Instruction / Unknown error    ",0
00000426                            		even
00000426 504F 4E4D 4520 5449 5455+  Asc_ErrTEMP: 	dc.b "PONME TITULO CUANDO PUEDAS MIJO        ",0
0000044E                            		even
0000044E                            		
0000044E                            AscErr_Base:
0000044E 2020 2020 2020 2020 2020+  		dc.b "                                        ",$A
00000477 2020 2020 2020 2020 2020+  		dc.b "                                        ",$A
000004A0 2044 3020 3030 3030 3030+  		dc.b " D0 00000000 A0 00000000                ",$A
000004C9 2044 3120 3030 3030 3030+  		dc.b " D1 00000000 A1 00000000                ",$A
000004F2 2044 3220 3030 3030 3030+  		dc.b " D2 00000000 A2 00000000                ",$A
0000051B 2044 3320 3030 3030 3030+  		dc.b " D3 00000000 A3 00000000                ",$A
00000544 2044 3420 3030 3030 3030+  		dc.b " D4 00000000 A4 00000000                ",$A
0000056D 2044 3520 3030 3030 3030+  		dc.b " D5 00000000 A5 00000000                ",$A
00000596 2044 3620 3030 3030 3030+  		dc.b " D6 00000000 A6 00000000                ",$A
000005BF 2044 3720 3030 3030 3030+  		dc.b " D7 00000000 SP 00000000                ",0
000005E8                            		even
000005E8                            		
000005E8                            		
000005E8                            		
000005E8                            ; ====================================================================
000005E8                            ; -------------------------------------------------
000005E8                            ; Subs
000005E8                            ; -------------------------------------------------
000005E8                            
000005E8                            		include	"system/video.asm"
000005E8                            ; ====================================================================
000005E8                            ; VDP
000005E8                            ; ====================================================================
000005E8                            
000005E8                            ; -------------------------------------------------
000005E8                            ; Variables
000005E8                            ; -------------------------------------------------
000005E8                            
000005E8                            		rsreset
000005E8 =00000000                  palFd_mode	rs.b 1
000005E8 =00000001                  palFd_delay	rs.b 1
000005E8 =00000002                  palFd_from	rs.b 1			;TODO: poner funcionar esto
000005E8 =00000003                  palFd_num	rs.b 1
000005E8 =00000004                  palFd_timer	rs.w 1
000005E8                            
000005E8                            		rsreset
000005E8 =00000000                  sprite_free	rs.l 1
000005E8 =00000004                  sprite_link	rs.w 1
000005E8 =00000006                  sprite_used	rs.w 1
000005E8                            
000005E8                            ; ====================================================================
000005E8                            ; -------------------------------------------------
000005E8                            ; RAM
000005E8                            ; -------------------------------------------------
000005E8                            
000005E8                            		rsset RAM_Video
000005E8 =FFFFDF00                  RAM_ScrlHor	rs.l 240
000005E8 =FFFFE2C0                  RAM_ScrlVer	rs.l $20			; Normal
000005E8 =FFFFE340                  RAM_Sprites	rs.l (80*2)			; Normal
000005E8 =FFFFE5C0                  RAM_SprControl	rs.l 2				; Normal
000005E8 =FFFFE5C8                  RAM_HSprites	rs.l (80*2)			; For HBlank
000005E8 =FFFFE848                  RAM_HScrlVer	rs.l $20			; For HBlank
000005E8 =FFFFE8C8                  RAM_HSprLast	rs.l 2				; For HBlank
000005E8 =FFFFE8D0                  RAM_Palette	rs.w 64				; Normal
000005E8 =FFFFE950                  RAM_HPalette	rs.w 64				; For HBlank
000005E8 =FFFFE9D0                  RAM_PalFade	rs.w 64				; Normal
000005E8 =FFFFEA50                  RAM_HPalFade	rs.w 64				; For HBlank
000005E8 =FFFFEAD0                  RAM_PalFadeSys	rs.l 8*2
000005E8 =FFFFEB10                  RAM_DMA_Buffer	rs.b $200
000005E8 =FFFFED10                  RAM_VidRegs	rs.b 16				; Unused regs included (always zero) | WINDOW and DMA regs ignored, use them separately
000005E8                            
000005E8 =FFFFED20                  sizeof_vid	rs.l 0
000005E8                            ;       		inform 0,"video ram: %h",(sizeof_vid-RAM_Video)
000005E8                            
000005E8                            ; ====================================================================
000005E8                            ; -------------------------------------------------
000005E8                            ; Subs
000005E8                            ; -------------------------------------------------
000005E8                            
000005E8                            ; -------------------------------------------------
000005E8                            ; Video control
000005E8                            ; -------------------------------------------------
000005E8                            
000005E8                            Video_init:
000005E8 41FA 0000                  		lea	reg_data(pc),a0
000005EC 43F9 FFFF ED10             		lea	(RAM_VidRegs),a1
000005F2 303C 8000                  		move.w	#$8000,d0
000005F6 7210                       		moveq	#17-1,d1
000005F8                            @reg_list:
000005F8 1018                       		move.b	(a0)+,d0
000005FA 12C0                       		move.b	d0,(a1)+
000005FC 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
00000602 0640 0100                  		add.w	#$100,d0
00000606 51C9 FFF0                  		dbf	d1,@reg_list
0000060A 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)	;WINDOW LEFT/TOP clear
00000614 23FC 9300 9400 00C0 0004   		move.l	#$93009400,(vdp_ctrl)	;DMA len low/high clear
0000061E 23FC 9500 9600 00C0 0004   		move.l	#$95009600,(vdp_ctrl)	;DMA addr mid/low clear
00000628 33FC 9700 00C0 0004        		move.w	#$9700,(vdp_ctrl)	;DMA addr high clear
00000630                              	
00000630                            ; --------------------------------------------
00000630                            ; Video_ClearAll
00000630                            ; --------------------------------------------
00000630                            
00000630                            Video_ClearAll:
00000630 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)
0000063A                            		
0000063A 6100                       		bsr.s	Video_ClrAllLyrs
0000063C 6100                       		bsr.s	Video_ClearScroll
0000063E 6100 0000                  		bsr	Sprites_Clear
00000642 6000 0000                  		bra	Sprites_Reset
00000646                            		
00000646                            Video_ClearSprites:
00000646 6100 0000                  		bsr	Sprites_Clear
0000064A 6000 0000                  		bra	Sprites_Reset
0000064E                            		
0000064E                            ; --------------------------------------------
0000064E                            ; Video_ClrAllLyrs
0000064E                            ; --------------------------------------------
0000064E                            
0000064E                            Video_ClrAllLyrs:
0000064E 203C 4000 0003             		move.l	#$40000003,d0
00000654 6100                       		bsr.s	Video_ClrLyr
00000656 203C 5000 0003             		move.l	#$50000003,d0
0000065C 6100                       		bsr.s	Video_ClrLyr
0000065E 203C 6000 0003             		move.l	#$60000003,d0
00000664                            ; 		bsr.s	Video_ClrLyr
00000664                            ; 		rts
00000664                            		
00000664                            ; --------------------------------------------
00000664                            ; Video_ClrLyr
00000664                            ; 
00000664                            ; d0 | LONG - VDP VRAM Command for the layer
00000664                            ; --------------------------------------------
00000664                            
00000664                            Video_ClrLyr:
00000664 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
0000066A 303C 07FF                  		move.w	#$7FF,d0
0000066E                            @loop:
0000066E 33FC 0000 00C0 0000        		move.w	#0,(vdp_data)
00000676 51C8 FFF6                  		dbf	d0,@loop
0000067A 4E75                       		rts
0000067C                            	
0000067C                            ; --------------------------------------------
0000067C                            ; Video_ClrHScrl
0000067C                            ; --------------------------------------------
0000067C                            
0000067C                            Video_ClrHScrl:
0000067C 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
00000682 303C 00DF                  		move.w	#224-1,d0
00000686 6000                       		bra.s	VidClrScrl_loop
00000688                            
00000688                            ; --------------------------------------------
00000688                            ; Video_ClearScroll
00000688                            ; --------------------------------------------
00000688                            
00000688                            Video_ClearScroll:
00000688 61F2                       		bsr.s	Video_ClrHScrl
0000068A 41F9 FFFF E2C0             		lea	(RAM_ScrlVer),a0
00000690 6100                       		bsr.s	Video_ClrVScrl
00000692 41F9 FFFF E848             		lea	(RAM_HScrlVer),a0
00000698                            ; 		bsr.s	Video_ClrVScrl
00000698                            		
00000698                            ; --------------------------------------------
00000698                            ; Video_ClrVScrl
00000698                            ; 
00000698                            ; a0 - Vertical scroll data
00000698                            ; --------------------------------------------
00000698                            
00000698                            Video_ClrVScrl:
00000698 303C 001F                  		move.w	#$20-1,d0
0000069C                            VidClrScrl_loop:
0000069C 4298                       		clr.l	(a0)+
0000069E 51C8 FFFC                  		dbf	d0,VidClrScrl_loop
000006A2 4E75                       		rts
000006A4                            		
000006A4                            ; ------------------------------------
000006A4                            
000006A4                            reg_data:
000006A4 04                         		dc.b %00000100			; $80: [4] HInt interrupt OFF | [2] ALWAYS ON | [1] HV Counter OFF
000006A5 74                         		dc.b %01110100			; $81: [6] Display ON, [5] Vint interrupt ON, [4] DMA OFF, [3] V28 (V30 PAL ONLY) | [2] ALWAYS ON
000006A6 30                         		dc.b ($C000>>10)&%00111000	; $82: Plane A pattern table
000006A7 34                         		dc.b ($D000>>10)&%00111110	; $83:  WINDOW pattern table (%00111110 H32, %00111100 H40)
000006A8 07                         		dc.b ($E000>>13)&%00000111	; $84: Plane B pattern table
000006A9 7C                         		dc.b ($F800>>09)&%01111111	; $85:  Sprite attribute table (%01111111 H32, %01111110 H40)
000006AA 00                         		dc.b 0				; $86: NOTHING
000006AB 00                         		dc.b 0				; $87: BG Color
000006AC 00                         		dc.b 0				; $88: NOTHING
000006AD 00                         		dc.b 0				; $89: NOTHING
000006AE 00                         		dc.b 0				; $8A: HInt counter
000006AF 03                         		dc.b %00000011			; $8B: [3] External interrupt OFF | [2] Vscrl: full | [1|0] Hscrl: full
000006B0 81                         		dc.b %10000001			; $8C: [7+0] H40 | [3] Prio/Shadow | [2|1] Interlace mode: None
000006B1 3F                         		dc.b ($FC00>>10)&%00111111	; $8D: Hscroll attribute table
000006B2 00                         		dc.b 0				; $8E: NOTHING
000006B3 02                         		dc.b 2				; $8F: VDP Auto increment
000006B4 01                         		dc.b %00000001			; $90: Plane size [5|4] Y size | [1|0] X size
000006B6 00                         		even
000006B6                            
000006B6                            ; -------------------------------------------------
000006B6                            ; Subs
000006B6                            ; -------------------------------------------------
000006B6                            
000006B6                            Video_Update:
000006B6 41F9 FFFF ED10             		lea	(RAM_VidRegs),a0
000006BC 303C 8000                  		move.w	#$8000,d0
000006C0 7210                       		moveq	#17-1,d1
000006C2                            @reg_list:
000006C2 1018                       		move.b	(a0)+,d0
000006C4 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
000006CA 0640 0100                  		add.w	#$100,d0
000006CE 51C9 FFF2                  		dbf	d1,@reg_list
000006D2 4E75                       		rts
000006D4                            		
000006D4                            ; --------------------------------------------
000006D4                            ; VDP_SendData_W, VDP_SendData_L
000006D4                            ;
000006D4                            ; Input:
000006D4                            ; a0 - Data address
000006D4                            ;
000006D4                            ; d0 | VRAM Address
000006D4                            ; d1 | Data size
000006D4                            ; --------------------------------------------
000006D4                            
000006D4                            VDP_SendData_W:
000006D4 EB48                       		lsl.w	#5,d0
000006D6 6100 0000                  		bsr	VDP_VramToCmd
000006DA 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
000006E0                            @Loop:
000006E0 33D8 00C0 0000             		move.w	(a0)+,(vdp_data).l
000006E6 51C9 FFF8                  		dbf	d1,@Loop
000006EA 4E75                       		rts
000006EC                            
000006EC                            VDP_SendData_L:
000006EC EB48                       		lsl.w	#5,d0
000006EE 6100 0000                  		bsr	VDP_VramToCmd
000006F2 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
000006F8                            @Loop:
000006F8 23D8 00C0 0000             		move.l	(a0)+,(vdp_data).l
000006FE 51C9 FFF8                  		dbf	d1,@Loop
00000702 4E75                       		rts
00000704                            		
00000704                            ; -----------------------
00000704                            ; Uses: d4 (LONG)
00000704                            ;       d5 (WORD)
00000704                            ; -----------------------
00000704                            
00000704                            vdpshv_findvdppos:
00000704                            		;Check plane to use
00000704 4845                       		swap	d5
00000706 3A00                       		move.w	d0,d5
00000708 7000                       		moveq	#0,d0
0000070A 1039 FFFF ED12             		move.b	(RAM_VidRegs+2),d0
00000710 0805 0001                  		btst	#1,d5				;%10? (WD)
00000714 6700                       		beq.s	@FG
00000716 1039 FFFF ED13             		move.b	(RAM_VidRegs+3),d0
0000071C                            @FG:
0000071C E148                       		lsl.w	#8,d0
0000071E E548                       		lsl.w	#2,d0
00000720 0805 0000                  		btst	#0,d5				;%01? (BG)
00000724 6700                       		beq.s	@FGWD
00000726 7000                       		moveq	#0,d0
00000728 1039 FFFF ED14             		move.b	(RAM_VidRegs+4),d0
0000072E E148                       		lsl.w	#8,d0
00000730 EB48                       		lsl.w	#5,d0
00000732                            @FGWD:
00000732                            
00000732                            		;Start Y
00000732 7800                       		moveq	#0,d4
00000734 3801                          		move.w	d1,d4
00000736 ED8C                         		lsl.l	#6,d4
00000738 0805 0001                   		btst	#1,d5
0000073C 6700                        		beq.s	@def_fgbg
0000073E                             		
0000073E                             		;TODO: WD resolution check
0000073E                            ;    		move.b	(RAM_VidRegs+vdpReg_HMode),d5
0000073E                            ;    		and.w	#%10000001,d5
0000073E                            ;    		bne.s	@Not128
0000073E E38C                           		lsl.l	#1,d4
00000740 6000                       		bra.s	@Not128
00000742                            @def_fgbg:
00000742 0839 0000 FFFF ED20         		btst	#0,(RAM_VidRegs+$10)
0000074A 6700                        		beq.s	@Not40
0000074C E38C                         		lsl.l	#1,d4
0000074E                            @Not40:
0000074E 0839 0001 FFFF ED20         		btst	#1,(RAM_VidRegs+$10)
00000756 6700                        		beq.s	@Not128
00000758 E38C                           		lsl.l	#1,d4
0000075A                            @Not128:
0000075A D044                        		add.w	d4,d0			;+Y Start
0000075C 4841                       		swap	d1
0000075E E349                       		lsl.w	#1,d1
00000760 D041                       		add.w	d1,d0			;+X Start
00000762 4845                       		swap	d5
00000764                            		
00000764                            ; --------------------------------------------
00000764                            ; VDP_VramToCmd
00000764                            ;
00000764                            ; Input:
00000764                            ; d0 | WORD - VRAM to convert
00000764                            ;
00000764                            ; Output:
00000764                            ; d0 | LONG - VDP Command (Write mode)
00000764                            ; --------------------------------------------
00000764                            
00000764                            VDP_VramToCmd:
00000764 0C40 4000                  		cmp.w	#$4000,d0
00000768 6500                       		bcs.s	@NoBank
0000076A 4840                       		swap	d0
0000076C 303C 0001                  		move.w	#1,d0
00000770 4840                       		swap	d0
00000772 0C40 8000                  		cmp.w	#$8000,d0
00000776 6500                       		bcs.s	@NoBank	
00000778 4840                       		swap	d0
0000077A 303C 0002                  		move.w	#2,d0
0000077E 4840                       		swap	d0
00000780 0C40 C000                  		cmp.w	#$C000,d0
00000784 6500                       		bcs.s	@NoBank	
00000786 4840                       		swap	d0
00000788 303C 0003                  		move.w	#3,d0
0000078C 4840                       		swap	d0
0000078E                            @NoBank:
0000078E 0240 3FFF                    		and.w	#$3FFF,d0
00000792 0040 4000                    		or.w	#$4000,d0
00000796 4840                          		swap	d0
00000798 4E75                       		rts
0000079A                            		
0000079A                            ; --------------------------------------------
0000079A                            ; VDP_LoadMaps
0000079A                            ; 
0000079A                            ; Input:
0000079A                            ; a0 - Pattern data
0000079A                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
0000079A                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
0000079A                            ; d2 | LONG - Value
0000079A                            ; d3 | WORD - VRAM (ASCII start)
0000079A                            ; d4 | WORD - Type:
0000079A                            ;             00 Byte | 01 Word | 02 Long HEX
0000079A                            ;             04 Byte | 05 Word | 06 Long DEC
0000079A                            ;             08 Byte | 09 Word | 0A Long DEC
0000079A                            ; Uses:
0000079A                            ; d4-d6
0000079A                            ; 
0000079A                            ; NOTE: clear d2 FIRST and then set the value
0000079A                            ; --------------------------------------------
0000079A                            
0000079A                            Video_PrintVal:
0000079A 0244 0007                  		and.w	#%111,d4
0000079E 0804 0002                  		btst	#2,d4
000007A2 6700                       		beq.s	@hexy
000007A4 6100 0000                  		bsr	HexToDec
000007A8                            @hexy:
000007A8 3A04                       		move.w	d4,d5
000007AA 6100 FF58                  		bsr	vdpshv_findvdppos
000007AE 3805                       		move.w	d5,d4
000007B0                            		
000007B0 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
000007B6 0643 0030                  		add.w	#"0",d3
000007BA                            		
000007BA 7A07                          		moveq	#(8)-1,d5
000007BC 0804 0001                  		btst	#1,d4
000007C0 6600                       		bne.s	@setit
000007C2 7A03                          		moveq	#(4)-1,d5
000007C4 4842                        		swap	d2
000007C6 1004                          		move.b	d4,d0
000007C8 0200 0003                     		and.b	#%11,d0
000007CC 4A00                        		tst.b	d0
000007CE 6600                        		bne.s	@setit
000007D0 7A01                        		moveq	#(2)-1,d5
000007D2 E19A                        		rol.l	#8,d2
000007D4                            @setit:
000007D4 0804 0002                  		btst	#2,d4
000007D8 6700                       		beq.s	@next
000007DA 0804 0001                  		btst	#1,d4
000007DE 6600                       		bne.s	@next
000007E0 E89A                       		ror.l	#4,d2
000007E2 0645 0001                  		add.w	#1,d5
000007E6                            @next:
000007E6 E99A                        		rol.l	#4,d2
000007E8 3002                       		move.w	d2,d0
000007EA 0240 000F                  		and.w	#$F,d0
000007EE 0C40 000A                  		cmp.w	#$A,d0
000007F2 6500                       		bcs.s	@lessF
000007F4 0640 0007                  		add.w	#7,d0
000007F8                            @lessF
000007F8 D043                       		add.w	d3,d0
000007FA 33C0 00C0 0000             		move.w	d0,(vdp_data)
00000800 51CD FFE4                  		dbf	d5,@next
00000804 4E75                       		rts
00000806                            
00000806                            ; --------------------------------------------
00000806                            ; Video_MakeMap
00000806                            ; 
00000806                            ; Input:
00000806                            ; a0 - Pattern data
00000806                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
00000806                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
00000806                            ; d2 | LONG - XSize (WORD) | YSize (WORD)
00000806                            ; d3 | WORD - VRAM
00000806                            ; 
00000806                            ; Uses:
00000806                            ; d4-d6
00000806                            ; --------------------------------------------
00000806                            
00000806                            Video_MakeMap:
00000806                            		;Check plane to use
00000806 6100 FEFC                  		bsr	vdpshv_findvdppos
0000080A                            		
0000080A 283C 0040 0000             		move.l	#$400000,d4
00000810 0839 0000 FFFF ED20        		btst	#0,(RAM_VidRegs+$10)
00000818 6700                       		beq.s	@JpNot40
0000081A E38C                        		lsl.l	#1,d4
0000081C                            @JpNot40:
0000081C 0839 0001 FFFF ED20        		btst	#1,(RAM_VidRegs+$10)
00000824 6700                       		beq.s	@Y_Loop
00000826 E38C                            		lsl.l	#1,d4
00000828                                 		
00000828                            @Y_Loop:
00000828 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l		; Set VDP location from d0
0000082E 4842                       		swap	d2
00000830 3A02                       		move.w	d2,d5	  		; Move X-pos value to d3
00000832 4842                       		swap	d2
00000834                            @X_Loop:
00000834 3C18                       		move.w	(a0)+,d6
00000836 DC43                                       add.w	d3,d6
00000838 4845                                       swap	d5
0000083A 1A39 FFFF ED1C                             move.b	(RAM_VidRegs+$C),d5
00000840 0245 0006                                  and.w	#%110,d5
00000844 6700                                       beq.s	@normal
00000846 E24E                                       lsr.w	#1,d6
00000848                            @normal:
00000848 4845                                       swap	d5
0000084A 33C6 00C0 0000                             move.w	d6,(vdp_data)		; Put data
00000850 51CD FFE2                  		dbf	d5,@X_Loop		; X-pos loop (from d1 to d3)
00000854 D084                       		add.l	d4,d0                   ; Next line
00000856 51CA FFD0                  		dbf	d2,@Y_Loop		; Y-pos loop
0000085A 4E75                       		rts
0000085C                            
0000085C                            ; --------------------------------------------
0000085C                            ; Video_PrintText
0000085C                            ;
0000085C                            ; Input:
0000085C                            ; a0 - String
0000085C                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
0000085C                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
0000085C                            ; d2 | VRAM
0000085C                            ; 
0000085C                            ; Uses:
0000085C                            ; d3-d4
0000085C                            ; --------------------------------------------
0000085C                            
0000085C                            Video_PrintText:
0000085C                            		;Check plane to use
0000085C 3A00                       		move.w	d0,d5
0000085E 6100 FEA4                  		bsr	vdpshv_findvdppos
00000862                            		
00000862 283C 0080 0000              		move.l	#$800000,d4
00000868                            ;  		cmp.w	#2,d5
00000868                            ;  		bne.s	@NotWindow
00000868                            ; 		
00000868                            ;  		tst.b	(RAM_VidRegs+$C)
00000868                            ;  		beq.s	@Reset
00000868                            ;  		lsl.l	#1,d4
00000868                            ; 		bra.s	@Reset
00000868                            ; 		
00000868                            ; @NotWindow:
00000868                            ; 		btst	#0,(RAM_VidRegs+$10)
00000868                            ; 		beq.s	@JpNot40
00000868                            ;  		lsl.l	#1,d4
00000868                            ; @JpNot40:
00000868                            ; 		btst	#1,(RAM_VidRegs+$10)
00000868                            ; 		beq.s	@Space
00000868                            ;      		lsl.l	#1,d4
00000868                                 		
00000868                            @Reset:
00000868 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l
0000086E                            @Next:
0000086E 7600                       		moveq	#0,d3
00000870 1618                       		move.b	(a0)+,d3
00000872 0C03 000A                  		cmp.b	#$A,d3
00000876 6700                       		beq.s	@Space
00000878 4A03                       		tst.b	d3
0000087A 6600                       		bne.s	@Char
0000087C 4E75                       		rts
0000087E                            @Char:
0000087E D642                       		add.w	d2,d3
00000880 33C3 00C0 0000             		move.w	d3,(vdp_data).l
00000886 60E6                       		bra.s	@Next
00000888                            @Space:
00000888 D084                       		add.l	d4,d0                   ; Next line
0000088A 60DC                       		bra.s	@Reset
0000088C                            @Exit:
0000088C 4E75                       		rts
0000088E                            		
0000088E                            ; --------------------------------------------
0000088E                            ; Video_VSync
0000088E                            ; 
0000088E                            ; Wait VBlank
0000088E                            ; --------------------------------------------
0000088E                            
0000088E                            Video_VSync:
0000088E 08F9 0000 0000 0000         		bset	#0,(RAM_IntFlags)
00000896                            @vint:
00000896 0839 0000 0000 0000        		btst	#0,(RAM_IntFlags)
0000089E 66F6                       		bne.s	@vint
000008A0 4E75                       		rts
000008A2                            
000008A2                            ; ====================================================================
000008A2                            ; ---------------------------------------------
000008A2                            ; Palette fading
000008A2                            ; ---------------------------------------------
000008A2                            
000008A2                            PalFade_Upd:
000008A2 4DF9 FFFF EAD0             		lea	(RAM_PalFadeSys),a6
000008A8 7C03                        		moveq	#4-1,d6
000008AA                            @NextPalReq:
000008AA 4A96                       		tst.l	(a6)
000008AC 6700                       		beq.s	@Unused
000008AE 4BF9 FFFF E8D0              		lea	(RAM_Palette),a5
000008B4 49F9 FFFF E9D0              		lea	(RAM_PalFade),a4
000008BA 6100 0000                    		bsr	@Active
000008BE                            @Unused:
000008BE DCFC 0008                   		adda	#8,a6
000008C2 51CE FFE6                   		dbf	d6,@NextPalReq
000008C6                            		
000008C6 7C03                       		moveq	#4-1,d6
000008C8                            @NextHPalReq:
000008C8 4A96                       		tst.l	(a6)
000008CA 6700                       		beq.s	@UnusedH
000008CC 4BF9 FFFF E950             		lea	(RAM_HPalette),a5
000008D2 49F9 FFFF EA50             		lea	(RAM_HPalFade),a4
000008D8 6100 0000                  		bsr	@Active
000008DC                            @UnusedH:
000008DC DCFC 0008                  		adda	#8,a6
000008E0 51CE FFE6                  		dbf	d6,@NextHPalReq
000008E4 4E75                       		rts
000008E6                            		
000008E6                            ; ---------------------------------
000008E6                            ; Active palette
000008E6                            ; ---------------------------------
000008E6                            
000008E6                            @Active:
000008E6 7000                       		moveq	#0,d0
000008E8 102E 0000                  		move.b	palFd_mode(a6),d0
000008EC D040                       		add.w	d0,d0
000008EE 323B 0000                  		move.w	@list(pc,d0.w),d1
000008F2 4EFB 1000                  		jmp	@list(pc,d1.w)
000008F6                            		
000008F6                            ; ---------------------------------
000008F6                            
000008F6                            @list:
000008F6 0000                       		dc.w fadeSet_Return-@list
000008F8 0000                       		dc.w fadeSet_in_timer-@list
000008FA 0000                       		dc.w fadeSet_out_timer-@list
000008FC 0000                       		dc.w fadeSet_in_single-@list
000008FE 0000                        		dc.w fadeSet_out_single-@list		
00000900                            		
00000900                            ; ---------------------------------
00000900                            
00000900                            fadeSet_in_timer:
00000900 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00000906 6A00 0000                  		bpl	fadeSet_Return
0000090A 7800                       		moveq	#0,d4
0000090C 7A00                       		moveq	#0,d5
0000090E 182E 0001                  		move.b 	palFd_delay(a6),d4
00000912 3D44 0004                  		move.w	d4,palFd_timer(a6)
00000916 182E 0003                  		move.b 	palFd_num(a6),d4
0000091A                            @next_in:
0000091A 3015                        		move.w	(a5),d0
0000091C 3214                        		move.w	(a4),d1
0000091E 3400                       		move.w	d0,d2
00000920 3601                        		move.w	d1,d3
00000922 0242 000E                   		and.w	#$00E,d2
00000926 0243 000E                   		and.w	#$00E,d3
0000092A B642                        		cmp.w	d2,d3
0000092C 6700                        		beq.s	@goodin_b
0000092E 0642 0002                  		add.w	#2,d2
00000932                            @goodin_b:
00000932 0240 0EE0                  		and.w	#$EE0,d0
00000936 8042                        		or.w	d2,d0
00000938                            		
00000938 3400                       		move.w	d0,d2
0000093A 3601                        		move.w	d1,d3
0000093C 0242 00E0                   		and.w	#$0E0,d2
00000940 0243 00E0                   		and.w	#$0E0,d3
00000944 B642                        		cmp.w	d2,d3
00000946 6700                        		beq.s	@goodin_g
00000948 0642 0020                  		add.w	#$020,d2
0000094C                            @goodin_g:
0000094C 0240 0E0E                  		and.w	#$E0E,d0
00000950 8042                        		or.w	d2,d0
00000952                              		
00000952 3400                       		move.w	d0,d2
00000954 3601                        		move.w	d1,d3
00000956 0242 0E00                   		and.w	#$E00,d2
0000095A 0243 0E00                   		and.w	#$E00,d3
0000095E B642                        		cmp.w	d2,d3
00000960 6700                        		beq.s	@goodin_r
00000962 0642 0200                  		add.w	#$200,d2
00000966                            @goodin_r:
00000966 0240 00EE                  		and.w	#$0EE,d0
0000096A 8042                        		or.w	d2,d0
0000096C                             		
0000096C 3AC0                        		move.w	d0,(a5)+
0000096E B05C                        		cmp.w	(a4)+,d0
00000970 6600                        		bne.s	@nonz_fdin
00000972 0645 0001                   		add.w	#1,d5
00000976                            @nonz_fdin:
00000976 51CC FFA2                  		dbf	d4,@next_in
0000097A                            		
0000097A 0445 0001                  		sub.w	#1,d5
0000097E BA2E 0003                  		cmp.b	palFd_num(a6),d5
00000982 6600                       		bne.s	fadeSet_Return
00000984 4296                       		clr.l	(a6)
00000986                            fadeSet_Return:
00000986 4E75                       		rts
00000988                            		
00000988                            ; ---------------------------------
00000988                            
00000988                            fadeSet_out_timer:
00000988 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
0000098E 6AF6                       		bpl.s	fadeSet_Return
00000990 7400                       		moveq	#0,d2
00000992 7600                       		moveq	#0,d3
00000994 142E 0001                  		move.b 	palFd_delay(a6),d2
00000998 3D42 0004                  		move.w	d2,palFd_timer(a6)
0000099C 142E 0003                  		move.b 	palFd_num(a6),d2
000009A0                            @setcol:
000009A0 3015                       		move.w	(a5),d0
000009A2 3200                       		move.w	d0,d1
000009A4 0241 000E                  		and.w	#$00E,d1
000009A8 6700                       		beq.s	@good_b
000009AA 0441 0002                  		sub.w	#2,d1
000009AE                            @good_b:
000009AE 0240 0EE0                  		and.w	#$EE0,d0
000009B2 8041                       		or.w	d1,d0
000009B4                            		
000009B4 3200                       		move.w	d0,d1
000009B6 0241 00E0                  		and.w	#$0E0,d1
000009BA 6700                       		beq.s	@good_g
000009BC 0441 0020                  		sub.w	#$020,d1
000009C0                            @good_g:
000009C0 0240 0E0E                  		and.w	#$E0E,d0
000009C4 8041                       		or.w	d1,d0
000009C6 3200                       		move.w	d0,d1
000009C8 0241 0E00                  		and.w	#$E00,d1
000009CC 6700                       		beq.s	@good_r
000009CE 0441 0200                  		sub.w	#$200,d1
000009D2                            @good_r:
000009D2 0240 00EE                  		and.w	#$0EE,d0
000009D6 8041                       		or.w	d1,d0
000009D8 3AC0                       		move.w	d0,(a5)+
000009DA 4A40                       		tst.w	d0
000009DC 6600                       		bne.s	@nonzero
000009DE 0643 0001                  		add.w	#1,d3
000009E2                            @nonzero:
000009E2 51CA FFBC                  		dbf	d2,@setcol
000009E6                            		
000009E6 0443 0001                  		sub.w	#1,d3
000009EA B62E 0003                  		cmp.b	palFd_num(a6),d3
000009EE 6696                       		bne.s	fadeSet_Return
000009F0 4296                       		clr.l	(a6)
000009F2 4E75                       		rts
000009F4                            		
000009F4                            ; ---------------------------------
000009F4                            ; fadeSet_in_single
000009F4                            ; 
000009F4                            ; palFd_delay:
000009F4                            ; RGBTTTTT - RGB increment bits
000009F4                            ;            TTTTT timer
000009F4                            ; ---------------------------------
000009F4                            
000009F4                            fadeSet_in_single:
000009F4 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
000009FA 6A00 FF8A                  		bpl	fadeSet_Return
000009FE                            
000009FE 7A00                       		moveq	#0,d5
00000A00 1A2E 0002                  		move.b	palFd_from(a6),d5
00000A04 E34D                       		lsl.w	#1,d5
00000A06 DAC5                       		adda	d5,a5
00000A08 162E 0001                  		move.b 	palFd_delay(a6),d3
00000A0C 0243 00E0                  		and.w	#$E0,d3
00000A10 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
00000A16                            		
00000A16 7800                       		moveq	#0,d4
00000A18 182E 0003                  		move.b 	palFd_num(a6),d4
00000A1C                            @next_in:
00000A1C 3015                        		move.w	(a5),d0
00000A1E 3400                       		move.w	d0,d2
00000A20 0242 000E                   		and.w	#$00E,d2
00000A24 0803 0005                  		btst	#5,d3
00000A28 6700                       		beq.s	@goodin_b
00000A2A 0C42 000E                   		cmp.w	#$00E,d2
00000A2E 6C00                        		bge.s	@goodin_b
00000A30 0642 0002                  		add.w	#2,d2
00000A34                            @goodin_b:
00000A34 0240 0EE0                  		and.w	#$EE0,d0
00000A38 8042                        		or.w	d2,d0
00000A3A                            
00000A3A 3400                       		move.w	d0,d2
00000A3C 0242 00E0                   		and.w	#$0E0,d2
00000A40 0803 0006                  		btst	#6,d3
00000A44 6700                       		beq.s	@goodin_g
00000A46 0C42 00E0                   		cmp.w	#$0E0,d2
00000A4A 6C00                        		bge.s	@goodin_g
00000A4C 0642 0020                  		add.w	#$020,d2
00000A50                            @goodin_g:
00000A50 0240 0E0E                  		and.w	#$E0E,d0
00000A54 8042                        		or.w	d2,d0
00000A56                            
00000A56 3400                       		move.w	d0,d2
00000A58 0242 0E00                   		and.w	#$E00,d2
00000A5C 0803 0007                  		btst	#7,d3
00000A60 6700                       		beq.s	@goodin_r
00000A62 0C42 0E00                   		cmp.w	#$E00,d2
00000A66 6C00                        		bge.s	@goodin_r
00000A68 0642 0200                  		add.w	#$200,d2
00000A6C                            @goodin_r:
00000A6C 0240 00EE                  		and.w	#$0EE,d0
00000A70 8042                        		or.w	d2,d0
00000A72                            
00000A72 3AC0                        		move.w	d0,(a5)+
00000A74 51CC FFA6                  		dbf	d4,@next_in
00000A78                            		
00000A78 102E 0001                  		move.b	palFd_delay(a6),d0
00000A7C 0240 001F                  		and.w	#$1F,d0
00000A80 0440 0001                  		sub.w	#1,d0
00000A84 6A00                       		bpl.s	fadeSet_Return_2
00000A86                            		
00000A86                            ; 		sub.w	#1,d5
00000A86                            ; 		cmp.b	palFd_num(a6),d5
00000A86                            ; 		bne.s	fadeSet_Return
00000A86 4296                       		clr.l	(a6)
00000A88 42AE 0004                  		clr.l	4(a6)
00000A8C                            		
00000A8C                            fadeSet_Return_2:
00000A8C 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
00000A92 812E 0001                  		or.b	d0,palFd_delay(a6)
00000A96 4E75                       		rts
00000A98                            		
00000A98                            ; ---------------------------------
00000A98                            ; fadeSet_out_single
00000A98                            ; 
00000A98                            ; palFd_delay:
00000A98                            ; RGBTTTTT - RGB increment bits
00000A98                            ;            TTTTT timer
00000A98                            ; ---------------------------------
00000A98                            
00000A98                            fadeSet_out_single:
00000A98 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00000A9E 6A00 FEE6                  		bpl	fadeSet_Return
00000AA2                            
00000AA2 7A00                       		moveq	#0,d5
00000AA4 1A2E 0002                  		move.b	palFd_from(a6),d5
00000AA8 E34D                       		lsl.w	#1,d5
00000AAA DAC5                       		adda	d5,a5
00000AAC 162E 0001                  		move.b 	palFd_delay(a6),d3
00000AB0 0243 00E0                  		and.w	#$E0,d3
00000AB4 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
00000ABA                            		
00000ABA 7800                       		moveq	#0,d4
00000ABC 182E 0003                  		move.b 	palFd_num(a6),d4
00000AC0                            @next_in:
00000AC0 3015                        		move.w	(a5),d0
00000AC2 3400                       		move.w	d0,d2
00000AC4 0242 000E                   		and.w	#$00E,d2
00000AC8 0803 0005                  		btst	#5,d3
00000ACC 6700                       		beq.s	@goodin_b
00000ACE                            ;  		tst.w	d2
00000ACE                            ;  		beq.s	@goodin_b
00000ACE 0442 0002                  		sub.w	#2,d2
00000AD2                            @goodin_b:
00000AD2 0240 0EE0                  		and.w	#$EE0,d0
00000AD6 8042                        		or.w	d2,d0
00000AD8                            
00000AD8 3400                       		move.w	d0,d2
00000ADA 0242 00E0                   		and.w	#$0E0,d2
00000ADE 0803 0006                  		btst	#6,d3
00000AE2 6700                       		beq.s	@goodin_g
00000AE4                            ;  		tst.w	d2
00000AE4                            ;  		beq.s	@goodin_g
00000AE4 0442 0020                  		sub.w	#$020,d2
00000AE8                            @goodin_g:
00000AE8 0240 0E0E                  		and.w	#$E0E,d0
00000AEC 8042                        		or.w	d2,d0
00000AEE                            
00000AEE 3400                       		move.w	d0,d2
00000AF0 0242 0E00                   		and.w	#$E00,d2
00000AF4 0803 0007                  		btst	#7,d3
00000AF8 6700                       		beq.s	@goodin_r
00000AFA                            ;  		tst.w	d2
00000AFA                            ;  		beq.s	@goodin_r
00000AFA 0442 0200                  		sub.w	#$200,d2
00000AFE                            @goodin_r:
00000AFE 0240 00EE                  		and.w	#$0EE,d0
00000B02 8042                        		or.w	d2,d0
00000B04                            
00000B04 3AC0                        		move.w	d0,(a5)+
00000B06 51CC FFB8                  		dbf	d4,@next_in
00000B0A                            		
00000B0A 102E 0001                  		move.b	palFd_delay(a6),d0
00000B0E 0240 001F                  		and.w	#$1F,d0
00000B12 0440 0001                  		sub.w	#1,d0
00000B16 6A00                       		bpl.s	@fadeSet_Return_2
00000B18                            		
00000B18                            ; 		sub.w	#1,d5
00000B18                            ; 		cmp.b	palFd_num(a6),d5
00000B18                            ; 		bne.s	fadeSet_Return
00000B18 4296                       		clr.l	(a6)
00000B1A 42AE 0004                  		clr.l	4(a6)
00000B1E                            		
00000B1E                            @fadeSet_Return_2:
00000B1E 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
00000B24 812E 0001                  		or.b	d0,palFd_delay(a6)
00000B28 4E75                       		rts
00000B2A                            		
00000B2A                            ; --------------------------------------------
00000B2A                            ; PalFade_Set
00000B2A                            ; --------------------------------------------
00000B2A                            
00000B2A                            PalFade_Set:
00000B2A 4E75                       		rts
00000B2C                            		
00000B2C                            ; ====================================================================
00000B2C                            ; ---------------------------------------------
00000B2C                            ; DMA
00000B2C                            ; ---------------------------------------------
00000B2C                            
00000B2C                            ; ROM data
00000B2C                            ; Size
00000B2C                            ; VRAM Destiantion
00000B2C                            
00000B2C                            DMA_Read:
00000B2C 4DF9 FFFF EB10              		lea	(RAM_DMA_Buffer),a6
00000B32                            ;  		move.w	#64,d3
00000B32 381E                         		move.w	(a6)+,d4
00000B34                            ;   		sub.w	d4,d3
00000B34                            ;   		bmi	@FinishList
00000B34 4A44                         		tst.w	d4
00000B36 6700 0000                    		beq	@FinishList
00000B3A 0444 0001                    		sub.w	#1,d4
00000B3E                            ; 		dma 	on
00000B3E                            @NextEntry:
00000B3E 2A1E                       		move.l	(a6)+,d5
00000B40                             		
00000B40 E28D                         		lsr.l	#1,d5
00000B42 2C3C 9600 9500              		move.l	#$96009500,d6
00000B48 1C05                        		move.b	d5,d6
00000B4A E08D                        		lsr.l	#8,d5
00000B4C 4846                        		swap	d6
00000B4E 1C05                        		move.b	d5,d6
00000B50 23C6 00C0 0004              		move.l	d6,(vdp_ctrl)
00000B56 3C3C 9700                   		move.w	#$9700,d6
00000B5A E08D                        		lsr.l	#8,d5
00000B5C 1C05                        		move.b	d5,d6
00000B5E 33C6 00C0 0004              		move.w	d6,(vdp_ctrl)
00000B64                             		
00000B64 2C3C 9400 9300               		move.l	#$94009300,d6		;Size
00000B6A 3A1E                         		move.w	(a6)+,d5
00000B6C 1C05                         		move.b	d5,d6
00000B6E 4846                        		swap	d6
00000B70 E04D                         		lsr.w	#8,d5
00000B72 1C05                         		move.b	d5,d6
00000B74 23C6 00C0 0004               		move.l	d6,(vdp_ctrl)
00000B7A                             		
00000B7A 3A1E                        		move.w	(a6)+,d5
00000B7C EB4D                        		lsl.w	#5,d5
00000B7E 3C05                        		move.w	d5,d6
00000B80 0245 3FFF                   		and.w	#$3FFF,d5
00000B84 0045 4000                   		or.w	#$4000,d5
00000B88 E04E                        		lsr.w	#8,d6
00000B8A EC4E                        		lsr.w	#6,d6
00000B8C 0246 0003                   		and.w	#%11,d6
00000B90 0046 0080                   		or.w	#$80,d6
00000B94 3F06                        		move.w	d6,-(sp)
00000B96 3F05                        		move.w	d5,-(sp)	
00000B98 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
00000B9E 33FC 0100 00A1 1100         		move.w	#$100,($A11100).l
00000BA6                            @hold_on:
00000BA6 0839 0000 00A1 1100         		btst	#0,($A11100).l
00000BAE 66F6                         		bne.s	@hold_on
00000BB0                              		
00000BB0 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
00000BB6 33FC 0000 00A1 1100          		move.w	#0,($A11100).l
00000BBE                               		
00000BBE 51CC FF7E                   		dbf	d4,@NextEntry
00000BC2                             		
00000BC2                            @FinishList:
00000BC2 4279 FFFF EB10             		clr.w	(RAM_DMA_Buffer)
00000BC8 4E75                        		rts
00000BCA                            
00000BCA                            @ResetAllList:
00000BCA 4E75                       		rts
00000BCC                            		
00000BCC                            ; -----------------------------------
00000BCC                            ; Set new entry to the list
00000BCC                            ; 
00000BCC                            ; Input:
00000BCC                            ; d0 - ROM Address
00000BCC                            ; d1 - Size
00000BCC                            ; d2 - VRAM
00000BCC                            ; 
00000BCC                            ; Uses:
00000BCC                            ; a2/d3
00000BCC                            ; -----------------------------------
00000BCC                            
00000BCC                            DMA_Set:
00000BCC 45F9 FFFF EB10             		lea	(RAM_DMA_Buffer),a2
00000BD2 0C52 0040                  		cmp.w	#64,(a2)
00000BD6 6C00                       		bge.s	@Return
00000BD8 3612                       		move.w	(a2),d3
00000BDA E74B                       		lsl.w	#3,d3			;Size: 8
00000BDC D4C3                       		adda 	d3,a2
00000BDE D4FC 0002                  		adda	#2,a2
00000BE2                            		
00000BE2 24C0                       		move.l	d0,(a2)+		;ROM Address
00000BE4 34C1                       		move.w	d1,(a2)+
00000BE6 34C2                       		move.w	d2,(a2)+
00000BE8 0679 0001 FFFF EB10        		add.w	#1,(RAM_DMA_Buffer)
00000BF0                            @Return:
00000BF0 4E75                       		rts
00000BF2                            		
00000BF2                            ; ====================================================================
00000BF2                            ; ---------------------------------------------
00000BF2                            ; Sprites system
00000BF2                            ; ---------------------------------------------
00000BF2                            
00000BF2                            ; ---------------------------------------------
00000BF2                            ; Sprites_Reset
00000BF2                            ; ---------------------------------------------
00000BF2                            
00000BF2                            Sprites_Clear:
00000BF2                            ;  		lea	(RAM_Sprites),a6
00000BF2                            ;  		move.w	#$4F,d6
00000BF2                            ; @clrit:
00000BF2 42B9 FFFF E340               		clr.l	(RAM_Sprites)
00000BF8 42B9 FFFF E344               		clr.l	(RAM_Sprites+4)
00000BFE 4E75                       		rts
00000C00                            		
00000C00                            ; ---------------------------------------------
00000C00                            ; Sprites_Reset
00000C00                            ; ---------------------------------------------
00000C00                            
00000C00                            Sprites_Reset:
00000C00 4DF9 FFFF E5C0             		lea	(RAM_SprControl),a6
00000C06 2A6E 0000                  		movea.l	sprite_free(a6),a5
00000C0A BAFC E340                  		cmpa	#((RAM_Sprites)&$FFFF),a5
00000C0E 6D00                       		blt.s	@Full
00000C10                            @NextEntry:
00000C10 BAFC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
00000C14 6E00                        		bgt.s	@Full
00000C16 429D                        		clr.l	(a5)+
00000C18 429D                         		clr.l	(a5)+
00000C1A BAFC E5C0                    		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
00000C1E 6DF0                         		blt.s	@NextEntry
00000C20                            @Full:
00000C20 2D7C FFFF E340 0000        		move.l	#RAM_Sprites,sprite_free(a6)
00000C28 3D7C 0001 0004             		move.w	#1,sprite_link(a6)
00000C2E                            @Return:
00000C2E 4E75                       		rts
00000C2E 4E75                       		rts
00000C30                            		include	"system/misc.asm"
00000C30                            ; ====================================================================
00000C30                            ; System
00000C30                            ; ====================================================================
00000C30                            
00000C30                            ; ====================================================================
00000C30                            ; -------------------------------------------------
00000C30                            ; RAM
00000C30                            ; -------------------------------------------------
00000C30                            
00000C30                                            rsset	RAM_System
00000C30 =FFFFDE00                  RAM_HintJumpTo	rs.w	1				; DONT
00000C30 =FFFFDE02                  RAM_HintAddr	rs.l	1				; SEPARATE
00000C30 =FFFFDE06                  RAM_VIntJumpTo	rs.w	1				; THESE
00000C30 =FFFFDE08                  RAM_VintAddr	rs.l	1				; ONES
00000C30 =FFFFDE0C                  RAM_VIntRegs	rs.l	16
00000C30 =FFFFDE4C                  RAM_ModeReset	rs.w	1
00000C30 =FFFFDE4E                  RAM_IntFlags	rs.b	1
00000C30 =FFFFDE4F                  RAM_GameMode	rs.b	1
00000C30                            
00000C30 =FFFFDE50                  sizeof_sys	rs.l	0
00000C30                            ; 		inform 0,"system ram: %h",(sizeof_sys-RAM_System)
00000C30                             				
00000C30                            ; ====================================================================
00000C30                            ; -------------------------------------------------
00000C30                            ; Variables
00000C30                            ; -------------------------------------------------
00000C30                            
00000C30                            ; --------------------------------------------
00000C30                            				
00000C30                            ; ====================================================================
00000C30                            ; -------------------------------------------------
00000C30                            ; Macros
00000C30                            ; -------------------------------------------------
00000C30                            
00000C30                            ; --------------------------------------------
00000C30                            
00000C30                            ; ====================================================================
00000C30                            ; -------------------------------------------------
00000C30                            ; Subs
00000C30                            ; -------------------------------------------------
00000C30                            
00000C30                            System_init:
00000C30 41F9 FFFF BC00             		lea	(RAM_ModeBuffer),a0
00000C36 303C 0BFF                  		move.w	#($1800/2)-1,d0
00000C3A                            @clear_buff:
00000C3A 4258                       		clr.w	(a0)+
00000C3C 51C8 FFFC                  		dbf	d0,@clear_buff
00000C40                            		
00000C40 23FC 0000 0000 FFFF DE08   		move.l	#MD_Vint,(RAM_VIntAddr)
00000C4A 23FC 0000 0000 FFFF DE02   		move.l	#MD_Hint,(RAM_HIntAddr)
00000C54 303C 4EF9                  		move.w	#$4EF9,d0
00000C58 33C0 FFFF DE06              		move.w	d0,(RAM_VIntJumpTo)
00000C5E 33C0 FFFF DE00             		move.w	d0,(RAM_HIntJumpTo)
00000C64                            		
00000C64 4239 FFFF DE4F              		clr.b	(RAM_GameMode)
00000C6A 4E75                       		rts
00000C6C                            		
00000C6C                            ; ---------------------------------------------
00000C6C                            ; SRAM
00000C6C                            ; ---------------------------------------------
00000C6C                            
00000C6C                            SRAM_Init:
00000C6C 13FC 0003 00A1 30F1        		move.b	#%11,($A130F1)		;read+write
00000C74 41F9 0020 0000             		lea	($200000),a0
00000C7A 0108 0001                  		movep.w	1(a0),d0
00000C7E 0C80 0000 4745             		cmp.l	#"GE",d0
00000C84 6700                       		beq.s	@exit
00000C86 43FA 0000                  		lea	@SramHead(pc),a1
00000C8A 7006                       		moveq	#7-1,d0
00000C8C                            @header:
00000C8C 1019                       		move.b	(a1)+,d0
00000C8E 1140 0001                  		move.b	d0,1(a0)
00000C92 D0FC 0002                  		adda	#2,a0
00000C96 51C8 FFF4                  		dbf	d0,@header
00000C9A                            @exit:
00000C9A 13FC 0000 00A1 30F1        		move.b	#0,($A130F1)
00000CA2 4E75                       		rts
00000CA4                            
00000CA4                            ; ---------------------------------------------
00000CA4                            
00000CA4 4745 4E59 5341 5645 00     @SramHead:	dc.b "GENYSAVE",0
00000CAE 00                         		even
00000CAE                            		
00000CAE                            ; ---------------------------------------------
00000CAE                            ; CalcSine
00000CAE                            ;
00000CAE                            ; Input:
00000CAE                            ; d0 | WORD
00000CAE                            ;
00000CAE                            ; Output:
00000CAE                            ; d0 | WORD
00000CAE                            ; d1 | WORD
00000CAE                            ; ---------------------------------------------
00000CAE                            
00000CAE                            CalcSine:
00000CAE 0240 00FF                  		and.w	#$FF,d0
00000CB2 D040                       		add.w	d0,d0
00000CB4 0640 0080                  		add.w	#$80,d0
00000CB8 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00000CBC 0440 0080                  		sub.w	#$80,d0
00000CC0 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00000CC4 4E75                       		rts	
00000CC6                            
00000CC6                            Sine_Data:
00000CC6 0000 0006 000C 0012 0019+  		dc.w 0,	6, $C, $12, $19, $1F, $25, $2B,	$31, $38, $3E
00000CDC 0044 004A 0050 0056 005C+  		dc.w $44, $4A, $50, $56, $5C, $61, $67,	$6D, $73, $78
00000CF0 007E 0083 0088 008E 0093+  		dc.w $7E, $83, $88, $8E, $93, $98, $9D,	$A2, $A7, $AB
00000D04 00B0 00B5 00B9 00BD 00C1+  		dc.w $B0, $B5, $B9, $BD, $C1, $C5, $C9,	$CD, $D1, $D4
00000D18 00D8 00DB 00DE 00E1 00E4+  		dc.w $D8, $DB, $DE, $E1, $E4, $E7, $EA,	$EC, $EE, $F1
00000D2C 00F3 00F4 00F6 00F8 00F9+  		dc.w $F3, $F4, $F6, $F8, $F9, $FB, $FC,	$FD, $FE, $FE
00000D40 00FF 00FF 00FF 0100 00FF+  		dc.w $FF, $FF, $FF, $100, $FF, $FF, $FF, $FE, $FE, $FD
00000D54 00FC 00FB 00F9 00F8 00F6+  		dc.w $FC, $FB, $F9, $F8, $F6, $F4, $F3,	$F1, $EE, $EC
00000D68 00EA 00E7 00E4 00E1 00DE+  		dc.w $EA, $E7, $E4, $E1, $DE, $DB, $D8,	$D4, $D1, $CD
00000D7C 00C9 00C5 00C1 00BD 00B9+  		dc.w $C9, $C5, $C1, $BD, $B9, $B5, $B0,	$AB, $A7, $A2
00000D90 009D 0098 0093 008E 0088+  		dc.w $9D, $98, $93, $8E, $88, $83, $7E,	$78, $73, $6D
00000DA4 0067 0061 005C 0056 0050+  		dc.w $67, $61, $5C, $56, $50, $4A, $44,	$3E, $38, $31
00000DB8 002B 0025 001F 0019 0012+  		dc.w $2B, $25, $1F, $19, $12, $C, 6, 0,	-6, -$C, -$12
00000DCE FFE7 FFE1 FFDB FFD5 FFCF+  		dc.w -$19, -$1F, -$25, -$2B, -$31, -$38, -$3E, -$44, -$4A
00000DE0 FFB0 FFAA FFA4 FF9F FF99+  		dc.w -$50, -$56, -$5C, -$61, -$67, -$6D, -$75, -$78, -$7E
00000DF2 FF7D FF78 FF72 FF6D FF68+  		dc.w -$83, -$88, -$8E, -$93, -$98, -$9D, -$A2, -$A7, -$AB
00000E04 FF50 FF4B FF47 FF43 FF3F+  		dc.w -$B0, -$B5, -$B9, -$BD, -$C1, -$C5, -$C9, -$CD, -$D1
00000E16 FF2C FF28 FF25 FF22 FF1F+  		dc.w -$D4, -$D8, -$DB, -$DE, -$E1, -$E4, -$E7, -$EA, -$EC
00000E28 FF12 FF0F FF0D FF0C FF0A+  		dc.w -$EE, -$F1, -$F3, -$F4, -$F6, -$F8, -$F9, -$FB, -$FC
00000E3A FF03 FF02 FF02 FF01 FF01+  		dc.w -$FD, -$FE, -$FE, -$FF, -$FF, -$FF, -$100,	-$FF, -$FF
00000E4C FF01 FF02 FF02 FF03 FF04+  		dc.w -$FF, -$FE, -$FE, -$FD, -$FC, -$FB, -$F9, -$F8, -$F6
00000E5E FF0C FF0D FF0F FF12 FF14+  		dc.w -$F4, -$F3, -$F1, -$EE, -$EC, -$EA, -$E7, -$E4, -$E1
00000E70 FF22 FF25 FF28 FF2C FF2F+  		dc.w -$DE, -$DB, -$D8, -$D4, -$D1, -$CD, -$C9, -$C5, -$C1
00000E82 FF43 FF47 FF4B FF50 FF55+  		dc.w -$BD, -$B9, -$B5, -$B0, -$AB, -$A7, -$A2, -$9D, -$98
00000E94 FF6D FF72 FF78 FF7D FF82+  		dc.w -$93, -$8E, -$88, -$83, -$7E, -$78, -$75, -$6D, -$67
00000EA6 FF9F FFA4 FFAA FFB0 FFB6+  		dc.w -$61, -$5C, -$56, -$50, -$4A, -$44, -$3E, -$38, -$31
00000EB8 FFD5 FFDB FFE1 FFE7 FFEE+  		dc.w -$2B, -$25, -$1F, -$19, -$12, -$C,	-6, 0, 6, $C, $12
00000ECE 0019 001F 0025 002B 0031+  		dc.w $19, $1F, $25, $2B, $31, $38, $3E,	$44, $4A, $50
00000EE2 0056 005C 0061 0067 006D+  		dc.w $56, $5C, $61, $67, $6D, $73, $78,	$7E, $83, $88
00000EF6 008E 0093 0098 009D 00A2+  		dc.w $8E, $93, $98, $9D, $A2, $A7, $AB,	$B0, $B5, $B9
00000F0A 00BD 00C1 00C5 00C9 00CD+  		dc.w $BD, $C1, $C5, $C9, $CD, $D1, $D4,	$D8, $DB, $DE
00000F1E 00E1 00E4 00E7 00EA 00EC+  		dc.w $E1, $E4, $E7, $EA, $EC, $EE, $F1,	$F3, $F4, $F6
00000F32 00F8 00F9 00FB 00FC 00FD+  		dc.w $F8, $F9, $FB, $FC, $FD, $FE, $FE,	$FF, $FF, $FF
00000F46                            		even
00000F46                            	
00000F46                            ; ---------------------------------------------
00000F46                            ; HexToByte_Byte
00000F46                            ; 
00000F46                            ; Uses:
00000F46                            ; d4-d5
00000F46                            ; ---------------------------------------------
00000F46                            
00000F46                            ; HexToDec_Byte:
00000F46                            ; 		move.w	d0,d4
00000F46                            ; 		and.w	#$FF,d4
00000F46                            ; 		clr.w	d0
00000F46                            ; @hexloop:
00000F46                            ; 		sub.w	#1,d4
00000F46                            ; 		bcs.s	@finish
00000F46                            ; 		add.w	#1,d0
00000F46                            ; 		move.w	d0,d5
00000F46                            ;  		and.w	#$F,d5
00000F46                            ; 		cmp.w	#$A,d5
00000F46                            ; 		bcs.s	@lowbyte1
00000F46                            ; 		add.w	#6,d0
00000F46                            ; @lowbyte1:
00000F46                            ; 		move.w	d0,d5
00000F46                            ;  		and.w	#$F0,d5
00000F46                            ; 		cmp.w	#$A0,d5
00000F46                            ; 		bcs.s	@lowbyte2
00000F46                            ; 		add.w	#$60,d0
00000F46                            ; @lowbyte2:
00000F46                            ; 		bra.s	@hexloop
00000F46                            ; @finish:
00000F46                            ; 		rts
00000F46                            
00000F46                            ; ---------------------------
00000F46                            ; Convert HEX to DEC
00000F46                            ; MAX: 65535 ($FFFF)
00000F46                            ; 
00000F46                            ; input:
00000F46                            ; d2
00000F46                            ; 
00000F46                            ; output:
00000F46                            ; d2
00000F46                            ; Uses:
00000F46                            ; d4 WORD (swapped)
00000F46                            ; d5 LONG
00000F46                            ; ---------------------------
00000F46                            
00000F46                            HexToDec:
00000F46 7A00                       		moveq	#0,d5
00000F48 4844                       		swap	d4
00000F4A                            
00000F4A 4842                       		swap	d2
00000F4C 3802                       		move.w	d2,d4
00000F4E 4842                       		swap	d2
00000F50 4A44                       		tst.w	d4
00000F52 6700 0000                  		beq	@jumpy
00000F56                            		
00000F56 3802                       		move.w	d2,d4
00000F58 E04C                       		lsr.w	#8,d4
00000F5A 0244 000F                  		and.w	#$F,d4
00000F5E D844                       		add.w	d4,d4
00000F60 3A3B 4000                  		move.w	@grab256(pc,d4.w),d5
00000F64 3802                       		move.w	d2,d4
00000F66 E04C                       		lsr.w	#8,d4
00000F68 E44C                       		lsr.w	#2,d4
00000F6A 0244 003C                  		and.w	#%111100,d4
00000F6E DABB 4000                  		add.l	@grab4096(pc,d4.w),d5
00000F72 6100 0000                  		bsr	@fixhexdec
00000F76 4842                       		swap	d2
00000F78 3802                       		move.w	d2,d4
00000F7A 4842                       		swap	d2
00000F7C E54C                       		lsl.w	#2,d4
00000F7E 0244 003C                  		and.w	#%111100,d4
00000F82 DABB 4000                  		add.l	@grab65536(pc,d4.w),d5
00000F86 6100 0000                  		bsr	@fixhexdec
00000F8A 6000 0000                  		bra	@jumpy
00000F8E                            ; --------------------------------
00000F8E 0000                       @grab256:	dc.w 0
00000F90 0256                       		dc.w $256
00000F92 0512                       		dc.w $512
00000F94 0768                       		dc.w $768
00000F96 1024                       		dc.w $1024
00000F98 1280                       		dc.w $1280
00000F9A 1536                       		dc.w $1536
00000F9C 1792                       		dc.w $1792
00000F9E 2048                       		dc.w $2048
00000FA0 2304                       		dc.w $2304
00000FA2 2560                       		dc.w $2560
00000FA4 2816                       		dc.w $2816
00000FA6 3072                       		dc.w $3072
00000FA8 3328                       		dc.w $3328
00000FAA 3584                       		dc.w $3584
00000FAC 3840                       		dc.w $3840
00000FAE                            		even
00000FAE 0000 0000                  @grab4096:	dc.l 0
00000FB2 0000 4096                  		dc.l $4096
00000FB6 0000 8192                  		dc.l $8192
00000FBA 0001 2288                  		dc.l $12288
00000FBE 0001 6384                  		dc.l $16384
00000FC2 0002 0480                  		dc.l $20480
00000FC6 0002 4576                  		dc.l $24576
00000FCA 0002 8672                  		dc.l $28672
00000FCE 0003 2768                  		dc.l $32768
00000FD2 0003 6864                  		dc.l $36864
00000FD6 0004 0960                  		dc.l $40960
00000FDA 0004 5056                  		dc.l $45056
00000FDE 0004 9152                  		dc.l $49152
00000FE2 0005 3248                  		dc.l $53248
00000FE6 0005 7344                  		dc.l $57344
00000FEA 0006 1440                  		dc.l $61440
00000FEE                            		even
00000FEE 0000 0000                  @grab65536: 	dc.l 0
00000FF2 0006 5536                  		dc.l $65536
00000FF6 0013 1072                  		dc.l $131072
00000FFA 0019 6608                  		dc.l $196608
00000FFE 0026 2144                  		dc.l $262144
00001002 0032 7680                  		dc.l $327680
00001006 0039 3216                  		dc.l $393216
0000100A 0045 8752                  		dc.l $458752
0000100E 0052 4288                  		dc.l $524288
00001012 0058 9824                  		dc.l $589824
00001016 0065 5360                  		dc.l $655360
0000101A 0072 0896                  		dc.l $720896
0000101E 0078 6432                  		dc.l $786432
00001022 0085 1968                  		dc.l $851968
00001026 0091 7504                  		dc.l $917504
0000102A 0098 3040                  		dc.l $983040
0000102E                            		even
0000102E                            ; --------------------------------
0000102E                            
0000102E                            @jumpy:
0000102E 0802 0007                  		btst	#7,d2
00001032 6700                       		beq.s	@not80
00001034 0685 0000 0128             		add.l	#$128,d5
0000103A 6100 0000                  		bsr	@fixhexdec
0000103E                            @not80:
0000103E 0282 0000 007F             		and.l	#$7F,d2
00001044 4A82                       		tst.l	d2
00001046 6700                       		beq.s	@lowrend
00001048 0442 0001                  		sub.w	#1,d2
0000104C                            @lelno:
0000104C 0685 0000 0001             		add.l	#1,d5
00001052 6100 0000                  		bsr	@fixhexdec
00001056 51CA FFF4                  		dbf	d2,@lelno
0000105A                            @lowrend:
0000105A 2405                       		move.l	d5,d2
0000105C 4844                       		swap	d4
0000105E 4E75                       		rts
00001060                            
00001060                            ; --------------------------------
00001060                            
00001060                            @fixhexdec:
00001060 3805                       		move.w	d5,d4
00001062 0244 000F                  		and.w	#$F,d4
00001066 0C44 000A                  		cmp.w	#$A,d4
0000106A 6D00                       		blt.s	@lowr1
0000106C 0685 0000 0006             		add.l	#6,d5
00001072                            @lowr1:
00001072 3805                       		move.w	d5,d4
00001074 0244 00F0                  		and.w	#$F0,d4
00001078 0C44 00A0                  		cmp.w	#$A0,d4
0000107C 6D00                       		blt.s	@lowr2
0000107E 0685 0000 0060             		add.l	#$60,d5
00001084                            @lowr2:
00001084 3805                       		move.w	d5,d4
00001086 0244 0F00                  		and.w	#$F00,d4
0000108A 0C44 0A00                  		cmp.w	#$A00,d4
0000108E 6D00                       		blt.s	@lowr3
00001090 0685 0000 0600             		add.l	#$600,d5
00001096                            @lowr3:
00001096 3805                       		move.w	d5,d4
00001098 0244 F000                  		and.w	#$F000,d4
0000109C 0C44 A000                  		cmp.w	#$A000,d4
000010A0 6500                       		bcs.s	@lowr4
000010A2 0685 0000 6000             		add.l	#$6000,d5
000010A8                            @lowr4:
000010A8 4845                       		swap	d5
000010AA 3805                       		move.w	d5,d4
000010AC 0244 000F                  		and.w	#$F,d4
000010B0 0C44 000A                  		cmp.w	#$A,d4
000010B4 6500                       		bcs.s	@lowr5
000010B6 0685 0000 0006             		add.l	#$6,d5
000010BC                            @lowr5:
000010BC 3805                       		move.w	d5,d4
000010BE 0244 00F0                  		and.w	#$F0,d4
000010C2 0C44 00A0                  		cmp.w	#$A0,d4
000010C6 6500                       		bcs.s	@lowr6
000010C8 0685 0000 0060             		add.l	#$60,d5
000010CE                            @lowr6:
000010CE 3805                       		move.w	d5,d4
000010D0 0244 0F00                  		and.w	#$F00,d4
000010D4 0C44 0A00                  		cmp.w	#$A00,d4
000010D8 6500                       		bcs.s	@lowr7
000010DA 0685 0000 0600             		add.l	#$600,d5
000010E0                            @lowr7:
000010E0 4845                       		swap	d5
000010E2 4E75                       		rts
000010E2 4E75                       		rts
000010E4                            		include	"system/input/code.asm"
000010E4                            ; ====================================================================
000010E4                            ; Input
000010E4                            ; ====================================================================
000010E4                            
000010E4                            		include	"system/input/map.asm"
000010E4                            ; ====================================================================
000010E4                            ; Input
000010E4                            ; ====================================================================
000010E4                            
000010E4                            ; ====================================================================
000010E4                            ; -------------------------------------------------
000010E4                            ; Variables
000010E4                            ; -------------------------------------------------
000010E4                            
000010E4 =00000001                  JoyUp		equ	%00000001
000010E4 =00000002                  JoyDown		equ	%00000010
000010E4 =00000004                  JoyLeft		equ	%00000100
000010E4 =00000008                  JoyRight	equ	%00001000
000010E4 =00000010                  JoyB		equ	%00010000
000010E4 =00000020                  JoyC		equ	%00100000
000010E4 =00000040                  JoyA		equ	%01000000
000010E4 =00000080                  JoyStart	equ	%10000000
000010E4 =00000000                  bitJoyUp	equ	0
000010E4 =00000001                  bitJoyDown	equ	1
000010E4 =00000002                  bitJoyLeft	equ	2
000010E4 =00000003                  bitJoyRight	equ	3
000010E4 =00000004                  bitJoyB		equ	4
000010E4 =00000005                  bitJoyC		equ	5
000010E4 =00000006                  bitJoyA		equ	6
000010E4 =00000007                  bitJoyStart	equ	7
000010E4                            
000010E4 =00000001                  JoyZ		equ	%00000001
000010E4 =00000002                  JoyY		equ	%00000010
000010E4 =00000004                  JoyX		equ	%00000100
000010E4 =00000008                  JoyMode		equ	%00001000
000010E4 =00000000                  bitJoyZ		equ	0
000010E4 =00000001                  bitJoyY		equ	1
000010E4 =00000002                  bitJoyX		equ	2
000010E4 =00000003                  bitJoyMode	equ	3
000010E4                            
000010E4                            ; --------------------------------------------
000010E4                            
000010E4                            		rsreset
000010E4 =00000000                  CtrlID		rs.b	1
000010E4 =00000001                  PadType		rs.b	1		;only TRUE $01 or FALSE $00
000010E4 =00000002                  ExOnHold	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
000010E4 =00000003                  OnHold		rs.b	1		;SACBRLDU
000010E4 =00000004                  ExOnPress	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
000010E4 =00000005                  OnPress		rs.b	1		;SACBRLDU
000010E4 =00000006                  MouseX		rs.w	1		;TODO
000010E4 =00000008                  MouseY		rs.w	1
000010E4 =0000000A                  sizeof_control	rs.l	0
000010E4                            
000010E4                            ; ====================================================================
000010E4                            ; -------------------------------------------------
000010E4                            ; RAM
000010E4                            ; -------------------------------------------------
000010E4                            
000010E4                                            rsset	RAM_Input
000010E4 =FFFFDE80                  RAM_Control_1	rs.b sizeof_control
000010E4 =FFFFDE8A                  RAM_Control_2	rs.b sizeof_control
000010E4                            
000010E4                            ; --------------------------------------------
000010E4                            
000010E4 =FFFFDE94                  sizeof_input	rs.l	0
000010E4                            ; 		inform 0,"input ram: %h",(sizeof_input-RAM_Input)
000010E4                             				
000010E4                            ; ====================================================================
000010E4                            ; -------------------------------------------------
000010E4                            ; Macros
000010E4                            ; -------------------------------------------------
000010E4                            
000010E4                            ; --------------------------------------------
000010E4                            ; --------------------------------------------
000010E4                            
000010E4                            ; ====================================================================
000010E4                            ; -------------------------------------------------
000010E4                            ; Read input
000010E4                            ; -------------------------------------------------
000010E4                            
000010E4                            Input_Read:
000010E4 4BF9 FFFF DE80             		lea	(RAM_Control_1),a5
000010EA 7000                       		moveq	#0,d0
000010EC 6100                       		bsr.s	@DoIt
000010EE 4BF9 FFFF DE8A             		lea	(RAM_Control_2),a5
000010F4 7001                       		moveq	#1,d0
000010F6 6100                       		bsr.s	@DoIt
000010F8 4E75                       		rts
000010FA                            
000010FA                            ; ---------------------------------------
000010FA                            
000010FA                            @DoIt:
000010FA 4DF9 00A1 0003             		lea	($A10003).l,a6
00001100 E348                       		lsl.w	#1,d0
00001102 DCC0                       		add.w	d0,a6			;Add result to port
00001104 6100 0000                  		bsr	@FindJoypad
00001108 1A80                       		move.b	d0,(a5)
0000110A                            
0000110A 0C00 000F                                  cmp.b	#$F,d0
0000110E 6700                                       beq.s	@End
00001110 0C00 000D                  		cmp.b	#$D,d0
00001114 6700                                       beq.s	@Controller
00001116 0C00 0007                    		cmp.b	#7,d0			;Multitap
0000111A 6700                                       beq.s	@End
0000111C 0C00 0003                  		cmp.b	#3,d0
00001120 6700 0000                                  beq	@Mouse
00001124                            
00001124                            @End:
00001124 4E75                       		rts
00001126                            
00001126                            ; ------------------------------------
00001126                            ; Controller
00001126                            ; ------------------------------------
00001126                            
00001126                            @Controller:
00001126 1D7C 0040 0006             		move.b	#$40,6(a6)
0000112C 4E71                       		nop
0000112E 4E71                       		nop
00001130 1CBC 0040                  		move.b	#$40,(a6)		; Show CB|RLDU
00001134 4E71                       		nop
00001136 4E71                       		nop
00001138 1CBC 0000                  		move.b	#$00,(a6)		; Show SA|RLDU
0000113C 4E71                       		nop
0000113E 4E71                       		nop
00001140 1CBC 0040                  		move.b	#$40,(a6)		; Show CB|RLDU
00001144 4E71                       		nop
00001146 4E71                       		nop
00001148 1CBC 0000                  		move.b	#$00,(a6)		; Show SA|RLDU
0000114C 4E71                       		nop
0000114E 4E71                       		nop
00001150 1CBC 0040                  		move.b	#$40,(a6)		; "Okay OKAY!, I have more buttons"
00001154 4E71                       		nop
00001156 4E71                       		nop
00001158 1016                       		move.b	(a6),d0
0000115A 1CBC 0000                   		move.b	#$00,(a6)		; "Heres my ID"
0000115E 4E71                         		nop
00001160 4E71                         		nop
00001162 1216                        		move.b	(a6),d1
00001164 1CBC 0040                   		move.b	#$40,(a6)
00001168 4E71                        		nop
0000116A 4E71                        		nop
0000116C                            		
0000116C 142D 0001                  		move.b	PadType(a5),d2
00001170 0882 0000                  		bclr	#0,d2
00001174 0241 000F                  		and.w	#$F,d1
00001178 0C41 000F                  		cmp.w	#$F,d1
0000117C 6600                       		bne.s	@Original
0000117E                            		
0000117E 08C2 0000                  		bset	#0,d2
00001182 7200                        		moveq	#0,d1
00001184 122D 0002                   		move.b	ExOnHold(a5),d1
00001188 4601                       		not.b	d1
0000118A B101                        		eor.b	d0,d1
0000118C C200                        		and.b	d0,d1
0000118E 0241 000F                   		and.w	#$F,d1
00001192 1B41 0004                   		move.b	d1,ExOnPress(a5)
00001196 4600                        		not.b	d0
00001198 0240 000F                   		and.w	#$F,d0
0000119C 1B40 0002                   		move.b	d0,ExOnHold(a5)
000011A0                             		
000011A0                            @Original:	
000011A0 1B42 0001                  		move.b	d2,PadType(a5)
000011A4                            	
000011A4 1CBC 0000                  		move.b	#0,(a6)
000011A8 4E71                       		nop
000011AA 4E71                       		nop
000011AC 1016                       		move.b	(a6),d0
000011AE E508                       		lsl.b	#2,d0
000011B0 0200 00C0                  		and.b	#$C0,d0	
000011B4 1CBC 0040                  		move.b	#$40,(a6)
000011B8 4E71                       		nop
000011BA 4E71                       		nop
000011BC 1216                       		move.b	(a6),d1
000011BE                            ; 		move.w	#0,($A11100)
000011BE 0201 003F                  		and.b	#$3F,d1
000011C2 8001                       		or.b	d1,d0
000011C4 4600                       		not.b	d0
000011C6 122D 0003                  		move.b	OnHold(a5),d1
000011CA B101                       		eor.b	d0,d1
000011CC 1B40 0003                  		move.b	d0,OnHold(a5)
000011D0 C200                       		and.b	d0,d1
000011D2 1B41 0005                  		move.b	d1,OnPress(a5)
000011D6 4E75                       		rts
000011D8                            
000011D8                            ; ; ------------------------------------
000011D8                            ; ; Multitap
000011D8                            ; ; ------------------------------------
000011D8                            ; 
000011D8                            ; @Multitap:
000011D8                            ; 		bra	@End
000011D8                            
000011D8                            ; ------------------------------------
000011D8                            ; Sega Mega Mouse
000011D8                            ;
000011D8                            ; in: d1 - port number
000011D8                            ; out: d0 - status
000011D8                            ;      d2
000011D8                            ; ------------------------------------
000011D8                            
000011D8                            @Mouse:
000011D8 7200                       		moveq	#0,d1
000011DA 6100 0000                  		bsr	@ReadIt
000011DE                            		
000011DE 2002                       		move.l	d2,d0
000011E0 4840                       		swap	d0
000011E2 0240 00FF                  		and.w	#$FF,d0
000011E6 122D 0003                  		move.b	OnHold(a5),d1
000011EA B101                       		eor.b	d0,d1
000011EC 1B40 0003                  		move.b	d0,OnHold(a5)
000011F0 C200                        		and.b	d0,d1
000011F2 1B41 0005                  		move.b	d1,OnPress(a5)
000011F6                            		
000011F6                            		;TODO
000011F6 3002                       		move.w	d2,d0
000011F8 0240 00FF                  		and.w	#$FF,d0
000011FC 4880                       		ext.w	d0
000011FE 4440                       		neg.w	d0
00001200 3B40 0008                   		move.w	d0,MouseY(a5)
00001204                             		
00001204 E04A                        		lsr.w	#8,d2
00001206 0242 00FF                   		and.w	#$FF,d2
0000120A 4882                       		ext.w	d2
0000120C 3B42 0006                   		move.w	d2,MouseX(a5)
00001210 6000 FF12                   		bra	@End
00001214                            
00001214                            ; ------------------------------------
00001214                            
00001214                            @ReadIt:
00001214                            ; 		movem.l	d1/d3/d4/d7/a6,-(sp)
00001214                            
00001214 7000                       		moveq	#0,d0			;Error flag
00001216 0C41 0002                  		cmp.w	#2,d1			;Control ID < 2?
0000121A 6200 0000                  		bhi	@Error
0000121E D241                       		add.w	d1,d1
00001220                            	;	lea	($A10003),a6
00001220                            @Connect:
00001220 1D7C 0060 0006             		move.b	#$60,6(a6)
00001226 4E71                                       nop
00001228 4E71                                       nop
0000122A 1CBC 0060                                  move.b	#$60,(a6)		;TH,TR=11 (END DATA)
0000122E 7400                                       moveq	#0,d2
00001230 7600                                       moveq	#0,d3
00001232                            @NotReady:
00001232 0816 0004                   		btst	#4,(a6)
00001236 67FA                        		beq.s	@NotReady
00001238 1816                        		move.b	(a6),d4			;d4.b = ? 1 1 1 | 0 0 0
0000123A 0204 000F                   		and.b	#$F,d4
0000123E 4A04                        		tst.b	d4
00001240 6600 0000                   		bne	@Error			;No mouse
00001244 1CBC 0020                   		move.b	#$20,(a6)		;Select t1 m1 1 1
00001248 3E3C 00FE                   		move.w	#$FE,d7
0000124C                            @lp1:
0000124C 0816 0004                  		btst.b	#4,(a6)
00001250 6600                       		bne.s	@Mouse_10
00001252 51CF FFF8                  		dbra	d7,@lp1
00001256 6000 0000                  		bra	@Error
0000125A                            		
0000125A                            @Mouse_10:
0000125A 1016                       		move.b	(a6),d0			;d0 = xxxx|xxxx|xxxx|t1 m1 1 1
0000125C E148                       		lsl.w	#8,d0			;d0 = xxxx|t1 m1 1 1|0000|0000
0000125E 1CBC 0000                  		move.b	#0,(a6)
00001262 4E71                       		nop
00001264                            @lp2:
00001264 0816 0004                  		btst	#4,(a6)
00001268 6700                       		beq.s	@Mouse_20
0000126A 51CF FFF8                  		dbra	d7,@lp2
0000126E 6000 0000                  		bra	@Error
00001272                            		
00001272                            @Mouse_20:
00001272 1616                       		move.b	(a6),d3
00001274 1CBC 0020                  		move.b	#$20,(a6)
00001278 E14B                       		lsl.w	#8,d3
0000127A                            @lp3:
0000127A 0816 0004                  		btst	#4,(a6)
0000127E 6600                       		bne.s	@Mouse_30
00001280 51CF FFF8                  		dbra	d7,@lp3
00001284 6000 0000                  		bra	@Error
00001288                            		
00001288                            @Mouse_30:
00001288 1616                       		move.b	(a6),d3
0000128A E90B                       		lsl.b	#4,d3
0000128C E84B                       		lsr.w	#4,d3
0000128E 1CBC 0000                  		move.b	#0,(a6)
00001292 8043                       		or.w	d3,d0
00001294 7600                       		moveq	#0,d3
00001296                            @lp4:
00001296 0816 0004                  		btst	#4,(a6)
0000129A 6700                                       beq.s	@Mouse_40
0000129C 51CF FFF8                                  dbra	d7,@lp4
000012A0 6000 0000                                  bra	@Error
000012A4                            
000012A4                            @Mouse_40:
000012A4 1416                       		move.b	(a6),d2
000012A6 1CBC 0020                  		move.b	#$20,(a6)
000012AA E14A                       		lsl.w	#8,d2
000012AC                            @lp5:
000012AC 0816 0004                  		btst	#4,(a6)
000012B0 6600                       		bne.s	@Mouse_50
000012B2 51CF FFF8                  		dbra	d7,@lp5
000012B6 6000 0000                  		bra	@Error
000012BA                            		
000012BA                            @Mouse_50:
000012BA 1416                       		move.b	(a6),d2
000012BC 1CBC 0000                  		move.b	#0,(a6)
000012C0 E90A                       		lsl.b	#4,d2
000012C2 E94A                       		lsl.w	#4,d2
000012C4                            @lp6:
000012C4 0816 0004                  		btst	#4,(a6)
000012C8 6700                       		beq.s	@Mouse_60
000012CA 51CF FFF8                  		dbra	d7,@lp6
000012CE 6000 0000                  		bra	@Error
000012D2                            
000012D2                            @Mouse_60:
000012D2 1416                       		move.b	(a6),d2
000012D4 1CBC 0020                  		move.b	#$20,(a6)
000012D8 E90A                       		lsl.b	#4,d2
000012DA E98A                       		lsl.l	#4,d2
000012DC                            @lp7:
000012DC 0816 0004                  		btst	#4,(a6)
000012E0 6600                       		bne.s	@Mouse_70
000012E2 51CF FFF8                  		dbra	d7,@lp7
000012E6 6000                       		bra.s	@Error
000012E8                            
000012E8                            @Mouse_70:
000012E8 1416                       		move.b	(a6),d2
000012EA 1CBC 0000                  		move.b	#0,(a6)
000012EE E90A                       		lsl.b	#4,d2
000012F0 E98A                       		lsl.l	#4,d2
000012F2                            @lp8:
000012F2 0816 0004                  		btst	#4,(a6)
000012F6 6700                       		beq.s	@Mouse_80
000012F8 51CF 0000                  		dbra	d7,@Mouse_80
000012FC 6000                       		bra.s	@Error
000012FE                            
000012FE                            @Mouse_80:
000012FE 1416                       		move.b	(a6),d2
00001300 1CBC 0020                  		move.b	#$20,(a6)
00001304 E90A                       		lsl.b	#4,d2
00001306 E98A                       		lsl.l	#4,d2
00001308                            @lp9:
00001308 0816 0004                  		btst	#4,(a6)
0000130C 6700                       		beq.s	@Mouse_90
0000130E 51CF FFF8                  		dbra	d7,@lp9
00001312 6000                       		bra.s	@Error
00001314                            
00001314                            @Mouse_90:
00001314 1416                       		move.b	(a6),d2
00001316 1CBC 0060                  		move.b	#$60,(a6)
0000131A E90A                       		lsl.b	#4,d2
0000131C E88A                       		lsr.l	#4,d2
0000131E                            @lp10:
0000131E 0816 0004                  		btst	#4,(a6)
00001322 67FA                       		beq.s	@lp10
00001324 0082 0000 0000             		or.l	#0,d2
0000132A                            @Exit:
0000132A 33FC 0000 00A1 1100        		move.w	#0,($A11100)
00001332                            ; 		movem.l	(sp)+,d1/d3/d4/d7/a6
00001332 4E75                       		rts
00001334                            
00001334                            @Error:
00001334 1CBC 0060                  		move.b	#$60,(a6)
00001338 4E71                       		nop
0000133A 4E71                       		nop
0000133C                            @erlp:
0000133C 1CBC 0004                  		move.b	#4,(a6)
00001340 67FA                       		beq.s	@erlp
00001342 0082 8000 0000             		or.l	#$80000000,d2
00001348 7000                       		moveq	#0,d0
0000134A 33FC 0000 00A1 1100        		move.w	#0,($A11100)
00001352                            ; 		movem.l	(sp)+,d1/d3/d4/d7/a6
00001352 4E75                       		rts
00001354                            
00001354                            ; ------------------------------------
00001354                            ; d0.w
00001354                            ; $0F - Nothing
00001354                            ; $0D - Controller
00001354                            ; $07 - Multitap
00001354                            ; $03 - Mouse
00001354                            ;
00001354                            ; d1.l
00001354                            ; $00xx00yy - Key presses
00001354                            ; ------------------------------------
00001354                            
00001354                            @FindJoypad:
00001354 7000                       		moveq	#0,d0
00001356 1CBC 0070                  		move.b	#$70,(a6)
0000135A 6100                       		bsr.s	@GetPress
0000135C 4841                       		swap	d1
0000135E 1CBC 0030                  		move.b	#$30,(a6)
00001362 D040                       		add.w	d0,d0
00001364                            
00001364                            @GetPress:
00001364 1216                       		move.b	(a6),d1
00001366 1401                       		move.b	d1,d2
00001368 0202 000C                  		and.b	#$C,d2
0000136C 6700                       		beq.s	@Nope1
0000136E 5240                       		addq.w	#1,d0
00001370                            
00001370                            @Nope1:
00001370 D040                       		add.w	d0,d0
00001372 1601                       		move.b	d1,d3
00001374 0243 0003                  		and.w	#3,d3
00001378 6700                       		beq.s	@Nope2
0000137A 5240                       		addq.w	#1,d0
0000137C                            
0000137C                            @Nope2:
0000137C 4E75                       		rts
0000137E                            		
0000137E                            ; ====================================================================
0000137E                            ; -------------------------------------------------
0000137E                            ; Subs
0000137E                            ; -------------------------------------------------
0000137E                            
0000137E                            Input_init:
0000137E                            ; 		move.w	#$100,($A11100).l
0000137E                            ; @WaitZ80:
0000137E                            ; 		btst	#0,($A11100).l
0000137E                            ; 		bne.s	@WaitZ80
0000137E                             
0000137E 7240                       		moveq	#$40,d1
00001380 13C1 00A1 0009             		move.b	d1,($A10009).l
00001386 13C1 00A1 000B             		move.b	d1,($A1000B).l
0000138C 13C1 00A1 000D             		move.b	d1,($A1000D).l
00001392                            
00001392                            ; 		move.w	#0,($A11100).l
00001392 4E75                       		rts
00001394                            		
00001394                            		
00001394                            		include	"system/sound/68k/main.asm"
00001394                            ; ================================================================
00001394                            ; SMEG Karasucia
00001394                            ; Sound and Music Engine for Genesis (also MCD* and 32X**)
00001394                            ;
00001394                            ; (C)2013-2017 GF64
00001394                            ; 
00001394                            ; Reads patterns from a ImpulseTracker file (.it)
00001394                            ;
00001394                            ; Ticks:
00001394                            ; 150 - NTSC
00001394                            ; 120 - PAL
00001394                            ;
00001394                            ; uses assembler settings:
00001394                            ; MCD     - for building to MCD (All the driver must be aligned
00001394                            ;              to WordRAM or PRG-RAM)
00001394                            ; MARS       - for building to 32x (CODE and
00001394                            ;              DATA(Music/Sfx/Voices/Z80 samples) must be aligned to
00001394                            ;              the 32x standards, uses bank 0 only,
00001394                            ;              PWM Samples can be anywhere in ROM)
00001394                            ; SMEG_Z80   - Use Z80, set to 0 while running from PRGRAM
00001394                            ;                 
00001394                            ; Limtations:
00001394                            ; (Driver) - Effects: only volume and panning (Xxx) works
00001394                            ; 
00001394                            ; (MCD) - You cant use Z80 samples if your program is running
00001394                            ;            on PRG-RAM (Z80 cant access RAM), if your program is
00001394                            ;            running on WORD-RAM, set the permission to
00001394                            ;            MainCPU (2M Mode) (not recommended)
00001394                            ;            
00001394                            ; * requires respective SubCPU code
00001394                            ; ** requires respective SH2 code
00001394                            ; ================================================================
00001394                            
00001394                            ;NOTE: Format
00001394                            ; SONGFILE:
00001394                            ; 		dc.b 12,0		; Numof_blocks, loop_block (-1 dont loop)
00001394                            ; 		dc.l @pattern		; Pattern data
00001394                            ;      		dc.l @instruments	; Instrument set
00001394                            ;      		dc.w 8			; Number of channel settings
00001394                            ;       	dc.b FM_6,64,$80,$0F	; Example of one (Channel,Vol,Pan,Extra)		
00001394                            ;		...
00001394                            ;
00001394                            ; Extra:
00001394                            ; FM: %????KEYS KEYS: FM Keys (ignored if not FM)
00001394                            ; PSG: (not yet)
00001394                            ; PCM/PWM: not yet
00001394                            ; 
00001394                            ; @instruments:
00001394                            ; 		dc.w @ymha-@instruments
00001394                            ; 		dc.w @psg-@instruments
00001394                            ; 		dc.w @noise-@instruments
00001394                            ; 		dc.w @psmpl-@instruments
00001394                            ; 		even
00001394                            ; @ymha:
00001394                            ; 		;FM
00001394                            ; 		dc.w INSTNUM,0
00001394                            ; 		dc.l fmVoice_bass_ambient
00001394                            ;    		
00001394                            ;    		;FM3
00001394                            ;    		dc.w $40|INSTNUM,0
00001394                            ;    		dc.l fm_hatopen
00001394                            ;    		dc.w $0511|$2000,$0328|$2000
00001394                            ;    		dc.w $005E|$2000,$0328|$2000
00001394                            ;    		
00001394                            ;    		;Samples
00001394                            ;   		dc.w $80|INSTNUM,12	; NUM,Pitch
00001394                            ;   		dc.l wav_kick		; WAV Start
00001394                            ;  		dc.l wav_kick_e		; WAV End
00001394                            ;  		dc.l -1			; WAV Loop sample (0: start -1: none)
00001394                            ;  		
00001394                            ; 		dc.w -1			; ENDOFLIST
00001394                            ; 		even
00001394                            ; @psmpl:
00001394                            ; 		dc.w -1			; Later
00001394                            ; 		even
00001394                            ; @psg:
00001394                            ; 		dc.w -1			; Later
00001394                            ; 		even
00001394                            ; @noise:
00001394                            ;  		dc.w 3,%101		; INSTNUM, PSG Noise setting
00001394                            ;  		
00001394                            ;  		dc.w 5,%101
00001394                            ;  		dc.w 7,%100
00001394                            ;  		
00001394                            ; 		dc.w -1
00001394                            ; 		even
00001394                            
00001394                            
00001394                            ; GEMS style tick
00001394                            ; 		dc.l fmSfx_Coin
00001394                            ; 		dc.w $00AB|$3800,$0457|$3000
00001394                            ; 		dc.w $0511|$3000,$0336|$2000
00001394                            ;
00001394                            ;    		dc.l fm_hatopen
00001394                            ;    		dc.w $0511|$2000,$0328|$2000
00001394                            ;    		dc.w $005E|$2000,$0328|$2000
00001394                            ;
00001394                            ;    		dc.l fm_hatclosed
00001394                            ;    		dc.w $051C|$2000,$0328|$2000
00001394                            ;    		dc.w $005E|$2000,$0328|$2000
00001394                            ;
00001394                            ;    		dc.l fm_hatclosed
00001394                            ;    		dc.w $051C|$2000,$0328|$2000
00001394                            ;    		dc.w $005E|$2000,$0328|$2000	
00001394                            
00001394                            ; ================================================================
00001394                            
00001394                            			rsreset
00001394 =00000000                  DrvStatus		rs.b 1		;Byte
00001394 =00000001                  snd_flags		rs.b 1		;Byte
00001394 =00000002                  PatternEnd		rs.b 1		;Byte
00001394 =00000003                  PatternLoop		rs.b 1		;Byte
00001394 =00000004                  SongRequest		rs.l 1 		;Long
00001394 =00000008                  SongStart		rs.l 1		;Long
00001394 =0000000C                  SongRead		rs.l 1		;Long
00001394 =00000010                  snd_instr		rs.l 1		;Long
00001394 =00000014                  SongPcmSamp		rs.l 1		;Long
00001394 =00000018                  TicksRequest		rs.w 1		;Word
00001394 =0000001A                  TicksRead		rs.w 1		;Word
00001394 =0000001C                  TicksSet		rs.w 1		;Word
00001394 =0000001E                  TempoRead 		rs.w 1		;Word
00001394 =00000020                  PattSize		rs.w 1		;Word
00001394 =00000022                  pattr_read		rs.w 1		;Word
00001394 =00000024                  CdOnlyFlags		rs.w 1		;Word
00001394 =00000026                  CurrPattern		rs.b 1		;Byte
00001394 =00000027                  PcmChnOnOff		rs.b 1		;Byte
00001394 =00000028                  PsgLast			rs.b 1		;Byte
00001394 =00000029                  snd_flagsBGM		rs.b 1		;Byte
00001394 =0000002A                  LastPattChn		rs.b 1		;Byte
00001394 =0000002B                  Psg_Vibrato		rs.b 1		;Byte
00001394 =0000002C                  Psg_AutoVol		rs.b 1		;Byte
00001394 =0000002E                  sizeof_SndBuff		rs.l 0
00001394                            
00001394                            ; --------------------------------------------
00001394                            ; Channel settings
00001394                            ; --------------------------------------------
00001394                            
00001394                            			rsreset
00001394 =00000000                  Chn_Freq		rs.w 1		;Word
00001394 =00000002                  Chn_Effect		rs.w 1		;Word
00001394 =00000004                  Chn_Portam		rs.w 1		;Word
00001394 =00000006                  Chn_Type		rs.b 1		;Byte
00001394 =00000007                  Chn_ID			rs.b 1		;Byte
00001394 =00000008                  Chn_Inst		rs.b 1		;Byte
00001394 =00000009                  Chn_Vol			rs.b 1		;Byte
00001394 =0000000A                  Chn_MainVol		rs.b 1		;Byte
00001394 =0000000B                  Chn_Note		rs.b 1		;Byte
00001394 =0000000C                  Chn_Pan			rs.b 1		;Byte
00001394 =0000000D                  Chn_FM_Key		rs.b 1		;Byte
00001394 =0000000E                  Chn_PCM_Pitch		rs.b 1		;Byte
00001394                            ; Chn_PSG_Vibrato		rs.b 1		;Byte
00001394 =0000000F                  Chn_Timer		rs.b 1
00001394 =00000010                  sizeof_Chn		rs.l 0
00001394                             
00001394                             
00001394                            			rsreset
00001394 =00000000                  instDYmha		rs.w 1
00001394 =00000002                  instDPsg		rs.w 1
00001394 =00000004                  instDNoise		rs.w 1
00001394 =00000006                  instDpsmpl		rs.w 1
00001394                            
00001394                            ; --------------------------------------------
00001394                            ; Bits
00001394                            ; --------------------------------------------
00001394                            
00001394 =00000000                  bitPriority		equ	0
00001394 =00000001                  bitSfxOn		equ	1
00001394 =00000002                  bitEnabled		equ	2
00001394                            
00001394                            ;Status
00001394 =00000000                  bitFmDac		equ	0
00001394 =00000001                  bitDacNote		equ	1
00001394 =00000002                  bitTone3		equ	2
00001394 =00000003                  bitSpecial3		equ	3
00001394                            
00001394                            ; --------------------------------------------
00001394                            ; Channel IDs
00001394                            ; --------------------------------------------
00001394                            
00001394 =00000000                  FM_1			equ	$00
00001394 =00000001                  FM_2			equ	$01
00001394 =00000002                  FM_3			equ	$02
00001394 =00000004                  FM_4			equ	$04
00001394 =00000005                  FM_5			equ	$05
00001394 =00000006                  FM_6			equ	$06
00001394 =00000080                  PSG_1			equ	$80
00001394 =000000A0                  PSG_2			equ	$A0
00001394 =000000C0                  PSG_3			equ	$C0
00001394 =000000E0                  NOISE			equ	$E0
00001394 =00000010                  PCM_1			equ	$10
00001394 =00000011                  PCM_2			equ	$11
00001394 =00000012                  PCM_3			equ	$12
00001394 =00000013                  PCM_4			equ	$13
00001394 =00000014                  PCM_5			equ	$14
00001394 =00000015                  PCM_6			equ	$15
00001394 =00000016                  PCM_7			equ	$16
00001394 =00000017                  PCM_8			equ	$17
00001394 =00000012                  max_chnl		equ	18
00001394                            
00001394                            ; --------------------------------------------
00001394                            ; .IT request ($80+) format
00001394                            ; --------------------------------------------
00001394                            
00001394 =00000000                  bitNote			equ	0
00001394 =00000001                  bitInst			equ	1
00001394 =00000002                  bitVolume		equ	2
00001394 =00000003                  bitEffect		equ	3
00001394 =00000004                  bitSameNote		equ	4
00001394 =00000005                  bitSameInst		equ	5
00001394 =00000006                  bitSameVol		equ	6
00001394 =00000007                  bitSameEffect		equ	7
00001394                            
00001394                            ; --------------------------------------------
00001394                            ; RAM
00001394                            ; 
00001394                            ; MAX: $400
00001394                            ; --------------------------------------------
00001394                            
00001394                            			rsset RAM_Audio
00001394 =FFFFEF00                  RAM_SMEG_Buffer		rs.b sizeof_SndBuff
00001394 =FFFFEF2E                  RAM_SMEG_SfxBuff	rs.b sizeof_SndBuff
00001394 =FFFFEF5C                  RAM_SMEG_PrioList	rs.b max_chnl
00001394 =FFFFEF6E                  RAM_SMEG_Chnls_BGM	rs.b $10*max_chnl
00001394 =FFFFF08E                  RAM_SMEG_Chnls_SFX	rs.b $10*max_chnl
00001394                            			
00001394 =FFFFF1AE                  sizeof_SMEG		rs.l 0
00001394                            ;      			inform 0,"SMEG Uses: %h",sizeof_SMEG-RAM_Audio
00001394                            			
00001394                            ; ================================================================
00001394                            ; -------------------------------------------
00001394                            ; Macros
00001394                            ; -------------------------------------------
00001394                            
00001394                            ; -----------------------------------------
00001394                            
00001394                            PCM_Entry	macro	cd_side,mars_side,loop,pitch
00001394                            		
00001394                            cdsize_size	= strlen(\cd_side)
00001394                            		if MCD
00001394                            		  if cdsize_size>$C
00001394                            		    inform 2,"(SMEG) CD FILENAME TOO LONG"
00001394                            		  elseif cdsize_size=$C
00001394                            		    dc.b \cd_side
00001394                            		  elseif cdsize_size<$C
00001394                            		    dc.b \cd_side
00001394                            		    rept $C-cdsize_size
00001394                            		      dc.b 0
00001394                            		    endr
00001394                            		  elseif cdsize_size<=0
00001394                            		    inform 2,"(SMEG) YOU FORGOT THE CD FILENAME"
00001394                            		  endif
00001394                            		  
00001394                            		elseif MARS
00001394                            		  dc.l mars_side
00001394                            		endif
00001394                            		
00001394                            		dc.w loop
00001394                            		dc.w pitch
00001394                            		endm
00001394                            
00001394                            ; 		inform 0,"%h",RAM_SMEG_Buffer
00001394                            
00001394                            ; ================================================================
00001394                            ; -------------------------------------------
00001394                            ; External Calls
00001394                            ; -------------------------------------------
00001394                            
00001394                            ;SegaPCM
00001394 =00000020                  CdTask_LoadPcm		equ	$20
00001394 =00000021                  CdTask_SetAddr		equ	$21
00001394 =00000022                  CdTask_SetFreq		equ	$22
00001394 =00000023                  CdTask_SetPan		equ	$23
00001394 =00000024                  CdTask_SetEnv		equ	$24
00001394 =00000025                  CdTask_SetOnOff		equ	$25
00001394 =00000026                  CdTask_ClearAllPcm	equ	$26
00001394                            
00001394                            ;MARS
00001394 =00000001                  marscall_Play		equ	1
00001394 =00000002                  marscall_Stop		equ	2
00001394 =00000003                  marscall_SetSmpl	equ	3
00001394 =00000004                  marscall_SetVol		equ	4
00001394 =00000005                  marscall_SetEntry	equ	5
00001394                            	
00001394                            ; ================================================================
00001394                            ; -------------------------------------------
00001394                            ; Init
00001394                            ; -------------------------------------------
00001394                            
00001394                            Audio_Init:
00001394 41F9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a0
0000139A 303C 02FF                  		move.w	#$2FF,d0
0000139E                            @ClrAll:
0000139E 4298                       		clr.l	(a0)+
000013A0 51C8 FFFC                  		dbf	d0,@ClrAll
000013A4                            		
000013A4                            ; -------------------------------------------
000013A4                            ; Z80
000013A4                            ; -------------------------------------------
000013A4                            
000013A4                            SMEG_Z80_Init:
000013A4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
000013AC 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
000013B4                            @WaitZ80:
000013B4 0839 0000 00A1 1100        		btst	#0,($A11100).l
000013BC 66F6                       		bne.s	@WaitZ80
000013BE                            
000013BE 41F9 00A0 0000             		lea	($A00000).l,a0
000013C4 303C 1FFF                  		move.w	#$1FFF,d0
000013C8                            @cleanup:
000013C8 4218                       		clr.b	(a0)+
000013CA 51C8 FFFC                  		dbf	d0,@cleanup
000013CE                            		
000013CE 41FA 0000                  		lea	Z80_Driver(pc),a0
000013D2 43F9 00A0 0000             		lea	($A00000).l,a1
000013D8 323C 0000                  		move.w	#Z80_DriverEnd-Z80_Driver,d1
000013DC                            @ToZ80:
000013DC 12D8                       		move.b	(a0)+,(a1)+
000013DE 51C9 FFFC                  		dbf	d1,@ToZ80
000013E2                            
000013E2                            ; -----------------------------------
000013E2                            
000013E2 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000013EA 4E71                       		nop
000013EC 4E71                       		nop
000013EE 4E71                       		nop
000013F0 4E71                       		nop
000013F2 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
000013FA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001402                            ; 		rts
00001402                            		
00001402                            ; -------------------------------------------
00001402                            ; Stop ALL Sound
00001402                            ; -------------------------------------------
00001402                            
00001402                            SMEG_StopSnd:
00001402 103C 002B                  		move.b	#$2B,d0
00001406 123C 0000                  		move.b	#$00,d1
0000140A 6100 0000                  		bsr	SMEG_Z80_Off
0000140E 6100 0000                  		bsr	FM_RegWrite_1
00001412 6100 0000                  		bsr	SMEG_Z80_On
00001416 6100 0000                  		bsr	Audio_Sample_Stop
0000141A                            		
0000141A 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
00001420 0896 0002                  		bclr	#bitEnabled,(a6)
00001424                            	
00001424 6100 0000                  		bsr	SMEG_FM_Reset
00001428 6100 0000                   		bsr	SMEG_PSG_Reset
0000142C 6000 0000                  		bra	SMEG_PCM_Reset
00001430                            		
00001430                            ; -------------------------------------------
00001430                            ; Play Song
00001430                            ; -------------------------------------------
00001430                            
00001430                            SMEG_PlaySong:
00001430 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
00001436 08D6 0002                  		bset	#bitEnabled,(a6)
0000143A 4E75                       		rts
0000143C                            		
0000143C                            ; -------------------------------------------
0000143C                            ; Load Song
0000143C                            ;
0000143C                            ; d0 - StartOfSong
0000143C                            ; d1 - Ticks
0000143C                            ; d2 - Type (0 - song, 1 - sfx)
0000143C                            ; -------------------------------------------
0000143C                            
0000143C                            Audio_Track_Play:
0000143C 4A42                       		tst.w	d2
0000143E 6600                       		bne.s	@Sfx
00001440                            		
00001440 23C0 FFFF EF04             		move.l	d0,(RAM_SMEG_Buffer+SongRequest)
00001446 33C1 FFFF EF18             		move.w	d1,(RAM_SMEG_Buffer+TicksRequest)
0000144C 4E75                       		rts
0000144E                            @Sfx:
0000144E                            ; 		clr.w	(RAM_SMEG_SfxBuff+pattr_read)
0000144E                            ; 		clr.w	(RAM_SMEG_SfxBuff+CurrPattern)
0000144E                            ; 		move.l	(RAM_SMEG_SfxBuff+SongStart),(RAM_SMEG_SfxBuff+SongRead)
0000144E                            ; 		cmp.l	(RAM_SMEG_SfxBuff+SongRequest),d0
0000144E                            ; 		bne.s	@SameSfx
0000144E                            		
0000144E 23C0 FFFF EF32             		move.l	d0,(RAM_SMEG_SfxBuff+SongRequest)
00001454 33C1 FFFF EF46             		move.w	d1,(RAM_SMEG_SfxBuff+TicksRequest)
0000145A                            @SameSfx:
0000145A 4E75                       		rts
0000145C                            		
0000145C                            ; ================================================================
0000145C                            ; -------------------------------------------
0000145C                            ; Run
0000145C                            ; -------------------------------------------
0000145C                            
0000145C                            Audio_Run:
0000145C 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
00001462 6100 0000                  		bsr	@RequestSong
00001466 0896 0000                  		bclr	#bitPriority,(a6)
0000146A 6100 0000                                  bsr	@ReadRow
0000146E                            
0000146E 4DF9 FFFF EF2E               		lea	(RAM_SMEG_SfxBuff),a6
00001474 6100 0000                   		bsr	@RequestSfx
00001478 08D6 0000                  		bset	#bitPriority,(a6)
0000147C 6100 0000                  		bsr	@ReadRow
00001480                            		
00001480                            ; -------------------------
00001480                            ; MARS ONLY
00001480                            ; Transfer 68k RAM using
00001480                            ; framebuffer (offside)
00001480                            ; -------------------------
00001480                            
00001480                            ; @marsturn:
00001480                            ; 		btst	#7,(marsreg)	
00001480                            ; 		bne.s	@busymars
00001480                            ; 		
00001480                            ; 		bchg	#0,($A1518B)
00001480                            ; @waitfb:	btst	#1,($A1518B)
00001480                            ; 		bne.s	@waitfb
00001480                            ; 		lea	(RAM_SMEG_Chnls_BGM),a0
00001480                            ; 		lea	(framebuffer+$14000),a1
00001480                            ; 		move.w	#$10*max_chnl,d0
00001480                            ; @copytomars:	
00001480                            ; 		move.b	(a0)+,(a1)+
00001480                            ; 		dbf	d0,@copytomars
00001480                            ; 		bchg	#0,($A1518B)
00001480                            ; @busymars:
00001480                            
00001480                            ; -------------------------
00001480                            
00001480                            @Wait:
00001480 4E75                       		rts
00001482                            
00001482                            ; -------------------------------------------
00001482                            ; Request song
00001482                            ; -------------------------------------------
00001482                            	
00001482                            @RequestSong:
00001482 4AAE 0004                  		tst.l	SongRequest(a6)
00001486 6700                       		beq.s	@Same
00001488 0896 0002                  		bclr	#bitEnabled,(a6)
0000148C 6100 FF74                   		bsr	SMEG_StopSnd			;d0-d1 are gone
00001490 4AAE 0004                   		tst.l	SongRequest(a6)
00001494 6B00                        		bmi.s	@Same
00001496                             		
00001496 422E 0026                  		clr.b	CurrPattern(a6)
0000149A 422E 0002                  		clr.b	PatternEnd(a6)
0000149E 426E 0020                  		clr.w	PattSize(a6)
000014A2 426E 0022                  		clr.w	pattr_read(a6)
000014A6 4BF9 FFFF EF6E             		lea	(RAM_SMEG_Chnls_BGM),a5
000014AC 422E 0027                  		clr.b	PcmChnOnOff(a6)
000014B0 422E 0000                                  clr.b	DrvStatus(a6)
000014B4 6100 0000                  		bsr	SMEG_Load_SetChnls
000014B8 6100 0000                   		bsr	SMEG_Load_SetExtChnls
000014BC 08D6 0002                  		bset	#bitEnabled,(a6)
000014C0                            
000014C0 426E 0018                  		clr.w	TicksRequest(a6)
000014C4 42AE 0004                  		clr.l	SongRequest(a6)
000014C8                            @Same:
000014C8 4E75                       		rts
000014CA                            		
000014CA                            ; -------------------------------------------
000014CA                            ; Request sfx
000014CA                            ; -------------------------------------------
000014CA                            
000014CA                            @RequestSfx:
000014CA 4AAE 0004                  		tst.l	SongRequest(a6)
000014CE 67F8                       		beq.s	@Same
000014D0 6BF6                       		bmi.s	@Same
000014D2                            		
000014D2 0896 0002                  		bclr	#bitEnabled,(a6)
000014D6 422E 0026                  		clr.b	CurrPattern(a6)
000014DA 422E 0002                  		clr.b	PatternEnd(a6)
000014DE 426E 0020                  		clr.w	PattSize(a6)
000014E2 426E 0022                  		clr.w	pattr_read(a6)
000014E6                            		
000014E6 422E 0027                  		clr.b	PcmChnOnOff(a6)
000014EA 422E 0000                                  clr.b	DrvStatus(a6)
000014EE                            ;                 bset	#bitSfxOn,(a6)
000014EE 4BF9 FFFF F08E             		lea	(RAM_SMEG_Chnls_SFX),a5
000014F4 6100 0000                  		bsr	SMEG_Load_SetChnls
000014F8 6100 0000                  		bsr	SMEG_Load_FixSfx
000014FC 08D6 0002                  		bset	#bitEnabled,(a6)
00001500                            		
00001500 426E 0018                  		clr.w	TicksRequest(a6)
00001504 42AE 0004                  		clr.l	SongRequest(a6)
00001508 4E75                       		rts
0000150A                            		
0000150A                            ; -------------------------------------------
0000150A                            ; Read row
0000150A                            ; -------------------------------------------
0000150A                            
0000150A                            @ReadRow:
0000150A 0816 0002                  		btst	#bitEnabled,(a6)
0000150E 6700 FF70                  		beq	@Wait
00001512                            
00001512 046E 0001 001A             		sub.w	#1,TicksRead(a6)
00001518 6A00 FF66                  		bpl	@Wait
0000151C 3D6E 001C 001A              		move.w	TicksSet(a6),TicksRead(a6)
00001522                            
00001522                            @NewRow:
00001522 286E 000C                                  movea.l	SongRead(a6),a4
00001526                            
00001526                            ; --------------------------------
00001526                            ; New pattern
00001526                            ; --------------------------------
00001526                            
00001526                            @Next:
00001526 7A00                       		moveq	#0,d5
00001528 7C00                       		moveq	#0,d6
0000152A 3C2E 0020                   		move.w	PattSize(a6),d6
0000152E 0446 0001                    		sub.w	#1,d6
00001532 3A2E 0022                    		move.w	pattr_read(a6),d5
00001536 BC85                        		cmp.l	d5,d6
00001538 6400                        		bcc.s	@NoNextRow
0000153A                             		
0000153A 426E 0022                  		clr.w	pattr_read(a6)
0000153E 7A00                       		moveq	#0,d5
00001540 7C00                       		moveq	#0,d6
00001542 1C2E 0002                  		move.b	PatternEnd(a6),d6
00001546 1A2E 0026                  		move.b	CurrPattern(a6),d5
0000154A BC45                       		cmp.w	d5,d6
0000154C 6E00                       		bgt.s	@NotEnd
0000154E                            		
0000154E 0C2E 00FF 0003             		cmp.b	#-1,PatternLoop(a6)
00001554 6700                       		beq.s	@exit
00001556                            		
00001556 286E 0008                  		movea.l	SongStart(a6),a4
0000155A 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
0000155E 1D5C 0020                   		move.b	(a4)+,PattSize(a6)
00001562 D8FC 0006                   		adda	#6,a4
00001566 2D4C 000C                  		move.l	a4,SongRead(a6)
0000156A 1D6E 0003 0026             		move.b	PatternLoop(a6),CurrPattern(a6)
00001570 426E 001A                  		clr.w	TicksRead(a6)
00001574 4E75                       		rts
00001576                            		
00001576                            @exit:
00001576 0896 0002                  		bclr	#bitEnabled,(a6)
0000157A 4E75                       		rts
0000157C                            
0000157C                            ; --------------------------------
0000157C                            
0000157C                            @NotEnd:
0000157C 062E 0001 0026             		add.b	#1,CurrPattern(a6)
00001582 7000                       		moveq	#0,d0
00001584 102E 0026                  		move.b	CurrPattern(a6),d0
00001588 B02E 0003                  		cmp.b	PatternLoop(a6),d0
0000158C 6600                       		bne.s	@DontSaveLoop
0000158E 2D4C 0008                  		move.l	a4,SongStart(a6)
00001592                            @DontSaveLoop:
00001592 7200                       		moveq	#0,d1
00001594 121C                       		move.b	(a4)+,d1
00001596 141C                       		move.b	(a4)+,d2
00001598 E14A                       		lsl.w	#8,d2
0000159A 8242                       		or	d2,d1
0000159C 3D41 0020                  		move.w	d1,PattSize(a6)
000015A0 D8FC 0006                  		adda	#6,a4
000015A4                            		
000015A4                            ; --------------------------------
000015A4                            ; Current pattern
000015A4                            ; --------------------------------
000015A4                            
000015A4                            @NoNextRow:
000015A4 7C00                       		moveq	#0,d6
000015A6 7000                       		moveq	#0,d0
000015A8 101C                       		move.b	(a4)+,d0
000015AA                            
000015AA 4A40                       		tst.w	d0
000015AC 6600                       		bne.s	@ValidNote
000015AE                            
000015AE 066E 0001 0022             		add.w	#1,pattr_read(a6)
000015B4 2D4C 000C                  		move.l	a4,SongRead(a6)
000015B8 4E75                       		rts
000015BA                            
000015BA                            @ValidNote:
000015BA 4A00                       		tst.b	d0
000015BC 6A00                       		bpl.s	@Not80
000015BE 066E 0001 0022             		add.w	#1,pattr_read(a6)
000015C4 0880 0007                  		bclr	#7,d0
000015C8 1C1C                       		move.b	(a4)+,d6
000015CA                            @Not80:
000015CA 066E 0001 0022             		add.w	#1,pattr_read(a6)
000015D0 0440 0001                  		sub.w	#1,d0
000015D4 1D40 002A                  		move.b	d0,LastPattChn(a6)
000015D8                            
000015D8 4BF9 FFFF EF6E             		lea 	(RAM_SMEG_Chnls_BGM),a5
000015DE 0816 0000                  		btst 	#bitPriority,(a6)
000015E2 6700                       		beq.s	@MusicPrio
000015E4 4BF9 FFFF F08E             		lea 	(RAM_SMEG_Chnls_SFX),a5	
000015EA                            @MusicPrio:
000015EA C0FC 0010                  		mulu.w	#sizeof_Chn,d0
000015EE DAC0                       		adda	d0,a5
000015F0                            		
000015F0 4A46                       		tst.w	d6
000015F2 6700                       		beq.s	@NotRest
000015F4 1B46 0006                  		move.b	d6,Chn_Type(a5)
000015F8                            @NotRest:
000015F8                            
000015F8                            ; SFX: Mark used channel
000015F8                            
000015F8 0816 0000                  		btst 	#bitPriority,(a6)
000015FC 6700                       		beq.s	@MusicPrio2
000015FE 6100 0000                  		bsr	SMEG_FindPrioSlot
00001602 16BC 0001                    		move.b	#1,(a3)
00001606                            @MusicPrio2:
00001606                             
00001606                            ; -------------
00001606                            ; Note
00001606                            ; -------------
00001606                            
00001606 082D 0004 0006             		btst	#bitSameNote,Chn_Type(a5)
0000160C 6600                       		bne.s	@PlayOnly
0000160E 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
00001614 6700                       		beq.s	@NoNote
00001616                            
00001616 426D 0004                  		clr.w	Chn_Portam(a5)
0000161A 1B5C 000B                                  move.b	(a4)+,Chn_Note(a5)
0000161E 066E 0001 0022             		add.w	#1,pattr_read(a6)
00001624                            
00001624                            @PlayOnly:
00001624                            ; 		bsr	SMEG_ChannelRest
00001624                            
00001624                            @NoNote:
00001624                            
00001624                            ; -------------
00001624                            ; Instrument
00001624                            ; -------------
00001624                            
00001624 082D 0005 0006              		btst	#bitSameInst,Chn_Type(a5)
0000162A 6600                       		bne.s	@SameInst
0000162C 082D 0001 0006             		btst	#bitInst,Chn_Type(a5)
00001632 6700                       		beq.s	@NoInst
00001634                            
00001634 1B5C 0008                  		move.b	(a4)+,Chn_Inst(a5)
00001638 066E 0001 0022             		add.w	#1,pattr_read(a6)
0000163E                            
0000163E                            @SameInst:
0000163E 6100 0000                  		bsr	SMEG_SetVoice
00001642                            @NoInst:
00001642                            
00001642                            ; -------------
00001642                            ; Volume
00001642                            ; -------------
00001642                            
00001642 082D 0006 0006              		btst	#bitSameVol,Chn_Type(a5)
00001648 6600                        		bne.s	@SameVol
0000164A 082D 0002 0006             		btst	#bitVolume,Chn_Type(a5)
00001650 6700                       		beq.s	@NoVolume
00001652                            
00001652 7000                       		moveq 	#0,d0
00001654 101C                       		move.b 	(a4)+,d0
00001656 1B40 0009                  		move.b	d0,chn_vol(a5)
0000165A 066E 0001 0022             		add.w 	#1,pattr_read(a6)
00001660                            @NoVolume:
00001660                            @SameVol:
00001660 6100 0000                   		bsr	@ChnVolume
00001664                             		
00001664                            ; -------------
00001664                            ; Effect
00001664                            ; -------------
00001664                            
00001664 082D 0007 0006              		btst	#bitSameEffect,Chn_Type(a5)
0000166A 6600                        		bne.s	@SameEffect
0000166C 082D 0003 0006             		btst	#bitEffect,Chn_Type(a5)
00001672 6700                       		beq.s	@NoEffect
00001674                            
00001674 1B5C 0002                  		move.b	(a4)+,Chn_Effect(a5)
00001678 066E 0001 0022             		add.w	#1,pattr_read(a6)
0000167E 1B5C 0003                  		move.b	(a4)+,Chn_Effect+1(a5)
00001682 066E 0001 0022             		add.w	#1,pattr_read(a6)
00001688                            @SameEffect:
00001688 6100 0000                  		bsr	@ChannelEffects
0000168C                            @NoEffect:
0000168C                            
0000168C                            ; --------------
0000168C                            ; Play the note
0000168C                            ; --------------
0000168C                            
0000168C 082D 0004 0006              		btst	#bitSameNote,Chn_Type(a5)
00001692 6600                        		bne.s	@SameNote
00001694 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
0000169A 6700 FE8A                  		beq	@Next
0000169E                            @SameNote:
0000169E 6100 0000                  		bsr	@ChannelPlay
000016A2 6000 FE82                  		bra	@Next
000016A6                            
000016A6                            ; ================================================================
000016A6                            ; -------------------------------
000016A6                            ; PCM Frequencies
000016A6                            ; -------------------------------
000016A6                            
000016A6                            		
000016A6                            ; ================================================================
000016A6                            ; -------------------------------
000016A6                            ; Set Volume
000016A6                            ; -------------------------------
000016A6                            
000016A6                            @ChnVolume:
000016A6 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
000016AC 6700 0000                  		beq	@Return
000016B0                            
000016B0 0816 0000                  		btst	#bitPriority,(a6)
000016B4 6600                       		bne.s	@SFX_ModeV
000016B6 6100 0000                  		bsr	SMEG_FindPrioSlot
000016BA 4A13                         		tst.b	(a3)
000016BC 6600 0000                    		bne	@Return
000016C0                            @SFX_ModeV:
000016C0                            
000016C0 4A2D 0007                  		tst.b	Chn_ID(a5)
000016C4 6B00 0000                  		bmi	@ChnVol_PSG
000016C8 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
000016CE 6C00 0000                  		bge	@ChnVol_PCM
000016D2                            		
000016D2 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
000016D8 6600                       		bne.s	@NotSmplChk
000016DA 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
000016E0 6600 0000                  		bne	@Return
000016E4                            @NotSmplChk:
000016E4                            
000016E4                            ; -------------------------------
000016E4                            ; FM Volume
000016E4                            ; -------------------------------
000016E4                            
000016E4 6100 0000                  		bsr	ChnlFM_srchIns
000016E8 223C 7F7F 7F7F             		move.l	#$7F7F7F7F,d1
000016EE 0C42 FFFF                  		cmp.w	#-1,d2
000016F2 6700 0000                  		beq	@ForceOff
000016F6 0802 0007                   		btst	#7,d2
000016FA 6600 0000                   		bne	@ForceOff
000016FE                             		
000016FE                            ;  		cmp.b	#64,chn_vol(a5)
000016FE                            ;  		bge	@Return
000016FE                            	
000016FE D6FC 0004                   		adda.w	#4,a3
00001702 2653                       		movea.l	(a3),a3
00001704 D6FC 0015                    		adda	#$15,a3
00001708                            		
00001708 203C 4C44 4840             		move.l	#$4C444840,d0
0000170E 7200                        		moveq	#0,d1
00001710 7400                        		moveq	#0,d2
00001712 7600                        		moveq	#0,d3
00001714 162D 0007                   		move.b	chn_id(a5),d3
00001718 0243 0003                   		and.w	#%11,d3
0000171C                            
0000171C                             		;TODO: checar bien los TL
0000171C 122B 0003                   		move.b	3(a3),d1
00001720 142D 0009                   		move.b	chn_vol(a5),d2
00001724 0402 0040                   		sub.b	#64,d2
00001728 9202                        		sub.b	d2,d1
0000172A E189                        		lsl.l	#8,d1
0000172C                             		
0000172C 122B 0002                   		move.b	2(a3),d1
00001730 142D 0009                   		move.b	chn_vol(a5),d2
00001734 0402 0040                   		sub.b	#64,d2
00001738 9202                        		sub.b	d2,d1
0000173A E189                         		lsl.l	#8,d1
0000173C                              		
0000173C 122B 0001                   		move.b	1(a3),d1
00001740 142D 0009                   		move.b	chn_vol(a5),d2
00001744 0402 0040                   		sub.b	#64,d2
00001748 9202                        		sub.b	d2,d1
0000174A E189                         		lsl.l	#8,d1
0000174C                              		
0000174C 1213                        		move.b	(a3),d1
0000174E 142D 0009                   		move.b	chn_vol(a5),d2
00001752 0402 0040                   		sub.b	#64,d2
00001756 9202                        		sub.b	d2,d1
00001758                            
00001758                            @ForceOff:
00001758 6100 0000                   		bsr	SMEG_Z80_OFF
0000175C                            ;  		or.b	d3,d0
0000175C                            ;  		bsr	SMEG_FM_FindWrite	;oops.
0000175C E088                        		lsr.l	#8,d0
0000175E E089                        		lsr.l	#8,d1
00001760 8003                        		or.b	d3,d0
00001762 6100 0000                    		bsr	SMEG_FM_FindWrite
00001766 E088                        		lsr.l	#8,d0
00001768 E089                        		lsr.l	#8,d1
0000176A                            ;  		or.b	d3,d0
0000176A                            ;   		bsr	SMEG_FM_FindWrite
0000176A E088                        		lsr.l	#8,d0
0000176C E089                        		lsr.l	#8,d1
0000176E 8003                        		or.b	d3,d0
00001770 6100 0000                   		bsr	SMEG_FM_FindWrite
00001774 6000 0000                   		bra	SMEG_Z80_On
00001778                             	
00001778                            ; -------------------------------
00001778                            ; PSG Volume
00001778                            ; -------------------------------
00001778                            
00001778                            @ChnVol_PSG:
00001778 162D 0007                  		move.b	Chn_ID(a5),d3
0000177C 0043 001F                  		or.w	#$1F,d3
00001780 102D 000B                  		move.b	chn_note(a5),d0
00001784 0C00 00FE                  		cmp.b	#-2,d0
00001788 6700 0000                  		beq	ChnPsg_Rest
0000178C 0C00 00FF                  		cmp.b	#-1,d0
00001790 6700 0000                  		beq	ChnPsg_Rest
00001794 6000 0000                  		bra	ChnPsg_SetVol
00001798                            @Return:
00001798 4E75                       		rts
0000179A                            
0000179A                            ; -------------------------------
0000179A                            ; PCM Volume
0000179A                            ; -------------------------------
0000179A                            
0000179A                            @ChnVol_PCM:
0000179A 4E75                       		rts
0000179C                            		
0000179C                            ; ================================================================
0000179C                            ; -------------------------------
0000179C                            ; Channel effect
0000179C                            ; -------------------------------
0000179C                            
0000179C                            @ChannelEffects:
0000179C 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
000017A2 6700 0000                  		beq	@Null
000017A6                            ; 		btst 	#bitPriority,(a6)
000017A6                            ; 		bne.s	@SFX_Eff
000017A6                            ; 		bsr	SMEG_FindPrioSlot
000017A6                            ;   		tst.b	(a3)
000017A6                            ;   		bne	@Return
000017A6                            ; @SFX_Eff:
000017A6                            
000017A6 7000                       		moveq	#0,d0
000017A8 102D 0002                  		move.b	Chn_Effect(a5),d0
000017AC D040                       		add.w	d0,d0
000017AE 323B 0000                  		move.w	@EffectList(pc,d0.w),d1
000017B2 4EFB 1000                  		jmp	@EffectList(pc,d1.w)
000017B6                            		
000017B6                            ; -------------------------------
000017B6                            
000017B6 0000                       @EffectList:	dc.w	@Null-@EffectList
000017B8 0000                       		dc.w	@Flag_A-@EffectList
000017BA 0000                       		dc.w	@Null-@EffectList
000017BC 0000                       		dc.w	@Null-@EffectList
000017BE 0000                       		dc.w	@Flag_D-@EffectList
000017C0 0000                       		dc.w	@Flag_E-@EffectList
000017C2 0000                       		dc.w	@Flag_F-@EffectList
000017C4 0000                       		dc.w	@Null-@EffectList
000017C6 0000                       		dc.w	@Null-@EffectList
000017C8 0000                       		dc.w	@Null-@EffectList
000017CA 0000                       		dc.w	@Null-@EffectList
000017CC 0000                       		dc.w	@Null-@EffectList
000017CE 0000                       		dc.w	@Null-@EffectList
000017D0 0000                       		dc.w	@Flag_M-@EffectList
000017D2 0000                       		dc.w	@Null-@EffectList
000017D4 0000                       		dc.w	@Null-@EffectList
000017D6 0000                       		dc.w	@Null-@EffectList
000017D8 0000                       		dc.w	@Null-@EffectList
000017DA 0000                       		dc.w	@Null-@EffectList
000017DC 0000                       		dc.w	@Null-@EffectList
000017DE 0000                       		dc.w	@Null-@EffectList
000017E0 0000                       		dc.w	@Null-@EffectList
000017E2 0000                       		dc.w	@Null-@EffectList
000017E4 0000                       		dc.w	@Null-@EffectList
000017E6 0000                       		dc.w	@Flag_X-@EffectList
000017E8 0000                       		dc.w	@Null-@EffectList
000017EA 0000                       		dc.w	@Flag_Z-@EffectList
000017EC                            		even
000017EC                            
000017EC                            ; -------------------------------
000017EC                            ; Null effect
000017EC                            ; -------------------------------
000017EC                            
000017EC                            @Null:
000017EC 4E75                       		rts
000017EE                            
000017EE                            ; -------------------------------
000017EE                            ; Flag A - Set Tick rate
000017EE                            ; -------------------------------
000017EE                            
000017EE                            @Flag_A:
000017EE 7000                       		moveq	#0,d0
000017F0 426E 001C                  		clr.w	TicksSet(a6)
000017F4 102D 0003                  		move.b	Chn_Effect+1(a5),d0
000017F8 0440 0001                  		sub.w	#1,d0
000017FC 1D40 001D                  		move.b	d0,TicksSet+1(a6)
00001800 4E75                       		rts
00001802                            
00001802                            ; -------------------------------
00001802                            ; Flag D - Volume slide
00001802                            ; -------------------------------
00001802                            
00001802                            @Flag_D:
00001802 4E75                        rts
00001804                            ; 		moveq	#0,d0
00001804                            ; 		moveq	#0,d1
00001804                            ; 		move.b	Chn_Effect+1(a5),d0
00001804                            ; 		tst.b	Chn_ID(a5)
00001804                            ; 		bpl	@NotPSG
00001804                            ; 		lsl.w	#4,d0
00001804                            ; @NotPSG:
00001804                            ; 		move.b	Chn_Vol(a5),d1
00001804                            ; 		add.b	d0,d1
00001804                            ; 		move.b	d1,Chn_Vol(a5)
00001804                            ; 		bra	@ChnVolume
00001804                            
00001804                            ; -------------------------------
00001804                            ; Flag E - Portametro down
00001804                            ; -------------------------------
00001804                            
00001804                            @Flag_E:
00001804 7000                       		moveq	#0,d0
00001806 102D 0003                  		move.b	Chn_Effect+1(a5),d0
0000180A 0640 0001                  		add.w	#1,d0
0000180E 4440                       		neg.w	d0
00001810 6000                       		bra.s	@DoPortam
00001812                            
00001812                            ; -------------------------------
00001812                            ; Flag F - Portametro up
00001812                            ; -------------------------------
00001812                            
00001812                            @Flag_F:
00001812 7000                       		moveq	#0,d0
00001814 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00001818 0640 0001                  		add.w	#1,d0
0000181C                            		
0000181C                            ; ---------------------
0000181C                            
0000181C                            @DoPortam:
0000181C 382D 0004                  		move.w	Chn_Portam(a5),d4
00001820 4A44                       		tst.w	d4
00001822 6700 FF74                  		beq	@return
00001826                            		
00001826 4A2D 0007                  		tst.b	Chn_ID(a5)
0000182A 6B00                       		bmi.s	@psg_mode
0000182C 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00001832 6C00                       		bge.s	@pcm_mode
00001834                            		
00001834 E548                       		lsl.w	#2,d0
00001836 D840                       		add.w	d0,d4
00001838 3B44 0004                  		move.w	d4,Chn_Portam(a5)
0000183C 6000 0000                  		bra	SMEG_SetFreqFM
00001840                            		
00001840                            @psg_mode:
00001840 D040                       		add.w	d0,d0
00001842 9840                       		sub.w	d0,d4
00001844 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00001848 3004                       		move.w	d4,d0
0000184A 122D 0007                  		move.b	Chn_ID(a5),d1
0000184E 6000 0000                  		bra	ChnPsg_NoteFreq
00001852                            		
00001852                            @pcm_mode:
00001852 4E75                       		rts
00001854                            		
00001854                            ; -------------------------------
00001854                            ; Flag M - Set Channel Volume
00001854                            ; -------------------------------
00001854                            
00001854                            @Flag_M:
00001854 4E75                        rts
00001856                             
00001856                            ; 		moveq	#0,d0
00001856                            ; 		move.b	Chn_Effect+1(a5),d0
00001856                            ; 	;	tst.b	Chn_ID(a5)
00001856                            ; 	;	bpl	@NotPSG_H
00001856                            ; 
00001856                            ; 		neg.w	d0
00001856                            ; 		sub.w	#$D0,d0
00001856                            ; ;@NotPSG_H:
00001856                            ; 		move.b	d0,Chn_MainVol(a5)
00001856                            ; 		bra	@ChnVolume
00001856                            
00001856                            ; -------------------------------
00001856                            ; Flag X - Stereo
00001856                            ; -------------------------------
00001856                            
00001856                            @Flag_X:
00001856                            ; 		tst.b	Chn_ID(a5)
00001856                            ; 		bmi	@Null
00001856                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
00001856                            ; 		bge	@PCM_Pan
00001856                            		
00001856 1B6D 0003 000C             		move.b	Chn_Effect+1(a5),Chn_Pan(a5)
0000185C 4E75                       		rts
0000185E                            		
0000185E                            ; 		moveq	#0,d0
0000185E                            ; 		move.w	#$C0,d0
0000185E                            ;                 cmp.b	#$80,Chn_Effect+1(a5)
0000185E                            ;                 beq.s	@SetPan
0000185E                            ; 		tst.b	Chn_Effect+1(a5)
0000185E                            ; 		bmi.s	@Right
0000185E                            ; 		bpl.s	@Left
0000185E                            ; @SetPan:
0000185E                            ; 		move.b	d0,Chn_Pan(a5)
0000185E                            ; 		rts
0000185E                            ; @Left:
0000185E                            ; 		move.w	#$80,d0
0000185E                            ; 		bra.s	@SetPan
0000185E                            ; @Right:
0000185E                            ; 		move.w	#$40,d0
0000185E                            ; 		bra.s	@SetPan
0000185E                            
0000185E                            ; ; -------------------------------
0000185E                            ; ; PCM Panning
0000185E                            ; ; -------------------------------
0000185E                            ; 
0000185E                            ; @PCM_Pan:
0000185E                            ; 		if MCD
0000185E                            ; 		
0000185E                            ; 		moveq	#0,d0
0000185E                            ; 		move.b	#%11001100,d0				;TODO: dejarlo así
0000185E                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
0000185E                            ; 		beq.s	@Return2
0000185E                            ;                  
0000185E                            ;  		tst.b	Chn_Effect+1(a5)
0000185E                            ;  		bmi.s	@Right2
0000185E                            ; 		bpl.s	@Left2
0000185E                            ; 		bra	@Return2
0000185E                            ; @Right2:
0000185E                            ;  		move.b	#%10000000,d0
0000185E                            ;  		bra	@Return2
0000185E                            ; @Left2:
0000185E                            ; 		move.b	#%00001000,d0
0000185E                            ; @Return2:
0000185E                            ; 		move.b	d0,Chn_Pan(a5)
0000185E                            ; 
0000185E                            ; ; -------------------------------------------------
0000185E                            ; 
0000185E                            ;  		elseif MARS
0000185E                            ;  
0000185E                            ; 		move.w	#%11000000,d0
0000185E                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
0000185E                            ; 		beq	@Cont
0000185E                            ;  		tst.b	Chn_Effect+1(a5)
0000185E                            ;  		bmi.s	@pwmRight
0000185E                            ; 		bpl.s	@pwmLeft
0000185E                            ; 		bra	@Cont
0000185E                            ;  		
0000185E                            ; @pwmRight:
0000185E                            ;  		move.w	#%01000000,d0
0000185E                            ;  		bra.s	@Cont
0000185E                            ; @pwmLeft:
0000185E                            ; 		move.w	#%10000000,d0
0000185E                            ; 
0000185E                            ; @Cont:
0000185E                            ; 		move.b	d0,Chn_Pan(a5)   		
0000185E                            ; 		endif
0000185E                            ; 		rts
0000185E                            
0000185E                            ; ======================================================
0000185E                            ; -------------------------------
0000185E                            ; Flag Z
0000185E                            ; -------------------------------
0000185E                            
0000185E                            @Flag_Z:
0000185E 7000                       		moveq	#0,d0
00001860 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00001864 E848                       		lsr.w	#4,d0
00001866 D040                       		add.w	d0,d0
00001868 323B 0000                  		move.w	@HashList(pc,d0.w),d1
0000186C 102D 0003                  		move.b	Chn_Effect+1(a5),d0		;d0 - $0-$F argument
00001870 0200 000F                  		and.b	#$F,d0
00001874 4EFB 1000                  		jmp	@HashList(pc,d1.w)
00001878                            
00001878 FF74                       @HashList:	dc.w	@Null-@HashList		;$00
0000187A 0000                       		dc.w	@FM_Key-@HashList		;$10 - FM Keys ON/OFF
0000187C FF74                       		dc.w	@Null-@HashList			;$20
0000187E FF74                       		dc.w	@Null-@HashList			;$30
00001880 0000                       		dc.w	@PSG-@HashList			;$40 - PSG Settings
00001882 FF74                       		dc.w	@Null-@HashList			;$50
00001884 FF74                       		dc.w	@Null-@HashList			;$60
00001886 FF74                       		dc.w	@Null-@HashList			;$70
00001888 FF74                       		dc.w	@Null-@HashList			;$80
0000188A FF74                       		dc.w	@Null-@HashList			;$90
0000188C FF74                       		dc.w	@Null-@HashList			;$A0
0000188E FF74                       		dc.w	@Null-@HashList			;$B0
00001890 FF74                       		dc.w	@Null-@HashList			;$C0
00001892 FF74                       		dc.w	@Null-@HashList			;$D0
00001894 FF74                       		dc.w	@Null-@HashList			;$E0
00001896 0000                       		dc.w	@FixSfx-@HashList		;$F0 - Finish SFX flag (SFX only)
00001898                            		even
00001898                            
00001898                            ; -------------------------------
00001898                            
00001898                            @DacStatus:
00001898 4E75                        rts
0000189A                            
0000189A                            ; -------------------------------
0000189A                            
0000189A                            @FM_Key:
0000189A 0240 000F                  		and.w	#$F,d0
0000189E E948                       		lsl.w	#4,d0
000018A0 1B40 000D                  		move.b	d0,Chn_FM_Key(a5)
000018A4 4E75                       		rts
000018A6                            
000018A6                            ; -------------------------------
000018A6                            
000018A6                            @PSG:
000018A6 4E75                        rts
000018A8                            
000018A8                            ; -------------------------------
000018A8                            
000018A8                            @FixSfx:
000018A8                            ;    		btst	#bitPriority,(a6)
000018A8                            ;   		bne	@Return
000018A8                            		
000018A8                            ;  		lea	(RAM_SMEG_Buffer),a3
000018A8                            ;  		move.b	snd_flagsBGM(a3),snd_flags(a3)
000018A8                            ; 		moveq 	#0,d0
000018A8                            ;  		move.b	PsgLast(a3),d0
000018A8                            ; 		add.w	#$E0,d0
000018A8                            ; 		bsr	@PutPSG
000018A8                            
000018A8                            ;  		moveq	#0,d0
000018A8                            ;  		move.b	LastPattChn(a6),d0
000018A8                            ; 		bsr	SMEG_FindPrioSlot
000018A8                            ;   		bclr	#0,(a3)
000018A8                             		
000018A8                            ;   		bclr	#bitSfxOn,(a6)				;SFX finished playing
000018A8 4E75                       		rts
000018AA                            		
000018AA                            ; ================================================================
000018AA                            ; -------------------------------
000018AA                            ; Channel play
000018AA                            ; -------------------------------
000018AA                            
000018AA                            @ChannelPlay:	
000018AA 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
000018B0 6700 0000                  		beq	@Disabled
000018B4                            		
000018B4                            ;                 moveq	#0,d0
000018B4                            ; 		move.b	Chn_Note(a5),d0
000018B4                            ; 		sub.w	#1,Chn_Portam(a5)
000018B4                            ; 		tst.b	Chn_Portam(a5)
000018B4                            ; 		beq.s	@NoUp
000018B4                            ; 		add.b	Chn_Portam(a5),d0
000018B4                            ; 		bra.s	@NoDown
000018B4                            ; @NoUp:
000018B4                            ; 		tst.b	Chn_Portam+1(a5)
000018B4                            ; 		beq.s	@NoDown
000018B4                            ; 		sub.b	Chn_Portam+1(a5),d0
000018B4                            ; @NoDown:
000018B4                            
000018B4                            ; --------------------------------
000018B4                            
000018B4                            ; BGM: Block channel
000018B4                            
000018B4 0816 0000                  		btst 	#bitPriority,(a6)
000018B8 6600                       		bne.s	@SFX_Check
000018BA 6100 0000                  		bsr	SMEG_FindPrioSlot
000018BE 4A13                         		tst.b	(a3)
000018C0 6600 FED6                    		bne	@Return
000018C4                              		
000018C4                            ; --------------------------------
000018C4                            
000018C4                            ; SFX: Check NoteOff/NoteCut
000018C4                            ; then clear flag
000018C4                            
000018C4                            @SFX_Check:
000018C4 0816 0000                  		btst 	#bitPriority,(a6)
000018C8 6700                       		beq.s	@NotSFX
000018CA                            ; 		cmp.b	#-1,chn_note(a5)
000018CA                            ; 		beq	@DoIt
000018CA 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
000018D0 6600 0000                  		bne	@NotSFX
000018D4                            @DoIt:
000018D4 6100 0000                  		bsr	SMEG_FindPrioSlot
000018D8 4213                         		clr.b	(a3)
000018DA                            @NotSFX:
000018DA                            
000018DA                            ; --------------------------------
000018DA                            
000018DA 4A2D 0007                  		tst.b	Chn_ID(a5)
000018DE 6B00 0000                  		bmi	Chnl_PSG
000018E2 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
000018E8 6C00 0000                  		bge	@ChannelPlay_PCM
000018EC 0C2D 0002 0007             		cmp.b	#FM_3,Chn_ID(a5)
000018F2 6700 0000                  		beq	@Chn3_ChkSpecial
000018F6 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
000018FC 6700 0000                  		beq	@Chn6_ChkSmpl
00001900 6000 0000                  		bra	@ChnPlay_FM
00001904                            		
00001904                            ; -------------------------------
00001904                            ; Play FM6 or DAC sample
00001904                            ; -------------------------------
00001904                            
00001904                            @Chn6_ChkSmpl:
00001904 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
0000190A 6700 0000                  		beq	@ChnPlay_FM6
0000190E 0C2D 00FF 000B             		cmp.b	#-1,chn_note(a5)
00001914 6700 0000                  		beq	@StopSmpl
00001918 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
0000191E 6700 0000                  		beq	@StopSmpl
00001922                            		
00001922 7028                       		moveq	#$28,d0
00001924 7206                       		moveq	#6,d1
00001926 6100 0000                   		bsr	SMEG_Z80_Off
0000192A 6100 0000                  		bsr	FM_RegWrite_1
0000192E 6100 0000                  		bsr	SMEG_FM_SetPan
00001932 6100 0000                  		bsr	SMEG_Z80_On
00001936                            		
00001936                            ; 		btst 	#bitPriority,(a6)
00001936                            ; 		beq.s	@MusicPrio3
00001936                            ; 		bsr	SMEG_FindPrioSlot
00001936                            ;   		btst	#0,(a3)
00001936                            ;   		bne	@return
00001936                            ; @MusicPrio3:
00001936 6000 0000                  		bra	Audio_Sample_Play
0000193A                            
0000193A                            ; Stop
0000193A                            
0000193A                            @StopSmpl:
0000193A                            ; 		btst 	#bitPriority,(a6)
0000193A                            ; 		bne.s	@NotSfxDAC
0000193A                            ; 		bsr	SMEG_FindPrioSlot
0000193A                            ;   		bclr	#0,(a3)
0000193A                            ; @NotSfxDAC:
0000193A 6000 0000                  		bra	Audio_Sample_Stop
0000193E                            		
0000193E                            ; -------------------------------
0000193E                            ; Play FM6 Normally
0000193E                            ; -------------------------------
0000193E                            
0000193E                            @ChnPlay_FM6:
0000193E 103C 002B                  		move.b	#$2B,d0
00001942 123C 0000                  		move.b	#$00,d1
00001946 6100 0000                  		bsr	SMEG_Z80_Off
0000194A 6100 0000                  		bsr	FM_RegWrite_1
0000194E 6100 0000                  		bsr	SMEG_Z80_On
00001952 6100 0000                  		bsr	Audio_Sample_Stop
00001956 6000 0000                  		bra	@ChnPlay_FM
0000195A                            		
0000195A                            ; -------------------------------
0000195A                            ; Play FM3 Normally
0000195A                            ; -------------------------------
0000195A                            
0000195A                            @Chn3_ChkSpecial:
0000195A 6100 0000                  		bsr	SMEG_Z80_Off
0000195E 6100 0000                  		bsr	SMEG_FM_SetPan
00001962 6100 0000                  		bsr	SMEG_Z80_On
00001966                            		
00001966 082E 0003 0001             		btst	#bitSpecial3,snd_flags(a6)
0000196C 6700 0000                  		beq	@NoSpecial3
00001970                            		
00001970 6100 0000                  		bsr	ChnlFM_srchIns
00001974 0C42 FFFF                  		cmp.w	#-1,d2
00001978 6700 0000                  		beq	@NoSpecial3
0000197C 0802 0006                   		btst	#6,d2
00001980 6700 0000                   		beq	@NoSpecial3
00001984                            		
00001984                            ;   		moveq	#$22,d0
00001984                            ;  		move.w	#%00001011,d1
00001984                            ; 		bsr	FM_RegWrite_1
00001984                            		
00001984 7027                         		moveq	#$27,d0		;CH3 enable
00001986 323C 0040                   		move.w	#%01000000,d1
0000198A 6100 0000                   		bsr	SMEG_Z80_Off
0000198E 6100 0000                  		bsr	FM_RegWrite_1
00001992 6100 0000                  		bsr	SMEG_Z80_On
00001996                            		
00001996 203C A9AD AAAE              		move.l	#$A9ADAAAE,d0
0000199C 322B 000E                   		move.w	$E(a3),d1
000019A0 E059                        		ror.w	#8,d1
000019A2 6100 0000                   		bsr	SMEG_Z80_Off
000019A6 6100 0000                  		bsr	FM_RegWrite_1
000019AA E088                       		lsr.l	#8,d0
000019AC E089                       		lsr.l	#8,d1
000019AE 6100 0000                  		bsr	FM_RegWrite_1
000019B2 E088                       		lsr.l	#8,d0
000019B4 322B 000C                   		move.w	$C(a3),d1
000019B8 E059                        		ror.w	#8,d1
000019BA 6100 0000                  		bsr	FM_RegWrite_1
000019BE E088                       		lsr.l	#8,d0
000019C0 E089                       		lsr.l	#8,d1
000019C2 6100 0000                  		bsr	FM_RegWrite_1	
000019C6 6100 0000                    		bsr	SMEG_Z80_On
000019CA                              		
000019CA 203C A2A6 A8AC              		move.l	#$A2A6A8AC,d0
000019D0 322B 000A                   		move.w	$A(a3),d1
000019D4 E059                        		ror.w	#8,d1
000019D6 6100 0000                   		bsr	SMEG_Z80_Off
000019DA 6100 0000                  		bsr	FM_RegWrite_1
000019DE E088                       		lsr.l	#8,d0
000019E0 E089                       		lsr.l	#8,d1
000019E2 6100 0000                  		bsr	FM_RegWrite_1
000019E6 E088                       		lsr.l	#8,d0
000019E8 322B 0008                   		move.w	8(a3),d1
000019EC E059                        		ror.w	#8,d1
000019EE 6100 0000                  		bsr	FM_RegWrite_1
000019F2 E088                       		lsr.l	#8,d0
000019F4 E089                       		lsr.l	#8,d1
000019F6 6100 0000                  		bsr	FM_RegWrite_1
000019FA 6100 0000                  		bsr	SMEG_Z80_On
000019FE                            		
000019FE 7028                       		moveq	#$28,d0
00001A00 7200                       		moveq	#0,d1
00001A02 122D 000D                  		move.b	Chn_FM_Key(a5),d1
00001A06 822D 0007                  		or.b	Chn_ID(a5),d1
00001A0A 6100 0000                  		bsr	SMEG_Z80_Off
00001A0E 6100 0000                  		bsr	FM_RegWrite_1
00001A12 6000 0000                   		bra	SMEG_Z80_On
00001A16                             		
00001A16                            @NoSpecial3:
00001A16 7200                       		moveq	#0,d1
00001A18 7027                         		moveq	#$27,d0
00001A1A 6100 0000                   		bsr	SMEG_Z80_Off
00001A1E 6100 0000                  		bsr	FM_RegWrite_1
00001A22 6100 0000                   		bsr	SMEG_Z80_On
00001A26                            		
00001A26                            ; -------------------------------
00001A26                            ; Play FM1-FM5 normally
00001A26                            ; -------------------------------
00001A26                            
00001A26                            @ChnPlay_FM:
00001A26 6100 0000                  		bsr	SMEG_Z80_Off
00001A2A 6100 0000                  		bsr	SMEG_FM_SetPan
00001A2E 6100 0000                  		bsr	SMEG_Z80_On
00001A32                            		
00001A32 7000                        		moveq	#0,d0
00001A34 102D 000B                  		move.b	chn_note(a5),d0
00001A38 0C00 00FF                  		cmp.b	#-1,d0
00001A3C 6700 0000                  		beq	SMEG_FM_KeysOff
00001A40 0C00 00FE                  		cmp.b	#-2,d0
00001A44 6700 0000                  		beq	SMEG_FM_TotLvlOff
00001A48                            		
00001A48 6100 0000                  		bsr	SMEG_FM_KeysOff
00001A4C                            		
00001A4C 7000                       		moveq	#0,d0
00001A4E 7200                       		moveq	#0,d1
00001A50 102D 000B                  		move.b	chn_note(a5),d0
00001A54 D040                       		add.w	d0,d0
00001A56 45F9 0000 0000              		lea	(FreqList_FM),a2
00001A5C 3832 0000                  		move.w	(a2,d0.w),d4
00001A60 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00001A64 6000 0000                  		bra	SMEG_SetFreqFM
00001A68                            @Disabled:
00001A68 4E75                       		rts
00001A6A                            
00001A6A                            ; -------------------------------
00001A6A                            ; Play PCM
00001A6A                            ; -------------------------------
00001A6A                            
00001A6A                            @ChannelPlay_PCM:	
00001A6A                            ; 		if MCD
00001A6A                            ; 		
00001A6A                            ; 		tst.l	SongPcmSamp(a6)
00001A6A                            ; 		beq.s	@ReturnPCM
00001A6A                            ; 		bmi.s	@ReturnPCM
00001A6A                            ; 		
00001A6A                            ;  		moveq	#0,d1
00001A6A                            ;  		move.b	Chn_ID(a5),d1
00001A6A                            ;    		and.w	#$F,d1
00001A6A                            ;  		move.b	d1,($A12000+CommDataM)
00001A6A                            ;  		move.b	Chn_Pan(a5),d1
00001A6A                            ;  		move.b	d1,($A12000+CommDataM+1)
00001A6A                            ;  		moveq	#CdTask_SetPan,d0
00001A6A                            ;  		bsr	SMEG_CD_Call
00001A6A                            ;  		
00001A6A                            ; 		moveq	#0,d1
00001A6A                            ; 		move.b	Chn_ID(a5),d1
00001A6A                            ; 		and.b	#$F,d1
00001A6A                            ; 		move.b	d1,($A12000+CommDataM)
00001A6A                            ; 		move.w	Chn_Freq(a5),($A12000+CommDataM+2)
00001A6A                            ; 		moveq	#CdTask_SetFreq,d0
00001A6A                            ; 		bsr	SMEG_CD_Call
00001A6A                            ; 		bset	d1,PcmChnOnOff(a6)
00001A6A                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
00001A6A                            ; 		moveq	#CdTask_SetOnOff,d0
00001A6A                            ; 		bsr	SMEG_CD_Call
00001A6A                            ; 		
00001A6A                            ; @ReturnPCM:
00001A6A                            ;  		elseif MARS
00001A6A                            ; 
00001A6A                            ; 		tst.l	SongPcmSamp(a6)
00001A6A                            ; 		beq.s	@ReturnPCM
00001A6A                            ; 		bmi.s	@ReturnPCM
00001A6A                            ; 		
00001A6A                            ;   		moveq	#0,d1
00001A6A                            ;   		moveq	#0,d2
00001A6A                            ;        		move.b	Chn_ID(a5),d1
00001A6A                            ;      		and.w	#$F,d1
00001A6A                            ;       		or.b	Chn_Pan(a5),d1
00001A6A                            ;       		move.b	Chn_Note(a5),d2
00001A6A                            ;   		move.b	d1,(marsreg+comm2)			; Pan+Channel set
00001A6A                            ;   		move.b	d2,(marsreg+comm2+1)			; Note
00001A6A                            ;   		moveq 	#marscall_Play,d0
00001A6A                            ;   		bsr	SMEG_MARS_Call
00001A6A                            ; @ReturnPCM:
00001A6A                            ;  		endif
00001A6A                             		
00001A6A 4E75                       		rts
00001A6C                            
00001A6C                            ; --------------------------
00001A6C                            ; Set FM Frequency
00001A6C                            ; autodetected channel
00001A6C                            ; 
00001A6C                            ; d4 - Freq
00001A6C                            ; --------------------------
00001A6C                            
00001A6C                            SMEG_SetFreqFM:
00001A6C 7A00                       		moveq	#0,d5
00001A6E 1A2D 0007                  		move.b	Chn_ID(a5),d5
00001A72 0C05 0004                  		cmp.b	#4,d5
00001A76 6D00                       		blt.s	@FirstFM
00001A78 0405 0004                  		sub.b	#4,d5
00001A7C                            @FirstFM:
00001A7C 303C 00A4                  		move.w	#$A4,d0
00001A80 D005                       		add.b	d5,d0
00001A82 7200                       		moveq	#0,d1
00001A84 E15C                       		rol.w	#8,d4
00001A86 1204                       		move.b	d4,d1
00001A88                            		
00001A88 6100 0000                  		bsr	SMEG_Z80_Off
00001A8C 6100 0000                  		bsr	SMEG_FM_FindWrite
00001A90 303C 00A0                  		move.w	#$A0,d0
00001A94 D005                       		add.b	d5,d0
00001A96 7200                       		moveq	#0,d1
00001A98 E15C                       		rol.w	#8,d4
00001A9A 1204                       		move.b	d4,d1
00001A9C 6100 0000                  		bsr	SMEG_FM_FindWrite
00001AA0                            
00001AA0 7028                       		moveq	#$28,d0
00001AA2 7200                       		moveq	#0,d1
00001AA4 122D 000D                  		move.b	Chn_FM_Key(a5),d1
00001AA8 822D 0007                  		or.b	Chn_ID(a5),d1
00001AAC 6100 0000                  		bsr	FM_RegWrite_1
00001AB0 6000 0000                  		bra	SMEG_Z80_On
00001AB4                            		
00001AB4                            ; Turn Total Level (the volume) off 
00001AB4                            
00001AB4                            SMEG_FM_TotLvlOff:
00001AB4 162D 0007                   		move.b	chn_id(a5),d3
00001AB8 0243 0003                   		and.w	#%11,d3
00001ABC 203C 4C44 4840             		move.l	#$4C444840,d0
00001AC2 323C 007F                  		move.w	#$7F,d1
00001AC6 6100 0000                   		bsr	SMEG_Z80_OFF
00001ACA 8003                        		or.b	d3,d0
00001ACC 6100 0000                   		bsr	SMEG_FM_FindWrite	;oops.
00001AD0 E088                        		lsr.l	#8,d0
00001AD2 8003                        		or.b	d3,d0
00001AD4 6100 0000                    		bsr	SMEG_FM_FindWrite
00001AD8 E088                        		lsr.l	#8,d0
00001ADA 8003                        		or.b	d3,d0
00001ADC 6100 0000                    		bsr	SMEG_FM_FindWrite
00001AE0 E088                        		lsr.l	#8,d0
00001AE2 8003                        		or.b	d3,d0
00001AE4 6100 0000                   		bsr	SMEG_FM_FindWrite
00001AE8 6100 0000                   		bsr	SMEG_Z80_On
00001AEC                             		
00001AEC                            ; Turn FM Keys off
00001AEC                            
00001AEC                            SMEG_FM_KeysOff:
00001AEC 7028                       		moveq	#$28,d0
00001AEE 7200                       		moveq	#0,d1
00001AF0 D22D 0007                  		add.b	Chn_ID(a5),d1
00001AF4 6100 0000                   		bsr	SMEG_Z80_Off
00001AF8 6100 0000                  		bsr	FM_RegWrite_1
00001AFC 6000 0000                  		bra	SMEG_Z80_On
00001B00                            		
00001B00                            ; ----------------------------
00001B00                            ; PSG Channels
00001B00                            ; ----------------------------
00001B00                            
00001B00                            Chnl_PSG:
00001B00 122D 0007                  		move.b	Chn_ID(a5),d1
00001B04 0C2D 00E0 0007             		cmp.b	#NOISE,Chn_ID(a5)
00001B0A 6700                       		beq.s	Chnl_Noise
00001B0C                            
00001B0C 3601                       		move.w	d1,d3
00001B0E 0043 001F                  		or.w	#$1F,d3
00001B12 102D 000B                  		move.b	chn_note(a5),d0
00001B16 0C00 00FE                  		cmp.b	#-2,d0
00001B1A 6700                       		beq.s	ChnPsg_Rest
00001B1C 0C00 00FF                  		cmp.b	#-1,d0
00001B20 6700                       		beq.s	ChnPsg_Rest
00001B22                            		
00001B22 45F9 0000 0000             		lea	(FreqList_PSG),a2
00001B28 D040                       		add.w	d0,d0
00001B2A 3032 0000                  		move.w	(a2,d0.w),d0
00001B2E 3B40 0004                  		move.w	d0,Chn_Portam(a5)
00001B32 6100 0000                  		bsr	ChnPsg_NoteFreq
00001B36                            		
00001B36                            ChnPsg_SetVol:
00001B36 0043 0010                  		or.w	#$10,d3
00001B3A 0043 000F                  		or.w	#$F,d3
00001B3E 4A2D 0009                  		tst.b	chn_vol(a5)
00001B42 6700                       		beq.s	ChnPsg_DoVol
00001B44 0243 00F0                  		and.w	#$F0,d3
00001B48 0C2D 0040 0009             		cmp.b	#64,chn_vol(a5)
00001B4E 6C00                         		bge.s	ChnPsg_DoVol
00001B50 7000                         		moveq	#0,d0
00001B52 102D 0009                     		move.b	chn_vol(a5),d0
00001B56 4440                        		neg.w	d0
00001B58 E448                          		lsr.w	#2,d0
00001B5A 0240 000F                    		and.w	#%1111,d0
00001B5E 8640                         		or.w	d0,d3
00001B60                            
00001B60                            
00001B60                            ChnPsg_DoVol:
00001B60 13C3 00C0 0011              		move.b	d3,(sound_psg)
00001B66                            Chnl_Return:
00001B66 4E75                       		rts
00001B68                            		
00001B68                            ChnPsg_Rest:
00001B68 61F6                        		bsr.s	ChnPsg_DoVol
00001B6A                            ; 		btst 	#bitPriority,(a6)
00001B6A                            ; 		bne.s	Chnl_Return
00001B6A                            ; 		bsr	SMEG_FindPrioSlot
00001B6A                            ;   		bclr	#0,(a3)
00001B6A 4E75                         		rts
00001B6C                              		
00001B6C                            ; ----------------------------
00001B6C                            ; PSG Noise channel
00001B6C                            ; ----------------------------
00001B6C                            
00001B6C                            Chnl_NOISE:
00001B6C 246E 0010                  		movea.l	snd_instr(a6),a2
00001B70 302A 0004                  		move.w	instDNoise(a2),d0
00001B74 D4C0                       		adda	d0,a2
00001B76                            		
00001B76 303C 0000                   		move.w	#%000,d0
00001B7A                            @next:
00001B7A 4A52                       		tst.w	(a2)
00001B7C 6B00                       		bmi.s	@default
00001B7E 7400                       		moveq	#0,d2
00001B80 142D 0008                  		move.b	chn_inst(a5),d2
00001B84 B452                       		cmp.w	(a2),d2
00001B86 6700                       		beq.s	@found
00001B88 D4FC 0004                  		adda	#4,a2
00001B8C 60EC                       		bra.s	@next
00001B8E                            @found:
00001B8E 302A 0002                   		move.w	2(a2),d0
00001B92                            
00001B92                            @default:
00001B92 323C 00E0                  		move.w	#$E0,d1
00001B96 3601                       		move.w	d1,d3
00001B98 0043 001F                  		or.w	#$1F,d3
00001B9C                            
00001B9C 142D 000B                  		move.b	chn_note(a5),d2
00001BA0 0C02 00FF                  		cmp.b	#-1,d2
00001BA4 67C2                       		beq.s	ChnPsg_Rest
00001BA6 0C02 00FE                  		cmp.b	#-2,d2
00001BAA 67BC                       		beq.s	ChnPsg_Rest
00001BAC                            		
00001BAC 08AE 0002 0001             		bclr	#bitTone3,snd_flags(a6)
00001BB2 0C40 0003                  		cmp.w	#%011,d0
00001BB6 6700                       		beq.s	@valdnoise
00001BB8 0C40 0007                  		cmp.w	#%111,d0
00001BBC 6600                       		bne.s	@deftone
00001BBE                            @valdnoise:
00001BBE 08EE 0002 0001             		bset	#bitTone3,snd_flags(a6)
00001BC4 13FC 00DF 00C0 0011        		move.b	#$C0|$1F,(sound_psg)
00001BCC 8240                       		or.w	d0,d1
00001BCE 13C1 00C0 0011             		move.b	d1,(sound_psg)
00001BD4                            		
00001BD4 102D 000B                  		move.b	chn_note(a5),d0
00001BD8 0C00 00FF                  		cmp.b	#-1,d0
00001BDC 6700 FF8A                  		beq	ChnPsg_Rest
00001BE0 0C00 00FE                  		cmp.b	#-2,d0
00001BE4 6700 FF82                  		beq	ChnPsg_Rest
00001BE8 0640 000C                  		add.w	#12,d0		; TODO: checar
00001BEC 323C 00C0                  		move.w	#$C0,d1		; PSG3 freq
00001BF0                            		
00001BF0 45F9 0000 0000             		lea	(FreqList_PSG),a2
00001BF6 D040                       		add.w	d0,d0
00001BF8 3032 0000                  		move.w	(a2,d0.w),d0
00001BFC 3B40 0004                  		move.w	d0,Chn_Portam(a5)
00001C00 6000 0000                  		bra	ChnPsg_NoteFreq
00001C04                            		
00001C04                            ; 		move.w	#$E0,d3		; NOISE volume
00001C04                            ; 		bra	ChnPsg_SetVol
00001C04                            		
00001C04                            @deftone:
00001C04 3601                       		move.w	d1,d3
00001C06 3400                       		move.w	d0,d2
00001C08 0242 0007                  		and.w	#%111,d2
00001C0C 8242                       		or.w	d2,d1
00001C0E 13C1 00C0 0011             		move.b	d1,(sound_psg)
00001C14 4E75                       		rts
00001C16                            		
00001C16                            ; 		move.w	#$E0,d3
00001C16                            ; 		bra	ChnPsg_SetVol
00001C16                            		
00001C16                            ; ----------------------------
00001C16                            ; PSG Noise channel Tone 3
00001C16                            ; 
00001C16                            ; input:
00001C16                            ; d0 - freq
00001C16                            ; d1 - channel
00001C16                            ; 
00001C16                            ; returns:
00001C16                            ; d3 - last psg freq | channel
00001C16                            ; ----------------------------
00001C16                            
00001C16                            ChnPsg_NoteFreq:
00001C16 3601                       		move.w	d1,d3
00001C18 3400                       		move.w	d0,d2
00001C1A 0242 000F                  		and.w	#%1111,d2
00001C1E 8242                       		or.w	d2,d1
00001C20 13C1 00C0 0011             		move.b	d1,(sound_psg)
00001C26 E848                       		lsr.w	#4,d0
00001C28 0240 003F                  		and.w	#%00111111,d0
00001C2C 13C0 00C0 0011             		move.b	d0,(sound_psg)
00001C32 4E75                       		rts
00001C34                            
00001C34                            ; -------------------------------
00001C34                            ; PSG Frequencies
00001C34                            ; -------------------------------
00001C34                            
00001C34                            FreqList_PSG:
00001C34 0000                       		dc.w 0		;C-0 $0
00001C36 0000                       		dc.w 0
00001C38 0000                       		dc.w 0
00001C3A 0000                       		dc.w 0
00001C3C 0000                       		dc.w 0
00001C3E 0000                       		dc.w 0
00001C40 0000                       		dc.w 0
00001C42 0000                       		dc.w 0
00001C44 0000                       		dc.w 0
00001C46 0000                       		dc.w 0
00001C48 0000                       		dc.w 0
00001C4A 0000                       		dc.w 0
00001C4C                            		
00001C4C 0000                       		dc.w 0		;C-1 $C
00001C4E 0000                       		dc.w 0
00001C50 0000                       		dc.w 0
00001C52 0000                       		dc.w 0
00001C54 0000                       		dc.w 0
00001C56 0000                       		dc.w 0
00001C58 0000                       		dc.w 0
00001C5A 0000                       		dc.w 0
00001C5C 0000                       		dc.w 0
00001C5E 0000                       		dc.w 0
00001C60 0000                       		dc.w 0
00001C62 0000                       		dc.w 0
00001C64                            		
00001C64 0000                       		dc.w 0		;C-2 $18
00001C66 0000                       		dc.w 0
00001C68 0000                       		dc.w 0
00001C6A 0000                       		dc.w 0
00001C6C 0000                       		dc.w 0
00001C6E 0000                       		dc.w 0
00001C70 0000                       		dc.w 0
00001C72 0000                       		dc.w 0
00001C74 0000                       		dc.w 0
00001C76 0000                       		dc.w 0
00001C78 0000                       		dc.w 0
00001C7A 0000                       		dc.w 0
00001C7C                            
00001C7C 0000                       		dc.w 0		;C-3 $24
00001C7E 0000                       		dc.w 0
00001C80 0000                       		dc.w 0
00001C82 0000                       		dc.w 0
00001C84 0000                       		dc.w 0
00001C86 0000                       		dc.w 0
00001C88 0000                       		dc.w 0
00001C8A 0000                       		dc.w 0
00001C8C 0000                       		dc.w 0
00001C8E 03F8                       		dc.w $3F8
00001C90 03BF                                       dc.w $3BF
00001C92 0389                                       dc.w $389
00001C94                                            
00001C94 0356                       		dc.w $356	;C-4 $30
00001C96 0326                                       dc.w $326
00001C98 02F9                                       dc.w $2F9
00001C9A 02CE                                       dc.w $2CE
00001C9C 02A5                                       dc.w $2A5
00001C9E 0280                                       dc.w $280
00001CA0 025C                                       dc.w $25C
00001CA2 023A                                       dc.w $23A
00001CA4 021A                                       dc.w $21A
00001CA6 01FB                       		dc.w $1FB
00001CA8 01DF                                       dc.w $1DF
00001CAA 01C4                                       dc.w $1C4
00001CAC                                            
00001CAC 01AB                                       dc.w $1AB	;C-5 $3C
00001CAE 0193                                       dc.w $193
00001CB0 017D                                       dc.w $17D
00001CB2 0167                                       dc.w $167
00001CB4 0153                                       dc.w $153
00001CB6 0140                                       dc.w $140
00001CB8 012E                       		dc.w $12E
00001CBA 011D                                       dc.w $11D
00001CBC 010D                                       dc.w $10D
00001CBE 00FE                                       dc.w $FE
00001CC0 00EF                                       dc.w $EF
00001CC2 00E2                                       dc.w $E2
00001CC4                                            
00001CC4 00D6                                       dc.w $D6	;C-6 $48
00001CC6 00C9                                       dc.w $C9
00001CC8 00BE                                       dc.w $BE
00001CCA 00B4                                       dc.w $B4
00001CCC 00A9                       		dc.w $A9
00001CCE 00A0                                       dc.w $A0
00001CD0 0097                                       dc.w $97
00001CD2 008F                                       dc.w $8F
00001CD4 0087                                       dc.w $87
00001CD6 007F                                       dc.w $7F
00001CD8 0078                                       dc.w $78
00001CDA 0071                                       dc.w $71
00001CDC                                            
00001CDC 006B                                       dc.w $6B	;C-7 $54
00001CDE 0065                                       dc.w $65
00001CE0 005F                       		dc.w $5F
00001CE2 005A                                       dc.w $5A
00001CE4 0055                                       dc.w $55
00001CE6 0050                                       dc.w $50
00001CE8 004B                                       dc.w $4B
00001CEA 0047                                       dc.w $47
00001CEC 0043                                       dc.w $43
00001CEE 0040                                       dc.w $40
00001CF0 003C                                       dc.w $3C
00001CF2 0039                                       dc.w $39
00001CF4                                            
00001CF4 0036                       		dc.w $36	;C-8 $60
00001CF6 0033                                       dc.w $33
00001CF8 0030                                       dc.w $30
00001CFA 002D                                       dc.w $2D
00001CFC 002B                                       dc.w $2B
00001CFE 0028                                       dc.w $28
00001D00 0026                                       dc.w $26
00001D02 0024                                       dc.w $24
00001D04 0022                                       dc.w $22
00001D06 0020                                       dc.w $20
00001D08 001F                       		dc.w $1F
00001D0A 001D                                       dc.w $1D
00001D0C                                            
00001D0C 001B                                       dc.w $1B	;C-9 $6C
00001D0E 001A                                       dc.w $1A
00001D10 0018                                       dc.w $18
00001D12 0017                                       dc.w $17
00001D14 0016                                       dc.w $16
00001D16 0015                                       dc.w $15
00001D18 0013                                       dc.w $13
00001D1A 0012                                       dc.w $12
00001D1C 0011                       		dc.w $11
00001D1E 0010                        		dc.w $10 ;Custom...
00001D20 0009                        		dc.w $9
00001D22 0008                        		dc.w $8
00001D24                            
00001D24                            		even
00001D24                            		
00001D24                            ; -------------------------------
00001D24                            ; FM Frequencies
00001D24                            ; -------------------------------
00001D24                            
00001D24                            FreqList_FM:
00001D24                            ; 		dc.w $269	;NULL
00001D24 028D                       		dc.w $28d	;C-0 $00
00001D26 02B4                       		dc.w $2b4
00001D28 02DD                       		dc.w $2dd
00001D2A 0309                       		dc.w $309
00001D2C 0337                       		dc.w $337
00001D2E 0368                       		dc.w $368
00001D30 039C                       		dc.w $39c
00001D32 03D3                       		dc.w $3d3
00001D34 040D                       		dc.w $40d
00001D36 044B                       		dc.w $44b
00001D38 048C                       		dc.w $48c
00001D3A 0269                       		dc.w $269
00001D3C 028D                       		dc.w $28d	;C-1 $0C
00001D3E 02B4                       		dc.w $2b4
00001D40 02DD                       		dc.w $2dd
00001D42 0309                       		dc.w $309
00001D44 0337                       		dc.w $337
00001D46 0368                       		dc.w $368
00001D48 039C                       		dc.w $39c
00001D4A 03D3                       		dc.w $3d3
00001D4C 040D                       		dc.w $40d
00001D4E 044B                       		dc.w $44b
00001D50 048C                       		dc.w $48c
00001D52 0A69                       		dc.w $a69
00001D54 0A8D                       		dc.w $a8d	;C-2 $18
00001D56 0AB4                       		dc.w $ab4
00001D58 0ADD                       		dc.w $add
00001D5A 0B09                       		dc.w $b09
00001D5C 0B37                       		dc.w $b37
00001D5E 0B68                       		dc.w $b68
00001D60 0B9C                       		dc.w $b9c
00001D62 0BD3                       		dc.w $bd3
00001D64 0C0D                       		dc.w $c0d
00001D66 0C4B                       		dc.w $c4b
00001D68 0C8C                       		dc.w $c8c
00001D6A 1269                       		dc.w $1269
00001D6C 128D                       		dc.w $128d	;C-3 $24
00001D6E 12B4                       		dc.w $12b4
00001D70 12DD                       		dc.w $12dd
00001D72 1309                       		dc.w $1309
00001D74 1337                       		dc.w $1337
00001D76 1368                       		dc.w $1368
00001D78 139C                       		dc.w $139c
00001D7A 13D3                       		dc.w $13d3
00001D7C 140D                       		dc.w $140d
00001D7E 144B                       		dc.w $144b
00001D80 148C                       		dc.w $148c
00001D82 1A69                       		dc.w $1a69
00001D84 1A8D                       		dc.w $1a8d	;C-4 $30
00001D86 1AB4                       		dc.w $1ab4
00001D88 1ADD                       		dc.w $1add
00001D8A 1B09                       		dc.w $1b09
00001D8C 1B37                       		dc.w $1b37
00001D8E 1B68                       		dc.w $1b68
00001D90 1B9C                       		dc.w $1b9c
00001D92 1BD3                       		dc.w $1bd3
00001D94 1C0D                       		dc.w $1c0d
00001D96 1C4B                       		dc.w $1c4b
00001D98 1C8C                       		dc.w $1c8c
00001D9A 2269                       		dc.w $2269
00001D9C 228D                       		dc.w $228d	;C-5 $3C
00001D9E 22B4                       		dc.w $22b4
00001DA0 22DD                       		dc.w $22dd
00001DA2 2309                       		dc.w $2309
00001DA4 2337                       		dc.w $2337
00001DA6 2368                       		dc.w $2368
00001DA8 239C                       		dc.w $239c
00001DAA 23D3                       		dc.w $23d3
00001DAC 240D                       		dc.w $240d
00001DAE 244B                       		dc.w $244b
00001DB0 248C                       		dc.w $248c
00001DB2 2A69                       		dc.w $2a69
00001DB4 2A8D                       		dc.w $2a8d	;C-6 $48
00001DB6 2AB4                       		dc.w $2ab4
00001DB8 2ADD                       		dc.w $2add
00001DBA 2B09                       		dc.w $2b09
00001DBC 2B37                       		dc.w $2b37
00001DBE 2B68                       		dc.w $2b68
00001DC0 2B9C                       		dc.w $2b9c
00001DC2 2BD3                       		dc.w $2bd3
00001DC4 2C0D                       		dc.w $2c0d
00001DC6 2C4B                       		dc.w $2c4b
00001DC8 2C8C                       		dc.w $2c8c
00001DCA 3269                       		dc.w $3269	;C-7 $54
00001DCC 328D                       		dc.w $328d
00001DCE 32B4                       		dc.w $32b4
00001DD0 32DD                       		dc.w $32dd
00001DD2 3309                       		dc.w $3309
00001DD4 3337                       		dc.w $3337
00001DD6 3368                       		dc.w $3368
00001DD8 339C                       		dc.w $339c
00001DDA 33D3                       		dc.w $33d3
00001DDC 340D                       		dc.w $340d
00001DDE 344B                       		dc.w $344b
00001DE0 348C                       		dc.w $348c
00001DE2                            		even
00001DE2                            		
00001DE2                            ; ; -------------------------------
00001DE2                            ; ; Mute/Rest channel
00001DE2                            ; ; -------------------------------
00001DE2                            ; 
00001DE2                            ; SMEG_ChannelRest:
00001DE2                            ; 		cmp.b	#$FF,Chn_ID(a5)
00001DE2                            ; 		beq	@Return
00001DE2                            ; 		
00001DE2                            ; ; 		btst	#bitPriority,(a6)
00001DE2                            ; ; 		beq.s	@SFX_Mode
00001DE2                            ; ; 		btst	#bitSfxOn,(RAM_SMEG_SfxBuff)
00001DE2                            ; ; 		beq.s	@SFX_Mode
00001DE2                            ; ;  		lea	(RAM_SMEG_PrioList),a3
00001DE2                            ; ;  		moveq	#0,d1
00001DE2                            ; ;  		move.b	LastPattChn(a6),d1
00001DE2                            ; ; 		btst	#0,(a3,d1.w)
00001DE2                            ; ; 		bne	@Return
00001DE2                            ; ; @SFX_Mode:
00001DE2                            ; 
00001DE2                            ; 		tst.b	Chn_ID(a5)
00001DE2                            ; 		bmi.s	@PSG_Rest
00001DE2                            ; 
00001DE2                            ;                 cmp.b	#6,Chn_ID(a5)
00001DE2                            ;                 bne.s	@NoChk6
00001DE2                            ; 		btst	#bitFmDac,snd_flags(a6)
00001DE2                            ; 		bne.s	@DAC_Rest
00001DE2                            ; 
00001DE2                            ; @NoChk6:
00001DE2                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
00001DE2                            ; 		bge	@PCM_Rest
00001DE2                            ; 		
00001DE2                            ; 		moveq	#$28,d0
00001DE2                            ;                 moveq	#0,d1
00001DE2                            ; 		move.b	Chn_ID(a5),d1
00001DE2                            ; 		bsr	SMEG_Z80_Off
00001DE2                            ; 		bsr	FM_RegWrite_1
00001DE2                            ; 		bsr	SMEG_Z80_On
00001DE2                            ; 
00001DE2                            ; @Return:
00001DE2                            ; 		rts
00001DE2                            ; 
00001DE2                            ; ; -------------------------------
00001DE2                            ; ; PSG Rest
00001DE2                            ; ; -------------------------------
00001DE2                            ; 
00001DE2                            ; @PSG_Rest:
00001DE2                            ; 		moveq	#0,d0
00001DE2                            ; 		move.b	Chn_ID(a5),d0
00001DE2                            ; 		add.b	#$1F,d0
00001DE2                            ; 		move.b	d0,($C00011)
00001DE2                            ; 
00001DE2                            ; @Disabled:
00001DE2                            ; 		rts
00001DE2                            ; 
00001DE2                            ; ; -------------------------------
00001DE2                            ; ; DAC Rest
00001DE2                            ; ; -------------------------------
00001DE2                            ; 
00001DE2                            ; @DAC_Rest:
00001DE2                            ;   		bsr	SMEG_Z80_Off
00001DE2                            ; 		moveq	#$2B,d0
00001DE2                            ;                 moveq	#0,d1
00001DE2                            ;   		bsr	FM_RegWrite_1
00001DE2                            ; 
00001DE2                            ; 		moveq	#0,d0
00001DE2                            ; 		move.b	d0,($A001E0+$D)
00001DE2                            ; 		bsr	SMEG_Z80_On
00001DE2                            ; 		rts
00001DE2                            ; 
00001DE2                            ; ; -------------------------------
00001DE2                            ; ; PCM Rest
00001DE2                            ; ; -------------------------------
00001DE2                            ; 
00001DE2                            ; @PCM_Rest:
00001DE2                            ;  		if MCD
00001DE2                            ;  		
00001DE2                            ; 		tst.l	SongPcmSamp(a6)
00001DE2                            ; 		beq.s	@ReturnPCM
00001DE2                            ; 		bmi.s	@ReturnPCM
00001DE2                            ; 		
00001DE2                            ; 		moveq	#0,d1
00001DE2                            ; 		move.b	Chn_ID(a5),d1
00001DE2                            ; 		and.b	#$F,d1
00001DE2                            ; 		bclr	d1,PcmChnOnOff(a6)
00001DE2                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
00001DE2                            ; 		moveq	#CdTask_SetOnOff,d0
00001DE2                            ; 		bsr	SMEG_CD_Call
00001DE2                            ; 		
00001DE2                            ;  		elseif MARS
00001DE2                            ;  		
00001DE2                            ; 		tst.l	SongPcmSamp(a6)
00001DE2                            ; 		beq.s	@ReturnPCM
00001DE2                            ; 		bmi.s	@ReturnPCM
00001DE2                            ; 		
00001DE2                            ;   		moveq	#0,d0
00001DE2                            ;   		move.b	Chn_ID(a5),d0
00001DE2                            ;   		and.w	#$F,d0
00001DE2                            ;   		move.b	d0,(marsreg+comm2)
00001DE2                            ;   		moveq	#marscall_Stop,d0
00001DE2                            ;   		bsr	SMEG_MARS_Call
00001DE2                            ;     		
00001DE2                            ; 		endif
00001DE2                            ; @ReturnPCM:
00001DE2                            ; 		rts
00001DE2                            		
00001DE2                            ; ================================================================
00001DE2                            ; Subs
00001DE2                            ; ================================================================
00001DE2                            
00001DE2                            ; -------------------------------------------
00001DE2                            ; Extra channels communication
00001DE2                            ; -------------------------------------------
00001DE2                            
00001DE2                            SMEG_CD_Call:
00001DE2 4E75                       		rts
00001DE4                            
00001DE4                            SMEG_MARS_Call:
00001DE4 4E75                        		rts
00001DE6                             		
00001DE6                            ; -------------------------------------------
00001DE6                            ; Set instrument
00001DE6                            ; -------------------------------------------
00001DE6                            
00001DE6                            SMEG_SetVoice:
00001DE6 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00001DEC 6700 0000                  		beq	@Return
00001DF0                            		
00001DF0 0816 0000                  		btst	#bitPriority,(a6)
00001DF4 6600                       		bne.s	@SFX_ModeV
00001DF6 6100 0000                  		bsr	SMEG_FindPrioSlot
00001DFA 4A13                         		tst.b	(a3)
00001DFC 6600 0000                    		bne	@Return
00001E00                            @SFX_ModeV:
00001E00                            
00001E00                            
00001E00 4AAE 0010                  		tst.l	snd_instr(a6)
00001E04 6700 0000                  		beq	@Return
00001E08                            		
00001E08 4A2D 0007                  		tst.b	Chn_ID(a5)
00001E0C 6B00                       		bmi.s	@Return
00001E0E 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00001E14 6C00 0000                  		bge	SMEG_SetVoice_PCM
00001E18 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
00001E1E 6700 0000                  		beq	SMEG_SetVoice_DAC
00001E22                            		
00001E22 6000 0000                   		bra	SetVoice_FM
00001E26                            @Return:
00001E26 4E75                        		rts
00001E28                            		
00001E28                            ; -------------------------------------------
00001E28                            ; Send DAC
00001E28                            ; -------------------------------------------
00001E28                            
00001E28                            SMEG_SetVoice_DAC:
00001E28 6100 0000                  		bsr	ChnlFM_srchIns
00001E2C 0C42 FFFF                  		cmp.w	#-1,d2
00001E30 6700                       		beq.s	@Return
00001E32                            		
00001E32 0802 0007                   		btst	#7,d2
00001E36 6600                        		bne.s	@Sample_Mode
00001E38 08AE 0000 0001             		bclr	#bitFmDac,snd_flags(a6)
00001E3E 6000 0000                  		bra	SetVoice_FM
00001E42                             		
00001E42                            @Sample_Mode:
00001E42 08EE 0000 0001             		bset	#bitFmDac,snd_flags(a6)
00001E48 202B 0004                  		move.l	4(a3),d0
00001E4C 222B 0008                  		move.l	8(a3),d1
00001E50 0481 0000 0001             		sub.l	#1,d1
00001E56 242B 000C                  		move.l	$C(a3),d2
00001E5A 7600                       		moveq	#0,d3
00001E5C 162D 000B                  		move.b	chn_note(a5),d3
00001E60 D66B 0002                   		add.w	2(a3),d3
00001E64 6000 0000                   		bra	Audio_Sample_Set
00001E68                            @Return:
00001E68 4E75                       		rts
00001E6A                            		
00001E6A                            ; -------------------------------------------
00001E6A                            ; Send FM
00001E6A                            ; -------------------------------------------
00001E6A                            
00001E6A                            SetVoice_FM:
00001E6A 6100 0000                  		bsr	ChnlFM_srchIns
00001E6E 08AE 0003 0001             		bclr	#bitSpecial3,snd_flags(a6)
00001E74 0C42 FFFF                  		cmp.w	#-1,d2
00001E78 6700 0000                  		beq	@Return
00001E7C 0802 0007                   		btst	#7,d2
00001E80 6600 0000                   		bne	@Return
00001E84 0802 0006                   		btst	#6,d2
00001E88 6700                        		beq.s	@notFM3
00001E8A 08EE 0003 0001              		bset	#bitSpecial3,snd_flags(a6)
00001E90                            @notFM3:
00001E90                            
00001E90                            ;  		adda.w	#4,a3
00001E90 266B 0004                  		movea.l	4(a3),a3
00001E94 7000                       		moveq	#0,d0
00001E96 102D 0007                  		move.b	Chn_ID(a5),d0
00001E9A 0C00 0004                  		cmp.b	#4,d0
00001E9E 6D00                       		blt.s	@Low3
00001EA0 0400 0004                  		sub.b	#4,d0
00001EA4                            @Low3:
00001EA4                            
00001EA4 4840                       		swap	d0
00001EA6 303C 0028                  		move.w	#$28,d0
00001EAA 7200                       		moveq	#0,d1
00001EAC 122D 0007                  		move.b	Chn_ID(a5),d1
00001EB0 6100 0000                  		bsr	SMEG_Z80_Off
00001EB4 6100 0000                  		bsr	FM_RegWrite_1
00001EB8 4840                       		swap	d0
00001EBA                            
00001EBA 45FA 0000                  		lea	SMEG_FM_RegList(pc),a2
00001EBE 3C00                       		move.w	d0,d6
00001EC0 7818                       		moveq	#$18,d4
00001EC2                            @Next:
00001EC2 3A06                       		move.w	d6,d5
00001EC4 101A                       		move.b	(a2)+,d0
00001EC6 3600                       		move.w	d0,d3
00001EC8 D045                       		add.w	d5,d0
00001ECA 121B                       		move.b	(a3)+,d1
00001ECC                            
00001ECC 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
00001ED2 6C00                       		bge.s	@Chn456
00001ED4 6100 0000                  		bsr	FM_RegWrite_1
00001ED8 51CC FFE8                  		dbf	d4,@Next
00001EDC 6000                       		bra.s	@BackZ80
00001EDE                            
00001EDE                            @Chn456:
00001EDE 6100 0000                  		bsr	FM_RegWrite_2
00001EE2 51CC FFDE                  		dbf	d4,@Next
00001EE6                            @BackZ80:
00001EE6 6100 0000                  		bsr	SMEG_Z80_On
00001EEA                            @Return:
00001EEA 4E75                       		rts
00001EEC                            
00001EEC                            ; -------------------------------------------
00001EEC                            ; Set FM panning
00001EEC                            ; -------------------------------------------
00001EEC                            
00001EEC                            SMEG_FM_SetPan:
00001EEC 4A2D 0007                  		tst.b	Chn_ID(a5)
00001EF0 6B00 0000                  		bmi	@Return
00001EF4                            		
00001EF4 7200                       		moveq	#0,d1
00001EF6 122D 000C                    		move.b	chn_pan(a5),d1
00001EFA EC49                         		lsr.w	#6,d1
00001EFC 0241 0003                    		and.w	#%11,d1
00001F00 123B 1000                    		move.b	@list(pc,d1.w),d1
00001F04 0241 00C0                    		and.w	#%11000000,d1
00001F08 303C 00B4                    		move.w	#$B4,d0
00001F0C 142D 0007                    		move.b	chn_id(a5),d2
00001F10 0242 0003                    		and.w	#%11,d2
00001F14 8042                         		or.w	d2,d0
00001F16 6000 0000                   		bra	SMEG_FM_FindWrite
00001F1A                            		
00001F1A 8080 C040                  @list:		dc.b $80,$80,$C0,$40
00001F1E                            		even
00001F1E                            		
00001F1E                            		
00001F1E 303C 00B4                  		move.w	#$B4,d0
00001F22 7400                       		moveq	#0,d2
00001F24 142D 0007                  		move.b	Chn_ID(a5),d2
00001F28 7200                       		moveq	#0,d1
00001F2A 122D 000C                  		move.b	Chn_Pan(a5),d1
00001F2E                            
00001F2E 6100 0000                  		bsr	SMEG_Z80_Off
00001F32 0C02 0003                  		cmp.b	#3,d2
00001F36 6E00                       		bgt.s	@SecondFM
00001F38 D042                       		add.w	d2,d0
00001F3A 6100 0000                  		bsr	FM_RegWrite_1
00001F3E 6000                       		bra.s	@BackZ80
00001F40                            @SecondFM:
00001F40 0442 0004                  		sub.w	#4,d2
00001F44 D042                       		add.w	d2,d0
00001F46 6100 0000                  		bsr	FM_RegWrite_2
00001F4A                            @BackZ80:
00001F4A 6100 0000                  		bsr	SMEG_Z80_On
00001F4E                            @Return:
00001F4E 4E75                       		rts
00001F50                            
00001F50                            ; ---------------------
00001F50                            
00001F50                            ChnlFM_srchIns:
00001F50 266E 0010                  		movea.l	snd_instr(a6),a3
00001F54 302B 0000                   		move.w	instDYmha(a3),d0
00001F58 D6C0                        		adda	d0,a3
00001F5A                            @next:
00001F5A 4841                       		swap	d1
00001F5C 4A53                       		tst.w	(a3)
00001F5E 6B00 0000                   		bmi	@NoteOff
00001F62 7000                        		moveq	#0,d0
00001F64 102D 0008                  		move.b	chn_inst(a5),d0
00001F68 3213                       		move.w	(a3),d1
00001F6A 3401                       		move.w	d1,d2
00001F6C 0241 003F                  		and.w	#$3F,d1
00001F70 B041                       		cmp.w	d1,d0
00001F72 6700                       		beq.s	@found
00001F74 D6FC 0008                  		adda	#8,a3		;inst,oct,firstlong
00001F78 0802 0007                  		btst	#7,d2
00001F7C 6600                       		bne.s	@doit
00001F7E 0802 0006                  		btst	#6,d2
00001F82 67D6                       		beq.s	@next
00001F84                            @doit:
00001F84 D6FC 0008                  		adda	#8,a3		;scndlong,thrdlong
00001F88 60D0                       		bra.s	@next
00001F8A                            @NoteOff:
00001F8A 4841                       		swap	d1
00001F8C 74FF                       		moveq	#-1,d2
00001F8E                            @found:
00001F8E 4E75                       		rts
00001F90                            		
00001F90                            ; --------------------------------------------
00001F90                            ; Play a sample
00001F90                            ;
00001F90                            ; Input:
00001F90                            ; d0 | LONG - Start
00001F90                            ; d1 | LONG - End
00001F90                            ; d2 | LONG - Loop point
00001F90                            ;              0 = From start
00001F90                            ;             -1 = No loop
00001F90                            ; d3 | WORD - Note ($3C - default)
00001F90                            ; --------------------------------------------
00001F90                            
00001F90                            Audio_Sample_Set:
00001F90 6100 0000                  		bsr	SMEG_Z80_Off
00001F94                            		
00001F94 41F9 00A0 0180             		lea	($A00180),a0
00001F9A E198                       		rol.l	#8,d0
00001F9C 10C0                       		move.b	d0,(a0)+
00001F9E E198                       		rol.l	#8,d0
00001FA0 10C0                       		move.b	d0,(a0)+		
00001FA2 E198                       		rol.l	#8,d0
00001FA4 10C0                       		move.b	d0,(a0)+
00001FA6 E198                       		rol.l	#8,d0
00001FA8 10C0                       		move.b	d0,(a0)+
00001FAA                            		
00001FAA 0481 0000 0001              		sub.l	#1,d1
00001FB0 E199                       		rol.l	#8,d1
00001FB2 10C1                       		move.b	d1,(a0)+
00001FB4 E199                       		rol.l	#8,d1
00001FB6 10C1                       		move.b	d1,(a0)+		
00001FB8 E199                       		rol.l	#8,d1
00001FBA 10C1                       		move.b	d1,(a0)+
00001FBC E199                       		rol.l	#8,d1
00001FBE 10C1                       		move.b	d1,(a0)+
00001FC0                            		
00001FC0 7200                       		moveq	#0,d1
00001FC2 2800                       		move.l	d0,d4
00001FC4 0C82 FFFF FFFF             		cmp.l	#-1,d2
00001FCA 6700                       		beq.s	@no_loop
00001FCC 7202                       		moveq	#2,d1
00001FCE 2800                       		move.l	d0,d4
00001FD0 D882                       		add.l	d2,d4
00001FD2                            @no_loop:
00001FD2 E19C                       		rol.l	#8,d4
00001FD4 10C4                       		move.b	d4,(a0)+
00001FD6 E19C                       		rol.l	#8,d4
00001FD8 10C4                       		move.b	d4,(a0)+		
00001FDA E19C                       		rol.l	#8,d4
00001FDC 10C4                       		move.b	d4,(a0)+
00001FDE E19C                       		rol.l	#8,d4
00001FE0 10C4                       		move.b	d4,(a0)+
00001FE2                            
00001FE2 1081                       		move.b	d1,(a0)
00001FE4                            		
00001FE4 3003                       		move.w	d3,d0
00001FE6 6000 0000                  		bra	AudioSmplNote_go
00001FEA                            
00001FEA                            ; --------------------------------------------
00001FEA                            ; Stop the current sample
00001FEA                            ; --------------------------------------------
00001FEA                            
00001FEA                            Audio_Sample_Play:
00001FEA 6100 0000                  		bsr	SMEG_Z80_Off
00001FEE                            		
00001FEE 1039 00A0 018C             		move.b	($A0018C).l,d0
00001FF4 08C0 0000                  		bset	#0,d0
00001FF8 13C0 00A0 018C             		move.b	d0,($A0018C).l
00001FFE                             		
00001FFE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00002006 4E75                       		rts
00002008                            		
00002008                            ; --------------------------------------------
00002008                            ; Stop the current sample
00002008                            ; --------------------------------------------
00002008                            
00002008                            Audio_Sample_Stop:
00002008 6100 0000                  		bsr	SMEG_Z80_Off
0000200C                            		
0000200C 13FC 0040 00A0 018C        		move.b	#$40,($A0018C).l
00002014                             		
00002014 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000201C 4E75                       		rts
0000201E                            		
0000201E                            ; --------------------------------------------
0000201E                            ; Modify sample note
0000201E                            ;
0000201E                            ; d3 | WORD - Note
0000201E                            ; --------------------------------------------
0000201E                            
0000201E                            Audio_Sample_Note:
0000201E 6100 0000                  		bsr	SMEG_Z80_Off
00002022                            		
00002022                            AudioSmplNote_go:
00002022                            ; 		sub.w	#24,d0			; skip 2 octaves
00002022 ED48                       		lsl.w	#6,d0
00002024 0640 01C0                   		add.w	#$1C0,d0
00002028 13C0 00A0 00DC             		move.b	d0,($A000DC)		; ld bc,(NEW ADDRESS)
0000202E E048                       		lsr.w	#8,d0			;
00002030 13C0 00A0 00DD              		move.b	d0,($A000DD)		;
00002036                             		
00002036 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000203E 4E75                       		rts
00002040                            
00002040                            ; -------------------------------------------
00002040                            ; Send PCM/PWM
00002040                            ; -------------------------------------------
00002040                            
00002040                            SMEG_SetVoice_PCM:
00002040                            @FinishList:
00002040 4E75                       		rts
00002042                            		
00002042                            ; -------------------------------------------
00002042                            ; Reset FM
00002042                            ; -------------------------------------------
00002042                            
00002042                            SMEG_FM_Reset:
00002042 6100 0000                  		bsr	SMEG_Z80_Off
00002046                            
00002046 7028                       		moveq	#$28,d0
00002048 7200                       		moveq	#0,d1
0000204A 6100 0000                  		bsr	FM_RegWrite_1
0000204E 7028                       		moveq	#$28,d0
00002050 7201                       		moveq	#1,d1
00002052 6100 0000                  		bsr	FM_RegWrite_1
00002056 7028                       		moveq	#$28,d0
00002058 7202                       		moveq	#2,d1
0000205A 6100 0000                  		bsr	FM_RegWrite_1
0000205E 7028                       		moveq	#$28,d0
00002060 7204                       		moveq	#4,d1
00002062 6100 0000                  		bsr	FM_RegWrite_1
00002066 7028                       		moveq	#$28,d0
00002068 7205                       		moveq	#5,d1
0000206A 6100 0000                  		bsr	FM_RegWrite_1
0000206E 7028                       		moveq	#$28,d0
00002070 7206                       		moveq	#6,d1
00002072 6100 0000                  		bsr	FM_RegWrite_1
00002076                            
00002076 6000 0000                  		bra	SMEG_Z80_On
0000207A                            
0000207A                            ; -------------------------------------------
0000207A                            ; Find FM
0000207A                            ; -------------------------------------------
0000207A                            
0000207A                            SMEG_FM_FindWrite:
0000207A 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
00002080 6C00                       		bge.s	@Second
00002082 6000 0000                  		bra	FM_RegWrite_1
00002086                            @Second:
00002086 6000 0000                  		bra	FM_RegWrite_2
0000208A                            
0000208A                            ; -------------------------------------------
0000208A                            ; Write to FM register
0000208A                            ; -------------------------------------------
0000208A                            
0000208A                            FM_RegWrite_1:
0000208A 1439 00A0 4000             		move.b	($A04000).l,d2
00002090 0802 0007                  		btst	#7,d2
00002094 66F4                       		bne.s	FM_RegWrite_1
00002096 13C0 00A0 4000             		move.b	d0,($A04000).l
0000209C                            @Loop:
0000209C 1439 00A0 4000             		move.b	($A04000).l,d2
000020A2 0802 0007                  		btst	#7,d2
000020A6 66F4                       		bne.s	@Loop
000020A8 13C1 00A0 4001             		move.b	d1,($A04001).l
000020AE 4E75                       		rts
000020B0                            
000020B0                            FM_RegWrite_2:
000020B0 1439 00A0 4000             		move.b	($A04000).l,d2
000020B6 0802 0007                  		btst	#7,d2
000020BA 66F4                       		bne.s	FM_RegWrite_2
000020BC 13C0 00A0 4002             		move.b	d0,($A04002).l
000020C2                            @Loop:
000020C2 1439 00A0 4000             		move.b	($A04000).l,d2
000020C8 0802 0007                  		btst	#7,d2
000020CC 66F4                       		bne.s	@Loop
000020CE 13C1 00A0 4003             		move.b	d1,($A04003).l
000020D4 4E75                       		rts
000020D6                            		
000020D6                            SMEG_Z80_Off:
000020D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
000020DE                            @WaitZ80;\@:
000020DE 0839 0000 00A1 1100        		btst	#0,($A11100).l
000020E6 66F6                       		bne.s	@WaitZ80;\@
000020E8 4E75                       		rts
000020EA                            		
000020EA                            ; USES d2
000020EA                            
000020EA                            SMEG_Z80_On:
000020EA 1439 00A0 018C             		move.b	($A0018C),d2
000020F0 0802 0007                  		btst	#7,d2
000020F4 6700                       		beq.s	@stopped;\@
000020F6                            @busywait;\@:
000020F6 1439 00A0 4000             		move.b	($A04000).l,d2
000020FC 0802 0007                  		btst	#7,d2
00002100 66F4                       		bne.s	@busywait;\@
00002102 13FC 002A 00A0 4000        		move.b	#$2A,(sound_ym_1)
0000210A 1439 00A0 018F             		move.b	($A0018F),d2
00002110 13C2 00A0 4001             		move.b	d2,(sound_ym_2)
00002116                            @stopped;\@:
00002116 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000211E 4E75                       		rts
00002120                            		
00002120                            ; -----------------------
00002120                            ; Setup channels
00002120                            ; -----------------------
00002120                            
00002120                            SMEG_Load_SetChnls:
00002120 286E 0004                  		movea.l	SongRequest(a6),a4				;a4 - Music data
00002124 3D6E 0018 001C             		move.w	TicksRequest(a6),TicksSet(a6)
0000212A                            
0000212A                            ; -----------------------
0000212A                            ; Get the
0000212A                            ; PatternEnd/PatternLoop
0000212A                            ; numbers
0000212A                            ; -----------------------
0000212A                            
0000212A 1D5C 0002                  		move.b	(a4)+,PatternEnd(a6)
0000212E 1D5C 0003                  		move.b	(a4)+,PatternLoop(a6)
00002132                            		
00002132                            ; -----------------------
00002132                            ; Get instruments
00002132                            ; -----------------------
00002132                            
00002132 2D5C 0008                  		move.l	(a4)+,SongStart(a6)
00002136 2D5C 0010                  		move.l	(a4)+,snd_instr(a6)
0000213A                            
0000213A                            ; -----------------------
0000213A                            ; Setup the channel IDs
0000213A                            ; -----------------------
0000213A                            
0000213A 303C 0011                  		move.w	#max_chnl-1,d0
0000213E 341C                       		move.w	(a4)+,d2
00002140 0442 0001                  		sub.w	#1,d2
00002144                            @SetId:
00002144 1B7C 0001 0006             		move.b	#1,Chn_Type(a5)
0000214A 1B7C 00FF 0007             		move.b	#-1,Chn_ID(a5)
00002150 4A42                       		tst.w	d2
00002152 6B00                       		bmi.s	@Disabled
00002154 0442 0001                  		sub.w	#1,d2
00002158 1B5C 0007                  		move.b	(a4)+,Chn_ID(a5)
0000215C 1B5C 0009                   		move.b	(a4)+,Chn_Vol(a5)
00002160 1B5C 000C                   		move.b	(a4)+,Chn_Pan(a5)
00002164 161C                        		move.b	(a4)+,d3
00002166 4A2D 0007                   		tst.b	chn_id(a5)
0000216A 6B00                        		bmi.s	@is_psg
0000216C 0C2D 0010 0007              		cmp.b	#PCM_1,chn_id(a5)
00002172 6C00                        		bge.s	@is_pcm
00002174                             		
00002174 E94B                        		lsl.w	#4,d3
00002176 1B43 000D                   		move.b	d3,Chn_FM_Key(a5)
0000217A 6000                       		bra.s	@Disabled
0000217C                            @is_pcm:
0000217C 4E71                       		nop 
0000217E 6000                       		bra.s	@Disabled
00002180                            		
00002180                            @is_psg:
00002180 122D 0007                  		move.b	Chn_ID(a5),d1
00002184 0001 001F                  		or.b	#$1F,d1
00002188 13C1 00C0 0011             		move.b	d1,(sound_psg)
0000218E                             		
0000218E                            @Disabled:
0000218E DAFC 0010                  		adda 	#sizeof_Chn,a5
00002192 51C8 FFB0                  		dbf	d0,@SetId
00002196                             		
00002196                            ; ; -----------------------
00002196                            ; ; Master volumes
00002196                            ; ; -----------------------
00002196                            ; 
00002196                            ; 		moveq	#(max_chnl)-1,d0
00002196                            ; @SetVol:
00002196                            ; 		move.b	(a4)+,Chn_MainVol(a5)
00002196                            ; 		adda 	#sizeof_Chn,a5
00002196                            ; 		dbf	d0,@SetVol
00002196                            
00002196                            ; -----------------------
00002196                            ; last steps
00002196                            ; -----------------------
00002196                            
00002196 286E 0008                  		movea.l	SongStart(a6),a4
0000219A 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
0000219E 1D5C 0020                  		move.b	(a4)+,PattSize(a6)
000021A2 426E 0022                  		clr.w	pattr_read(a6)
000021A6 D8FC 0006                  		adda	#6,a4
000021AA 2D4C 000C                  		move.l	a4,SongRead(a6)
000021AE 4E75                       		rts
000021B0                            		
000021B0                            ; -----------------------
000021B0                            ; Search used slot
000021B0                            ; 
000021B0                            ; Uses d3
000021B0                            ; -----------------------
000021B0                            
000021B0                            SMEG_FindPrioSlot:
000021B0 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
000021B6                            ;  		inform 0,"%h",RAM_SMEG_PrioList
000021B6                             		
000021B6 7600                        		moveq	#0,d3
000021B8 162D 0007                   		move.b	Chn_ID(a5),d3
000021BC 0803 0007                   		btst	#7,d3
000021C0 6600                        		bne.s	@PSG_slots
000021C2 0C03 0010                   		cmp.b	#PCM_1,d3
000021C6 6C00                        		bge.s	@PCM_Slots
000021C8 0C03 0004                   		cmp.b	#4,d3
000021CC 6D00                        		blt.s	@leftFM
000021CE 0443 0001                   		sub.w	#1,d3
000021D2                            @leftFM:
000021D2 6000                       		bra.s	@set_slot
000021D4                            
000021D4                            @PSG_slots:
000021D4 EA4B                       		lsr.w	#5,d3
000021D6 0243 0003                  		and.w	#%11,d3
000021DA 0643 0006                  		add.w	#6,d3
000021DE 6000                       		bra.s	@set_slot
000021E0                            
000021E0                            @PCM_Slots:
000021E0 0443 0010                  		sub.w	#PCM_1,d3
000021E4                            @set_slot:
000021E4 D6C3                       		add.w	d3,a3
000021E6 4E75                       		rts
000021E8                            		
000021E8                            ; -----------------------
000021E8                            ; Turn off the unused
000021E8                            ; channels
000021E8                            ; -----------------------
000021E8                            
000021E8                            SMEG_Load_FixSfx:
000021E8 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
000021EE                             		
000021EE                            ; FM Check
000021EE                            
000021EE 7605                        		moveq	#6-1,d3
000021F0 7028                        		moveq	#$28,d0
000021F2 7200                        		moveq	#0,d1
000021F4                            @chknextfm1:
000021F4 4A13                       		tst.b	(a3)
000021F6 6700                       		beq.s	@off_fm
000021F8 4213                       		clr.b	(a3)
000021FA                            		
000021FA 0C01 0006                  		cmp.b	#6,d1
000021FE 6600                       		bne.s	@notdac
00002200 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
00002206 6700                       		beq.s	@notdac
00002208                            		
00002208 6100 FDFE                  		bsr	Audio_Sample_Stop
0000220C 6000                       		bra.s	@off_fm
0000220E                            		
0000220E                            @notdac:
0000220E 6100 FEC6                  		bsr	SMEG_Z80_Off
00002212 6100 FE76                  		bsr	FM_RegWrite_1
00002216 6100 FED2                  		bsr	SMEG_Z80_On
0000221A                            @off_fm:
0000221A D6FC 0001                  		adda 	#1,a3
0000221E                            
0000221E 0641 0001                  		add.w	#1,d1
00002222 0C41 0003                  		cmp.w	#3,d1
00002226 6600                       		bne.s	@nope
00002228 0641 0001                  		add.w	#1,d1
0000222C                            @nope:
0000222C 51CB FFC6                  		dbf	d3,@chknextfm1
00002230                            		
00002230                            ; PSG check
00002230                            
00002230 323C 009F                  		move.w	#$9F,d1
00002234 303C 0003                  		move.w	#4-1,d0
00002238                            @chknextpsg:
00002238 4A13                       		tst.b	(a3)
0000223A 6700                       		beq.s	@off_psg
0000223C 4213                       		clr.b	(a3)
0000223E 13C1 00C0 0011             		move.b	d1,(sound_psg)
00002244                            @off_psg:
00002244 D6FC 0001                  		adda	#1,a3
00002248 0641 0020                  		add.w	#$20,d1
0000224C 51C8 FFEA                  		dbf	d0,@chknextpsg
00002250                            		
00002250                            ; TODO: PCM check
00002250                            
00002250                            ; 		lea	(RAM_SMEG_Chnls_BGM),a5
00002250                            ; 		moveq	#(max_chnl)-1,d4
00002250                            ; @SetId:
00002250                            ; 		move.b	#$80,Chn_Pan(a5)
00002250                            ; 
00002250                            ; 		tst.b	Chn_ID(a5)
00002250                            ; 		bmi.s	@NotFM
00002250                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
00002250                            ; 		bge.s	@NotFM
00002250                            ; 
00002250                            ; 		clr.b	Chn_FM_Key(a5)
00002250                            ; 		move.b	#%00001111,Chn_FM_Key(a5)
00002250                            ; 		move.b	#$C0,Chn_Pan(a5)
00002250                            ; 		bsr	SMEG_FM_SetPan
00002250                            ; @NotFM:
00002250                            ; 		adda 	#sizeof_Chn,a5
00002250                            ; 		dbf	d4,@SetId
00002250                            		
00002250                            ; 		bsr	SMEG_Z80_Off
00002250                            ; 		moveq	#$2B,d0
00002250                            ;                 moveq	#0,d1
00002250                            ;   		bsr	FM_RegWrite_1
00002250                            ;   		
00002250                            ; 		moveq	#0,d0
00002250                            ; 		move.b	d0,($A001E0+$D)
00002250                            ; 		bsr	SMEG_Z80_On
00002250                            		
00002250 4E75                       		rts
00002252                            		
00002252                            ; -----------------------
00002252                            ; Exclusive features
00002252                            ;
00002252                            ; TODO: creo que es
00002252                            ; mala idea hacer esperar
00002252                            ; al VBlank ya que moví
00002252                            ; la rutina esta
00002252                            ; -----------------------
00002252                            
00002252                            SMEG_Load_SetExtChnls:
00002252                            		
00002252                            @Return:
00002252 4E75                       		rts
00002254                            		
00002254                            ; -------------------------------------------
00002254                            ; Reset PSG
00002254                            ; -------------------------------------------
00002254                            
00002254                            SMEG_PSG_Reset:
00002254 13FC 009F 00C0 0011        		move.b	#$9F,($C00011).l
0000225C 13FC 00BF 00C0 0011        		move.b	#$BF,($C00011).l
00002264 13FC 00DF 00C0 0011        		move.b	#$DF,($C00011).l
0000226C 13FC 00FF 00C0 0011        		move.b	#$FF,($C00011).l
00002274 4E75                       		rts
00002276                            
00002276                            ; -------------------------------------------
00002276                            ; Reset PCM
00002276                            ; -------------------------------------------
00002276                            
00002276                            SMEG_PCM_Reset:
00002276 4AAE 0014                  		tst.l	SongPcmSamp(a6)
0000227A 6700                       		beq.s	@NoResetPCM
0000227C 6B00 0000                  		bmi	@NoResetPCM
00002280                            		
00002280                            
00002280                            @NoResetPCM:
00002280 4E75                       		rts
00002282                            
00002282                            ; ================================================================
00002282                            ; -------------------------------------------------
00002282                            ; Data
00002282                            ; -------------------------------------------------
00002282                            
00002282                            ; -------------------------------
00002282                            ; FM Register list
00002282                            ; -------------------------------
00002282                            
00002282                            SMEG_FM_RegList:
00002282 B0                         		dc.b $B0
00002283 3038 343C                  		dc.b $30,$38,$34,$3C
00002287 5058 545C                  		dc.b $50,$58,$54,$5C
0000228B 6068 646C                  		dc.b $60,$68,$64,$6C
0000228F 7078 747C                  		dc.b $70,$78,$74,$7C
00002293 8088 848C                  		dc.b $80,$88,$84,$8C
00002297 4048 444C                  		dc.b $40,$48,$44,$4C
0000229C 00                         		even
0000229C                            	
0000229C                            ; -------------------------------
0000229C                            ; Z80 Driver
0000229C                            ; -------------------------------
0000229C                            
0000229C                            Z80_Driver:	incbin	"system/sound/z80/main.bin"
0000339C                            Z80_DriverEnd:
0000339C                            		even
0000339C                            		
0000339C                            ; ---------------------------------------------------
0000339C                            ; ---------------------------------------------------
0000339C                            		
0000339C                            ; ====================================================================
0000339C                            ; -------------------------------------------------
0000339C                            ; Main
0000339C                            ; -------------------------------------------------
0000339C                            
0000339C                            		include	"engine/md.asm"
0000339C                            ; ====================================================================
0000339C                            ; Main engine
0000339C                            ; ====================================================================
0000339C                            
0000339C                            		include	"engine/ram.asm"
0000339C                            ; ====================================================================
0000339C                            ; -------------------------------------------------
0000339C                            ; RAM
0000339C                            ; 
0000339C                            ; Put your features here
0000339C                            ; (players lives, keys, current level, map, etc.)
0000339C                            ; -------------------------------------------------
0000339C                            
0000339C                                            rsset	RAM_Engine
0000339C =FFFFDC00                  RAM_P1_Lives	rs.w	1
0000339C =FFFFDC02                  RAM_P1_Coins	rs.w	1
0000339C =FFFFDC04                  RAM_P1_Hits	rs.w	1
0000339C =FFFFDC06                  RAM_CurrLevel	rs.w	1
0000339C =FFFFDC08                  sizeof_engine	rs.l	0
0000339C                            ; 		inform 0,"engine ram: %h",(sizeof_engine-RAM_Engine)
0000339C                            ; 		inform 0,"engine ram: %h",(sizeof_engine-RAM_Engine)
0000339C                            
0000339C                            ; ====================================================================
0000339C                            ; -------------------------------------------------
0000339C                            ; Engine Main loop
0000339C                            ; -------------------------------------------------
0000339C                            
0000339C                            MD_Main:
0000339C 6100 D892                  		bsr	System_Init		; init System
000033A0 6100 DFF2                  		bsr	Audio_Init		; init Audio
000033A4 6100 D242                  		bsr	Video_Init		; init Video
000033A8 6100 DFD4                   		bsr	Input_Init		; init Input
000033AC                            
000033AC                            ; -------------------------------------------------
000033AC                            
000033AC 46FC 2000                   		move.w	#$2000,sr
000033B0                            Main_Loop:
000033B0 7000                       		moveq	#0,d0
000033B2 1039 FFFF DE4F             		move.b	(RAM_GameMode),d0
000033B8 E548                       		lsl.w	#2,d0
000033BA 207B 0000                  		movea.l	@list(pc,d0.w),a0
000033BE 4E90                       		jsr	(a0)
000033C0                            		
000033C0 60EE                       		bra.s	Main_Loop
000033C2                            		
000033C2                            ; ====================================================================
000033C2                            ; -------------------------------------------------
000033C2                            ; Data
000033C2                            ; -------------------------------------------------
000033C2                            
000033C2                            @list:
000033C2 0000 0000                  		dc.l	mode_Title
000033C6 0000 0000                  		dc.l	mode_Level
000033CA 0000 0000                  		dc.l	mode_Title
000033CE 0000 0000                  		dc.l	mode_Title
000033D2 0000 0000                  		dc.l	mode_Title
000033D6 0000 0000                  		dc.l	mode_Title
000033DA 0000 0000                  		dc.l	mode_Title
000033DE 0000 0000                  		dc.l	mode_Title
000033E2                            		even
000033E2                            		
000033E2                            ; ====================================================================
000033E2                            ; -------------------------------------------------
000033E2                            ; Default interrupts
000033E2                            ; -------------------------------------------------
000033E2                            
000033E2                            		include	"system/ints.asm"
000033E2                            ; ====================================================================
000033E2                            ; -------------------------------------------------
000033E2                            ; VBlank
000033E2                            ; -------------------------------------------------
000033E2                            
000033E2                            MD_Vint:
000033E2 0839 0007 FFFF DE4E         		btst	#7,(RAM_IntFlags)
000033EA 6600 0000                   		bne	@nope
000033EE 08F9 0007 FFFF DE4E         		bset	#7,(RAM_IntFlags)
000033F6 48F9 7FFF FFFF DE0C        		movem.l	a0-a6/d0-d7,(RAM_VIntRegs)
000033FE                            		
000033FE 3039 00C0 0004             		move.w	(vdp_ctrl),d0
00003404 0800 0000                  		btst	#0,d0
00003408 6700                       		beq.s	@JapAme
0000340A 303C 06BC                  		move.w	#$6BC,d0
0000340E 51C8 FFFE                  		dbf	d0,*
00003412                            @JapAme:
00003412                            
00003412 6100 DCD0                   		bsr	Input_Read
00003416 6100 D48A                  		bsr	PalFade_Upd
0000341A 6100 D710                  		bsr	DMA_Read
0000341E                            		
00003546                            		
00003546 6100 DF14                   		bsr	Audio_run			; NO MOVERLO
0000354A 4CF9 7FFF FFFF DE0C        		movem.l	(RAM_VIntRegs),a0-a6/d0-d7
00003552 08F9 0001 FFFF DE4E         		bset	#1,(RAM_IntFlags)		; VBlank done flag
0000355A 08B9 0007 FFFF DE4E         		bclr	#7,(RAM_IntFlags)
00003562                             
00003562                            @nope:
00003562 08B9 0000 FFFF DE4E         		bclr	#0,(RAM_IntFlags)		; Frame done flag
0000356A 4E73                       		rte
0000356C                             		
0000356C                            ; ====================================================================
0000356C                            ; -------------------------------------------------
0000356C                            ; HBlank
0000356C                            ; -------------------------------------------------
0000356C                            
0000356C                            MD_HInt:
0000356C 4E73                       		rte
0000356C 4E73                       		rte
0000356E                            		
0000356E                            ; ====================================================================
0000356E                            ; -------------------------------------------------
0000356E                            ; CODE
0000356E                            ; -------------------------------------------------
0000356E                            
0000356E                            		;obj already set in MARS
0000356E                            		include	"engine/modes/title/md.asm"
0000356E                            ; ====================================================================
0000356E                            ; -------------------------------------------------
0000356E                            ; Title
0000356E                            ; -------------------------------------------------
0000356E                            
0000356E                            ; ====================================================================
0000356E                            ; --------------------------------------------
0000356E                            ; RAM
0000356E                            ; --------------------------------------------
0000356E                            
0000356E                            		rsset RAM_ModeBuffer
0000356E                            ; this_counter	rs.l 1
0000356E =FFFFBC00                  model_buff	rs.b $20
0000356E =FFFFBC20                  test_val	rs.l 1
0000356E                            
0000356E                            ; ====================================================================
0000356E                            ; --------------------------------------------
0000356E                            ; Init
0000356E                            ; --------------------------------------------
0000356E                            
0000356E                            mode_Title:
00003580 46FC 2700                  		move.w	#$2700,sr
00003584 6100 D0AA                  		bsr	Video_ClearAll
00003588 6100 DE78                    		bsr	SMEG_StopSnd
0000358C                              		
0000358C 23FC 5000 0003 00C0 0004   		move.l	#$50000003,(vdp_ctrl)
00003596 41F9 0000 0000             		lea	(Art_DebugFont),a0
0000359C 303C 0000                  		move.w	#((Art_DebugFont_e-Art_DebugFont)/4)-1,d0
000035A0                            @dbg_loop:
000035A0 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
000035A6 51C8 FFF8                  		dbf	d0,@dbg_loop
000035AA 43F9 FFFF E9D0              		lea	(RAM_PalFade),a1
000035B0 41F9 0000 0000             		lea	(Pal_Title),a0
000035B6 303C 000F                  		move.w	#16-1,d0
000035BA                            @pal_loop2:
000035BA 32D8                       		move.w	(a0)+,(a1)+
000035BC 51C8 FFFC                  		dbf	d0,@pal_loop2
000035C0 337C 0644 001C             		move.w	#$644,$1C(a1)
000035C6 337C 0EEE 001E             		move.w	#$EEE,$1E(a1)
000035CC                            		
000035CC                            ; MARS: Model viewer
000035CC                            		
000035CC                            ; 		if MARS
000035CC                            ; 		
000035CC                            ; 		lea	(Asc_MarsMdl),a0
000035CC                            ; 		moveq	#0,d0
000035CC                            ; 		move.l	#$00010001,d1
000035CC                            ; 		move.w	#$580|$2000,d2
000035CC                            ; 		bsr	Video_PrintText
000035CC                            ; 		bsr	MarsMdl_Init
000035CC                            ; 
000035CC                            ; ; Else: Text
000035CC                            ; 
000035CC                            ;    		else
000035CC                               		
000035CC 41F9 0000 0000             		lea	(Asc_Karasucia),a0
000035D2 7000                       		moveq	#0,d0
000035D4 223C 0001 0001             		move.l	#$00010001,d1
000035DA 343C 2680                  		move.w	#$680|$2000,d2
000035DE 6100 D27C                  		bsr	Video_PrintText
000035E2                            		
000035E2                            ; 		lea	(Map_Title),a0
000035E2                            ;  		moveq	#0,d0
000035E2                            ;  		move.l	#$00000000,d1
000035E2                            ;    		move.l	#$0027001B,d2
000035E2                            ;    		moveq	#1,d3
000035E2                            ;    		bsr	Video_MakeMap
000035E2                            ; 		move.l	#$40200000,(vdp_ctrl)
000035E2                            ; 		lea	(Art_Title),a0
000035E2                            ; 		move.w	#(Art_Title_End-Art_Title)/4,d0
000035E2                            ; @art_loop:
000035E2                            ; 		move.l	(a0)+,(vdp_data)
000035E2                            ; 		dbf	d0,@art_loop
000035E2                            		
000035E2                            ;     		endif
000035E2                               		
000035E2 13FC 0007 FFFF ED1B          		move.b	#%111,(RAM_VidRegs+$B)
000035EA 6100 D0CA                    		bsr	Video_Update
000035EE                               		
000035EE                            ;    		if MCD=0
000035EE                            ;  		move.l	#TEST_IT,d0
000035EE                            ;  		moveq 	#2,d1
000035EE                            ;  		moveq	#0,d2
000035EE                            ;   		bsr	Audio_Track_play
000035EE                            ;   		endif
000035EE                            ;   		move.l	#TEST_IT_2,d0
000035EE                            ;   		move.w 	#2,d1
000035EE                            ;   		moveq	#0,d2
000035EE                            ;   		bsr	Audio_Track_play
000035EE                            		
000035EE                            ;  		if MCD=0
000035EE                            ; 		move.l	#TEST_WAV,d0
000035EE                            ; 		move.l	#TEST_WAV_end,d1
000035EE                            ; 		moveq	#0,d2
000035EE                            ; 		move.w	#12*4,d3
000035EE                            ; 		bsr	Audio_Sample_Set
000035EE                            ; 		bsr	Audio_Sample_Play
000035EE                            ;  		endif
000035EE                            		
000035EE 46FC 2000                   		move.w	#$2000,sr
00003604                            		
00003604                            ; --------------------------------------------
00003604                            ; Loop
00003604                            ; --------------------------------------------
00003604                            
00003604                            ; 		move.l	#$300000,(test_val)
00003604                            @loop:
00003604 6100 D288                   		bsr	Video_vsync
00003608                            		
00003608                            ;  		moveq	#0,d0
00003608                            ; 		move.l	#$00080008,d1
00003608                            ; 		move.l	(test_val),d2
00003608                            ; 		move.w	#$680|$2000,d3
00003608                            ; 		moveq	#6,d4
00003608                            ; 		bsr	Video_PrintVal
00003608                            ; 
00003608                            ;  		moveq	#0,d0
00003608                            ; 		move.l	#$00080009,d1
00003608                            ; 		move.l	(test_val),d2
00003608                            ; 		move.w	#$680|$2000,d3
00003608                            ; 		moveq	#2,d4
00003608                            ; 		bsr	Video_PrintVal
00003608                            		
00003608                            ; 		add.l	#1,(test_val)
00003608                            
00003608                            ; 		if MARS
00003608                            ; 		bsr	MarsMdl_Upd
00003608                            ; 		endif
00003608                            
00003608                            ; ------------
00003608                            ; TESTING SFX
00003608                            ; ------------
00003608                            
00003608 0839 0006 FFFF DE85        		btst	#bitJoyA,(RAM_Control_1+OnPress)
00003610 6700                        		beq.s	@nope
00003612 203C 0000 0000               		move.l	#Music_Level1,d0
00003618 7201                         		moveq 	#1,d1
0000361A 7400                         		moveq	#0,d2
0000361C 6100 DE1E                    		bsr	Audio_Track_play
00003620                            @nope:
00003620                            		
00003620                            ; ------------
00003620                            
00003620 0839 0007 FFFF DE85        		btst	#bitJoyStart,(RAM_Control_1+OnPress)
00003628 6700 FFDA                   		beq	@loop
0000362C 4279 FFFF DC06              		clr.w	(RAM_CurrLevel)
00003632 13FC 0001 FFFF DE4F        		move.b	#1,(RAM_GameMode)
0000363A 4E75                       		rts
0000363C                            		
0000363C                            ; ====================================================================
0000363C                            ; --------------------------------------------
0000363C                            ; Subs
0000363C                            ; --------------------------------------------
0000363C                            
0000363C                            BG_DEFORM:
0000363C 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
00003642 3606                       		move.w	d6,d3
00003644 343C 00DF                  		move.w	#224-1,d2
00003648                            @loop_hor:
00003648 3003                       		move.w	d3,d0
0000364A 6100 D662                  		bsr	CalcSine
0000364E E848                       		lsr.w	#4,d0
00003650 3080                       		move.w	d0,(a0)
00003652 D0FC 0004                  		adda	#4,a0
00003656 0643 0001                  		add.w	#1,d3
0000365A 51CA FFEC                  		dbf	d2,@loop_hor
0000365E                            		
0000365E 41F9 FFFF E2C0             		lea	(RAM_ScrlVer),a0
00003664 3606                       		move.w	d6,d3
00003666 343C 0013                  		move.w	#(320/16)-1,d2
0000366A                            @loop_ver:
0000366A 3003                       		move.w	d3,d0
0000366C 6100 D640                  		bsr	CalcSine
00003670 E848                       		lsr.w	#4,d0
00003672 3080                       		move.w	d0,(a0)
00003674 D0FC 0004                  		adda	#4,a0
00003678 0643 0002                  		add.w	#2,d3
0000367C 51CA FFEC                  		dbf	d2,@loop_ver
00003680                            		
00003680 0646 0001                  		add.w	#1,d6
00003684 4E75                       		rts
00003686                            	
00003686                            ; ; --------------------------------------------
00003686                            ; ; MARS ONLY
00003686                            ; ; 
00003686                            ; ; 3d test
00003686                            ; ; --------------------------------------------
00003686                            ; 
00003686                            ; 		if MARS
00003686                            ; MarsMdl_Init:
00003686                            ; 		clr.w	(model_buff+$10)
00003686                            ; 		bsr	MarsMdl_Set
00003686                            ; 
00003686                            ; ; ------------------
00003686                            ; ; Loop
00003686                            ; ; ------------------
00003686                            ; 
00003686                            ; MarsMdl_Upd:
00003686                            ; 		move.b	(RAM_Control_1+ExOnHold),d4
00003686                            ; 		btst	#bitJoyX,d4
00003686                            ;  		beq.s	@not_X
00003686                            ;  		add.w	#1,(model_buff+4)
00003686                            ; @not_X:
00003686                            ; 		btst	#bitJoyY,d4
00003686                            ;  		beq.s	@not_Y
00003686                            ;  		sub.w	#1,(model_buff+4)
00003686                            ; @not_Y:
00003686                            ; 		move.b	(RAM_Control_1+OnHold),d4
00003686                            ; 		btst	#bitJoyRight,d4
00003686                            ;  		beq.s	@not_right
00003686                            ;  		sub.w	#1,(model_buff)
00003686                            ; @not_right:
00003686                            ; 		btst	#bitJoyLeft,d4
00003686                            ;  		beq.s	@not_left
00003686                            ;  		add.w	#1,(model_buff)
00003686                            ; @not_left:
00003686                            ; 		btst	#bitJoyDown,d4
00003686                            ;  		beq.s	@not_down
00003686                            ;  		sub.w	#1,(model_buff+2)
00003686                            ; @not_down:
00003686                            ; 		btst	#bitJoyUp,d4
00003686                            ;  		beq.s	@not_up
00003686                            ;  		add.w	#1,(model_buff+2)
00003686                            ; @not_up:
00003686                            ; 
00003686                            ; 
00003686                            ; 		move.b	(RAM_Control_1+OnPress),d4
00003686                            ; 		btst	#bitJoyB,d4
00003686                            ;  		beq.s	@not_B
00003686                            ;  		add.w	#1,(model_buff+$10)
00003686                            ;  		bsr	MarsMdl_Set
00003686                            ; @not_B:
00003686                            ; 		btst	#bitJoyA,d4
00003686                            ;  		beq.s	@not_A
00003686                            ;  		sub.w	#1,(model_buff+$10)
00003686                            ;  		bsr	MarsMdl_Set
00003686                            ; @not_A:
00003686                            ; 		btst	#bitJoyC,d4
00003686                            ;  		beq.s	@not_C
00003686                            ;  		clr.w	(model_buff)
00003686                            ;  		clr.w	(model_buff+2)
00003686                            ;  		move.w	#0,(model_buff+4)
00003686                            ;  		clr.w	(model_buff+6)
00003686                            ;  		clr.w	(model_buff+8)
00003686                            ;  		clr.w	(model_buff+$A)
00003686                            ; @not_C:
00003686                            ; 
00003686                            ; ; Contoller 2
00003686                            ; 
00003686                            ; 		move.b	(RAM_Control_2+OnHold),d4
00003686                            ; 		btst	#bitJoyRight,d4
00003686                            ;  		beq.s	@not_right2
00003686                            ;  		add.w	#1,(model_buff+8)
00003686                            ; @not_right2:
00003686                            ; 		btst	#bitJoyLeft,d4
00003686                            ;  		beq.s	@not_left2
00003686                            ;  		sub.w	#1,(model_buff+8)
00003686                            ; @not_left2:
00003686                            ; 		btst	#bitJoyDown,d4
00003686                            ;  		beq.s	@not_down2
00003686                            ;  		add.w	#1,(model_buff+6)
00003686                            ; @not_down2:
00003686                            ; 		btst	#bitJoyUp,d4
00003686                            ;  		beq.s	@not_up2
00003686                            ;  		sub.w	#1,(model_buff+6)
00003686                            ; @not_up2:
00003686                            ; 
00003686                            ; 		btst	#bitJoyB,d4
00003686                            ;  		beq.s	@not_B2
00003686                            ;  		add.w	#1,(model_buff+$A)
00003686                            ; @not_B2:
00003686                            ; 		btst	#bitJoyA,d4
00003686                            ;  		beq.s	@not_A2
00003686                            ;  		sub.w	#1,(model_buff+$A)
00003686                            ; @not_A2:
00003686                            ; 
00003686                            ; ; ------------------------
00003686                            ; ; Show values
00003686                            ; ; ------------------------
00003686                            ; 
00003686                            ; 		lea	(model_buff),a1
00003686                            ; 		moveq	#2,d6
00003686                            ; 		move.l	#$00050002,d7
00003686                            ; @next3:
00003686                            ; 		moveq	#0,d0
00003686                            ; 		move.l	d7,d1
00003686                            ; 		move.w	(a1)+,d2
00003686                            ; 		move.w	#$2000|$580,d3
00003686                            ; 		moveq	#1,d4
00003686                            ; 		bsr	Video_PrintVal
00003686                            ; 		add.l	#$00050000,d7
00003686                            ; 		dbf	d6,@next3
00003686                            ; 		
00003686                            ; 		lea	(model_buff+6),a1
00003686                            ; 		moveq	#2,d6
00003686                            ; 		move.l	#$00050003,d7
00003686                            ; @next4:
00003686                            ; 		moveq	#0,d0
00003686                            ; 		move.l	d7,d1
00003686                            ; 		move.w	(a1)+,d2
00003686                            ; 		move.w	#$2000|$580,d3
00003686                            ; 		moveq	#1,d4
00003686                            ; 		bsr	Video_PrintVal
00003686                            ; 		add.l	#$00050000,d7
00003686                            ; 		dbf	d6,@next4
00003686                            ; 		
00003686                            ; 		moveq	#0,d0
00003686                            ; 		move.l	#$0008001A,d1
00003686                            ; 		move.w	(marsreg+comm14),d2
00003686                            ; 		move.w	#$2000|$580,d3
00003686                            ; 		moveq	#1,d4
00003686                            ; 		bsr	Video_PrintVal
00003686                            ; 
00003686                            ; ; 		lea	(marsreg+comm0),a1
00003686                            ; ; 		moveq	#3,d6
00003686                            ; ; 		move.l	#$00010019,d7
00003686                            ; ; @next:
00003686                            ; ; 		moveq	#0,d0
00003686                            ; ; 		move.l	d7,d1
00003686                            ; ; 		move.w	(a1)+,d2
00003686                            ; ; 		move.w	#$2000|$580,d3
00003686                            ; ; 		moveq	#1,d4
00003686                            ; ; 		bsr	Video_PrintVal
00003686                            ; ; 		add.l	#$00050000,d7
00003686                            ; ; 		dbf	d6,@next
00003686                            ; ; 		
00003686                            ; ; 		lea	(marsreg+comm8),a1
00003686                            ; ; 		moveq	#3,d6
00003686                            ; ; 		move.l	#$0001001A,d7
00003686                            ; ; @next2:
00003686                            ; ; 		moveq	#0,d0
00003686                            ; ; 		move.l	d7,d1
00003686                            ; ; 		move.w	(a1)+,d2
00003686                            ; ; 		move.w	#$2000|$580,d3
00003686                            ; ; 		moveq	#1,d4
00003686                            ; ; 		bsr	Video_PrintVal
00003686                            ; ; 		add.l	#$00050000,d7
00003686                            ; ; 		dbf	d6,@next2
00003686                            ; 		
00003686                            ; ; ------------------------
00003686                            ; ; Send data
00003686                            ; ; ------------------------
00003686                            ; 
00003686                            ; @busy:		tst.b	(marsreg+comm0+1)
00003686                            ; 		bne.s	@busy
00003686                            ; 		clr.l	(marsreg+comm4)
00003686                            ; 		clr.l	(marsreg+comm8)
00003686                            ; 		move.w	#$14,(marsreg+comm0)
00003686                            ; 		lea	(marsreg+comm4),a0
00003686                            ; 		move.w	#0,(a0)+
00003686                            ; 		move.w	(model_buff),(a0)+
00003686                            ; 		move.w	(model_buff+2),(a0)+
00003686                            ; 		move.w	(model_buff+4),(a0)+
00003686                            ;  		bset	#0,(marsreg+intctl)
00003686                            ;  		
00003686                            ; @busy2:		tst.b	(marsreg+comm0+1)
00003686                            ; 		bne.s	@busy2
00003686                            ; 		clr.l	(marsreg+comm4)
00003686                            ; 		clr.l	(marsreg+comm8)
00003686                            ; 		move.w	#$15,(marsreg+comm0)
00003686                            ; 		lea	(marsreg+comm4),a0
00003686                            ; 		move.w	#0,(a0)+
00003686                            ; 		move.w	(model_buff+6),(a0)+
00003686                            ; 		move.w	(model_buff+8),(a0)+
00003686                            ; 		move.w	(model_buff+$A),(a0)+
00003686                            ;  		bset	#0,(marsreg+intctl)
00003686                            ; 		rts
00003686                            ; 		
00003686                            ; ; ------------------------------------
00003686                            ; 
00003686                            ; MarsMdl_Set:
00003686                            ; 		btst	#0,(marsreg+intctl)
00003686                            ; 		bne.s	@busyinit
00003686                            ; 		move.w	#$10,(marsreg+comm0)
00003686                            ; 		lea	(marsreg+comm4),a0
00003686                            ; 		move.w	(model_buff+$10),d0
00003686                            ; 		lsl.w	#4,d0
00003686                            ; 		move.l	List_Models(pc,d0.w),(a0)+
00003686                            ; 		move.w	#0,(a0)+
00003686                            ;  		bset	#0,(marsreg+intctl)
00003686                            ;  		
00003686                            ;  		clr.l	(model_buff)
00003686                            ;  		move.w	#0,(model_buff+4)
00003686                            ;  		
00003686                            ;  		clr.l	(model_buff+6)
00003686                            ; 		clr.w	(model_buff+$A)
00003686                            ; 		
00003686                            ; ; 		move.w	(model_buff+$10),d0
00003686                            ; ; 		lsl.w	#4,d0
00003686                            ; ;  		lea 	List_Models+4(pc,d0.w),a0
00003686                            ; ; 		moveq	#0,d0
00003686                            ; ; 		move.l	#$00170001,d1
00003686                            ; ; 		move.w	#$580|$2000,d2
00003686                            ; ; 		bsr	Video_PrintText
00003686                            ;  		
00003686                            ; @busyinit:
00003686                            ; 		rts
00003686                            ; 		
00003686                            ; 		endif
00003686                            		
00003686                            ; ====================================================================
00003686                            ; --------------------------------------------
00003686                            ; VBlank
00003686                            ; --------------------------------------------
00003686                            
00003686                            ; ====================================================================		
00003686                            ; --------------------------------------------
00003686                            ; HBlank
00003686                            ; --------------------------------------------
00003686                            		
00003686                            ; ====================================================================		
00003686                            ; --------------------------------------------
00003686                            ; Data
00003686                            ; --------------------------------------------
00003686                            
00003686                            		
00003686 4F62 6A20 2D58 2D20 202D+  Asc_MarsMdl:	dc.b "Obj -X-  -Y-  -Z-  Wld -X-  -Y-  -Z- ",$A
000036AC 2020 5020 3030 3030 2030+  		dc.b "  P 0000 0000 0000   P 0000 0000 0000",$A
000036D2 2020 5220 3030 3030 2030+  		dc.b "  R 0000 0000 0000   R 0000 0000 0000",$A
000036F8 0A                         		dc.b $A
000036F9 0A                         		dc.b $A
000036FA 0A                         		dc.b $A
000036FB 0A                         		dc.b $A
000036FC 0A                         		dc.b $A
000036FD 0A                         		dc.b $A
000036FE 0A                         		dc.b $A
000036FF 0A                         		dc.b $A
00003700 0A                         		dc.b $A
00003701 0A                         		dc.b $A
00003702 0A                         		dc.b $A
00003703 0A                         		dc.b $A
00003704 0A                         		dc.b $A
00003705 0A                         		dc.b $A
00003706 0A                         		dc.b $A
00003707 0A                         		dc.b $A
00003708 0A                         		dc.b $A
00003709 0A                         		dc.b $A
0000370A 0A                         		dc.b $A
0000370B 0A                         		dc.b $A
0000370C 0A                         		dc.b $A
0000370D 0A                         		dc.b $A
0000370E 4661 6365 733A 2030 3030+  		dc.b "Faces: 0000",$A
0000371A 00                         		dc.b 0
0000371C 00                         		even
0000371C                            		
0000371C                            Asc_Karasucia:
0000371C 4B61 7261 7375 6369 612D+  		dc.b "Karasucia-MD game engine",$A
00003735 0A                         		dc.b $A
00003736 5072 6F6A 6563 743A 2044+  		dc.b "Project: Dominoe Adventures",$A
00003752 0A                         		dc.b $A
00003753 0A                         		dc.b $A
00003754 0A                         		dc.b $A
00003755 0A                         		dc.b $A
00003756 0A                         		dc.b $A
00003757 0A                         		dc.b $A
00003758 0A                         		dc.b $A
00003759 0A                         		dc.b $A
0000375A 0A                         		dc.b $A
0000375B 0A                         		dc.b $A
0000375C 0A                         		dc.b $A
0000375D 0A                         		dc.b $A
0000375E 0A                         		dc.b $A
0000375F 0A                         		dc.b $A
00003760 0A                         		dc.b $A
00003761 0A                         		dc.b $A
00003762 0A                         		dc.b $A
00003763 0A                         		dc.b $A
00003764 0A                         		dc.b $A
00003765 0A                         		dc.b $A
00003766 0A                         		dc.b $A
00003767 0A                         		dc.b $A
00003768 2843 2947 4636 3420 3230+  		dc.b "(C)GF64 2017"
00003774 00                         		dc.b 0
00003776 00                         		even
00003776                            		
00003776                            Art_DebugFont:	incbin "engine/shared/dbgfont.bin"
00004776                            Art_DebugFont_e:
00004776                            		even
00004776                            		
00004776                            		
00004776                            		include "engine/modes/level/md.asm"
00004776                            ; ====================================================================
00004776                            ; -------------------------------------------------
00004776                            ; Level
00004776                            ; 
00004776                            ; CODE ONLY
00004776                            ; -------------------------------------------------
00004776                            
00004776                            ; --------------------------------------------
00004776                            ; RAM
00004776                            ; --------------------------------------------
00004776                            
00004776                            		rsset RAM_ModeBuffer
00004776                            ;Prize data: $FF0000-$FF87FF
00004776 =FFFFBC00                  RAM_Level	rs.b $440
00004776 =FFFFC040                  RAM_ObjectSys	rs.b $1B80
00004776 =FFFFDBC0                  sizeof_lvl	rs.l 0
00004776                            ;       		inform 0,"Level mode uses: %h",(sizeof_lvl-RAM_ModeBuffer)
00004776                            		
00004776                            ; --------------------------------------------
00004776                            ; Init
00004776                            ; --------------------------------------------
00004776                            
00004776                            mode_Level:
00004788 46FC 2700                  		move.w	#$2700,sr
0000478C 4279 FFFF DC06             		clr.w	(RAM_CurrLevel)
00004792 6100 BE9C                  		bsr	Video_ClearAll
00004796                            		
00004796                            ; --------------
00004796                            ; Load resources
00004796                            ; --------------
00004796                            
00004796 41F9 0000 0000             		lea	(Pal_LvlCoinItms),a0
0000479C 43F9 FFFF EA10             		lea	(RAM_PalFade+$40),a1
000047A2 303C 000F                  		move.w	#16-1,d0
000047A6                            @copyextpal:
000047A6 32D8                       		move.w	(a0)+,(a1)+
000047A8 51C8 FFFC                  		dbf	d0,@copyextpal
000047AC                            		
000047AC 41F9 0000 0000             		lea	(Pal_Player),a0
000047B2 303C 000F                  		move.w	#16-1,d0
000047B6                            @copychrpal:
000047B6 32D8                       		move.w	(a0)+,(a1)+
000047B8 51C8 FFFC                  		dbf	d0,@copychrpal
000047BC                            		
000047BC                            		;Same art for everything
000047BC 41F9 0000 0000             		lea	(Art_Lvl_Test),a0
000047C2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,(vdp_ctrl)
000047CC 303C 0000                  		move.w	#((Art_Lvl_Test_e-Art_Lvl_Test)/4)-1,d0
000047D0                            @copy_art:
000047D0 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
000047D6 51C8 FFF8                  		dbf	d0,@copy_art
000047DA                            		
000047DA 41F9 0000 0000             		lea	(Art_LvlBG_Test),a0
000047E0 23FC 7800 0000 00C0 0004   		move.l	#$78000000,(vdp_ctrl)
000047EA 303C 0000                  		move.w	#((Art_LvlBG_Test_e-Art_LvlBG_Test)/4)-1,d0
000047EE                            @dobgart:
000047EE 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
000047F4 51C8 FFF8                  		dbf	d0,@dobgart
000047F8                               				
000047F8 6100 0000                  		bsr	Level_Init
000047FC 43F9 0000 0000                		lea	(artdata_Level_Test),a1
00004802 6100 0000                     		bsr	Level_LoadArtList
00004806                            
00004806                            ; **************
00004806                            ; DEBUG ONLY
00004806                            ; **************
00004806                            
00004806 23FC 5000 0003 00C0 0004   		move.l	#$50000003,(vdp_ctrl)
00004810 41F9 0000 3776             		lea	(Art_DebugFont),a0
00004816 303C 03FF                  		move.w	#((Art_DebugFont_e-Art_DebugFont)/4)-1,d0
0000481A                            @dbg_loop:
0000481A 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
00004820 51C8 FFF8                  		dbf	d0,@dbg_loop
00004824                            		
00004824                            ;    		move.l	#$40800001,(vdp_ctrl)		
00004824                            ;    		move.l	#$17100000,(vdp_data)
00004824                            ;    		move.l	#$71700000,(vdp_data)
00004824                            ;    		move.l	#$17100000,(vdp_data)
00004824                            ;      		move.w	#1,(RAM_CurrLevel)
00004824                                 		
00004824                            ;      		if MCD=0
00004824                            ;  		move.l	#TEST_IT,d0
00004824                            ;  		moveq 	#7,d1
00004824                            ;  		moveq	#0,d2
00004824                            ;   		bsr	Audio_Track_play
00004824                            ;   		endif
00004824                            		
00004824                            ; --------------
00004824                            ; Restart
00004824                            ; --------------
00004824                            
00004824                            @restart:
00004824 6100 BE62                  		bsr	Video_ClearScroll
00004828 6100 BE1C                  		bsr	Video_ClearSprites
0000482C 6100 0000                    		bsr	Objects_Init
00004830 6100 0000                  		bsr	Level_FromList
00004834 6100 0000                    		bsr	Level_Draw
00004838 6100 0000                     		bsr	Level_Run
0000483C                               		
0000483C 41F9 0000 0000             		lea	(Map_LvlBG_Test),a0
00004842 7001                        		moveq	#1,d0
00004844 223C 0000 0000              		move.l	#$00000000,d1
0000484A 243C 003F 001F                		move.l	#$003F001F,d2
00004850 363C 21C0                     		move.w	#$21C0,d3
00004854 6100 BFB0                     		bsr	Video_MakeMap
00004858                               		
00004858 203C 0000 0000               		move.l	#Music_Level1,d0
0000485E 7201                         		moveq 	#1,d1
00004860 7400                         		moveq	#0,d2
00004862 6100 CBD8                    		bsr	Audio_Track_play
00004866                              		
00004866 46FC 2000                   		move.w	#$2000,sr
0000486A                             		
0000486A 6100 0000                    		bsr	Objects_Run
0000486E                            ; 		bsr	Level_DbgInit
00004880                             		
00004880                            ; --------------------------------------------
00004880                            ; Loop
00004880                            ; --------------------------------------------
00004880                            
00004880                            @loop:
00004880 6100 C00C                   		bsr	Video_vsync
00004884                             		
00004884 6100 0000                     		bsr	Level_BlockUpd	
00004888 6100 0000                    		bsr	Objects_Run
0000488C 6100 0000                     		bsr	Level_Run
00004890                            ;    		bsr	Level_Debug
00004890                            		
00004890                            ; -----------------------------------------
00004890                            
00004890 0839 0007 FFFF DE85        		btst	#bitJoyStart,(RAM_Control_1+OnPress)
00004898 6700                        		beq.s	@ignore_st
0000489A 4239 FFFF DE4F              		clr.b	(RAM_GameMode)
000048A0 4E75                        		rts
000048A2                            @ignore_st:
000048A2                            ; 		btst	#bitJoyA,(RAM_Control_2+OnHold)
000048A2                            ;  		beq.s	@ignore_d
000048A2                            ;  		move.b	#1,(RAM_ModeReset)
000048A2                            ;   		add.w	#1,(RAM_CurrLevel)
000048A2                            ; 
000048A2                            ; @ignore_d:
000048A2 4A39 FFFF DE4C             		tst.b	(RAM_ModeReset)
000048A8 6700 FFD6                  		beq	@loop
000048AC 4239 FFFF DE4C             		clr.b	(RAM_ModeReset)
000048B2                            		
000048B2 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
000048B8 6700                       		beq.s	@gameover
000048CC 46FC 2700                   		move.w	#$2700,sr
000048D0 6000 FF52                   		bra	@Restart
000048D4                            
000048D4                            ; --------------------------------------------
000048D4                            ; Game Over
000048D4                            ; --------------------------------------------
000048D4                            
000048D4                            @gameover:
000048D4 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
000048DA 4E75                       		rts
000048DC                            		
000048DC                            ; ====================================================================
000048DC                            ; --------------------------------------------
000048DC                            ; Subs
000048DC                            ; --------------------------------------------
000048DC                            
000048DC                            Level_DbgInit:
000048DC                            ; 		move.w	#$EEE,(RAM_PalFade+$42)
000048DC 41FA 0000                  		lea	ascDebugTop(pc),a0
000048E0 7002                       		moveq	#2,d0
000048E2 223C 0000 0000             		move.l	#$00000000,d1
000048E8 343C 0680                  		move.w	#$680,d2
000048EC 6100 BF6E                  		bsr	Video_PrintText
000048F0                            		
000048F0 23FC 9100 9201 00C0 0004   		move.l	#$91009201,(vdp_ctrl)
000048FA                            		
000048FA                            Level_Debug:
000048FA                            ;  		moveq	#2,d0
000048FA                            ; 		move.l	#$00060000,d1
000048FA                            ; 		moveq	#0,d2
000048FA                            ; 		move.w	(RAM_P1_Coins),d2
000048FA                            ; 		move.w	#$680,d3
000048FA                            ; 		moveq	#4,d4
000048FA                            ; 		bsr	Video_PrintVal
000048FA                            ; 
000048FA                            ;  		moveq	#2,d0
000048FA                            ; 		move.l	#$000F0000,d1
000048FA                            ; 		moveq	#0,d2
000048FA                            ; 		move.w	(RAM_P1_Hits),d2
000048FA                            ; 		move.w	#$680,d3
000048FA                            ; 		moveq	#4,d4
000048FA                            ; 		bsr	Video_PrintVal
000048FA                            
000048FA 7002                        		moveq	#2,d0
000048FC 223C 001B 0000             		move.l	#$001B0000,d1
00004902 2439 0000 0000             		move.l	(RAM_ObjBuffer+obj_y_spd),d2
00004908 363C 0680                  		move.w	#$680,d3
0000490C 7802                       		moveq	#2,d4
0000490E 6100 BE8A                  		bsr	Video_PrintVal
00004912                            		
00004912 7002                        		moveq	#2,d0
00004914 223C 0018 0000             		move.l	#$00180000,d1
0000491A 7400                       		moveq	#0,d2
0000491C 1439 0000 0000             		move.b	(RAM_ObjBuffer+obj_col),d2
00004922 363C 0680                  		move.w	#$680,d3
00004926 7800                       		moveq	#0,d4
00004928 6100 BE70                  		bsr	Video_PrintVal
0000492C                            		
0000492C 7002                        		moveq	#2,d0
0000492E 223C 000C 0000             		move.l	#$000C0000,d1
00004934 7400                       		moveq	#0,d2
00004936 1439 0000 0000             		move.b	(RAM_ObjBuffer+obj_status),d2
0000493C 363C 0680                  		move.w	#$680,d3
00004940 7800                       		moveq	#0,d4
00004942 6000 BE56                  		bra	Video_PrintVal
00004946                            		
00004946                            ; -----------------------
00004946                            
00004946                            Level_FromList:
00004946 3039 FFFF DC06             		move.w	(RAM_CurrLevel),d0
0000494C E948                       		lsl.w	#4,d0
0000494E 49F9 0000 0000             		lea	(LevelList),a4
00004954 2074 0000                  		movea.l	(a4,d0.w),a0
00004958 6100 0000                  		bsr	Level_Load
0000495C 43F9 0000 0000             		lea	(RAM_LvlPlanes),a1
00004962 1374 0000 0000             		move.b	(a4,d0.w),lvl_type(a1)
00004968                            		
00004968 41F9 0000 0000             		lea	(Pal_LvlMain_Gray),a0
0000496E 43F9 FFFF E9D0             		lea	(RAM_PalFade),a1
00004974 7000                       		moveq	#0,d0
00004976 303C 001F                  		move.w	#32-1,d0
0000497A                            @copy_pal:
0000497A 32D8                       		move.w	(a0)+,(a1)+
0000497C 51C8 FFFC                  		dbf	d0,@copy_pal
00004980                            		
00004980 3239 FFFF DC06             		move.w	(RAM_CurrLevel),d1
00004986 E949                       		lsl.w	#4,d1
00004988                            		
00004988 7000                       		moveq	#0,d0
0000498A 3034 1008                   		move.w	8(a4,d1.w),d0
0000498E 4840                        		swap	d0
00004990 3034 100A                     		move.w	$A(a4,d1.w),d0
00004994 4239 0000 0000                 		clr.b	(RAM_ObjBuffer+obj_index)
0000499A 23FC 0000 0000 0000 0000       		move.l	#Obj_Player,(RAM_ObjBuffer)
000049A4 6100 0000                      		bsr	Plyr_SetStartPos
000049A8                            		
000049A8 3239 FFFF DC06             		move.w	(RAM_CurrLevel),d1
000049AE E949                       		lsl.w	#4,d1
000049B0 43F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*4)),a1
000049B6 3374 100C 0000              		move.w	$C(a4,d1.w),obj_x(a1)
000049BC 3374 100E 0000                		move.w	$E(a4,d1.w),obj_y(a1)
000049C2 237C 0000 0000 0000        		move.l	#Obj_EndFlag,obj_code(a1)
000049CA 43F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*6)),a1	
000049D0 237C 0000 0000 0000        		move.l	#Obj_HudInfo,obj_code(a1)
000049D8 337C 0000 0000             		move.w	#0,obj_x(a1)
000049DE 337C 0000 0000             		move.w	#0,obj_y(a1)
000049E4 4E75                       		rts
000049E6                            		
000049E6 6F62 6A5F 7374 6174 7573+  ascDebugTop:	dc.b "obj_status: 00 obj_col: 00              ",0
00004A0F                            ; 		dc.b "                              00000000",0
00004A10 00                         		even
00004A10                            		
00004A10                            ; --------------------------------------------
00004A10                            
00004A10                            		include	"engine/modes/level/subs/level.asm"
00004A10                            ; ====================================================================
00004A10                            ; ---------------------------------------------
00004A10                            ; Level system
00004A10                            ; ---------------------------------------------
00004A10                            
00004A10                            ; *** NOTES ***
00004A10                            ; MAX Prize size: $7FFF
00004A10                            
00004A10                            ; --------------------------------------------
00004A10                            ; Variables
00004A10                            ; --------------------------------------------
00004A10                            
00004A10                            		rsreset
00004A10 =00000000                  lvl_objects	rs.l 1
00004A10 =00000004                  lvl_blocks	rs.l 1
00004A10 =00000008                  lvl_przblocks	rs.l 1
00004A10 =0000000C                  lvl_layout	rs.l 1
00004A10 =00000010                  lvl_hilayout	rs.l 1
00004A10 =00000014                  lvl_collision	rs.l 1
00004A10 =00000018                  lvl_prizes	rs.l 1
00004A10 =0000001C                  lvl_x		rs.l 1
00004A10 =00000020                  lvl_y		rs.l 1
00004A10 =00000024                  lvl_x_camspd	rs.l 1
00004A10 =00000028                  lvl_y_camspd	rs.l 1
00004A10 =0000002C                  lvl_timer	rs.l 1
00004A10 =00000030                  lvl_size_x	rs.w 1
00004A10 =00000032                  lvl_size_y	rs.w 1
00004A10 =00000034                  lvl_maxcam_x	rs.w 1
00004A10 =00000036                  lvl_maxcam_y	rs.w 1
00004A10 =00000038                  lvl_camflags	rs.w 1
00004A10 =0000003A                  lvl_flags	rs.w 1
00004A10 =0000003C                  lvl_type	rs.w 1
00004A10 =0000003E                  lvl_lastx	rs.w 1
00004A10 =00000040                  lvl_lasty	rs.w 1
00004A10 =00000042                  sizeof_lvlpln	rs.l 0
00004A10                            
00004A10                            ; --------------------------------------------
00004A10                            
00004A10 =00000046                  max_lvlobj	equ	70
00004A10                            
00004A10 =00000000                  bitLvlDirR	equ	0
00004A10 =00000001                  bitLvlDirL	equ	1
00004A10 =00000002                  bitLvlDirD	equ	2
00004A10 =00000003                  bitLvlDirU	equ	3
00004A10 =00000004                  bitLvlDontUpd	equ	4
00004A10                            
00004A10                            ; RAM_LevelPrizes	equ	$FF0000
00004A10                            
00004A10                            ; --------------------------------------------
00004A10                            ; RAM
00004A10                            ; --------------------------------------------
00004A10                            
00004A10                            		rsset RAM_Level
00004A10 =FFFFBC00                  RAM_LvlPlanes	rs.b sizeof_lvlpln
00004A10 =FFFFBC42                  RAM_LevelObjPos	rs.w (max_lvlobj)*5
00004A10 =FFFFBEFE                  RAM_LvlAnim	rs.w 16
00004A10 =FFFFBF1E                  RAM_PrizeHide	rs.w 1+(2*16)
00004A10 =FFFFBF60                  RAM_PrizeShow	rs.w 1+(2*16)
00004A10 =FFFFBFA2                  RAM_PrizeUsed	rs.w 1+(2*16)
00004A10                            
00004A10 =FFFFBFE4                  sizeof_lvl2	rs.l 0
00004A10                            ;    		inform 0,"Level system uses: %h",(sizeof_lvl2-RAM_Level)
00004A10                            		
00004A10                            ; ====================================================================	
00004A10                            ; --------------------------------------------
00004A10                            ; Init
00004A10                            ; --------------------------------------------
00004A10                            
00004A10                            Level_Init:
00004A10 4279 FFFF DC02             		clr.w	(RAM_P1_Coins)
00004A16 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
00004A1C 6600                       		bne.s	@firsttime
00004A1E 33FC 0003 FFFF DC00        		move.w	#3,(RAM_P1_Lives)
00004A26                            @firsttime:
00004A26 13FC 0003 FFFF ED1B          		move.b	#%11,(RAM_VidRegs+$B)		; H: line V: full
00004A2E                            ;      		move.b	#%10000111,(RAM_VidRegs+$C)	; H40 + Double interlace
00004A2E 13FC 0001 FFFF ED20          		move.b	#1,(RAM_VidRegs+$10)		; 512x256 layer size
00004A36 6100 BC7E                    		bsr	Video_Update
00004A3A                             		
00004A3A 41F9 0000 0000             		lea	(Art_LvlPrizes),a0
00004A40 23FC 7000 0002 00C0 0004   		move.l	#$70000002,(vdp_ctrl)
00004A4A 303C 0000                  		move.w	#((Art_LvlPrizes_e-Art_LvlPrizes)/4)-1,d0
00004A4E                            @doprzart:
00004A4E 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
00004A54 51C8 FFF8                  		dbf	d0,@doprzart
00004A58                            		
00004A58                            ; 		move.w	#-1,(RAM_LvlPlanes+lvl_lastx)b
00004A58                            ; 		move.w	#-1,(RAM_LvlPlanes+lvl_lasty)		
00004A58 4E75                       		rts
00004A5A                            		
00004A5A                            ; ====================================================================		
00004A5A                            ; --------------------------------------------
00004A5A                            ; Loop
00004A5A                            ; --------------------------------------------
00004A5A                            
00004A5A                            Level_Run:
00004A5A 4DF9 FFFF BC00             		lea	(RAM_LvlPlanes),a6
00004A60                            		
00004A60 6100 0000                   		bsr	Lvl_RefreshObj
00004A64 6100 0000                  		bsr	Lvl_DrawScrl
00004A68 6100 0000                  		bsr	Lvl_Animation
00004A6C 6000 0000                  		bra	Lvl_Deform
00004A70                            		
00004A70                            ; -----------------------------------
00004A70                             
00004A70                            Level_BlockUpd:
00004A70 4DF9 FFFF BC00             		lea	(RAM_LvlPlanes),a6
00004A76 4BF9 FFFF BF1E             		lea	(RAM_PrizeHide),a5
00004A7C 3C15                       		move.w	(a5),d6
00004A7E 425D                       		clr.w	(a5)+
00004A80 4A46                       		tst.w	d6
00004A82 6700                       		beq.s	@skip_hide
00004A84 0446 0001                  		sub.w	#1,d6
00004A88                            @next_hide:
00004A88 2015                       		move.l	(a5),d0
00004A8A 6100 0000                   		bsr	Lvl_DoHidePrz
00004A8E 429D                        		clr.l	(a5)+
00004A90 51CE FFF6                   		dbf	d6,@next_hide
00004A94                            @skip_hide:
00004A94                            
00004A94 4BF9 FFFF BF60             		lea	(RAM_PrizeShow),a5
00004A9A 3C15                       		move.w	(a5),d6
00004A9C 425D                       		clr.w	(a5)+
00004A9E 4A46                       		tst.w	d6
00004AA0 6700                       		beq.s	@skip_show
00004AA2 0446 0001                  		sub.w	#1,d6
00004AA6                            @next_show:
00004AA6 2015                       		move.l	(a5),d0
00004AA8 6100 0000                   		bsr	Lvl_DoShowPrz
00004AAC 429D                        		clr.l	(a5)+
00004AAE 51CE FFF6                   		dbf	d6,@next_show
00004AB2                            @skip_show:
00004AB2                            		
00004AB2 4E75                       		rts
00004AB4                            		
00004AB4                            ; ====================================================================
00004AB4                            ; --------------------------------------------
00004AB4                            ; Subs
00004AB4                            ; --------------------------------------------
00004AB4                            
00004AB4                            Lvl_DrawScrl:
00004AB4                            
00004AB4                            ; -----------------------------------
00004AB4                            ; RIGHT
00004AB4                            ; -----------------------------------
00004AB4                            
00004AB4 302E 003E                  		move.w	lvl_lastx(a6),d0
00004AB8 322E 001C                  		move.w	lvl_x(a6),d1
00004ABC B240                       		cmp.w	d0,d1
00004ABE 6700 0000                  		beq	@dontupdL
00004AC2 3D41 003E                  		move.w	d1,lvl_lastx(a6)
00004AC6                            		
00004AC6 082E 0000 003A             		btst	#bitLvlDirR,lvl_flags(a6)
00004ACC 6700 0000                  		beq	@dontupdR
00004AD0 08AE 0000 003A             		bclr	#bitLvlDirR,lvl_flags(a6)
00004AD6 303C 4000                  		move.w	#$4000,d0
00004ADA 2A6E 000C                  		movea.l	lvl_layout(a6),a5
00004ADE 286E 0010                  		movea.l lvl_hilayout(a6),a4
00004AE2 266E 0018                  		movea.l	lvl_prizes(a6),a3
00004AE6                            		
00004AE6 382E 0020                  		move.w	lvl_y(a6),d4
00004AEA 3404                       		move.w	d4,d2
00004AEC E84A                       		lsr.w	#4,d2
00004AEE C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
00004AF2 DAC2                        		adda	d2,a5
00004AF4 D8C2                        		adda 	d2,a4
00004AF6 D6C2                        		adda	d2,a3
00004AF8                             		
00004AF8 3604                        		move.w	d4,d3
00004AFA 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
00004AFE 0644 0150                  		add.w	#$150,d4
00004B02 3204                       		move.w	d4,d1
00004B04 E849                       		lsr.w	#4,d1
00004B06 DAC1                        		adda	d1,a5
00004B08 D8C1                        		adda 	d1,a4
00004B0A D6C1                        		adda	d1,a3
00004B0C                            
00004B0C E44C                       		lsr.w	#2,d4
00004B0E 0244 007C                  		and.w	#$7C,d4
00004B12 E94B                       		lsl.w	#4,d3			; VDP YPOS
00004B14 0243 0F00                  		and.w	#$F00,d3
00004B18 D843                       		add.w	d3,d4
00004B1A 8840                       		or.w	d0,d4
00004B1C 4844                       		swap	d4
00004B1E 383C 0003                   		move.w	#3,d4
00004B22                             		
00004B22 363C 000F                   		move.w	#$F,d3
00004B26                            ;   		move.l	#$00010001,d1
00004B26                            @nextblkR:
00004B26 7000                       		moveq	#0,d0
00004B28 246E 0004                  		movea.l	lvl_blocks(a6),a2
00004B2C 1013                       		move.b	(a3),d0
00004B2E 4A00                        		tst.b	d0
00004B30 6700                        		beq.s	@noPrzR
00004B32 0800 0007                   		btst	#7,d0
00004B36 6600                        		bne.s	@noPrzR
00004B38 0240 007F                   		and.w	#$7F,d0
00004B3C 246E 0008                  		movea.l	lvl_przblocks(a6),a2
00004B40 6000                       		bra.s	@hasprzR
00004B42                            @noPrzR:
00004B42 1015                       		move.b	(a5),d0
00004B44 4A14                       		tst.b 	(a4)
00004B46 6700                       		beq.s 	@hasprzR
00004B48 1014                       		move.b 	(a4),d0
00004B4A                            @hasprzR:
00004B4A                            		
00004B4A E748                       		lsl.w	#3,d0
00004B4C 3232 0002                  		move.w	2(a2,d0.w),d1
00004B50 4841                       		swap	d1
00004B52 3232 0000                  		move.w	(a2,d0.w),d1
00004B56 3432 0006                   		move.w	6(a2,d0.w),d2
00004B5A 4842                        		swap	d2
00004B5C 3432 0004                   		move.w	4(a2,d0.w),d2
00004B60                            
00004B60 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00004B66 0684 0080 0000              		add.l	#$00800000,d4
00004B6C 0284 4FFE 0003               		and.l	#$4FFE0003,d4
00004B72                              		
00004B72 4843                         		swap	d3
00004B74 1639 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d3
00004B7A 0243 0006                   		and.w	#%110,d3
00004B7E 6700                        		beq.s	@dontShftV_R
00004B80 E249                        		lsr.w	#1,d1
00004B82 E24A                        		lsr.w	#1,d2
00004B84                            @dontShftV_R:
00004B84 4843                       		swap	d3
00004B86 4A14                       		tst.b 	(a4)
00004B88 6700                       		beq.s 	@nohiprioR
00004B8A 0041 8000                  		or.w 	#$8000,d1
00004B8E 0042 8000                  		or.w 	#$8000,d2
00004B92                            @nohiprioR:
00004B92 33C1 00C0 0000              		move.w	d1,(vdp_data)
00004B98 33C2 00C0 0000              		move.w	d2,(vdp_data)
00004B9E                             		
00004B9E 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
00004BA4 0241 0006                   		and.w	#%110,d1
00004BA8 6600                        		bne.s	@dontupdR_2
00004BAA                             		
00004BAA 4841                        		swap	d1
00004BAC 4842                        		swap	d2
00004BAE 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00004BB4 0684 0080 0000              		add.l	#$00800000,d4
00004BBA 0284 4FFE 0003               		and.l	#$4FFE0003,d4
00004BC0 4A14                         		tst.b 	(a4)
00004BC2 6700                       		beq.s 	@nohiprioR_2
00004BC4 0041 8000                  		or.w 	#$8000,d1
00004BC8 0042 8000                  		or.w 	#$8000,d2
00004BCC                            @nohiprioR_2:
00004BCC 33C1 00C0 0000              		move.w	d1,(vdp_data)
00004BD2 33C2 00C0 0000              		move.w	d2,(vdp_data)
00004BD8                             		
00004BD8                            @dontupdR_2:
00004BD8 DAEE 0030                   		add.w	lvl_size_x(a6),a5
00004BDC D8EE 0030                   		add.w 	lvl_size_x(a6),a4
00004BE0 D6EE 0030                   		add.w	lvl_size_x(a6),a3
00004BE4 51CB FF40                  		dbf	d3,@nextblkR
00004BE8                            @dontupdR:
00004BE8                            	
00004BE8                            ; -----------------------------------
00004BE8                            ; LEFT
00004BE8                            ; -----------------------------------
00004BE8                            
00004BE8 082E 0001 003A             		btst	#bitLvlDirL,lvl_flags(a6)
00004BEE 6700 0000                  		beq	@dontupdL
00004BF2 08AE 0001 003A             		bclr	#bitLvlDirL,lvl_flags(a6)
00004BF8 303C 4000                  		move.w	#$4000,d0
00004BFC 2A6E 000C                  		movea.l	lvl_layout(a6),a5
00004C00 286E 0010                  		movea.l lvl_hilayout(a6),a4
00004C04 266E 0018                  		movea.l	lvl_prizes(a6),a3
00004C08                            		
00004C08 382E 0020                  		move.w	lvl_y(a6),d4
00004C0C 3404                       		move.w	d4,d2
00004C0E E84A                       		lsr.w	#4,d2
00004C10 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
00004C14 DAC2                        		adda	d2,a5
00004C16 D8C2                        		adda	d2,a4
00004C18 D6C2                        		adda	d2,a3
00004C1A 3604                        		move.w	d4,d3
00004C1C                             		
00004C1C 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
00004C20 0444 0010                       		sub.w	#$010,d4		; TODO CHECAR SI FUNCIONA BIEN
00004C24 3204                       		move.w	d4,d1
00004C26 E849                       		lsr.w	#4,d1
00004C28 DAC1                        		adda	d1,a5
00004C2A D8C1                        		adda	d1,a4
00004C2C D6C1                        		adda	d1,a3
00004C2E                             		
00004C2E E44C                       		lsr.w	#2,d4
00004C30 0244 007C                  		and.w	#$7C,d4
00004C34 E94B                       		lsl.w	#4,d3			; VDP YPOS
00004C36 0243 0F00                  		and.w	#$F00,d3
00004C3A D843                       		add.w	d3,d4
00004C3C 8840                       		or.w	d0,d4
00004C3E 4844                       		swap	d4
00004C40 383C 0003                   		move.w	#3,d4
00004C44                             		
00004C44 363C 000F                   		move.w	#$F,d3
00004C48                            ;  		move.l	#$00010001,d1
00004C48                            @nextblkL:
00004C48 7000                       		moveq	#0,d0
00004C4A 246E 0004                  		movea.l	lvl_blocks(a6),a2
00004C4E 1013                       		move.b	(a3),d0
00004C50 4A00                        		tst.b	d0
00004C52 6700                        		beq.s	@noPrzL
00004C54 0800 0007                   		btst	#7,d0
00004C58 6600                        		bne.s	@noPrzL
00004C5A 0240 007F                   		and.w	#$7F,d0
00004C5E 246E 0008                  		movea.l	lvl_przblocks(a6),a2
00004C62 6000                       		bra.s	@hasprzL
00004C64                            @noPrzL:
00004C64 1015                       		move.b	(a5),d0
00004C66 4A14                       		tst.b 	(a4)
00004C68 6700                       		beq.s 	@hasprzL
00004C6A 1014                       		move.b 	(a4),d0
00004C6C                            @hasprzL:
00004C6C E748                       		lsl.w	#3,d0
00004C6E 3232 0002                  		move.w	2(a2,d0.w),d1
00004C72 4841                       		swap	d1
00004C74 3232 0000                  		move.w	(a2,d0.w),d1
00004C78 3432 0006                   		move.w	6(a2,d0.w),d2
00004C7C 4842                        		swap	d2
00004C7E 3432 0004                   		move.w	4(a2,d0.w),d2
00004C82                            
00004C82 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00004C88 0684 0080 0000              		add.l	#$00800000,d4
00004C8E 0284 4FFE 0003               		and.l	#$4FFE0003,d4
00004C94                              		
00004C94 4843                         		swap	d3
00004C96 1639 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d3
00004C9C 0243 0006                   		and.w	#%110,d3
00004CA0 6700                        		beq.s	@dontShftV_L
00004CA2 E249                        		lsr.w	#1,d1
00004CA4 E24A                        		lsr.w	#1,d2
00004CA6                            @dontShftV_L:
00004CA6 4843                       		swap	d3
00004CA8 4A14                       		tst.b 	(a4)
00004CAA 6700                       		beq.s 	@nohiprioL
00004CAC 0041 8000                  		or.w	#$8000,d1
00004CB0 0042 8000                  		or.w 	#$8000,d2
00004CB4                            @nohiprioL:
00004CB4 33C1 00C0 0000              		move.w	d1,(vdp_data)
00004CBA 33C2 00C0 0000              		move.w	d2,(vdp_data)
00004CC0                             		
00004CC0 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
00004CC6 0241 0006                   		and.w	#%110,d1
00004CCA 6600                        		bne.s	@dontupdL_2
00004CCC                             		
00004CCC 4841                        		swap	d1
00004CCE 4842                        		swap	d2
00004CD0 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00004CD6 0684 0080 0000              		add.l	#$00800000,d4
00004CDC 0284 4FFE 0003               		and.l	#$4FFE0003,d4
00004CE2 4A14                       		tst.b 	(a4)
00004CE4 6700                       		beq.s 	@nohiprioL_2
00004CE6 0041 8000                  		or.w	#$8000,d1
00004CEA 0042 8000                  		or.w 	#$8000,d2
00004CEE                            @nohiprioL_2:
00004CEE 33C1 00C0 0000              		move.w	d1,(vdp_data)
00004CF4 33C2 00C0 0000              		move.w	d2,(vdp_data)
00004CFA                             		
00004CFA                            @dontupdL_2:
00004CFA DAEE 0030                   		add.w	lvl_size_x(a6),a5
00004CFE D8EE 0030                   		add.w	lvl_size_x(a6),a4
00004D02 D6EE 0030                   		add.w	lvl_size_x(a6),a3
00004D06 51CB FF40                  		dbf	d3,@nextblkL
00004D0A                            @dontupdL:
00004D0A                            
00004D0A                            ; -----------------------------------
00004D0A                            ; DOWN
00004D0A                            ; -----------------------------------
00004D0A                            
00004D0A 302E 0040                  		move.w	lvl_lasty(a6),d0
00004D0E 322E 0020                  		move.w	lvl_y(a6),d1
00004D12 B240                       		cmp.w	d0,d1
00004D14 6700 0000                  		beq	@dontupdU
00004D18 3D41 0040                  		move.w	d1,lvl_lasty(a6)
00004D1C                            		
00004D1C 082E 0002 003A             		btst	#bitLvlDirD,lvl_flags(a6)
00004D22 6700 0000                  		beq	@dontupdD
00004D26 08AE 0002 003A             		bclr	#bitLvlDirD,lvl_flags(a6)
00004D2C                            			
00004D2C 2A6E 000C                  		movea.l	lvl_layout(a6),a5
00004D30 286E 0010                  		movea.l lvl_hilayout(a6),a4
00004D34 266E 0018                  		movea.l	lvl_prizes(a6),a3
00004D38                            
00004D38 382E 0020                  		move.w	lvl_y(a6),d4
00004D3C 303C 4000                  		move.w	#$4000,d0
00004D40 0644 00E0                  		add.w	#$0E0,d4
00004D44 3404                       		move.w	d4,d2
00004D46 E84A                       		lsr.w	#4,d2
00004D48 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
00004D4C DAC2                        		adda	d2,a5
00004D4E D8C2                        		adda	d2,a4
00004D50 D6C2                        		adda	d2,a3
00004D52 3604                        		move.w	d4,d3
00004D54                            
00004D54 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
00004D58 3404                       		move.w	d4,d2
00004D5A 3204                       		move.w	d4,d1
00004D5C E849                       		lsr.w	#4,d1
00004D5E DAC1                        		adda	d1,a5
00004D60 D8C1                        		adda 	d1,a4
00004D62 D6C1                        		adda	d1,a3
00004D64 E44C                       		lsr.w	#2,d4
00004D66 0244 007C                  		and.w	#$7C,d4
00004D6A E94B                       		lsl.w	#4,d3			; VDP YPOS
00004D6C 0243 0F00                  		and.w	#$F00,d3
00004D70 8843                       		or.w	d3,d4
00004D72 8840                       		or.w	d0,d4
00004D74 4844                       		swap	d4
00004D76 383C 0003                   		move.w	#3,d4
00004D7A                            
00004D7A 363C 0015                   		move.w	#$15,d3
00004D7E                            ;  		move.l	#$00010001,d1
00004D7E 2A04                        		move.l	d4,d5
00004D80 0285 4F80 0003              		and.l	#$4F800003,d5
00004D86 0284 007E 0000              		and.l	#$007E0000,d4
00004D8C                            @nextblkD:
00004D8C                            
00004D8C 7000                       		moveq	#0,d0
00004D8E 246E 0004                  		movea.l	lvl_blocks(a6),a2
00004D92 1013                       		move.b	(a3),d0
00004D94 4A00                       		tst.b	d0
00004D96 6700                       		beq.s	@noPrzD
00004D98 0800 0007                  		btst	#7,d0
00004D9C 6600 0000                  		bne	@noPrzD
00004DA0 0240 007F                  		and.w	#$7F,d0
00004DA4 246E 0008                  		movea.l	lvl_przblocks(a6),a2
00004DA8 6000                       		bra.s	@hasprzD
00004DAA                            @noPrzD:
00004DAA 1015                       		move.b	(a5),d0
00004DAC 4A14                       		tst.b 	(a4)
00004DAE 6700                       		beq.s 	@hasprzD
00004DB0 1014                       		move.b 	(a4),d0
00004DB2                            @hasprzD:
00004DB2                            
00004DB2                            
00004DB2                            ; 		moveq	#0,d0
00004DB2                            ; 		movea.l	lvl_przblocks(a6),a2
00004DB2                            ; 		move.b	(a3),d0
00004DB2                            ; 		tst.b	d0
00004DB2                            ; 		bne.s	@hasprzD
00004DB2                            ; 		movea.l	lvl_blocks(a6),a2
00004DB2                            ; 		move.b	(a5),d0
00004DB2                            ; 		tst.b 	(a4)
00004DB2                            ; 		beq.s 	@hasprzD
00004DB2                            ; 		move.b	(a4),d0
00004DB2                            ; @hasprzD:
00004DB2 E748                       		lsl.w	#3,d0
00004DB4                            		
00004DB4 3232 0000                  		move.w	(a2,d0.w),d1
00004DB8 4841                       		swap	d1
00004DBA 3232 0004                  		move.w	4(a2,d0.w),d1
00004DBE 3432 0002                   		move.w	2(a2,d0.w),d2
00004DC2 4842                        		swap	d2
00004DC4 3432 0006                   		move.w	6(a2,d0.w),d2
00004DC8                             		
00004DC8 8885                       		or.l	d5,d4
00004DCA 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00004DD0                             		
00004DD0                            *  		move.b	(RAM_VidRegs+$C),d2
00004DD0                            *  		and.w	#%110,d2
00004DD0                            *  		beq.s	@dontshftD
00004DD0                            *  		swap 	d1
00004DD0                            *  		move.w	d1,d2
00004DD0                            *  		and.w	#$7FF,d2
00004DD0                            *  		and.w	#$F800,d1
00004DD0                            *  		lsr.w	#1,d2
00004DD0                            *  		or.w	d2,d1
00004DD0                            *  		swap 	d1
00004DD0                            *  		move.w	d1,d2
00004DD0                            *  		and.w	#$7FF,d2
00004DD0                            *  		and.w	#$F800,d1
00004DD0                            *  		lsr.w	#1,d2
00004DD0                            *  		or.w	d2,d1
00004DD0                            *  		
00004DD0                            * @dontshftD:
00004DD0                             		
00004DD0 4A14                         		tst.b 	(a4)
00004DD2 6700                        		beq.s	@nohiprioD
00004DD4 0081 8000 8000              		or.l	#$80008000,d1
00004DDA                            @nohiprioD:
00004DDA 23C1 00C0 0000              		move.l	d1,(vdp_data)
00004DE0                            
00004DE0                            *   		move.b	(RAM_VidRegs+$C),d0
00004DE0                            *  		and.w	#%110,d0
00004DE0                            *  		bne.s	@dontshftD_2
00004DE0                             		
00004DE0 2005                         		move.l	d5,d0
00004DE2 8084                       		or.l	d4,d0
00004DE4 0680 0080 0000               		add.l	#$00800000,d0
00004DEA 23C0 00C0 0004               		move.l	d0,(vdp_ctrl)
00004DF0 4A14                         		tst.b 	(a4)
00004DF2 6700                        		beq.s	@nohiprioD_2
00004DF4 0082 8000 8000              		or.l	#$80008000,d2
00004DFA                            @nohiprioD_2:
00004DFA 23C2 00C0 0000              		move.l	d2,(vdp_data)
00004E00                             		
00004E00                            @dontshftD_2:
00004E00 0684 0004 0000              		add.l	#$040000,d4
00004E06 0284 007E 0000               		and.l	#$7E0000,d4
00004E0C                              		
00004E0C DAFC 0001                   		add.w	#1,a5
00004E10 D8FC 0001                   		add.w	#1,a4
00004E14 D6FC 0001                   		add.w	#1,a3
00004E18 51CB FF72                  		dbf	d3,@nextblkD
00004E1C                            @dontupdD:
00004E1C                            
00004E1C                            ; -----------------------------------
00004E1C                            ; UP
00004E1C                            ; -----------------------------------
00004E1C                            
00004E1C 082E 0003 003A             		btst	#bitLvlDirU,lvl_flags(a6)
00004E22 6700 0000                  		beq	@dontupdU
00004E26 08AE 0003 003A             		bclr	#bitLvlDirU,lvl_flags(a6)
00004E2C 2A6E 000C                  		movea.l	lvl_layout(a6),a5
00004E30 286E 0010                  		movea.l lvl_hilayout(a6),a4
00004E34 266E 0018                  		movea.l	lvl_prizes(a6),a3
00004E38                            
00004E38 303C 4000                  		move.w	#$4000,d0
00004E3C 382E 0020                  		move.w	lvl_y(a6),d4
00004E40 3204                       		move.w	d4,d1
00004E42 4841                       		swap	d1
00004E44 3404                       		move.w	d4,d2
00004E46 E84A                       		lsr.w	#4,d2
00004E48 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
00004E4C DAC2                        		adda	d2,a5
00004E4E D8C2                        		adda 	d2,a4
00004E50 D6C2                        		adda	d2,a3
00004E52 3604                        		move.w	d4,d3
00004E54                             		
00004E54 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
00004E58 3404                       		move.w	d4,d2
00004E5A 3204                       		move.w	d4,d1
00004E5C E849                       		lsr.w	#4,d1
00004E5E DAC1                        		adda	d1,a5
00004E60 D8C1                        		adda 	d1,a4
00004E62 D6C1                        		adda	d1,a3
00004E64 E44C                       		lsr.w	#2,d4
00004E66 0244 007C                  		and.w	#$7C,d4
00004E6A E94B                       		lsl.w	#4,d3			; VDP YPOS
00004E6C 0243 0F00                  		and.w	#$F00,d3
00004E70 8843                       		or.w	d3,d4
00004E72 8840                       		or.w	d0,d4
00004E74 4844                       		swap	d4
00004E76 383C 0003                   		move.w	#3,d4
00004E7A                             		
00004E7A 4841                        		swap	d1
00004E7C 3401                        		move.w	d1,d2
00004E7E 363C 0015                   		move.w	#$15,d3
00004E82                            ;  		move.l	#$00010001,d1
00004E82 2A04                        		move.l	d4,d5
00004E84 0285 4F80 0003              		and.l	#$4F800003,d5
00004E8A 0284 007E 0000              		and.l	#$007E0000,d4
00004E90                            @nextblkU:
00004E90 7000                       		moveq	#0,d0
00004E92 246E 0004                  		movea.l	lvl_blocks(a6),a2
00004E96 1013                       		move.b	(a3),d0
00004E98 4A00                       		tst.b	d0
00004E9A 6700                       		beq.s	@noPrzU
00004E9C 0800 0007                  		btst	#7,d0
00004EA0 6600 0000                  		bne	@noPrzU
00004EA4 0240 007F                  		and.w	#$7F,d0
00004EA8 246E 0008                  		movea.l	lvl_przblocks(a6),a2
00004EAC 6000                       		bra.s	@hasprzU
00004EAE                            @noPrzU:
00004EAE 1015                       		move.b	(a5),d0
00004EB0 4A14                       		tst.b 	(a4)
00004EB2 6700                       		beq.s 	@hasprzU
00004EB4 1014                       		move.b 	(a4),d0
00004EB6                            @hasprzU:
00004EB6                            
00004EB6                            ; 		moveq	#0,d0
00004EB6                            ; 		movea.l	lvl_przblocks(a6),a2
00004EB6                            ; 		move.b	(a3),d0
00004EB6                            ; 		tst.b	d0
00004EB6                            ; 		bne.s	@hasprzU
00004EB6                            ; 		movea.l	lvl_blocks(a6),a2
00004EB6                            ; 		move.b	(a5),d0
00004EB6                            ; 		tst.b 	(a4)
00004EB6                            ; 		beq.s 	@hasprzU
00004EB6                            ; 		move.b 	(a4),d0
00004EB6                            ; @hasprzU:
00004EB6 E748                       		lsl.w	#3,d0
00004EB8                            		
00004EB8 3232 0000                  		move.w	(a2,d0.w),d1
00004EBC 4841                       		swap	d1
00004EBE 3232 0004                  		move.w	4(a2,d0.w),d1
00004EC2 3432 0002                   		move.w	2(a2,d0.w),d2
00004EC6 4842                        		swap	d2
00004EC8 3432 0006                   		move.w	6(a2,d0.w),d2
00004ECC                             		
00004ECC 8885                       		or.l	d5,d4
00004ECE 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00004ED4 4A14                        		tst.b 	(a4)
00004ED6 6700                        		beq.s	@nohiprioU
00004ED8 0081 8000 8000              		or.l	#$80008000,d1
00004EDE                            @nohiprioU:
00004EDE 23C1 00C0 0000              		move.l	d1,(vdp_data)
00004EE4 2005                         		move.l	d5,d0
00004EE6 8084                       		or.l	d4,d0
00004EE8 0680 0080 0000               		add.l	#$00800000,d0
00004EEE 23C0 00C0 0004              		move.l	d0,(vdp_ctrl)
00004EF4 4A14                        		tst.b 	(a4)
00004EF6 6700                        		beq.s	@nohiprioU_2
00004EF8 0082 8000 8000              		or.l	#$80008000,d2
00004EFE                            @nohiprioU_2:
00004EFE 23C2 00C0 0000              		move.l	d2,(vdp_data)
00004F04                             		
00004F04                            @nohiprioU_3:
00004F04 0684 0004 0000              		add.l	#$040000,d4
00004F0A 0284 007E 0000               		and.l	#$7E0000,d4
00004F10                              		
00004F10 DAFC 0001                   		add.w	#1,a5
00004F14 D8FC 0001                   		add.w 	#1,a4
00004F18 D6FC 0001                   		add.w	#1,a3
00004F1C 51CB FF72                  		dbf	d3,@nextblkU
00004F20                            @dontupdU:
00004F20 4E75                       		rts
00004F22                            	
00004F22                            ; --------------------------------------------
00004F22                            ; Lvl_Animation
00004F22                            ; --------------------------------------------
00004F22                            
00004F22                            Lvl_Animation
00004F22 4BF9 FFFF BEFE             		lea	(RAM_LvlAnim),a5
00004F28                            ; 		lea	(Art_AnimCoin),a4
00004F28                            		
00004F28 0455 0001                  		sub.w	#1,(a5)
00004F2C 6A00 0000                  		bpl	@pluswait
00004F30 3ABC 0005                  		move.w	#5,(a5)
00004F34                            		
00004F34 7200                       		moveq	#0,d1
00004F36 7400                       		moveq	#0,d2
00004F38 203C 0000 0000             		move.l	#Art_AnimCoin,d0
00004F3E 322D 0002                  		move.w	2(a5),d1
00004F42 0641 0001                  		add.w	#1,d1
00004F46 0C41 0006                  		cmp.w	#6,d1
00004F4A 6600                       		bne.s	@stay
00004F4C 4241                       		clr.w	d1
00004F4E                            @stay:
00004F4E 3B41 0002                  		move.w	d1,2(a5)
00004F52 E149                       		lsl.w	#8,d1
00004F54 D081                       		add.l	d1,d0
00004F56                            		
00004F56 23FC 9400 9380 00C0 0004   		move.l	#$94009380,(vdp_ctrl)	; Size: $40
00004F60                            
00004F60                             		
00004F60 E288                        		lsr.l	#1,d0
00004F62 2200                       		move.l	d0,d1
00004F64 4841                       		swap	d1
00004F66 0241 00FF                  		and.w	#$FF,d1
00004F6A 0041 9700                  		or.w	#$9700,d1
00004F6E 3400                       		move.w	d0,d2
00004F70 0240 00FF                  		and.w	#$FF,d0
00004F74 0040 9500                  		or.w	#$9500,d0
00004F78 E04A                       		lsr.w	#8,d2
00004F7A 0242 00FF                  		and.w	#$FF,d2
00004F7E 0042 9600                  		or.w	#$9600,d2
00004F82 4842                       		swap	d2
00004F84 8082                       		or.l	d2,d0
00004F86 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
00004F8C 33C1 00C0 0004             		move.w	d1,(vdp_ctrl)
00004F92                            		
00004F92                            		;At: $380
00004F92 3F3C 0082                  		move.w	#$0002|$80,-(sp)
00004F96 3F3C 7400                  		move.w	#$7400,-(sp)
00004F9A 33DF 00C0 0004             		move.w	(sp)+,(vdp_ctrl)
00004FA0 33FC 0100 00A1 1100         		move.w	#$100,($A11100)
00004FA8                            @WaitZ80:
00004FA8 0839 0000 00A1 1100         		btst	#0,($A11100)
00004FB0 66F6                         		bne.s	@WaitZ80
00004FB2 33DF 00C0 0004             		move.w	(sp)+,(vdp_ctrl)
00004FB8 33FC 0000 00A1 1100         		move.w	#0,($A11100).l
00004FC0                            @pluswait:
00004FC0 4E75                       		rts
00004FC2                            		
00004FC2                            ; --------------------------------------------
00004FC2                            ; Lvl_Deform
00004FC2                            ; --------------------------------------------
00004FC2                            
00004FC2                            Lvl_Deform:
00004FC2 302E 0020                  		move.w	lvl_y(a6),d0
00004FC6 33C0 FFFF E2C0             		move.w	d0,(RAM_ScrlVer)
00004FCC 3800                       		move.w	d0,d4
00004FCE E844                       		asr.w	#4,d4
00004FD0 33C4 FFFF E2C2             		move.w	d4,(RAM_ScrlVer+2)
00004FD6 7A00                       		moveq	#0,d5
00004FD8 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
00004FDE 362E 001C                  		move.w	lvl_x(a6),d3
00004FE2 4443                       		neg.w	d3
00004FE4                            		
00004FE4                            ; Sun
00004FE4 7000                       		moveq	#0,d0
00004FE6 343C 001B                  		move.w	#(28)-1,d2
00004FEA 9444                       		sub.w	d4,d2
00004FEC 6B00 0000                  		bmi	@rest_fg
00004FF0                            @lyr1:
00004FF0 30C3                       		move.w	d3,(a0)+
00004FF2 30C0                       		move.w	d0,(a0)+
00004FF4 0645 0001                  		add.w	#1,d5
00004FF8 0C45 00E0                  		cmp.w	#224,d5
00004FFC 6E00 0000                  		bgt	@exit_now
00005000 51CA FFEE                  		dbf	d2,@lyr1
00005004                            		
00005004                            ; Clouds 1
00005004 3003                       		move.w	d3,d0
00005006 E840                       		asr.w	#4,d0
00005008 343C 001B                  		move.w	#(28)-1,d2
0000500C 0C44 001C                  		cmp.w	#28,d4
00005010 6D00                       		blt.s	@lyr2
00005012 9444                       		sub.w	d4,d2
00005014 6B00                       		bmi.s	@rest_fg
00005016                            @lyr2:
00005016 30C3                       		move.w	d3,(a0)+
00005018 30C0                       		move.w	d0,(a0)+
0000501A 0645 0001                  		add.w	#1,d5
0000501E 0C45 00E0                  		cmp.w	#224,d5
00005022 6E00                       		bgt.s	@exit_now
00005024 51CA FFF0                  		dbf	d2,@lyr2
00005028                            		
00005028                            ; Clouds 2
00005028 3003                       		move.w	d3,d0
0000502A EA40                       		asr.w	#5,d0
0000502C 343C 001F                  		move.w	#(32)-1,d2
00005030                            ; 		cmp.w	#28,d4
00005030                            ; 		blt.s	@lyr3
00005030                            ; 		sub.w	d4,d2
00005030                            ; 		bmi.s	@rest_fg
00005030                            @lyr3:
00005030 30C3                       		move.w	d3,(a0)+
00005032 30C0                       		move.w	d0,(a0)+
00005034 0645 0001                  		add.w	#1,d5
00005038 0C45 00E0                  		cmp.w	#224,d5
0000503C 6E00                       		bgt.s	@exit_now
0000503E 51CA FFF0                  		dbf	d2,@lyr3
00005042                            
00005042                            ; Mountains 1
00005042 3003                       		move.w	d3,d0
00005044 E840                       		asr.w	#4,d0
00005046 343C 0024                  		move.w	#(37)-1,d2
0000504A                            @lyr4:
0000504A 30C3                       		move.w	d3,(a0)+
0000504C 30C0                       		move.w	d0,(a0)+
0000504E 0645 0001                  		add.w	#1,d5
00005052 0C45 00E0                  		cmp.w	#224,d5
00005056 6E00                       		bgt.s	@exit_now
00005058 51CA FFF0                  		dbf	d2,@lyr4
0000505C                            
0000505C                            ; Mountains 2
0000505C 3003                       		move.w	d3,d0
0000505E E640                       		asr.w	#3,d0
00005060 343C 0024                  		move.w	#(37)-1,d2
00005064                            @lyr5:
00005064 30C3                       		move.w	d3,(a0)+
00005066 30C0                       		move.w	d0,(a0)+
00005068 0645 0001                  		add.w	#1,d5
0000506C 0C45 00E0                  		cmp.w	#224,d5
00005070 6E00                       		bgt.s	@exit_now
00005072 51CA FFF0                  		dbf	d2,@lyr5
00005076                            		
00005076                            ; Mountains 2
00005076 3003                       		move.w	d3,d0
00005078 E440                       		asr.w	#2,d0
0000507A 343C 002F                  		move.w	#(48)-1,d2
0000507E                            @lyr6:
0000507E 30C3                       		move.w	d3,(a0)+
00005080 30C0                       		move.w	d0,(a0)+
00005082 0645 0001                  		add.w	#1,d5
00005086 0C45 00E0                  		cmp.w	#224,d5
0000508A 6E00                       		bgt.s	@exit_now
0000508C 51CA FFF0                  		dbf	d2,@lyr6
00005090                            		
00005090                            ; ----------------
00005090                            ; Rest of BG
00005090                            
00005090                            @rest_fg:
00005090 30C3                       		move.w	d3,(a0)+
00005092 4258                       		clr.w	(a0)+
00005094 0645 0001                  		add.w	#1,d5
00005098 0C45 00E0                  		cmp.w	#224,d5
0000509C 6DF2                       		blt.s	@rest_fg
0000509E                            
0000509E                            @exit_now:
0000509E 06AE 0000 0001 002C        		add.l	#1,lvl_timer(a6)
000050A6 4E75                       		rts
000050A8                            		
000050A8                            ; 		lea	(RAM_ScrlHor),a0
000050A8                            ; 		move.w	#224-1,d1
000050A8                            ; @nxt_h:
000050A8                            ; 		move.w	lvl_x(a6),d0
000050A8                            ; 		neg.w	d0
000050A8                            ; 		move.w	d0,(a0)+
000050A8                            ; 		asr.w	#2,d0
000050A8                            ; 		move.w	d0,(a0)+
000050A8                            ; 		dbf	d1,@nxt_h
000050A8                            ; 		
000050A8                            ; 		move.w	lvl_y(a6),d0
000050A8                            ; 		move.w	d0,(RAM_ScrlVer)
000050A8                            ; 		asr.w	#2,d0
000050A8                            ; 		move.w	d0,(RAM_ScrlVer+2)
000050A8                            
000050A8                            ; --------------------------------------------
000050A8                            ; Level_Load
000050A8                            ; 
000050A8                            ; a0 | Data
000050A8                            ; --------------------------------------------
000050A8                            
000050A8                            Level_Load:
000050A8                            ; 		lea	(Level_Test),a0
000050A8 43F9 00FF 0000             		lea	($FF0000),a1
000050AE 303C 1FFF                  		move.w	#(($8000)/4)-1,d0
000050B2                            @clrram:
000050B2 4299                       		clr.l	(a1)+
000050B4 51C8 FFFC                  		dbf	d0,@clrram
000050B8                            		
000050B8 43F9 FFFF BC00             		lea	(RAM_LvlPlanes),a1
000050BE 4279 FFFF BF1E             		clr.w	(RAM_PrizeHide)
000050C4 4279 FFFF BF60             		clr.w	(RAM_PrizeShow)
000050CA 4269 001C                  		clr.w	lvl_x(a1)
000050CE 4269 0020                  		clr.w	lvl_y(a1)
000050D2 283C FFFF 0000             		move.l	#$FFFF0000,d4
000050D8 3018                       		move.w	(a0)+,d0
000050DA 3340 0030                  		move.w	d0,lvl_size_x(a1)
000050DE 3340 0034                  		move.w	d0,lvl_maxcam_x(a1)
000050E2 3018                       		move.w	(a0)+,d0
000050E4 3340 0032                  		move.w	d0,lvl_size_y(a1)
000050E8 3340 0036                  		move.w	d0,lvl_maxcam_y(a1)
000050EC 2358 0000                  		move.l	(a0)+,lvl_objects(a1)
000050F0                            @loop:
000050F0                            ; 		tst.w	(a0)
000050F0                            ; 		bmi.s	@exit
000050F0                            		
000050F0 2358 0004                  		move.l	(a0)+,lvl_blocks(a1)
000050F4 2018                       		move.l	(a0)+,d0
000050F6 4A80                       		tst.l	d0
000050F8 6A00                       		bpl.s	@nullprz
000050FA 237C 0000 0000 0008        		move.l	#vram_prizes,lvl_przblocks(a1)
00005102                            @nullprz:
00005102 2358 000C                  		move.l	(a0)+,lvl_layout(a1)
00005106 2358 0010                  		move.l	(a0)+,lvl_hilayout(a1)
0000510A                            		
0000510A 2358 0014                  		move.l	(a0)+,lvl_collision(a1)
0000510E 2344 0018                  		move.l	d4,lvl_prizes(a1)
00005112 2458                       		movea.l	(a0)+,a2
00005114 2644                       		movea.l	d4,a3
00005116                            @nextrle:
00005116 7000                       		moveq	#0,d0
00005118 7200                       		moveq	#0,d1
0000511A 101A                       		move.b	(a2)+,d0
0000511C 0C00 00FF                  		cmp.b	#-1,d0
00005120 6700                       		beq.s	@Finish
00005122 121A                       		move.b	(a2)+,d1
00005124 4A40                       		tst.w	d0
00005126 6700                       		beq.s	@oops
00005128 0440 0001                  		sub.w	#1,d0
0000512C                            @CopyIt:
0000512C 16C1                       		move.b	d1,(a3)+
0000512E 0684 0000 0001             		add.l	#1,d4
00005134 51C8 FFF6                  		dbf	d0,@CopyIt
00005138                            @oops:
00005138 60DC                       		bra.s	@nextrle
0000513A                            @Finish:
0000513A                            ; 		adda	#sizeof_lvlpln,a1
0000513A                            ; 		bra.s	@loop
0000513A                            ; @exit:
0000513A                            		
0000513A                            ; ----------------------------------		
0000513A                            ; Load object from the list
0000513A                            ; ----------------------------------
0000513A                            
0000513A 47F9 FFFF BC42             		lea	(RAM_LevelObjPos),a3
00005140 323C 0045                  		move.w	#max_lvlobj-1,d1
00005144                            @clrlist:
00005144 429B                       		clr.l	(a3)+
00005146 429B                       		clr.l	(a3)+
00005148 425B                       		clr.w	(a3)+
0000514A 51C9 FFF8                  		dbf	d1,@clrlist
0000514E                            		
0000514E 2479 FFFF BC00             		movea.l	(RAM_LvlPlanes+lvl_objects),a2
00005154 47F9 FFFF BC42             		lea	(RAM_LevelObjPos),a3
0000515A 323C 0045                  		move.w	#max_lvlobj-1,d1
0000515E                            @NextObj:
0000515E 4A92                       		tst.l	(a2)
00005160 6700                       		beq.s	@Nothing
00005162 201A                        		move.l	(a2)+,d0
00005164 0280 00FF FFFF              		and.l 	#$FFFFFF,d0
0000516A 26C0                        		move.l	d0,(a3)+
0000516C 26DA                       		move.l	(a2)+,(a3)+
0000516E 36DA                       		move.w	(a2)+,(a3)+
00005170 51C9 FFEC                  		dbf	d1,@NextObj
00005174                            @Nothing:
00005174 4E75                       		rts
00005176                            		
00005176                            ; --------------------------------------------
00005176                            ; Draw the level on screen
00005176                            ; 
00005176                            ; Uses:
00005176                            ; d0-d5/a2-a5
00005176                            ; --------------------------------------------
00005176                            
00005176                            Level_Draw:
00005176 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0000517C 203C 4000 0003             		move.l	#$40000003,d0		; VDP Address
00005182 322D 001C                    		move.w	lvl_x(a5),d1		; X pos
00005186 342D 0020                    		move.w	lvl_y(a5),d2		; Y pos
0000518A E84A                          		lsr.w	#4,d2			; Ypos: xxx0 > 0xxx
0000518C 0242 000F                     		and.w	#$F,d2			; 0xxx > 00xx
00005190 E14A                          		lsl.w	#8,d2			; 00xx > xx00
00005192 0242 3FFF                     		and.w	#$3FFF,d2
00005196 E849                          		lsr.w	#4,d1			; Xpos: xxx0 > 0xxx
00005198 E549                           		lsl.w	#2,d1			; 0xxx * 2
0000519A 4840                           		swap	d0
0000519C D042                          		add.w	d2,d0			; +Y VDP
0000519E D001                         		add.b	d1,d0			; +X VDP
000051A0 0200 007F                         		and.b	#$7F,d0
000051A4 4840                             		swap	d0
000051A6                            		
000051A6 382D 0020                  		move.w	lvl_y(a5),d4
000051AA E84C                       		lsr.w	#4,d4
000051AC C8ED 0030                  		mulu.w	lvl_size_x(a5),d4
000051B0 3A2D 001C                  		move.w	lvl_x(a5),d5
000051B4 E84D                       		lsr.w	#4,d5
000051B6 DA44                       		add.w	d4,d5
000051B8 0245 7FFF                  		and.w	#$7FFF,d5
000051BC 4845                       		swap 	d5
000051BE                            		
000051BE 3A3C 0016                  		move.w	#$16,d5
000051C2                            @do_row:
000051C2 286D 000C                   		movea.l	lvl_layout(a5),a4
000051C6 266D 0010                   		movea.l	lvl_hilayout(a5),a3
000051CA 246D 0018                   		movea.l	lvl_prizes(a5),a2
000051CE 4845                        		swap	d5
000051D0 D8C5                        		adda 	d5,a4
000051D2 D6C5                        		adda 	d5,a3
000051D4 D4C5                        		adda	d5,a2
000051D6 4845                        		swap 	d5
000051D8                             		
000051D8 2600                       		move.l	d0,d3
000051DA 780F                        		moveq	#$F,d4
000051DC                            ;  		move.b	(RAM_VidRegs+$C),d2
000051DC                            ;   		and.w	#%110,d2
000051DC                            ;   		beq.s	@block
000051DC                            ;   		moveq	#$1F,d4
000051DC                            ;  
000051DC                            @block:
000051DC 226D 0008                  		movea.l	lvl_przblocks(a5),a1
000051E0 7400                        		moveq	#0,d2	
000051E2 1412                        		move.b	(a2),d2
000051E4 4A02                        		tst.b	d2
000051E6 6700                        		beq.s	@noprzblk
000051E8 0802 0007                   		btst	#7,d2
000051EC 6700                        		beq.s	@hasPrzDrw
000051EE                            @noprzblk:
000051EE 1414                         		move.b	(a4),d2
000051F0 226D 0004                     		movea.l	lvl_blocks(a5),a1
000051F4 4A13                        		tst.b	(a3)
000051F6 6700                        		beq.s	@hasprzDrw
000051F8 1413                        		move.b	(a3),d2
000051FA                            @hasprzDrw:
000051FA E74A                       		lsl.w	#3,d2
000051FC 3231 2000                  		move.w	(a1,d2.w),d1
00005200 4841                        		swap	d1
00005202 3231 2004                   		move.w	4(a1,d2.w),d1
00005206                             		
00005206 4844                        		swap	d4
00005208 1839 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d4
0000520E 0244 0006                   		and.w	#%110,d4
00005212 6700                        		beq.s	@NoDouble
00005214 E249                        		lsr.w	#1,d1
00005216 4841                        		swap	d1
00005218 E249                        		lsr.w	#1,d1
0000521A 4841                        		swap	d1
0000521C                            @NoDouble:
0000521C 4844                       		swap	d4
0000521E 23C3 00C0 0004              		move.l	d3,(vdp_ctrl)
00005224 4A13                        		tst.b	(a3)
00005226 6700                        		beq.s	@nohiprio
00005228 0081 8000 8000              		or.l 	#$80008000,d1
0000522E                            @nohiprio:
0000522E 23C1 00C0 0000              		move.l	d1,(vdp_data)
00005234 0683 0080 0000              		add.l	#$00800000,d3
0000523A                              		
0000523A 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
00005240 0241 0006                   		and.w	#%110,d1
00005244 6600                        		bne.s	@NoDouble2
00005246 3231 2002                  		move.w	2(a1,d2.w),d1
0000524A 4841                        		swap	d1
0000524C 3231 2006                   		move.w	6(a1,d2.w),d1
00005250 23C3 00C0 0004             		move.l	d3,(vdp_ctrl)
00005256 4A13                        		tst.b	(a3)
00005258 6700                        		beq.s	@nohiprio2
0000525A 0081 8000 8000              		or.l 	#$80008000,d1
00005260                            @nohiprio2:
00005260 23C1 00C0 0000              		move.l	d1,(vdp_data)
00005266 0683 0080 0000              		add.l	#$00800000,d3
0000526C 0283 4F7C 0003              		and.l	#$4F7C0003,d3
00005272                            @NoDouble2:		
00005272 322D 0030                  		move.w	lvl_size_x(a5),d1
00005276 D8C1                       		adda	d1,a4
00005278 D6C1                       		adda	d1,a3
0000527A D4C1                       		adda	d1,a2
0000527C 51CC FF5E                  		dbf	d4,@block
00005280                            	
00005280 0680 0004 0000             		add.l	#$40000,d0
00005286 0280 4F7C 0003             		and.l	#$4F7C0003,d0
0000528C 4845                       		swap 	d5
0000528E 0645 0001                  		add.w	#1,d5
00005292 4845                       		swap 	d5
00005294 51CD FF2C                  		dbf	d5,@do_row
00005298                            
00005298                            ; ----------------------------------
00005298                            ; Check for objects ON the
00005298                            ; same screen as the player
00005298                            ; ----------------------------------
00005298                            
00005298 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
0000529E 49F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*16)),a4	;Start of level objects
000052A4 7601                       		moveq	#1,d3			; Starting at 1
000052A6                            @next_obj:
000052A6 4A95                       		tst.l	(a5)
000052A8 6700 0000                  		beq	@finish
000052AC 0815 0007                   		btst	#7,(a5)			;ON SCREEN flag?
000052B0 6600 0000                   		bne	@next
000052B4                            @found_obj:
000052B4 7800                         		moveq	#(max_objects-8)-1,d4
000052B6                            @nxtav_obj:
000052B6 4AAC 0000                  		tst.l	obj_code(a4)	
000052BA 6700                       		beq.s	@valid
000052BC D8FC 0000                  		adda	#sizeof_obj,a4
000052C0 51CC FFF4                  		dbf	d4,@nxtav_obj
000052C4                            		
000052C4                            @valid:
000052C4 396D 0004 0000             		move.w	4(a5),obj_x(a4)
000052CA 396D 0006 0000             		move.w	6(a5),obj_y(a4)
000052D0 1943 0000                  		move.b	d3,obj_spwnindx(a4)
000052D4                            		
000052D4 7200                          		moveq	#0,d1
000052D6 122D 0008                      		move.b	8(a5),d1
000052DA 422C 0000                      		clr.b	obj_status(a4)
000052DE 0801 0007                      		btst	#7,d1
000052E2 6700                           		beq.s	@dont_flip_l
000052E4 08EC 00AC 0000               		bset	#bitobj_flipH,obj_status(a4)
000052EA                            @dont_flip_l:
000052EA 0801 0006                      		btst	#6,d1
000052EE 6700                           		beq.s	@dont_flip_d
000052F0 08EC 00EC 0000               		bset	#bitobj_flipV,obj_status(a4)
000052F6                            @dont_flip_d:
000052F6 122D 0008                   		move.b	8(a5),d1
000052FA 0241 003F                   		and.w	#$3F,d1
000052FE 1941 0000                  		move.b	d1,obj_subid(a4)
00005302 2015                        		move.l	(a5),d0
00005304 0280 00FF FFFF               		and.l 	#$FFFFFF,d0
0000530A 2940 0000                   		move.l	d0,obj_code(a4)
0000530E 08D5 0007                   		bset	#7,(a5)			;SET ON SCREEN flag
00005312 D8FC 0000                  		adda	#sizeof_obj,a4
00005316                            @next:
00005316 0643 0001                  		add.w	#1,d3
0000531A DAFC 000A                  		adda	#$A,a5
0000531E 6000 FF86                  		bra	@next_obj
00005322                            @finish:
00005322 4E75                            		rts
00005324                            		
00005324                            ; ----------------------------------		
00005324                            
00005324                            Level_HidePrize:
00005324 49F9 FFFF BF20             		lea	(RAM_PrizeHide+2),a4
0000532A 3839 FFFF BF1E             		move.w	(RAM_PrizeHide),d4
00005330 E54C                       		lsl.w	#2,d4
00005332 D8C4                       		adda	d4,a4
00005334                            ; @chknext:
00005334                            ; 		tst.l	(a4)
00005334                            ; 		beq.s	@free
00005334                            ; 		adda	#4,a4
00005334                            ; 		bra.s	@chknext
00005334                            ; @free:
00005334 2880                       		move.l	d0,(a4)
00005336 0679 0001 FFFF BF1E        		add.w	#1,(RAM_PrizeHide)
0000533E                            @same:
0000533E 4E75                       		rts
00005340                            		
00005340                            ; ----------------------------------
00005340                            
00005340                            Level_ShowPrize:
00005340 49F9 FFFF BF62             		lea	(RAM_PrizeShow+2),a4
00005346 3839 FFFF BF60             		move.w	(RAM_PrizeShow),d4
0000534C E54C                       		lsl.w	#2,d4
0000534E D8C4                       		adda	d4,a4
00005350                            ; @chknext:
00005350                            ; 		tst.l	(a4)
00005350                            ; 		beq.s	@free
00005350                            ; 		adda	#4,a4
00005350                            ; 		bra.s	@chknext
00005350                            ; @free:
00005350 2880                       		move.l	d0,(a4)
00005352 0679 0001 FFFF BF60        		add.w	#1,(RAM_PrizeShow)
0000535A                            @same:
0000535A 4E75                       		rts
0000535C                            
0000535C                            ; ----------------------------------
0000535C                            
0000535C                            ; Level_CheckPrize:
0000535C                            ;  		moveq	#0,d4
0000535C                            ;  		lea	(RAM_PrizeHide),a3
0000535C                            ;  		move.w	(a3)+,d5
0000535C                            ;  		tst.w	d5
0000535C                            ;  		beq.s	@free
0000535C                            ; 		sub.w	#1,d5
0000535C                            ; @chknext:
0000535C                            ;  		cmp.l	(a3)+,d0
0000535C                            ;  		beq.s	@found
0000535C                            ;  		dbf	d5,@chknext
0000535C                            ;  		bra.s	@free
0000535C                            ; 
0000535C                            ; @found:
0000535C                            ;  nop
0000535C                            ; ;  		bra.s * ;moveq	#-1,d4
0000535C                            ;  		
0000535C                            ; @free:
0000535C                            ;  		tst.l	d4
0000535C                            ; 		rts
0000535C                            		
0000535C                            ; ----------------------------------		
0000535C                            ; load level objects while moving
0000535C                            ; ----------------------------------
0000535C                            
0000535C                            Lvl_RefreshObj:
0000535C 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
00005362 49F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*16)),a4
00005368 7601                       		moveq	#1,d3			; Starting at 1
0000536A                            @next_obj:
0000536A 4A95                       		tst.l	(a5)
0000536C 6700 0000                  		beq	@finish
00005370 0815 0006                  		btst	#6,(a5)			; GONE flag?
00005374 6600 0000                  		bne	@next
00005378 0815 0007                   		btst	#7,(a5)			; ON SCREEN flag?
0000537C 6600 0000                   		bne	@next
00005380                            		
00005380 4843                       		swap	d3
00005382                            
00005382 302E 001C                     		move.w	lvl_x(a6),d0
00005386 322D 0004                         		move.w	4(a5),d1
0000538A 3400                           		move.w	d0,d2
0000538C 0642 0140                      		add.w	#320,d2
00005390                                		
00005390 0642 0038                     		add.w	#$38,d2
00005394 B242                            		cmp.w	d2,d1
00005396 6E00 0000                        		bgt	@tooright  		
0000539A 0442 0008                     		sub.w	#$8,d2
0000539E B242                            		cmp.w	d2,d1
000053A0 6D00 0000                        		blt	@tooright
000053A4 363C 0001                        		move.w	#1,d3
000053A8                            @tooright:
000053A8 0440 0038                     		sub.w	#$38,d0
000053AC B240                             		cmp.w	d0,d1
000053AE 6D00 0000                         		blt	@tooleft
000053B2 0640 0008                     		add.w	#$8,d0
000053B6 B240                            		cmp.w	d0,d1
000053B8 6C00 0000                        		bge	@tooleft
000053BC 363C 0001                        		move.w	#1,d3
000053C0                            @tooleft:
000053C0                            
000053C0                            		
000053C0 302E 0020                      		move.w	lvl_y(a6),d0
000053C4 322D 0006                         		move.w	6(a5),d1
000053C8 3400                            		move.w	d0,d2
000053CA 0642 00E0                      		add.w	#224,d2
000053CE                            		
000053CE 0642 0058                     		add.w	#$58,d2
000053D2 B242                            		cmp.w	d2,d1
000053D4 6C00 0000                        		bge	@toodown 		
000053D8 0442 0008                     		sub.w	#$8,d2
000053DC B242                            		cmp.w	d2,d1
000053DE 6D00 0000                        		blt	@toodown
000053E2 363C 0001                        		move.w	#1,d3
000053E6                            @toodown:
000053E6 0440 0058                     		sub.w	#$58,d0
000053EA B240                             		cmp.w	d0,d1
000053EC 6D00 0000                         		blt	@tooup
000053F0 0640 0008                     		add.w	#$8,d0
000053F4 B240                            		cmp.w	d0,d1
000053F6 6C00 0000                        		bge	@tooup
000053FA 363C 0001                        		move.w	#1,d3
000053FE                            @tooup:
000053FE                            
000053FE                            
000053FE 3003                       		move.w	d3,d0
00005400 4843                       		swap	d3
00005402 4A40                       		tst.w	d0
00005404 6700                       		beq.s	@next
00005406                              		
00005406                            @found_obj:
00005406 7800                         		moveq	#(max_objects-16)-1,d4
00005408                            @nxtav_obj:
00005408 4AAC 0000                  		tst.l	obj_code(a4)
0000540C 6700                       		beq.s	@valid
0000540E B62C 0000                  		cmp.b	obj_spwnindx(a4),d3
00005412 6700                       		beq.s	@next
00005414 D8FC 0000                  		adda	#sizeof_obj,a4
00005418 51CC FFEE                  		dbf	d4,@nxtav_obj
0000541C 6000                       		bra.s	@next
0000541E                            		
0000541E                            @valid:
0000541E 264C                       		movea.l	a4,a3
00005420 323C 0000                  		move.w	#sizeof_obj,d1
00005424                            @cleanup:
00005424 421B                       		clr.b	(a3)+
00005426 51C9 FFFC                  		dbf	d1,@cleanup
0000542A                            		
0000542A 396D 0004 0000             		move.w	4(a5),obj_x(a4)
00005430 396D 0006 0000             		move.w	6(a5),obj_y(a4)
00005436 1943 0000                  		move.b	d3,obj_spwnindx(a4)
0000543A                            		
0000543A 7200                          		moveq	#0,d1
0000543C 122D 0008                      		move.b	8(a5),d1
00005440 422C 0000                      		clr.b	obj_status(a4)
00005444 0801 0007                      		btst	#7,d1
00005448 6700                           		beq.s	@dont_flip_l
0000544A 08EC 00AC 0000               		bset	#bitobj_flipH,obj_status(a4)
00005450                            
00005450                            @dont_flip_l:
00005450 0801 0006                      		btst	#6,d1
00005454 6700                           		beq.s	@dont_flip_d
00005456 08EC 00EC 0000               		bset	#bitobj_flipV,obj_status(a4)
0000545C                            @dont_flip_d:
0000545C 122D 0008                   		move.b	8(a5),d1
00005460 0241 003F                   		and.w	#$3F,d1
00005464 1941 0000                  		move.b	d1,obj_subid(a4)
00005468 2015                        		move.l	(a5),d0
0000546A 0280 00FF FFFF               		and.l 	#$FFFFFF,d0
00005470 2940 0000                   		move.l	d0,obj_code(a4)
00005474 08D5 0007                   		bset	#7,(a5)			;SET ON SCREEN flag
00005478 D8FC 0000                  		adda	#sizeof_obj,a4
0000547C                            @next:
0000547C 0643 0001                  		add.w	#1,d3
00005480 DAFC 000A                  		adda	#$A,a5
00005484 6000 FEE4                  		bra	@next_obj
00005488                            @finish:
00005488 4E75                       		rts
0000548A                             	
0000548A                            ; ----------------------------------
0000548A                            ; d0 - ID
0000548A                            ; ----------------------------------
0000548A                            
0000548A                            Lvl_DoHidePrz:
0000548A                            		;TODO: Up/Left checks
0000548A 2800                       		move.l	d0,d4
0000548C E88C                       		lsr.l	#4,d4
0000548E 0244 FFF0                  		and.w	#$FFF0,d4
00005492 3A2E 0020                   		move.w	lvl_y(a6),d5
00005496 B845                        		cmp.w	d5,d4
00005498 6D00                        		blt.s	LvlPrzReadRet
0000549A 2800                       		move.l	d0,d4
0000549C 4844                       		swap	d4
0000549E 0244 FFF0                  		and.w	#$FFF0,d4
000054A2 3A2E 001C                   		move.w	lvl_x(a6),d5
000054A6 B845                        		cmp.w	d5,d4
000054A8 6D00                        		blt.s	LvlPrzReadRet
000054AA                             		
000054AA 2800                        		move.l	d0,d4			;Postion | XXX?????
000054AC 4844                        		swap	d4			;????XXX?
000054AE E44C                        		lsr.w	#2,d4			;????0XXX
000054B0 0284 0000 007C              		and.l	#$7C,d4
000054B6 2A00                        		move.l	d0,d5			;???YYY??
000054B8 0245 0F00                    		and.w	#$F00,d5
000054BC D845                          		add.w	d5,d4
000054BE 2A3C 4000 0003              		move.l	#$40000003,d5
000054C4 4845                        		swap	d5
000054C6 8A44                        		or.w	d4,d5
000054C8 4845                        		swap	d5
000054CA                             		
000054CA 286E 000C                    		movea.l	lvl_layout(a6),a4	;Layout data
000054CE 2800                        		move.l	d0,d4
000054D0 0284 000F FF00              		and.l	#$000FFF00,d4
000054D6 E08C                        		lsr.l	#8,d4
000054D8 0284 0000 0FFF              		and.l	#$FFF,d4
000054DE C8EE 0030                   		mulu.w	lvl_size_x(a6),d4
000054E2 D8C4                        		adda	d4,a4	
000054E4 2800                         		move.l	d0,d4
000054E6 0284 FFF0 0000              		and.l	#$FFF00000,d4
000054EC 4844                         		swap	d4
000054EE E84C                         		lsr.w	#4,d4
000054F0 D8C4                          		add.w 	d4,a4
000054F2 7800                           		moveq	#0,d4
000054F4 1814                          		move.b	(a4),d4
000054F6 286E 0004                  		movea.l	lvl_blocks(a6),a4	;Draw blocks
000054FA 6000                       		bra.s	LvlPrzReadBlk
000054FC                            LvlPrzReadRet:
000054FC 4E75                       		rts
000054FE                            		
000054FE                            ; ----------------------------------
000054FE                            ; d0 - ID
000054FE                            ; ----------------------------------
000054FE                            
000054FE                            Lvl_DoShowPrz:
000054FE                            		;TODO: Up/Left checks
000054FE 2800                       		move.l	d0,d4
00005500 E88C                       		lsr.l	#4,d4
00005502 0244 FFF0                  		and.w	#$FFF0,d4
00005506 3A2E 0020                   		move.w	lvl_y(a6),d5
0000550A B845                        		cmp.w	d5,d4
0000550C 6DEE                        		blt.s	LvlPrzReadRet
0000550E 2800                       		move.l	d0,d4
00005510 4844                       		swap	d4
00005512 0244 FFF0                  		and.w	#$FFF0,d4
00005516 3A2E 001C                   		move.w	lvl_x(a6),d5
0000551A B845                        		cmp.w	d5,d4
0000551C 6DDE                        		blt.s	LvlPrzReadRet
0000551E                             		
0000551E 2800                        		move.l	d0,d4			;Postion | XXX?????
00005520 4844                        		swap	d4			;????XXX?
00005522 E44C                        		lsr.w	#2,d4			;????0XXX
00005524 0284 0000 007C              		and.l	#$7C,d4
0000552A 2A00                        		move.l	d0,d5			;???YYY??
0000552C 0285 0000 0F00               		and.l	#$F00,d5
00005532 8845                          		or.w	d5,d4
00005534 2A3C 4000 0003              		move.l	#$40000003,d5
0000553A 4845                        		swap	d5
0000553C 8A44                        		or.w	d4,d5
0000553E 4845                        		swap	d5 		
00005540 286E 0018                    		movea.l	lvl_prizes(a6),a4	;Layout data
00005544 2800                        		move.l	d0,d4
00005546 0284 000F FF00              		and.l	#$000FFF00,d4
0000554C E08C                        		lsr.l	#8,d4
0000554E 0284 0000 0FFF              		and.l	#$FFF,d4
00005554 C8EE 0030                   		mulu.w	lvl_size_x(a6),d4
00005558                            ;  		lsl.w	#1,d4
00005558 D8C4                        		adda	d4,a4	
0000555A 2800                         		move.l	d0,d4
0000555C 0284 FFF0 0000              		and.l	#$FFF00000,d4
00005562 4844                         		swap	d4
00005564 E84C                         		lsr.w	#4,d4
00005566                            ;    		lsl.w	#1,d4
00005566 D8C4                          		add.w	d4,a4
00005568 7800                           		moveq	#0,d4
0000556A 1814                          		move.b	(a4),d4
0000556C 286E 0008                  		movea.l	lvl_przblocks(a6),a4	;Draw blocks
00005570                            		
00005570                            LvlPrzReadBlk:
00005570 E78C                         		lsl.l	#3,d4
00005572 0284 0000 FFFF               		and.l	#$FFFF,d4
00005578 D8C4                          		adda 	d4,a4
0000557A                               		
0000557A 23C5 00C0 0004              		move.l	d5,(vdp_ctrl).l
00005580 3814                        		move.w	(a4),d4
00005582 4844                        		swap	d4
00005584 382C 0004                   		move.w	4(a4),d4
00005588 23C4 00C0 0000              		move.l	d4,(vdp_data).l
0000558E 0685 0080 0000              		add.l	#$800000,d5
00005594 23C5 00C0 0004              		move.l	d5,(vdp_ctrl).l
0000559A 382C 0002                   		move.w	2(a4),d4
0000559E 4844                        		swap	d4
000055A0 382C 0006                   		move.w	6(a4),d4
000055A4 23C4 00C0 0000              		move.l	d4,(vdp_data).l
000055AA                            @ignore:
000055AA 4E75                        		rts	
000055AC                            		
000055AC                            ; ----------------------------------		
000055AC                            ; Load art data
000055AC                            ; 
000055AC                            ; a1 - the list
000055AC                            ; ----------------------------------
000055AC                            
000055AC                            Level_LoadArtList:
000055AC 4A51                       		tst.w	(a1)
000055AE 6B00                       		bmi.s	@Finish
000055B0 2059                       		move.l	(a1)+,a0		;Addr
000055B2 3019                        		move.w	(a1)+,d0		;VRAM
000055B4 3219                        		move.w	(a1)+,d1		;Size
000055B6 6100 B134                   		bsr	VDP_SendData_L
000055BA 60F0                        		bra.s	Level_LoadArtList
000055BC                             		
000055BC                            @Finish:
000055BC 4E75                       		rts
000055BE                            		
000055BE                            ; =================================================================
000055BE                            ; --------------------------------------------
000055BE                            ; Data
000055BE                            ; --------------------------------------------
000055BE                            
000055BE                            vram_prizes:
000055BE 0000 0001 0000 0001        		dc.l $0001,$0001		; $00 FILLER
000055C6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $01 Breakable: normal
000055CE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $02  **  **  : 1 coin
000055D6 0580 0581 0582 0583         		dc.w $580,$581,$582,$583	; $03  **  **  : 10 coins
000055DE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $04  **  **  : ???
000055E6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $05  **  **  : ???
000055EE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $06  **  **  : ???
000055F6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $07  **  **  : 1 up
000055FE 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $08 Block ! : 1 coin
00005606 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $09  ****   : 10 coins
0000560E 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0A  ****   : ???
00005616 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0B  ****   : ???
0000561E 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0C  ****   : ???
00005626 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0D  ****   : ???
0000562E 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0E  ****   : 1 up
00005636 059C 059D 059E 059F        		dc.w $59C,$59D,$59E,$59F	; $0F Empty block
0000563E                            		
0000563E 4580 4581 4582 4583        		dc.w $4580,$4581,$4582,$4583	;$10+
00005646 4580 4581 4582 4583        		dc.w $4580,$4581,$4582,$4583
0000564E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005656 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000565E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005666 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000566E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005676 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000567E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
00005686 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000568E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005696 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000569E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056A6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056AE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056B6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056BE                            
000056BE 4594 4595 4596 4597        		dc.w $4594,$4595,$4596,$4597	;$20+ Bouncing block
000056C6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056CE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056D6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056DE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056E6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056EE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056F6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000056FE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
00005706 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000570E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005716 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000571E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005726 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000572E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005736 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000573E                            		
0000573E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	;$30+
00005746 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000574E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005756 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000575E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005766 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000576E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005776 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000577E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
00005786 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000578E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00005796 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
0000579E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000057A6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000057AE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000057B6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
000057BE                            		
000057BE 45A0 45A1 45A2 45A3        		dc.w $45A0,$45A1,$45A2,$45A3	;$40 - Coins
000057C6 45A4 45A5 45A6 45A7        		dc.w $45A4,$45A5,$45A6,$45A7
000057CE                            		even
000057CE                            
000057CE                            ; --------------------------------------------
000057CE                            
000057CE                            col_SlopeData:
000057CE 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000057DE 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;$01
000057EE 0F0E 0D0C 0B0A 0908 0706+  		dc.b $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00	;$02
000057FE 0001 0203 0405 0607 0809+  		dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F	;$03
0000580E                            		
0000580E 0F0F 0E0E 0D0D 0C0C 0B0B+  		dc.b $0F,$0F,$0E,$0E,$0D,$0D,$0C,$0C,$0B,$0B,$0A,$0A,$09,$09,$08,$08
0000581E 0707 0606 0505 0404 0303+  		dc.b $07,$07,$06,$06,$05,$05,$04,$04,$03,$03,$02,$02,$01,$01,$00,$00
0000582E                            		
0000582E 0000 0101 0202 0303 0404+  		dc.b $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
0000583E 0808 0909 0A0A 0B0B 0C0C+  		dc.b $08,$08,$09,$09,$0A,$0A,$0B,$0B,$0C,$0C,$0D,$0D,$0E,$0E,$0F,$0F
0000584E                            		
0000584E 0F0F 0F0F 0E0E 0E0E 0D0D+  		dc.b $0F,$0F,$0F,$0F,$0E,$0E,$0E,$0E,$0D,$0D,$0D,$0D,$0C,$0C,$0C,$0C
0000585E 0B0B 0B0B 0A0A 0A0A 0909+  		dc.b $0B,$0B,$0B,$0B,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$08,$08,$08,$08
0000586E 0707 0707 0606 0606 0505+  		dc.b $07,$07,$07,$07,$06,$06,$06,$06,$05,$05,$05,$05,$04,$04,$04,$04
0000587E 0303 0303 0202 0202 0101+  		dc.b $03,$03,$03,$03,$02,$02,$02,$02,$01,$01,$01,$01,$00,$00,$00,$00
0000588E                            		
0000588E 0000 0000 0101 0101 0202+  		dc.b $00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03
0000589E 0404 0404 0505 0505 0606+  		dc.b $04,$04,$04,$04,$05,$05,$05,$05,$06,$06,$06,$06,$07,$07,$07,$07
000058AE 0808 0808 0909 0909 0A0A+  		dc.b $08,$08,$08,$08,$09,$09,$09,$09,$0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B
000058BE 0C0C 0C0C 0D0D 0D0D 0E0E+  		dc.b $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D,$0E,$0E,$0E,$0E,$0F,$0F,$0F,$0F
000058CE                            		even
000058CE                            		
000058CE                            		
000058CE                            		include	"engine/modes/level/subs/objects.asm"
000058CE                            ; ====================================================================
000058CE                            ; -------------------------------------------------
000058CE                            ; Objects system
000058CE                            ; -------------------------------------------------
000058CE                            
000058CE                            ; NOTES:
000058CE                            ; Current object Slots:
000058CE                            ;   00   | Player 1 (HARD-CODED)
000058CE                            ;   01   | PLANNED (Second player if needed)
000058CE                            ;   02   | HUD (TODO)
000058CE                            ;   03   | Eng flag
000058CE                            ;   04   | FREE
000058CE                            ;   05   | FREE
000058CE                            ;   06   | FREE
000058CE                            ;   07   | FREE
000058CE                            ; 08-15  | Blocks+Action objects (Auto-arrangled)
000058CE                            ; 16-MAX | Level objects (Auto-arrangled)
000058CE                            
000058CE                            ; --------------------------------------------
000058CE                            ; Variables
000058CE                            ; --------------------------------------------
000058CE                            
000058CE =00000040                  max_objects	equ	64
000058CE =00000040                  max_microspr	equ	64
000058CE                            
000058CE                            ; --------------------------------------------
000058CE                            
000058CE                            		rsreset
000058CE =00000000                  obj_code	rs.l	1		; Object code 
000058CE =00000004                  obj_size	rs.l	1		; Object size (see below)
000058CE                            
000058CE =00000008                  obj_x		rs.l	1		; Object X Position
000058CE =0000000C                  obj_y		rs.l	1		; Object Y Position
000058CE =00000010                  obj_x_spd	rs.l	1		; Object X Speed
000058CE =00000014                  obj_y_spd	rs.l	1		; Object Y Gravity
000058CE                            ; obj_maps	rs.l	1
000058CE                            
000058CE =00000018                  obj_anim_next	rs.w	1		; Object animation increment (obj_anim + obj_anim_next)
000058CE =0000001A                  obj_anim_id	rs.w	1		; Object animation to read (current|saved)
000058CE                            ; obj_vram	rs.w	1		; Object VRAM
000058CE =0000001C                  obj_anim_spd	rs.b	1		; Object animation delay
000058CE =0000001D                  obj_index	rs.b	1		; Object code index
000058CE =0000001E                  obj_status	rs.b	1		; Object status
000058CE =0000001F                  obj_subid	rs.b	1		; Object SubID
000058CE =00000020                  obj_frame	rs.b	1		; Object display frame
000058CE                            ; obj_frame_old	rs.b	1		; Object last frame (DMA)
000058CE =00000021                  obj_spwnindx	rs.b	1		; Object respawn index (this - 1)
000058CE =00000022                  obj_col		rs.b	1		; Object collision
000058CE =00000023                  obj_null	rs.b	1		; FILLER
000058CE                            
000058CE =00000024                  obj_ram		rs.b	$40		; Object RAM
000058CE =00000064                  sizeof_obj	rs.l	0
000058CE                            
000058CE                            ; --------------------------------
000058CE                            ; obj_size
000058CE                            ; --------------------------------
000058CE                            
000058CE                            		rsreset
000058CE =00000000                  objsize_l	rs.b	1
000058CE =00000001                  objsize_r	rs.b	1
000058CE =00000002                  objsize_u	rs.b	1
000058CE =00000003                  objsize_d	rs.b	1
000058CE                            
000058CE                            ; --------------------------------
000058CE                            ; obj_status
000058CE                            ; --------------------------------
000058CE                            
000058CE =00000000                  bitobj_flipH	equ	0		; set to flip Sprite Horizontally
000058CE =00000001                  bitobj_flipV	equ	1		; set to flip Sprite Vertically
000058CE =00000002                  bitobj_air	equ	2		; set if floating/jumping
000058CE =00000003                  bitobj_hurt	equ	3		; set if we are hurt (Touched by enemy or player)
000058CE                            
000058CE =00000006                  bitobj_hit	equ	6		; set to we can hit objects
000058CE =00000007                  bitobj_stay	equ	7		; set to stay on-screen
000058CE                            
000058CE                            ; --------------------------------
000058CE                            ; obj_col
000058CE                            ; --------------------------------
000058CE                            
000058CE =00000000                  bitcol_floor	equ	0		; Set for Touching floor
000058CE =00000001                  bitcol_ceiling	equ	1		; 
000058CE =00000002                  bitcol_wall_r	equ	2		; set for Touching floor/wall/Ceiling
000058CE =00000003                  bitcol_wall_l	equ	3		;
000058CE =00000004                  bitcol_obj	equ	4
000058CE =00000005                  bitcol_obju	equ	5
000058CE =00000006                  bitcol_objl	equ	6
000058CE =00000007                  bitcol_objr	equ	7
000058CE                            
000058CE                            ; =================================================================
000058CE                            ; ------------------------------------------------
000058CE                            ; RAM
000058CE                            ; ------------------------------------------------
000058CE                            
000058CE                            		rsset RAM_ObjectSys
000058CE =FFFFC040                  RAM_ObjBuffer	rs.b (sizeof_obj*max_objects)
000058CE =FFFFD940                  RAM_ObjBackup	rs.l 2
000058CE =FFFFD948                  RAM_MicrSprBuff	rs.l max_microspr*2
000058CE =FFFFDB48                  RAM_ObjMaxCoins	rs.l 16
000058CE =FFFFDB88                  RAM_MicrSprCntr	rs.w 1
000058CE =FFFFDB8A                  RAM_ObjCount	rs.w 1
000058CE =FFFFDB8C                  sizeof_objbuff	rs.l 0
000058CE                            ; 		inform 0,"Objects system uses: %h",sizeof_objbuff-RAM_ObjectSys
000058CE                            		
000058CE                            ; ====================================================================		
000058CE                            ; --------------------------------------------
000058CE                            ; Init
000058CE                            ; --------------------------------------------
000058CE                            
000058CE                            Objects_Init:
000058CE 41F9 FFFF C040              		lea	(RAM_ObjBuffer),a0
000058D4 303C 18FF                  		move.w	#(sizeof_obj*max_objects)-1,d0
000058D8                            @ClrObjs:
000058D8 4218                        		clr.b	(a0)+
000058DA 51C8 FFFC                   		dbf	d0,@ClrObjs
000058DE 4279 FFFF DB88              		clr.w	(RAM_MicrSprCntr)
000058E4 4E75                       		rts
000058E6                             
000058E6                            ; ====================================================================	
000058E6                            ; --------------------------------------------
000058E6                            ; Loop
000058E6                            ; --------------------------------------------
000058E6                            
000058E6                            Objects_Run:
000058E6 6100 B318                    		bsr	Sprites_Reset
000058EA                            
000058EA                            ; -----------------------------
000058EA                            ; Run objects
000058EA                            ; -----------------------------
000058EA                            
000058EA 4279 FFFF DB8A             		clr.w	(RAM_ObjCount)
000058F0 4DF9 FFFF C040              		lea	(RAM_ObjBuffer),a6
000058F6 3E3C 003F                   		move.w	#max_objects-1,d7
000058FA                            @Next:
000058FA 4A96                        		tst.l	(a6)
000058FC 6700                        		beq.s	@NoAddr
000058FE                             		
000058FE 48F9 4080 FFFF D940         		movem.l	a6/d7,(RAM_ObjBackup)
00005906 2A6E 0000                    		movea.l	obj_code(a6),a5
0000590A 4E95                         		jsr	(a5)
0000590C 4CF9 4080 FFFF D940         		movem.l	(RAM_ObjBackup),a6/d7
00005914 0679 0001 FFFF DB8A          		add.w	#1,(RAM_ObjCount)
0000591C                            @NoAddr:
0000591C DCFC 0064                   		adda	#sizeof_obj,a6
00005920 51CF FFD8                   		dbf	d7,@Next
00005924                             		
00005924                            ; -----------------------------
00005924                            ; Show the sprites
00005924                            ; -----------------------------
00005924                            
00005924                            ; Object_DrawObjects:
00005924 45F9 FFFF D948              		lea	(RAM_MicrSprBuff),a2
0000592A                            @NextFrm:
0000592A 4A92                        		tst.l	(a2)
0000592C 6700                        		beq.s	@NoAddrFrm
0000592E 6100 0000                   		bsr	Object_MicroToSpr
00005932 429A                        		clr.l	(a2)+
00005934 429A                        		clr.l	(a2)+
00005936 60F2                         		bra.s	@NextFrm
00005938                            @NoAddrFrm:
00005938 4279 FFFF DB88               		clr.w	(RAM_MicrSprCntr)
0000593E 4E75                       		rts
00005940                            ; 		inform 0,"%h",RAM_MicrSprBuff
00005940                            		
00005940                            ; ====================================================================
00005940                            ; ----------------------------------------------
00005940                            ; Subs
00005940                            ; ----------------------------------------------
00005940                            
00005940                            ; **********************************************
00005940                            ; Object display
00005940                            ; **********************************************
00005940                            
00005940                            ; ----------------------------------------------
00005940                            ; Object_DynArt
00005940                            ; 
00005940                            ; Input:
00005940                            ; d0 | LONG - VRAM|Frame
00005940                            ; d1 | LONG - DPLC data
00005940                            ; d2 | LONG - Art data
00005940                            ;
00005940                            ; Uses:
00005940                            ; a3/d3-d7
00005940                            ; ----------------------------------------------
00005940                             
00005940                            Object_DPLC:
00005940                            ; 		cmp.b	obj_frame_old(a6),d0
00005940                            ; 		beq.s	@EndAll
00005940 0240 00FF                  		and.w	#$FF,d0
00005944                            ; 		move.b	d0,obj_frame_old(a6)
00005944 2641                       		movea.l	d1,a3
00005946 E348                       		lsl.w	#1,d0
00005948 D6F3 0000                      		adda	(a3,d0.w),a3
0000594C 7C00                          		moveq	#0,d6
0000594E 3C1B                          		move.w	(a3)+,d6
00005950 6700 0000                     		beq	@EndAll
00005954 0446 0001                     		sub.w	#1,d6
00005958 4840                          		swap	d0
0000595A 0240 07FF                     		and.w	#$7FF,d0
0000595E 7A00                          		moveq	#0,d5
00005960 3A00                          		move.w	d0,d5		;d5 - VRAM (base)
00005962 2E02                          		move.l	d2,d7
00005964                            @Next:
00005964 3213                            		move.w	(a3),d1
00005966 E049                            		lsr.w	#8,d1
00005968 3801                            		move.w	d1,d4
0000596A E84C                            		lsr.w	#4,d4		;d4 - Next VRAM
0000596C 0244 000F                       		and.w	#$F,d4
00005970 0644 0001                       		add.w	#1,d4
00005974 0641 0010                       		add.w	#$10,d1		;Size + 1
00005978 4841                            		swap	d1		;Size|ROM+Here
0000597A 321B                             		move.w	(a3)+,d1
0000597C 0241 0FFF                        		and.w	#$FFF,d1
00005980 EB49                            		lsl.w	#5,d1
00005982 2007                            		move.l	d7,d0
00005984 7600                             		moveq	#0,d3
00005986 3601                             		move.w	d1,d3
00005988 D083                             		add.l	d3,d0		;ROM Addr + Cell number
0000598A                                 		
0000598A 4841                       		swap	d1		;(Broken)|Size
0000598C 3405                       		move.w	d5,d2
0000598E 6100 B23C                      		bsr	DMA_Set		;** TODO **
00005992 DA44                       		add.w	d4,d5		;Next VRAM
00005994 51CE FFCE                     		dbf	d6,@Next
00005998                             
00005998                            @EndAll:
00005998 4E75                        		rts
0000599A                             
0000599A                            ; ----------------------------------------------
0000599A                            ; Object_Show
0000599A                            ; 
0000599A                            ; Input:
0000599A                            ; a6 - Current object
0000599A                            ; d0 - VRAM | Frame
0000599A                            ; 
0000599A                            ; Uses:
0000599A                            ; a3/d0-d1
0000599A                            ; 
0000599A                            ; WARNING: WITH THIS METHOD, OBJECTS MUST BE
0000599A                            ; AFTER $FF8000 SO IT CAN CORRECTLY
0000599A                            ; CHECK BETWEEN OBJECTS AND
0000599A                            ; SEPARATE SPRITES
0000599A                            ; ----------------------------------------------
0000599A                            
0000599A                            Object_Show:	
0000599A 47F9 FFFF D948             		lea	(RAM_MicrSprBuff),a3
000059A0 3439 FFFF DB88             		move.w	(RAM_MicrSprCntr),d2
000059A6 E74A                       		lsl.w	#3,d2
000059A8 D6C2                       		adda	d2,a3
000059AA                            ; @next:		
000059AA                            ; 		tst.l	(a3)
000059AA                            ; 		beq.s	@free
000059AA                            ; 		adda	#8,a3
000059AA                            ; 		bra.s	@next
000059AA                            @free:
000059AA B6FC DB48                   		cmpa.w	#(RAM_MicrSprBuff+($200))&$FFFF,a3	; TODO: mejor check
000059AE 6C00                        		bge.s	@full
000059B0                             		
000059B0 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
000059B6 342E 0008                   		move.w	obj_x(a6),d2
000059BA 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
000059C0 6600                        		bne.s	@onscrn_X
000059C2 946D 001C                   		sub.w	lvl_x(a5),d2
000059C6                            @onscrn_X:
000059C6 0642 0080                   		add.w	#$80,d2
000059CA 0C42 0040                    		cmp.w	#$40,d2
000059CE 6D00 0000                    		blt	@full
000059D2 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
000059D6 6E00 0000                   		bgt	@full
000059DA                            
000059DA 4842                        		swap	d2
000059DC 342E 000C                   		move.w	obj_y(a6),d2
000059E0 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
000059E6 6600                        		bne.s	@onscrn_Y
000059E8 946D 0020                  		sub.w	lvl_y(a5),d2
000059EC                            @onscrn_Y:
000059EC 0642 0080                   		add.w	#$80,d2
000059F0 0C42 0040                   		cmp.w	#$40,d2
000059F4 6D00 0000                   		blt	@full
000059F8 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
000059FC 6E00 0000                  		bgt	@full
00005A00                                		
00005A00 36CE                       		move.w	a6,(a3)+	; (Object_RAM & $FFFF)
00005A02 0240 00FF                  		and.w	#$FF,d0
00005A06 E148                       		lsl.w	#8,d0
00005A08 4840                       		swap	d0
00005A0A 36C0                       		move.w	d0,(a3)+	; VRAM
00005A0C 4240                       		clr.w	d0
00005A0E 8280                        		or.l	d0,d1	
00005A10 26C1                       		move.l	d1,(a3)+	; Frame | Maps data
00005A12                            		
00005A12 0679 0001 FFFF DB88        		add.w	#1,(RAM_MicrSprCntr)
00005A1A                            @full:		
00005A1A 4E75                        		rts
00005A1C                            
00005A1C                            ; ----------------------------------------------
00005A1C                            ; Object_ExtSprite
00005A1C                            ; 
00005A1C                            ; Input:
00005A1C                            ; d0 -    X | Y
00005A1C                            ; d1 - Size | VRAM
00005A1C                            ; 
00005A1C                            ; Uses:
00005A1C                            ; d4-d5, a3/d5
00005A1C                            ; ----------------------------------------------
00005A1C                            
00005A1C                            Object_ExtSprite:
00005A1C 47F9 FFFF D948             		lea	(RAM_MicrSprBuff),a3
00005A22 3839 FFFF DB88             		move.w	(RAM_MicrSprCntr),d4
00005A28 E74C                       		lsl.w	#3,d4
00005A2A D6C4                       		adda	d4,a3
00005A2C                            ; @next:		
00005A2C                            ; 		tst.l	(a3)
00005A2C                            ; 		beq.s	@free
00005A2C                            ; 		adda	#8,a3
00005A2C                            ; 		bra.s	@next
00005A2C                            @free:
00005A2C B6FC DB48                   		cmpa.w	#(RAM_MicrSprBuff+($200))&$FFFF,a3	; TODO: mejor check
00005A30 6C00                        		bge.s	@full
00005A32                             		
00005A32 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005A38                            		
00005A38 2A00                       		move.l	d0,d5
00005A3A 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00005A40 6600                        		bne.s	@onscrn_Y
00005A42 9A6D 0020                    		sub.w	lvl_y(a5),d5
00005A46                            @onscrn_Y:
00005A46 0645 0080                    		add.w	#$80,d5
00005A4A 0C45 0040                   		cmp.w	#$40,d5
00005A4E 6D00 0000                   		blt	@full
00005A52 0C45 01A0                  		cmp.w	#(224+$80)+$40,d5
00005A56 6E00 0000                  		bgt	@full
00005A5A 0245 7FFF                   		and.w	#$7FFF,d5
00005A5E 3685                         		move.w	d5,(a3)
00005A60                            
00005A60 4845                       		swap	d5
00005A62 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00005A68 6600                        		bne.s	@onscrn_X
00005A6A 9A6D 001C                     		sub.w	lvl_x(a5),d5
00005A6E                            @onscrn_X:
00005A6E 0645 0080                    		add.w	#$80,d5
00005A72 0C45 0040                    		cmp.w	#$40,d5
00005A76 6D00 0000                    		blt	@full
00005A7A 0C45 0200                   		cmp.w	#(320+$80)+$40,d5
00005A7E 6E00 0000                   		bgt	@full
00005A82 0245 7FFF                  		and.w	#$7FFF,d5
00005A86 3745 0006                    		move.w	d5,6(a3)
00005A8A                            
00005A8A 2801                         		move.l	d1,d4
00005A8C 3744 0004                   		move.w	d4,4(a3)
00005A90 4844                        		swap	d4
00005A92 3A04                        		move.w	d4,d5
00005A94 0245 000F                   		and.w	#$F,d5
00005A98 3745 0002                     		move.w	d5,2(a3)
00005A9C 4844                          		swap	d4
00005A9E                               		
00005A9E 0679 0001 FFFF DB88           		add.w	#1,(RAM_MicrSprCntr)
00005AA6                            @full:		
00005AA6 4E75                        		rts
00005AA8                             		
00005AA8                            ; ----------------------------------------------
00005AA8                            ; Object_Delete
00005AA8                            ; 
00005AA8                            ; Input:
00005AA8                            ; a6 - Current object
00005AA8                            ; ----------------------------------------------
00005AA8                            
00005AA8                            Object_Delete:
00005AA8 7000                       		moveq	#0,d0
00005AAA 102E 0021                  		move.b 	obj_spwnindx(a6),d0
00005AAE 4A00                       		tst.b	d0
00005AB0 6700                       		beq.s	@offindx
00005AB2 0440 0001                  		sub.w	#1,d0
00005AB6 C0FC 000A                  		mulu.w	#$A,d0
00005ABA 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
00005AC0 DAC0                       		adda	d0,a5
00005AC2 0895 0007                  		bclr	#7,(a5)			;Reset ON SCREEN flag
00005AC6                            @offindx:
00005AC6                            
00005AC6                            ;  		clr.l	obj_code(a6)
00005AC6                            ; 		clr.b	obj_index(a6)
00005AC6                            		
00005AC6 303C 0063                  		move.w	#sizeof_obj-1,d0
00005ACA                            @delete:
00005ACA 421E                       		clr.b	(a6)+
00005ACC 51C8 FFFC                  		dbf	d0,@delete
00005AD0 4E75                        		rts
00005AD2                             		
00005AD2                            ; ----------------------------------------------
00005AD2                            ; Object_MicroToSpr
00005AD2                            ; 
00005AD2                            ; grab an entry from the microlist
00005AD2                            ; and convert it to sprites
00005AD2                            ; ----------------------------------------------
00005AD2                            
00005AD2                            Object_MicroToSpr:
00005AD2 7000                       		moveq	#0,d0
00005AD4 3012                       		move.w	(a2),d0
00005AD6 4A40                       		tst.w	d0
00005AD8 6B00                       		bmi.s	@FromObject
00005ADA                            		
00005ADA 4BF9 FFFF E5C0              		lea	(RAM_SprControl),a5
00005AE0 286D 0000                  		movea.l	sprite_free(a5),a4
00005AE4 B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
00005AE8 6E00 0000                   		bgt	Object_Return
00005AEC                             		
00005AEC 3412                         		move.w	(a2),d2
00005AEE 0C42 0040                   		cmp.w	#$40,d2
00005AF2 6D00 0000                   		blt	@no_sprite
00005AF6 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
00005AFA 6E00 0000                  		bgt	@no_sprite
00005AFE 3882                        		move.w	d2,(a4)
00005B00 342A 0006                   		move.w	6(a2),d2
00005B04 0C42 0040                    		cmp.w	#$40,d2
00005B08 6D00 0000                    		blt	@no_sprite
00005B0C 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
00005B10 6E00 0000                   		bgt	@no_sprite
00005B14 3942 0006                   		move.w	d2,6(a4)
00005B18                            	
00005B18 342A 0002                  		move.w	2(a2),d2
00005B1C 302D 0004                  		move.w	sprite_link(a5),d0
00005B20 066D 0001 0004              		add.w	#1,sprite_link(a5)
00005B26 E14A                            		lsl.w	#8,d2
00005B28 0242 0F00                  		and.w	#$0F00,d2
00005B2C 8042                       		or.w	d2,d0
00005B2E 3940 0002                  		move.w	d0,2(a4)
00005B32 396A 0004 0004             		move.w	4(a2),4(a4)
00005B38                             
00005B38 D8FC 0008                    		adda	#8,a4
00005B3C 2B4C 0000                  		move.l	a4,sprite_free(a5)
00005B40 4E75                       		rts
00005B42                            
00005B42                            @no_sprite:
00005B42 4294                       		clr.l	(a4)
00005B44 42AC 0004                  		clr.l	4(a4)
00005B48 4E75                       		rts
00005B4A                            		
00005B4A                            ; ----------------------------------------------
00005B4A                            
00005B4A                            @FromObject:
00005B4A 0080 00FF 0000             		or.l	#$FF0000,d0
00005B50 2C40                       		movea.l	d0,a6
00005B52 302A 0002                   		move.w	2(a2),d0
00005B56 4840                       		swap	d0
00005B58 102A 0004                  		move.b	4(a2),d0
00005B5C 0240 00FF                  		and.w	#$FF,d0
00005B60 222A 0004                  		move.l	4(a2),d1
00005B64 0281 00FF FFFF             		and.l	#$FFFFFF,d1
00005B6A                            		
00005B6A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005B70 342E 0008                   		move.w	obj_x(a6),d2
00005B74 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00005B7A 6600                        		bne.s	@onscrn_X_obj
00005B7C 946D 001C                   		sub.w	lvl_x(a5),d2
00005B80                            @onscrn_X_obj:
00005B80 0642 0080                   		add.w	#$80,d2
00005B84 0C42 0040                    		cmp.w	#$40,d2
00005B88 6D00 0000                    		blt	Object_Return
00005B8C 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
00005B90 6E00 0000                   		bgt	Object_Return
00005B94 4842                        		swap	d2
00005B96 342E 000C                   		move.w	obj_y(a6),d2
00005B9A 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00005BA0 6600                        		bne.s	@onscrn_Y_obj
00005BA2 946D 0020                  		sub.w	lvl_y(a5),d2
00005BA6                            @onscrn_Y_obj:
00005BA6 0642 0080                   		add.w	#$80,d2
00005BAA 0C42 0040                   		cmp.w	#$40,d2
00005BAE 6D00 0000                   		blt	Object_Return
00005BB2 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
00005BB6 6E00 0000                  		bgt	Object_Return
00005BBA                            
00005BBA 4243                       		clr.w	d3
00005BBC 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00005BC2 6700                       		beq.s	@Right_LR
00005BC4 08C3 0000                  		bset	#0,d3
00005BC8                            @Right_LR:
00005BC8 082E 0001 001E             		btst	#bitobj_flipV,obj_status(a6)
00005BCE 6700                       		beq.s	@Right_UD
00005BD0 08C3 0001                  		bset	#1,d3
00005BD4                            @Right_UD:
00005BD4                            
00005BD4                            ; ----------------------------------------------
00005BD4                            ; Object_BldSpr_List
00005BD4                            ; 
00005BD4                            ; Input:
00005BD4                            ; d0 - VRAM|Frame
00005BD4                            ; d1 - Mappings data address
00005BD4                            ; d2 - X-pos|Y-pos 
00005BD4                            ; d3 - Flags
00005BD4                            ;
00005BD4                            ; Output:
00005BD4                            ; d3 - New sprite link
00005BD4                            ; 
00005BD4                            ; Uses:
00005BD4                            ; a3-a5/d4
00005BD4                            ; ----------------------------------------------
00005BD4                            
00005BD4                            ; TODO: esto no checa el final
00005BD4                            
00005BD4                            Object_BldSpr_List:
00005BD4 4BF9 FFFF E5C0              		lea	(RAM_SprControl),a5
00005BDA 286D 0000                  		movea.l	sprite_free(a5),a4
00005BDE B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
00005BE2 6E00 0000                   		bgt	Object_Return
00005BE6                             		
00005BE6 2641                        		movea.l	d1,a3
00005BE8 E348                        		lsl.w	#1,d0
00005BEA D6F3 0000                   		adda	(a3,d0.w),a3
00005BEE                             		
00005BEE 0283 0000 FFFF             		and.l	#$FFFF,d3
00005BF4 7C00                        		moveq	#0,d6
00005BF6 1C1B                        		move.b	(a3)+,d6
00005BF8 6700 0000                   		beq	Object_Return
00005BFC 0446 0001                   		sub.w	#1,d6
00005C00                            @Next:
00005C00                            
00005C00                            ; ------------
00005C00                            ; Ypos check
00005C00                            ; ------------
00005C00                            
00005C00                            ; TODO: hacer el mismo fix de abajo despues
00005C00                            
00005C00 3202                       		move.w	d2,d1
00005C02 1013                        		move.b	(a3),d0
00005C04 4880                        		ext.w	d0
00005C06                             		
00005C06 0803 0001                     		btst	#1,d3		; VFlip flag?
00005C0A 6700 0000                    		beq	@DontFlip
00005C0E 182B 0001                   		move.b	1(a3),d4
00005C12 0244 0003                    		and.w	#%11,d4
00005C16 E74C                         		lsl.w	#3,d4
00005C18 D044                         		add.w	d4,d0
00005C1A 4440                       		neg.w	d0
00005C1C                            @DontFlip:
00005C1C D240                        		add.w	d0,d1
00005C1E 1039 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d0
00005C24 0240 0006                   		and.w	#%00000110,d0
00005C28 6700                        		beq.s	@normal
00005C2A 0641 0070                  		add.w	#$70,d1	
00005C2E                            @normal:
00005C2E 38C1                        		move.w	d1,(a4)+
00005C30                            		
00005C30                            ; ------------
00005C30                            ; Size
00005C30                            ; ------------
00005C30                            
00005C30 18EB 0001                   		move.b	1(a3),(a4)+		; Size
00005C34 4240                        		clr.w	d0
00005C36 102D 0005                   		move.b	5(a5),d0
00005C3A D02D 0004                   		add.b	sprite_link(a5),d0
00005C3E 18C0                        		move.b	d0,(a4)+		; Link
00005C40 066D 0001 0004              		add.w	#1,sprite_link(a5)
00005C46                             
00005C46                            ; ------------
00005C46                            ; Vram
00005C46                            ; ------------
00005C46                            
00005C46 4240                         		clr.w	d0			; Vram
00005C48 102B 0002                    		move.b	2(a3),d0
00005C4C E148                         		lsl.w	#8,d0
00005C4E 102B 0003                    		move.b	3(a3),d0
00005C52 4840                         		swap	d0
00005C54 3200                         		move.w	d0,d1
00005C56 4840                         		swap	d0
00005C58 D240                         		add.w	d0,d1
00005C5A                              	
00005C5A 0803 0000                     		btst	#0,d3			;Left flag?
00005C5E 6700                          		beq.s	@Right
00005C60 0041 0800                     		or.w	#$800,d1
00005C64                            @Right:
00005C64 0803 0001                     		btst	#1,d3			;V flag?
00005C68 6700                          		beq.s	@Down
00005C6A 0041 1000                     		or.w	#$1000,d1
00005C6E                            @Down:
00005C6E 38C1                         		move.w	d1,(a4)+
00005C70                            		
00005C70                            ; ------------
00005C70                            ; Xpos check
00005C70                            ; ------------
00005C70                            
00005C70 4240                        		clr.w	d0
00005C72 7200                        		moveq	#0,d1
00005C74 7800                        		moveq	#0,d4
00005C76 4842                        		swap	d2
00005C78 3202                        		move.w	d2,d1
00005C7A 4842                        		swap	d2
00005C7C                             		
00005C7C 102B 0004                   		move.b	4(a3),d0
00005C80 4880                        		ext.w	d0
00005C82 0803 0000                     		btst	#0,d3			;Left flag?
00005C86 6700 0000                    		beq	@ContX
00005C8A                            
00005C8A 182B 0001                   		move.b	1(a3),d4
00005C8E 0244 000C                    		and.w	#%1100,d4
00005C92 E34C                         		lsl.w	#1,d4
00005C94 D044                         		add.w	d4,d0
00005C96 4440                       		neg.w	d0
00005C98 0440 0008                    		sub.w	#8,d0			;TODO: mala idea
00005C9C                            
00005C9C                            @ContX:
00005C9C D240                        		add.w	d0,d1
00005C9E 38C1                        		move.w	d1,(a4)+
00005CA0 D6FC 0005                   		adda 	#5,a3
00005CA4 51CE FF5A                   		dbf	d6,@Next
00005CA8 2B4C 0000                   		move.l	a4,sprite_free(a5)
00005CAC                             		
00005CAC B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
00005CB0 6E00                        		bgt.s	Object_Return
00005CB2 429C                        		clr.l	(a4)+
00005CB4 429C                        		clr.l	(a4)+
00005CB6                            Object_Return:
00005CB6 4E75                        		rts
00005CB8                             		
00005CB8                            ; ----------------------------------------------
00005CB8                            ; Object_IsGone
00005CB8                            ; ----------------------------------------------
00005CB8                            
00005CB8                            Object_IsGone:
00005CB8 7000                       		moveq	#0,d0
00005CBA 102E 0021                  		move.b 	obj_spwnindx(a6),d0
00005CBE 4A00                       		tst.b	d0
00005CC0 6700                       		beq.s	@offindx
00005CC2 0440 0001                  		sub.w	#1,d0
00005CC6 C0FC 000A                  		mulu.w	#$A,d0
00005CCA 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
00005CD0 DAC0                       		adda	d0,a5
00005CD2 08D5 0006                  		bset	#6,(a5)			; Set GONE flag
00005CD6                            @offindx:
00005CD6 4E75                       		rts
00005CD8                            		
00005CD8                            ; ----------------------------------------------
00005CD8                            ; Object_OffCheck
00005CD8                            ; ----------------------------------------------
00005CD8                            
00005CD8                            Object_OffCheck:
00005CD8 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005CDE 49F9 FFFF BC42             		lea	(RAM_LevelObjPos),a4
00005CE4                            		
00005CE4 7000                       		moveq	#0,d0
00005CE6 102E 0021                  		move.b 	obj_spwnindx(a6),d0
00005CEA 4A00                       		tst.b	d0
00005CEC 6700                       		beq.s	@return
00005CEE 0440 0001                  		sub.w	#1,d0
00005CF2 C0FC 000A                  		mulu.w	#$A,d0
00005CF6 D8C0                       		adda	d0,a4
00005CF8                            		
00005CF8 302D 0020                     		move.w	lvl_y(a5),d0
00005CFC 3400                          		move.w	d0,d2
00005CFE 322E 000C                       		move.w	obj_y(a6),d1
00005D02 0641 0060                       		add.w	#$60,d1
00005D06 B240                            		cmp.w	d0,d1
00005D08 6D00                            		blt.s	Object_OffDelete
00005D0A 0642 0140                         		add.w	#224+$60,d2
00005D0E 322E 000C                        		move.w	obj_y(a6),d1
00005D12 B242                             		cmp.w	d2,d1
00005D14 6E00                             		bgt.s	Object_OffDelete
00005D16                                 		
00005D16 302D 001C                    		move.w	lvl_x(a5),d0
00005D1A 3400                         		move.w	d0,d2
00005D1C 322E 0008                      		move.w	obj_x(a6),d1
00005D20 0641 0040                      		add.w	#$40,d1
00005D24 B240                           		cmp.w	d0,d1
00005D26 6D00                           		blt.s	Object_OffDelete
00005D28 0642 0180                        		add.w	#320+$40,d2		;TODO: horizontal mode 
00005D2C 322E 0008                       		move.w	obj_x(a6),d1
00005D30 B242                            		cmp.w	d2,d1
00005D32 6E00                            		bgt.s	Object_OffDelete
00005D34                                 		
00005D34                            ;      		; Check for suicide
00005D34                            ; 		move.w	lvl_size_y(a5),d0		; Bottomless pit
00005D34                            ; 		lsl.w	#4,d0
00005D34                            ; 		move.w	obj_y(a6),d1
00005D34                            ; 		moveq	#0,d2
00005D34                            ; 		move.b	obj_size+2(a6),d2
00005D34                            ; 		lsl.w	#3,d2
00005D34                            ; 		sub.w	d2,d1
00005D34                            ; 		cmp.w	d0,d1
00005D34                            ; 		blt	@return
00005D34                            ; 		
00005D34                            ; 		bset	#7,(a4)
00005D34                            ; 		clr.l	obj_code(a6)
00005D34                            ; 		clr.b	obj_index(a6)
00005D34                            @return:
00005D34 4E75                       		rts
00005D36                            		
00005D36                            ; a4 - respawn slot of this object
00005D36                            
00005D36                            Object_OffDelete:
00005D36 0894 0007                  		bclr	#7,(a4)			; Reset ON SCREEN flag
00005D3A                            @offindx:
00005D3A                            
00005D3A 42AE 0000                  		clr.l	obj_code(a6)
00005D3E 422E 001D                  		clr.b	obj_index(a6)
00005D42                            @Return:
00005D42 4E75                        		rts
00005D44                            		
00005D44                            ; ----------------------------------------------
00005D44                            ; Object animation
00005D44                            ; 
00005D44                            ; Input
00005D44                            ; d1 | LONG - Animation data
00005D44                            ; 
00005D44                            ; Output
00005D44                            ; d0 | WORD - Frame
00005D44                            ; 
00005D44                            ; Uses:
00005D44                            ; d2
00005D44                            ; ----------------------------------------------
00005D44                             
00005D44                            Object_Animate:
00005D44 4A81                        		tst.l	d1
00005D46 6700                         		beq.s	@Return
00005D48 7400                        		moveq	#0,d2
00005D4A 142E 001B                   		move.b	obj_anim_id+1(a6),d2
00005D4E B42E 001A                   		cmp.b	obj_anim_id(a6),d2
00005D52 6700                        		beq.s	@SameThing
00005D54 1D6E 001A 001B              		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
00005D5A 426E 0018                   		clr.w	obj_anim_next(a6)
00005D5E                            @SameThing:
00005D5E 142E 001A                   		move.b	obj_anim_id(a6),d2
00005D62 0C02 00FF                   		cmp.b	#-1,d2
00005D66 6700                        		beq.s	@Return
00005D68 E34A                        		lsl.w	#1,d2
00005D6A 2041                       		movea.l	d1,a0
00005D6C D0F0 2000                   		adda	(a0,d2.w),a0
00005D70                             
00005D70 1418                        		move.b	(a0)+,d2
00005D72 0C02 00FF                   		cmp.b	#-1,d2
00005D76 6700                        		beq.s	@keepspd
00005D78 042E 0001 001C              		sub.b	#1,obj_anim_spd(a6)
00005D7E 6A00                        		bpl.s	@Return
00005D80 1D42 001C                  		move.b	d2,obj_anim_spd(a6)
00005D84                            @keepspd:
00005D84 7200                        		moveq	#0,d1
00005D86 342E 0018                   		move.w	obj_anim_next(a6),d2
00005D8A 1210                        		move.b	(a0),d1
00005D8C D0C2                        		adda	d2,a0
00005D8E                             
00005D8E 0280 FFFF 0000              		and.l	#$FFFF0000,d0
00005D94 1010                        		move.b	(a0),d0
00005D96 0C00 00FF                   		cmp.b	#$FF,d0
00005D9A 6700                        		beq.s	@NoAnim
00005D9C 0C00 00FE                   		cmp.b	#$FE,d0
00005DA0 6700                        		beq.s	@GoToFrame
00005DA2 0C00 00FD                   		cmp.b	#$FD,d0
00005DA6 6700                        		beq.s	@LastFrame
00005DA8                             		
00005DA8 1D40 0020                   		move.b	d0,obj_frame(a6)
00005DAC 066E 0001 0018              		add.w	#1,obj_anim_next(a6)
00005DB2                            @Return:
00005DB2 4E75                        		rts
00005DB4                             
00005DB4                            @NoAnim:
00005DB4 3D7C 0001 0018              		move.w	#1,obj_anim_next(a6)
00005DBA 3001                        		move.w	d1,d0
00005DBC 1D40 0020                   		move.b	d0,obj_frame(a6)
00005DC0 4E75                       		rts
00005DC2                            @LastFrame:
00005DC2 422E 001C                   		clr.b	obj_anim_spd(a6)
00005DC6 4E75                       		rts
00005DC8                            @GoToFrame:
00005DC8 426E 0018                  		clr.w	obj_anim_next(a6)
00005DCC 1D68 0001 0019             		move.b	1(a0),obj_anim_next+1(a6)
00005DD2 4E75                       		rts
00005DD4                            	
00005DD4                            ; ------------------------------------------------
00005DD4                            
00005DD4                            Object_ShowPoints:
00005DD4 302E 0008                   		move.w	obj_x(a6),d0
00005DD8 0440 0004                   		sub.w	#4,d0
00005DDC 4840                        		swap	d0
00005DDE 302E 000C                   		move.w	obj_y(a6),d0
00005DE2 0440 0004                   		sub.w	#4,d0
00005DE6 7200                        		moveq	#0,d1
00005DE8 323C 0587                   		move.w	#$587,d1
00005DEC 6000 FC2E                   		bra	Object_ExtSprite
00005DF0                             		
00005DF0                             		
00005DF0 382E 000C                   		move.w	obj_y(a6),d4
00005DF4 7400                        		moveq	#0,d2
00005DF6 142E 0007                   		move.b	obj_size+3(a6),d2
00005DFA E74A                        		lsl.w	#3,d2
00005DFC D842                        		add.w	d2,d4
00005DFE 6100 0000                   		bsr	@leftright
00005E02 382E 000C                   		move.w	obj_y(a6),d4
00005E06 7400                        		moveq	#0,d2
00005E08 142E 0006                   		move.b	obj_size+2(a6),d2
00005E0C E74A                        		lsl.w	#3,d2
00005E0E 9842                        		sub.w	d2,d4
00005E10                            
00005E10                            ;  		rts
00005E10                            @leftright:
00005E10 302E 0008                   		move.w	obj_x(a6),d0
00005E14 0440 0002                   		sub.w	#2,d0
00005E18 4840                        		swap	d0
00005E1A 3004                        		move.w	d4,d0
00005E1C 7200                        		moveq	#0,d1
00005E1E 323C 0587                   		move.w	#$587,d1
00005E22 6100 FBF8                   		bsr	Object_ExtSprite
00005E26                             		
00005E26 302E 0008                   		move.w	obj_x(a6),d0
00005E2A 7400                        		moveq	#0,d2
00005E2C 142E 0004                   		move.b	obj_size(a6),d2
00005E30 E74A                        		lsl.w	#3,d2
00005E32 9042                        		sub.w	d2,d0
00005E34 4840                        		swap	d0
00005E36 3004                        		move.w	d4,d0
00005E38 6100 FBE2                   		bsr	Object_ExtSprite
00005E3C                             		
00005E3C 302E 0008                   		move.w	obj_x(a6),d0
00005E40 0440 0003                   		sub.w	#3,d0
00005E44 7400                        		moveq	#0,d2
00005E46 142E 0005                   		move.b	obj_size+1(a6),d2
00005E4A E74A                        		lsl.w	#3,d2
00005E4C D042                        		add.w	d2,d0
00005E4E 4840                        		swap	d0
00005E50 3004                        		move.w	d4,d0
00005E52 6000 FBC8                   		bra	Object_ExtSprite
00005E56                             	
00005E56                            ; **********************************************
00005E56                            ; Object level collision
00005E56                            ; **********************************************
00005E56                            
00005E56                            ; ************************
00005E56                            ; Find floor collision
00005E56                            ; CENTER
00005E56                            ; 
00005E56                            ; Input:
00005E56                            ; a6 - Object to read
00005E56                            ; a5 - Level buffer
00005E56                            ; a4 - Layout data
00005E56                            ; 
00005E56                            ; Output:
00005E56                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
00005E56                            ; 
00005E56                            ; Uses:
00005E56                            ; a3-a4 | d4-d5
00005E56                            ; ************************
00005E56                            
00005E56                            object_FindPrz_Floor:
00005E56 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005E5C 286D 0018                    		movea.l	lvl_prizes(a5),a4
00005E60 6000                         		bra.s	objSearchCol_Floor
00005E62                              		
00005E62                            object_FindCol_Floor:
00005E62 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005E68 286D 0014                    		movea.l	lvl_collision(a5),a4
00005E6C                            
00005E6C                            objSearchCol_Floor:
00005E6C 7000                       		moveq	#0,d0
00005E6E 7800                       		moveq	#0,d4
00005E70 7A00                       		moveq	#0,d5
00005E72 382E 000C                   		move.w	obj_y(a6),d4
00005E76 1A2E 0007                   		move.b	obj_size+3(a6),d5
00005E7A E74D                        		lsl.w	#3,d5
00005E7C D845                        		add.w	d5,d4
00005E7E 4A44                        		tst.w	d4
00005E80 6B00 0000                   		bmi	@no_col
00005E84 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00005E88 E94D                        		lsl.w	#4,d5
00005E8A B845                        		cmp.w	d5,d4
00005E8C 6C00 0000                   		bge	@no_col
00005E90 3A04                        		move.w	d4,d5
00005E92 E98D                          		lsl.l	#4,d5
00005E94 2005                           		move.l	d5,d0
00005E96 E84C                         		lsr.w	#4,d4
00005E98 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
00005E9C D8C4                         		adda	d4,a4
00005E9E                             		
00005E9E                            ; ------------------------
00005E9E                            ; X check
00005E9E                            ; ------------------------
00005E9E                            
00005E9E 264C                         		movea.l	a4,a3
00005EA0 382E 0008                   		move.w	obj_x(a6),d4
00005EA4 4A44                        		tst.w	d4
00005EA6 6B00                        		bmi.s	@force_on
00005EA8 3A2D 0030                   		move.w	lvl_size_x(a5),d5
00005EAC E94D                        		lsl.w	#4,d5
00005EAE B845                         		cmp.w	d5,d4
00005EB0 6C00                         		bge.s	@force_on
00005EB2 E84C                        		lsr.w	#4,d4
00005EB4 D6C4                        		adda 	d4,a3
00005EB6                            ;  		btst	#7,(a3)
00005EB6                            ;  		bne.s	@no_col
00005EB6                            ;  		tst.b	(a3)
00005EB6                            ;  		beq.s	@no_col
00005EB6 E94C                        		lsl.w	#4,d4
00005EB8 4844                        		swap	d4
00005EBA 8084                        		or.l	d4,d0			;XXXYYY00
00005EBC                               		
00005EBC 1013                        		move.b	(a3),d0	
00005EBE 4E75                        		rts
00005EC0                             		
00005EC0                            @force_on:
00005EC0 7001                        		moveq	#1,d0
00005EC2                            @no_col:
00005EC2 4E75                       		rts
00005EC4                            		
00005EC4                            ; ************************
00005EC4                            ; Find side collision
00005EC4                            ; CENTER
00005EC4                            ;
00005EC4                            ; Input:
00005EC4                            ; a6 - Object to read
00005EC4                            ; a5 - Level buffer
00005EC4                            ; a4 - Layout data
00005EC4                            ; 
00005EC4                            ; Output:
00005EC4                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
00005EC4                            ; 
00005EC4                            ; Uses:
00005EC4                            ; a3-a4 | d4-d5
00005EC4                            ; ************************
00005EC4                            
00005EC4                            object_FindPrz_Wall:
00005EC4 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005ECA 286D 0018                    		movea.l	lvl_prizes(a5),a4
00005ECE 6000                         		bra.s	objSearchCol_Wall
00005ED0                              		
00005ED0                            object_FindCol_Wall:
00005ED0 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005ED6 286D 0014                    		movea.l	lvl_collision(a5),a4
00005EDA                            
00005EDA                            objSearchCol_Wall:
00005EDA 7000                       		moveq	#0,d0
00005EDC 7800                       		moveq	#0,d4
00005EDE 7A00                       		moveq	#0,d5
00005EE0 382E 000C                   		move.w	obj_y(a6),d4
00005EE4 1A2E 0007                   		move.b	obj_size+3(a6),d5
00005EE8 E74D                        		lsl.w	#3,d5
00005EEA D845                        		add.w	d5,d4
00005EEC 0444 0001                   		sub.w	#1,d4
00005EF0 4A44                        		tst.w	d4
00005EF2 6B00 0000                   		bmi	@no_col
00005EF6 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00005EFA E94D                        		lsl.w	#4,d5
00005EFC B845                        		cmp.w	d5,d4
00005EFE 6C00 0000                   		bge	@no_col
00005F02 E84C                        		lsr.w	#4,d4
00005F04 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
00005F08 D8C4                        		adda	d4,a4
00005F0A E18C                        		lsl.l	#8,d4
00005F0C 2004                        		move.l	d4,d0
00005F0E                             		
00005F0E                            ; ------------------------
00005F0E                            ; X check
00005F0E                            ; ------------------------
00005F0E                            
00005F0E 264C                        		movea.l	a4,a3
00005F10 382E 0008                   		move.w	obj_x(a6),d4
00005F14 4A44                        		tst.w	d4
00005F16 6B00                        		bmi.s	@force_on
00005F18 3A2D 0030                   		move.w	lvl_size_x(a5),d5
00005F1C E94D                        		lsl.w	#4,d5
00005F1E B845                         		cmp.w	d5,d4
00005F20 6C00                         		bge.s	@force_on
00005F22 E84C                        		lsr.w	#4,d4
00005F24 D6C4                        		adda 	d4,a3
00005F26 E94C                        		lsl.w	#4,d4
00005F28 4844                        		swap	d4
00005F2A                             		
00005F2A 7A00                       		moveq	#0,d5
00005F2C 382E 000C                     		move.w	obj_y(a6),d4
00005F30 1A2E 0007                     		move.b	obj_size+3(a6),d5
00005F34 E74D                          		lsl.w	#3,d5
00005F36 D845                          		add.w	d5,d4
00005F38                               		
00005F38 0444 0001                     		sub.w	#1,d4
00005F3C 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00005F40 E94D                        		lsl.w	#4,d5
00005F42 4845                        		swap	d5
00005F44 1A2E 0006                   		move.b	obj_size+2(a6),d5
00005F48 0245 00FF                    		and.w	#$FF,d5
00005F4C E24D                         		lsr.w	#1,d5
00005F4E 4A45                          		tst.w	d5
00005F50 6700                          		beq.s	@nxt_y
00005F52 0445 0001                     		sub.w	#1,d5
00005F56                            @nxt_y:
00005F56 4845                       		swap	d5
00005F58 4A44                        		tst.w	d4
00005F5A 6B00                        		bmi.s	@force_on
00005F5C B845                        		cmp.w	d5,d4
00005F5E 6C00                        		bge.s	@zero_y
00005F60 0813 0007                   		btst	#7,(a3)
00005F64 6600                        		bne.s	@zero_y
00005F66 4A13                       		tst.b	(a3)
00005F68 6700                       		beq.s	@zero_y
00005F6A 8084                         		or.l	d4,d0
00005F6C 4844                         		swap	d4
00005F6E E98C                         		lsl.l	#4,d4
00005F70 0284 000F FF00               		and.l	#$000FFF00,d4
00005F76 8084                         		or.l	d4,d0
00005F78 1013                        		move.b	(a3),d0
00005F7A 4E75                        		rts
00005F7C                            @zero_y:
00005F7C 96ED 0030                   		suba	lvl_size_x(a5),a3
00005F80 0444 0010                   		sub.w	#$10,d4
00005F84 4845                       		swap	d5
00005F86 51CD FFCE                    		dbf	d5,@nxt_y
00005F8A                            
00005F8A                            @force_on:
00005F8A 103C 0000                  		move.b	#0,d0
00005F8E                            @no_col:
00005F8E 4E75                       		rts
00005F90                            
00005F90                            ; ************************
00005F90                            ; Find Ceiling collision
00005F90                            ; CENTER
00005F90                            ; 
00005F90                            ; Input:
00005F90                            ; a6 - Object to read
00005F90                            ; a5 - Level buffer
00005F90                            ; a4 - Layout data
00005F90                            
00005F90                            ; Output:
00005F90                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
00005F90                            ; 
00005F90                            ; Uses:
00005F90                            ; a3-a4 | d4-d5
00005F90                            ; ************************
00005F90                            
00005F90                            object_FindPrz_Ceiling:
00005F90 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005F96 286D 0018                    		movea.l	lvl_prizes(a5),a4
00005F9A 6000                         		bra.s	objSearchCol_Ceiling
00005F9C                              		
00005F9C                            object_FindCol_Ceiling:
00005F9C 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00005FA2 286D 0014                    		movea.l	lvl_collision(a5),a4
00005FA6                              		
00005FA6                            objSearchCol_Ceiling:
00005FA6 7000                       		moveq	#0,d0
00005FA8 7800                       		moveq	#0,d4
00005FAA 7A00                       		moveq	#0,d5
00005FAC 382E 000C                   		move.w	obj_y(a6),d4
00005FB0 1A2E 0006                      		move.b	obj_size+2(a6),d5
00005FB4 E74D                           		lsl.w	#3,d5
00005FB6 9845                           		sub.w	d5,d4			;UP SIZE
00005FB8 4A44                        		tst.w	d4
00005FBA 6B00 0000                   		bmi	@no_col
00005FBE 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00005FC2 E94D                        		lsl.w	#4,d5
00005FC4 B845                        		cmp.w	d5,d4
00005FC6 6C00 0000                   		bge	@no_col
00005FCA E84C                        		lsr.w	#4,d4
00005FCC 0244 0FFF                   		and.w	#$FFF,d4
00005FD0 3004                        		move.w	d4,d0
00005FD2 E188                        		lsl.l	#8,d0			;000YYY00
00005FD4 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
00005FD8 D8C4                        		adda	d4,a4
00005FDA                            		
00005FDA                            ; ------------------------
00005FDA                            ; X check
00005FDA                            ; ------------------------
00005FDA                            
00005FDA 264C                        		movea.l	a4,a3
00005FDC 382E 0008                   		move.w	obj_x(a6),d4
00005FE0 0444 0001                   		sub.w	#1,d4
00005FE4 4A44                        		tst.w	d4
00005FE6 6B00                        		bmi.s	@no_col
00005FE8 3A2D 0030                   		move.w	lvl_size_x(a5),d5
00005FEC E94D                        		lsl.w	#4,d5
00005FEE B845                          		cmp.w	d5,d4
00005FF0 6C00                          		bge.s	@no_col
00005FF2 E84C                        		lsr.w	#4,d4
00005FF4 D6C4                        		adda 	d4,a3
00005FF6                            ;  		btst	#7,(a3)
00005FF6                            ;  		bne.s	@no_col
00005FF6                            ;  		tst.b	(a3)
00005FF6                            ;  		beq.s	@no_col
00005FF6 E94C                        		lsl.w	#4,d4
00005FF8 4844                        		swap	d4
00005FFA 8084                        		or.l	d4,d0			;XXXYYY00
00005FFC 1013                        		move.b	(a3),d0	
00005FFE                            @no_col:
00005FFE 4E75                       		rts
00006000                            		
00006000                            ; ************************
00006000                            ; Find floor collision
00006000                            ; Left/Right points
00006000                            ;
00006000                            ; Input:
00006000                            ; a6 - Object to read
00006000                            ; a5 - Level buffer
00006000                            ; a4 - Layout data
00006000                            ; 
00006000                            ; Output:
00006000                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
00006000                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
00006000                            ; 
00006000                            ; Uses:
00006000                            ; a3 | d4-d5
00006000                            ; ************************
00006000                            
00006000                            object_FindPrz_FloorSides:
00006000 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006006 286D 0018                    		movea.l	lvl_prizes(a5),a4
0000600A 6000                       		bra.s	objSearchCol_FloorSides
0000600C                            		
0000600C                            object_FindCol_FloorSides:
0000600C 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006012 286D 0014                    		movea.l	lvl_collision(a5),a4
00006016                              		
00006016                            objSearchCol_FloorSides:
00006016 7000                       		moveq	#0,d0
00006018 7200                       		moveq	#0,d1
0000601A                            
0000601A 7800                       		moveq	#0,d4
0000601C 7A00                       		moveq	#0,d5
0000601E 382E 000C                   		move.w	obj_y(a6),d4
00006022 1A2E 0007                    		move.b	obj_size+3(a6),d5
00006026 E74D                        		lsl.w	#3,d5
00006028 D845                        		add.w	d5,d4
0000602A 4A44                        		tst.w	d4
0000602C 6B00 0000                   		bmi	@no_col
00006030 3A2D 0032                    		move.w	lvl_size_y(a5),d5
00006034 E94D                         		lsl.w	#4,d5
00006036 B845                         		cmp.w	d5,d4
00006038 6C00 0000                    		bge	@no_col
0000603C E84C                        		lsr.w	#4,d4
0000603E 3004                         		move.w	d4,d0
00006040 3204                         		move.w	d4,d1
00006042 E188                         		lsl.l	#8,d0			; LEFT 000YYY00
00006044 E189                         		lsl.l	#8,d1			;RIGHT 000YYY00
00006046 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
0000604A D8C4                        		adda	d4,a4
0000604C                            
0000604C                            ; ------------------------
0000604C                            ; X check
0000604C                            ; 
0000604C                            ; LEFT
0000604C                            ; ------------------------
0000604C                            
0000604C 7800                        		moveq	#0,d4
0000604E 7A00                       		moveq	#0,d5
00006050 3A2E 0008                    		move.w	obj_x(a6),d5
00006054 382D 0030                   		move.w	lvl_size_x(a5),d4
00006058 E94C                        		lsl.w	#4,d4
0000605A BA44                             		cmp.w	d4,d5
0000605C 6D00                             		blt.s	@dontfix_l
0000605E 0445 0001                        		sub.w	#1,d5
00006062                            @dontfix_l:
00006062 4A45                        		tst.w	d5
00006064 6B00                        		bmi.s	@zero_l
00006066                             		
00006066 3805                        		move.w	d5,d4
00006068 E84C                        		lsr.w	#4,d4
0000606A 264C                        		movea.l	a4,a3
0000606C D6C4                        		adda 	d4,a3
0000606E 4845                        		swap	d5		; d5 - XRead | Free
00006070 1A2E 0004                   		move.b	obj_size(a6),d5
00006074 0245 00FF                   		and.w	#$FF,d5		; d5 - XRead | Loop
00006078 4A45                        		tst.w	d5
0000607A 6700                        		beq.s	@zero_l
0000607C                            @Next_col_l:
0000607C 4845                        		swap	d5		; d5 - Loop | Xread
0000607E                             		
0000607E 4A13                        		tst.b	(a3)
00006080 6700                        		beq.s	@No_col_l
00006082 0813 0007                   		btst	#7,(a3)
00006086 6600                        		bne.s	@No_col_l
00006088 3805                        		move.w	d5,d4
0000608A 0244 FFF0                   		and.w	#$FFF0,d4
0000608E 4844                        		swap	d4
00006090 8284                        		or.l	d4,d1		; LEFT XXXYYY00
00006092 1213                       		move.b	(a3),d1
00006094 6000                        		bra.s	@zero_l
00006096                            @No_col_l:
00006096                            
00006096 0445 0008                   		sub.w	#8,d5
0000609A 6A00                          		bpl.s	@Fine_l
0000609C 4245                          		clr.w	d5
0000609E                            @Fine_l:
0000609E 3805                        		move.w	d5,d4
000060A0 E84C                        		lsr.w	#4,d4
000060A2 264C                        		movea.l	a4,a3
000060A4 D6C4                        		adda 	d4,a3
000060A6 4845                        		swap	d5		; d5 - XRead | Loop
000060A8 51CD FFD2                   		dbf	d5,@Next_col_l
000060AC                            @zero_l:
000060AC                            		
000060AC                            ; ------------------------
000060AC                            ; X check
000060AC                            ; 
000060AC                            ; RIGHT
000060AC                            ; ------------------------
000060AC                            
000060AC 7800                        		moveq	#0,d4
000060AE 7A00                        		moveq	#0,d5
000060B0 3A2E 0008                   		move.w	obj_x(a6),d5
000060B4 0445 0001                   		sub.w	#1,d5
000060B8 4A45                        		tst.w	d5
000060BA 6B00                        		bmi.s	@no_col
000060BC 382D 0030                   		move.w	lvl_size_x(a5),d4
000060C0 E94C                        		lsl.w	#4,d4
000060C2 BA44                          		cmp.w	d4,d5
000060C4 6C00                           		bge.s	@no_col
000060C6                            
000060C6 3805                        		move.w	d5,d4
000060C8 E84C                        		lsr.w	#4,d4
000060CA 264C                        		movea.l	a4,a3
000060CC D6C4                        		adda 	d4,a3
000060CE 4845                        		swap	d5		;d5 - XRead | Free
000060D0 1A2E 0005                   		move.b	obj_size+1(a6),d5
000060D4 0245 00FF                   		and.w	#$FF,d5		;d5 - XRead | Loop
000060D8 4A45                        		tst.w	d5
000060DA 6700                        		beq.s	@no_col
000060DC                             		
000060DC                            @Next_col_r:
000060DC 4845                        		swap	d5		;d5 - Loop | Xread
000060DE 4A13                        		tst.b	(a3)
000060E0 6700                        		beq.s	@No_col_r
000060E2 0813 0007                   		btst	#7,(a3)
000060E6 6600                        		bne.s	@No_col_r
000060E8 382D 0030                   		move.w	lvl_size_x(a5),d4
000060EC E94C                        		lsl.w	#4,d4
000060EE BA44                          		cmp.w	d4,d5
000060F0 6C00                           		bge.s	@no_col
000060F2                                		
000060F2 3805                        		move.w	d5,d4
000060F4 0244 FFF0                   		and.w	#$FFF0,d4
000060F8 4844                        		swap	d4
000060FA 8084                        		or.l	d4,d0		; RIGHT XXXYYY00
000060FC 1013                       		move.b	(a3),d0
000060FE 4E75                        		rts
00006100                             		
00006100                            @No_col_r:
00006100 0645 0008                   		add.w	#8,d5
00006104 3805                        		move.w	d5,d4
00006106 E84C                        		lsr.w	#4,d4
00006108 264C                        		movea.l	a4,a3
0000610A D6C4                        		adda 	d4,a3
0000610C 4845                        		swap	d5		;d5 - XRead | Loop
0000610E 51CD FFCC                   		dbf	d5,@Next_col_r
00006112                             		
00006112                            ; ------------------------
00006112                            
00006112                            @no_col:
00006112 4E75                       		rts
00006114                            
00006114                            ; ************************
00006114                            ; Find side collision
00006114                            ; LEFT/RIGHT
00006114                            ;
00006114                            ; Input:
00006114                            ; (Nothing)
00006114                            ; 
00006114                            ; Output:
00006114                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
00006114                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
00006114                            ; 
00006114                            ; Uses:
00006114                            ; a3-a4 | d4-d5
00006114                            ; ************************
00006114                            
00006114                            object_FindPrz_WallSides:
00006114 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0000611A 286D 0018                    		movea.l	lvl_prizes(a5),a4
0000611E 6000                         		bra.s	objSearchCol_WallSides
00006120                              		
00006120                            object_FindCol_WallSides:
00006120 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006126 286D 0014                    		movea.l	lvl_collision(a5),a4
0000612A                              		
0000612A                            objSearchCol_WallSides:
0000612A 7000                        		moveq	#0,d0
0000612C 7200                        		moveq	#0,d1
0000612E 7800                        		moveq	#0,d4
00006130 7A00                        		moveq	#0,d5
00006132                            
00006132                            ; ------------------------
00006132                            ; Left
00006132                            ; ------------------------
00006132                            
00006132 4A2E 0004                  		tst.b	obj_size(a6)
00006136 6700 0000                  		beq	@ignore_l
0000613A                            			
0000613A                            ; --------------
0000613A                            ; LEFT DOWN
0000613A                            ; --------------
0000613A                            
0000613A 3A2E 000C                    		move.w	obj_y(a6),d5
0000613E 4A45                         		tst.w	d5
00006140 6B00 0000                  		bmi	@ignore_l
00006144 382D 0032                  		move.w	lvl_size_y(a5),d4
00006148 E94C                       		lsl.w	#4,d4
0000614A BA44                       		cmp.w	d4,d5
0000614C 6C00 0000                  		bge	@ignore_l
00006150 4845                         		swap	d5
00006152 4245                         		clr.w	d5
00006154 1A2E 0007                    		move.b	obj_size+3(a6),d5	
00006158 4A45                         		tst.w	d5
0000615A 6700 0000                    		beq	@ignore_l
0000615E 0445 0001                    		sub.w	#1,d5
00006162                            @next_passld:
00006162 4845                       		swap	d5
00006164 4A45                       		tst.w	d5
00006166 6B00 0000                  		bmi	@ignore_l
0000616A 3805                       		move.w	d5,d4
0000616C 4844                       		swap	d4
0000616E 382E 0008                  		move.w	obj_x(a6),d4
00006172 0444 0001                  		sub.w	#1,d4
00006176 4245                       		clr.w	d5
00006178 1A2E 0004                  		move.b	obj_size(a6),d5
0000617C E74D                       		lsl.w	#3,d5
0000617E 9845                       		sub.w	d5,d4			; left X size
00006180 4A44                       		tst.w	d4
00006182 6B00 0000                  		bmi	@forceset_l
00006186 E84C                       		lsr.w	#4,d4
00006188 264C                        		movea.l	a4,a3
0000618A D6C4                       		adda	d4,a3
0000618C 4844                       		swap	d4
0000618E 3A04                       		move.w	d4,d5
00006190 E84C                         		lsr.w	#4,d4
00006192 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
00006196 D6C4                         		adda	d4,a3
00006198                              		
00006198 0813 0007                    		btst	#7,(a3)
0000619C 6600                         		bne.s	@next_ld
0000619E 4A13                         		tst.b	(a3)
000061A0 6600 0000                    		bne	@found_l
000061A4                            @next_ld:
000061A4 0645 0008                  		add.w	#8,d5
000061A8 382D 0032                  		move.w	lvl_size_y(a5),d4
000061AC E94C                       		lsl.w	#4,d4
000061AE BA44                       		cmp.w	d4,d5
000061B0 6C00                       		bge.s	@gone_ld
000061B2                            		
000061B2 4845                       		swap	d5
000061B4 51CD FFAC                  		dbf	d5,@next_passld
000061B8                            @gone_ld:
000061B8                            
000061B8                            ; --------------
000061B8                            ; LEFT UP
000061B8                            ; --------------
000061B8                            
000061B8 3A2E 000C                    		move.w	obj_y(a6),d5
000061BC 4A45                         		tst.w	d5
000061BE 6B00 0000                  		bmi	@ignore_l
000061C2 382D 0032                  		move.w	lvl_size_y(a5),d4
000061C6 E94C                       		lsl.w	#4,d4
000061C8 BA44                       		cmp.w	d4,d5
000061CA 6C00 0000                  		bge	@ignore_l
000061CE 4845                         		swap	d5
000061D0 4245                         		clr.w	d5
000061D2 1A2E 0006                    		move.b	obj_size+2(a6),d5	
000061D6 4A45                         		tst.w	d5
000061D8 6700                         		beq.s	@ignore_l
000061DA 0445 0001                    		sub.w	#1,d5
000061DE                            @next_passlu:
000061DE 4845                       		swap	d5
000061E0 4A45                       		tst.w	d5
000061E2 6B00                       		bmi.s	@ignore_l
000061E4 3805                       		move.w	d5,d4
000061E6 4844                       		swap	d4
000061E8 382E 0008                  		move.w	obj_x(a6),d4
000061EC 0444 0001                  		sub.w	#1,d4
000061F0 4245                       		clr.w	d5
000061F2 1A2E 0004                  		move.b	obj_size(a6),d5
000061F6 E74D                       		lsl.w	#3,d5
000061F8 9845                       		sub.w	d5,d4			; left X size
000061FA 4A44                       		tst.w	d4
000061FC 6B00                       		bmi.s	@forceset_l
000061FE E84C                       		lsr.w	#4,d4
00006200 264C                        		movea.l	a4,a3
00006202 D6C4                       		adda	d4,a3
00006204 4844                       		swap	d4
00006206 3A04                       		move.w	d4,d5
00006208 E84C                         		lsr.w	#4,d4
0000620A C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0000620E D6C4                         		adda	d4,a3
00006210                              		
00006210 0813 0007                    		btst	#7,(a3)
00006214 6600                         		bne.s	@next_lu
00006216 4A13                         		tst.b	(a3)
00006218 6600                         		bne.s	@found_l	
0000621A                            @next_lu:
0000621A 0445 0008                  		sub.w	#8,d5
0000621E 4A45                       		tst.w	d5
00006220 6B00                       		bmi.s	@ignore_l
00006222 4845                       		swap	d5
00006224 51CD FFB8                  		dbf	d5,@next_passlu
00006228                            		
00006228 6000                       		bra.s	@ignore_l
0000622A                            		
0000622A                            ; --------------
0000622A                            ; Found left
0000622A                            ; --------------
0000622A                            
0000622A                            @forceset_l:
0000622A 123C 0001                  		move.b	#1,d1
0000622E 6000                       		bra.s	@ignore_l
00006230                            		
00006230                            @found_l:
00006230 0285 0000 FFF0             		and.l	#$FFF0,d5
00006236 E98D                       		lsl.l	#4,d5
00006238 8285                       		or.l	d5,d1
0000623A 7A00                        		moveq	#0,d5
0000623C 382E 0008                  		move.w	obj_x(a6),d4
00006240 0444 0001                  		sub.w	#1,d4
00006244 1A2E 0004                  		move.b	obj_size(a6),d5
00006248 E74D                       		lsl.w	#3,d5
0000624A 9845                       		sub.w	d5,d4
0000624C 0284 0000 FFF0             		and.l	#$FFF0,d4
00006252 4844                       		swap	d4
00006254 8284                       		or.l	d4,d1
00006256 1213                        		move.b	(a3),d1
00006258                            @ignore_l:
00006258                            
00006258                            ; ------------------------
00006258                            ; Right
00006258                            ; ------------------------
00006258                             
00006258 4A2E 0005                  		tst.b	obj_size+1(a6)
0000625C 6700 0000                  		beq	@ignore_r
00006260                            		
00006260                            ; --------------
00006260                            ; RIGHT DOWN
00006260                            ; --------------
00006260                            
00006260 7A00                       		moveq	#0,d5
00006262 3A2E 000C                    		move.w	obj_y(a6),d5
00006266 4A45                         		tst.w	d5
00006268 6B00 0000                  		bmi	@ignore_r
0000626C 382D 0032                  		move.w	lvl_size_y(a5),d4
00006270 E94C                       		lsl.w	#4,d4
00006272 BA44                       		cmp.w	d4,d5
00006274 6C00 0000                  		bge	@ignore_r
00006278 4845                         		swap	d5
0000627A 4245                         		clr.w	d5
0000627C 1A2E 0007                    		move.b	obj_size+3(a6),d5	
00006280 4A45                         		tst.w	d5
00006282 6700 0000                    		beq	@ignore_r
00006286 0445 0001                    		sub.w	#1,d5
0000628A                            @next_passrd:
0000628A 4845                       		swap	d5
0000628C 4A45                       		tst.w	d5
0000628E 6B00 0000                  		bmi	@ignore_r
00006292                            		
00006292 3805                       		move.w	d5,d4
00006294 4844                       		swap	d4
00006296 382E 0008                  		move.w	obj_x(a6),d4
0000629A 4245                       		clr.w	d5
0000629C 1A2E 0005                  		move.b	obj_size+1(a6),d5
000062A0 E74D                       		lsl.w	#3,d5
000062A2 D845                       		add.w	d5,d4			; left X size
000062A4 3A2D 0030                  		move.w	lvl_size_x(a5),d5
000062A8 E94D                       		lsl.w	#4,d5
000062AA B845                       		cmp.w	d5,d4
000062AC 6C00 0000                  		bge	@forceset_r
000062B0                            		
000062B0 E84C                       		lsr.w	#4,d4
000062B2 264C                        		movea.l	a4,a3
000062B4 D6C4                       		adda	d4,a3
000062B6 4844                       		swap	d4
000062B8 3A04                       		move.w	d4,d5
000062BA E84C                         		lsr.w	#4,d4
000062BC C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
000062C0 D6C4                         		adda	d4,a3
000062C2                              		
000062C2 0813 0007                    		btst	#7,(a3)
000062C6 6600                         		bne.s	@next_rd
000062C8 4A13                         		tst.b	(a3)
000062CA 6600 0000                    		bne	@found_r
000062CE                            @next_rd:
000062CE 0645 0008                  		add.w	#8,d5
000062D2 382D 0032                  		move.w	lvl_size_y(a5),d4
000062D6 E94C                       		lsl.w	#4,d4
000062D8 BA44                       		cmp.w	d4,d5
000062DA 6C00                       		bge.s	@gone_rd
000062DC 4845                       		swap	d5
000062DE 51CD FFAA                  		dbf	d5,@next_passrd
000062E2                            @gone_rd:
000062E2                            
000062E2                            ; --------------
000062E2                            ; RIGHT UP
000062E2                            ; --------------
000062E2                            
000062E2 7A00                       		moveq	#0,d5
000062E4 3A2E 000C                    		move.w	obj_y(a6),d5
000062E8 4A45                         		tst.w	d5
000062EA 6B00 0000                  		bmi	@ignore_r
000062EE 382D 0032                  		move.w	lvl_size_y(a5),d4
000062F2 E94C                       		lsl.w	#4,d4
000062F4 BA44                       		cmp.w	d4,d5
000062F6 6C00 0000                  		bge	@ignore_r
000062FA 4845                         		swap	d5
000062FC 4245                         		clr.w	d5
000062FE 1A2E 0006                    		move.b	obj_size+2(a6),d5	
00006302 4A45                         		tst.w	d5
00006304 6700                         		beq.s	@ignore_r
00006306 0445 0001                    		sub.w	#1,d5
0000630A                            @next_passru:
0000630A 4845                       		swap	d5
0000630C 4A45                       		tst.w	d5
0000630E 6B00                       		bmi.s	@ignore_r
00006310                            		
00006310 3805                       		move.w	d5,d4
00006312 4844                       		swap	d4
00006314 382E 0008                  		move.w	obj_x(a6),d4
00006318 4245                       		clr.w	d5
0000631A 1A2E 0005                  		move.b	obj_size+1(a6),d5
0000631E E74D                       		lsl.w	#3,d5
00006320 D845                       		add.w	d5,d4			; left X size
00006322 3A2D 0030                  		move.w	lvl_size_x(a5),d5
00006326 E94D                       		lsl.w	#4,d5
00006328 B845                       		cmp.w	d5,d4
0000632A 6C00                       		bge.s	@forceset_r
0000632C                            		
0000632C E84C                       		lsr.w	#4,d4
0000632E 264C                        		movea.l	a4,a3
00006330 D6C4                       		adda	d4,a3
00006332 4844                       		swap	d4
00006334                            		
00006334 3A04                       		move.w	d4,d5
00006336 E84C                         		lsr.w	#4,d4
00006338 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0000633C D6C4                         		adda	d4,a3
0000633E                              		
0000633E 0813 0007                    		btst	#7,(a3)
00006342 6600                         		bne.s	@next_ru
00006344 4A13                         		tst.b	(a3)
00006346 6600                         		bne.s	@found_r
00006348                            @next_ru:
00006348 0445 0008                  		sub.w	#8,d5
0000634C 4A45                       		tst.w	d5
0000634E 6B00                       		bmi.s	@ignore_r
00006350                            		
00006350 4845                       		swap	d5
00006352 51CD FFB6                  		dbf	d5,@next_passru
00006356                            
00006356 6000                       		bra.s	@ignore_r
00006358                            
00006358                            ; --------------
00006358                            ; Found right
00006358                            ; --------------
00006358                            
00006358                            @forceset_r:
00006358 103C 0001                  		move.b	#1,d0
0000635C 6000                       		bra.s	@ignore_r
0000635E                            		
0000635E                            @found_r:
0000635E 0285 0000 FFF0             		and.l	#$FFF0,d5
00006364 E98D                       		lsl.l	#4,d5
00006366 8085                       		or.l	d5,d0
00006368 7A00                        		moveq	#0,d5
0000636A 382E 0008                  		move.w	obj_x(a6),d4
0000636E 1A2E 0005                  		move.b	obj_size+1(a6),d5
00006372 E74D                       		lsl.w	#3,d5
00006374 D845                       		add.w	d5,d4
00006376 0284 0000 FFF0             		and.l	#$FFF0,d4
0000637C 4844                       		swap	d4
0000637E 8084                       		or.l	d4,d0
00006380 1013                        		move.b	(a3),d0	
00006382                            @ignore_r:
00006382                            		
00006382                            ; ------------------------
00006382                            ; Finish checking
00006382                            ; ------------------------
00006382                            
00006382 4E75                       		rts
00006384                            		
00006384                            ; ************************
00006384                            ; Find ceiling collision
00006384                            ; LEFT/RIGHT
00006384                            ; 
00006384                            ; Input:
00006384                            ; (Nothing)
00006384                            ; 
00006384                            ; Output:
00006384                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
00006384                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
00006384                            ; 
00006384                            ; Uses:
00006384                            ; a3-a4 | d4-d5
00006384                            ; ************************
00006384                            
00006384                            object_FindPrz_CeilingSides:
00006384 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0000638A 286D 0018                    		movea.l	lvl_prizes(a5),a4
0000638E 6000                         		bra.s	objSearchCol_CeilingSides
00006390                              		
00006390                            object_FindCol_CeilingSides:
00006390 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006396 286D 0014                    		movea.l	lvl_collision(a5),a4
0000639A                              		
0000639A                            objSearchCol_CeilingSides:
0000639A 7000                       		moveq	#0,d0
0000639C 7200                       		moveq	#0,d1
0000639E 7800                        		moveq	#0,d4
000063A0 3A2E 000C                    		move.w	obj_y(a6),d5
000063A4                            ;   		add.w	#4,d5
000063A4 182E 0006                     		move.b	obj_size+2(a6),d4
000063A8 E74C                          		lsl.w	#3,d4
000063AA                            ;     		sub.w	#1,d4
000063AA 9A44                          		sub.w	d4,d5			;UP SIZE
000063AC 4A45                         		tst.w	d5
000063AE 6B00 0000                    		bmi	@no_col
000063B2 382D 0032                   		move.w	lvl_size_y(a5),d4
000063B6 E94C                        		lsl.w	#4,d4
000063B8 BA44                        		cmp.w	d4,d5
000063BA 6C00 0000                   		bge	@no_col
000063BE                             		
000063BE E84D                         		lsr.w	#4,d5
000063C0 3005                         		move.w	d5,d0
000063C2 3205                         		move.w	d5,d1
000063C4 E188                         		lsl.l	#8,d0			; LEFT 000YYY00
000063C6 E189                         		lsl.l	#8,d1			;RIGHT 000YYY00
000063C8 CAED 0030                   		mulu.w	lvl_size_x(a5),d5
000063CC D8C5                         		adda	d5,a4
000063CE                            
000063CE                            ; ------------------------
000063CE                            ; X check
000063CE                            ; 
000063CE                            ; LEFT
000063CE                            ; ------------------------
000063CE                            
000063CE 7800                        		moveq	#0,d4
000063D0 7A00                       		moveq	#0,d5
000063D2 3A2E 0008                    		move.w	obj_x(a6),d5
000063D6 382D 0030                   		move.w	lvl_size_x(a5),d4
000063DA E94C                        		lsl.w	#4,d4
000063DC BA44                             		cmp.w	d4,d5
000063DE 6D00                             		blt.s	@dontfix_l
000063E0 0445 0001                        		sub.w	#1,d5
000063E4                            @dontfix_l:
000063E4 4A45                        		tst.w	d5
000063E6 6B00                        		bmi.s	@zero_l
000063E8 3805                        		move.w	d5,d4
000063EA E84C                        		lsr.w	#4,d4
000063EC 264C                        		movea.l	a4,a3
000063EE D6C4                        		adda 	d4,a3
000063F0                             		
000063F0 4845                        		swap	d5		; d5 - XRead | Free
000063F2 1A2E 0004                   		move.b	obj_size(a6),d5
000063F6 0245 00FF                   		and.w	#$FF,d5		; d5 - XRead | Loop
000063FA 4A45                        		tst.w	d5
000063FC 6700                        		beq.s	@zero_l
000063FE                            @Next_col_l:
000063FE 4845                        		swap	d5		; d5 - Loop | Xread
00006400                             		
00006400 4A13                        		tst.b	(a3)
00006402 6700                        		beq.s	@No_col_l
00006404 3805                        		move.w	d5,d4
00006406 0244 FFF0                   		and.w	#$FFF0,d4
0000640A 4844                        		swap	d4
0000640C 8284                        		or.l	d4,d1		; LEFT XXXYYY00
0000640E 1213                       		move.b	(a3),d1
00006410 6000                        		bra.s	@zero_l
00006412                            @No_col_l:
00006412                            
00006412 0445 0008                   		sub.w	#8,d5
00006416 6A00                          		bpl.s	@Fine_l
00006418 4245                          		clr.w	d5
0000641A                            @Fine_l:
0000641A 3805                        		move.w	d5,d4
0000641C E84C                        		lsr.w	#4,d4
0000641E 264C                        		movea.l	a4,a3
00006420 D6C4                        		adda 	d4,a3
00006422 4845                        		swap	d5		; d5 - XRead | Loop
00006424 51CD FFD8                   		dbf	d5,@Next_col_l
00006428                            @zero_l:
00006428                            		
00006428                            ; ------------------------
00006428                            ; X check
00006428                            ; 
00006428                            ; RIGHT
00006428                            ; ------------------------
00006428                            
00006428 7800                        		moveq	#0,d4
0000642A 7A00                        		moveq	#0,d5
0000642C 3A2E 0008                   		move.w	obj_x(a6),d5
00006430 0445 0001                   		sub.w	#1,d5
00006434 4A45                        		tst.w	d5
00006436 6B00                        		bmi.s	@no_col
00006438 382D 0030                   		move.w	lvl_size_x(a5),d4
0000643C E94C                        		lsl.w	#4,d4
0000643E BA44                          		cmp.w	d4,d5
00006440 6C00                           		bge.s	@no_col
00006442                            
00006442 3805                        		move.w	d5,d4
00006444 E84C                        		lsr.w	#4,d4
00006446 264C                        		movea.l	a4,a3
00006448 D6C4                        		adda 	d4,a3
0000644A                             		
0000644A 4845                        		swap	d5		;d5 - XRead | Free
0000644C 1A2E 0005                   		move.b	obj_size+1(a6),d5
00006450 0245 00FF                   		and.w	#$FF,d5		;d5 - XRead | Loop
00006454 4A45                        		tst.w	d5
00006456 6700                        		beq.s	@no_col
00006458                             		
00006458                            @Next_col_r:
00006458 4845                        		swap	d5		;d5 - Loop | Xread
0000645A 4A13                        		tst.b	(a3)
0000645C 6700                        		beq.s	@No_col_r
0000645E 382D 0030                   		move.w	lvl_size_x(a5),d4
00006462 E94C                        		lsl.w	#4,d4
00006464 BA44                          		cmp.w	d4,d5
00006466 6C00                           		bge.s	@no_col
00006468                                		
00006468 3805                        		move.w	d5,d4
0000646A 0244 FFF0                   		and.w	#$FFF0,d4
0000646E 4844                        		swap	d4
00006470 8084                        		or.l	d4,d0		; RIGHT XXXYYY00
00006472 1013                       		move.b	(a3),d0
00006474 4E75                        		rts
00006476                             		
00006476                            @No_col_r:
00006476 0645 0008                   		add.w	#8,d5
0000647A 3805                        		move.w	d5,d4
0000647C E84C                        		lsr.w	#4,d4
0000647E 264C                        		movea.l	a4,a3
00006480 D6C4                        		adda 	d4,a3
00006482 4845                        		swap	d5		;d5 - XRead | Loop
00006484 51CD FFD2                   		dbf	d5,@Next_col_r
00006488                             		
00006488                            ; ------------------------
00006488                            
00006488                            @no_col:
00006488 4E75                       		rts
0000648A                             	
0000648A                            ; ************************
0000648A                            ; Find Center collision
0000648A                            ;
0000648A                            ; Input:
0000648A                            ; a6 - Object
0000648A                            ; a5 - RAM_LvlPlanes
0000648A                            ; a4 - Collision data
0000648A                            ; 
0000648A                            ; Output:
0000648A                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
0000648A                            ; 
0000648A                            ; Uses:
0000648A                            ; a3 | d4-d5
0000648A                            ; ************************
0000648A                            
0000648A                            ; TODO: no agarra los X/Y
0000648A                            
0000648A                            object_FindPrz_Center:
0000648A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006490 286D 0018                    		movea.l	lvl_prizes(a5),a4
00006494 6000                         		bra.s	objSearchCol_Center
00006496                              		
00006496                            object_FindCol_Center:
00006496 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0000649C 286D 0014                    		movea.l	lvl_collision(a5),a4
000064A0                            
000064A0                            objSearchCol_Center:
000064A0 7000                       		moveq	#0,d0
000064A2 7800                       		moveq	#0,d4
000064A4 7A00                       		moveq	#0,d5
000064A6 382E 000C                   		move.w	obj_y(a6),d4
000064AA 4A44                        		tst.w	d4
000064AC 6B00 0000                   		bmi	@no_col
000064B0 3A2D 0032                   		move.w	lvl_size_y(a5),d5
000064B4 E94D                        		lsl.w	#4,d5
000064B6 B845                        		cmp.w	d5,d4
000064B8 6C00 0000                   		bge	@no_col
000064BC E84C                         		lsr.w	#4,d4
000064BE C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
000064C2 D8C4                         		adda	d4,a4
000064C4 0284 0000 0FFF               		and.l	#$FFF,d4
000064CA E18C                         		lsl.l	#8,d4
000064CC 8084                          		or.l	d4,d0
000064CE                            
000064CE                            ; ------------------------
000064CE                            		
000064CE 264C                         		movea.l	a4,a3
000064D0 382E 0008                   		move.w	obj_x(a6),d4
000064D4 4A44                        		tst.w	d4
000064D6 6B00                        		bmi.s	@force_on
000064D8 3A2D 0030                   		move.w	lvl_size_x(a5),d5
000064DC E94D                         		lsl.w	#4,d5
000064DE B845                         		cmp.w	d5,d4
000064E0 6C00                         		bge.s	@force_on
000064E2 3A04                         		move.w	d4,d5
000064E4 4845                        		swap	d5
000064E6 8085                        		or.l	d5,d0			; XXXYYY00
000064E8 E84C                        		lsr.w	#4,d4
000064EA D6C4                        		adda 	d4,a3
000064EC                              		
000064EC 4A13                       		tst.b	(a3)
000064EE 6700                       		beq.s	@no_col		
000064F0 1013                       		move.b	(a3),d0
000064F2 4E75                       		rts
000064F4                            @force_on:
000064F4 7000                       		moveq	#0,d0
000064F6                            @no_col:
000064F6 4E75                       		rts
000064F8                            		
000064F8                            ; ************************
000064F8                            ; Sets a object in the floor
000064F8                            ; DOWN/UP
000064F8                            ; CENTER
000064F8                            ; 
000064F8                            ; Input:
000064F8                            ; d0 - Floor ID
000064F8                            ; (Object's current Ypos)
000064F8                            ; 
000064F8                            ; Output:
000064F8                            ; d7 | LONG - Y speed result
000064F8                            ; 
000064F8                            ; Uses:
000064F8                            ; a3-a4 | d3-d4
000064F8                            ; ************************
000064F8                            
000064F8                            object_SetCol_Floor:
000064F8 0800 0006                  		btst	#6,d0
000064FC 6600 0000                  		bne	@check_special
00006500 0C00 0001                  		cmp.b	#1,d0
00006504 6700 0000                  		beq	@floorsolid
00006508 4A87                          		tst.l	d7
0000650A 6B00                          		bmi.s	@NoCol
0000650C                               		
0000650C 222E 000C                     		move.l	obj_y(a6),d1
00006510 2601                          		move.l	d1,d3
00006512 47F9 0000 57CE               		lea	(col_SlopeData),a3
00006518 0240 003F                    		and.w	#$3F,d0
0000651C 3200                         		move.w	d0,d1
0000651E E949                         		lsl.w	#4,d1
00006520 D6C1                         		adda	d1,a3
00006522 202E 0008                   		move.l	obj_x(a6),d0
00006526 4840                        		swap	d0
00006528 0240 000F                   		and.w	#$F,d0
0000652C 1033 0000                   		move.b	(a3,d0.w),d0
00006530 0280 0000 000F                 		and.l	#$F,d0
00006536 0281 FFF0 0000                 		and.l	#$FFF00000,d1
0000653C 4840                         		swap	d0
0000653E D280                        		add.l	d0,d1
00006540                             		
00006540                            ; 		btst	#bitobj_air,obj_status(a6)
00006540                            ; 		beq.s	@dontchk
00006540 D687                         		add.l	d7,d3
00006542 B681                         		cmp.l	d1,d3
00006544 6D00                         		blt.s	@NoCol
00006546                            @dontchk:
00006546 2D41 000C                    		move.l	d1,obj_y(a6)	; TODO: REPARAME
0000654A                              		
0000654A 08AE 0002 001E                		bclr	#bitobj_air,obj_status(a6)
00006550 4287                        		clr.l	d7
00006552 4A86                            		tst.l	d6
00006554 6700                            		beq.s	@NoCol
00006556 2E3C 0001 0000                 		move.l	#$10000,d7
0000655C                            @NoCol:
0000655C 4E75                       		rts
0000655E                            
0000655E                            @floorsolid:
0000655E 08AE 0002 001E             		bclr	#bitobj_air,obj_status(a6)	
00006564 02AE FFF8 0000 000C        		and.l	#$FFF80000,obj_y(a6)		; TODO: REPARAME
0000656C 4287                       		clr.l	d7
0000656E 4E75                       		rts
00006570                            
00006570                            ; ---------------------
00006570                            ; Check $80+ collision
00006570                            ; Floor
00006570                            ; ---------------------
00006570                            
00006570                            @check_special:
00006570 4E75                       		rts
00006572                            		
00006572                            ; ************************
00006572                            ; Sets collision on the object
00006572                            ; Ceiling
00006572                            ; 
00006572                            ; Input:
00006572                            ; d0 - Floor ID
00006572                            ; 
00006572                            ; Output:
00006572                            ; d7 | LONG - Y speed result
00006572                            ; 
00006572                            ; Uses:
00006572                            ; a3-a4 | d3-d4
00006572                            ; ************************
00006572                            
00006572                            object_SetCol_Ceiling:
00006572 0800 0006                  		btst	#6,d0
00006576 6600 0000                  		bne	@floorsolid
0000657A 0C00 0001                  		cmp.b	#1,d0
0000657E 6700 0000                  		beq	@floorsolid
00006582                            ;    		tst.l	d7
00006582                            ;    		bpl.s	@NoCol
00006582                               		
00006582                            ;    		move.l	obj_y(a6),d1
00006582                            ;    		move.l	d1,d3
00006582                            ;   		lea	(col_SlopeData),a3
00006582                            ;   		and.w	#$3F,d0
00006582                            ;   		move.w	d0,d1
00006582                            ;   		lsl.w	#4,d1
00006582                            ;   		adda	d1,a3
00006582                            ;  		move.l	obj_x(a6),d0
00006582                            ;  		swap	d0
00006582                            ;  		and.w	#$F,d0
00006582                            ;  		move.b	(a3,d0.w),d0
00006582                            ;     		and.l	#$F,d0
00006582                            ;     		and.l	#$FFF00000,d1
00006582                            ;   		swap	d0
00006582                            ;  		add.l	d0,d1
00006582                            ;  		
00006582                            ; ; 		btst	#bitobj_air,obj_status(a6)
00006582                            ; ; 		beq.s	@dontchk
00006582                            ;   		add.l	d7,d3
00006582                            ;   		cmp.l	d1,d3
00006582                            ;   		blt.s	@NoCol
00006582                            ; @dontchk:
00006582                            ;   		move.l	d1,obj_y(a6)	; TODO: REPARAME
00006582                            ;   		
00006582                            ;    		bclr	#bitobj_air,obj_status(a6)
00006582                            ;  		clr.l	d7
00006582                            ;      		tst.l	d6
00006582                            ;      		beq.s	@NoCol
00006582                            ;     		move.l	#$10000,d7
00006582                            ; @NoCol:
00006582                            ; 		rts
00006582                            ; 
00006582                            @floorsolid:
00006582 4287                       		clr.l	d7
00006584 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
0000658A 02AE FFF8 0000 000C        		and.l	#$FFF80000,obj_y(a6)
00006592 7800                       		moveq	#0,d4
00006594 182E 0007                  		move.b	obj_size+3(a6),d4
00006598 E74C                       		lsl.w	#3,d4
0000659A D96E 000C                  		add.w	d4,obj_y(a6)
0000659E                            @NoCol:
0000659E 4E75                       		rts
000065A0                            		
000065A0                            ; ************************
000065A0                            ; Sets a object in the wall
000065A0                            ; LEFT/RIGHT
000065A0                            ; CENTER
000065A0                            ; 
000065A0                            ; Input:
000065A0                            ; d0 - Floor ID
000065A0                            ; (Object's current Ypos)
000065A0                            ; 
000065A0                            ; Output:
000065A0                            ; d7 | LONG - Y speed result
000065A0                            ; 
000065A0                            ; Uses:
000065A0                            ; a3-a4 | d3-d4
000065A0                            ; ************************
000065A0                            
000065A0                            ; TODO: para que mierdas era esto
000065A0                            
000065A0                            object_SetCol_Wall:
000065A0                            ; 		move.w	obj_y(a6),d1		;TODO: REPARAME
000065A0                            ; 		sub.w	#1,d1
000065A0                            ; 		move.w	d1,d3
000065A0                            ; 		and.w	#$FFF0,d1 		
000065A0                            ;      		lea	(col_SlopeData),a3
000065A0                            ;       		and.w	#$FF,d0
000065A0                            ;      		lsl.w	#4,d0
000065A0                            ;       		adda	d0,a3
000065A0                            ;       		move.w	obj_x(a6),d0
000065A0                            ;       		and.w	#$F,d0
000065A0                            ;       		move.b	(a3,d0.w),d2
000065A0                            ;       		and.w	#$F,d2
000065A0                            ;       		add.w	d2,d1
000065A0                            ;       		
000065A0                            ;  		btst	#bitobj_air,obj_status(a6)
000065A0                            ; 		beq.s	@dontchkLR
000065A0                            ;   		cmp.w	d1,d3
000065A0                            ;   		blt.s	@NoCol_LR
000065A0                            ; @dontchkLR:
000065A0                            ;    		move.w	d1,obj_y(a6)		;TODO: REPARAME
000065A0                            
000065A0                            @NoCol_LR:
000065A0 4E75                       		rts
000065A2                            	
000065A2                            ; **********************************************
000065A2                            ; Object interaction
000065A2                            ; **********************************************
000065A2                            
000065A2                            ; ----------------------------------
000065A2                            ; objTouch
000065A2                            ; 
000065A2                            ; touch/hit detection
000065A2                            ; 
000065A2                            ; Uses: d0-d4
000065A2                            ; ----------------------------------
000065A2                            
000065A2                            objTouch:
000065A2 6100 0000                  		bsr	objTouch_Top
000065A6 3600                       		move.w	d0,d3
000065A8 6100 0000                  		bsr	objTouch_Bottom
000065AC 8640                       		or.w	d0,d3
000065AE 6100 0000                  		bsr	objTouch_Sides
000065B2 8640                       		or.w	d0,d3
000065B4 4840                       		swap	d0
000065B6 8640                       		or.w	d0,d3
000065B8 3003                       		move.w	d3,d0
000065BA 4E75                       		rts
000065BC                            		
000065BC                            ; ---------------------------
000065BC                            ; Seperate touches
000065BC                            ; ---------------------------
000065BC                            
000065BC                            objTouch_Top:
000065BC 4200                       		clr.b	d0
000065BE 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
000065C4 780F                       		moveq	#16-1,d4
000065C6                            @check_again:
000065C6 4AAC 0000                  		tst.l	obj_code(a4)
000065CA 6700 0000                  		beq	@notfound
000065CE 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
000065D4 6700                       		beq.s	@notfound
000065D6                            		
000065D6                            ;  		tst.l	obj_y_spd(a4)
000065D6                            ;  		bmi.s	@lowrY
000065D6                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
000065D6                            ;  		bne.s	@lowrY
000065D6 7200                       		moveq	#0,d1
000065D8                            		
000065D8                            		; Check LEFT
000065D8 7400                          		moveq	#0,d2
000065DA 322E 0008                     		move.w	obj_x(a6),d1
000065DE 142E 0004                     		move.b	obj_size(a6),d2
000065E2 E74A                          		lsl.w	#3,d2
000065E4 9242                          		sub.w	d2,d1
000065E6 342C 0008                     		move.w	obj_x(a4),d2
000065EA 4841                           		swap	d1
000065EC 122C 0005                     		move.b	obj_size+1(a4),d1
000065F0 E749                          		lsl.w	#3,d1
000065F2 D441                             		add.w	d1,d2
000065F4 4841                           		swap	d1
000065F6 B242                          		cmp.w	d2,d1
000065F8 6C00                          		bge.s	@lowrY
000065FA                               		; Check RIGHT
000065FA 7400                          		moveq	#0,d2
000065FC 322E 0008                     		move.w	obj_x(a6),d1
00006600 142E 0005                     		move.b	obj_size+1(a6),d2
00006604 E74A                          		lsl.w	#3,d2
00006606 D242                          		add.w	d2,d1
00006608 342C 0008                     		move.w	obj_x(a4),d2
0000660C 4841                           		swap	d1
0000660E 122C 0004                     		move.b	obj_size(a4),d1
00006612 E749                          		lsl.w	#3,d1
00006614 9441                       		sub.w	d1,d2
00006616 4841                           		swap	d1
00006618 B242                           		cmp.w	d2,d1
0000661A 6F00                           		ble.s	@lowrY
0000661C                            
0000661C                                		; Check Top, and $C pixels more
0000661C 322E 000C                     		move.w	obj_y(a6),d1
00006620 7400                          		moveq	#0,d2
00006622 142E 0006                     		move.b	obj_size+2(a6),d2
00006626 E74A                          		lsl.w	#3,d2
00006628 9242                          		sub.w	d2,d1
0000662A 4841                          		swap	d1
0000662C 342C 000C                     		move.w	obj_y(a4),d2
00006630 122C 0007                     		move.b	obj_size+3(a4),d1
00006634 E749                          		lsl.w	#3,d1
00006636 D441                          		add.w	d1,d2
00006638 4841                          		swap	d1
0000663A B242                          		cmp.w	d2,d1
0000663C 6E00                          		bgt.s	@lowrY
0000663E 0641 000C                       		add.w	#$C,d1
00006642 B242                           		cmp.w	d2,d1
00006644 6D00                           		blt.s	@lowrY
00006646                                		
00006646 103C 0001                     		move.b	#1,d0
0000664A                            @lowrY:
0000664A                            
0000664A 4A00                       		tst.b	d0
0000664C 6600 0000                  		bne	@wecanhurt
00006650                            @notfound:
00006650 D8FC 0064                  		adda	#sizeof_obj,a4
00006654 51CC FF70                  		dbf	d4,@check_again
00006658                            @wecanhurt:
00006658 4E75                          		rts
0000665A                               		
0000665A                            ; ----------------------------------
0000665A                            
0000665A                            objTouch_Bottom:
0000665A 4200                       		clr.b	d0
0000665C 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00006662 780F                       		moveq	#16-1,d4
00006664                            @check_again:
00006664 4AAC 0000                  		tst.l	obj_code(a4)
00006668 6700 0000                  		beq	@notfound
0000666C 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
00006672 6700 0000                  		beq	@notfound
00006676                            		
00006676                            ;  		tst.l	obj_y_spd(a4)
00006676                            ;  		bmi.s	@lowrY
00006676                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
00006676                            ;  		bne.s	@lowrY
00006676 7200                       		moveq	#0,d1
00006678                            		
00006678                            		; Check LEFT
00006678 7400                          		moveq	#0,d2
0000667A 322E 0008                     		move.w	obj_x(a6),d1
0000667E 142E 0004                     		move.b	obj_size(a6),d2
00006682 E74A                          		lsl.w	#3,d2
00006684 9242                          		sub.w	d2,d1
00006686 342C 0008                     		move.w	obj_x(a4),d2
0000668A 4841                           		swap	d1
0000668C 122C 0005                     		move.b	obj_size+1(a4),d1
00006690 E749                          		lsl.w	#3,d1
00006692 D441                             		add.w	d1,d2
00006694 4841                           		swap	d1
00006696 B242                          		cmp.w	d2,d1
00006698 6C00                          		bge.s	@lowrY
0000669A                               		; Check RIGHT
0000669A 7400                          		moveq	#0,d2
0000669C 322E 0008                     		move.w	obj_x(a6),d1
000066A0 142E 0005                     		move.b	obj_size+1(a6),d2
000066A4 E74A                          		lsl.w	#3,d2
000066A6 D242                          		add.w	d2,d1
000066A8 342C 0008                     		move.w	obj_x(a4),d2
000066AC 4841                           		swap	d1
000066AE 122C 0004                     		move.b	obj_size(a4),d1
000066B2 E749                          		lsl.w	#3,d1
000066B4 9441                       		sub.w	d1,d2
000066B6 4841                           		swap	d1
000066B8 B242                           		cmp.w	d2,d1
000066BA 6F00                           		ble.s	@lowrY
000066BC                            
000066BC                                		; Check Top, and $C pixels more
000066BC 322E 000C                     		move.w	obj_y(a6),d1
000066C0 7400                          		moveq	#0,d2
000066C2 142E 0007                     		move.b	obj_size+3(a6),d2
000066C6 E74A                          		lsl.w	#3,d2
000066C8 D242                          		add.w	d2,d1
000066CA 4841                          		swap	d1
000066CC 342C 000C                     		move.w	obj_y(a4),d2
000066D0 122C 0006                     		move.b	obj_size+2(a4),d1
000066D4 E749                          		lsl.w	#3,d1
000066D6 9441                          		sub.w	d1,d2
000066D8 4841                          		swap	d1
000066DA B441                          		cmp.w	d1,d2
000066DC 6E00                          		bgt.s	@lowrY
000066DE 0441 000C                       		sub.w	#$C,d1
000066E2 B441                           		cmp.w	d1,d2
000066E4 6D00                           		blt.s	@lowrY
000066E6                                		
000066E6 103C 0001                     		move.b	#1,d0
000066EA                            @lowrY:
000066EA                            
000066EA 4A00                       		tst.b	d0
000066EC 6600 0000                  		bne	@wecanhurt
000066F0                            @notfound:
000066F0 D8FC 0064                  		adda	#sizeof_obj,a4
000066F4 51CC FF6E                  		dbf	d4,@check_again
000066F8                            @wecanhurt:
000066F8 4E75                          		rts
000066FA                            
000066FA                            ; ----------------------------------
000066FA                            
000066FA                            objTouch_Sides:
000066FA 7000                       		moveq	#0,d0
000066FC 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00006702 780F                       		moveq	#16-1,d4
00006704                            @check_again:
00006704 4AAC 0000                  		tst.l	obj_code(a4)
00006708 6700 0000                  		beq	@notfound
0000670C 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
00006712 6700 0000                  		beq	@notfound
00006716                            		
00006716                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
00006716                            ;  		bne	@lowrY
00006716                             		
00006716 7200                            		moveq	#0,d1
00006718 7400                          		moveq	#0,d2
0000671A 322E 000C                      		move.w	obj_y(a6),d1
0000671E 7400                           		moveq	#0,d2
00006720 142E 0006                      		move.b	obj_size+2(a6),d2
00006724 E74A                           		lsl.w	#3,d2
00006726 9242                           		sub.w	d2,d1
00006728 4841                           		swap	d1
0000672A 342C 000C                      		move.w	obj_y(a4),d2
0000672E 122C 0007                      		move.b	obj_size+3(a4),d1
00006732 E749                           		lsl.w	#3,d1
00006734 D441                           		add.w	d1,d2
00006736 4841                           		swap	d1
00006738 B242                           		cmp.w	d2,d1
0000673A 6E00 0000                      		bgt	@lowrY
0000673E                                		
0000673E 322E 000C                      		move.w	obj_y(a6),d1
00006742 7400                           		moveq	#0,d2
00006744 142E 0007                      		move.b	obj_size+3(a6),d2
00006748 E74A                           		lsl.w	#3,d2
0000674A D242                           		add.w	d2,d1
0000674C 4841                           		swap	d1
0000674E 342C 000C                      		move.w	obj_y(a4),d2
00006752 122C 0006                      		move.b	obj_size+2(a4),d1
00006756 E749                           		lsl.w	#3,d1
00006758 9441                           		sub.w	d1,d2
0000675A 4841                           		swap	d1
0000675C B242                           		cmp.w	d2,d1
0000675E 6D00 0000                      		blt	@lowrY
00006762                            
00006762                                 		; X Sides check
00006762 7200                            		moveq	#0,d1
00006764 7400                          		moveq	#0,d2
00006766 322E 0008                     		move.w	obj_x(a6),d1
0000676A 142E 0005                     		move.b	obj_size+1(a6),d2
0000676E E74A                          		lsl.w	#3,d2
00006770 D242                          		add.w	d2,d1
00006772 242C 0008                     		move.l	obj_x(a4),d2
00006776 D4AC 0010                     		add.l	obj_x_spd(a4),d2
0000677A 4842                          		swap	d2
0000677C 4841                           		swap	d1
0000677E 122C 0004                      		move.b	obj_size(a4),d1
00006782 E749                            		lsl.w	#3,d1
00006784 9441                            		sub.w	d1,d2
00006786 4841                            		swap	d1
00006788 B441                           		cmp.w	d1,d2
0000678A 6E00                           		bgt.s	@lowrY_L
0000678C 0441 0008                      		sub.w	#8,d1
00006790 B441                           		cmp.w	d1,d2
00006792 6D00                           		blt.s	@lowrY_L 
00006794 303C 0001                      		move.w	#1,d0
00006798                            
00006798                            @lowrY_L:
00006798 4840                            		swap	d0
0000679A 7200                            		moveq	#0,d1
0000679C 7400                          		moveq	#0,d2
0000679E 322E 0008                     		move.w	obj_x(a6),d1
000067A2 142E 0004                     		move.b	obj_size(a6),d2
000067A6 E74A                          		lsl.w	#3,d2
000067A8 9242                          		sub.w	d2,d1
000067AA 342C 0008                     		move.w	obj_x(a4),d2
000067AE 4841                           		swap	d1
000067B0 122C 0005                      		move.b	obj_size+1(a4),d1
000067B4 E749                           		lsl.w	#3,d1
000067B6 D441                           		add.w	d1,d2
000067B8 4841                           		swap	d1
000067BA B242                          		cmp.w	d2,d1
000067BC 6E00                          		bgt.s	@lowrY
000067BE 0641 0008                     		add.w	#8,d1
000067C2 B242                          		cmp.w	d2,d1
000067C4 6D00                          		blt.s	@lowrY 
000067C6 303C 0001                     		move.w	#1,d0
000067CA                            @lowrY:
000067CA                            		
000067CA 4A80                       		tst.l	d0
000067CC 6600 0000                  		bne	@wecanhurt
000067D0                            @notfound:
000067D0 D8FC 0064                  		adda	#sizeof_obj,a4
000067D4 51CC FF2E                  		dbf	d4,@check_again
000067D8                            @wecanhurt:
000067D8 4E75                          		rts
000067DA                               			
000067DA                            ; ----------------------------------
000067DA                            
000067DA                            objPlyrSetFloor:
000067DA 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
000067E0 4AAC 0014                  		tst.l	obj_y_spd(a4)
000067E4 6B00                       		bmi.s	@return
000067E6 082C 003C 0000             		btst	#bitPlyrClimb,plyr_status(a4)
000067EC 6600                       		bne.s	@return
000067EE                            ; 		lea	(RAM_LvlPlanes),a5
000067EE                            		
000067EE 42AC 0014                     		clr.l	obj_y_spd(a4)
000067F2 302E 000C                   		move.w	obj_y(a6),d0
000067F6 3200                        		move.w	d0,d1
000067F8 7400                          		moveq	#0,d2
000067FA 142E 0006                     		move.b	obj_size+2(a6),d2
000067FE E74A                          		lsl.w	#3,d2
00006800 9042                          		sub.w	d2,d0
00006802 7400                          		moveq	#0,d2
00006804 142C 0007                     		move.b	obj_size+3(a4),d2
00006808 E74A                          		lsl.w	#3,d2
0000680A 9042                          		sub.w	d2,d0
0000680C                            ;    		cmp.w	d0,d1
0000680C                            ;    		blt.s	@lowrY
0000680C 297C 0001 0000 0014           		move.l	#$10000,obj_y_spd(a4)
00006814                            ; @lowrY:
00006814 3940 000C                     		move.w	d0,obj_y(a4)
00006818                               		
00006818                            ; 		bsr	object_PlyrFlgs_floor
00006818 08AC 0002 001E                  		bclr	#bitobj_air,obj_status(a4)
0000681E 08EC 0004 0022                  		bset	#bitcol_obj,obj_col(a4)
00006824 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
0000682C 6600 0000                  		bne	@return
00006830 397C 0000 0000                 		move.w	#varJumpTimer,plyr_jumptmr(a4)
00006836                            @return:
00006836 4E75                          		rts
00006838                              	
00006838                            ; ----------------------------------
00006838                            
00006838                            objPlyrSetCeiling:
00006838 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0000683E 082C 003C 0000             		btst	#bitPlyrClimb,plyr_status(a4)
00006844 6600                       		bne.s	@return
00006846 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0000684C 42AC 0014                  		clr.l	obj_y_spd(a4)
00006850 08EC 0002 001E                  		bset	#bitobj_air,obj_status(a4)
00006856                            ;      		bset	#bitcol_obju,obj_col(a4)
00006856                                 		
00006856                            ;      		bset	#bitcol_floor,obj_col(a4)
00006856                            ;  		move.w	obj_y(a6),d0
00006856                            ;    		moveq	#0,d2
00006856                            ;    		move.b	obj_size+2(a6),d2
00006856                            ;    		lsl.w	#3,d2
00006856                            ;    		sub.w	d2,d0
00006856                            ;    		move.w	d0,obj_y(a4)
00006856                            @return:
00006856 4E75                          		rts
00006858                               		
00006858                            ; ----------------------------------
00006858                            
00006858                            objPlyrSetWall_R:
00006858 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0000685E 082C 003C 0000             		btst	#bitPlyrClimb,plyr_status(a4)
00006864 6600                       		bne.s	objPlyrColReturn
00006866 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0000686C 42AC 0010                  		clr.l	obj_x_spd(a4)
00006870 08EC 0002 0022                  		bset	#bitcol_wall_r,obj_col(a4)
00006876 302E 0008                   		move.w	obj_x(a6),d0
0000687A 7400                          		moveq	#0,d2
0000687C 142E 0004                     		move.b	obj_size(a6),d2
00006880 E74A                          		lsl.w	#3,d2
00006882 9042                          		sub.w	d2,d0
00006884 7400                          		moveq	#0,d2
00006886 142C 0005                     		move.b	obj_size+1(a4),d2
0000688A E74A                          		lsl.w	#3,d2
0000688C 9042                          		sub.w	d2,d0
0000688E 6000                          		bra.s	objPlyrSetWLX
00006890                            		
00006890                            ; ----------------------------------
00006890                            
00006890                            objPlyrSetWall_L:
00006890 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00006896 082C 003C 0000             		btst	#bitPlyrClimb,plyr_status(a4)
0000689C 6600                       		bne.s	objPlyrColReturn
0000689E 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
000068A4 42AC 0010                  		clr.l	obj_x_spd(a4)
000068A8 08EC 0003 0022                  		bset	#bitcol_wall_l,obj_col(a4)
000068AE 302E 0008                   		move.w	obj_x(a6),d0
000068B2                            ;  		add.w	#1,d0
000068B2 7400                          		moveq	#0,d2
000068B4 142E 0005                     		move.b	obj_size+1(a6),d2
000068B8 E74A                          		lsl.w	#3,d2
000068BA D042                          		add.w	d2,d0
000068BC                               		
000068BC 7400                          		moveq	#0,d2
000068BE 142C 0004                     		move.b	obj_size(a4),d2
000068C2 E74A                          		lsl.w	#3,d2
000068C4 D042                          		add.w	d2,d0
000068C6                            objPlyrSetWLX:
000068C6 4A40                          		tst.w	d0
000068C8 6A00                          		bpl.s	@plus_x
000068CA 4240                          		clr.w	d0
000068CC                            @plus_x:
000068CC 342D 0030                  		move.w	lvl_size_x(a5),d2
000068D0 E94A                       		lsl.w	#4,d2
000068D2 B042                       		cmp.w	d2,d0
000068D4 6D00                       		blt.s	@plusr_x
000068D6 3002                       		move.w	d2,d0
000068D8                            @plusr_x:
000068D8 3940 0008                     		move.w	d0,obj_x(a4)
000068DC                            objPlyrColReturn:
000068DC 4E75                          		rts
000068DE                               		
000068DE                            ; ----------------------------------
000068DE                            ; What to do if object touched the
000068DE                            ; player
000068DE                            ; 
000068DE                            ; Input:
000068DE                            ; a4 - Player object
000068DE                            ; 
000068DE                            ; Uses:
000068DE                            ; d4
000068DE                            ; 
000068DE                            ; Returns:
000068DE                            ; beq.s Nothing
000068DE                            ; bne.s Touched
000068DE                            ; ----------------------------------
000068DE                            
000068DE                            objPlyrHurtKill:
000068DE 7800                       		moveq	#0,d4
000068E0 200C                       		move.l	a4,d0
000068E2 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0	; Player?
000068E8 6600                       		bne.s	@settrue
000068EA 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
000068F0 0C2C 0000 001D             		cmp.b	#varPlyrMdDead,obj_index(a4)
000068F6 6700                       		beq.s	@return
000068F8 08EC 0003 001E             		bset	#bitobj_hurt,obj_status(a4)
000068FE 0C2C 0000 001A             		cmp.b	#varPlyAniJump,obj_anim_id(a4)
00006904 6700                       		beq.s	@stomppikudo
00006906 082C 0002 001E              		btst	#bitobj_air,obj_status(a4)
0000690C 6600                        		bne.s	@stomppikudo
0000690E 6000                       		bra.s	@return
00006910                            		
00006910                            @stomppikudo:
00006910 082C 0004 0022             		btst	#bitcol_obj,obj_col(a4)
00006916 66FE                       		bne.s	*;@return
00006918 4AAC 0014                   		tst.l	obj_y_spd(a4)
0000691C 6B00                       		bmi.s	@return
0000691E 6700                       		beq.s	@return	
00006920                            @hurtanywy:
00006920 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
00006926                            @settrue:
00006926 7801                       		moveq	#1,d4
00006928                            @return:
00006928 4A44                       		tst.w	d4
0000692A 4E75                       		rts
0000692C                            		
0000692C                            ; Object_ChkPlyrHit:
0000692C                            ; 		lea	(RAM_ObjBuffer),a4
0000692C                            ; 		moveq	#0,d5
0000692C                            ; 		cmp.b	#varPlyAniJump,obj_anim_id(a4)
0000692C                            ; 		bne.s	@objhit
0000692C                            ; 		moveq	#-1,d5
0000692C                            ; @objhit:
0000692C                            ; 		tst.w	d5
0000692C                            ; 		rts
0000692C                            
0000692C                            ; ----------------------------------
0000692C                            ; Prize ceiling action
0000692C                            ; 
0000692C                            ; Output:
0000692C                            ; d4 - Collision out
0000692C                            ; ----------------------------------
0000692C                            
0000692C                            Object_PrzActionCeil:
0000692C 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006932 7A00                       		moveq	#0,d5
00006934 1A00                       		move.b	d0,d5
00006936 0805 0007                  		btst	#7,d5
0000693A 6600                       		bne.s	@its_hidden
0000693C DA45                       		add.w	d5,d5
0000693E 3C3B 5000                  		move.w	@block_list(pc,d5.w),d6
00006942 4EFB 6000                  		jmp	@block_list(pc,d6.w)
00006946                            		
00006946                            ; --------------------------
00006946                            ; Reveral hidden block
00006946                            ; --------------------------
00006946                            
00006946                            @its_hidden:
00006946 6100 0000                   		bsr	Prize_Locate
0000694A 0200 007F                   		and.b	#$7F,d0
0000694E 1680                        		move.b	d0,(a3)
00006950                             		
00006950                            ;  		bsr	Level_HidePrize
00006950 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00006956 264C                       		movea.l	a4,a3
00006958 323C 0007                  		move 	#8-1,d1
0000695C                            @chksame2:
0000695C B0AB 0024                  		cmp.l	obj_ram(a3),d0
00006960 6700 0000                  		beq	@solidblock
00006964 D6FC 0064                  		adda 	#sizeof_obj,a3
00006968 51C9 FFF2                  		dbf	d1,@chksame2	
0000696C                            
0000696C 323C 0003                  		move 	#4-1,d1
00006970                            @next_obj2:
00006970 4AAC 0000                  		tst.l	obj_code(a4)
00006974 6700                       		beq.s	@free2
00006976 D8FC 0064                  		adda	#sizeof_obj,a4
0000697A 51C9 FFF4                  		dbf	d1,@next_obj2
0000697E 6000                       		bra.s	@ranout2
00006980                            @free2:
00006980 6100 0000                   		bsr	blkobj_setcoords
00006984 197C 0001 001F             		move.b	#1,obj_subid(a4)
0000698A 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00006992 2940 0024                  		move.l	d0,obj_ram(a4)
00006996                            		
00006996 203C 0000 0000               		move.l	#SndSfx_BONK,d0
0000699C 323C 0003                    		move.w 	#3,d1
000069A0 7401                         		moveq	#1,d2
000069A2 6100 AA98                    		bsr	Audio_Track_play
000069A6                            @ranout2:
000069A6                            ; 		moveq	#0,d4
000069A6 4E75                        		rts
000069A8                             		
000069A8                            ; ----------------------------------
000069A8                            
000069A8                            @block_list:
000069A8 0000                       		dc.w 0
000069AA 0000                       		dc.w @break_block-@block_list
000069AC 0000                       		dc.w @bump_1coin-@block_list
000069AE 0000                       		dc.w @bump_10coin-@block_list
000069B0 0000                       		dc.w @break_block-@block_list
000069B2 0000                       		dc.w @break_block-@block_list
000069B4 0000                       		dc.w @break_block-@block_list
000069B6 0000                       		dc.w @bump_1up-@block_list
000069B8 0000                       		dc.w @bump_1coin-@block_list
000069BA 0000                       		dc.w @bump_10coin-@block_list
000069BC 0000                       		dc.w @bump_1up-@block_list
000069BE 0000                       		dc.w @bump_block-@block_list
000069C0 0000                       		dc.w @bump_block-@block_list
000069C2 0000                       		dc.w @bump_block-@block_list
000069C4 0000                       		dc.w @bump_block-@block_list
000069C6 0000                       		dc.w @bump_block-@block_list
000069C8                            		
000069C8 0000                       		dc.w @break_block-@block_list	
000069CA 0000                       		dc.w @break_block-@block_list
000069CC 0000                       		dc.w @break_block-@block_list
000069CE 0000                       		dc.w @break_block-@block_list
000069D0 0000                       		dc.w @break_block-@block_list
000069D2 0000                       		dc.w @break_block-@block_list
000069D4 0000                       		dc.w @break_block-@block_list
000069D6 0000                       		dc.w @break_block-@block_list
000069D8 0000                       		dc.w @break_block-@block_list
000069DA 0000                       		dc.w @break_block-@block_list
000069DC 0000                       		dc.w @break_block-@block_list
000069DE 0000                       		dc.w @break_block-@block_list
000069E0 0000                       		dc.w @break_block-@block_list
000069E2 0000                       		dc.w @break_block-@block_list
000069E4 0000                       		dc.w @break_block-@block_list	
000069E6 0000                       		dc.w @break_block-@block_list
000069E8                            		
000069E8 0000                       		dc.w @trampoline-@block_list	
000069EA 0000                       		dc.w @break_block-@block_list
000069EC 0000                       		dc.w @break_block-@block_list
000069EE 0000                       		dc.w @break_block-@block_list
000069F0 0000                       		dc.w @break_block-@block_list
000069F2 0000                       		dc.w @break_block-@block_list
000069F4 0000                       		dc.w @break_block-@block_list
000069F6 0000                       		dc.w @break_block-@block_list
000069F8 0000                       		dc.w @break_block-@block_list
000069FA 0000                       		dc.w @break_block-@block_list
000069FC 0000                       		dc.w @break_block-@block_list
000069FE 0000                       		dc.w @break_block-@block_list
00006A00 0000                       		dc.w @break_block-@block_list
00006A02 0000                       		dc.w @break_block-@block_list
00006A04 0000                       		dc.w @break_block-@block_list	
00006A06 0000                       		dc.w @break_block-@block_list
00006A08                            		
00006A08 0000                       		dc.w @break_block-@block_list	
00006A0A 0000                       		dc.w @break_block-@block_list
00006A0C 0000                       		dc.w @break_block-@block_list
00006A0E 0000                       		dc.w @break_block-@block_list
00006A10 0000                       		dc.w @break_block-@block_list
00006A12 0000                       		dc.w @break_block-@block_list
00006A14 0000                       		dc.w @break_block-@block_list
00006A16 0000                       		dc.w @break_block-@block_list
00006A18 0000                       		dc.w @break_block-@block_list
00006A1A 0000                       		dc.w @break_block-@block_list
00006A1C 0000                       		dc.w @break_block-@block_list
00006A1E 0000                       		dc.w @break_block-@block_list
00006A20 0000                       		dc.w @break_block-@block_list
00006A22 0000                       		dc.w @break_block-@block_list
00006A24 0000                       		dc.w @break_block-@block_list	
00006A26 0000                       		dc.w @break_block-@block_list
00006A28                            		
00006A28 0000                       		dc.w @coin_red-@block_list
00006A2A 0000                       		dc.w @coin_blue-@block_list
00006A2C                            		
00006A2C                            ; ----------------------------------
00006A2C                            ; Normal breakable block
00006A2C                            ; ----------------------------------
00006A2C                            
00006A2C                            @break_block:
00006A2C 6100 0000                  		bsr	@chk_breakblk
00006A30 6600                       		bne.s	@oops
00006A32 6100 0000                   		bsr	Prize_Delete
00006A36 6100 0000                   		bsr	blkobj_overwrite
00006A3A                            		
00006A3A 6100 0000                  		bsr	blkobj_setcoords
00006A3E 2940 0024                  		move.l	d0,obj_ram(a4)
00006A42 422C 001F                  		clr.b	obj_subid(a4)
00006A46 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00006A4E                            		
00006A4E 203C 0000 0000               		move.l	#SndSfx_PUM,d0
00006A54 323C 0004                    		move.w 	#4,d1
00006A58 7401                         		moveq	#1,d2
00006A5A 6100 A9E0                    		bsr	Audio_Track_play
00006A5E                            @oops:
00006A5E 7801                         		moveq	#1,d4
00006A60 2E3C 0001 0000               		move.l	#$10000,d7
00006A66 4E75                         		rts
00006A68                            		
00006A68                            ; ----------------------------------
00006A68                            ; BUMP block
00006A68                            ; ----------------------------------
00006A68                            
00006A68                            @bump_1coin:
00006A68 7601                       		moveq	#1,d3
00006A6A 6000                       		bra.s	@bump_coinarg
00006A6C                            @bump_10coin:
00006A6C 760A                       		moveq	#10,d3
00006A6E 6000                       		bra.s	@bump_coinarg
00006A70                            
00006A70                            ; ----------------------------------
00006A70                            
00006A70                            @bump_block:
00006A70 7600                       		moveq	#0,d3
00006A72                            @bump_coinarg:
00006A72 6100 0000                  		bsr	blkobj_chkdupl
00006A76 66E6                       		bne.s	@oops
00006A78                            
00006A78 6100 0000                  		bsr	blkobj_overwrite
00006A7C 6100 0000                   		bsr	blkobj_setcoords
00006A80 2400                       		move.l	d0,d2
00006A82 2940 0024                  		move.l	d0,obj_ram(a4)
00006A86 197C 0001 001F             		move.b	#1,obj_subid(a4)
00006A8C 4A03                       		tst.b	d3
00006A8E 6700                       		beq.s	@noexsubid
00006A90 197C 0002 001F             		move.b	#2,obj_subid(a4)
00006A96 0C03 000A                  		cmp.b	#10,d3
00006A9A 6600                       		bne.s	@noexsubid
00006A9C 197C 0003 001F             		move.b	#3,obj_subid(a4)
00006AA2                            @noexsubid:
00006AA2                            
00006AA2 0C02 000F                  		cmp.b	#$F,d2
00006AA6 6700                       		beq.s	@SolidOnly
00006AA8 D779 FFFF DC02             		add.w	d3,(RAM_P1_Coins)
00006AAE 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
00006AB6 6D00                         		blt.s	@dontadd1up2
00006AB8 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
00006ABE 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
00006AC6                            @dontadd1up2:
00006AC6                            
00006AC6                            ; 		add.b	#1,obj_subid(a4)
00006AC6                            @SolidOnly:
00006AC6 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00006ACE                            
00006ACE 203C 0000 0000               		move.l	#SndSfx_BonkCoin,d0
00006AD4 7202                         		moveq 	#2,d1
00006AD6                              		
00006AD6 0C02 000F                  		cmp.b	#$F,d2
00006ADA 6600                       		bne.s	@Alt_Sfx
00006ADC 203C 0000 0000               		move.l	#SndSfx_BONK,d0
00006AE2 323C 0003                    		move.w 	#3,d1
00006AE6 0C43 000A                    		cmp.w	#10,d3
00006AEA 6600                         		bne.s	@Alt_Sfx
00006AEC 7201                         		moveq	#1,d1
00006AEE                            @Alt_Sfx:
00006AEE 7401                       		moveq	#1,d2
00006AF0 6100 A94A                    		bsr	Audio_Track_play
00006AF4                              		
00006AF4 6000                       		bra.s	@solidblock
00006AF6                            		
00006AF6                            ; ----------------------------------
00006AF6                            
00006AF6                            @bump_1up:
00006AF6 6100 0000                  		bsr	blkobj_chkdupl
00006AFA 6600 FF62                  		bne	@oops
00006AFE                            
00006AFE 6100 0000                  		bsr	blkobj_overwrite
00006B02 6100 0000                   		bsr	blkobj_setcoords
00006B06 2400                       		move.l	d0,d2
00006B08 2940 0024                  		move.l	d0,obj_ram(a4)
00006B0C 197C 0004 001F             		move.b	#4,obj_subid(a4)
00006B12 0679 0001 FFFF DC00        		add.w	#1,(RAM_P1_Lives)
00006B1A 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00006B22                            		
00006B22                            		;TODO: 1up sound
00006B22                            		
00006B22                            @solidblock:
00006B22 7801                         		moveq	#1,d4
00006B24 2E3C 0001 0000               		move.l	#$10000,d7
00006B2A 4E75                         		rts
00006B2C                              		
00006B2C                            ; ----------------------------------
00006B2C                            ; A Coin, from top
00006B2C                            ; ----------------------------------
00006B2C                            
00006B2C                            @coin_red:
00006B2C 7801                       		moveq	#1,d4
00006B2E 6000                       		bra.s	@setcoin
00006B30                            @coin_blue:
00006B30 7805                       		moveq	#5,d4
00006B32                            @setcoin:
00006B32 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
00006B38 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
00006B40 6D00                         		blt.s	@dontadd1up
00006B42 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
00006B48 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
00006B50                            @dontadd1up:
00006B50                              		
00006B50 6100 0000                   		bsr	Prize_Delete
00006B54 6100 E7CE                  		bsr	Level_HidePrize
00006B58                              		
00006B58 203C 0000 0000               		move.l	#SndSfx_COIN,d0
00006B5E 7202                         		moveq 	#2,d1
00006B60 7401                         		moveq	#1,d2
00006B62 6100 A8D8                    		bsr	Audio_Track_play
00006B66 7800                       		moveq	#0,d4		
00006B68 4E75                       		rts
00006B6A                            		
00006B6A                            ; ----------------------------------
00006B6A                            ; Normal breakable block
00006B6A                            ; ----------------------------------
00006B6A                            
00006B6A                            @trampoline:
00006B6A 6100 0000                  		bsr	goToTrampolineWhy
00006B6E                            		
00006B6E 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00006B74 2E3C 0008 0000             		move.l	#$80000,d7
00006B7A 4E75                       		rts
00006B7C                            		
00006B7C                            ; -------------------------------
00006B7C                            ; check for active object
00006B7C                            ; d2 - sub-id
00006B7C                            ; -------------------------------
00006B7C                            
00006B7C                            @chk_breakblk:
00006B7C 7401                       		moveq	#1,d2
00006B7E 7800                       		moveq	#0,d4
00006B80 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00006B86 264C                       		movea.l	a4,a3
00006B88 7207                       		moveq 	#8-1,d1
00006B8A                            @checkhdnbmp:
00006B8A 0CAB 0000 0000 0000        		cmp.l	#obj_prize,obj_code(a3)
00006B92 6600                       		bne.s	@notprz
00006B94 B42B 001F                  		cmp.b	obj_subid(a3),d2
00006B98 6600                       		bne.s	@notprz
00006B9A 7801                       		moveq	#1,d4
00006B9C 7200                       		moveq	#0,d1
00006B9E                            @notprz:
00006B9E D6FC 0064                  		adda 	#sizeof_obj,a3
00006BA2 51C9 FFE6                  		dbf	d1,@checkhdnbmp
00006BA6 4A44                       		tst.w	d4
00006BA8 4E75                       		rts
00006BAA                            
00006BAA                            ; -------------------------------
00006BAA                            ; check for duplicate object
00006BAA                            ; using obj_ram
00006BAA                            ; -------------------------------
00006BAA                            
00006BAA                            blkobj_chkdupl:
00006BAA 7800                       		moveq	#0,d4
00006BAC 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00006BB2 7207                       		moveq 	#8-1,d1
00006BB4                            @chksame234:
00006BB4 B0AC 0024                   		cmp.l	obj_ram(a4),d0
00006BB8 6600                        		bne.s	@notequl
00006BBA 0644 0001                   		add.w	#1,d4
00006BBE                            @notequl:
00006BBE D8FC 0064                   		adda 	#sizeof_obj,a4
00006BC2 51C9 FFF0                   		dbf	d1,@chksame234
00006BC6 4A44                        		tst.w	d4
00006BC8 4E75                        		rts
00006BCA                             		
00006BCA                            ; -------------------------------
00006BCA                            ; Overwrite prize object if its
00006BCA                            ; the same
00006BCA                            ; -------------------------------
00006BCA                            
00006BCA                            blkobj_overwrite:
00006BCA 7800                       		moveq	#0,d4
00006BCC 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00006BD2 7207                       		moveq 	#8-1,d1
00006BD4                            @chksame23:
00006BD4 B0AC 0024                   		cmp.l	obj_ram(a4),d0
00006BD8 6600 0000                   		bne	@notsame
00006BDC                             		
00006BDC 264C                        		movea.l	a4,a3
00006BDE 343C 0063                   		move.w	#sizeof_obj-1,d2
00006BE2                            @delete:
00006BE2 421B                        		clr.b	(a3)+
00006BE4 51CA FFFC                   		dbf	d2,@delete
00006BE8                            @notsame:
00006BE8 0CAC 0000 0000 0000        		cmp.l	#obj_prize,obj_code(a4)
00006BF0 6600                       		bne.s	@found
00006BF2 D8FC 0064                   		adda 	#sizeof_obj,a4
00006BF6 51C9 FFDC                   		dbf	d1,@chksame23
00006BFA                            @found:
00006BFA 4E75                       		rts
00006BFC                            		
00006BFC                            ; ----------------------------------
00006BFC                            ; obj_coords
00006BFC                            ; ----------------------------------
00006BFC                            
00006BFC                            blkobj_setcoords:
00006BFC 2800                       		move.l	d0,d4
00006BFE E88C                       		lsr.l	#4,d4
00006C00 0244 FFF0                  		and.w	#$FFF0,d4
00006C04 0644 0008                   		add.w	#8,d4
00006C08 3944 000C                   		move.w	d4,obj_y(a4)
00006C0C E08C                       		lsr.l	#8,d4
00006C0E E88C                       		lsr.l	#4,d4
00006C10 0244 FFF0                  		and.w	#$FFF0,d4
00006C14 0644 0008                   		add.w	#8,d4
00006C18 3944 0008                   		move.w	d4,obj_x(a4)
00006C1C                             		
00006C1C 206D 0008                  		movea.l	lvl_przblocks(a5),a0
00006C20 3800                       		move.w	d0,d4
00006C22 0244 00FF                  		and.w	#$FF,d4
00006C26 E74C                       		lsl.w	#3,d4
00006C28 3830 4000                  		move.w	(a0,d4.w),d4
00006C2C 3944 0028                  		move.w	d4,obj_ram+4(a4)
00006C30 4E75                        		rts
00006C32                             	
00006C32                            goToTrampolineWhy:
00006C32 6100 FF76                  		bsr	blkobj_chkdupl
00006C36 6600 0000                  		bne	@oopstr
00006C3A                            
00006C3A 6100 FF8E                  		bsr	blkobj_overwrite
00006C3E 6100 FFBC                   		bsr	blkobj_setcoords
00006C42 2940 0024                  		move.l	d0,obj_ram(a4)
00006C46 197C 0005 001F             		move.b	#5,obj_subid(a4)
00006C4C 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00006C54 6100 E6CE                  		bsr	Level_HidePrize
00006C58                            @oopstr:
00006C58 7801                       		moveq	#1,d4
00006C5A 4E75                       		rts
00006C5C                            		
00006C5C                            ; ----------------------------------
00006C5C                            ; block subs
00006C5C                            ; 
00006C5C                            ; d0 - XXXYYYID
00006C5C                            ; a5 - RAM_LvlPlanes
00006C5C                            ; ----------------------------------
00006C5C                            
00006C5C                            Prize_Locate:
00006C5C 266D 0018                  		movea.l	lvl_prizes(a5),a3
00006C60 2800                       		move.l	d0,d4
00006C62 E08C                       		lsr.l	#8,d4
00006C64 0284 0000 0FFF             		and.l	#$FFF,d4
00006C6A C8ED 0030                  		mulu.w	lvl_size_x(a5),d4
00006C6E D6C4                       		adda	d4,a3
00006C70 2800                       		move.l	d0,d4
00006C72 4844                       		swap	d4
00006C74 E84C                       		lsr.w	#4,d4
00006C76 0284 0000 0FFF             		and.l	#$FFF,d4
00006C7C D6C4                       		adda	d4,a3
00006C7E 4E75                       		rts
00006C80                            		
00006C80                            Prize_Delete:
00006C80 61DA                       		bsr.s	Prize_Locate
00006C82 4213                       		clr.b	(a3)
00006C84 4E75                       		rts
00006C86                            		
00006C86                            ; **********************************************
00006C86                            ; Object action
00006C86                            ; **********************************************
00006C86                            
00006C86                            ; ---------------------------
00006C86                            ; Object action: mark 
00006C86                            ; stomped by player
00006C86                            ; 
00006C86                            ; Input:
00006C86                            ; d0 | LONG - Mappings
00006C86                            ; d1 | WORD - VRAM
00006C86                            ; d2 | BYTE - Frame
00006C86                            ; a4 | Object who touched it
00006C86                            ; ---------------------------
00006C86                            
00006C86                            objAction_SetStomp:
00006C86 422E 001D                  		clr.b	obj_index(a6)		; Clear index
00006C8A 422E 001F                  		clr.b	obj_subid(a6)		; Subaction: Stomp
00006C8E 2D40 0024                  		move.l	d0,obj_ram(a6)		; Last frame
00006C92 3D41 0028                  		move.w	d1,obj_ram+4(a6)
00006C96 1D42 002A                  		move.b	d2,obj_ram+6(a6)
00006C9A 2D43 002C                  		move.l	d3,obj_ram+8(a6)
00006C9E 2D7C 0000 0000 0000        		move.l	#obj_actionscript,obj_code(a6)
00006CA6 4E75                       		rts
00006CA8                            		
00006CA8                            ; =================================================================
00006CA8                            ; --------------------------------------------
00006CA8                            ; Includes
00006CA8                            ; --------------------------------------------
00006CA8                            
00006CA8                              		include	"engine/modes/level/data/objects/player/code.asm"
00006CA8                            ; =================================================================
00006CA8                            ; Object
00006CA8                            ; 
00006CA8                            ; Player
00006CA8                            ; =================================================================
00006CA8                            
00006CA8                            ; =================================================================
00006CA8                            ; ------------------------------------------------
00006CA8                            ; Variables
00006CA8                            ; ------------------------------------------------
00006CA8                            
00006CA8 =00006780                  varPlyrVRAM	equ	$6000|$780
00006CA8 =00000140                  varScrlHor	equ	320
00006CA8 =0000000B                  varJumpTimer	equ	11
00006CA8 =00000060                  varHurtTimer	equ	96
00006CA8                            
00006CA8 =00000002                  varPlyAniJump	equ	2
00006CA8 =00000002                  varPlyrMdDead	equ	2
00006CA8                            
00006CA8 =00000005                  bitPlyrClimb	equ	5
00006CA8 =00000006                  bitPlyrCancelY	equ	6
00006CA8 =00000007                  bitPlyrBusy	equ	7
00006CA8                            
00006CA8                            ; =================================================================
00006CA8                            ; ------------------------------------------------
00006CA8                            ; RAM
00006CA8                            ; ------------------------------------------------
00006CA8                            
00006CA8                            		rsset obj_ram
00006CA8 =00000024                  plyr_lvltrgt	rs.w	1
00006CA8 =00000026                  plyr_jumptmr	rs.w	1
00006CA8 =00000028                  plyr_hits	rs.w	1
00006CA8 =0000002A                  plyr_hittime	rs.w	1
00006CA8 =0000002C                  plyr_spccol	rs.b	1		; %00000LCR
00006CA8 =0000002D                  plyr_status	rs.b	1		; %000000FB
00006CA8                            
00006CA8                            ; =================================================================
00006CA8                            ; ------------------------------------------------
00006CA8                            ; Code start
00006CA8                            ; ------------------------------------------------
00006CA8                            
00006CA8                            Obj_Player:
00006CA8 7000                        		moveq	#0,d0
00006CAA 102E 001D                   		move.b	obj_index(a6),d0
00006CAE D040                        		add.w	d0,d0
00006CB0 323B 0000                   		move.w	@Index(pc,d0.w),d1
00006CB4 4EBB 1000                   		jsr	@Index(pc,d1.w)
00006CB8                             		
00006CB8                             		;Render
00006CB8 7000                        		moveq	#0,d0
00006CBA 303C 6780                      		move.w	#varPlyrVRAM,d0
00006CBE 0C2E 0002 001D             		cmp.b	#varPlyrMdDead,obj_index(a6)
00006CC4 6600                       		bne.s	@dontforce
00006CC6 0040 8000                  		or.w	#$8000,d0
00006CCA                            @dontforce:
00006CCA 4840                           		swap	d0
00006CCC 102E 0020                     		move.b	obj_frame(a6),d0
00006CD0 223C 0000 0000              		move.l	#ani_player,d1
00006CD6 6100 F06C                  		bsr	Object_Animate
00006CDA                            		
00006CDA 082E 0000 002B             		btst	#0,plyr_hittime+1(a6)
00006CE0 6600                       		bne.s	@return
00006CE2                            		
00006CE2 102E 0020                     		move.b	obj_frame(a6),d0	
00006CE6 223C 0000 0000              		move.l	#map_player,d1
00006CEC 6100 ECAC                    		bsr	Object_Show
00006CF0                             		
00006CF0 203C 6780 0000                		move.l	#(varPlyrVRAM<<16),d0
00006CF6 102E 0020                     		move.b	obj_frame(a6),d0
00006CFA 223C 0000 0000             		move.l	#dplc_player,d1
00006D00 243C 0000 0000             		move.l	#art_player,d2
00006D06 6000 EC38                  		bra	Object_DPLC
00006D0A                            
00006D0A                            @return:
00006D0A 4E75                       		rts
00006D0C                            		
00006D0C                            ; ------------------------------------------------
00006D0C                            
00006D0C                            @Index:
00006D0C 0000                       		dc.w ObjPlyr_Init-@Index
00006D0E 0000                       		dc.w ObjPlyr_Main-@Index
00006D10 0000                       		dc.w ObjPlyr_Die-@Index
00006D12                            		even
00006D12                            
00006D12                            ; =================================================================
00006D12                            ; ------------------------------------------------
00006D12                            ; Index $00: Init
00006D12                            ; ------------------------------------------------
00006D12                            
00006D12                            ObjPlyr_Init:
00006D12 062E 0001 001D             		add.b	#1,obj_index(a6)
00006D18 2D7C 0101 0202 0004        		move.l	#$01010202,obj_size(a6)
00006D20                            ; 		bset	#bitobj_flipV,obj_status(a6)
00006D20                            		
00006D20                            ; 		tst.w	(RAM_P1_Hits)
00006D20                            ; 		beq.s	@iszerohits
00006D20                            ; 		bpl.s	@dontresthit
00006D20                            ; @iszerohits:
00006D20 33FC 0003 FFFF DC04        		move.w	#3,(RAM_P1_Hits)
00006D28                            @dontresthit:
00006D28 426E 002A                  		clr.w	plyr_hittime(a6)
00006D2C 08EE 0006 001E              		bset	#bitobj_hit,obj_status(a6)
00006D32                             		
00006D32                            ; =================================================================
00006D32                            ; ------------------------------------------------
00006D32                            ; Index $01: Main
00006D32                            ; ------------------------------------------------
00006D32                            
00006D32                            ObjPlyr_Main:
00006D32                            ; 		btst	#bitJoyA,(RAM_Control_2+OnPress)
00006D32                            ; 		beq.s	@NotDbg
00006D32                            ; 		clr.l	obj_x(a6)
00006D32                            ; 		clr.l	obj_y(a6)
00006D32                            ; 		clr.l	obj_x_spd(a6)
00006D32                            ; 		clr.l	obj_y_spd(a6)
00006D32                            ; 		lea	(RAM_LvlPlanes),a5
00006D32                            ; 		clr.w	lvl_x(a5)
00006D32                            ; 		clr.w	lvl_y(a5)
00006D32                            ; 		movem.l	a6,-(sp)
00006D32                            ; 		bsr	Level_Draw
00006D32                            ; 		movem.l	(sp)+,a6
00006D32                            ; @NotDbg:
00006D32 0839 0003 FFFF DE82        		btst	#bitJoyMode,(RAM_Control_1+ExOnHold)
00006D3A 6700                       		beq.s	@NotWnd
00006D3C 6000 0000                  		bra	PlyrDebugMove
00006D40                            @NotWnd:
00006D40                            
00006D40                            ; 		btst	#bitJoyX,(RAM_Control_1+ExOnPress)
00006D40                            ; 		beq.s	@NotWnd3
00006D40                            ; 		bchg	#3,(RAM_VidRegs+$C)
00006D40                            ; 		bchg	#bitobj_flipH,obj_status(a6)
00006D40                            ; 		bsr	Video_Update
00006D40                            ; @NotWnd3:
00006D40                            ; 		btst	#bitJoyY,(RAM_Control_1+ExOnPress)
00006D40                            ; 		beq.s	@NotWnd2
00006D40                            ; 		bchg	#bitobj_flipV,obj_status(a6)
00006D40                            ; @NotWnd2:
00006D40                            
00006D40                            ; ----------------------------------
00006D40                            ; Falling frame
00006D40                            ; ----------------------------------
00006D40                            
00006D40                            ; 		btst	#bitobj_air,obj_status(a6)
00006D40                            ; 		beq.s	@idleanim
00006D40                            ; 		tst.l	obj_y_spd(a6)
00006D40                            ; 		beq.s	@idleanim
00006D40                            ; 		bmi.s	@idleanim
00006D40                            ; 		move.b	#3,obj_anim_id(a6)
00006D40                            ; @idleanim:
00006D40                            
00006D40 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006D46 302D 0032                  		move.w	lvl_size_y(a5),d0		; Bottomless pit
00006D4A E948                       		lsl.w	#4,d0
00006D4C 322E 000C                  		move.w	obj_y(a6),d1
00006D50 7400                       		moveq	#0,d2
00006D52 142E 0006                  		move.b	obj_size+2(a6),d2
00006D56 E74A                       		lsl.w	#3,d2
00006D58 9242                       		sub.w	d2,d1
00006D5A B240                       		cmp.w	d0,d1
00006D5C 6E00 0000                  		bgt	PlyrLevelReset
00006D60                            		
00006D60 4A6E 002A                  		tst.w	plyr_hittime(a6)
00006D64 6600                       		bne.s	@counting
00006D66 082E 0003 001E             		btst	#bitobj_hurt,obj_status(a6)
00006D6C 6700                       		beq.s	@no_action
00006D6E                            		
00006D6E 4A6E 002A                  		tst.w	plyr_hittime(a6)
00006D72 6600                       		bne.s	@ignore
00006D74 0479 0001 FFFF DC04        		sub.w	#1,(RAM_P1_Hits)
00006D7C 3D7C 0060 002A             		move.w	#varHurtTimer,plyr_hittime(a6)
00006D82                            		
00006D82 4A79 FFFF DC04             		tst.w	(RAM_P1_Hits)
00006D88 6600                       		bne.s	@counting
00006D8A 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00006D90 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
00006D96 1D7C 0002 001D             		move.b	#2,obj_index(a6)		; Mode $02: dead
00006D9C 1D7C 0005 001A             		move.b	#5,obj_anim_id(a6)		; Animation $05
00006DA2 2D7C 0001 0000 0010        		move.l	#$10000,obj_x_spd(a6)
00006DAA 2D7C FFFC 0000 0014        		move.l	#-$40000,obj_y_spd(a6)
00006DB2                            @ignore:
00006DB2 4E75                       		rts
00006DB4                            		
00006DB4                            @counting:
00006DB4 046E 0001 002A             		sub.w	#1,plyr_hittime(a6)
00006DBA 6600                       		bne.s	@no_action
00006DBC 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
00006DC2                            @no_action:
00006DC2 6000 0000                  		bra	PlyrPhysics
00006DC6                            		
00006DC6                            ; =================================================================
00006DC6                            ; ------------------------------------------------
00006DC6                            ; Index $01: Main
00006DC6                            ; ------------------------------------------------
00006DC6                            
00006DC6                            ObjPlyr_Die:
00006DC6 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00006DCC 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00006DD0 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00006DD4 0687 0000 4000             		add.l	#$4000,d7
00006DDA                            		
00006DDA DDAE 0008                  		add.l	d6,obj_x(a6)
00006DDE DFAE 000C                  		add.l	d7,obj_y(a6)
00006DE2                            		
00006DE2 302D 0032                  		move.w	lvl_size_y(a5),d0
00006DE6 E948                       		lsl.w	#4,d0
00006DE8 322E 000C                  		move.w	obj_y(a6),d1
00006DEC 7400                       		moveq	#0,d2
00006DEE 142E 0006                  		move.b	obj_size+2(a6),d2
00006DF2 E74A                       		lsl.w	#3,d2
00006DF4 9242                       		sub.w	d2,d1
00006DF6 B240                       		cmp.w	d0,d1
00006DF8 6E00                       		bgt.s	PlyrLevelReset
00006DFA                            		
00006DFA 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00006DFE 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00006E02 4E75                       		rts
00006E04                            		
00006E04                            ; =================================================================
00006E04                            ; ----------------------------------
00006E04                            ; Level reset
00006E04                            ; ----------------------------------
00006E04                            
00006E04                            PlyrLevelReset:
00006E04 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
00006E0C                            		
00006E0C 0479 0001 FFFF DC00        		sub.w	#1,(RAM_P1_Lives)
00006E14 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
00006E1A 6600                       		bne.s	@ignore
00006E1C                            		;GAME OVER stuff goes here
00006E1C 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
00006E22                            		
00006E22                            @ignore:
00006E22 4E75                       		rts
00006E24                            		
00006E24                            ; ----------------------------------
00006E24                            
00006E24                            PlyrDebugMove:
00006E24 08AE 0005 002D             		bclr	#bitPlyrClimb,plyr_status(a6)
00006E2A 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
00006E30 422E 0022                  		clr.b	obj_col(a6)
00006E34                            		
00006E34 0839 0003 FFFF DE83        		btst	#bitJoyRight,(RAM_Control_1+OnHold)
00006E3C 6700                       		beq.s	@DNotRight
00006E3E 06AE 0005 0000 0008        		add.l	#$50000,obj_x(a6)
00006E46 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
00006E4C                            @DNotRight:
00006E4C 0839 0002 FFFF DE83        		btst	#bitJoyLeft,(RAM_Control_1+OnHold)
00006E54 6700                       		beq.s	@DNotLeft
00006E56 04AE 0005 0000 0008        		sub.l	#$50000,obj_x(a6)
00006E5E 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
00006E64                            @DNotLeft:
00006E64 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
00006E6C 6700                       		beq.s	@DNotDown
00006E6E 06AE 0005 0000 000C        		add.l	#$50000,obj_y(a6)
00006E76                            @DNotDown:
00006E76 0839 0000 FFFF DE83        		btst	#bitJoyUp,(RAM_Control_1+OnHold)
00006E7E 6700                       		beq.s	@DNotUp
00006E80 04AE 0005 0000 000C        		sub.l	#$50000,obj_y(a6)
00006E88                            @DNotUp:
00006E88 2D7C 0000 0001 0010        		move.l	#1,obj_x_spd(a6)		;Temporal
00006E90 2D7C 0000 0001 0014        		move.l	#1,obj_y_spd(a6)
00006E98                            		
00006E98 6000 0000                    		bra	Plyr_LvlCamera
00006E9C                              		
00006E9C                            ; ----------------------------------
00006E9C                            ; Player physics
00006E9C                            ; ----------------------------------
00006E9C                            
00006E9C                            PlyrPhysics:
00006E9C 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00006EA0 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00006EA4                            
00006EA4                            ; ------------------------
00006EA4                            ; Animation ID
00006EA4                            ; ------------------------
00006EA4                            
00006EA4 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00006EAA 6600                       		bne.s	@walking
00006EAC 082E 0002 001E             		btst	#bitobj_air,obj_status(a6)
00006EB2 6600                       		bne.s	@walking
00006EB4                            
00006EB4 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
00006EBA 4A86                       		tst.l	d6
00006EBC 6600                       		bne.s	@walking
00006EBE 422E 001A                  		clr.b	obj_anim_id(a6)
00006EC2                            @walking:
00006EC2                            
00006EC2                            ; ***************
00006EC2                            ; X Speed stuff
00006EC2                            ; ***************
00006EC2                            
00006EC2 6100 0000                  		bsr	@Player_Friction
00006EC6 6100 0000                  		bsr	@Player_Walk
00006ECA DDAE 0008                  		add.l	d6,obj_x(a6)			;X + X Speed
00006ECE 6100 0000                  		bsr	PlyrColRead_Wall
00006ED2                            		
00006ED2                            ; ***************
00006ED2                            ; Y Speed stuff
00006ED2                            ; ***************
00006ED2                            ; 
00006ED2 6100 0000                  		bsr	@Player_Jump
00006ED6 DFAE 000C                  		add.l	d7,obj_y(a6)			;Y + Y Speed
00006EDA 6100 0000                    		bsr	PlyrColRead_Ceiling
00006EDE 6100 0000                  		bsr	PlyrColRead_Floor
00006EE2                            
00006EE2                            ; ***************
00006EE2                            ; Save them
00006EE2                            ; ***************
00006EE2                            
00006EE2 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00006EE6 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00006EEA                            		
00006EEA 6000 0000                   		bra	Plyr_LvlCamera
00006EEE                            	
00006EEE                            ; =================================================================
00006EEE                            ; ------------------------------------------------
00006EEE                            ; Subs
00006EEE                            ; ------------------------------------------------
00006EEE                            
00006EEE                            ; **********************************
00006EEE                            ; Player Walk
00006EEE                            ; **********************************
00006EEE                            
00006EEE                            @Player_Walk:
00006EEE 2806                       		move.l	d6,d4
00006EF0 0839 0003 FFFF DE83        		btst	#bitJoyRight,(RAM_Control_1+OnHold)
00006EF8 6700                       		beq.s	@NotRight
00006EFA 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00006F00 6600                       		bne.s	@NotMuchRight
00006F02 7000                       		moveq	#0,d0
00006F04 3039 FFFF BC34             		move.w	(RAM_LvlPlanes+lvl_maxcam_x),d0
00006F0A E948                       		lsl.w	#4,d0
00006F0C 322E 0008                  		move.w	obj_x(a6),d1
00006F10 B240                       		cmp.w	d0,d1
00006F12 6E00                       		bgt.s	@NotRight
00006F14                            	
00006F14                            ; 		tst.l	d4
00006F14                            ; 		bpl.s	@NotRunningR
00006F14 203C 0001 E000             		move.l	#$1E000,d0
00006F1A 0839 0004 FFFF DE83         		btst	#bitJoyB,(RAM_Control_1+OnHold)
00006F22 6700                        		beq.s	@NotRunningR
00006F24 203C 0002 8000              		move.l	#$28000,d0
00006F2A                            @NotRunningR:
00006F2A                            
00006F2A 0686 0000 4800             		add.l	#$4800,d6
00006F30 BC80                       		cmp.l	d0,d6
00006F32 6D00                       		blt.s	@NotMuchRight
00006F34 2C00                       		move.l	d0,d6
00006F36                            @NotMuchRight:
00006F36 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
00006F3C                            
00006F3C                            @NotRight:
00006F3C 0839 0002 FFFF DE83        		btst	#bitJoyLeft,(RAM_Control_1+OnHold)
00006F44 6700                       		beq.s	@NotLeft
00006F46 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00006F4C 6600                       		bne.s	@NotMuchLeft
00006F4E 4AAE 0008                  		tst.l	obj_x(a6)
00006F52 6700                       		beq.s	@NotLeft
00006F54 6B00                       		bmi.s	@NotLeft
00006F56                            		
00006F56                            ; 		tst.l	d4
00006F56                            ; 		bmi.s	@NotRunningL
00006F56 203C FFFE 0000             		move.l	#-$20000,d0
00006F5C 0839 0004 FFFF DE83         		btst	#bitJoyB,(RAM_Control_1+OnHold)
00006F64 6700                        		beq.s	@NotRunningL
00006F66 203C FFFD 0000              		move.l	#-$30000,d0
00006F6C                            @NotRunningL:
00006F6C                            
00006F6C                            		
00006F6C 0486 0000 4800             		sub.l	#$4800,d6
00006F72 BC80                       		cmp.l	d0,d6
00006F74 6E00                       		bgt.s	@NotMuchLeft
00006F76 2C00                       		move.l	d0,d6
00006F78                            @NotMuchLeft:
00006F78 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
00006F7E                            @NotLeft:		
00006F7E 4E75                       		rts
00006F80                            		
00006F80                            ; **********************************
00006F80                            ; Player Friction
00006F80                            ; **********************************
00006F80                            
00006F80                            @Player_Friction:
00006F80 283C 0000 2400             		move.l	#$2400,d4			;Friction
00006F86 4A86                       		tst.l	d6
00006F88 6700                       		beq.s	@FineSpeed
00006F8A 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00006F90 6600                       		bne.s	@Left
00006F92 9C84                       		sub.l	d4,d6
00006F94 6A00                       		bpl.s	@FineSpeed
00006F96 4286                       		clr.l	d6
00006F98 4E75                       		rts
00006F9A                            @Left:
00006F9A DC84                       		add.l	d4,d6
00006F9C 6B00                       		bmi.s	@FineSpeed
00006F9E                            		
00006F9E                            @ignoreR:
00006F9E 4286                       		clr.l	d6
00006FA0                            @FineSpeed:	
00006FA0 4E75                       		rts
00006FA2                            
00006FA2                            ; **********************************
00006FA2                            ; Player jump
00006FA2                            ; **********************************
00006FA2                            
00006FA2                            @Player_Jump:
00006FA2 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00006FA8 6600                       		bne.s	@JumpFromLadder
00006FAA 082E 0006 002D             		btst	#bitPlyrCancelY,plyr_status(a6)
00006FB0 6600                       		bne.s	@JumpFromLadder
00006FB2                            		
00006FB2 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
00006FBA 6700 0000                  		beq	@IsFalling
00006FBE                            		
00006FBE 0C6E 000B 0026              		cmp.w	#varJumpTimer,plyr_jumptmr(a6)
00006FC4 6600                        		bne.s	@onair
00006FC6 082E 0004 0022               		btst	#bitcol_obj,obj_col(a6)
00006FCC 6600                           		bne.s	@onair
00006FCE 082E 0000 0022               		btst	#bitcol_floor,obj_col(a6)
00006FD4 6700                           		beq.s	@IsFalling
00006FD6                            @onair:
00006FD6                            
00006FD6 046E 0001 0026             		sub.w	#1,plyr_jumptmr(a6)
00006FDC 6B00                       		bmi.s	@IsFalling
00006FDE                            
00006FDE 082E 0002 001E              		btst	#bitobj_air,obj_status(a6)
00006FE4 6600                        		bne.s	@onair2
00006FE6                            
00006FE6 1D7C 0002 001A              		move.b	#varPlyAniJump,obj_anim_id(a6)
00006FEC 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
00006FF2 08AE 0000 0022                  		bclr	#bitcol_floor,obj_col(a6)
00006FF8 08AE 0004 0022                  		bclr	#bitcol_obj,obj_col(a6)
00006FFE 2E3C FFFB E000                		move.l	#-$42000,d7
00007004 2006                          		move.l	d6,d0
00007006 E480                          		asr.l	#2,d0
00007008 4A80                          		tst.l	d0
0000700A 6B00                          		bmi.s	@dontnegx
0000700C 4480                          		neg.l	d0
0000700E                            @dontnegx:
0000700E DE80                       		add.l	d0,d7
00007010                            		
00007010 203C 0000 0000               		move.l	#SndSfx_PlyrJump,d0
00007016 7201                         		moveq 	#1,d1
00007018 7401                         		moveq	#1,d2
0000701A 6100 A420                    		bsr	Audio_Track_play
0000701E                            @onair2:
0000701E 4E75                          		rts
00007020                              
00007020                            ; ----------------------------------
00007020                            
00007020                            @JumpFromLadder:
00007020 0839 0005 FFFF DE85        		btst	#bitJoyC,(RAM_Control_1+OnPress)
00007028 6700 0000                  		beq	@IsFalling
0000702C                            		
0000702C 08AE 0005 002D             		bclr	#bitPlyrClimb,plyr_status(a6)
00007032 08EE 0002 001E              		bset	#bitobj_air,obj_status(a6)
00007038 1D7C 0002 001A              		move.b	#2,obj_anim_id(a6)
0000703E 4286                          		clr.l	d6
00007040 4287                          		clr.l	d7
00007042 4E75                        		rts
00007044                             		
00007044                            ; ----------------------------------
00007044                            
00007044                            @IsFalling:
00007044 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0000704A 6600                       		bne.s	@low_fall
0000704C 082E 0000 0022                		btst	#bitcol_floor,obj_col(a6)
00007052 6600                           		bne.s	@low_fall
00007054                            
00007054 0687 0000 4800              		add.l	#$4800,d7
0000705A 0C87 0010 0000             		cmp.l	#$100000,d7
00007060 6D00                       		blt.s	@low_fall
00007062 2E3C 0010 0000             		move.l	#$100000,d7
00007068                            @low_fall:
00007068 4E75                       		rts
0000706A                            		
0000706A                            ; **********************************
0000706A                            ; Object to Level layout collision
0000706A                            ; **********************************
0000706A                            
0000706A                            ; ----------------------------------
0000706A                            ; floor collision
0000706A                            ; ----------------------------------
0000706A                            
0000706A                            PlyrColRead_Floor:
0000706A 08AE 0000 0022              		bclr	#bitcol_floor,obj_col(a6)
00007070 08AE 0002 001E              		bclr	#bitobj_air,obj_status(a6)
00007076                             		
00007076 082E 0004 0022              		btst	#bitcol_obj,obj_col(a6)
0000707C 6600                        		bne.s	@dont
0000707E 08EE 0002 001E              		bset	#bitobj_air,obj_status(a6)
00007084                            @dont:
00007084 08AE 0004 0022              		bclr	#bitcol_obj,obj_col(a6)
0000708A                             		
0000708A 4A87                       		tst.l	d7
0000708C 6B00                       		bmi.s	@going_up
0000708E                            
0000708E                            ; 		bsr	object_FindPrz_Floor		;TODO: no sirve en prizes
0000708E                            ;  		btst	#7,d0
0000708E                            ;  		beq.s	@cntrnrml
0000708E                            ; 		clr.b	d0
0000708E                            ; @cntrnrml:
0000708E                            ; 		tst.b	d0
0000708E                            ; 		bne	@przfloor_center
0000708E                            
0000708E 6100 EF70                   		bsr 	object_FindPrz_FloorSides
00007092                             		
00007092 4A00                       		tst.b	d0
00007094 6600 0000                  		bne	@przfloor_right
00007098 2001                       		move.l	d1,d0
0000709A 4A00                       		tst.b	d0
0000709C 6600 0000                  		bne	@przfloor_left
000070A0                            
000070A0 6100 EDC0                  		bsr	object_FindCol_Floor
000070A4 6100 0000                  		bsr	@center_special
000070A8 4A00                       		tst.b	d0
000070AA 6600                       		bne.s	@found_center
000070AC 6100 EF5E                   		bsr 	object_FindCol_FloorSides
000070B0 6100 0000                  		bsr	@right_special
000070B4 4A00                       		tst.b	d0
000070B6 6600 0000                  		bne	@found_sides
000070BA 2001                       		move.l	d1,d0
000070BC 6100 0000                  		bsr	@left_special
000070C0 4A00                       		tst.b	d0
000070C2 6600 0000                  		bne	@found_sides
000070C6                            @going_up:
000070C6                            
000070C6 4E75                       		rts
000070C8                            		
000070C8                            ; ----------------------------------
000070C8                            
000070C8                            @found_center:
000070C8 0C00 0001                  		cmp.b	#1,d0
000070CC 6700 0000                  		beq	@floorsolid
000070D0                            
000070D0 6000                       		bra.s	@SlopeCenter
000070D2                            		
000070D2                            ; ----------------------------------
000070D2                            
000070D2                            @found_sides:
000070D2 0C00 0001                  		cmp.b	#1,d0
000070D6 6700 0000                  		beq	@floorsolid
000070DA 4E75                       		rts
000070DC                            
000070DC                            ; ----------------------------------
000070DC                            
000070DC                            @SlopeCenter:
000070DC 4A87                          		tst.l	d7
000070DE 6B00 0000                     		bmi	@NoCol
000070E2                               				
000070E2 222E 000C                     		move.l	obj_y(a6),d1
000070E6 2401                          		move.l	d1,d2
000070E8 47F9 0000 57CE               		lea	(col_SlopeData),a3
000070EE 0240 00FF                    		and.w	#$FF,d0
000070F2 3200                         		move.w	d0,d1
000070F4 E949                         		lsl.w	#4,d1
000070F6 D6C1                         		adda	d1,a3
000070F8 202E 0008                   		move.l	obj_x(a6),d0
000070FC 4840                        		swap	d0
000070FE 0240 000F                   		and.w	#$F,d0
00007102 1033 0000                   		move.b	(a3,d0.w),d0
00007106 0240 000F                      		and.w	#$F,d0
0000710A 0281 FFF0 0000                 		and.l	#$FFF00000,d1
00007110 4840                         		swap	d0
00007112 0280 FFFF 0000               		and.l	#$FFFF0000,d0
00007118 D280                        		add.l	d0,d1
0000711A                             		
0000711A                             		;TODO: no recuerdo pa que
0000711A                             		;era este fix
0000711A                             		; tambien ver que pedo
0000711A                             		; porque dominou no
0000711A                             		; se queda pegado a los slopes
0000711A                             		
0000711A                            ;  		move.l	obj_x_spd(a6),d0
0000711A                            ;  		btst	#bitobj_flipH,obj_status(a6)
0000711A                            ;  		beq.s	@right
0000711A                            ;  		neg.l	d0
0000711A                            ; @right:
0000711A                            ; 		cmp.l	#$20000,d0
0000711A                            ; 		bge.s	@dontchk
0000711A 082E 0002 001E               		btst	#bitobj_air,obj_status(a6)
00007120 6700                         		beq.s	@dontchk
00007122 B481                         		cmp.l	d1,d2
00007124 6D00                         		blt.s	@NoCol
00007126                            @dontchk:
00007126 2E3C 0005 0000              		move.l	#$50000,d7
0000712C 2D41 000C                    		move.l	d1,obj_y(a6)
00007130 6100 0000                     		bsr	@objFloorFlags
00007134                            @NoCol:
00007134 4E75                       		rts
00007136                            		
00007136                            ; ----------------------------------
00007136                            ; Event block: on floor
00007136                            ; ----------------------------------
00007136                            
00007136                            @center_special:
00007136 0800 0006                  		btst	#6,d0
0000713A 6700                       		beq.s	@return
0000713C 6100 0000                  		bsr	plyrColEntry
00007140 3814                       		move.w	(a4),d4
00007142 6000 0000                  		bra	plyrColGo
00007146                            		
00007146                            @left_special:
00007146 0800 0006                  		btst	#6,d0
0000714A 6700                       		beq.s	@return
0000714C 6100 0000                  		bsr	plyrColEntry
00007150 382C 0002                  		move.w	2(a4),d4
00007154 6000 0000                  		bra	plyrColGo
00007158                            		
00007158                            @right_special:
00007158 0800 0006                  		btst	#6,d0
0000715C 6700                       		beq.s	@return
0000715E 6100 0000                  		bsr	plyrColEntry
00007162 382C 0004                  		move.w	4(a4),d4
00007166 6000 0000                  		bra	plyrColGo
0000716A                            @return:
0000716A 4E75                       		rts
0000716C                            
0000716C                            ; ----------------------------------
0000716C                            ; Prizes on floor
0000716C                            ; ----------------------------------
0000716C                            
0000716C                            @przfloor_center:
0000716C                            @przfloor_left:
0000716C                            @przfloor_right:
0000716C 7801                       		moveq	#1,d4
0000716E                            		
0000716E 0C00 0020                  		cmp.b	#$20,d0
00007172 6700                       		beq.s	@trampoline
00007174                            		
00007174 0C00 0040                  		cmp.b	#$40,d0		;> $40?
00007178 6D00                       		blt.s	@a_coin
0000717A 0200 003F                  		and.b	#$3F,d0
0000717E 7801                       		moveq	#1,d4
00007180 4A00                       		tst.b	d0
00007182 6700                       		beq.s	@setcoin
00007184 7805                       		moveq	#5,d4
00007186                            @setcoin:
00007186 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
0000718C 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
00007194 6D00                         		blt.s	@dontadd1up
00007196 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
0000719C 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
000071A4                            @dontadd1up:
000071A4                            
000071A4 6100 FADA                  		bsr	Prize_Delete
000071A8 6100 E17A                  		bsr	Level_HidePrize
000071AC                            		
000071AC 203C 0000 0000               		move.l	#SndSfx_COIN,d0
000071B2 7202                         		moveq 	#2,d1
000071B4 7401                         		moveq	#1,d2
000071B6 6100 A284                    		bsr	Audio_Track_play
000071BA 7800                       		moveq	#0,d4
000071BC                            @a_coin:
000071BC 4A44                       		tst.w	d4
000071BE 6600                       		bne.s	@floorsolid
000071C0 4E75                       		rts
000071C2                            		
000071C2                            ; $20
000071C2                            
000071C2                            @trampoline:
000071C2 6100 FA6E                  		bsr	goToTrampolineWhy
000071C6                            		
000071C6 2E3C FFF8 0000             		move.l	#-$80000,d7
000071CC 7801                       		moveq	#1,d4
000071CE 4E75                       		rts
000071D0                            		
000071D0                            ; ----------------------------------
000071D0                            
000071D0                            ; @check_prz_id:
000071D0                            ;    		bsr	Object_PrzActionCeil
000071D0                            ;   		tst.w	d4
000071D0                            ;   		bne	@ceilingsolid
000071D0                            ; 		rts
000071D0                            		
000071D0                            ;       	bsr	level_CheckPrize
000071D0                            ;        	bne	@floorsolid
000071D0                            ;        	rts
000071D0                            
000071D0                            ; ----------------------------------
000071D0                            		
000071D0                            @floorsolid:
000071D0 6100 0000                  		bsr	@objFloorFlags
000071D4 02AE FFF0 0000 000C         		and.l	#$FFF00000,obj_y(a6)
000071DC 4287                       		clr.l	d7
000071DE 4E75                       		rts
000071E0                            
000071E0                            ; ----------------------------------
000071E0                            
000071E0                            @objFloorFlags:
000071E0 08EE 0000 0022               		bset	#bitcol_floor,obj_col(a6)
000071E6 08AE 0002 001E             		bclr	#bitobj_air,obj_status(a6)
000071EC                            		
000071EC 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
000071F4 6600 0000                  		bne	@onhold
000071F8 3D7C 000B 0026                 		move.w	#varJumpTimer,plyr_jumptmr(a6)
000071FE                            @onhold:
000071FE 08AE 0005 002D              		bclr	#bitPlyrClimb,plyr_status(a6)
00007204 08AE 0006 002D             		bclr	#bitPlyrCancelY,plyr_status(a6)
0000720A 4E75                       		rts
0000720C                            		
0000720C                            ; ----------------------------------
0000720C                            ; ceiling collision
0000720C                            ; ----------------------------------
0000720C                            
0000720C                            PlyrColRead_Ceiling:
0000720C 08AE 0001 0022             		bclr	#bitcol_ceiling,obj_col(a6)
00007212 4A87                       		tst.l	d7
00007214 6A00                       		bpl.s	@doing_down
00007216                            		
00007216 6100 F178                   		bsr 	object_FindCol_CeilingSides
0000721A 2400                        		move.l	d0,d2
0000721C 2601                        		move.l	d1,d3
0000721E 6100 F164                   		bsr 	object_FindPrz_CeilingSides
00007222 4A00                       		tst.b	d0
00007224 6600 0000                  		bne	@przceil_right
00007228 2002                       		move.l	d2,d0
0000722A 6100 0000                  		bsr	@right_special
0000722E 4A00                       		tst.b	d0
00007230 6600 0000                   		bne	@ceiling_sides
00007234 2001                       		move.l	d1,d0
00007236 4A00                       		tst.b	d0
00007238 6600 0000                  		bne	@przceil_left
0000723C 2003                       		move.l	d3,d0
0000723E 6100 0000                  		bsr	@left_special
00007242 4A00                       		tst.b	d0
00007244 6600 0000                  		bne	@ceiling_sides
00007248                            		
00007248 6100 ED46                  		bsr	object_FindPrz_Ceiling
0000724C 4A00                       		tst.b	d0
0000724E 6600 0000                  		bne	@przceil_center
00007252 6100 ED48                  		bsr	object_FindCol_Ceiling
00007256 6100 0000                  		bsr	@center_special
0000725A 4A00                       		tst.b	d0
0000725C 6600                       		bne.s	@ceiling_center
0000725E                            		
0000725E                            @doing_down:
0000725E 4E75                       		rts
00007260                            
00007260                            ; ----------------------------------
00007260                            
00007260                            @ceiling_center:
00007260                            ; 		cmp.b	#1,d0
00007260                            ;  		beq.s	@ceilingsolid
00007260                            ;  		rts
00007260                            
00007260                            ; ----------------------------------
00007260                            
00007260                            @ceiling_sides:
00007260 0C00 0001                  		cmp.b	#1,d0
00007264 6700                       		beq.s	@ceilingsolid
00007266 4E75                       		rts
00007268                            
00007268                            ; ----------------------------------
00007268                            
00007268                            @ceilingsolid:
00007268 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
0000726E 08EE 0001 0022              		bset	#bitcol_ceiling,obj_col(a6)
00007274 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
0000727A                            ; 		move.l	#$10000,d7
0000727A                            ;         	add.w	#$10,obj_y(a6)
0000727A                            ;       	and.l	#$FFF80000,obj_y(a6)
0000727A                            
0000727A                            ; 		move.l	d0,d1
0000727A                            ; 		lsr.l	#4,d1
0000727A                            ; 		and.w	#$FFF0,d1
0000727A                            ; 		add.w	#$10,d1
0000727A                            ; 		add.w	#$20,d1
0000727A                            ; 		move.w	d1,obj_y(a6)
0000727A                            		
0000727A 4E75                        		rts
0000727C                            		
0000727C                            ; ----------------------------------
0000727C                            ; Event block: ceiling
0000727C                            ; ----------------------------------
0000727C                            
0000727C                            @center_special:
0000727C 0800 0006                  		btst	#6,d0
00007280 6700                       		beq.s	@return
00007282 6100 0000                  		bsr	plyrColEntry
00007286 382C 000C                  		move.w	$C(a4),d4
0000728A 6000 0000                  		bra	plyrColGo
0000728E                            		
0000728E                            @left_special:
0000728E 0800 0006                  		btst	#6,d0
00007292 6700                       		beq.s	@return
00007294 6100 0000                  		bsr	plyrColEntry
00007298 382C 000E                  		move.w	$E(a4),d4
0000729C 6000 0000                  		bra	plyrColGo
000072A0                            		
000072A0                            @right_special:
000072A0 0800 0006                  		btst	#6,d0
000072A4 6700                       		beq.s	@return
000072A6 6100 0000                  		bsr	plyrColEntry
000072AA 382C 0010                  		move.w	$10(a4),d4
000072AE 6000 0000                  		bra	plyrColGo
000072B2                            		
000072B2                            @return:
000072B2 4E75                       		rts
000072B4                            		
000072B4                            ; ----------------------------------
000072B4                            
000072B4                            @przceil_center:
000072B4                            @przceil_left:
000072B4                            @przceil_right:
000072B4 6100 F676                     		bsr	Object_PrzActionCeil
000072B8 4A44                         		tst.w	d4
000072BA 6600 FFAC                    		bne	@ceilingsolid
000072BE 4E75                       		rts
000072C0                            		
000072C0                            ; ----------------------------------
000072C0                            ; d0 - LEFT
000072C0                            ; d1 - RIGHT
000072C0                            ; d2 - CENTER
000072C0                            ; ----------------------------------
000072C0                            
000072C0                            ; @prizes_ceiling:
000072C0                            ; 		move.l	d0,d3
000072C0                            ; 		btst	#bitobj_flipH,obj_status(a6)
000072C0                            ; 		beq.s	@itsleft
000072C0                            ; 		exg.l	d1,d3
000072C0                            ; @itsleft:
000072C0                            ; 
000072C0                            ;    		move.l	d2,d0
000072C0                            ;    		tst.b	d0
000072C0                            ;    		beq.s	@przc_no_c
000072C0                            ;   		bsr	Object_PrzActionCeil
000072C0                            ;  		tst.w	d4
000072C0                            ;  		bne	@ceilingsolid
000072C0                            ; @przc_no_c:
000072C0                            ; 
000072C0                            ; 		move.l	d1,d0
000072C0                            ; 		tst.b	d0
000072C0                            ; 		beq.s	@przc_no_r
000072C0                            ; 		bsr	Object_PrzActionCeil
000072C0                            ; 		tst.w	d4
000072C0                            ; 		bne	@ceilingsolid
000072C0                            ; @przc_no_r:
000072C0                            ;  		move.l	d3,d0
000072C0                            ;  		tst.b	d0
000072C0                            ;  		beq.s	@przc_no_l
000072C0                            ;  		bsr	Object_PrzActionCeil
000072C0                            ; 		tst.w	d4
000072C0                            ; 		bne	@ceilingsolid
000072C0                            ; @przc_no_l:
000072C0                            ; 		rts
000072C0                            		
000072C0                            ; **********************************
000072C0                            ; Wall collision
000072C0                            ; **********************************
000072C0                            
000072C0                            PlyrColRead_Wall:
000072C0 08AE 0002 0022             		bclr	#bitcol_wall_r,obj_col(a6)
000072C6 08AE 0003 0022             		bclr	#bitcol_wall_l,obj_col(a6)
000072CC                            		
000072CC                            		; Ignorar PRIZEs si Player esta
000072CC                            		; en modo escalera
000072CC 082E 0005 002D              		btst	#bitPlyrClimb,plyr_status(a6)
000072D2 6600                        		bne.s	@okaydntchk
000072D4 6100 EBEE                  		bsr	object_FindPrz_Wall
000072D8 2400                       		move.l	d0,d2
000072DA 6100 EE38                  		bsr	object_FindPrz_WallSides
000072DE 0800 0007                   		btst	#7,d0
000072E2 6700                        		beq.s	@righthidn
000072E4 4200                        		clr.b	d0
000072E6                            @righthidn:
000072E6 4A00                       		tst.b	d0
000072E8 6600 0000                  		bne	@przwall_right
000072EC 2001                       		move.l	d1,d0
000072EE 0800 0007                   		btst	#7,d0
000072F2 6700                        		beq.s	@lefthidn
000072F4 4200                        		clr.b	d0
000072F6                            @lefthidn:
000072F6 4A00                       		tst.b	d0
000072F8 6600 0000                  		bne	@przwall_left
000072FC                            @okaydntchk:
000072FC                            
000072FC 6100 EBD2                  		bsr	object_FindCol_Wall
00007300 6100 0000                  		bsr	@center_special
00007304 4A00                       		tst.b	d0
00007306 6600                       		bne.s	@wall_center
00007308                            		
00007308 6100 EE16                   		bsr 	object_FindCol_WallSides
0000730C 6100 0000                  		bsr	@right_special
00007310 4A00                       		tst.b	d0
00007312 6600 0000                  		bne	@wall_right
00007316                            		
00007316 2001                       		move.l	d1,d0
00007318 6100 0000                  		bsr	@left_special
0000731C 4A00                       		tst.b	d0
0000731E 6600 0000                  		bne	@wall_left
00007322 4E75                       		rts
00007324                            		
00007324                            ; ----------------------------------
00007324                            
00007324                            @wall_center:
00007324 0C40 0001                  		cmp.w	#1,d0
00007328 6700 0000                   		beq	@wallsolid_slope
0000732C                            		
0000732C 4A87                       		tst.l	d7
0000732E 6B00                       		bmi.s	@NoCol_LR
00007330 082E 0002 001E                		btst	#bitobj_air,obj_status(a6)
00007336 6600                          		bne.s	@NoCol_LR
00007338 4287                           		clr.l	d7	
0000733A 08AE 0002 001E                 		bclr	#bitobj_air,obj_status(a6)
00007340                                		
00007340 322E 000C                  		move.w	obj_y(a6),d1
00007344 0441 0001                  		sub.w	#1,d1
00007348 3601                       		move.w	d1,d3
0000734A 0241 FFF0                  		and.w	#$FFF0,d1 		
0000734E 47F9 0000 57CE                  		lea	(col_SlopeData),a3
00007354 0240 00FF                        		and.w	#$FF,d0
00007358 E948                            		lsl.w	#4,d0
0000735A D6C0                             		adda	d0,a3
0000735C 302E 0008                        		move.w	obj_x(a6),d0
00007360 0240 000F                        		and.w	#$F,d0
00007364 1433 0000                        		move.b	(a3,d0.w),d2
00007368 0242 000F                        		and.w	#$F,d2
0000736C D242                             		add.w	d2,d1
0000736E                                  		
0000736E 082E 0002 001E              		btst	#bitobj_air,obj_status(a6)
00007374 6700                       		beq.s	@dontchkLR
00007376 B641                         		cmp.w	d1,d3
00007378 6D00                         		blt.s	@NoCol_LR
0000737A                            @dontchkLR:
0000737A 3D41 000C                     		move.w	d1,obj_y(a6)
0000737E                            
0000737E                            @NoCol_LR:
0000737E 4E75                       		rts
00007380                            
00007380                            ; ----------------------------------
00007380                            ; Prizes on walls
00007380                            ; ----------------------------------	
00007380                            
00007380                            @przwall_left:
00007380 6100 0000                  		bsr	@check_wll_prz
00007384 4A44                          		tst.w	d4
00007386 6600 0000                     		bne	@wallsolid_l
0000738A 4E75                       		rts
0000738C                            @przwall_right:
0000738C 6100 0000                  		bsr	@check_wll_prz
00007390 4A44                          		tst.w	d4
00007392 6600 0000                     		bne	@wallsolid_r
00007396 4E75                       		rts
00007398                            	
00007398                            ; ----------------------------------
00007398                            
00007398                            @check_wll_prz:
00007398 7801                       		moveq	#1,d4
0000739A                            		
0000739A 0C00 0020                  		cmp.b	#$20,d0
0000739E 6700                       		beq.s	@trampolinewll
000073A0                            		
000073A0 0C00 0040                  		cmp.b	#$40,d0		;> $40?
000073A4 6D00                       		blt.s	@notcoin
000073A6 0200 003F                  		and.b	#$3F,d0
000073AA 7801                       		moveq	#1,d4
000073AC 4A00                       		tst.b	d0
000073AE 6700                       		beq.s	@setcoin
000073B0 7805                       		moveq	#5,d4
000073B2                            @setcoin:
000073B2 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
000073B8 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
000073C0 6D00                         		blt.s	@dontadd1up2
000073C2 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
000073C8 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
000073D0                            @dontadd1up2:
000073D0                            
000073D0 6100 F8AE                  		bsr	Prize_Delete
000073D4 6100 DF4E                  		bsr	Level_HidePrize
000073D8                            ; 		move.l	d0,(RAM_LvlPlanes+lvl_przreq)
000073D8                            ; 		bset	#bitLvlHidePrz,(RAM_LvlPlanes+lvl_flags)
000073D8                            
000073D8 203C 0000 0000               		move.l	#SndSfx_COIN,d0
000073DE 7202                         		moveq 	#2,d1
000073E0 7401                         		moveq	#1,d2
000073E2 6100 A058                    		bsr	Audio_Track_play
000073E6 7800                       		moveq	#0,d4
000073E8                            		
000073E8                            @notcoin:
000073E8 4E75                       		rts
000073EA                            		
000073EA                            @trampolinewll:
000073EA 6100 F846                  		bsr	goToTrampolineWhy
000073EE                            
000073EE                            ; 		and.w	#$FFF8,obj_x(a6)
000073EE                            		
000073EE 203C FFF8 0000             		move.l	#-$80000,d0
000073F4                            ; 		btst	#bitobj_flipH,obj_status(a6)
000073F4                            ; 		bne.s	@lefty
000073F4                            ; 		tst.l	d6
000073F4                            ; 		bpl.s	@righy
000073F4                            ; @lefty:
000073F4                            ; 		neg.l	d0
000073F4                            ; @righy:
000073F4 2C00                       		move.l	d0,d6
000073F6 7800                       		moveq	#0,d4
000073F8 4E75                       		rts
000073FA                            		
000073FA                            ; ----------------------------------
000073FA                            
000073FA                            @wall_right:
000073FA                            ; 		btst	#bitobj_flipH,obj_status(a6)
000073FA                            ; 		bne.s	@return_w
000073FA 0C00 0002                    		cmp.b	#2,d0
000073FE 6C00                         		bge.s	@return_w
00007400 0C00 0001                   		cmp.b	#1,d0
00007404 6700                         		beq.s	@wallsolid_r
00007406 4E75                         		rts
00007408                              		
00007408                            @wall_left:
00007408                            ; 		btst	#bitobj_flipH,obj_status(a6)
00007408                            ; 		beq.s	@return_w
00007408 0C00 0002                    		cmp.b	#2,d0
0000740C 6C00                         		bge.s	@return_w
0000740E 0C00 0001                    		cmp.b	#1,d0
00007412 6700                         		beq.s	@wallsolid_l
00007414                            @return_w:
00007414 4E75                       		rts
00007416                            		
00007416                            ; ----------------------------------
00007416                            
00007416                            @wallsolid_r:
00007416 026E FFF8 0008             		and.w	#$FFF8,obj_x(a6)
0000741C                            		
0000741C 4286                       		clr.l	d6
0000741E 08EE 0002 0022             		bset	#bitcol_wall_r,obj_col(a6)
00007424 4E75                       		rts
00007426                            
00007426                            ; ----------------------------------
00007426                            
00007426                            @wallsolid_l:
00007426 066E 0004 0008             		add.w	#4,obj_x(a6)
0000742C 026E FFF8 0008             		and.w	#$FFF8,obj_x(a6)
00007432                            		
00007432                            ; 		moveq	#0,d4
00007432                            ; 		move.b	obj_size(a6),d4
00007432                            ; 		lsl.w	#3,d4
00007432                            ; 		move.w	obj_x(a6),d5
00007432                            ; 		sub.w	#1,d5
00007432                            ; 		sub.w	d4,d5
00007432                            ; 		tst.w	d5
00007432                            ; 		bpl.s	@noleftlvl
00007432                            ; 		
00007432                            ; 		moveq	#0,d0
00007432                            ; 		add.w	d4,d0
00007432                            ; 		move.w	d0,obj_x(a6)
00007432                            ; 		bra.s	@leftend
00007432                            ; @noleftlvl:
00007432                            ; 		move.l	d0,d2
00007432                            ; 		swap	d2
00007432                            ; 		and.w	#$FFF0,d2
00007432                            ; 		add.w	#$10,d2
00007432                            ; 		add.w	#8,d2
00007432                            ; 		move.w	d2,obj_x(a6)
00007432                            ; @leftend:
00007432 4286                       		clr.l	d6
00007434 08EE 0003 0022             		bset	#bitcol_wall_l,obj_col(a6)
0000743A 4E75                       		rts
0000743C                            
0000743C                            ; ----------------------------------
0000743C                            
0000743C                            @wallsolid_slope:
0000743C 082E 0000 001E                  		btst	#bitobj_flipH,obj_status(a6)
00007442 6600                       		bne.s	@wllflg_l
00007444 08EE 0002 0022             		bset	#bitcol_wall_r,obj_col(a6)
0000744A 4E75                       		rts
0000744C                            @wllflg_l:
0000744C 08EE 0003 0022             		bset	#bitcol_wall_l,obj_col(a6)
00007452 4E75                       		rts
00007454                             		
00007454                            ; ----------------------------------
00007454                            ; Event block: on wall
00007454                            ; ----------------------------------
00007454                            
00007454                            @center_special:
00007454 0800 0006                  		btst	#6,d0
00007458 6700                       		beq.s	@return
0000745A 6100 0000                  		bsr	plyrColEntry
0000745E 382C 0006                  		move.w	6(a4),d4
00007462 6000 0000                  		bra	plyrColGo
00007466                            		
00007466                            @left_special:
00007466 0800 0006                  		btst	#6,d0
0000746A 6700                       		beq.s	@return
0000746C 6100 0000                  		bsr	plyrColEntry
00007470 382C 0008                  		move.w	8(a4),d4
00007474 6000 0000                  		bra	plyrColGo
00007478                            		
00007478                            @right_special:
00007478 0800 0006                  		btst	#6,d0
0000747C 6700                       		beq.s	@return
0000747E 6100 0000                  		bsr	plyrColEntry
00007482 382C 000A                  		move.w	$A(a4),d4
00007486 6000 0000                  		bra	plyrColGo
0000748A                            		
0000748A                            @return:
0000748A 4E75                       		rts
0000748C                            		
0000748C                            ; ---------------------------------------------
0000748C                            ; EVENT BLOCKS ($80+)
0000748C                            ; ---------------------------------------------
0000748C                            
0000748C                            plyrColEntry:
0000748C 2800                       		move.l	d0,d4
0000748E 0244 003F                  		and.w	#$3F,d4
00007492 C8FC 0012                  		mulu.w	#$12,d4
00007496 49FA 0000                  		lea	plyEvnList(pc),a4
0000749A D8C4                       		adda	d4,a4
0000749C 4E75                       		rts
0000749E                            plyrColGo:
0000749E 0284 0000 FFFF             		and.l	#$FFFF,d4
000074A4 0684 0000 0000             		add.l	#plyEvnList,d4
000074AA 2844                       		movea.l	d4,a4
000074AC 4ED4                       		jmp	(a4)
000074AE                            	
000074AE                            ; ---------------------------------------------
000074AE                            ;   Floor Center |   Floor Left |   Floor Right
000074AE                            ;    Wall Center |    Wall Left |    Wall Right
000074AE                            ; Ceiling Center | Ceiling Left | Ceiling Right
000074AE                            ; 
000074AE                            ; d0 - Return collision (xpos|ypos|byte)
000074AE                            ; DO NOT USE d1 WHILE CHECKING SIDES
000074AE                            ; ---------------------------------------------
000074AE                            
000074AE                            plyEvnList:
000074AE                            	; $40 - Exit level (old)
000074AE 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
000074B4 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
000074BA 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
000074C0                            	; $41 - Ladder (climbing mode)
000074C0 0000 0000 0000             	dc.w @event41_flr-plyEvnList,@event41_flrsd-plyEvnList,@event41_flrsd-plyEvnList
000074C6 0000 0000 0000             	dc.w @event41_wll-plyEvnList,       @unused-plyEvnList,       @unused-plyEvnList
000074CC 0000 0000 0000             	dc.w      @unused-plyEvnList,       @unused-plyEvnList,       @unused-plyEvnList
000074D2                            	; $42 - Spikes (Up)
000074D2 0000 0000 0000             	dc.w @event42-plyEvnList,@event42-plyEvnList,@event42-plyEvnList
000074D8 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
000074DE 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
000074E4                            	;$83
000074E4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074EA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074F0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074F6                            	;$84
000074F6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000074FC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007502 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007508                            	;$85
00007508 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000750E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007514 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000751A                            	;$86
0000751A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007520 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007526 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000752C                            	;$87
0000752C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007532 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007538 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000753E                            	;$88
0000753E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007544 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000754A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007550                            	;$89
00007550 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007556 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000755C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007562                            	;$8A
00007562 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007568 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000756E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007574                            	;$8B
00007574 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000757A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007580 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007586                            	;$8C
00007586 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000758C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007592 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007598                            	;$8D
00007598 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000759E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000075A4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000075AA                            	;$8E
000075AA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000075B0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000075B6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000075BC                            	;$8F
000075BC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000075C2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000075C8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000075CE                            	
000075CE                            	;$90
000075CE 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
000075D4 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
000075DA 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
000075E0                            	;$91
000075E0 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
000075E6 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
000075EC 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
000075F2                            	;$92
000075F2 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
000075F8 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
000075FE 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
00007604                            	;$93
00007604 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
0000760A 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
00007610 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
00007616                            	;$94
00007616 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0000761C 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00007622 0000 0000 0000             	dc.w @event54_cei-plyEvnList,@event54_cei-plyEvnList,@event54_cei-plyEvnList
00007628                            	;$95
00007628 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
0000762E 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00007634 0000 0000 0000             	dc.w @event55_cei-plyEvnList,@event55_cei-plyEvnList,@event55_cei-plyEvnList
0000763A                            	;$96
0000763A 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00007640 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00007646 0000 0000 0000             	dc.w @event56_cei-plyEvnList,@event56_cei-plyEvnList,@event56_cei-plyEvnList
0000764C                            	;$97
0000764C 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00007652 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00007658 0000 0000 0000             	dc.w @event57_cei-plyEvnList,@event57_cei-plyEvnList,@event57_cei-plyEvnList
0000765E                            	;$98
0000765E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007664 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000766A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007670                            	;$99
00007670 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007676 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000767C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007682                            	;$9A
00007682 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007688 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000768E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007694                            	;$9B
00007694 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000769A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076A0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076A6                            	;$9C
000076A6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076AC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076B2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076B8                            	;$9D
000076B8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076BE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076C4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076CA                            	;$9E
000076CA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076D0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076D6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076DC                            	;$9F
000076DC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076E2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076E8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076EE                            
000076EE                            	;$A0
000076EE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076F4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000076FA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007700                            	;$A1
00007700 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007706 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000770C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007712                            	;$A2
00007712 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007718 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000771E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007724                            	;$A3
00007724 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000772A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007730 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007736                            	;$A4
00007736 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000773C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007742 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007748                            	;$A5
00007748 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000774E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007754 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000775A                            	;$A6
0000775A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007760 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007766 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000776C                            	;$A7
0000776C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007772 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007778 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000777E                            	;$A8
0000777E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007784 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000778A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007790                            	;$A9
00007790 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007796 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000779C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077A2                            	;$AA
000077A2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077A8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077AE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077B4                            	;$AB
000077B4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077BA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077C0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077C6                            	;$AC
000077C6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077CC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077D2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077D8                            	;$AD
000077D8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077DE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077E4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077EA                            	;$AE
000077EA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077F0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077F6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
000077FC                            	;$AF
000077FC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007802 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00007808 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
0000780E                            		
0000780E                            ; ----------------------------------
0000780E                            ; EVENT $80
0000780E                            ; ----------------------------------
0000780E                            
0000780E                            @event40:
0000780E 4200                       		clr.b	d0
00007810 4A39 FFFF DE4C             		tst.b	(RAM_ModeReset)
00007816 6600                       		bne.s	@already
00007818 0679 0001 FFFF DC06          		add.w	#1,(RAM_CurrLevel)
00007820 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
00007828                            @already:
00007828 4E75                       		rts
0000782A                            		
0000782A                            ; ----------------------------------
0000782A                            ; EVENT $41
0000782A                            ; ----------------------------------
0000782A                            
0000782A                            @event41_flr:
0000782A 4282                       		clr.l	d2
0000782C 6100 EC68                  		bsr	object_FindCol_Center
00007830 0C00 0041                  		cmp.b	#$41,d0
00007834 6700 0000                  		beq	@unused_flag
00007838 7401                       		moveq	#1,d2	
0000783A                            @notclimb:
0000783A                            
0000783A                            		
0000783A 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
00007842 6700 0000                  		beq	@unused_flag
00007846                            		
00007846 2400                       		move.l	d0,d2
00007848 6100 E7C2                  		bsr	object_FindCol_FloorSides
0000784C 0C00 0041                  		cmp.b	#$41,d0
00007850 6700                       		beq.s	@usethis
00007852 2001                       		move.l	d1,d0
00007854 0C00 0041                  		cmp.b	#$41,d0
00007858 6700                       		beq.s	@usethis
0000785A 2002                       		move.l	d2,d0
0000785C                            @usethis:
0000785C 4286                       		clr.l	d6
0000785E 4287                       		clr.l	d7
00007860 0280 FFF0 0000             		and.l	#$FFF00000,d0
00007866 0680 0008 0000             		add.l	#$80000,d0
0000786C 2D40 0008                  		move.l	d0,obj_x(a6)
00007870 08EE 0005 002D             		bset	#bitPlyrClimb,plyr_status(a6)
00007876 08AE 0000 0022             		bclr	#bitcol_floor,obj_col(a6)
0000787C 1D7C 0004 001A               		move.b	#4,obj_anim_id(a6)
00007882 1D7C 000C 0020              		move.b	#12,obj_frame(a6)		;FRAME 12
00007888 066E 0008 000C             		add.w	#8,obj_y(a6)
0000788E 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
00007894                            
00007894                            ; 		clr.l	d0
00007894 4E75                       		rts
00007896                             		
00007896                            ; --------------------
00007896                            
00007896                            @event41_flrsd:
00007896                            ; 		clr.l	d0
00007896                            ; 		rts
00007896                            		
00007896                            ; --------------------
00007896                            
00007896                            @event41_cei:
00007896 4280                       		clr.l	d0
00007898 4E75                       		rts
0000789A                            		
0000789A                            ; --------------------
0000789A                            
0000789A                            @event41_wll:
0000789A                            ;  		clr.l	d0
0000789A 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
000078A0 6700                       		beq.s	@notwaitclmb
000078A2 1D7C 00FF 001A              		move.b	#-1,obj_anim_id(a6)
000078A8 4286                       		clr.l	d6
000078AA 4287                       		clr.l	d7
000078AC                            @notwaitclmb:
000078AC                            ; 		move.l	d0,d2
000078AC 0839 0000 FFFF DE83         		btst	#bitJoyUp,(RAM_Control_1+OnHold)
000078B4 6700                        		beq.s	@dontclimb
000078B6 1D7C 0004 001A               		move.b	#4,obj_anim_id(a6)
000078BC 082E 0005 002D              		btst	#bitPlyrClimb,plyr_status(a6)
000078C2 6600                        		bne.s	@alrdup
000078C4                             		
000078C4 6100 EBD0                    		bsr	object_FindCol_Center
000078C8 0C00 0041                   		cmp.b	#$41,d0
000078CC 6700                        		beq.s	@canclimb
000078CE 6100 E592                     		bsr	object_FindCol_Floor
000078D2 0C00 0041                   		cmp.b	#$41,d0
000078D6 6600                        		bne.s	@dontclimb
000078D8                            @canclimb:
000078D8 0280 FFF0 0000              		and.l	#$FFF00000,d0
000078DE 0680 0008 0000               		add.l	#$80000,d0
000078E4 2D40 0008                   		move.l	d0,obj_x(a6)
000078E8                             		
000078E8                            @alrdup:
000078E8 04AE 0001 6000 000C         		sub.l	#$16000,obj_y(a6)
000078F0 4286                        		clr.l	d6
000078F2 4287                        		clr.l	d7
000078F4 08EE 0005 002D               		bset	#bitPlyrClimb,plyr_status(a6)
000078FA 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
00007900                             
00007900                            @dontclimb:
00007900 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
00007908 6700                       		beq.s	@dontclimbd
0000790A                            		
0000790A 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00007910 6600                       		bne.s	@alrddwn
00007912 6100 EB82                  		bsr	object_FindCol_Center
00007916 0C00 0041                  		cmp.b	#$41,d0
0000791A 6600                       		bne.s	@dontclimbd
0000791C 0280 FFF0 0000             		and.l	#$FFF00000,d0
00007922 0680 0008 0000              		add.l	#$80000,d0
00007928 2D40 0008                  		move.l	d0,obj_x(a6)
0000792C                            @alrddwn:
0000792C 06AE 0001 6000 000C        		add.l	#$16000,obj_y(a6)
00007934 4286                       		clr.l	d6
00007936 4287                       		clr.l	d7
00007938 08EE 0005 002D              		bset	#bitPlyrClimb,plyr_status(a6)
0000793E 1D7C 0004 001A              		move.b	#4,obj_anim_id(a6)
00007944 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
0000794A                            @dontclimbd:
0000794A                            
0000794A 4280                       		clr.l	d0
0000794C 4E75                       		rts
0000794E                            
0000794E                            ; --------------------
0000794E                            
0000794E                            @unused_flag:
0000794E 1002                        		move.b	d2,d0
00007950 4E75                        		rts
00007952                            
00007952                            ; ----------------------------------
00007952                            ; EVENT $82
00007952                            ; ----------------------------------
00007952                            
00007952                            @event42:
00007952 08EE 0003 001E             		bset	#bitobj_hurt,obj_status(a6)
00007958                            		
00007958 103C 0001                  		move.b	#1,d0
0000795C 4E75                       		rts
0000795E                            		
0000795E                            ; ----------------------------------
0000795E                            ; EVENT $90
0000795E                            ;
0000795E                            ; CHECKS COLOR
0000795E                            ; ----------------------------------
0000795E                            
0000795E                            @event50_check:
0000795E 0C79 000E FFFF E8F6        		cmp.w	#$00E,(RAM_Palette+$26)
00007966 6700 0000                  		beq	@event_solid
0000796A 6000 0000                  		bra	@unused
0000796E                            
0000796E                            ; ----------------------------------
0000796E                            ; EVENT $91
0000796E                            ;
0000796E                            ; CHECKS COLOR
0000796E                            ; ----------------------------------
0000796E                            
0000796E                            @event51_check:
0000796E 0C79 0E00 FFFF E8FC        		cmp.w	#$E00,(RAM_Palette+$2C)
00007976 6700 0000                  		beq	@event_solid
0000797A 6000 0000                  		bra	@unused
0000797E                            		
0000797E                            ; ----------------------------------
0000797E                            ; EVENT $92
0000797E                            ;
0000797E                            ; CHECKS COLOR
0000797E                            ; ----------------------------------
0000797E                            
0000797E                            @event52_check:
0000797E 0C79 00E0 FFFF E902        		cmp.w	#$0E0,(RAM_Palette+$32)
00007986 6700 0000                  		beq	@event_solid
0000798A 6000 0000                  		bra	@unused
0000798E                            
0000798E                            ; ----------------------------------
0000798E                            ; EVENT $93
0000798E                            ;
0000798E                            ; CHECKS COLOR
0000798E                            ; ----------------------------------
0000798E                            
0000798E                            @event53_check:
0000798E 0C79 00EE FFFF E908        		cmp.w	#$0EE,(RAM_Palette+$38)
00007996 6700 0000                  		beq	@event_solid
0000799A 6000 0000                  		bra	@unused
0000799E                            		
0000799E                            ; ----------------------------------
0000799E                            ; EVENT $94
0000799E                            ; 
0000799E                            ; CHECKS COLOR
0000799E                            ; ----------------------------------
0000799E                            
0000799E                            @event54_cei:
0000799E 243C 0323 1102             		move.l	#$03231102,d2
000079A4 0C79 000E FFFF E8F6        		cmp.w	#$00E,(RAM_Palette+$26)
000079AC 6600                       		bne.s	@fade_this
000079AE 243C 0423 1102             		move.l	#$04231102,d2
000079B4                            @fade_this:
000079B4 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
000079BA 6600                       		bne.s	@busy_pal
000079BC 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
000079C2                            @busy_pal:
000079C2 103C 0001                  		move.b	#1,d0
000079C6 4E75                       		rts
000079C8                            
000079C8                            ; ----------------------------------
000079C8                            ; EVENT $95
000079C8                            ; 
000079C8                            ; CHECKS COLOR
000079C8                            ; ----------------------------------
000079C8                            
000079C8                            @event55_cei:
000079C8 243C 0383 1402             		move.l	#$03831402,d2
000079CE 0C79 0E00 FFFF E8FC        		cmp.w	#$E00,(RAM_Palette+$2C)
000079D6 6600                       		bne.s	@fade_this_b
000079D8 243C 0483 1402             		move.l	#$04831402,d2
000079DE                            @fade_this_b:
000079DE 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
000079E4 6600                       		bne.s	@busy_pal_b
000079E6 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
000079EC                            @busy_pal_b:
000079EC 103C 0001                  		move.b	#1,d0
000079F0 4E75                       		rts
000079F2                            	
000079F2                            ; ----------------------------------
000079F2                            ; EVENT $96
000079F2                            ; 
000079F2                            ; CHECKS COLOR
000079F2                            ; ----------------------------------
000079F2                            
000079F2                            @event56_cei:
000079F2 243C 0343 1702             		move.l	#$03431702,d2
000079F8 0C79 00E0 FFFF E902        		cmp.w	#$0E0,(RAM_Palette+$32)
00007A00 6600                       		bne.s	@fade_this_g
00007A02 243C 0443 1702             		move.l	#$04431702,d2
00007A08                            @fade_this_g:
00007A08 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00007A0E 6600                       		bne.s	@busy_pal_g
00007A10 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
00007A16                            @busy_pal_g:
00007A16 103C 0001                  		move.b	#1,d0
00007A1A 4E75                       		rts
00007A1C                            
00007A1C                            ; ----------------------------------
00007A1C                            ; EVENT $97
00007A1C                            ; 
00007A1C                            ; CHECKS COLOR
00007A1C                            ; ----------------------------------
00007A1C                            
00007A1C                            @event57_cei:
00007A1C 243C 0363 1A02             		move.l	#$03631A02,d2
00007A22 0C79 00EE FFFF E908        		cmp.w	#$0EE,(RAM_Palette+$38)
00007A2A 6600                       		bne.s	@fade_this_y
00007A2C 243C 0463 1A02             		move.l	#$04631A02,d2
00007A32                            @fade_this_y:
00007A32 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00007A38 6600                       		bne.s	@busy_pal_y
00007A3A 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
00007A40                            @busy_pal_y:
00007A40 103C 0001                  		move.b	#1,d0
00007A44 4E75                       		rts
00007A46                            		
00007A46                            ; ----------------------------------
00007A46                            ; Full solid
00007A46                            ; ----------------------------------
00007A46                            
00007A46                            @event_solid:
00007A46 103C 0001                  		move.b	#1,d0
00007A4A 4E75                       		rts
00007A4C                            		
00007A4C                            ; ----------------------------------
00007A4C                            ; Return
00007A4C                            ; ----------------------------------
00007A4C                            
00007A4C                            @unused:
00007A4C 4280                       		clr.l	d0
00007A4E 4E75                       		rts
00007A50                            		
00007A50                            ; ---------------------------------------------
00007A50                            ; Move level camera
00007A50                            ; ---------------------------------------------
00007A50                            
00007A50                            Plyr_LvlCamera:
00007A50 4BF9 FFFF BC00              		lea	(RAM_LvlPlanes),a5
00007A56                             		
00007A56                            ; 		move.b	lvl_settings(a5),d0
00007A56                            ; 		and.w	#$F,d0
00007A56                            ; 		add.w	d0,d0
00007A56                            ; 		move.w	@ScrollTypes(pc,d0.w),d1
00007A56                            ; 		jmp	@ScrollTypes(pc,d1.w)
00007A56                            ; 		
00007A56                            ; ; -----------------------------------
00007A56                            ; 
00007A56                            ; @ScrollTypes:
00007A56                            ; 		dc.w @Scrl_Normal-@ScrollTypes
00007A56                            ; 		dc.w @Scrl_Section-@Scrolltypes
00007A56                            ; 		dc.w 0
00007A56                            ; 		dc.w 0
00007A56                            ; 		dc.w 0
00007A56                            ; 		dc.w 0
00007A56                            ; 		dc.w 0
00007A56                            ; 		dc.w 0
00007A56                            ; 		dc.w 0
00007A56                            	
00007A56                            ; -----------------------------------
00007A56                            ; Default scroll
00007A56                            ; 
00007A56                            ; Autochecks the level size
00007A56                            ; -----------------------------------
00007A56                            
00007A56                            @Scrl_Normal:
00007A56 7400                       		moveq	#0,d2
00007A58 7600                       		moveq	#0,d3
00007A5A                            		
00007A5A 383C 0140                  		move.w	#320,d4
00007A5E 1039 FFFF ED1C             		move.b	(RAM_VidRegs+$C),d0
00007A64 0240 0081                  		and.w	#%10000001,d0
00007A68 6600                       		bne.s	@normal_hor
00007A6A 383C 0100                  		move.w	#256,d4
00007A6E                            @normal_hor:
00007A6E 3004                       		move.w	d4,d0
00007A70 E848                       		lsr.w	#4,d0
00007A72 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00007A76 B240                       		cmp.w	d0,d1
00007A78 6F00                       		ble.s	@DontScrollHor
00007A7A                            		
00007A7A 302E 0008                  		move.w	obj_x(a6),d0
00007A7E 7A00                       		moveq	#0,d5
00007A80 3204                       		move.w	d4,d1
00007A82 E249                       		lsr.w	#1,d1
00007A84 9041                       		sub.w	d1,d0
00007A86 6B00                       		bmi.s	@Wait_X
00007A88 3A00                       		move.w	d0,d5
00007A8A                            		
00007A8A 322D 001C                   		move.w	lvl_x(a5),d1
00007A8E B245                        		cmp.w	d5,d1
00007A90 6700                        		beq.s	@Wait_X		
00007A92 7000                        		moveq	#bitLvlDirR,d0
00007A94 BA41                         		cmp.w	d1,d5
00007A96 6E00                         		bgt.s	@RightDir
00007A98 7001                         		moveq	#bitLvlDirL,d0	
00007A9A                            @RightDir:
00007A9A 01ED 003A                    		bset	d0,lvl_flags(a5)
00007A9E                             		
00007A9E                            @Wait_X:
00007A9E 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00007AA2 3004                       		move.w	d4,d0
00007AA4 E848                       		lsr.w	#4,d0
00007AA6 9240                       		sub.w	d0,d1
00007AA8 3005                       		move.w	d5,d0
00007AAA 0440 0001                  		sub.w	#1,d0
00007AAE E949                       		lsl.w	#4,d1
00007AB0 B041                       		cmp.w	d1,d0
00007AB2 6D00                       		blt.s	@NotEnd_X
00007AB4 3A01                       		move.w	d1,d5
00007AB6                            @NotEnd_X:
00007AB6 3005                       		move.w	d5,d0
00007AB8 E848                       		lsr.w	#4,d0
00007ABA 3B45 001C                  		move.w	d5,lvl_x(a5)
00007ABE                            
00007ABE                            @DontScrollHor:
00007ABE                            
00007ABE                            ; ------------------------
00007ABE                            ; Update Vertical
00007ABE                            ; scrolling
00007ABE                            ; ------------------------
00007ABE                            
00007ABE 0C6D 000E 0036              		cmp.w	#(224/16),lvl_maxcam_y(a5)
00007AC4 6F00 0000                   		ble	@single_Y
00007AC8                             		
00007AC8 3A2D 0020                    		move.w	lvl_y(a5),d5
00007ACC 382E 000C                    		move.w	obj_y(a6),d4
00007AD0 986D 0020                    		sub.w	lvl_y(a5),d4
00007AD4                              		
00007AD4 0C44 0068                    		cmp.w	#(224/2)-8,d4
00007AD8 6D00                         		blt.s	@Do_Up
00007ADA 0C44 007E                    		cmp.w	#(224/2)+14,d4
00007ADE 6F00                         		ble.s	@Set_Y
00007AE0                              		
00007AE0 302E 000C                  		move.w	obj_y(a6),d0
00007AE4 0440 007E                  		sub.w	#(224/2)+14,d0
00007AE8 3A00                       		move.w	d0,d5
00007AEA 08ED 0002 003A                   		bset	#bitLvlDirD,lvl_flags(a5)
00007AF0 6000                             		bra.s	@Set_Y
00007AF2                                  		
00007AF2                            @Do_Up:
00007AF2 302E 000C                  		move.w	obj_y(a6),d0
00007AF6 0440 0068                  		sub.w	#(224/2)-8,d0
00007AFA 3A00                       		move.w	d0,d5
00007AFC 08ED 0003 003A                   		bset	#bitLvlDirU,lvl_flags(a5)
00007B02                                  		
00007B02 6000                       		bra.s	@Set_Y
00007B04                            		
00007B04                            @old_yscrl:
00007B04 3A2E 000C                    		move.w	obj_y(a6),d5			; Old
00007B08 383C 0080                   		move.w	#(224/2)+$10,d4
00007B0C 9A44                        		sub.w	d4,d5
00007B0E 08ED 0002 003A                  		bset	#bitLvlDirD,lvl_flags(a5)
00007B14 08ED 0003 003A                  		bset	#bitLvlDirU,lvl_flags(a5)
00007B1A                                 		
00007B1A                            ;  		sub.w	#((224/2)+$10),d5
00007B1A                            ;  		move.w	obj_y(a6),d0			; New
00007B1A                            ;  		sub.w	#((224/2)+$20),d0
00007B1A                            ;  		add.w	lvl_y(a5),d0
00007B1A                            ;  		asr.w	#3,d0
00007B1A                            ;  		add.w	d0,d0
00007B1A                            ;  		move.w	d0,d5
00007B1A                             		
00007B1A                            ;  		moveq	#bitLvlDirD,d2
00007B1A                            ;    		cmp.w	d5,d1
00007B1A                            ;    		bgt.s	@drwydown
00007B1A                            ;    		bset	#bitLvlDirU,d2
00007B1A                            ; @drwydown:
00007B1A                            
00007B1A                            ;     		bset	#bitLvlDirD,lvl_flags(a5)
00007B1A                            ;     		bset	#bitLvlDirU,lvl_flags(a5)
00007B1A                               		
00007B1A                            ; --------------------------------
00007B1A                             	
00007B1A                            @Set_Y:
00007B1A 4A45                        		tst.w	d5
00007B1C 6A00                        		bpl.s	@onyplus
00007B1E 4245                        		clr.w	d5
00007B20                            @onyplus:
00007B20 7200                       		moveq	#0,d1
00007B22 322D 0036                    		move.w	lvl_maxcam_y(a5),d1
00007B26 0441 000E                    		sub.w	#(224/16),d1
00007B2A E949                         		lsl.w	#4,d1
00007B2C                            ;   		swap	d1
00007B2C BA41                         		cmp.w	d1,d5
00007B2E 6D00                         		blt.s	@notbotmd
00007B30 3A01                         		move.w	d1,d5
00007B32                            @notbotmd:
00007B32 3B45 0020                  		move.w	d5,lvl_y(a5)
00007B36                            		
00007B36                            @single_Y:
00007B36 4E75                       		rts
00007B38                            ; 		
00007B38                            ; ; -----------------------------------
00007B38                            ; ; Dungeon Scroll
00007B38                            ; ; -----------------------------------
00007B38                            ; 
00007B38                            ; @Scrl_Section:
00007B38                            ; 		btst	#bitobj_flipH,obj_status(a6)
00007B38                            ; 		bne.s	@LeftCheck
00007B38                            ; 		
00007B38                            ; ; RIGHT
00007B38                            ; 
00007B38                            ;  		btst	#0,plyr_status(a6)
00007B38                            ;  		bne.s	@MoveRight
00007B38                            ;  		
00007B38                            ; 		move.w	obj_x(a6),d1
00007B38                            ; 		move.w	#320,d0
00007B38                            ; 		move.w	d0,d2
00007B38                            ; 		add.w	lvl_x(a5),d2
00007B38                            ; 		move.w	d2,plyr_lvltrgt(a6)
00007B38                            ; 		add.w	#8,d0
00007B38                            ;  		add.w	lvl_x(a5),d0
00007B38                            ;  		cmp.w	d0,d1
00007B38                            ; 		blt.s	@UpDownChk
00007B38                            ;  		
00007B38                            ;  		bset	#0,plyr_status(a6)
00007B38                            ;  		clr.l	obj_x_spd(a6)
00007B38                            ;  		clr.l	obj_y_spd(a6)
00007B38                            ; 
00007B38                            ; @MoveRight:
00007B38                            ;   		move.w	lvl_x(a5),d1
00007B38                            ;  		lea	(RAM_ScrlHor),a4
00007B38                            ;  		move.w	#224-1,d3
00007B38                            ; @doline2:
00007B38                            ;  		move.w	d1,d0
00007B38                            ;  		neg.w	d0
00007B38                            ;  		move.w	d0,(a4)+
00007B38                            ;  		asr.w	#4,d0
00007B38                            ;  		move.w	d0,(a4)+
00007B38                            ;  		dbf	d3,@doline2
00007B38                            ;  		
00007B38                            ;   		move.w	plyr_lvltrgt(a6),d0
00007B38                            ;   		move.w	lvl_x(a5),d1
00007B38                            ;   		cmp.w 	d0,d1
00007B38                            ;   		bcs.s	@KeepScrlR
00007B38                            ;  		bclr	#0,plyr_status(a6)
00007B38                            ;   		move.w	d1,lvl_x(a5)
00007B38                            ; 		rts
00007B38                            ; @KeepScrlR:
00007B38                            ;  		add.w	#4,lvl_x(a5)
00007B38                            ;       		bset	#bitLvlDirR,lvl_flags(a5)
00007B38                            ;        		rts
00007B38                            ; 		
00007B38                            ; @LeftCheck:
00007B38                            ;        		
00007B38                            ; 		
00007B38                            ; @UpDownChk:
00007B38                            ;  		bclr	#0,plyr_status(a6)
00007B38                            ; 		rts
00007B38                            		
00007B38                            ; =================================================================
00007B38                            ; 
00007B38                            Plyr_SetStartPos:
00007B38 4DF9 FFFF C040               		lea	(RAM_ObjBuffer),a6
00007B3E 4BF9 FFFF BC00              		lea	(RAM_LvlPlanes),a5
00007B44                             		
00007B44 3D40 000C                   		move.w	d0,obj_y(a6)
00007B48 4840                        		swap	d0
00007B4A 3D40 0008                   		move.w	d0,obj_x(a6)
00007B4E                             		
00007B4E                            ; ----------------------------------------
00007B4E                             
00007B4E 383C 0140                  		move.w	#320,d4
00007B52                            ; 		btst	#bit_hortype,lvl_prio(a5)
00007B52                            ; 		beq.s	@normal_hor
00007B52                            ; 		move.w	#256,d4
00007B52                            ; @normal_hor:
00007B52 3004                       		move.w	d4,d0
00007B54 E848                       		lsr.w	#4,d0
00007B56 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00007B5A B240                       		cmp.w	d0,d1
00007B5C 6F00                       		ble.s	@DontScrollHor
00007B5E                            		
00007B5E 362E 0008                  		move.w	obj_x(a6),d3
00007B62 7400                       		moveq	#0,d2
00007B64 3204                       		move.w	d4,d1
00007B66 E249                       		lsr.w	#1,d1
00007B68 9641                       		sub.w	d1,d3
00007B6A 6B00                       		bmi.s	@Wait_X
00007B6C 3403                       		move.w	d3,d2
00007B6E                            @Wait_X:
00007B6E 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00007B72 3004                       		move.w	d4,d0
00007B74 E848                       		lsr.w	#4,d0
00007B76 9240                       		sub.w	d0,d1
00007B78 3002                       		move.w	d2,d0
00007B7A 0440 0001                  		sub.w	#1,d0
00007B7E E949                       		lsl.w	#4,d1
00007B80 B041                       		cmp.w	d1,d0
00007B82 6D00                       		blt.s	@NotEnd_X
00007B84 3401                       		move.w	d1,d2
00007B86                            @NotEnd_X:
00007B86 3002                       		move.w	d2,d0
00007B88 E848                       		lsr.w	#4,d0
00007B8A 3B42 001C                  		move.w	d2,lvl_x(a5)
00007B8E                            
00007B8E                            @DontScrollHor:
00007B8E                            
00007B8E                            ; ----------------------------------------
00007B8E                            
00007B8E 426D 0020                  		clr.w	lvl_y(a5)
00007B92 0C6D 000E 0036              		cmp.w	#(224/16),lvl_maxcam_y(a5)
00007B98 6F00                        		ble.s	@Return
00007B9A 362E 000C                  		move.w	obj_y(a6),d3
00007B9E 7400                       		moveq	#0,d2
00007BA0 0443 0084                  		sub.w	#((224/2)+$14),d3	;aprox
00007BA4 6B00                       		bmi.s	@Wait_Y
00007BA6 3403                       		move.w	d3,d2
00007BA8                            @Wait_Y:
00007BA8 322D 0036                   		move.w	lvl_maxcam_y(a5),d1
00007BAC 0441 000E                   		sub.w	#(224/16),d1
00007BB0 3002                        		move.w	d2,d0
00007BB2 0440 0001                   		sub.w	#1,d0
00007BB6 E949                        		lsl.w	#4,d1
00007BB8 B041                        		cmp.w	d1,d0
00007BBA 6D00                        		blt.s	@NotEnd_Y
00007BBC 3401                        		move.w	d1,d2
00007BBE                            @NotEnd_Y:
00007BBE 3B42 0020                  		move.w	d2,lvl_y(a5)
00007BC2                             		
00007BC2                            @Return:
00007BC2 4E75                        		rts
00007BC4                            
00007BC4                            ; =================================================================
00007BC4                            ; ------------------------------------------------
00007BC4                            ; EXTERNAL Routines for the player
00007BC4                            ; ------------------------------------------------
00007BC4                            
00007BC4                            ; TODO
00007BC4                            
00007BC4                            ; =================================================================
00007BC4                            ; ------------------------------------------------
00007BC4                            ; Data
00007BC4                            ; ------------------------------------------------
00007BC4                            		
00007BC4                            Ani_Player:
00007BC4 0000                       		dc.w @Idle-Ani_Player		;$00
00007BC6 0000                       		dc.w @Walk-Ani_Player
00007BC8 0000                       		dc.w @Jump_1-Ani_Player
00007BCA 0000                        		dc.w @Jump_2-Ani_Player
00007BCC 0000                        		dc.w @ClimbMove-Ani_Player	;$04
00007BCE 0000                        		dc.w @Die-Ani_Player
00007BD0                            		even
00007BD0                            @Idle:
00007BD0 06                          		dc.b 6
00007BD1 0000 0000 0000 0000 0000+   		dc.b 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
00007BED FF                         		dc.b -1
00007BEE                            		even
00007BEE                            @Jump_1:	
00007BEE 04                          		dc.b 4
00007BEF 0A                          		dc.b $A
00007BF0 FF                         		dc.b -1
00007BF2 00                         		even
00007BF2                            @Jump_2:	
00007BF2 04                          		dc.b 4
00007BF3 0B                           		dc.b $B
00007BF4 FF                          		dc.b -1
00007BF6 00                          		even
00007BF6                            @Walk:
00007BF6 03                          		dc.b 3
00007BF7 0203 0405 0607 0809         		dc.b 2,3,4,5,6,7,8,9
00007BFF FF                         		dc.b -1
00007C00                            		even
00007C00                            @ClimbMove:
00007C00 04                         		dc.b 4
00007C01 0C0D 0E0F 0E0D             		dc.b 12,13,14,15,14,13
00007C07 FF                         		dc.b -1
00007C08                            		even	
00007C08                            @Die:
00007C08 04                         		dc.b 4
00007C09 10                         		dc.b 16
00007C0A FF                         		dc.b -1
00007C0C 00                         		even
00007C0C 00                         		even
00007C0C                               		include	"engine/modes/level/data/objects/dadou/code.asm"
00007C0C                            ; =================================================================
00007C0C                            ; Object
00007C0C                            ; 
00007C0C                            ; Dadou
00007C0C                            ; =================================================================
00007C0C                            
00007C0C                            ; =================================================================
00007C0C                            ; ------------------------------------------------
00007C0C                            ; Variables
00007C0C                            ; ------------------------------------------------
00007C0C                            
00007C0C =00006420                  varVramDadou	equ	$6000|$420
00007C0C                            
00007C0C                            ; =================================================================
00007C0C                            ; ------------------------------------------------
00007C0C                            ; RAM
00007C0C                            ; ------------------------------------------------
00007C0C                            
00007C0C                            		rsset Obj_Ram
00007C0C =00000024                  timer_1		rs.w 1
00007C0C                            
00007C0C                            ; =================================================================
00007C0C                            ; ------------------------------------------------
00007C0C                            ; Code start
00007C0C                            ; ------------------------------------------------
00007C0C                            
00007C0C                            Obj_Dadou:
00007C0C 7000                        		moveq	#0,d0
00007C0E 102E 001D                   		move.b	obj_index(a6),d0
00007C12 D040                        		add.w	d0,d0
00007C14 323B 0000                   		move.w	@Index(pc,d0.w),d1
00007C18 4EBB 1000                   		jsr	@Index(pc,d1.w)
00007C1C                             		
00007C1C 6100 E0BA                   		bsr	Object_OffCheck
00007C20 203C 6420 0000                		move.l	#(varVramDadou<<16),d0
00007C26 223C 0000 0000              		move.l	#ani_dadou,d1
00007C2C 6100 E116                  		bsr	Object_Animate
00007C30                            		
00007C30 203C 6420 0000                 		move.l	#(varVramDadou<<16),d0
00007C36 102E 0020                   		move.b	obj_frame(a6),d0
00007C3A 223C 0000 0000             		move.l	#map_dadou,d1
00007C40 6000 DD58                   		bra	Object_Show
00007C44                             		
00007C44                            ; ------------------------------------------------
00007C44                            
00007C44                            @Index:
00007C44 0000                       		dc.w @Init-@Index
00007C46 0000                       		dc.w @Stand-@Index
00007C48 0000                       		dc.w @Walk-@Index
00007C4A                            		even
00007C4A                            		
00007C4A                            ; =================================================================
00007C4A                            ; ------------------------------------------------
00007C4A                            ; Index $00: Init
00007C4A                            ; ------------------------------------------------
00007C4A                            
00007C4A                            @Init:
00007C4A 2D7C 0101 0102 0004        		move.l	#$01010102,obj_size(a6)
00007C52 2D7C 0000 8000 0014        		move.l	#$8000,obj_y_spd(a6)
00007C5A                            		
00007C5A 3D7C 00C0 0024             		move.w	#$C0,timer_1(a6)
00007C60 6100 0000                  		bsr	@Go_Stand
00007C64                            		
00007C64                            ; =================================================================
00007C64                            ; ------------------------------------------------                  
00007C64                            ; Index $01: Stand
00007C64                            ; ------------------------------------------------
00007C64                            
00007C64                            @Stand:
00007C64                            ; 		sub.w	#1,timer_1(a6)
00007C64                            ; 		bpl.s	@Pyhsics
00007C64                            ; 
00007C64                            ; 		move.w	#$C0,timer_1(a6)
00007C64 6000 0000                  		bra	@Go_Walk
00007C68                            		
00007C68                            ; =================================================================
00007C68                            ; ------------------------------------------------                  
00007C68                            ; Index $01: Walk
00007C68                            ; ------------------------------------------------
00007C68                            
00007C68                            @Walk:
00007C68                            ; 		sub.w	#1,timer_1(a6)
00007C68                            ; 		bpl.s	@Pyhsics
00007C68                            ; 		
00007C68                            ; 		move.w	#$C0,timer_1(a6)
00007C68                            ; 		bchg	#bitobj_flipH,obj_status(a6)
00007C68                            ; 		bra	@Go_Stand
00007C68                            		
00007C68 6000 0000                  		bra	@Pyhsics
00007C6C                            		
00007C6C                            ; =================================================================
00007C6C                            ; ------------------------------------------------
00007C6C                            ; Subs
00007C6C                            ; ------------------------------------------------
00007C6C                            
00007C6C                            @Go_Stand:
00007C6C 42AE 0010                  		clr.l	obj_x_spd(a6)
00007C70 422E 001A                  		clr.b	obj_anim_id(a6)
00007C74 1D7C 0001 001D             		move.b	#1,obj_index(a6)
00007C7A 4E75                       		rts
00007C7C                            	
00007C7C                            ; --------------------------------------
00007C7C                            
00007C7C                            @Go_Walk:
00007C7C 2D7C 0000 4000 0010        		move.l	#$4000,obj_x_spd(a6)
00007C84 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00007C8A 6600                       		bne.s	@right
00007C8C 2D7C FFFF C000 0010        		move.l	#-$4000,obj_x_spd(a6)
00007C94                            @right:
00007C94 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
00007C9A 1D7C 0002 001D             		move.b	#2,obj_index(a6)
00007CA0 4E75                       		rts
00007CA2                            	
00007CA2                            ; ------------------------------------------------
00007CA2                            ; Pyhsics
00007CA2                            ; ------------------------------------------------
00007CA2                            
00007CA2                            @Pyhsics:
00007CA2 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00007CA8 2C2E 0010                   		move.l	obj_x_spd(a6),d6
00007CAC 2E2E 0014                   		move.l	obj_y_spd(a6),d7
00007CB0                             		
00007CB0 DDAE 0008                   		add.l	d6,obj_x(a6)
00007CB4 6100 0000                   		bsr	@WallCheck
00007CB8                            		
00007CB8                            ; ----------------------------------
00007CB8                            
00007CB8 0687 0000 8000               		add.l	#$8000,d7
00007CBE 0C87 0004 0000               		cmp.l	#$40000,d7
00007CC4 6D00                         		blt.s	@low_y
00007CC6 2E3C 0004 0000               		move.l	#$40000,d7
00007CCC                            @low_y:
00007CCC DFAE 000C                    		add.l	d7,obj_y(a6)
00007CD0                              		
00007CD0                            ; 		lea	(RAM_LvlPlanes),a5
00007CD0                            ; 		move.w	lvl_size_y(a5),d0
00007CD0                            ; 		lsl.w	#4,d0
00007CD0                            ; 		move.w	obj_y(a6),d1
00007CD0                            ; 		moveq	#0,d2
00007CD0                            ; 		move.b	obj_size+2(a6),d2
00007CD0                            ; 		lsl.w	#3,d2
00007CD0                            ; 		sub.w	d2,d1
00007CD0                            ; 		cmp.w	d0,d1
00007CD0                            ; 		bge	@delete
00007CD0                            ; 		
00007CD0 4A87                         		tst.l	d7
00007CD2 6B00                         		bmi.s	@no_floor
00007CD4                              
00007CD4 6100 E180                  		bsr	object_FindPrz_Floor
00007CD8 2400                       		move.l	d0,d2
00007CDA 4A00                       		tst.b	d0
00007CDC 6600                       		bne.s	@from_prize
00007CDE 6100 E320                   		bsr 	object_FindPrz_FloorSides
00007CE2 4A00                       		tst.b	d0
00007CE4 6600 0000                  		bne	@from_prize;@swap_dir_wl
00007CE8 2001                       		move.l	d1,d0
00007CEA 4A00                       		tst.b	d0
00007CEC 6600 0000                  		bne	@from_prize
00007CF0                            		
00007CF0 6100 E170                  		bsr	object_FindCol_Floor
00007CF4 2400                       		move.l	d0,d2
00007CF6 4A00                       		tst.b	d0
00007CF8 6600                       		bne.s	@set_floor
00007CFA 6100 E310                   		bsr 	object_FindCol_FloorSides
00007CFE 4A00                       		tst.b	d0
00007D00 6600 0000                  		bne	@set_floor;@swap_dir_wl
00007D04 2001                       		move.l	d1,d0
00007D06 4A00                       		tst.b	d0
00007D08 6700 0000                  		beq	@no_floor
00007D0C                            		
00007D0C 6000                       		bra.s	@set_floor
00007D0E                            ; @swap_dir_wl:
00007D0E                            ; 		neg.l	d6
00007D0E                            ; 		bchg	#bitobj_flipH,obj_status(a6)
00007D0E                            ; 		bra.s	@no_floor
00007D0E                            
00007D0E                            @from_prize:
00007D0E 0C00 0040                  		cmp.b	#$40,d0
00007D12 6C00                       		bge.s	@set_floor
00007D14 103C 0001                  		move.b	#1,d0
00007D18                            		
00007D18                            @set_floor:
00007D18 6100 E7DE                    		bsr 	object_SetCol_Floor
00007D1C                              		
00007D1C                            @no_floor:
00007D1C                            
00007D1C 2D46 0010                   		move.l	d6,obj_x_spd(a6)
00007D20 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00007D24                             		
00007D24                            ; ----------------------------------
00007D24                            ; Check if touched
00007D24                            ; ----------------------------------
00007D24                            
00007D24                            @check_touch:
00007D24 6100 E896                  		bsr	objTouch_Top
00007D28 4A00                       		tst.b	d0
00007D2A 6600                       		bne.s	@touch_flag
00007D2C 6100 E92C                  		bsr	objTouch_Bottom
00007D30 4A00                       		tst.b	d0
00007D32 6600                       		bne.s	@touch_flag
00007D34                            		
00007D34 6100 E9C4                  		bsr	objTouch_Sides
00007D38 4A00                       		tst.b	d0
00007D3A 6600                       		bne.s	@touch_flag
00007D3C 4840                       		swap	d0
00007D3E 4A00                       		tst.b	d0
00007D40 6600                       		bne.s	@touch_flag
00007D42 4E75                       		rts
00007D44                            		
00007D44                            ; -----------------------------------
00007D44                            
00007D44                            @touch_flag:
00007D44 6100 EB98                  		bsr	objPlyrHurtKill
00007D48 6700                       		beq.s	@return
00007D4A 323C 6420                     		move.w	#varVramDadou,d1
00007D4E 142E 0020                   		move.b	obj_frame(a6),d2
00007D52 203C 0000 0000             		move.l	#map_dadou,d0
00007D58 260C                       		move.l	a4,d3
00007D5A 6100 EF2A                  		bsr	objAction_SetStomp
00007D5E 6000 DF58                  		bra	Object_IsGone
00007D62                            @return:
00007D62 4E75                       		rts
00007D64                            		
00007D64                            ; =================================================================
00007D64                            
00007D64                            @WallCheck:
00007D64 6100 E15E                     		bsr	object_FindPrz_Wall
00007D68 4A00                          		tst.b	d0
00007D6A 6600                          		bne.s	@foundprzwl
00007D6C 6100 E162                    		bsr	object_FindCol_Wall
00007D70 4A00                         		tst.b	d0
00007D72 6700                         		beq.s	@chk_right
00007D74                            @foundprzwl:
00007D74 0800 0006                    		btst	#6,d0
00007D78 6600                         		bne.s	@chk_right
00007D7A                            ;    		cmp.b	#2,d0
00007D7A                            ;    		blt.s	@chk_right
00007D7A 6100 E824                    		bsr	object_SetCol_Wall
00007D7E                            ;    		bra.s	@endchk
00007D7E                            @chk_right:
00007D7E                            
00007D7E                            		;TODO: Prize check
00007D7E                            ;   		bsr	object_FindPrz_WallSides
00007D7E                            ;   		tst.b	d0
00007D7E                            ;   		bne.s	@przrotx
00007D7E                            ;   		move.l	d1,d0
00007D7E                            ;   		tst.b	d0
00007D7E                            ;   		bne.s	@przrotx
00007D7E                            
00007D7E 6100 E3A0                    		bsr	object_FindCol_WallSides
00007D82 0800 0006                    		btst	#6,d0
00007D86 6600                         		bne.s	@endchk
00007D88 0801 0006                    		btst	#6,d1
00007D8C 6600                         		bne.s	@endchk
00007D8E 4A00                         		tst.b	d0
00007D90 6600                         		bne.s	@leftws
00007D92 4A01                         		tst.b	d1
00007D94 6600                         		bne.s	@rightws
00007D96 6000                          		bra.s	@endchk
00007D98                            @przrotx:
00007D98                            	
00007D98                            @leftws:
00007D98 0C01 0002                  		cmp.b	#2,d1
00007D9C 6C00                       		bge.s	@endchk
00007D9E 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00007DA4 6700                       		beq.s	@endchk
00007DA6 6000                       		bra.s	@rotatex
00007DA8                            @rightws:
00007DA8 0C01 0002                  		cmp.b	#2,d1
00007DAC 6C00                       		bge.s	@endchk
00007DAE 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00007DB4 6600                       		bne.s	@endchk
00007DB6                            @rotatex:
00007DB6 4486                        		neg.l	d6
00007DB8 086E 0000 001E              		bchg	#bitobj_flipH,obj_status(a6)
00007DBE                            @endchk:
00007DBE 4E75                       		rts
00007DC0                            		
00007DC0                            ; ------------------------------------------------
00007DC0                            ; Data
00007DC0                            ; ------------------------------------------------
00007DC0                            		
00007DC0                            ; ----------------------------------------
00007DC0                            
00007DC0                            ani_dadou:
00007DC0 0000                       		dc.w @Idle-ani_dadou
00007DC2 0000                       		dc.w @Walk-ani_dadou
00007DC4                            		even
00007DC4                            @Idle:
00007DC4 08                          		dc.b 8
00007DC5 0000 0000 0000 0000 0001+   		dc.b 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
00007DD6 FF                         		dc.b $FF
00007DD8 00                         		even
00007DD8                            @Walk:
00007DD8 06                          		dc.b 6
00007DD9 0203 0405 0607 0809         		dc.b 2,3,4,5,6,7,8,9
00007DE1 FF                         		dc.b $FF
00007DE2                            		even	
00007DE2                            		even	
00007DE2                               		include	"engine/modes/level/data/objects/pikudo/code.asm"
00007DE2                            ; =================================================================
00007DE2                            ; Object
00007DE2                            ; 
00007DE2                            ; Pikudo
00007DE2                            ; =================================================================
00007DE2                            
00007DE2                            ; =================================================================
00007DE2                            ; ------------------------------------------------
00007DE2                            ; Variables
00007DE2                            ; ------------------------------------------------
00007DE2                            
00007DE2 =000004D0                  varVramPikudo	equ	$4D0
00007DE2 =000000AA                  varTimerWait	equ	170
00007DE2 =0000001E                  varTimerAttck	equ	30
00007DE2                            
00007DE2                            ; =================================================================
00007DE2                            ; ------------------------------------------------
00007DE2                            ; RAM
00007DE2                            ; ------------------------------------------------
00007DE2                            
00007DE2                            		rsset Obj_Ram
00007DE2 =00000024                  timerpik1	rs.w 1
00007DE2 =00000026                  timerpik2	rs.w 1
00007DE2 =00000028                  lastx		rs.w 1
00007DE2 =0000002A                  lasty		rs.w 1
00007DE2                            
00007DE2                            ; =================================================================
00007DE2                            ; ------------------------------------------------
00007DE2                            ; Code start
00007DE2                            ; ------------------------------------------------
00007DE2                            
00007DE2                            Obj_Pikudo:
00007DE2 7000                        		moveq	#0,d0
00007DE4 102E 001D                   		move.b	obj_index(a6),d0
00007DE8 D040                        		add.w	d0,d0
00007DEA 323B 0000                   		move.w	@Index(pc,d0.w),d1
00007DEE 4EBB 1000                   		jsr	@Index(pc,d1.w)
00007DF2                             		
00007DF2 6100 DEE4                   		bsr	Object_OffCheck
00007DF6 203C 04D0 0000                		move.l	#(varVramPikudo<<16),d0
00007DFC 223C 0000 0000              		move.l	#ani_pikudo,d1
00007E02 6100 DF40                  		bsr	Object_Animate
00007E06                            		
00007E06 203C 04D0 0000                 		move.l	#(varVramPikudo<<16),d0
00007E0C 102E 0020                   		move.b	obj_frame(a6),d0
00007E10 223C 0000 0000             		move.l	#map_pikudo,d1
00007E16 6000 DB82                   		bra	Object_Show
00007E1A                             		
00007E1A                            ; ------------------------------------------------
00007E1A                            
00007E1A                            @Index:
00007E1A 0000                       		dc.w @Init-@Index
00007E1C 0000                       		dc.w @Stand-@Index
00007E1E 0000                       		dc.w @Attack-@Index
00007E20                            		even
00007E20                            		
00007E20                            ; =================================================================
00007E20                            ; ------------------------------------------------
00007E20                            ; Index $00: Init
00007E20                            ; ------------------------------------------------
00007E20                            
00007E20                            @Init:
00007E20 062E 0001 001D             		add.b	#1,obj_index(a6)
00007E26 422E 001A                  		clr.b	obj_anim_id(a6)
00007E2A 422E 0020                  		clr.b	obj_frame(a6)
00007E2E 2D7C 0101 0202 0004        		move.l	#$01010202,obj_size(a6)
00007E36 42AE 0010                  		clr.l	obj_x_spd(a6)
00007E3A 3D7C 00AA 0024             		move.w	#varTimerWait,timerpik1(a6)
00007E40 3D6E 0008 0028             		move.w	obj_x(a6),lastx(a6)
00007E46 3D6E 000C 002A             		move.w	obj_y(a6),lasty(a6)
00007E4C                            		
00007E4C                            ; =================================================================
00007E4C                            ; ------------------------------------------------                  
00007E4C                            ; Index $01: Stand
00007E4C                            ; ------------------------------------------------
00007E4C                            
00007E4C                            @Stand:
00007E4C 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00007E52 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
00007E58 302C 0008                  		move.w	obj_x(a4),d0
00007E5C B06E 0008                  		cmp.w	obj_x(a6),d0
00007E60 6D00                       		blt.s	@leftside
00007E62 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
00007E68                            @leftside:
00007E68                            
00007E68 6100 E132                  		bsr	object_FindCol_Ceiling
00007E6C 4A00                       		tst.b	d0
00007E6E 6600                       		bne.s	@ignore
00007E70 6100 E51E                  		bsr	object_FindCol_CeilingSides
00007E74 4A00                       		tst.b	d0
00007E76 6600                       		bne.s	@ignore	
00007E78 4A01                       		tst.b	d1
00007E7A 6600                       		bne.s	@ignore
00007E7C                            		
00007E7C 302E 000C                  		move.w	obj_y(a6),d0
00007E80 B06E 002A                  		cmp.w	lasty(a6),d0
00007E84 6F00                       		ble.s	@ignore
00007E86                            		
00007E86                            ; 		
00007E86                            ; 		bsr	object_FindPrz_CeilingSides
00007E86                            ; 		move.l	d0,d2
00007E86                            ; 		bsr	object_FindPrz_CeilingSides
00007E86                            ; 		or.l	d1,d0
00007E86                            ; 		or.l	d2,d0
00007E86                            ; 		btst	#7,d0
00007E86                            ; 		bne.s	@cont2
00007E86                            ; 		btst	#6,d0
00007E86                            ; 		bne.s	@cont2
00007E86                            ; 		tst.b	d0
00007E86                            ; 		bne.s	@ignore
00007E86                            ; @cont2:
00007E86                            
00007E86 046E 0001 000C             		sub.w	#1,obj_y(a6)
00007E8C                            @ignore:
00007E8C                            
00007E8C 046E 0001 0024             		sub.w	#1,timerpik1(a6)
00007E92 6A00                       		bpl.s	@waitpik1
00007E94                            		
00007E94 203C 0000 0000               		move.l	#SndSfx_BEEBUZZ,d0
00007E9A 7202                         		moveq 	#2,d1
00007E9C 7401                         		moveq	#1,d2
00007E9E 6100 959C                    		bsr	Audio_Track_play
00007EA2                              		
00007EA2 1D7C 0002 001D             		move.b	#2,obj_index(a6)
00007EA8 3D7C 001E 0024             		move.w	#varTimerAttck,timerpik1(a6)
00007EAE 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
00007EB4 2D7C FFFE 1000 0010        		move.l	#-$1F000,obj_x_spd(a6)
00007EBC 2D7C 0002 0000 0014        		move.l	#$20000,obj_y_spd(a6)
00007EC4 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00007ECA 6700                       		beq.s	@waitpik1
00007ECC 44AE 0010                  		neg.l	obj_x_spd(a6)
00007ED0                            
00007ED0                            @waitpik1:
00007ED0 6000 0000                  		bra	@check_touch
00007ED4                            		
00007ED4                            ; =================================================================
00007ED4                            ; ------------------------------------------------                  
00007ED4                            ; Index $02: Attack
00007ED4                            ; ------------------------------------------------
00007ED4                            
00007ED4                            @Attack:
00007ED4 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00007ED8 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00007EDC                            		
00007EDC DDAE 0008                  		add.l	d6,obj_x(a6)
00007EE0 DFAE 000C                  		add.l	d7,obj_y(a6)
00007EE4                            		
00007EE4                            ; Check for floor or walls
00007EE4                            
00007EE4 6100 DF7C                  		bsr	object_FindCol_Floor
00007EE8 4A00                       		tst.b	d0
00007EEA 6600                       		bne.s	@forceend
00007EEC 6100 DF68                  		bsr	object_FindPrz_Floor
00007EF0 0800 0007                  		btst	#7,d0
00007EF4 6600                       		bne.s	@cont
00007EF6 0800 0006                  		btst	#6,d0
00007EFA 6600                       		bne.s	@cont	
00007EFC 4A00                       		tst.b	d0
00007EFE 6600                       		bne.s	@forceend
00007F00                            @cont:
00007F00                            
00007F00 6100 DFCE                  		bsr	object_FindCol_Wall
00007F04 4A00                       		tst.b	d0
00007F06 6684                       		bne.s	@ignore
00007F08 6100 E216                  		bsr	object_FindCol_WallSides
00007F0C 4A00                       		tst.b	d0
00007F0E 6600 FF7C                  		bne	@ignore		
00007F12 4A01                       		tst.b	d1
00007F14 6600 FF76                  		bne	@ignore
00007F18                            		
00007F18 6100 E1FA                  		bsr	object_FindPrz_WallSides
00007F1C 2400                       		move.l	d0,d2
00007F1E 6100 E1F4                  		bsr	object_FindPrz_WallSides
00007F22 8081                       		or.l	d1,d0
00007F24 8082                       		or.l	d2,d0
00007F26 0800 0007                  		btst	#7,d0
00007F2A 6600                       		bne.s	@cont3
00007F2C 0800 0006                  		btst	#6,d0
00007F30 6600                       		bne.s	@cont3
00007F32 4A00                       		tst.b	d0
00007F34 6600                       		bne.s	@forceend
00007F36                            @cont3:
00007F36                            
00007F36 046E 0001 0024             		sub.w	#1,timerpik1(a6)
00007F3C 6A00                       		bpl.s	@waitpik2
00007F3E 6000                       		bra.s	@end2
00007F40                            @forceend:
00007F40 046E 0008 002A             		sub.w	#8,lasty(a6)
00007F46                            @end2:
00007F46                            
00007F46 1D7C 0001 001D             		move.b	#1,obj_index(a6)
00007F4C 3D7C 00AA 0024             		move.w	#varTimerWait,timerpik1(a6)
00007F52 422E 001A                  		clr.b	obj_anim_id(a6)
00007F56 4286                       		clr.l	d6
00007F58 4287                       		clr.l	d7
00007F5A                            @waitpik2:
00007F5A                            
00007F5A 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00007F5E 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00007F62 6000 0000                  		bra	@check_touch
00007F66                            		
00007F66                            ; =================================================================
00007F66                            ; ------------------------------------------------
00007F66                            ; Subs
00007F66                            ; ------------------------------------------------
00007F66                            
00007F66                            ; @Go_Stand:
00007F66                            ; 		clr.l	obj_x_spd(a6)
00007F66                            ; 		clr.b	obj_anim_id(a6)
00007F66                            ; 		move.b	#1,obj_index(a6)
00007F66                            ; 		rts
00007F66                            ; 	
00007F66                            ; ; --------------------------------------
00007F66                            ; 
00007F66                            ; @Go_Walk:
00007F66                            ; 		move.l	#$4000,obj_x_spd(a6)
00007F66                            ; 		btst	#bitobj_flipH,obj_status(a6)
00007F66                            ; 		bne.s	@right
00007F66                            ; 		move.l	#-$4000,obj_x_spd(a6)
00007F66                            ; @right:
00007F66                            ; 		move.b	#1,obj_anim_id(a6)
00007F66                            ; 		move.b	#2,obj_index(a6)
00007F66                            ; 		rts
00007F66                            ; 	
00007F66                            ; ; ------------------------------------------------
00007F66                            ; ; Pyhsics
00007F66                            ; ; ------------------------------------------------
00007F66                            ; 
00007F66                            ; @Pyhsics:
00007F66                            ; 		lea	(RAM_LvlPlanes),a5
00007F66                            ;  		move.l	obj_x_spd(a6),d6
00007F66                            ;  		move.l	obj_y_spd(a6),d7
00007F66                            ;  		
00007F66                            ;  		add.l	d6,obj_x(a6)
00007F66                            ;  		bsr	@WallCheck
00007F66                            ; 		
00007F66                            ; ; ----------------------------------
00007F66                            ; 
00007F66                            ;   		add.l	#$8000,d7
00007F66                            ;   		cmp.l	#$40000,d7
00007F66                            ;   		blt.s	@low_y
00007F66                            ;   		move.l	#$40000,d7
00007F66                            ; @low_y:
00007F66                            ;   		add.l	d7,obj_y(a6)
00007F66                            ;   		
00007F66                            ; ; 		lea	(RAM_LvlPlanes),a5
00007F66                            ; ; 		move.w	lvl_size_y(a5),d0
00007F66                            ; ; 		lsl.w	#4,d0
00007F66                            ; ; 		move.w	obj_y(a6),d1
00007F66                            ; ; 		moveq	#0,d2
00007F66                            ; ; 		move.b	obj_size+2(a6),d2
00007F66                            ; ; 		lsl.w	#3,d2
00007F66                            ; ; 		sub.w	d2,d1
00007F66                            ; ; 		cmp.w	d0,d1
00007F66                            ; ; 		bge	@delete
00007F66                            ; ; 		
00007F66                            ;   		tst.l	d7
00007F66                            ;   		bmi.s	@no_floor
00007F66                            ;   
00007F66                            ; 		bsr	object_FindPrz_Floor
00007F66                            ; 		move.l	d0,d2
00007F66                            ; 		tst.b	d0
00007F66                            ; 		bne.s	@from_prize
00007F66                            ;  		bsr 	object_FindPrz_FloorSides
00007F66                            ; 		tst.b	d0
00007F66                            ; 		bne	@from_prize;@swap_dir_wl
00007F66                            ; 		move.l	d1,d0
00007F66                            ; 		tst.b	d0
00007F66                            ; 		bne	@from_prize
00007F66                            ; 		
00007F66                            ; 		bsr	object_FindCol_Floor
00007F66                            ; 		move.l	d0,d2
00007F66                            ; 		tst.b	d0
00007F66                            ; 		bne.s	@set_floor
00007F66                            ;  		bsr 	object_FindCol_FloorSides
00007F66                            ; 		tst.b	d0
00007F66                            ; 		bne	@set_floor;@swap_dir_wl
00007F66                            ; 		move.l	d1,d0
00007F66                            ; 		tst.b	d0
00007F66                            ; 		beq	@no_floor
00007F66                            ; 		
00007F66                            ; 		bra.s	@set_floor
00007F66                            ; ; @swap_dir_wl:
00007F66                            ; ; 		neg.l	d6
00007F66                            ; ; 		bchg	#bitobj_flipH,obj_status(a6)
00007F66                            ; ; 		bra.s	@no_floor
00007F66                            ; 
00007F66                            ; @from_prize:
00007F66                            ; 		cmp.b	#$40,d0
00007F66                            ; 		bge.s	@set_floor
00007F66                            ; 		move.b	#1,d0
00007F66                            ; 		
00007F66                            ; @set_floor:
00007F66                            ;   		bsr 	object_SetCol_Floor
00007F66                            ;   		
00007F66                            ; @no_floor:
00007F66                            ; 
00007F66                            ;  		move.l	d6,obj_x_spd(a6)
00007F66                            ;  		move.l	d7,obj_y_spd(a6)
00007F66                             		
00007F66                            ; ----------------------------------
00007F66                            ; Check if touched
00007F66                            ; ----------------------------------
00007F66                            
00007F66                            @check_touch:
00007F66 6100 E654                  		bsr	objTouch_Top
00007F6A 4A00                       		tst.b	d0
00007F6C 6600                       		bne.s	@touch_flag
00007F6E 6100 E6EA                  		bsr	objTouch_Bottom
00007F72 4A00                       		tst.b	d0
00007F74 6600                       		bne.s	@touch_flag
00007F76                            		
00007F76 6100 E782                  		bsr	objTouch_Sides
00007F7A 4A00                       		tst.b	d0
00007F7C 6600                       		bne.s	@touch_flag;_side
00007F7E 4840                       		swap	d0
00007F80 4A00                       		tst.b	d0
00007F82 6600                       		bne.s	@touch_flag;_side
00007F84 4E75                       		rts
00007F86                            		
00007F86                            ; -----------------------------------
00007F86                            
00007F86                            @touch_flag:
00007F86 6100 E956                  		bsr	objPlyrHurtKill
00007F8A 6700                       		beq.s	@return
00007F8C                            		
00007F8C 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
00007F92 323C 04D0                     		move.w	#varVramPikudo,d1
00007F96 142E 0020                   		move.b	obj_frame(a6),d2
00007F9A 203C 0000 0000             		move.l	#map_pikudo,d0
00007FA0 260C                       		move.l	a4,d3
00007FA2 6100 ECE2                  		bsr	objAction_SetStomp
00007FA6 6000 DD10                  		bra	Object_IsGone
00007FAA                            @return:
00007FAA 4E75                       		rts
00007FAC                            		
00007FAC                            ; =================================================================
00007FAC                            
00007FAC                            @WallCheck:
00007FAC 6100 DF16                     		bsr	object_FindPrz_Wall
00007FB0 4A00                          		tst.b	d0
00007FB2 6600                          		bne.s	@foundprzwl
00007FB4 6100 DF1A                    		bsr	object_FindCol_Wall
00007FB8 4A00                         		tst.b	d0
00007FBA 6700                         		beq.s	@chk_right
00007FBC                            @foundprzwl:
00007FBC 0800 0006                    		btst	#6,d0
00007FC0 6600                         		bne.s	@chk_right
00007FC2                            ;    		cmp.b	#2,d0
00007FC2                            ;    		blt.s	@chk_right
00007FC2 6100 E5DC                    		bsr	object_SetCol_Wall
00007FC6                            ;    		bra.s	@endchk
00007FC6                            @chk_right:
00007FC6                            
00007FC6                            		;TODO: Prize check
00007FC6                            ;   		bsr	object_FindPrz_WallSides
00007FC6                            ;   		tst.b	d0
00007FC6                            ;   		bne.s	@przrotx
00007FC6                            ;   		move.l	d1,d0
00007FC6                            ;   		tst.b	d0
00007FC6                            ;   		bne.s	@przrotx
00007FC6                            
00007FC6 6100 E158                    		bsr	object_FindCol_WallSides
00007FCA 0800 0006                    		btst	#6,d0
00007FCE 6600                         		bne.s	@endchk
00007FD0 0801 0006                    		btst	#6,d1
00007FD4 6600                         		bne.s	@endchk
00007FD6 4A00                         		tst.b	d0
00007FD8 6600                         		bne.s	@leftws
00007FDA 4A01                         		tst.b	d1
00007FDC 6600                         		bne.s	@rightws
00007FDE 6000                          		bra.s	@endchk
00007FE0                            @przrotx:
00007FE0                            	
00007FE0                            @leftws:
00007FE0 0C01 0002                  		cmp.b	#2,d1
00007FE4 6C00                       		bge.s	@endchk
00007FE6 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00007FEC 6700                       		beq.s	@endchk
00007FEE 6000                       		bra.s	@rotatex
00007FF0                            @rightws:
00007FF0 0C01 0002                  		cmp.b	#2,d1
00007FF4 6C00                       		bge.s	@endchk
00007FF6 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00007FFC 6600                       		bne.s	@endchk
00007FFE                            @rotatex:
00007FFE 4486                        		neg.l	d6
00008000 086E 0000 001E              		bchg	#bitobj_flipH,obj_status(a6)
00008006                            @endchk:
00008006 4E75                       		rts
00008008                            
00008008                            ; ------------------------------------------------
00008008                            ; Data
00008008                            ; ------------------------------------------------
00008008                            		
00008008                            ; ----------------------------------------
00008008                            
00008008                            ani_pikudo:
00008008 0000                       		dc.w @Idle-ani_pikudo
0000800A 0000                       		dc.w @Attack-ani_pikudo
0000800C                            		even
0000800C                            @Idle:
0000800C 03                          		dc.b 3
0000800D 0001 0001 0001 0001 0001+   		dc.b 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2
0000802C 0100 0100 0100 0100 0100+   		dc.b 1,0,1,0,1,0,1,0,1,0,1
00008037 FF                         		dc.b $FF
00008038                            		even
00008038                            @Attack:
00008038 02                          		dc.b 2
00008039 0304                        		dc.b 3,4
0000803B FF                         		dc.b $FF
0000803C                            		even
0000803C                            		even
0000803C                               		include	"engine/modes/level/data/objects/platform/code.asm"
0000803C                            ; =================================================================
0000803C                            ; Object
0000803C                            ; 
0000803C                            ; Platforms
0000803C                            ; =================================================================
0000803C                            
0000803C                            ; =================================================================
0000803C                            ; ------------------------------------------------
0000803C                            ; Variables
0000803C                            ; ------------------------------------------------
0000803C                            
0000803C =00002530                  varVramPlatfrm	equ	$2000|$530
0000803C                            
0000803C                            ; =================================================================
0000803C                            ; ------------------------------------------------
0000803C                            ; RAM
0000803C                            ; ------------------------------------------------
0000803C                            
0000803C                            		rsset obj_ram
0000803C =00000024                  last_x		rs.w	1
0000803C =00000026                  last_y		rs.w	1
0000803C =00000028                  tanvalue	rs.w	1
0000803C                            
0000803C                            ; =================================================================
0000803C                            ; ------------------------------------------------
0000803C                            ; Code start
0000803C                            ; ------------------------------------------------
0000803C                            
0000803C                            Obj_Platform:
0000803C 7000                        		moveq	#0,d0
0000803E 102E 001D                   		move.b	obj_index(a6),d0
00008042 D040                        		add.w	d0,d0
00008044 323B 0000                   		move.w	@Index(pc,d0.w),d1
00008048 4EBB 1000                   		jsr	@Index(pc,d1.w)
0000804C                             		
0000804C                             		;TODO: si hago este check se 
0000804C                             		;desincronizan
0000804C                            ;  		bsr	Object_OffCheck
0000804C                            
0000804C                            ;    		move.l	#(varVramPlatfrm<<16),d0
0000804C                            ;  		move.l	#ani_chamoy,d1
0000804C                            ; 		bsr	Object_Animate
0000804C 203C 2530 0000              		move.l	#(varVramPlatfrm<<16),d0
00008052 102E 0020                   		move.b	obj_frame(a6),d0
00008056 223C 0000 0000             		move.l	#objMap_platform,d1
0000805C 6000 D93C                   		bra	Object_Show
00008060                             		
00008060                            ; =================================================================
00008060                            ; ------------------------------------------------
00008060                            ; Code index
00008060                            ; ------------------------------------------------
00008060                            
00008060                            @Index:
00008060 0000                       		dc.w	@Init-@Index
00008062 0000                       		dc.w	@Main-@Index
00008064                            		even
00008064                            		
00008064                            ; =================================================================
00008064                            ; ------------------------------------------------
00008064                            ; Sub-id
00008064                            ; ------------------------------------------------
00008064                            
00008064                            @id_list:
00008064 0000 0000                  		dc.w @left_right_sin-@id_list,0
00008068 0303 0100                  		dc.l $03030100
0000806C 0000 0000                  		dc.w @left_right_cos-@id_list,0
00008070 0303 0100                  		dc.l $03030100
00008074 0000 0000                  		dc.w @up_down_sin-@id_list,0
00008078 0303 0100                  		dc.l $03030100
0000807C 0000 0000                  		dc.w @up_down_cos-@id_list,0
00008080 0303 0100                  		dc.l $03030100
00008084 0000 0000                  		dc.w @rotate_right-@id_list,0
00008088 0303 0100                  		dc.l $03030100
0000808C 0000 0000                  		dc.w @rotate_left-@id_list,0
00008090 0303 0100                  		dc.l $03030100	
00008094 0000 0000                  		dc.w @stepfall-@id_list,0
00008098 0303 0100                  		dc.l $03030100
0000809C                            		
0000809C                            ; =================================================================
0000809C                            ; ------------------------------------------------
0000809C                            ; Index $00: Init
0000809C                            ; ------------------------------------------------
0000809C                            
0000809C                            @Init:
0000809C 062E 0001 001D             		add.b	#1,obj_index(a6)
000080A2 2D7C 0303 0001 0004        		move.l	#$03030001,obj_size(a6)		;failsafe
000080AA 2D7C 0000 8000 0014        		move.l	#$8000,obj_y_spd(a6)
000080B2 3D6E 0008 0024             		move.w	obj_x(a6),last_x(a6)
000080B8 3D6E 000C 0026             		move.w	obj_y(a6),last_y(a6)
000080BE 422E 0020                  		clr.b	obj_frame(a6)
000080C2                            		
000080C2                            ; =================================================================
000080C2                            ; ------------------------------------------------                  
000080C2                            ; Index $01: Main
000080C2                            ; ------------------------------------------------
000080C2                            
000080C2                            @Main:
000080C2 7A00                        		moveq	#0,d5
000080C4                             		
000080C4 7000                       		moveq	#0,d0
000080C6 102E 001F                  		move.b	obj_subid(a6),d0
000080CA E748                       		lsl.w	#3,d0
000080CC 2D7B 009A 0004              		move.l	@id_list+4(pc,d0.w),obj_size(a6)
000080D2 323B 0090                  		move.w	@id_list(pc,d0.w),d1
000080D6 4EBB 108C                  		jsr	@id_list(pc,d1.w)
000080DA                             		
000080DA 6100 E4E0                  		bsr	objTouch_Top
000080DE 200C                       		move.l	a4,d0
000080E0 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
000080E6 6600                       		bne.s	@return
000080E8 4A00                       		tst.b	d0
000080EA 6700                       		beq.s	@return
000080EC 0C2C 0002 001D             		cmp.b	#varPlyrMdDead,obj_index(a4)
000080F2 6700                       		beq.s	@return
000080F4 6100 E6E4                  		bsr	objPlyrSetFloor
000080F8 4AAC 0014                  		tst.l	obj_y_spd(a4)
000080FC 6B00                       		bmi.s	@return
000080FE 9B6C 0008                     		sub.w	d5,obj_x(a4)
00008102                            @return:
00008102 4E75                       		rts
00008104                             	
00008104                            ; ---------------------------
00008104                            ; Left/Right
00008104                            ; ---------------------------
00008104                            	
00008104                            @left_right_cos:
00008104 302E 0028                    		move.w	tanvalue(a6),d0
00008108                            
00008108 6000 0000                    		bra	@do_lr
0000810C                              
0000810C                            @left_right_sin:
0000810C 302E 0028                    		move.w	tanvalue(a6),d0
00008110 4440                         		neg.w	d0
00008112                              		
00008112                            @do_lr:
00008112 6100 8B9A                    		bsr	CalcSine
00008116 E640                         		asr.w	#3,d0
00008118 342E 0024                    		move.w	last_x(a6),d2
0000811C D440                         		add.w	d0,d2
0000811E 3A2E 0008                    		move.w	obj_x(a6),d5
00008122 9A42                         		sub.w	d2,d5
00008124 3D42 0008                    		move.w	d2,obj_x(a6)
00008128                              		
00008128 066E 0001 0028              		add.w	#1,tanvalue(a6)
0000812E 4E75                         		rts
00008130                             
00008130                            ; ---------------------------
00008130                            ; Up/Down
00008130                            ; ---------------------------
00008130                            
00008130                            @up_down_cos:
00008130 302E 0028                  		move.w	tanvalue(a6),d0
00008134 4440                       		neg.w	d0
00008136 6000                       		bra.s	@do_ud
00008138                            @up_down_sin:
00008138 302E 0028                    		move.w	tanvalue(a6),d0
0000813C                            @do_ud:
0000813C 6100 8B70                    		bsr	CalcSine
00008140 E640                         		asr.w	#3,d0
00008142 342E 0026                    		move.w	last_y(a6),d2
00008146 D440                         		add.w	d0,d2
00008148                            ;   		move.w	obj_y(a6),d4
00008148                            ;   		sub.w	d2,d4
00008148 3D42 000C                     		move.w	d2,obj_y(a6)
0000814C                            
0000814C 066E 0001 0028              		add.w	#1,tanvalue(a6)
00008152 4E75                        		rts
00008154                             		
00008154                            ; ---------------------------
00008154                            ; rotate_right
00008154                            ; ---------------------------
00008154                            
00008154                            @rotate_right:
00008154                            ;   		move.w	#$20,d4
00008154                              		
00008154 302E 0028                    		move.w	tanvalue(a6),d0
00008158 6100 8B54                    		bsr	CalcSine
0000815C C1FC 0040                    		muls	#$40,d0
00008160 E080                         		asr.l	#8,d0
00008162 342E 0024                    		move.w	last_x(a6),d2
00008166 D440                         		add.w	d0,d2
00008168 3A2E 0008                    		move.w	obj_x(a6),d5
0000816C 9A42                         		sub.w	d2,d5
0000816E 3D42 0008                    		move.w	d2,obj_x(a6)
00008172                               		
00008172 302E 0028                    		move.w	tanvalue(a6),d0
00008176 E348                         		lsl.w	#1,d0
00008178 6100 8B34                    		bsr	CalcSine
0000817C C3FC 0030                    		muls	#$30,d1
00008180 E081                         		asr.l	#8,d1
00008182 342E 0026                    		move.w	last_y(a6),d2
00008186 D441                         		add.w	d1,d2
00008188 3D42 000C                     		move.w	d2,obj_y(a6)
0000818C                            
0000818C 066E 0001 0028              		add.w	#1,tanvalue(a6)
00008192 4E75                        		rts
00008194                             		
00008194                            ; ---------------------------
00008194                            ; rotate_left
00008194                            ; ---------------------------
00008194                            
00008194                            @rotate_left:
00008194 066E 0001 0028              		add.w	#1,tanvalue(a6)
0000819A 4E75                        		rts
0000819C                            
0000819C                            ; ---------------------------
0000819C                            ; StepFall
0000819C                            ; ---------------------------
0000819C                            
0000819C                            @stepfall:
0000819C 6100 E41E                  		bsr	objTouch_Top
000081A0 4A00                       		tst.b	d0
000081A2 6700 FF5E                  		beq	@return
000081A6 200C                       		move.l	a4,d0
000081A8 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
000081AE 6600 FF52                  		bne	@return
000081B2 4AAC 0014                  		tst.l	obj_y_spd(a4)
000081B6 6B00 FF4A                  		bmi	@return
000081BA                            		
000081BA 066E 0003 000C             		add.w	#3,obj_y(a6)
000081C0 4E75                       		rts
000081C0 4E75                       		rts
000081C2                               		include	"engine/modes/level/data/objects/prize/code.asm"
000081C2                            ; =================================================================
000081C2                            ; Object
000081C2                            ; 
000081C2                            ; The prize
000081C2                            ; =================================================================
000081C2                            
000081C2                            ; =================================================================
000081C2                            ; ------------------------------------------------
000081C2                            ; Variables
000081C2                            ; ------------------------------------------------
000081C2                            
000081C2 =0000C5A8                  vramCoinRed	equ	$C000|$5A8
000081C2 =0000C5AC                  vramCoinBlue	equ	$C000|$5AC
000081C2 =0000C5B0                  vram1up		equ	$C000|$5B0
000081C2 =0000C594                  vramJmpBlock	equ	$C000|$594
000081C2                            
000081C2                            ; =================================================================
000081C2                            ; ------------------------------------------------
000081C2                            ; RAM
000081C2                            ; ------------------------------------------------
000081C2                            
000081C2                            		rsset obj_ram
000081C2 =00000024                  this_pos	rs.l 1			; Block type and X/Y position
000081C2 =00000028                  this_vram	rs.w 1			; Vram (top left)
000081C2 =0000002A                  this_counter	rs.w 1			; Counter (coins, etc.)
000081C2                            
000081C2 =0000002C                  y_coin_spd	rs.l 1
000081C2 =00000030                  y_pos_coin	rs.l 1
000081C2 =00000034                  x_pos_main	rs.w 1
000081C2 =00000036                  y_pos_main	rs.w 1
000081C2 =00000038                  x_pos_l		rs.w 1
000081C2 =0000003A                  x_pos_r		rs.w 1
000081C2 =0000003C                  tmr_1		rs.w 1
000081C2 =0000003E                  block_flags	rs.b 1
000081C2                            
000081C2                            ; =================================================================
000081C2                            ; ------------------------------------------------
000081C2                            ; Code start
000081C2                            ; ------------------------------------------------
000081C2                            
000081C2                            obj_prize:
000081C2 7000                        		moveq	#0,d0
000081C4 102E 001D                   		move.b	obj_index(a6),d0
000081C8 D040                        		add.w	d0,d0
000081CA 323B 0000                   		move.w	@Index(pc,d0.w),d1
000081CE 4EFB 1000                   		jmp	@Index(pc,d1.w)
000081D2                             		
000081D2                            ; ------------------------------------------------
000081D2                            
000081D2                            @Index:
000081D2 0000                       		dc.w	@Init-@Index
000081D4 0000                       		dc.w	@Main-@Index
000081D6                            		even
000081D6                            		
000081D6                            ; =================================================================
000081D6                            ; ------------------------------------------------
000081D6                            ; Index $00: Init
000081D6                            ; ------------------------------------------------
000081D6                            
000081D6                            @Init:
000081D6 062E 0001 001D             		add.b	#1,obj_index(a6)
000081DC 202E 0024                  		move.l	this_pos(a6),d0
000081E0 4840                        		swap	d0
000081E2 0240 FFF0                   		and.w	#$FFF0,d0
000081E6 3D40 0008                   		move.w	d0,obj_x(a6)
000081EA 4840                        		swap	d0
000081EC E848                        		lsr.w	#4,d0
000081EE 0240 FFF0                   		and.w	#$FFF0,d0
000081F2 3D40 000C                   		move.w	d0,obj_y(a6)
000081F6                            
000081F6 202E 0024                   		move.l	this_pos(a6),d0
000081FA 6100 D128                  		bsr	Level_HidePrize
000081FE                            
000081FE 2D7C FFFC 0000 0014         		move.l	#-$40000,obj_y_spd(a6)
00008206 4A2E 001F                   		tst.b	obj_subid(a6)
0000820A 6700                        		beq.s	@not_brick
0000820C 2D7C FFFE 0000 0014         		move.l	#-$20000,obj_y_spd(a6)
00008214                            @not_brick:
00008214 3D6E 0008 0034              		move.w	obj_x(a6),x_pos_main(a6)
0000821A 302E 000C                   		move.w	obj_y(a6),d0
0000821E 3D40 0036                   		move.w	d0,y_pos_main(a6)
00008222 0440 0010                   		sub.w	#$10,d0
00008226 4840                        		swap	d0
00008228 2D40 0030                   		move.l	d0,y_pos_coin(a6)
0000822C                             		
0000822C 3D6E 0008 0038              		move.w	obj_x(a6),x_pos_l(a6)
00008232 3D6E 0008 003A              		move.w	obj_x(a6),x_pos_r(a6)
00008238 066E 0008 003A              		add.w	#8,x_pos_r(a6)
0000823E 2D7C FFFC 0000 002C         		move.l	#-$40000,y_coin_spd(a6)
00008246                             		
00008246 2D7C 0101 0101 0004         		move.l	#$01010101,obj_size(a6)
0000824E 08EE 0006 001E              		bset	#bitobj_hit,obj_status(a6)
00008254                             		
00008254                            ; =================================================================
00008254                            ; ------------------------------------------------                  
00008254                            ; Index $01: Main
00008254                            ; ------------------------------------------------
00008254                            
00008254                            @Main:
00008254 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0000825A 7000                        		moveq	#0,d0
0000825C 102E 001F                   		move.b	obj_subid(a6),d0
00008260 0200 007F                   		and.b	#$7F,d0
00008264 D040                        		add.w	d0,d0
00008266 323B 0000                   		move.w	@subtypes(pc,d0.w),d1
0000826A 4EFB 1000                   		jmp	@subtypes(pc,d1.w)
0000826E                            		
0000826E                            ; ------------------------------------------------
0000826E                            ; Subs
0000826E                            ; ------------------------------------------------
0000826E                            
0000826E                            @subtypes:
0000826E 0000                       		dc.w @destroy-@subtypes		; $00 - Breakable block
00008270 0000                       		dc.w @bump_solid-@subtypes	; $01 - Bump, normal
00008272 0000                       		dc.w @bump_coin-@subtypes	; $02 - Bump, add red coin (1)
00008274 0000                       		dc.w @bump_coin_blue-@subtypes	; $03 - Bump, add blue coin (2)
00008276 0000                       		dc.w @bump_1up-@subtypes	; $04 - Bump, add extra life
00008278 0000                       		dc.w @trampoline-@subtypes	; $05 - Trampoline animation
0000827A                            		
0000827A                            ; ------------------------------------------------
0000827A                            ; Return
0000827A                            ; ------------------------------------------------
0000827A                            
0000827A                            @return:
0000827A 4E75                       		rts
0000827C                            		
0000827C                            ; ------------------------------------------------
0000827C                            ; Destroy block
0000827C                            ; ------------------------------------------------
0000827C                            
0000827C                            @destroy:
0000827C 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00008280                            		
00008280 223C 0000 0000             		move.l	#$0000,d1
00008286 4841                       		swap	d1
00008288 322E 0028                  		move.w	this_vram(a6),d1
0000828C 0041 8000                  		or.w	#$8000,d1
00008290                            		
00008290 362E 003A                  		move.w	x_pos_r(a6),d3
00008294 066E 0001 003A             		add.w	#1,x_pos_r(a6)
0000829A 4843                       		swap	d3
0000829C 342E 0038                  		move.w	x_pos_l(a6),d2
000082A0 046E 0001 0038             		sub.w	#1,x_pos_l(a6)
000082A6 4842                       		swap	d2
000082A8                            	
000082A8 2002                       		move.l	d2,d0
000082AA 302E 000C                  		move.w	obj_y(a6),d0
000082AE 0480 0006 0000             		sub.l	#$60000,d0
000082B4 0440 0010                  		sub.w	#$10,d0
000082B8 6100 D762                  		bsr	Object_ExtSprite
000082BC 2003                       		move.l	d3,d0
000082BE 0641 0002                   		add.w	#2,d1
000082C2 302E 000C                  		move.w	obj_y(a6),d0
000082C6 0680 0004 0000             		add.l	#$40000,d0	
000082CC 0440 0014                  		sub.w	#$14,d0
000082D0 6100 D74A                  		bsr	Object_ExtSprite
000082D4 2002                       		move.l	d2,d0
000082D6 0441 0001                   		sub.w	#1,d1
000082DA 302E 000C                  		move.w	obj_y(a6),d0
000082DE 0480 0001 0000             		sub.l	#$10000,d0
000082E4 6100 D736                  		bsr	Object_ExtSprite
000082E8 2003                       		move.l	d3,d0
000082EA 0641 0002                   		add.w	#2,d1
000082EE 302E 000C                  		move.w	obj_y(a6),d0
000082F2 0680 0003 0000             		add.l	#$30000,d0
000082F8 0440 0004                  		sub.w	#4,d0
000082FC 6100 D71E                  		bsr	Object_ExtSprite
00008300                            		
00008300 0687 0000 4000              		add.l	#$4000,d7
00008306 4A87                        		tst.l	d7
00008308 6B00                        		bmi.s	@minus
0000830A 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00008310                            @minus:
00008310 DFAE 000C                  		add.l	d7,obj_y(a6)
00008314                            		
00008314 322E 000C                  		move.w	obj_y(a6),d1
00008318 303C 0140                  		move.w	#320,d0
0000831C D06D 0020                  		add.w	lvl_y(a5),d0
00008320 B240                       		cmp.w	d0,d1
00008322 6D00                       		blt.s	@lower_y
00008324 4EF9 0000 5AA8             		jmp	Object_Delete
0000832A                            @lower_y:
0000832A 2D47 0014                   		move.l	d7,obj_y_spd(a6)
0000832E 4E75                           		rts
00008330                            		
00008330                            ; ------------------------------------------------
00008330                            ; Bump, nothing (or reveral hidden block)
00008330                            ; ------------------------------------------------
00008330                            
00008330                            @bump_solid:
00008330 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00008334 2C2E 002C                  		move.l	y_coin_spd(a6),d6
00008338                            		
00008338                            ; 		move.l	#$0005,d1
00008338                            ; 		swap	d1
00008338                            ; 		move.w	#vramCoinRed,d1
00008338                            ;  		move.l	y_pos_coin(a6),d0
00008338                            ;  		move.w	obj_x(a6),d0
00008338                            ;  		swap	d0
00008338                            ; 		bsr	Object_ExtSprite
00008338                            		
00008338 082E 0000 003E              		btst	#0,block_flags(a6)
0000833E 6600                        		bne.s	@stopblock
00008340 223C 0000 0005             		move.l	#$0005,d1
00008346 4841                       		swap	d1
00008348 322E 0028                  		move.w	this_vram(a6),d1
0000834C 0041 8000                  		or.w	#$8000,d1
00008350                            		
00008350 302E 0008                  		move.w	obj_x(a6),d0
00008354 4840                       		swap	d0
00008356 302E 000C                  		move.w	obj_y(a6),d0
0000835A 6100 D6C0                  		bsr	Object_ExtSprite
0000835E 0687 0000 4000              		add.l	#$4000,d7
00008364 4A87                        		tst.l	d7
00008366 6B00                        		bmi.s	@minus2
00008368 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
0000836E                            @minus2:
0000836E DFAE 000C                  		add.l	d7,obj_y(a6)
00008372                            @stopblock:
00008372 0686 0000 4000              		add.l	#$4000,d6
00008378 DDAE 0030                  		add.l	d6,y_pos_coin(a6)
0000837C                            		
0000837C 302E 000C                  		move.w	obj_y(a6),d0
00008380 322E 0036                  		move.w	y_pos_main(a6),d1
00008384 B041                       		cmp.w	d1,d0
00008386 6F00                       		ble.s	@return3
00008388                            		
00008388 202E 0024                   		move.l	this_pos(a6),d0
0000838C 6100 E8CE                  		bsr	Prize_Locate
00008390                            ; 		move.b	#$F,d0
00008390                            ; 		move.b	d0,(a3)
00008390 6100 CFAE                   		bsr	Level_ShowPrize
00008394 08EE 0000 003E              		bset	#0,block_flags(a6)
0000839A 4EF9 0000 5AA8              		jmp	Object_Delete
000083A0                             		
000083A0                            @return3:
000083A0                            
000083A0                            ; 		move.w	y_pos_coin(a6),d0
000083A0                            ; 		move.w	y_pos_main(a6),d1
000083A0                            ; 		sub.w	#$10,d1
000083A0                            ; 		cmp.w	d1,d0
000083A0                            ; 		ble.s	@return2
000083A0                            ;   		jmp	Object_Delete
000083A0                            ;   		
000083A0                            ; @return2:
000083A0 2D46 002C                  		move.l	d6,y_coin_spd(a6)
000083A4 2D47 0014                   		move.l	d7,obj_y_spd(a6)
000083A8 4E75                        		rts
000083AA                             		
000083AA                            ; ------------------------------------------------
000083AA                            ; Bump block
000083AA                            ; ------------------------------------------------
000083AA                            
000083AA                            @bump_1up:
000083AA 223C 0000 0005             		move.l	#$0005,d1
000083B0 4841                       		swap	d1
000083B2 323C C5B0                  		move.w	#vram1up,d1
000083B6 202E 0030                   		move.l	y_pos_coin(a6),d0
000083BA 302E 0008                   		move.w	obj_x(a6),d0
000083BE 4840                        		swap	d0
000083C0 6100 D65A                  		bsr	Object_ExtSprite
000083C4 6000                       		bra.s	@from_coin_blue
000083C6                            		
000083C6                            @bump_coin_blue:
000083C6 223C 0000 0005             		move.l	#$0005,d1
000083CC 4841                       		swap	d1
000083CE 323C C5AC                  		move.w	#vramCoinBlue,d1
000083D2 202E 0030                   		move.l	y_pos_coin(a6),d0
000083D6 302E 0008                   		move.w	obj_x(a6),d0
000083DA 4840                        		swap	d0
000083DC 6100 D63E                  		bsr	Object_ExtSprite
000083E0 6000                       		bra.s	@from_coin_blue
000083E2                            		
000083E2                            @bump_coin:
000083E2 223C 0000 0005             		move.l	#$0005,d1
000083E8 4841                       		swap	d1
000083EA 323C C5A8                  		move.w	#vramCoinRed,d1
000083EE 202E 0030                   		move.l	y_pos_coin(a6),d0
000083F2 302E 0008                   		move.w	obj_x(a6),d0
000083F6 4840                        		swap	d0
000083F8 6100 D622                  		bsr	Object_ExtSprite
000083FC                            		
000083FC                            @from_coin_blue:
000083FC 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00008400 2C2E 002C                  		move.l	y_coin_spd(a6),d6
00008404                            		
00008404 082E 0000 003E              		btst	#0,block_flags(a6)
0000840A 6600                        		bne.s	@stopblock2
0000840C 223C 0000 0005             		move.l	#$0005,d1
00008412 4841                       		swap	d1
00008414 322E 0028                  		move.w	this_vram(a6),d1
00008418 0041 8000                  		or.w	#$8000,d1
0000841C                            		
0000841C 302E 0008                  		move.w	obj_x(a6),d0
00008420 4840                       		swap	d0
00008422 302E 000C                  		move.w	obj_y(a6),d0
00008426 6100 D5F4                  		bsr	Object_ExtSprite
0000842A 0687 0000 4000              		add.l	#$4000,d7
00008430 4A87                        		tst.l	d7
00008432 6B00                        		bmi.s	@minus3
00008434 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
0000843A                            @minus3:
0000843A DFAE 000C                  		add.l	d7,obj_y(a6)
0000843E                            @stopblock2:
0000843E 0686 0000 4000              		add.l	#$4000,d6
00008444 DDAE 0030                  		add.l	d6,y_pos_coin(a6)
00008448                            		
00008448 302E 000C                  		move.w	obj_y(a6),d0
0000844C 322E 0036                  		move.w	y_pos_main(a6),d1
00008450 B041                       		cmp.w	d1,d0
00008452 6F00                       		ble.s	@return4
00008454                            		
00008454 202E 0024                   		move.l	this_pos(a6),d0
00008458 6100 E802                  		bsr	Prize_Locate
0000845C 103C 000F                  		move.b	#$F,d0
00008460 1680                       		move.b	d0,(a3)
00008462 6100 CEDC                   		bsr	Level_ShowPrize
00008466 08EE 0000 003E              		bset	#0,block_flags(a6)
0000846C 4EF9 0000 5AA8              		jmp	Object_Delete
00008472                             		
00008472                            @return4:
00008472                            
00008472 302E 0030                  		move.w	y_pos_coin(a6),d0
00008476 322E 0036                  		move.w	y_pos_main(a6),d1
0000847A 0441 0010                  		sub.w	#$10,d1
0000847E B041                       		cmp.w	d1,d0
00008480 6F00                       		ble.s	@return5
00008482 4EF9 0000 5AA8               		jmp	Object_Delete
00008488                              		
00008488                            @return5:
00008488 2D46 002C                  		move.l	d6,y_coin_spd(a6)
0000848C 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00008490 4E75                       		rts
00008492                            		
00008492                            ; ------------------------------------------------
00008492                            ; Trampoline
00008492                            ; ------------------------------------------------
00008492                            
00008492                            @trampoline:
00008492 062E 0001 003C             		add.b	#1,tmr_1(a6)
00008498 0C2E 0010 003C             		cmp.b	#16,tmr_1(a6)
0000849E 6C00                       		bge.s	@finish
000084A0                            		
000084A0 223C 0000 0005             		move.l	#$0005,d1
000084A6 4841                       		swap	d1
000084A8 323C C594                  		move.w	#vramJmpBlock,d1
000084AC 102E 003D                  		move.b	tmr_1+1(a6),d0
000084B0 0600 0001                  		add.b	#1,d0
000084B4 0240 0002                  		and.w	#%10,d0
000084B8 E348                       		lsl.w	#1,d0
000084BA D240                       		add.w	d0,d1
000084BC 062E 0001 003D             		add.b	#1,tmr_1+1(a6)
000084C2                            		
000084C2 302E 0008                   		move.w	obj_x(a6),d0
000084C6 4840                        		swap	d0
000084C8 302E 000C                   		move.w	obj_y(a6),d0
000084CC 6000 D54E                  		bra	Object_ExtSprite
000084D0                            		
000084D0                            @finish:
000084D0 202E 0024                   		move.l	this_pos(a6),d0
000084D4 6100 CE6A                  		bsr	Level_ShowPrize
000084D8 4EF9 0000 5AA8               		jmp	Object_Delete
000084DE                              		
000084DE                            ; =================================================================
000084DE                            ; ------------------------------------------------
000084DE                            ; Subs
000084DE                            ; ------------------------------------------------
000084DE                            
000084DE                            		
000084DE                            ; =================================================================
000084DE                            		
000084DE                            		
000084DE                                		include	"engine/modes/level/data/objects/ball/code.asm" 
000084DE                            ; =================================================================
000084DE                            ; Object
000084DE                            ; 
000084DE                            ; A Ball
000084DE                            ; =================================================================
000084DE                            
000084DE                            ; =================================================================
000084DE                            ; ------------------------------------------------
000084DE                            ; Variables
000084DE                            ; ------------------------------------------------
000084DE                            
000084DE =000044B8                  varVramBall	equ	$4000|$4B8
000084DE                            
000084DE                            ; =================================================================
000084DE                            ; ------------------------------------------------
000084DE                            ; Code start
000084DE                            ; ------------------------------------------------
000084DE                            
000084DE                            Obj_Ball:
000084DE 7000                        		moveq	#0,d0
000084E0 102E 001D                   		move.b	obj_index(a6),d0
000084E4 D040                        		add.w	d0,d0
000084E6 323B 0000                   		move.w	@Index(pc,d0.w),d1
000084EA 4EBB 1000                   		jsr	@Index(pc,d1.w)
000084EE 6100 D7E8                   		bsr	Object_OffCheck
000084F2                             		
000084F2 203C 44B8 0000             		move.l	#(varVramBall<<16),d0
000084F8 102E 0020                  		move.b	obj_frame(a6),d0
000084FC 223C 0000 0000             		move.l	#map_Ball,d1
00008502 6000 D496                   		bra	Object_Show
00008506                             		
00008506                            ; ------------------------------------------------
00008506                            
00008506                            @Index:
00008506 0000                       		dc.w	@Init-@Index
00008508 0000                       		dc.w	@Main-@Index
0000850A                            		even
0000850A                            		
0000850A                            ; =================================================================
0000850A                            ; ------------------------------------------------
0000850A                            ; Index $00: Init
0000850A                            ; ------------------------------------------------
0000850A                            
0000850A                            @Init:
0000850A 062E 0001 001D             		add.b	#1,obj_index(a6)
00008510 2D7C 0101 0101 0004        		move.l	#$01010101,obj_size(a6)
00008518 2D7C 0000 6000 0014        		move.l	#$6000,obj_y_spd(a6)
00008520 422E 0020                  		clr.b	obj_frame(a6)
00008524 422E 001C                  		clr.b	obj_anim_spd(a6)
00008528 2D7C FFFE 8000 0010        		move.l	#-$18000,obj_x_spd(a6)
00008530                            		
00008530                            ; =================================================================
00008530                            ; ------------------------------------------------                  
00008530                            ; Index $01: Main
00008530                            ; ------------------------------------------------
00008530                            
00008530                            @Main:
00008530                            ; 		bsr.s	@move_ball
00008530                            ; 		bra	@check_touch
00008530                            		
00008530                            ; =================================================================
00008530                            ; ------------------------------------------------
00008530                            ; Subs
00008530                            ; ------------------------------------------------
00008530                            
00008530                            @move_ball:
00008530 2C2E 0010                   		move.l	obj_x_spd(a6),d6
00008534 2E2E 0014                   		move.l	obj_y_spd(a6),d7
00008538 DDAE 0008                   		add.l	d6,obj_x(a6)
0000853C DFAE 000C                   		add.l	d7,obj_y(a6)
00008540                             		
00008540 4AAE 0008                   		tst.l	obj_x(a6)
00008544 6A00                        		bpl.s	@fine_x
00008546 42AE 0008                   		clr.l	obj_x(a6)
0000854A 2C3C 0002 0000             		move.l	#$20000,d6
00008550                            @fine_x:
00008550 7000                       		moveq	#0,d0
00008552 3039 FFFF BC30             		move.w	(RAM_LvlPlanes+lvl_size_x),d0
00008558 E948                       		lsl.w	#4,d0
0000855A 4840                       		swap	d0
0000855C 222E 0008                  		move.l	obj_x(a6),d1
00008560 B280                       		cmp.l	d0,d1
00008562 6D00                       		blt.s	@fine_x_r
00008564 2C3C FFFE 0000             		move.l	#-$20000,d6
0000856A                            @fine_x_r:
0000856A                            	
0000856A                            ; ----------------------------------
0000856A                            
0000856A 0687 0000 4000              		add.l	#$4000,d7
00008570 0C87 0008 0000              		cmp.l	#$80000,d7
00008576 6D00                        		blt.s	@low_y
00008578 2E3C 0008 0000              		move.l	#$80000,d7
0000857E                            @low_y:
0000857E                             		
0000857E 4A87                        		tst.l	d7
00008580 6A00                        		bpl.s	@Freec
00008582 6100 DA0C                  		bsr	object_FindPrz_Ceiling
00008586 4A00                       		tst.b	d0
00008588 6600                       		bne.s	@FndCeilPrz
0000858A 6100 DDF8                  		bsr	object_FindPrz_CeilingSides
0000858E 4A00                       		tst.b	d0
00008590 6600                       		bne.s	@FndCeilPrz
00008592 2001                       		move.l	d1,d0
00008594 4A00                       		tst.b	d0
00008596 6600                       		bne.s	@FndCeilPrz
00008598                            		
00008598 6100 DA02                  		bsr	object_FindCol_Ceiling
0000859C 0800 0006                  		btst	#6,d0
000085A0 6600                       		bne.s	@Freec
000085A2 4A00                       		tst.b	d0
000085A4 6600                       		bne.s	@FoundCeiling
000085A6 6100 DDE8                  		bsr	object_FindCol_CeilingSides
000085AA 4A00                       		tst.b	d0
000085AC 6600                       		bne.s	@FoundCeiling
000085AE 2001                       		move.l	d1,d0
000085B0 4A00                       		tst.b	d0
000085B2 6600                       		bne.s	@FoundCeiling
000085B4 6000                       		bra.s	@Freec
000085B6                            @FndCeilPrz:
000085B6 0800 0007                  		btst	#7,d0
000085BA 6600                       		bne.s	@Freec
000085BC                            @FoundCeiling:
000085BC 0800 0006                  		btst	#6,d0
000085C0 6600                       		bne.s	@Freec
000085C2                            		
000085C2 6100 DFAE                  		bsr	object_SetCol_Ceiling
000085C6                            		
000085C6                            ; ----------------------------------
000085C6                            
000085C6                            @Freec:	
000085C6 4A87                        		tst.l	d7
000085C8 6B00                        		bmi.s	@Free
000085CA                             	
000085CA 6100 D88A                  		bsr	object_FindPrz_Floor
000085CE 0800 0007                  		btst	#7,d0
000085D2 6600                       		bne.s	@Free
000085D4 0800 0006                  		btst	#6,d0
000085D8 6600                       		bne.s	@Free
000085DA 4A00                       		tst.b	d0
000085DC 6600                       		bne.s	@przflr
000085DE                            		
000085DE 6100 D882                  		bsr	object_FindCol_Floor
000085E2 0800 0006                  		btst	#6,d0
000085E6 6600                       		bne.s	@Free
000085E8 4A00                       		tst.b	d0
000085EA 6700                       		beq.s	@Free
000085EC                            
000085EC                            @przflr:
000085EC 6100 DF0A                  		bsr	object_SetCol_Floor
000085F0 2E3C FFFA 0000              		move.l	#-$60000,d7
000085F6                            
000085F6 203C 0000 0000               		move.l	#SndSfx_PING,d0
000085FC 7202                         		moveq 	#2,d1
000085FE 7401                         		moveq	#1,d2
00008600 6100 8E3A                    		bsr	Audio_Track_play
00008604                            @Free:
00008604                            
00008604                            ; ----------------------------------------
00008604                            
00008604                            ;  		bsr	object_FindPrz_WallSides
00008604                            ; ;  		tst.l	d6
00008604                            ; ;  		bmi.s	@to_left
00008604                            ; 		btst	#7,d0
00008604                            ; 		bne.s	@FreeWall2
00008604                            ; 		btst	#6,d0
00008604                            ; 		bne.s	@FreeWall2
00008604                            ; 		tst.b	d0
00008604                            ; 		bne.s	@FoundW
00008604                            ; 		bra.s	@FreeWall2
00008604                            ; @to_left:
00008604                            ; ; 		tst.l	d6
00008604                            ; ; 		bpl.s	@FreeWall2
00008604                            ; 		btst	#7,d1
00008604                            ; 		bne.s	@FreeWall2
00008604                            ; 		btst	#6,d1
00008604                            ; 		bne.s	@FreeWall2
00008604                            ; 		tst.b	d1
00008604                            ; 		bne.s	@FoundW
00008604                            ; 		
00008604                            ; @FreeWall2:
00008604 6100 DB1A                  		bsr	object_FindCol_WallSides
00008608 4A86                       		tst.l	d6
0000860A 6B00                       		bmi.s	@dontlft
0000860C 4A00                        		tst.b	d0
0000860E 6600                        		bne.s	@FoundW
00008610                            @dontlft:
00008610 4A86                       		tst.l	d6
00008612 6A00                       		bpl.s	@FreeWall
00008614 2001                       		move.l	d1,d0
00008616 4A00                         		tst.b	d0
00008618 6600                        		bne.s	@FoundW
0000861A 6000                       		bra.s	@FreeWall
0000861C                            
0000861C                            @FoundW:
0000861C 0C00 0002                  		cmp.b	#2,d0
00008620 6C00                       		bge.s	@FreeWall
00008622                            ; 		bsr	object_SetCol_Wall
00008622 4486                       		neg.l	d6
00008624 086E 0000 001E             		bchg	#bitobj_flipH,obj_status(a6)
0000862A                            @FreeWall:
0000862A                            
0000862A                            ; ------------------------------------
0000862A                            
0000862A 042E 0001 001C              		sub.b	#1,obj_anim_spd(a6)
00008630 6A00                        		bpl.s	@plusanim
00008632 1D7C 0007 001C              		move.b	#7,obj_anim_spd(a6)
00008638 062E 0001 0020               		add.b	#1,obj_frame(a6)
0000863E 022E 0003 0020              		and.b	#%11,obj_frame(a6)
00008644                            @plusanim:
00008644                            
00008644                            ; ------------------------------------
00008644                            
00008644 2D46 0010                   		move.l	d6,obj_x_spd(a6)
00008648 2D47 0014                   		move.l	d7,obj_y_spd(a6)
0000864C                            ; 		rts
0000864C                            		
0000864C                            ; =================================================================
0000864C                            ; ----------------------------------
0000864C                            ; Check if touched
0000864C                            ; ----------------------------------
0000864C                            
0000864C                            @check_touch:
0000864C 6100 DF6E                  		bsr	objTouch_Top
00008650 4A00                       		tst.b	d0
00008652 6600                       		bne.s	@touch_flag
00008654 6100 E004                  		bsr	objTouch_Bottom
00008658 4A00                       		tst.b	d0
0000865A 6600                       		bne.s	@touch_flag
0000865C                            		
0000865C 6100 E09C                  		bsr	objTouch_Sides
00008660 4A00                       		tst.b	d0
00008662 6600                       		bne.s	@touch_flag
00008664 4840                       		swap	d0
00008666 4A00                       		tst.b	d0
00008668 6600                       		bne.s	@touch_flag
0000866A 4E75                       		rts
0000866C                            		
0000866C                            ; -----------------------------------
0000866C                            
0000866C                            @touch_flag:
0000866C 6100 E270                  		bsr	objPlyrHurtKill
00008670 6700                       		beq.s	@return
00008672 323C 44B8                     		move.w	#varVramBall,d1
00008676 142E 0020                   		move.b	obj_frame(a6),d2
0000867A 203C 0000 0000             		move.l	#map_Ball,d0
00008680 260C                       		move.l	a4,d3
00008682 6100 E602                  		bsr	objAction_SetStomp
00008686 6000 D630                  		bra	Object_IsGone
0000868A                            @return:
0000868A 4E75                       		rts
0000868A 4E75                       		rts
0000868C                               		include	"engine/modes/level/data/objects/endflag/code.asm"
0000868C                            ; =================================================================
0000868C                            ; Object
0000868C                            ; 
0000868C                            ; Level end flag
0000868C                            ; =================================================================
0000868C                            
0000868C                            ; =================================================================
0000868C                            ; ------------------------------------------------
0000868C                            ; Variables
0000868C                            ; ------------------------------------------------
0000868C                            
0000868C =00006540                  varEndFlagVRAM	equ	$6000|$540
0000868C                            
0000868C                            ; =================================================================
0000868C                            ; ------------------------------------------------
0000868C                            ; Code start
0000868C                            ; ------------------------------------------------
0000868C                            
0000868C                            Obj_EndFlag:
0000868C 7000                        		moveq	#0,d0
0000868E 102E 001D                   		move.b	obj_index(a6),d0
00008692 D040                        		add.w	d0,d0
00008694 323B 0000                   		move.w	@Index(pc,d0.w),d1
00008698 4EBB 1000                   		jsr	@Index(pc,d1.w)
0000869C                            		
0000869C 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
000086A2 302E 0008                  		move.w	obj_x(a6),d0
000086A6 0440 0140                  		sub.w	#320,d0
000086AA 322C 0008                  		move.w	obj_x(a4),d1
000086AE B240                       		cmp.w	d0,d1
000086B0 6D00                       		blt.s	@im_gone
000086B2                            		
000086B2 203C 6540 0000                 		move.l	#(varEndFlagVRAM<<16),d0
000086B8 102E 0020                     		move.b	obj_frame(a6),d0	
000086BC 223C 0000 0000              		move.l	#mapObj_EndFlag,d1
000086C2 6100 D2D6                    		bsr	Object_Show
000086C6                             		
000086C6 203C 6540 0000                		move.l	#(varEndFlagVRAM<<16),d0
000086CC 102E 0020                     		move.b	obj_frame(a6),d0
000086D0 223C 0000 0000             		move.l	#dplcObj_EndFlag,d1
000086D6 243C 0000 0000             		move.l	#artObj_EndFlag,d2
000086DC 6000 D262                  		bra	Object_DPLC
000086E0                            		
000086E0                            @im_gone:
000086E0 4E75                       		rts
000086E2                            		
000086E2                            ; ------------------------------------------------
000086E2                            
000086E2                            @Index:
000086E2 0000                       		dc.w	@Init-@Index
000086E4 0000                       		dc.w	@Main-@Index
000086E6                            		even
000086E6                            		
000086E6                            ; =================================================================
000086E6                            ; ------------------------------------------------
000086E6                            ; Index $00: Init
000086E6                            ; ------------------------------------------------
000086E6                            
000086E6                            @Init:
000086E6 062E 0001 001D             		add.b	#1,obj_index(a6)
000086EC 2D7C 0202 0303 0004        		move.l	#$02020303,obj_size(a6)
000086F4 4E75                       		rts
000086F6                            		
000086F6                            ; =================================================================
000086F6                            ; ------------------------------------------------                  
000086F6                            ; Index $01: Main
000086F6                            ; ------------------------------------------------
000086F6                            
000086F6                            @Main:
000086F6 042E 0001 001C             		sub.b	#1,obj_anim_spd(a6)
000086FC 6A00                       		bpl.s	@plus
000086FE 1D7C 0006 001C             		move.b	#6,obj_anim_spd(a6)
00008704 062E 0001 0020             		add.b	#1,obj_frame(a6)
0000870A 0C2E 0003 0020             		cmp.b	#3,obj_frame(a6)
00008710 6D00                       		blt.s	@plus
00008712 422E 0020                  		clr.b	obj_frame(a6)
00008716                            @plus:
00008716 6100 DE8A                  		bsr	objTouch
0000871A 4A00                       		tst.b	d0
0000871C 6700                       		beq.s	@return
0000871E                            
0000871E 0679 0001 FFFF DC06          		add.w	#1,(RAM_CurrLevel)
00008726 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
0000872E                            @return:
0000872E 4E75                       		rts
00008730                            		
00008730                            ; =================================================================
00008730                            		
00008730                            		
00008730                                		include	"engine/modes/level/data/objects/actionscript/code.asm"  
00008730                            ; =================================================================
00008730                            ; Object (SPECIAL)
00008730                            ; 
00008730                            ; Action script
00008730                            ; =================================================================
00008730                            
00008730                            ; =================================================================
00008730                            ; ------------------------------------------------
00008730                            ; Variables
00008730                            ; ------------------------------------------------
00008730                            
00008730                            		rsset obj_ram
00008730 =00000024                  gotMaps		rs.l 1
00008730 =00000028                  gotVram		rs.w 1
00008730 =0000002A                  gotFrame	rs.w 1 		;its a byte
00008730 =0000002C                  gotWho		rs.l 1
00008730                            
00008730                            ; =================================================================
00008730                            ; ------------------------------------------------
00008730                            ; Code start
00008730                            ; ------------------------------------------------
00008730                            
00008730                            obj_actionscript:
00008730 7000                       		moveq	#0,d0
00008732 102E 001D                  		move.b	obj_index(a6),d0
00008736 D040                       		add.w	d0,d0
00008738 323B 0000                  		move.w	@list(pc,d0.w),d1
0000873C 4EFB 1000                  		jmp	@list(pc,d1.w)
00008740                            	
00008740                            ; ------------------------------------------------
00008740                            
00008740                            @list:
00008740 0000                       		dc.w @killobj_init-@list
00008742 0000                       		dc.w @killobj_main-@list
00008744                            
00008744 0000                       		dc.w 0
00008746 0000                       		dc.w 0
00008748                            		
00008748                            ; ------------------------------------------------
00008748                            ; Action: kill object
00008748                            ; ------------------------------------------------
00008748                            
00008748                            @killobj_init:
00008748 002E 0001 001D             		or.b	#1,obj_index(a6)
0000874E 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
00008754 08AE 0006 001E             		bclr	#bitobj_hit,obj_status(a6)
0000875A                            		
0000875A 08EE 0001 001E             		bset	#bitobj_FlipV,obj_status(a6)
00008760 2D7C FFFC 0000 0014        		move.l	#-$40000,obj_y_spd(a6)
00008768                            
00008768                            		;Read player
00008768 202E 002C                  		move.l	gotWho(a6),d0
0000876C 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
00008772 6600                       		bne.s	@notplayer
00008774 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
0000877A 297C FFFD 0000 0014        		move.l	#-$30000,obj_y_spd(a4)
00008782 197C 0002 001A              		move.b	#varPlyAniJump,obj_anim_id(a4)
00008788 08EC 0002 001E             		bset 	#bitobj_air,obj_status(a4)
0000878E                            @notplayer:
0000878E 203C 0000 0000               		move.l	#SndSfx_HitEnemy,d0
00008794 7202                         		moveq 	#2,d1
00008796 7401                         		moveq	#1,d2
00008798 6100 8CA2                    		bsr	Audio_Track_play
0000879C                              		
0000879C                            ; --------------------------
0000879C                            
0000879C                            @killobj_main:
0000879C 2C2E 0010                  		move.l	obj_x_spd(a6),d6
000087A0 2E2E 0014                  		move.l	obj_y_spd(a6),d7
000087A4 0687 0000 4000             		add.l	#$4000,d7
000087AA DDAE 0008                  		add.l	d6,obj_x(a6)
000087AE DFAE 000C                  		add.l	d7,obj_y(a6)
000087B2 2D46 0010                  		move.l	d6,obj_x_spd(a6)
000087B6 2D47 0014                  		move.l	d7,obj_y_spd(a6)
000087BA                            		
000087BA 6100 D51C                   		bsr	Object_OffCheck
000087BE 7000                       		moveq	#0,d0
000087C0 302E 0028                      		move.w	gotVram(a6),d0
000087C4 4840                           		swap	d0
000087C6 102E 002A                   		move.b	gotFrame(a6),d0
000087CA 222E 0024                  		move.l	gotMaps(a6),d1
000087CE 6000 D1CA                   		bra	Object_Show
000087D2                            		
000087D2                            ; ------------------------------------------------
000087D2                            ; Action: hurt the enemy
000087D2                            ; ------------------------------------------------
000087D2                            
000087D2                            ; =================================================================
000087D2                            ; =================================================================
000087D2                                		include	"engine/modes/level/data/objects/hudinfo/code.asm"  
000087D2                            ; =================================================================
000087D2                            ; Object
000087D2                            ; 
000087D2                            ; Level end flag
000087D2                            ; =================================================================
000087D2                            
000087D2                            ; =================================================================
000087D2                            ; ------------------------------------------------
000087D2                            ; Variables
000087D2                            ; ------------------------------------------------
000087D2                            
000087D2 =0000C580                  varHudBase	equ	$C000|$580
000087D2 =0000C5A8                  varVramHudCoinR	equ	$C000|$5A8
000087D2 =0000C5AC                  varVramHudCoinB	equ	$C000|$5AC
000087D2 =0000C5B0                  varHudLife	equ	$C000|$5B0
000087D2 =0000C5BC                  varHudLifeBar	equ	$C000|$5BC
000087D2 =0000C5C0                  varHudDigits	equ	$C000|$5C0
000087D2                            
000087D2                            		rsset obj_ram
000087D2 =00000024                  ramLastCoins	rs.w	1
000087D2 =00000026                  ramDecCoins 	rs.w	1
000087D2 =00000028                  ramLastLives	rs.w	1
000087D2 =0000002A                  ramDecLives 	rs.w	1
000087D2                            
000087D2                            ; =================================================================
000087D2                            ; ------------------------------------------------
000087D2                            ; Code start
000087D2                            ; ------------------------------------------------
000087D2                            
000087D2                            obj_HudInfo:
000087D2 7000                        		moveq	#0,d0
000087D4 102E 001D                   		move.b	obj_index(a6),d0
000087D8 D040                        		add.w	d0,d0
000087DA 323B 0000                   		move.w	@Index(pc,d0.w),d1
000087DE 4EFB 1000                   		jmp	@Index(pc,d1.w)
000087E2                             		
000087E2                            ; ------------------------------------------------
000087E2                            
000087E2                            @Index:
000087E2 0000                       		dc.w	@Init-@Index
000087E4 0000                       		dc.w	@Main-@Index
000087E6                            		even
000087E6                            		
000087E6                            ; =================================================================
000087E6                            ; ------------------------------------------------
000087E6                            ; Index $00: Init
000087E6                            ; ------------------------------------------------
000087E6                            
000087E6                            @Init:
000087E6 062E 0001 001D             		add.b	#1,obj_index(a6)
000087EC 08EE 0007 001E              		bset	#bitobj_stay,obj_status(a6)
000087F2 3D7C 0000 0024             		move.w	#0,ramLastCoins(a6)
000087F8                            		
000087F8 3D7C 0001 0024             		move.w	#1,ramLastCoins(a6)
000087FE 3D7C 0001 0028             		move.w	#1,ramLastLives(a6)
00008804                            		
00008804                            ; =================================================================
00008804                            ; ------------------------------------------------                  
00008804                            ; Index $01: Main
00008804                            ; ------------------------------------------------
00008804                            
00008804                            @Main:
00008804 203C 0008 0008             		move.l	#8<<16|8,d0
0000880A 223C 0005 C5A8             		move.l	#5<<16|varVramHudCoinR,d1
00008810 6100 D20A                  		bsr	Object_ExtSprite
00008814 203C 0008 0018             		move.l	#8<<16|24,d0
0000881A 223C 0005 C5B0             		move.l	#5<<16|varHudLife,d1
00008820 6100 D1FA                  		bsr	Object_ExtSprite
00008824                            		
00008824                            
00008824 203C 0008 0030             		move.l	#8<<16|48,d0
0000882A 223C 0000 C5BC             		move.l	#varHudLifeBar,d1
00008830 3439 FFFF DC04             		move.w	(RAM_P1_Hits),d2
00008836 0C42 0008                  		cmp.w	#8,d2
0000883A 6D00                       		blt.s	@lower
0000883C 343C 0008                  		move.w	#8,d2
00008840                            @lower:
00008840 4A42                       		tst.w	d2
00008842 6700                       		beq.s	@dead
00008844 0442 0001                  		sub.w	#1,d2
00008848 4A42                       		tst.w	d2
0000884A 6600                       		bne.s	@addbox
0000884C 0641 0001                  		add.w	#1,d1
00008850                            @addbox:
00008850 6100 D1CA                  		bsr	Object_ExtSprite
00008854 0680 0008 0000             		add.l	#$80000,d0
0000885A 51CA FFF4                  		dbf	d2,@addbox
0000885E                            @dead:
0000885E                            
0000885E 7400                       		moveq	#0,d2
00008860 3439 FFFF DC02             		move.w	(RAM_P1_Coins),d2
00008866 B46E 0024                  		cmp.w	ramLastCoins(a6),d2
0000886A 6700                       		beq.s	@dontupdc
0000886C 3D42 0024                  		move.w	d2,ramLastCoins(a6)
00008870 6100 86D4                  		bsr	HexToDec
00008874 3D42 0026                  		move.w	d2,ramDecCoins(a6)
00008878                            @dontupdc:
00008878 203C 0018 0010             		move.l	#24<<16|16,d0
0000887E 342E 0026                  		move.w	ramDecCoins(a6),d2
00008882 6100 0000                  		bsr	@showsprval
00008886                            		
00008886 7400                       		moveq	#0,d2
00008888 3439 FFFF DC00             		move.w	(RAM_P1_Lives),d2
0000888E B46E 0028                  		cmp.w	ramLastLives(a6),d2
00008892 6700                       		beq.s	@dontupdlvs
00008894 3D42 0028                  		move.w	d2,ramLastLives(a6)
00008898 6100 86AC                  		bsr	HexToDec
0000889C 3D42 002A                  		move.w	d2,ramDecLives(a6)
000088A0                            @dontupdlvs:
000088A0 203C 0018 0020             		move.l	#24<<16|32,d0
000088A6 342E 002A                  		move.w	ramDecLives(a6),d2
000088AA                            		
000088AA                            ; -----------------------------
000088AA                            
000088AA                            @showsprval:
000088AA 7601                       		moveq	#1,d3
000088AC E89A                       		ror.l	#4,d2
000088AE                            @nxtcoinnum:
000088AE 7200                       		moveq	#0,d1
000088B0 1202                       		move.b	d2,d1
000088B2 0201 000F                  		and.b	#$F,d1
000088B6 0641 C5C0                  		add.w	#varHudDigits,d1
000088BA E99A                       		rol.l	#4,d2
000088BC 0680 0008 0000             		add.l	#$00080000,d0
000088C2 6100 D158                  		bsr	Object_ExtSprite	
000088C6 51CB FFE6                  		dbf	d3,@nxtcoinnum
000088CA 4E75                       		rts
000088CC                            		
000088CC                            ; =================================================================
000088CC                            		
000088CC                            		
000088CC                                		
000088CC                                		
000088CC                            		
000088CC                            ; ====================================================================
000088CC                            ; --------------------------------------------
000088CC                            ; VBlank
000088CC                            ; --------------------------------------------
000088CC                            
000088CC                            ; ====================================================================		
000088CC                            ; --------------------------------------------
000088CC                            ; HBlank
000088CC                            ; --------------------------------------------
000088CC                            		
000088CC                            ; ====================================================================
000088CC                            ; ====================================================================
000088CC                            		
000088CC                            	
000088CC                            ; ====================================================================
000088CC                            ; -------------------------------------------------
000088CC                            ; DATA
000088CC                            ; -------------------------------------------------
000088CC                            
000088CC                            THIS_BANK_1:
000088CC                            		include	"engine/modes/title/data.asm"
000088CC                            ; ====================================================================
000088CC                            ; -------------------------------------------------
000088CC                            ; Title DATA
000088CC                            ; -------------------------------------------------
000088CC                            		
000088CC                            Pal_Title:	incbin	"engine/modes/title/data/pal.bin"
000088EC                            		even
000088EC                            Map_Title:	incbin	"engine/modes/title/data/map.bin"
000091AC                            		even
000091AC                            Art_Title:	incbin	"engine/modes/title/data/art.bin"
0000B48C                            Art_Title_End:	even
0000B48C                            
0000B48C                            ; Pal_Gen3:	incbin	"engine/modes/title/data/pal_2.bin"
0000B48C                            ; 		even
0000B48C                            ; Map_Gen3:	incbin	"engine/modes/title/data/map_2.bin"
0000B48C                            ; 		even
0000B48C                            ; Art_Gen3:	incbin	"engine/modes/title/data/art_2.bin"
0000B48C                            ; Art_Gen3_End:	even
0000B48C                            
0000B48C                            ; -------------------------------------------------
0000B48C                            				
0000B48C                            ; --------------------------
0000B48C                            ; SFX: COIN
0000B48C                            ; --------------------------
0000B48C                            
0000B48C                            Snd_TestNotes:
0000B48C 00FF                       		dc.b 0,-1
0000B48E 0000 0000                  		dc.l @notes
0000B492 0000 0000                       		dc.l @ins
0000B496 0001                            		dc.w 1
0000B498 0240 800F                        		dc.b FM_3,64,$80,$F
0000B49C                            @notes:		incbin "engine/sound/testins.bin"
0000B552 00                               		even
0000B552 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins 
0000B558 0001 0000                  @ymha:		dc.w 1,0
0000B55C 0000 0000                  		dc.l test_fm
0000B560 0002 0000                  		dc.w 2,0
0000B564 0000 0000                  		dc.l test_fm+$19
0000B568 0003 0000                  		dc.w 3,0
0000B56C 0000 0000                  		dc.l test_fm
0000B570 0004 0000                  		dc.w 4,0
0000B574 0000 0000                  		dc.l test_fm
0000B578 0005 0000                  		dc.w 5,0
0000B57C 0000 0000                  		dc.l test_fm
0000B580 0006 0000                  		dc.w 6,0
0000B584 0000 0000                  		dc.l test_fm
0000B588                            	
0000B588 0001 0004                  @noise:		dc.w 1,%100
0000B58C                            		even
0000B58C                            
0000B58C                            test_fm:	incbin	"engine/sound/instruments/FM/bass/bass_jazz.bin"
0000B5A5                            		incbin	"engine/sound/instruments/FM/brass/brass_trumpet.bin"
0000B5BE                            		even
0000B5BE                            		
0000B5BE                            ; -------------------------------------------------
0000B5BE                            
0000B5BE                            fmVoice_bell_1:
0000B5BE                            		incbin	"engine/sound/instruments/fm/bell/bell_xmas.bin"
0000B5D8 00                         		even
0000B5D8                            fmVoice_piano_rave:
0000B5D8                            		incbin	"engine/sound/instruments/fm/piano/piano_rave_old.bin"
0000B5F2 00                         		even
0000B5F2                            fmVoice_bass_ambient:
0000B5F2                            		incbin	"engine/sound/instruments/fm/bass/bass_ambient.bin"
0000B60C 00                         		even
0000B60C                            fmVoice_bass_2:
0000B60C                            		incbin	"engine/sound/instruments/fm/bass/bass_low.bin"
0000B626 00                         		even
0000B626                            fmVoice_belllow:
0000B626                            		incbin	"engine/sound/instruments/fm/brass/brass_funny.bin"
0000B640 00                         		even
0000B640                            fmVoice_flaute_2:
0000B640                            		incbin	"engine/sound/instruments/fm/ding_1.bin"
0000B65A 00                         		even
0000B65A                            fmVoice_brass_trumpet:
0000B65A                            		incbin	"engine/sound/instruments/fm/brass/brass_trumpet.bin"
0000B674 00                         		even
0000B674                            fmVoice_bell_low:
0000B674                            		incbin	"engine/sound/instruments/fm/bell/bell_low.bin"
0000B68E 00                         		even
0000B68E                            		
0000B68E                            fm_hatopen:
0000B68E                            		incbin	"engine/sound/instruments/fm/drums/fm3_openhat.bin"
0000B6A8 00                         		even
0000B6A8                            fm_hatclosed:
0000B6A8                            		incbin	"engine/sound/instruments/fm/drums/fm3_closedhat.bin"
0000B6C2 00                         		even
0000B6C2                            
0000B6C2                            fmVoice_dolp_wha:
0000B6C2                            		incbin	"engine/sound/instruments/fm/fx/dolphin_wah.bin"
0000B740 00                         		even
0000B740                            fmVoice_openhat:
0000B740                            		incbin	"engine/sound/instruments/fm/wsb95_bullpen.bin"
0000B7F0 00                         		even
0000B7F0                            ; 		
0000B7F0                            ; 		cnop 0,$8000
0000B7F0                            ; wav_yobeats:	incbin	"engine/sound/instruments/dac/beat_yo.wav",$2C
0000B7F0                            ; wav_yobeats_e:	even
0000B7F0                            ; 
0000B7F0                            ; hrdcbyte:	incbin	"engine/sound/instruments/dac/hrdcbyte.wav",$2C
0000B7F0                            ; hrdcbyte_e:	even
0000B7F0                            ; 
0000B7F0                            ; dnceheye:	incbin	"engine/sound/instruments/dac/dnceheye.wav",$2C
0000B7F0                            ; dnceheye_e:	even
0000B7F0                            
0000B7F0                            ; 		if MCD|MARS=0
0000B7F0                            ; TEST_WAV:	incbin "ideas/test.wav",$2C,$200000
0000B7F0                            ; TEST_WAV_end:	even
0000B7F0                            ; 		endif
0000B7F0                            
0000B7F0                            wav_kick:	incbin	"engine/sound/instruments/dac/sauron_kick.wav",$2C
0000C77E                            wav_kick_e:
0000C77E                            wav_tom:	incbin	"engine/sound/instruments/dac/sauron_tom.wav",$2C
0000D338                            wav_tom_e:
0000D338                            wav_snare:	incbin	"engine/sound/instruments/dac/snare.wav",$2C
0000E70C                            wav_snare_e:
0000E70C                            		even
0000E70C                            		
0000E70C                            		
0000E70C                            		include "engine/modes/level/data.asm"
0000E70C                            ; =================================================================
0000E70C                            ; ------------------------------------------------
0000E70C                            ; DMA art
0000E70C                            ; ------------------------------------------------
0000E70C                            
0000E70C                            		cnop 0,$4000
00010000                            Art_Player:	incbin	"engine/modes/level/data/objects/player/data/art.bin"
000118C0                            		even
000118C0                            artObj_EndFlag:	incbin	"engine/modes/level/data/objects/endflag/data/art.bin"
00012780                             		even
00012780                            Art_AnimCoin:	incbin	"engine/modes/level/data/layouts/coin_art.bin"
00012D80                            		even
00012D80                            
00012D80                            ; =================================================================
00012D80                            ; ------------------------------------------------
00012D80                            ; Non-DMA art
00012D80                            ; ------------------------------------------------
00012D80                            	
00012D80                            ; ---------------------------
00012D80                            ; Objects
00012D80                            ; ---------------------------
00012D80                            
00012D80                            		cnop 0,$800
00013000                            Art_dadou:	incbin	"engine/modes/level/data/objects/dadou/data/art.bin"
00014100                            art_dadou_end:
00014100                             		even
00014100                            Art_pikudo:	incbin	"engine/modes/level/data/objects/pikudo/data/art.bin"
000149A0                            art_pikudo_end:
000149A0                             		even
000149A0                             		
000149A0                            artObj_Platform:
000149A0                            		incbin	"engine/modes/level/data/objects/platform/data/art.bin"
00014A60                            artObj_Platform_e:
00014A60                             		even
00014A60                            artObj_Ball:	incbin	"engine/modes/level/data/objects/ball/data/art.bin"
00014D60                            artObj_Ball_e:	even
00014D60                             		
00014D60                            ; =================================================================
00014D60                            ; ------------------------------------------------
00014D60                            ; Other stuff
00014D60                            ; ------------------------------------------------
00014D60                            
00014D60                            ; ---------------------------
00014D60                            ; Player
00014D60                            ; ---------------------------
00014D60                            
00014D60                            Map_Player:	include	"engine/modes/level/data/objects/player/data/map.asm"
00014D60                            @mappings:
00014D60 0000                       		dc.w @frame_0-@mappings
00014D62 0000                       		dc.w @frame_1-@mappings
00014D64 0000                       		dc.w @frame_2-@mappings
00014D66 0000                       		dc.w @frame_3-@mappings
00014D68 0000                       		dc.w @frame_4-@mappings
00014D6A 0000                       		dc.w @frame_5-@mappings
00014D6C 0000                       		dc.w @frame_6-@mappings
00014D6E 0000                       		dc.w @frame_7-@mappings
00014D70 0000                       		dc.w @frame_8-@mappings
00014D72 0000                       		dc.w @frame_9-@mappings
00014D74 0000                       		dc.w @frame_10-@mappings
00014D76 0000                       		dc.w @frame_11-@mappings
00014D78 0000                       		dc.w @frame_12-@mappings
00014D7A 0000                       		dc.w @frame_13-@mappings
00014D7C 0000                       		dc.w @frame_14-@mappings
00014D7E 0000                       		dc.w @frame_15-@mappings
00014D80 0000                       		dc.w @frame_16-@mappings
00014D82                            @frame_0:
00014D82 03                         		dc.b $3
00014D83                            
00014D83 000C 0000 F0               		dc.b $0,$C,$0,$0,$F0
00014D88 F005 0004 F8               		dc.b $F0,$5,$0,$4,$F8
00014D8D 0804 0008 F8               		dc.b $8,$4,$0,$8,$F8
00014D92                            		even
00014D92                            @frame_1:
00014D92 03                         		dc.b $3
00014D93                            
00014D93 000C 0000 F0               		dc.b $0,$C,$0,$0,$F0
00014D98 F005 0004 F8               		dc.b $F0,$5,$0,$4,$F8
00014D9D 0804 0008 F8               		dc.b $8,$4,$0,$8,$F8
00014DA2                            		even
00014DA2                            @frame_2:
00014DA2 04                         		dc.b $4
00014DA3                            
00014DA3 0009 0000 F0               		dc.b $0,$9,$0,$0,$F0
00014DA8 F005 0006 F8               		dc.b $F0,$5,$0,$6,$F8
00014DAD F800 000A 08               		dc.b $F8,$0,$0,$A,$8
00014DB2 0800 000B 08               		dc.b $8,$0,$0,$B,$8
00014DB8 00                         		even
00014DB8                            @frame_3:
00014DB8 03                         		dc.b $3
00014DB9                            
00014DB9 F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
00014DBE F800 0008 08               		dc.b $F8,$0,$0,$8,$8
00014DC3 0800 0009 08               		dc.b $8,$0,$0,$9,$8
00014DC8                            		even
00014DC8                            @frame_4:
00014DC8 02                         		dc.b $2
00014DC9                            
00014DC9 F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
00014DCE F800 0008 08               		dc.b $F8,$0,$0,$8,$8
00014DD4 00                         		even
00014DD4                            @frame_5:
00014DD4 03                         		dc.b $3
00014DD5                            
00014DD5 080C 0000 F0               		dc.b $8,$C,$0,$0,$F0
00014DDA F006 0004 F8               		dc.b $F0,$6,$0,$4,$F8
00014DDF F800 000A 08               		dc.b $F8,$0,$0,$A,$8
00014DE4                            		even
00014DE4                            @frame_6:
00014DE4 04                         		dc.b $4
00014DE5                            
00014DE5 0009 0000 F0               		dc.b $0,$9,$0,$0,$F0
00014DEA F005 0006 F8               		dc.b $F0,$5,$0,$6,$F8
00014DEF F800 000A 08               		dc.b $F8,$0,$0,$A,$8
00014DF4 0800 000B 08               		dc.b $8,$0,$0,$B,$8
00014DFA 00                         		even
00014DFA                            @frame_7:
00014DFA 03                         		dc.b $3
00014DFB                            
00014DFB F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
00014E00 F800 0008 08               		dc.b $F8,$0,$0,$8,$8
00014E05 0800 0009 08               		dc.b $8,$0,$0,$9,$8
00014E0A                            		even
00014E0A                            @frame_8:
00014E0A 02                         		dc.b $2
00014E0B                            
00014E0B F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
00014E10 F800 0008 08               		dc.b $F8,$0,$0,$8,$8
00014E16 00                         		even
00014E16                            @frame_9:
00014E16 03                         		dc.b $3
00014E17                            
00014E17 080C 0000 F0               		dc.b $8,$C,$0,$0,$F0
00014E1C F006 0004 F8               		dc.b $F0,$6,$0,$4,$F8
00014E21 F800 000A 08               		dc.b $F8,$0,$0,$A,$8
00014E26                            		even
00014E26                            @frame_10:
00014E26 04                         		dc.b $4
00014E27                            
00014E27 F807 0000 F0               		dc.b $F8,$7,$0,$0,$F0
00014E2C F008 0008 F8               		dc.b $F0,$8,$0,$8,$F8
00014E31 F802 000B 00               		dc.b $F8,$2,$0,$B,$0
00014E36 F800 000E 08               		dc.b $F8,$0,$0,$E,$8
00014E3C 00                         		even
00014E3C                            @frame_11:
00014E3C 04                         		dc.b $4
00014E3D                            
00014E3D F807 0000 F0               		dc.b $F8,$7,$0,$0,$F0
00014E42 F008 0008 F8               		dc.b $F0,$8,$0,$8,$F8
00014E47 F802 000B 00               		dc.b $F8,$2,$0,$B,$0
00014E4C F800 000E 08               		dc.b $F8,$0,$0,$E,$8
00014E52 00                         		even
00014E52                            @frame_12:
00014E52 03                         		dc.b $3
00014E53                            
00014E53 F008 0000 F0               		dc.b $F0,$8,$0,$0,$F0
00014E58 F803 0003 F8               		dc.b $F8,$3,$0,$3,$F8
00014E5D F802 0007 00               		dc.b $F8,$2,$0,$7,$0
00014E62                            		even
00014E62                            @frame_13:
00014E62 04                         		dc.b $4
00014E63                            
00014E63 F009 0000 F0               		dc.b $F0,$9,$0,$0,$F0
00014E68 0002 0006 F8               		dc.b $0,$2,$0,$6,$F8
00014E6D 0001 0009 00               		dc.b $0,$1,$0,$9,$0
00014E72 F800 000B 08               		dc.b $F8,$0,$0,$B,$8
00014E78 00                         		even
00014E78                            @frame_14:
00014E78 03                         		dc.b $3
00014E79                            
00014E79 F00D 0000 F0               		dc.b $F0,$D,$0,$0,$F0
00014E7E 0005 0008 F8               		dc.b $0,$5,$0,$8,$F8
00014E83 1000 000C 00               		dc.b $10,$0,$0,$C,$0
00014E88                            		even
00014E88                            @frame_15:
00014E88 03                         		dc.b $3
00014E89                            
00014E89 F808 0000 F0               		dc.b $F8,$8,$0,$0,$F0
00014E8E F008 0003 F8               		dc.b $F0,$8,$0,$3,$F8
00014E93 0006 0006 F8               		dc.b $0,$6,$0,$6,$F8
00014E98                            		even
00014E98                            @frame_16:
00014E98 05                         		dc.b $5
00014E99                            
00014E99 F80C 0000 E8               		dc.b $F8,$C,$0,$0,$E8
00014E9E 000D 0004 F0               		dc.b $0,$D,$0,$4,$F0
00014EA3 1000 000C 00               		dc.b $10,$0,$0,$C,$0
00014EA8 F001 000D 08               		dc.b $F0,$1,$0,$D,$8
00014EAD F801 000F 10               		dc.b $F8,$1,$0,$F,$10
00014EB2                            		even
00014EB2                            		even
00014EB2                            		even
00014EB2                            DPLC_Player:	include	"engine/modes/level/data/objects/player/data/plc.asm"
00014EB2                            @dplc:
00014EB2 0000                       		dc.w @frame_0-@dplc
00014EB4 0000                       		dc.w @frame_1-@dplc
00014EB6 0000                       		dc.w @frame_2-@dplc
00014EB8 0000                       		dc.w @frame_3-@dplc
00014EBA 0000                       		dc.w @frame_4-@dplc
00014EBC 0000                       		dc.w @frame_5-@dplc
00014EBE 0000                       		dc.w @frame_6-@dplc
00014EC0 0000                       		dc.w @frame_7-@dplc
00014EC2 0000                       		dc.w @frame_8-@dplc
00014EC4 0000                       		dc.w @frame_9-@dplc
00014EC6 0000                       		dc.w @frame_10-@dplc
00014EC8 0000                       		dc.w @frame_11-@dplc
00014ECA 0000                       		dc.w @frame_12-@dplc
00014ECC 0000                       		dc.w @frame_13-@dplc
00014ECE 0000                       		dc.w @frame_14-@dplc
00014ED0 0000                       		dc.w @frame_15-@dplc
00014ED2 0000                       		dc.w @frame_16-@dplc
00014ED4                            @frame_0:
00014ED4 0003                       		dc.w $3
00014ED6                            
00014ED6 3000                       		dc.w $3000
00014ED8 3004                       		dc.w $3004
00014EDA 1008                       		dc.w $1008
00014EDC                            @frame_1:
00014EDC 0003                       		dc.w $3
00014EDE                            
00014EDE 300A                       		dc.w $300A
00014EE0 300E                       		dc.w $300E
00014EE2 1012                       		dc.w $1012
00014EE4                            @frame_2:
00014EE4 0004                       		dc.w $4
00014EE6                            
00014EE6 5014                       		dc.w $5014
00014EE8 301A                       		dc.w $301A
00014EEA 001E                       		dc.w $1E
00014EEC 001F                       		dc.w $1F
00014EEE                            @frame_3:
00014EEE 0003                       		dc.w $3
00014EF0                            
00014EF0 7020                       		dc.w $7020
00014EF2 0028                       		dc.w $28
00014EF4 0029                       		dc.w $29
00014EF6                            @frame_4:
00014EF6 0002                       		dc.w $2
00014EF8                            
00014EF8 702A                       		dc.w $702A
00014EFA 0032                       		dc.w $32
00014EFC                            @frame_5:
00014EFC 0003                       		dc.w $3
00014EFE                            
00014EFE 3033                       		dc.w $3033
00014F00 5037                       		dc.w $5037
00014F02 003D                       		dc.w $3D
00014F04                            @frame_6:
00014F04 0004                       		dc.w $4
00014F06                            
00014F06 503E                       		dc.w $503E
00014F08 3044                       		dc.w $3044
00014F0A 0048                       		dc.w $48
00014F0C 0049                       		dc.w $49
00014F0E                            @frame_7:
00014F0E 0003                       		dc.w $3
00014F10                            
00014F10 704A                       		dc.w $704A
00014F12 0052                       		dc.w $52
00014F14 0053                       		dc.w $53
00014F16                            @frame_8:
00014F16 0002                       		dc.w $2
00014F18                            
00014F18 7054                       		dc.w $7054
00014F1A 005C                       		dc.w $5C
00014F1C                            @frame_9:
00014F1C 0003                       		dc.w $3
00014F1E                            
00014F1E 305D                       		dc.w $305D
00014F20 5061                       		dc.w $5061
00014F22 0067                       		dc.w $67
00014F24                            @frame_10:
00014F24 0004                       		dc.w $4
00014F26                            
00014F26 7068                       		dc.w $7068
00014F28 2070                       		dc.w $2070
00014F2A 2073                       		dc.w $2073
00014F2C 0076                       		dc.w $76
00014F2E                            @frame_11:
00014F2E 0004                       		dc.w $4
00014F30                            
00014F30 7077                       		dc.w $7077
00014F32 207F                       		dc.w $207F
00014F34 2082                       		dc.w $2082
00014F36 0085                       		dc.w $85
00014F38                            @frame_12:
00014F38 0003                       		dc.w $3
00014F3A                            
00014F3A 2086                       		dc.w $2086
00014F3C 3089                       		dc.w $3089
00014F3E 208D                       		dc.w $208D
00014F40                            @frame_13:
00014F40 0004                       		dc.w $4
00014F42                            
00014F42 5090                       		dc.w $5090
00014F44 2096                       		dc.w $2096
00014F46 1099                       		dc.w $1099
00014F48 009B                       		dc.w $9B
00014F4A                            @frame_14:
00014F4A 0003                       		dc.w $3
00014F4C                            
00014F4C 709C                       		dc.w $709C
00014F4E 30A4                       		dc.w $30A4
00014F50 00A8                       		dc.w $A8
00014F52                            @frame_15:
00014F52 0003                       		dc.w $3
00014F54                            
00014F54 20A9                       		dc.w $20A9
00014F56 20AC                       		dc.w $20AC
00014F58 50AF                       		dc.w $50AF
00014F5A                            @frame_16:
00014F5A 0005                       		dc.w $5
00014F5C                            
00014F5C 30B5                       		dc.w $30B5
00014F5E 70B9                       		dc.w $70B9
00014F60 00C1                       		dc.w $C1
00014F62 10C2                       		dc.w $10C2
00014F64 10C4                       		dc.w $10C4
00014F64 10C4                       		dc.w $10C4
00014F66                            		even
00014F66                            Pal_Player:	incbin	"engine/modes/level/data/objects/player/data/pal.bin"
00014F86                            Pal_Player_End:
00014F86                            		even
00014F86                            
00014F86                            ; ---------------------------
00014F86                            ; Objects
00014F86                            ; ---------------------------
00014F86                            
00014F86                            Map_dadou:	include	"engine/modes/level/data/objects/dadou/data/map.asm"
00014F86                            @mappings:
00014F86 0000                       		dc.w @frame_0-@mappings
00014F88 0000                       		dc.w @frame_1-@mappings
00014F8A 0000                       		dc.w @frame_2-@mappings
00014F8C 0000                       		dc.w @frame_3-@mappings
00014F8E 0000                       		dc.w @frame_4-@mappings
00014F90 0000                       		dc.w @frame_5-@mappings
00014F92 0000                       		dc.w @frame_6-@mappings
00014F94 0000                       		dc.w @frame_7-@mappings
00014F96 0000                       		dc.w @frame_8-@mappings
00014F98 0000                       		dc.w @frame_9-@mappings
00014F9A                            @frame_0:
00014F9A 03                         		dc.b $3
00014F9B                            
00014F9B F80A 0000 F0               		dc.b $F8,$A,$0,$0,$F0
00014FA0 F004 0009 00               		dc.b $F0,$4,$0,$9,$0
00014FA5 F801 000B 08               		dc.b $F8,$1,$0,$B,$8
00014FAA                            		even
00014FAA                            @frame_1:
00014FAA 03                         		dc.b $3
00014FAB                            
00014FAB F80A 000D F0               		dc.b $F8,$A,$0,$D,$F0
00014FB0 F004 0016 00               		dc.b $F0,$4,$0,$16,$0
00014FB5 F801 0018 08               		dc.b $F8,$1,$0,$18,$8
00014FBA                            		even
00014FBA                            @frame_2:
00014FBA 02                         		dc.b $2
00014FBB                            
00014FBB F80A 001A F0               		dc.b $F8,$A,$0,$1A,$F0
00014FC0 F801 0023 08               		dc.b $F8,$1,$0,$23,$8
00014FC6 00                         		even
00014FC6                            @frame_3:
00014FC6 02                         		dc.b $2
00014FC7                            
00014FC7 F00E 0025 F0               		dc.b $F0,$E,$0,$25,$F0
00014FCC 0808 0031 F8               		dc.b $8,$8,$0,$31,$F8
00014FD2 00                         		even
00014FD2                            @frame_4:
00014FD2 02                         		dc.b $2
00014FD3                            
00014FD3 F00E 0034 F0               		dc.b $F0,$E,$0,$34,$F0
00014FD8 0808 0040 F8               		dc.b $8,$8,$0,$40,$F8
00014FDE 00                         		even
00014FDE                            @frame_5:
00014FDE 02                         		dc.b $2
00014FDF                            
00014FDF F00E 0043 F0               		dc.b $F0,$E,$0,$43,$F0
00014FE4 0804 004F F8               		dc.b $8,$4,$0,$4F,$F8
00014FEA 00                         		even
00014FEA                            @frame_6:
00014FEA 02                         		dc.b $2
00014FEB                            
00014FEB F80A 0051 F0               		dc.b $F8,$A,$0,$51,$F0
00014FF0 F801 005A 08               		dc.b $F8,$1,$0,$5A,$8
00014FF6 00                         		even
00014FF6                            @frame_7:
00014FF6 02                         		dc.b $2
00014FF7                            
00014FF7 F00E 005C F0               		dc.b $F0,$E,$0,$5C,$F0
00014FFC 0804 0068 F8               		dc.b $8,$4,$0,$68,$F8
00015002 00                         		even
00015002                            @frame_8:
00015002 02                         		dc.b $2
00015003                            
00015003 F00E 006A F0               		dc.b $F0,$E,$0,$6A,$F0
00015008 0808 0076 F8               		dc.b $8,$8,$0,$76,$F8
0001500E 00                         		even
0001500E                            @frame_9:
0001500E 02                         		dc.b $2
0001500F                            
0001500F F00E 0079 F0               		dc.b $F0,$E,$0,$79,$F0
00015014 0808 0085 F8               		dc.b $8,$8,$0,$85,$F8
0001501A 00                         		even
0001501A 00                         		even
0001501A                             		even
0001501A                            Map_pikudo:	include	"engine/modes/level/data/objects/pikudo/data/map.asm"
0001501A                            @mappings:
0001501A 0000                       		dc.w @frame_0-@mappings
0001501C 0000                       		dc.w @frame_1-@mappings
0001501E 0000                       		dc.w @frame_2-@mappings
00015020 0000                       		dc.w @frame_3-@mappings
00015022 0000                       		dc.w @frame_4-@mappings
00015024                            @frame_0:
00015024 04                         		dc.b $4
00015025                            
00015025 F009 0000 F0               		dc.b $F0,$9,$0,$0,$F0
0001502A E804 0006 F8               		dc.b $E8,$4,$0,$6,$F8
0001502F 0009 0008 F8               		dc.b $0,$9,$0,$8,$F8
00015034 F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0001503A 00                         		even
0001503A                            @frame_1:
0001503A 04                         		dc.b $4
0001503B                            
0001503B F009 000F F0               		dc.b $F0,$9,$0,$F,$F0
00015040 E804 0015 F8               		dc.b $E8,$4,$0,$15,$F8
00015045 0009 0017 F8               		dc.b $0,$9,$0,$17,$F8
0001504A F800 001D 08               		dc.b $F8,$0,$0,$1D,$8
00015050 00                         		even
00015050                            @frame_2:
00015050 04                         		dc.b $4
00015051                            
00015051 F009 001E F0               		dc.b $F0,$9,$0,$1E,$F0
00015056 E804 0024 F8               		dc.b $E8,$4,$0,$24,$F8
0001505B 0009 0026 F8               		dc.b $0,$9,$0,$26,$F8
00015060 F800 002C 08               		dc.b $F8,$0,$0,$2C,$8
00015066 00                         		even
00015066                            @frame_3:
00015066 01                         		dc.b $1
00015067                            
00015067 F00B 002D F8               		dc.b $F0,$B,$0,$2D,$F8
0001506C                            		even
0001506C                            @frame_4:
0001506C 01                         		dc.b $1
0001506D                            
0001506D F00B 0039 F8               		dc.b $F0,$B,$0,$39,$F8
00015072                            		even
00015072                            		even
00015072                             		even
00015072                            Map_ball:	include	"engine/modes/level/data/objects/ball/data/map.asm"
00015072                            @mappings:
00015072 0000                       		dc.w @frame_0-@mappings
00015074 0000                       		dc.w @frame_1-@mappings
00015076 0000                       		dc.w @frame_2-@mappings
00015078 0000                       		dc.w @frame_3-@mappings
0001507A                            @frame_0:
0001507A 01                         		dc.b $1
0001507B                            
0001507B F806 0000 F8               		dc.b $F8,$6,$0,$0,$F8
00015080                            		even
00015080                            @frame_1:
00015080 01                         		dc.b $1
00015081                            
00015081 F806 0006 F8               		dc.b $F8,$6,$0,$6,$F8
00015086                            		even
00015086                            @frame_2:
00015086 01                         		dc.b $1
00015087                            
00015087 F806 000C F8               		dc.b $F8,$6,$0,$C,$F8
0001508C                            		even
0001508C                            @frame_3:
0001508C 01                         		dc.b $1
0001508D                            
0001508D F806 0012 F8               		dc.b $F8,$6,$0,$12,$F8
00015092                            		even
00015092                            		even
00015092                             		even
00015092                            objMap_Platform:include	"engine/modes/level/data/objects/platform/data/map.asm"
00015092                            @mappings:
00015092 0000                       		dc.w @frame_0-@mappings
00015094                            @frame_0:
00015094 02                         		dc.b $2
00015095                            
00015095 F80C 0000 E8               		dc.b $F8,$C,$0,$0,$E8
0001509A F804 0004 08               		dc.b $F8,$4,$0,$4,$8
000150A0 00                         		even
000150A0 00                         		even
000150A0                             		even
000150A0                            mapObj_EndFlag:	include	"engine/modes/level/data/objects/endflag/data/map.asm"
000150A0                            @mappings:
000150A0 0000                       		dc.w @frame_0-@mappings
000150A2 0000                       		dc.w @frame_1-@mappings
000150A4 0000                       		dc.w @frame_2-@mappings
000150A6                            @frame_0:
000150A6 07                         		dc.b $7
000150A7                            
000150A7 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
000150AC E00B 0004 E8               		dc.b $E0,$B,$0,$4,$E8
000150B1 0005 0010 E8               		dc.b $0,$5,$0,$10,$E8
000150B6 000C 0014 F8               		dc.b $0,$C,$0,$14,$F8
000150BB E80E 0018 00               		dc.b $E8,$E,$0,$18,$0
000150C0 E004 0024 08               		dc.b $E0,$4,$0,$24,$8
000150C5 0000 0026 18               		dc.b $0,$0,$0,$26,$18
000150CA                            		even
000150CA                            @frame_1:
000150CA 07                         		dc.b $7
000150CB                            
000150CB 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
000150D0 E00F 0004 E8               		dc.b $E0,$F,$0,$4,$E8
000150D5 0005 0014 E8               		dc.b $0,$5,$0,$14,$E8
000150DA 000C 0018 F8               		dc.b $0,$C,$0,$18,$F8
000150DF E80A 001C 08               		dc.b $E8,$A,$0,$1C,$8
000150E4 E000 0025 10               		dc.b $E0,$0,$0,$25,$10
000150E9 0000 0026 18               		dc.b $0,$0,$0,$26,$18
000150EE                            		even
000150EE                            @frame_2:
000150EE 07                         		dc.b $7
000150EF                            
000150EF 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
000150F4 E00F 0004 E8               		dc.b $E0,$F,$0,$4,$E8
000150F9 0005 0014 E8               		dc.b $0,$5,$0,$14,$E8
000150FE 000C 0018 F8               		dc.b $0,$C,$0,$18,$F8
00015103 E007 001C 08               		dc.b $E0,$7,$0,$1C,$8
00015108 E001 0024 18               		dc.b $E0,$1,$0,$24,$18
0001510D F801 0026 18               		dc.b $F8,$1,$0,$26,$18
00015112                            		even
00015112                            		even
00015112                             		even
00015112                            dplcObj_EndFlag:include	"engine/modes/level/data/objects/endflag/data/plc.asm"
00015112                            @dplc:
00015112 0000                       		dc.w @frame_0-@dplc
00015114 0000                       		dc.w @frame_1-@dplc
00015116 0000                       		dc.w @frame_2-@dplc
00015118                            @frame_0:
00015118 0007                       		dc.w $7
0001511A                            
0001511A 3000                       		dc.w $3000
0001511C B004                       		dc.w $B004
0001511E 3010                       		dc.w $3010
00015120 3014                       		dc.w $3014
00015122 B018                       		dc.w $B018
00015124 1024                       		dc.w $1024
00015126 0026                       		dc.w $26
00015128                            @frame_1:
00015128 0007                       		dc.w $7
0001512A                            
0001512A 3027                       		dc.w $3027
0001512C F02B                       		dc.w $F02B
0001512E 303B                       		dc.w $303B
00015130 303F                       		dc.w $303F
00015132 8043                       		dc.w $8043
00015134 004C                       		dc.w $4C
00015136 004D                       		dc.w $4D
00015138                            @frame_2:
00015138 0007                       		dc.w $7
0001513A                            
0001513A 304E                       		dc.w $304E
0001513C F052                       		dc.w $F052
0001513E 3062                       		dc.w $3062
00015140 3066                       		dc.w $3066
00015142 706A                       		dc.w $706A
00015144 1072                       		dc.w $1072
00015146 1074                       		dc.w $1074
00015146 1074                       		dc.w $1074
00015148                            		even
00015148                            		
00015148                            ; ====================================================================
00015148                            ; -------------------------------------------------
00015148                            ; Level DATA
00015148                            ; -------------------------------------------------
00015148                            
00015148                            LevelList:
00015148 0000 0000                  		dc.l $01<<24|Lvl_Zone1		; Level data
0001514C 0000 0000                  		dc.l Pal_LvlMain_Gray		; Palette
00015150 0020 00F0                  		dc.w $20,$F0			; Player X/Y
00015154 1140 0068                  		dc.w $1140,$68			; End flag X/Y
00015158                            ; 		dc.l $01<<24|Lvl_Zone2
00015158                            ; 		dc.l Pal_LvlMain_Gray
00015158                            ; 		dc.w $20,$D0
00015158                            ; 		dc.w 0,0
00015158                            ; 		dc.l Lvl_Zone3
00015158                            ; 		dc.l Pal_LvlMain_Gray
00015158                            ; 		dc.w $28,$250
00015158                            ; 		dc.w 0,0
00015158                            ; 		dc.l Lvl_Zone1
00015158                            ; 		dc.l Pal_LvlMain_Gray
00015158                            ; 		dc.w $10,0
00015158                            ; 		dc.w 0,0
00015158                            ; 		dc.l Lvl_Zone1
00015158                            ; 		dc.l Pal_LvlMain_Gray
00015158                            ; 		dc.w $10,0
00015158                            ; 		dc.w 0,0
00015158                            ; 		even
00015158                            		
00015158                            artdata_Level_Test:
00015158 0001 3000                   		dc.l art_dadou
0001515C 6420                       		dc.w varVramDadou
0001515E 043F                        		dc.w ((art_dadou_end-art_dadou)/4)-1
00015160 0001 4A60                    		dc.l artObj_Ball
00015164 44B8                       		dc.w varVramBall
00015166 00BF                        		dc.w ((artObj_Ball_e-artObj_Ball)/4)-1
00015168 0001 4100                   		dc.l Art_pikudo
0001516C 04D0                       		dc.w varVramPikudo
0001516E 0227                        		dc.w ((Art_pikudo_end-Art_pikudo)/4)-1
00015170                             		
00015170 0001 49A0                   		dc.l artObj_Platform
00015174 2530                        		dc.w varVramPlatfrm
00015176 002F                        		dc.w ((artObj_Platform_e-artObj_Platform)/4)-1
00015178                             		
00015178 FFFF                        		dc.w -1
0001517A                             		even
0001517A                             		
0001517A                            ; --------------------------------------------
0001517A                            ; Levels
0001517A                            ; --------------------------------------------
0001517A                            
0001517A 0118 0018                  Lvl_Zone1:	dc.w 280,24
0001517E 0000 0000                  		dc.l @objects
00015182 0000 0000 FFFF FFFF        		dc.l @FG_blk,-1			; Block VRAM / Prize VRAM (-1, use defaults) 
0001518A 0000 0000 0000 0000        		dc.l @FG_lay_low,@FG_lay_hi	; Level layout hi/low
00015192 0000 0000 0000 0000        		dc.l @FG_col,@FG_prz		; Collision / Prizes
0001519A                            ; 		dc.w -1
0001519A                            		
0001519A                            @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/1/fg_lay_low.bin"
00016BDA                             		even
00016BDA                            @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/1/fg_lay_hi.bin"
0001861A                             		even	
0001861A                            @FG_col:	incbin	"engine/modes/level/data/layouts/main/1/fg_col.bin"
0001A05A                             		even
0001A05A                            @FG_prz:	incbin	"engine/modes/level/data/layouts/main/1/fg_prz.bin"
0001A104                             		even 
0001A104                            @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
0001A904                             		even
0001A904                            @objects:	include	"engine/modes/level/data/layouts/main/1/objlist.asm"
0001A904 0000 7C0C                  		dc.l obj_dadou
0001A908 01F8 00AC                  		dc.w 504,172
0001A90C 00                         		dc.b 0
0001A90D 00                         		dc.b 0
0001A90E                            
0001A90E 0000 803C                  		dc.l obj_platform
0001A912 0348 00E0                  		dc.w 840,224
0001A916 00                         		dc.b 0
0001A917 00                         		dc.b 0
0001A918                            
0001A918 0000 803C                  		dc.l obj_platform
0001A91C 03E8 00F8                  		dc.w 1000,248
0001A920 01                         		dc.b 1
0001A921 00                         		dc.b 0
0001A922                            
0001A922 0000 7DE2                  		dc.l obj_pikudo
0001A926 049C 00DC                  		dc.w 1180,220
0001A92A 00                         		dc.b 0
0001A92B 00                         		dc.b 0
0001A92C                            
0001A92C 0000 803C                  		dc.l obj_platform
0001A930 0358 0178                  		dc.w 856,376
0001A934 01                         		dc.b 1
0001A935 00                         		dc.b 0
0001A936                            
0001A936 0000 803C                  		dc.l obj_platform
0001A93A 03E0 0168                  		dc.w 992,360
0001A93E 00                         		dc.b 0
0001A93F 00                         		dc.b 0
0001A940                            
0001A940 0000 803C                  		dc.l obj_platform
0001A944 0610 00C8                  		dc.w 1552,200
0001A948 01                         		dc.b 1
0001A949 00                         		dc.b 0
0001A94A                            
0001A94A 0000 84DE                  		dc.l obj_ball
0001A94E 064C 0100                  		dc.w 1612,256
0001A952 00                         		dc.b 0
0001A953 00                         		dc.b 0
0001A954                            
0001A954 0000 7C0C                  		dc.l obj_dadou
0001A958 080C 00CC                  		dc.w 2060,204
0001A95C 00                         		dc.b 0
0001A95D 00                         		dc.b 0
0001A95E                            
0001A95E 0000 7DE2                  		dc.l obj_pikudo
0001A962 0648 0084                  		dc.w 1608,132
0001A966 00                         		dc.b 0
0001A967 00                         		dc.b 0
0001A968                            
0001A968 0000 84DE                  		dc.l obj_ball
0001A96C 0900 0104                  		dc.w 2304,260
0001A970 00                         		dc.b 0
0001A971 00                         		dc.b 0
0001A972                            
0001A972 0000 7C0C                  		dc.l obj_dadou
0001A976 09A8 00EC                  		dc.w 2472,236
0001A97A 00                         		dc.b 0
0001A97B 00                         		dc.b 0
0001A97C                            
0001A97C 0000 7C0C                  		dc.l obj_dadou
0001A980 0A94 0108                  		dc.w 2708,264
0001A984 00                         		dc.b 0
0001A985 00                         		dc.b 0
0001A986                            
0001A986 0000 803C                  		dc.l obj_platform
0001A98A 09E8 0100                  		dc.w 2536,256
0001A98E 02                         		dc.b 2
0001A98F 00                         		dc.b 0
0001A990                            
0001A990 0000 7C0C                  		dc.l obj_dadou
0001A994 0CB8 0140                  		dc.w 3256,320
0001A998 00                         		dc.b 0
0001A999 00                         		dc.b 0
0001A99A                            
0001A99A 0000 7C0C                  		dc.l obj_dadou
0001A99E 0CC4 0080                  		dc.w 3268,128
0001A9A2 00                         		dc.b 0
0001A9A3 00                         		dc.b 0
0001A9A4                            
0001A9A4 0000 7C0C                  		dc.l obj_dadou
0001A9A8 0BFC 00C0                  		dc.w 3068,192
0001A9AC 80                         		dc.b 0x80
0001A9AD 00                         		dc.b 0
0001A9AE                            
0001A9AE 0000 0000                  		dc.l 0
0001A9AE 0000 0000                  		dc.l 0
0001A9B2                             		even
0001A9B2                            
0001A9B2                            ; --------------------------------------------
0001A9B2                            
0001A9B2                            ; Lvl_Zone2:	dc.w 228,14
0001A9B2                            ; 		dc.l @objects
0001A9B2                            ; 		dc.l @FG_blk,-1			;Block VRAM / Prize VRAM (-1, use defaults) 
0001A9B2                            ; 		dc.l @FG_lay_low,@FG_lay_hi	;Level layout hi/low
0001A9B2                            ; 		dc.l @FG_col,@FG_prz		;Collision / Prizes
0001A9B2                            ; ; 		dc.w -1
0001A9B2                            ; 		
0001A9B2                            ; @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/2/fg_lay_low.bin"
0001A9B2                            ;  		even
0001A9B2                            ; @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/2/fg_lay_hi.bin"
0001A9B2                            ;  		even	
0001A9B2                            ; @FG_col:	incbin	"engine/modes/level/data/layouts/main/2/fg_col.bin"
0001A9B2                            ;  		even
0001A9B2                            ; @FG_prz:	incbin	"engine/modes/level/data/layouts/main/2/fg_prz.bin"
0001A9B2                            ;  		even 
0001A9B2                            ; @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
0001A9B2                            ;  		even
0001A9B2                            ; @objects:	include	"engine/modes/level/data/layouts/main/2/objlist.asm"
0001A9B2                            ;  		even
0001A9B2                             
0001A9B2                            ; --------------------------------------------
0001A9B2                            
0001A9B2                            ; Lvl_Zone3:	dc.w 20,40
0001A9B2                            ; 		dc.l @objects
0001A9B2                            ; 		dc.l @FG_blk,-1			;Block VRAM / Prize VRAM (-1, use defaults) 
0001A9B2                            ; 		dc.l @FG_lay_low,@FG_lay_hi	;Level layout hi/low
0001A9B2                            ; 		dc.l @FG_col,@FG_prz		;Collision / Prizes
0001A9B2                            ; ; 		dc.w -1
0001A9B2                            ; 		
0001A9B2                            ; @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/3/fg_lay_low.bin"
0001A9B2                            ;  		even
0001A9B2                            ; @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/3/fg_lay_hi.bin"
0001A9B2                            ;  		even	
0001A9B2                            ; @FG_col:	incbin	"engine/modes/level/data/layouts/main/3/fg_col.bin"
0001A9B2                            ;  		even
0001A9B2                            ; @FG_prz:	incbin	"engine/modes/level/data/layouts/main/3/fg_prz.bin"
0001A9B2                            ;  		even 
0001A9B2                            ; @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
0001A9B2                            ;  		even
0001A9B2                            ; @objects:	include	"engine/modes/level/data/layouts/main/3/objlist.asm"
0001A9B2                            ;  		even
0001A9B2                            
0001A9B2                            ; --------------------------------------------
0001A9B2                            
0001A9B2                            Pal_LvlMain_Gray:
0001A9B2                            		incbin	"engine/modes/level/data/layouts/main/lvl_pal.bin"
0001A9D2                            		incbin	"engine/modes/level/data/layouts/main/bg_pal.bin"
0001A9F2                            		even
0001A9F2                            		
0001A9F2                            Art_Lvl_Test:	incbin	"engine/modes/level/data/layouts/main/lvl_art.bin"
0001E052                            Art_Lvl_Test_e:	even
0001E052                            
0001E052                            Art_LvlBG_Test:	incbin	"engine/modes/level/data/layouts/main/bg_art.bin"
00022C12                            Art_LvlBG_Test_e:
00022C12                            		even
00022C12                            Map_LvlBG_Test:	incbin	"engine/modes/level/data/layouts/main/bg_map.bin"
00023C12                            Map_LvlBG_Test_e:
00023C12                            		even
00023C12                            		
00023C12                            ; --------------------------------------------
00023C12                            
00023C12                            Art_LvlPrizes:	incbin	"engine/modes/level/data/layouts/prizes_art.bin"
00024812                            		even
00024812                            Art_LvlPrizes_e:
00024812                            
00024812                            Pal_LvlCoinItms	incbin	"engine/modes/level/data/layouts/lvlitems_pal.bin"
00024832                            		even
00024832                            		
00024832                            ; ====================================================================
00024832                            ; -------------------------------------------------
00024832                            ; Sound data
00024832                            ; -------------------------------------------------
00024832                            
00024832                            ; --------------------------
00024832                            ; MUSIC level 1
00024832                            ; --------------------------
00024832                            
00024832                            Music_Level1:
00024832 0B02                       		dc.b 11,2
00024834 0000 0000                  		dc.l @notes
00024838 0000 0000                       		dc.l @ins
0002483C 000A                            		dc.w 10
0002483E 0040 800F                        		dc.b FM_1,64,$80,$0F
00024842 0140 800F                        		dc.b FM_2,64,$80,$0F
00024846 0240 800F                        		dc.b FM_3,64,$80,$0F
0002484A 0440 800F                  		dc.b FM_4,64,$80,$0F
0002484E 0540 800F                  		dc.b FM_5,64,$80,$0F
00024852 0640 800F                   		dc.b FM_6,64,$80,$0F
00024856 8040 800F                   		dc.b PSG_1,64,$80,$0F
0002485A A040 800F                   		dc.b PSG_2,64,$80,$0F
0002485E C040 800F                   		dc.b PSG_3,64,$80,$0F
00024862 E040 800F                   		dc.b NOISE,64,$80,$0F
00024866                             		even
00024866                            @notes:		incbin "engine/sound/music/level0.it",$50+$11B
00025F4C                                  		even
00025F4C 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins
00025F52                            		even
00025F52                            		
00025F52 0001 0000                  @ymha: 		dc.w 1,0
00025F56 0000 0000                  		dc.l fmBass_jazz
00025F5A 0042 0000                  		dc.w 2|$40,0
00025F5E 0000 0000                  		dc.l fm3drum_tick
00025F62 38AB 3457                  		dc.w $00AB|$3800,$0457|$3000
00025F66 3511 2336                  		dc.w $0511|$3000,$0336|$2000
00025F6A 0083 FFE8                    		dc.w 3|$80,-24
00025F6E 0000 0000                    		dc.l wav_stKick
00025F72 0000 0000                   		dc.l wav_stKick_e
00025F76 FFFF FFFF                   		dc.l -1
00025F7A 0084 FFE8                    		dc.w 4|$80,-24
00025F7E 0000 0000                    		dc.l wav_stSnare
00025F82 0000 0000                   		dc.l wav_stSnare_e
00025F86 FFFF FFFF                   		dc.l -1
00025F8A FFFF                       		dc.w -1
00025F8C                            		even
00025F8C                            
00025F8C 0005 0004                  @noise: 	dc.w 5,%100
00025F90 FFFF                       		dc.w -1
00025F92                            		even
00025F92                            		
00025F92                            ; --------------------------
00025F92                            ; SFX: BONK
00025F92                            ; --------------------------
00025F92                            
00025F92 00FF                       SndSfx_BONK:	dc.b 0,-1
00025F94 0000 0000                  		dc.l @pattern
00025F98 0000 0000                       		dc.l @instruments
00025F9C 0003                            		dc.w 3
00025F9E 0540 800E                        		dc.b FM_5,64,$80,%1110
00025FA2 0640 800F                        		dc.b FM_6,64,$80,$F
00025FA6 A040 800F                        		dc.b PSG_2,64,$80,$F
00025FAA                            @pattern:	incbin "engine/sound/sfx/bonk.it",$50+$FC+$28
0002604C                                  		even
0002604C                            
0002604C 0000                       @instruments: 	dc.w @ymha-@instruments
0002604E FFFF                       		dc.w -1
00026050 0000                       		dc.w @noise-@instruments
00026052 FFFF                       		dc.w -1
00026054                            		even
00026054                            		
00026054 0002 0000                  @ymha: 		dc.w 2,0
00026058 0000 0000                     		dc.l FMSfx_Bump
0002605C                            
0002605C 0083 FFF0                     		dc.w $80|3,-16
00026060 0000 0000                     		dc.l WAVE_lwpnch
00026064 0000 0000                     		dc.l WAVE_lwpnch_e
00026068 FFFF FFFF                     		dc.l -1
0002606C                               		
0002606C FFFF                       		dc.w -1	;EOL
0002606E                            		even
0002606E 0002 0005                  @noise: 	dc.w 2,%101
00026072 FFFF                       		dc.w -1
00026074                            		even
00026074                            		
00026074                            ; --------------------------
00026074                            ; SFX: Bonk a coin
00026074                            ; --------------------------
00026074                            
00026074                            SndSfx_BonkCoin:
00026074 00FF                       		dc.b 0,-1
00026076 0000 0000                  		dc.l @pattern
0002607A 0000 0000                       		dc.l @instruments
0002607E 0004                            		dc.w 4
00026080 0540 800E                        		dc.b FM_5,64,$80,%1110
00026084 0640 800F                        		dc.b FM_6,64,$80,$F
00026088 A040 800F                        		dc.b PSG_2,64,$80,$F
0002608C C040 800F                        		dc.b PSG_3,64,$80,$F
00026090                            @pattern:	incbin "engine/sound/sfx/bonkcoin.it",$50+$12C
0002615C 00                               		even
0002615C                            
0002615C 0000                       @instruments: 	dc.w @ymha-@instruments
0002615E FFFF                       		dc.w -1
00026160 0000                       		dc.w @noise-@instruments
00026162 FFFF                       		dc.w -1
00026164                            		even
00026164                            		
00026164 0002 0000                  @ymha: 		dc.w 2,0
00026168 0000 0000                     		dc.l FMSfx_Bump
0002616C                            
0002616C 0083 FFF0                     		dc.w $80|3,-16
00026170 0000 0000                     		dc.l WAVE_lwpnch
00026174 0000 0000                     		dc.l WAVE_lwpnch_e
00026178 FFFF FFFF                     		dc.l -1
0002617C                               		
0002617C FFFF                       		dc.w -1	;EOL
0002617E                            		even
0002617E 0002 0005                  @noise: 	dc.w 2,%101
00026182 FFFF                       		dc.w -1
00026184                            		even
00026184                            		
00026184                            ; --------------------------
00026184                            ; SFX: PUM
00026184                            ; --------------------------
00026184                            
00026184                            SndSfx_PUM:
00026184 00FF                       		dc.b 0,-1
00026186 0000 0000                  		dc.l @pattern
0002618A 0000 0000                       		dc.l @instruments
0002618E 0003                            		dc.w 3
00026190 0540 800F                        		dc.b FM_5,64,$80,$0F
00026194 E040 800F                        		dc.b NOISE,64,$80,$0F
00026198 0640 800F                        		dc.b FM_6,64,$80,$0F
0002619C                            @pattern:	incbin "engine/sound/sfx/blkbump.it",$F4+$50+$20
0002623E                                  		even
0002623E                            
0002623E 0000                       @instruments:	dc.w @ymha-@instruments
00026240 FFFF                       		dc.w -1
00026242 0000                       		dc.w @noise-@instruments
00026244                            		even
00026244                            
00026244 0001 0000                  @ymha: 		dc.w 1,0
00026248 0000 0000                     		dc.l FMSfx_Punch
0002624C                               		
0002624C 0083 0000                     		dc.w $80|3,0
00026250 0000 0000                     		dc.l WAVE_lwpnch
00026254 0000 0000                     		dc.l WAVE_lwpnch_e
00026258 FFFF FFFF                     		dc.l -1
0002625C                               		
0002625C FFFF                       		dc.w -1	;EOL
0002625E                            		even
0002625E                            @noise:
0002625E 0002 0006                   		dc.w 2,%110
00026262 FFFF                       		dc.w -1
00026264                            		even
00026264                            
00026264                            ; --------------------------
00026264                            ; SFX: PING
00026264                            ; --------------------------
00026264                            
00026264                            SndSfx_PING:
00026264 00FF                       		dc.b 0,-1
00026266 0000 0000                  		dc.l @notes
0002626A 0000 0000                       		dc.l @ins
0002626E 0002                            		dc.w 2
00026270 E040 800F                        		dc.b NOISE,64,$80,$0F
00026274 0640 800F                        		dc.b FM_6,64,$80,$0F
00026278                            @notes:		incbin "engine/sound/sfx/pingball.it",$50+$DC
00026312                                  		even
00026312 0000                       @ins: 		dc.w @ymha-@ins
00026314 FFFF                       		dc.w -1
00026316 0000                       		dc.w @noise-@ins
00026318                            		even
00026318                            @noise:
00026318 0001 0004                   		dc.w 1,%100
0002631C FFFF                       		dc.w -1
0002631E                            		even
0002631E                            @ymha:
0002631E 0081 0000                  		dc.w $80|1,0
00026322 0000 0000                  		dc.l WAVE_sfxBall
00026326 0000 0000                  		dc.l WAVE_sfxBall_e
0002632A FFFF FFFF                  		dc.l -1
0002632E                            		
0002632E FFFF                       		dc.w -1
00026330                            		even
00026330                            		
00026330                            ; --------------------------
00026330                            ; SFX: COIN
00026330                            ; --------------------------
00026330                            
00026330                            SndSfx_COIN:
00026330 00FF                       		dc.b 0,-1
00026332 0000 0000                  		dc.l @notes
00026336 0000 0000                       		dc.l @ins
0002633A 0002                            		dc.w 2
0002633C 8040 800F                        		dc.b PSG_1,64,$80,$F
00026340 A040 800F                        		dc.b PSG_2,64,$80,$F
00026344                            @notes:		incbin "engine/sound/sfx/coin.it",$50+$D4+8
000263EA                                  		even
000263EA FFFF                       @ins: 		dc.w -1
000263EC FFFF                       		dc.w -1
000263EE FFFF                       		dc.w -1
000263F0                            		even
000263F0                            		
000263F0                            ; --------------------------
000263F0                            ; SFX: COIN
000263F0                            ; --------------------------
000263F0                            
000263F0                            SndSfx_BEEBUZZ:
000263F0 00FF                       		dc.b 0,-1
000263F2 0000 0000                  		dc.l @notes
000263F6 0000 0000                       		dc.l @ins
000263FA 0001                            		dc.w 1
000263FC 0540 800F                        		dc.b FM_5,64,$80,$F
00026400                            @notes:		incbin "engine/sound/sfx/beebuzz.it",$50+$D4
000264B0                                  		even
000264B0 0000                       @ins: 		dc.w @ymha-@ins
000264B2 FFFF                       		dc.w -1
000264B4 FFFF                       		dc.w -1
000264B6                            		even
000264B6                            @ymha:
000264B6 0001 0000                  		dc.w 1,0
000264BA 0000 0000                  		dc.l fmSfx_BUZZ
000264BE FFFF FFFF                  		dc.l -1
000264C2                            		
000264C2 FFFF                       		dc.w -1
000264C4                            		even
000264C4                            		
000264C4                            ; --------------------------
000264C4                            ; SFX: COIN
000264C4                            ; --------------------------
000264C4                            
000264C4                            SndSfx_PlyrJump:
000264C4 00FF                       		dc.b 0,-1
000264C6 0000 0000                  		dc.l @notes
000264CA 0000 0000                       		dc.l @ins
000264CE 0001                            		dc.w 1
000264D0 E040 800F                        		dc.b NOISE,64,$80,$F
000264D4                            @notes:		incbin "engine/sound/sfx/plyrjump.it",$50+$DC
00026584 00                               		even
00026584 FFFF FFFF 0000             @ins:		dc.w -1,-1,@noise-@ins
0002658A 0001 0004                  @noise:		dc.w 1,%100
0002658E                            		even
0002658E                               
0002658E                            ; --------------------------
0002658E                            ; SFX: COIN
0002658E                            ; --------------------------
0002658E                            
0002658E                            SndSfx_HitEnemy:
0002658E 00FF                       		dc.b 0,-1
00026590 0000 0000                  		dc.l @notes
00026594 0000 0000                  		dc.l @ins
00026598 0002                       		dc.w 2
0002659A 0640 800F                  		dc.b FM_6,64,$80,$F
0002659E E040 800F                  		dc.b NOISE,64,$80,$F
000265A2                            @notes:		incbin "engine/sound/sfx/bumpenemy.it",$50+$D4
0002664E 00                         		even
0002664E 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins
00026654 0001 0000                  @ymha:		dc.w 1,0
00026658 0000 0000                  		dc.l FMSfx_Punch
0002665C 0002 0006                  @noise:		dc.w 2,%110
00026660                            		
00026660                            ; --------------------------
00026660                            ; instruments
00026660                            ; --------------------------
00026660                            
00026660                            fmBass_jazz:	incbin	"engine/sound/instruments/FM/bass/bass_jazz.bin"
0002667A 00                         		even
0002667A                            fm3drum_tick: 	incbin	"engine/sound/instruments/fm/drums/fm3_tick.bin"
00026694 00                         		even
00026694                            		
00026694                            FMSfx_Punch:	incbin	"engine/sound/instruments/FM/fmsfx_boomlong.bin"
000266AE 00                         		even
000266AE                            FMSfx_Bump:	incbin	"engine/sound/instruments/FM/fmsfx_bump.bin"
000266C8 00                         		even
000266C8                            fmSfx_BUZZ:	incbin	"engine/sound/instruments/FM/old/socket_voiceset.bin",$19*18,$19
000266E2 00                         		even
000266E2                            		
000266E2                            WAVE_lwbonk:	incbin	"engine/sound/instruments/DAC/sfxbonk.wav",$2C
00027BA8 00                         WAVE_lwbonk_e:	even
00027BA8                            WAVE_lwpnch:	incbin	"engine/sound/instruments/DAC/sfxhithard.wav",$2C
00029760 00                         WAVE_lwpnch_e:	even
00029760                            WAVE_sfxBall:	incbin	"engine/sound/instruments/DAC/sfxBallTick.wav",$2C
0002B6B4                            WAVE_sfxBall_e:	even
0002B6B4                            wav_stKick:	incbin	"engine/sound/instruments/DAC/stKick.wav",$2C
0002C69C                            wav_stKick_e:	even
0002C69C                            wav_stSnare:	incbin	"engine/sound/instruments/DAC/stSnare.wav",$2C
0002E79C                            wav_stSnare_e:	even
0002E79C                            wav_stSnare_e:	even
0002E79C                            		
0002E79C                            
0002E79C                            ; ====================================================================
0002E79C                            ; -------------------------------------------------
0002E79C                            ; 68k DATA
0002E79C                            ; -------------------------------------------------
0002E79C                            
0002E79C                            ; ====================================================================
0002E79C                            ; -------------------------------------------------
0002E79C                            ; MARS ONLY: sh2-ready DATA
0002E79C                            ; -------------------------------------------------
0002E79C                            
0002E79C                            		
0002E79C                            ; ====================================================================
0002E79C                            ; -------------------------------------------------
0002E79C                            ; END
0002E79C                            ; -------------------------------------------------
0002E79C                            		
0002E79C                            ROM_END:
0002E79C                            		inform 0,"ROM Size: %h",ROM_END
0002E79C                            		cnop 0,$80000
