00000000                            ; ====================================================================
00000000                            ; --------------------------------------------
00000000                            ; Include
00000000                            ; --------------------------------------------
00000000                            
00000000                            		include	"system/macros.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Macros
00000000                            ; -------------------------------------------------
00000000                            
00000000                            align		macro
00000000                            		cnop 0,\1
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Pick ROM section
00000000                            ; --------------------------------------------
00000000                            
00000000                            romSection	macro where
00000000                            CODE		=	*+$880000
00000000                            DATA		=	*+marsbank
00000000                            RAM		=	$FF0000
00000000                            WRAM		=	$200000
00000000                            ; ---------------------------
00000000                            		if MCD|MARS == True
00000000                            		obj \1
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; ---------------------------
00000000                            
00000000                            romSectionEnd	macro
00000000                            		if MCD
00000000                            		objend
00000000                            		elseif MARS
00000000                            		objend
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; Video
00000000                            ; --------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; dmaTask
00000000                            ; --------------------------------------------
00000000                            
00000000                            dmaTask		macro
00000000                            FILL		=	$C0000000+1
00000000                            COPY		=	$C0000000+2
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA FILL
00000000                            ; (FILL,byte,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		if \1=FILL
00000000                            		
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                            		move.w	#$9780,(vdp_ctrl)
00000000                            		move.l	#\3|$80,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait1\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait1\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA COPY
00000000                            ; (COPY,from,to,size)
00000000                            ; 
00000000                            ; USES d0
00000000                            ; ---------------------------
00000000                            		elseif \1=COPY
00000000                            		move.w	#$8F01,(vdp_ctrl)
00000000                             		move.l	#$9400+(((\4)&$FF00)>>9)|(($9300+(((\4)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\2>>1)&$FF00)>>8)|(($9500+((\2>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$97C0,(vdp_ctrl)
00000000                            		move.l	#\3|$C0,(vdp_ctrl)
00000000                            		move.w	#\2&$FFFF,(vdp_data)
00000000                            @wait2\@:
00000000                            		move.w	(vdp_ctrl),d0
00000000                            		btst	#1,d0
00000000                            		bne.s	@wait2\@
00000000                            		move.w	#$8F02,(vdp_ctrl)
00000000                            		
00000000                            ; ---------------------------
00000000                            ; DMA ROM/RAM to VDP
00000000                            ; (from,to,size)
00000000                            ; ---------------------------
00000000                            		else
00000000                            		;\1 from | \2 to | \3 size
00000000                             		move.l	#$9400+(((\3)&$FF00)>>9)|(($9300+(((\3)&$FF)>>1))<<16),(vdp_ctrl)
00000000                             		move.l	#$9600+(((\1>>1)&$FF00)>>8)|(($9500+((\1>>1)&$FF))<<16),(vdp_ctrl)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(vdp_ctrl)
00000000                            		
00000000                            ; 		move.l	#\2|$80,(vdp_ctrl)		;new attempt
00000000                            		move.w	#((\2&$FFFF))|$80,-(sp)
00000000                            		move.w	#(((\2)>>16)&$FFFF),-(sp)
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#$100,($A11100)
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100)
00000000                              		bne.s	@WaitZ80_\@
00000000                            		move.w	(sp)+,(vdp_ctrl)
00000000                             		move.w	#0,($A11100).l
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            
00000000                            fade		macro
00000000                            in = 1
00000000                            out = 0
00000000                            		if \1=in
00000000                             		move.l	#$0101003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		elseif \1=out
00000000                            		
00000000                            		move.l	#$0201003F,(RAM_PalFadeSys)
00000000                            @wait_fade\@	tst.l	(RAM_PalFadeSys)
00000000                             		bne.s	@wait_fade\@
00000000                            		
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            ; --------------------------------------------
00000000                            ; System
00000000                            ; --------------------------------------------
00000000                            
00000000                            z80		macro
00000000                            ON = 1
00000000                            OFF = 0
00000000                            		if \1=OFF
00000000                            		
00000000                             		move.w	#$100,($A11100).l
00000000                            @WaitZ80_\@:
00000000                             		btst	#0,($A11100).l
00000000                              		bne.s	@WaitZ80_\@
00000000                            		elseif \1=ON
00000000                            		
00000000                              		move.w	#0,($A11100).l
00000000                            		endif
00000000                            		
00000000                            		endm
00000000                            		
00000000                            		
00000000                            		include	"system/ram.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; RAM
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; ---------------------------
00000000                            ; Setup
00000000                            ; ---------------------------
00000000                            
00000000                                            rsset	$FFFFBC00
00000000 =FFFFBC00                  RAM_ModeBuffer	rs.b	$2000
00000000 =FFFFDC00                  RAM_Engine      rs.b	$200
00000000 =FFFFDE00                  RAM_System      rs.b	$80
00000000 =FFFFDE80                  RAM_Input	rs.b	$80
00000000 =FFFFDF00                  RAM_Video       rs.b	$1000
00000000 =FFFFEF00                  RAM_Audio       rs.b	$400
00000000 =FFFFF300                  endof_ram	rs.l	0
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            ;      		inform  0,"RAM ends at: %h",endof_ram
00000000                            		include	"engine/ram.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; RAM
00000000                            ; 
00000000                            ; Put your features here
00000000                            ; (players lives, keys, current level, map, etc.)
00000000                            ; -------------------------------------------------
00000000                            
00000000                                            rsset	RAM_Engine
00000000 =FFFFDC00                  RAM_P1_Lives	rs.w	1
00000000 =FFFFDC02                  RAM_P1_Coins	rs.w	1
00000000 =FFFFDC04                  RAM_P1_Hits	rs.w	1
00000000 =FFFFDC06                  RAM_CurrLevel	rs.w	1
00000000 =FFFFDC08                  sizeof_engine	rs.l	0
00000000                            ; 		inform 0,"engine ram: %h",(sizeof_engine-RAM_Engine)
00000000                            ; 		inform 0,"engine ram: %h",(sizeof_engine-RAM_Engine)
00000000                            		include	"system/hardware/map.asm"
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Variables
00000000                            ; -------------------------------------------------
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; I/O
00000000                            ; --------------------------------------------
00000000                            
00000000 =00A10001                  port_ver	equ	$A10001
00000000 =00A14000                  port_tmss	equ	$A14000
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; VDP
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00000                  vdp_data	equ	$C00000
00000000 =00C00004                  vdp_ctrl	equ	$C00004
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MD Audio
00000000                            ; --------------------------------------------
00000000                            
00000000 =00C00011                  sound_psg	equ	$C00011
00000000 =00A04000                  sound_ym_1	equ	$A04000
00000000 =00A04001                  sound_ym_2	equ	$A04001
00000000 =00A04002                  sound_ym_3	equ	$A04002
00000000 =00A04003                  sound_ym_4	equ	$A04003
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; MARS only
00000000                            ; --------------------------------------------
00000000                            
00000000 =00840000                  framebuffer	equ	$840000
00000000 =00860000                  overwrite	equ	$860000
00000000 =00880000                  marsipl		equ	$880000
00000000 =00900000                  marsbank	equ	$900000
00000000 =00A130EC                  mars_ID		equ	$a130ec		; MARS ID "MARS"
00000000                            
00000000 =00A15100                  marsreg		equ	$a15100
00000000 =00000000                  access		equ	$00		; byte		; MARS VDP access control
00000000 =00000001                  adapter		equ	$01		; byte		; MARS adapter control
00000000 =00000003                  intctl		equ	$03		; byte		; SH2 interrupt control
00000000 =00000005                  bankctl		equ	$05		; byte		; BANK conterol
00000000 =00000007                  dreqctl		equ	$07		; byte		; DREQ control
00000000 =00000008                  dreqsource	equ	$08		; long		; 68 to SH DREQ source address
00000000 =0000000C                  dreqdest	equ	$0c		; long		; 68 to SH DREQ destination address
00000000 =00000010                  dreqlength	equ	$10		; word		; 68 to SH DREQ length
00000000 =00000012                  dreqfifo	equ	$12		; word		; 68 to SH DREQ FIFO
00000000 =0000001B                  segatv		equ	$1b		; byte		; SEGA TV Reg.
00000000 =00000020                  comm0		equ	$20		; 		; Communcation Reg.
00000000 =00000022                  comm2		equ	$22		; 		; Communcation Reg.
00000000 =00000024                  comm4		equ	$24		; 		; Communcation Reg.
00000000 =00000026                  comm6		equ	$26		; 		; Communcation Reg.
00000000 =00000028                  comm8		equ	$28		; 		; Communcation Reg.
00000000 =00000029                  comm9		equ	$29		; 		; Communcation Reg.
00000000 =0000002A                  comm10		equ	$2a		; 		; Communcation Reg.
00000000 =0000002C                  comm12		equ	$2c		; 		; Communcation Reg.
00000000 =0000002E                  comm14		equ	$2e		; 		; Communcation Reg.
00000000                            
00000000 =00000080                  tvmode		equ	$80		; byte		; NTSC/PAL
00000000 =00000081                  bitmapmode	equ	$81		; byte		; BitMap Mode Reg.
00000000 =00000083                  shift		equ	$83		; byte		; Packed Pixel Dot Shift
00000000 =00000085                  filllength	equ	$85		; byte		; DRAM Fill Length
00000000 =00000086                  fillstart	equ	$86		; word		; DRAM Fill Start Address
00000000 =00000088                  filldata	equ	$88		; word		; DRAM Fill Data
00000000 =0000008A                  vdpsts		equ	$8a		; byte		; VDP status
00000000 =0000008B                  framectl	equ	$8b		; byte		; Frame Buffer Control
00000000                            
00000000 =00A15200                  palette		equ	$a15200		; 256 words	; Palette Data
00000000                            
00000000                            ; --------------------------------------------
00000000                            ; OTHER
00000000                            ; --------------------------------------------
00000000                            
00000000                            		include	"system/hardware/mcd/map.asm"
00000000                            ; =================================================================
00000000                            ; ----------------------------------------
00000000                            ; Shared vars
00000000                            ; ----------------------------------------
00000000                            
00000000                            ; -------------
00000000                            ; bits
00000000                            ; -------------
00000000                            
00000000 =00000002                  bitWRamMode	equ	2		;2M | 1M
00000000                            
00000000                            ; -------------
00000000                            ; Registers
00000000                            ; -------------
00000000                            
00000000 =00000002                  MemoryMode	equ	$02		;WORD
00000000 =0000000E                  CommMain	equ	$0E		;BYTE
00000000 =0000000F                  CommSub		equ	$0F		;BYTE
00000000 =00000010                  CommDataM	equ	$10		;Array (size: $E)
00000000 =00000020                  CommDataS	equ	$20		;Array (size: $E)
00000000                            
00000000                            ; =================================================================
00000000                            ; ----------------------------------------
00000000                            ; MAIN CPU ONLY
00000000                            ; ----------------------------------------
00000000                            
00000000 =FFFF6600                  RAM_CdShared	equ	$FFFF6600
00000000                            
00000000                            		rsset   RAM_CdShared
00000000 =FFFF6600                  RAM_Wait_Buff	rs.b	$40
00000000 =FFFF6640                  RAM_Wait_Code	rs.b	$180
00000000 =FFFF67C0                  RAM_GoToHint	rs.w	3		; Sega CD HBlank jump ( jmp (thisaddr).l )
00000000                            
00000000 =00006600                  sizeof_prg	equ	$6600
00000000                            
00000000                            ; =================================================================
00000000                            ; ----------------------------------------
00000000                            ; SUB CPU ONLY
00000000                            ; ----------------------------------------
00000000                            
00000000                            ; -------------
00000000                            ; PCM
00000000                            ; -------------
00000000                            
00000000 =00FF0000                  PCM		equ	$FF0000
00000000 =00000001                  ENV		equ	$01		; Envelope
00000000 =00000003                  PAN		equ	$03		; Panning (%RRRRLLLL, and negative)
00000000 =00000005                  FDL		equ	$05		; Sample rate $00xx
00000000 =00000007                  FDH		equ	$07		; Sample rate $xx00
00000000 =00000009                  LSL		equ	$09		; Loop address $xx00
00000000 =0000000B                  LSH		equ	$0B		; Loop address $00xx
00000000 =0000000D                  ST		equ	$0D		; Start address (only $x0, $x000)
00000000 =0000000F                  Ctrl		equ	$0F		; Control register ($80 - Bank select, $C0 - Channel select)
00000000 =00000011                  OnOff		equ	$11		; Channel On/Off (BITS: 1 - off, 0 - on)
00000000                            
00000000                            ; =================================================================
00000000                            ; =================================================================
00000000                            		
00000000                            ; ====================================================================
00000000                            ; -------------------------------------------------
00000000                            ; Level
00000000                            ; 
00000000                            ; MEGA CD ONLY
00000000                            ; -------------------------------------------------
00000000                            
00000000                            		obj $200000
00200000 23FC 0000 0000 FFFF FD0E       		move.l	#RAM_HintJumpTo,($FFFFFD0E)
0020000A 23FC 0000 0000 FFFF FD08       		move.l	#RAM_VintJumpTo,($FFFFFD08)
00200014 4EF9 0000 0000             		jmp	MD_Main
0020001A                            		
0020001A                            ; ====================================================================
0020001A                            ; -------------------------------------------------
0020001A                            ; Subs
0020001A                            ; -------------------------------------------------
0020001A                            
0020001A                            		include	"system/video.asm"
0020001A                            ; ====================================================================
0020001A                            ; VDP
0020001A                            ; ====================================================================
0020001A                            
0020001A                            ; -------------------------------------------------
0020001A                            ; Variables
0020001A                            ; -------------------------------------------------
0020001A                            
0020001A                            		rsreset
0020001A =00000000                  palFd_mode	rs.b 1
0020001A =00000001                  palFd_delay	rs.b 1
0020001A =00000002                  palFd_from	rs.b 1			;TODO: poner funcionar esto
0020001A =00000003                  palFd_num	rs.b 1
0020001A =00000004                  palFd_timer	rs.w 1
0020001A                            
0020001A                            		rsreset
0020001A =00000000                  sprite_free	rs.l 1
0020001A =00000004                  sprite_link	rs.w 1
0020001A =00000006                  sprite_used	rs.w 1
0020001A                            
0020001A                            ; ====================================================================
0020001A                            ; -------------------------------------------------
0020001A                            ; RAM
0020001A                            ; -------------------------------------------------
0020001A                            
0020001A                            		rsset RAM_Video
0020001A =FFFFDF00                  RAM_ScrlHor	rs.l 240
0020001A =FFFFE2C0                  RAM_ScrlVer	rs.l $20			; Normal
0020001A =FFFFE340                  RAM_Sprites	rs.l (80*2)			; Normal
0020001A =FFFFE5C0                  RAM_SprControl	rs.l 2				; Normal
0020001A =FFFFE5C8                  RAM_HSprites	rs.l (80*2)			; For HBlank
0020001A =FFFFE848                  RAM_HScrlVer	rs.l $20			; For HBlank
0020001A =FFFFE8C8                  RAM_HSprLast	rs.l 2				; For HBlank
0020001A =FFFFE8D0                  RAM_Palette	rs.w 64				; Normal
0020001A =FFFFE950                  RAM_HPalette	rs.w 64				; For HBlank
0020001A =FFFFE9D0                  RAM_PalFade	rs.w 64				; Normal
0020001A =FFFFEA50                  RAM_HPalFade	rs.w 64				; For HBlank
0020001A =FFFFEAD0                  RAM_PalFadeSys	rs.l 8*2
0020001A =FFFFEB10                  RAM_DMA_Buffer	rs.b $200
0020001A =FFFFED10                  RAM_VidRegs	rs.b 16				; Unused regs included (always zero) | WINDOW and DMA regs ignored, use them separately
0020001A                            
0020001A =FFFFED20                  sizeof_vid	rs.l 0
0020001A                            ;       		inform 0,"video ram: %h",(sizeof_vid-RAM_Video)
0020001A                            
0020001A                            ; ====================================================================
0020001A                            ; -------------------------------------------------
0020001A                            ; Subs
0020001A                            ; -------------------------------------------------
0020001A                            
0020001A                            ; -------------------------------------------------
0020001A                            ; Video control
0020001A                            ; -------------------------------------------------
0020001A                            
0020001A                            Video_init:
0020001A 41FA 0000                  		lea	reg_data(pc),a0
0020001E 43F9 FFFF ED10             		lea	(RAM_VidRegs),a1
00200024 303C 8000                  		move.w	#$8000,d0
00200028 7210                       		moveq	#17-1,d1
0020002A                            @reg_list:
0020002A 1018                       		move.b	(a0)+,d0
0020002C 12C0                       		move.b	d0,(a1)+
0020002E 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
00200034 0640 0100                  		add.w	#$100,d0
00200038 51C9 FFF0                  		dbf	d1,@reg_list
0020003C 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)	;WINDOW LEFT/TOP clear
00200046 23FC 9300 9400 00C0 0004   		move.l	#$93009400,(vdp_ctrl)	;DMA len low/high clear
00200050 23FC 9500 9600 00C0 0004   		move.l	#$95009600,(vdp_ctrl)	;DMA addr mid/low clear
0020005A 33FC 9700 00C0 0004        		move.w	#$9700,(vdp_ctrl)	;DMA addr high clear
00200062                              	
00200062                            ; --------------------------------------------
00200062                            ; Video_ClearAll
00200062                            ; --------------------------------------------
00200062                            
00200062                            Video_ClearAll:
00200062 23FC 9100 9200 00C0 0004   		move.l	#$91009200,(vdp_ctrl)
0020006C                            		
0020006C 6100                       		bsr.s	Video_ClrAllLyrs
0020006E 6100                       		bsr.s	Video_ClearScroll
00200070 6100 0000                  		bsr	Sprites_Clear
00200074 6000 0000                  		bra	Sprites_Reset
00200078                            		
00200078                            Video_ClearSprites:
00200078 6100 0000                  		bsr	Sprites_Clear
0020007C 6000 0000                  		bra	Sprites_Reset
00200080                            		
00200080                            ; --------------------------------------------
00200080                            ; Video_ClrAllLyrs
00200080                            ; --------------------------------------------
00200080                            
00200080                            Video_ClrAllLyrs:
00200080 203C 4000 0003             		move.l	#$40000003,d0
00200086 6100                       		bsr.s	Video_ClrLyr
00200088 203C 5000 0003             		move.l	#$50000003,d0
0020008E 6100                       		bsr.s	Video_ClrLyr
00200090 203C 6000 0003             		move.l	#$60000003,d0
00200096                            ; 		bsr.s	Video_ClrLyr
00200096                            ; 		rts
00200096                            		
00200096                            ; --------------------------------------------
00200096                            ; Video_ClrLyr
00200096                            ; 
00200096                            ; d0 | LONG - VDP VRAM Command for the layer
00200096                            ; --------------------------------------------
00200096                            
00200096                            Video_ClrLyr:
00200096 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
0020009C 303C 07FF                  		move.w	#$7FF,d0
002000A0                            @loop:
002000A0 33FC 0000 00C0 0000        		move.w	#0,(vdp_data)
002000A8 51C8 FFF6                  		dbf	d0,@loop
002000AC 4E75                       		rts
002000AE                            	
002000AE                            ; --------------------------------------------
002000AE                            ; Video_ClrHScrl
002000AE                            ; --------------------------------------------
002000AE                            
002000AE                            Video_ClrHScrl:
002000AE 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
002000B4 303C 00DF                  		move.w	#224-1,d0
002000B8 6000                       		bra.s	VidClrScrl_loop
002000BA                            
002000BA                            ; --------------------------------------------
002000BA                            ; Video_ClearScroll
002000BA                            ; --------------------------------------------
002000BA                            
002000BA                            Video_ClearScroll:
002000BA 61F2                       		bsr.s	Video_ClrHScrl
002000BC 41F9 FFFF E2C0             		lea	(RAM_ScrlVer),a0
002000C2 6100                       		bsr.s	Video_ClrVScrl
002000C4 41F9 FFFF E848             		lea	(RAM_HScrlVer),a0
002000CA                            ; 		bsr.s	Video_ClrVScrl
002000CA                            		
002000CA                            ; --------------------------------------------
002000CA                            ; Video_ClrVScrl
002000CA                            ; 
002000CA                            ; a0 - Vertical scroll data
002000CA                            ; --------------------------------------------
002000CA                            
002000CA                            Video_ClrVScrl:
002000CA 303C 001F                  		move.w	#$20-1,d0
002000CE                            VidClrScrl_loop:
002000CE 4298                       		clr.l	(a0)+
002000D0 51C8 FFFC                  		dbf	d0,VidClrScrl_loop
002000D4 4E75                       		rts
002000D6                            		
002000D6                            ; ------------------------------------
002000D6                            
002000D6                            reg_data:
002000D6 04                         		dc.b %00000100			; $80: [4] HInt interrupt OFF | [2] ALWAYS ON | [1] HV Counter OFF
002000D7 74                         		dc.b %01110100			; $81: [6] Display ON, [5] Vint interrupt ON, [4] DMA OFF, [3] V28 (V30 PAL ONLY) | [2] ALWAYS ON
002000D8 30                         		dc.b ($C000>>10)&%00111000	; $82: Plane A pattern table
002000D9 34                         		dc.b ($D000>>10)&%00111110	; $83:  WINDOW pattern table (%00111110 H32, %00111100 H40)
002000DA 07                         		dc.b ($E000>>13)&%00000111	; $84: Plane B pattern table
002000DB 7C                         		dc.b ($F800>>09)&%01111111	; $85:  Sprite attribute table (%01111111 H32, %01111110 H40)
002000DC 00                         		dc.b 0				; $86: NOTHING
002000DD 00                         		dc.b 0				; $87: BG Color
002000DE 00                         		dc.b 0				; $88: NOTHING
002000DF 00                         		dc.b 0				; $89: NOTHING
002000E0 00                         		dc.b 0				; $8A: HInt counter
002000E1 03                         		dc.b %00000011			; $8B: [3] External interrupt OFF | [2] Vscrl: full | [1|0] Hscrl: full
002000E2 81                         		dc.b %10000001			; $8C: [7+0] H40 | [3] Prio/Shadow | [2|1] Interlace mode: None
002000E3 3F                         		dc.b ($FC00>>10)&%00111111	; $8D: Hscroll attribute table
002000E4 00                         		dc.b 0				; $8E: NOTHING
002000E5 02                         		dc.b 2				; $8F: VDP Auto increment
002000E6 01                         		dc.b %00000001			; $90: Plane size [5|4] Y size | [1|0] X size
002000E8 00                         		even
002000E8                            
002000E8                            ; -------------------------------------------------
002000E8                            ; Subs
002000E8                            ; -------------------------------------------------
002000E8                            
002000E8                            Video_Update:
002000E8 41F9 FFFF ED10             		lea	(RAM_VidRegs),a0
002000EE 303C 8000                  		move.w	#$8000,d0
002000F2 7210                       		moveq	#17-1,d1
002000F4                            @reg_list:
002000F4 1018                       		move.b	(a0)+,d0
002000F6 33C0 00C0 0004             		move.w	d0,(vdp_ctrl)
002000FC 0640 0100                  		add.w	#$100,d0
00200100 51C9 FFF2                  		dbf	d1,@reg_list
00200104 4E75                       		rts
00200106                            		
00200106                            ; --------------------------------------------
00200106                            ; VDP_SendData_W, VDP_SendData_L
00200106                            ;
00200106                            ; Input:
00200106                            ; a0 - Data address
00200106                            ;
00200106                            ; d0 | VRAM Address
00200106                            ; d1 | Data size
00200106                            ; --------------------------------------------
00200106                            
00200106                            VDP_SendData_W:
00200106 EB48                       		lsl.w	#5,d0
00200108 6100 0000                  		bsr	VDP_VramToCmd
0020010C 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
00200112                            @Loop:
00200112 33D8 00C0 0000             		move.w	(a0)+,(vdp_data).l
00200118 51C9 FFF8                  		dbf	d1,@Loop
0020011C 4E75                       		rts
0020011E                            
0020011E                            VDP_SendData_L:
0020011E EB48                       		lsl.w	#5,d0
00200120 6100 0000                  		bsr	VDP_VramToCmd
00200124 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
0020012A                            @Loop:
0020012A 23D8 00C0 0000             		move.l	(a0)+,(vdp_data).l
00200130 51C9 FFF8                  		dbf	d1,@Loop
00200134 4E75                       		rts
00200136                            		
00200136                            ; -----------------------
00200136                            ; Uses: d4 (LONG)
00200136                            ;       d5 (WORD)
00200136                            ; -----------------------
00200136                            
00200136                            vdpshv_findvdppos:
00200136                            		;Check plane to use
00200136 4845                       		swap	d5
00200138 3A00                       		move.w	d0,d5
0020013A 7000                       		moveq	#0,d0
0020013C 1039 FFFF ED12             		move.b	(RAM_VidRegs+2),d0
00200142 0805 0001                  		btst	#1,d5				;%10? (WD)
00200146 6700                       		beq.s	@FG
00200148 1039 FFFF ED13             		move.b	(RAM_VidRegs+3),d0
0020014E                            @FG:
0020014E E148                       		lsl.w	#8,d0
00200150 E548                       		lsl.w	#2,d0
00200152 0805 0000                  		btst	#0,d5				;%01? (BG)
00200156 6700                       		beq.s	@FGWD
00200158 7000                       		moveq	#0,d0
0020015A 1039 FFFF ED14             		move.b	(RAM_VidRegs+4),d0
00200160 E148                       		lsl.w	#8,d0
00200162 EB48                       		lsl.w	#5,d0
00200164                            @FGWD:
00200164                            
00200164                            		;Start Y
00200164 7800                       		moveq	#0,d4
00200166 3801                          		move.w	d1,d4
00200168 ED8C                         		lsl.l	#6,d4
0020016A 0805 0001                   		btst	#1,d5
0020016E 6700                        		beq.s	@def_fgbg
00200170                             		
00200170                             		;TODO: WD resolution check
00200170                            ;    		move.b	(RAM_VidRegs+vdpReg_HMode),d5
00200170                            ;    		and.w	#%10000001,d5
00200170                            ;    		bne.s	@Not128
00200170 E38C                           		lsl.l	#1,d4
00200172 6000                       		bra.s	@Not128
00200174                            @def_fgbg:
00200174 0839 0000 FFFF ED20         		btst	#0,(RAM_VidRegs+$10)
0020017C 6700                        		beq.s	@Not40
0020017E E38C                         		lsl.l	#1,d4
00200180                            @Not40:
00200180 0839 0001 FFFF ED20         		btst	#1,(RAM_VidRegs+$10)
00200188 6700                        		beq.s	@Not128
0020018A E38C                           		lsl.l	#1,d4
0020018C                            @Not128:
0020018C D044                        		add.w	d4,d0			;+Y Start
0020018E 4841                       		swap	d1
00200190 E349                       		lsl.w	#1,d1
00200192 D041                       		add.w	d1,d0			;+X Start
00200194 4845                       		swap	d5
00200196                            		
00200196                            ; --------------------------------------------
00200196                            ; VDP_VramToCmd
00200196                            ;
00200196                            ; Input:
00200196                            ; d0 | WORD - VRAM to convert
00200196                            ;
00200196                            ; Output:
00200196                            ; d0 | LONG - VDP Command (Write mode)
00200196                            ; --------------------------------------------
00200196                            
00200196                            VDP_VramToCmd:
00200196 0C40 4000                  		cmp.w	#$4000,d0
0020019A 6500                       		bcs.s	@NoBank
0020019C 4840                       		swap	d0
0020019E 303C 0001                  		move.w	#1,d0
002001A2 4840                       		swap	d0
002001A4 0C40 8000                  		cmp.w	#$8000,d0
002001A8 6500                       		bcs.s	@NoBank	
002001AA 4840                       		swap	d0
002001AC 303C 0002                  		move.w	#2,d0
002001B0 4840                       		swap	d0
002001B2 0C40 C000                  		cmp.w	#$C000,d0
002001B6 6500                       		bcs.s	@NoBank	
002001B8 4840                       		swap	d0
002001BA 303C 0003                  		move.w	#3,d0
002001BE 4840                       		swap	d0
002001C0                            @NoBank:
002001C0 0240 3FFF                    		and.w	#$3FFF,d0
002001C4 0040 4000                    		or.w	#$4000,d0
002001C8 4840                          		swap	d0
002001CA 4E75                       		rts
002001CC                            		
002001CC                            ; --------------------------------------------
002001CC                            ; VDP_LoadMaps
002001CC                            ; 
002001CC                            ; Input:
002001CC                            ; a0 - Pattern data
002001CC                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
002001CC                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
002001CC                            ; d2 | LONG - Value
002001CC                            ; d3 | WORD - VRAM (ASCII start)
002001CC                            ; d4 | WORD - Type:
002001CC                            ;             00 Byte | 01 Word | 02 Long HEX
002001CC                            ;             04 Byte | 05 Word | 06 Long DEC
002001CC                            ;             08 Byte | 09 Word | 0A Long DEC
002001CC                            ; Uses:
002001CC                            ; d4-d6
002001CC                            ; 
002001CC                            ; NOTE: clear d2 FIRST and then set the value
002001CC                            ; --------------------------------------------
002001CC                            
002001CC                            Video_PrintVal:
002001CC 0244 0007                  		and.w	#%111,d4
002001D0 0804 0002                  		btst	#2,d4
002001D4 6700                       		beq.s	@hexy
002001D6 6100 0000                  		bsr	HexToDec
002001DA                            @hexy:
002001DA 3A04                       		move.w	d4,d5
002001DC 6100 FF58                  		bsr	vdpshv_findvdppos
002001E0 3805                       		move.w	d5,d4
002001E2                            		
002001E2 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
002001E8 0643 0030                  		add.w	#"0",d3
002001EC                            		
002001EC 7A07                          		moveq	#(8)-1,d5
002001EE 0804 0001                  		btst	#1,d4
002001F2 6600                       		bne.s	@setit
002001F4 7A03                          		moveq	#(4)-1,d5
002001F6 4842                        		swap	d2
002001F8 1004                          		move.b	d4,d0
002001FA 0200 0003                     		and.b	#%11,d0
002001FE 4A00                        		tst.b	d0
00200200 6600                        		bne.s	@setit
00200202 7A01                        		moveq	#(2)-1,d5
00200204 E19A                        		rol.l	#8,d2
00200206                            @setit:
00200206 0804 0002                  		btst	#2,d4
0020020A 6700                       		beq.s	@next
0020020C 0804 0001                  		btst	#1,d4
00200210 6600                       		bne.s	@next
00200212 E89A                       		ror.l	#4,d2
00200214 0645 0001                  		add.w	#1,d5
00200218                            @next:
00200218 E99A                        		rol.l	#4,d2
0020021A 3002                       		move.w	d2,d0
0020021C 0240 000F                  		and.w	#$F,d0
00200220 0C40 000A                  		cmp.w	#$A,d0
00200224 6500                       		bcs.s	@lessF
00200226 0640 0007                  		add.w	#7,d0
0020022A                            @lessF
0020022A D043                       		add.w	d3,d0
0020022C 33C0 00C0 0000             		move.w	d0,(vdp_data)
00200232 51CD FFE4                  		dbf	d5,@next
00200236 4E75                       		rts
00200238                            
00200238                            ; --------------------------------------------
00200238                            ; Video_MakeMap
00200238                            ; 
00200238                            ; Input:
00200238                            ; a0 - Pattern data
00200238                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
00200238                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
00200238                            ; d2 | LONG - XSize (WORD) | YSize (WORD)
00200238                            ; d3 | WORD - VRAM
00200238                            ; 
00200238                            ; Uses:
00200238                            ; d4-d6
00200238                            ; --------------------------------------------
00200238                            
00200238                            Video_MakeMap:
00200238                            		;Check plane to use
00200238 6100 FEFC                  		bsr	vdpshv_findvdppos
0020023C                            		
0020023C 283C 0040 0000             		move.l	#$400000,d4
00200242 0839 0000 FFFF ED20        		btst	#0,(RAM_VidRegs+$10)
0020024A 6700                       		beq.s	@JpNot40
0020024C E38C                        		lsl.l	#1,d4
0020024E                            @JpNot40:
0020024E 0839 0001 FFFF ED20        		btst	#1,(RAM_VidRegs+$10)
00200256 6700                       		beq.s	@Y_Loop
00200258 E38C                            		lsl.l	#1,d4
0020025A                                 		
0020025A                            @Y_Loop:
0020025A 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l		; Set VDP location from d0
00200260 4842                       		swap	d2
00200262 3A02                       		move.w	d2,d5	  		; Move X-pos value to d3
00200264 4842                       		swap	d2
00200266                            @X_Loop:
00200266 3C18                       		move.w	(a0)+,d6
00200268 DC43                                       add.w	d3,d6
0020026A 4845                                       swap	d5
0020026C 1A39 FFFF ED1C                             move.b	(RAM_VidRegs+$C),d5
00200272 0245 0006                                  and.w	#%110,d5
00200276 6700                                       beq.s	@normal
00200278 E24E                                       lsr.w	#1,d6
0020027A                            @normal:
0020027A 4845                                       swap	d5
0020027C 33C6 00C0 0000                             move.w	d6,(vdp_data)		; Put data
00200282 51CD FFE2                  		dbf	d5,@X_Loop		; X-pos loop (from d1 to d3)
00200286 D084                       		add.l	d4,d0                   ; Next line
00200288 51CA FFD0                  		dbf	d2,@Y_Loop		; Y-pos loop
0020028C 4E75                       		rts
0020028E                            
0020028E                            ; --------------------------------------------
0020028E                            ; Video_PrintText
0020028E                            ;
0020028E                            ; Input:
0020028E                            ; a0 - String
0020028E                            ; d0 | WORD - Plane type: 0-FG 1-BG 2-Window
0020028E                            ; d1 | LONG - XPos  (WORD) | YPos  (WORD)
0020028E                            ; d2 | VRAM
0020028E                            ; 
0020028E                            ; Uses:
0020028E                            ; d3-d4
0020028E                            ; --------------------------------------------
0020028E                            
0020028E                            Video_PrintText:
0020028E                            		;Check plane to use
0020028E 3A00                       		move.w	d0,d5
00200290 6100 FEA4                  		bsr	vdpshv_findvdppos
00200294                            		
00200294 283C 0080 0000              		move.l	#$800000,d4
0020029A                            ;  		cmp.w	#2,d5
0020029A                            ;  		bne.s	@NotWindow
0020029A                            ; 		
0020029A                            ;  		tst.b	(RAM_VidRegs+$C)
0020029A                            ;  		beq.s	@Reset
0020029A                            ;  		lsl.l	#1,d4
0020029A                            ; 		bra.s	@Reset
0020029A                            ; 		
0020029A                            ; @NotWindow:
0020029A                            ; 		btst	#0,(RAM_VidRegs+$10)
0020029A                            ; 		beq.s	@JpNot40
0020029A                            ;  		lsl.l	#1,d4
0020029A                            ; @JpNot40:
0020029A                            ; 		btst	#1,(RAM_VidRegs+$10)
0020029A                            ; 		beq.s	@Space
0020029A                            ;      		lsl.l	#1,d4
0020029A                                 		
0020029A                            @Reset:
0020029A 23C0 00C0 0004             		move.l	d0,(vdp_ctrl).l
002002A0                            @Next:
002002A0 7600                       		moveq	#0,d3
002002A2 1618                       		move.b	(a0)+,d3
002002A4 0C03 000A                  		cmp.b	#$A,d3
002002A8 6700                       		beq.s	@Space
002002AA 4A03                       		tst.b	d3
002002AC 6600                       		bne.s	@Char
002002AE 4E75                       		rts
002002B0                            @Char:
002002B0 D642                       		add.w	d2,d3
002002B2 33C3 00C0 0000             		move.w	d3,(vdp_data).l
002002B8 60E6                       		bra.s	@Next
002002BA                            @Space:
002002BA D084                       		add.l	d4,d0                   ; Next line
002002BC 60DC                       		bra.s	@Reset
002002BE                            @Exit:
002002BE 4E75                       		rts
002002C0                            		
002002C0                            ; --------------------------------------------
002002C0                            ; Video_VSync
002002C0                            ; 
002002C0                            ; Wait VBlank
002002C0                            ; --------------------------------------------
002002C0                            
002002C0                            Video_VSync:
002002C0 08F9 0000 0000 0000         		bset	#0,(RAM_IntFlags)
002002C8                            @vint:
002002C8 0839 0000 0000 0000        		btst	#0,(RAM_IntFlags)
002002D0 66F6                       		bne.s	@vint
002002D2 4E75                       		rts
002002D4                            
002002D4                            ; ====================================================================
002002D4                            ; ---------------------------------------------
002002D4                            ; Palette fading
002002D4                            ; ---------------------------------------------
002002D4                            
002002D4                            PalFade_Upd:
002002D4 4DF9 FFFF EAD0             		lea	(RAM_PalFadeSys),a6
002002DA 7C03                        		moveq	#4-1,d6
002002DC                            @NextPalReq:
002002DC 4A96                       		tst.l	(a6)
002002DE 6700                       		beq.s	@Unused
002002E0 4BF9 FFFF E8D0              		lea	(RAM_Palette),a5
002002E6 49F9 FFFF E9D0              		lea	(RAM_PalFade),a4
002002EC 6100 0000                    		bsr	@Active
002002F0                            @Unused:
002002F0 DCFC 0008                   		adda	#8,a6
002002F4 51CE FFE6                   		dbf	d6,@NextPalReq
002002F8                            		
002002F8 7C03                       		moveq	#4-1,d6
002002FA                            @NextHPalReq:
002002FA 4A96                       		tst.l	(a6)
002002FC 6700                       		beq.s	@UnusedH
002002FE 4BF9 FFFF E950             		lea	(RAM_HPalette),a5
00200304 49F9 FFFF EA50             		lea	(RAM_HPalFade),a4
0020030A 6100 0000                  		bsr	@Active
0020030E                            @UnusedH:
0020030E DCFC 0008                  		adda	#8,a6
00200312 51CE FFE6                  		dbf	d6,@NextHPalReq
00200316 4E75                       		rts
00200318                            		
00200318                            ; ---------------------------------
00200318                            ; Active palette
00200318                            ; ---------------------------------
00200318                            
00200318                            @Active:
00200318 7000                       		moveq	#0,d0
0020031A 102E 0000                  		move.b	palFd_mode(a6),d0
0020031E D040                       		add.w	d0,d0
00200320 323B 0000                  		move.w	@list(pc,d0.w),d1
00200324 4EFB 1000                  		jmp	@list(pc,d1.w)
00200328                            		
00200328                            ; ---------------------------------
00200328                            
00200328                            @list:
00200328 0000                       		dc.w fadeSet_Return-@list
0020032A 0000                       		dc.w fadeSet_in_timer-@list
0020032C 0000                       		dc.w fadeSet_out_timer-@list
0020032E 0000                       		dc.w fadeSet_in_single-@list
00200330 0000                        		dc.w fadeSet_out_single-@list		
00200332                            		
00200332                            ; ---------------------------------
00200332                            
00200332                            fadeSet_in_timer:
00200332 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
00200338 6A00 0000                  		bpl	fadeSet_Return
0020033C 7800                       		moveq	#0,d4
0020033E 7A00                       		moveq	#0,d5
00200340 182E 0001                  		move.b 	palFd_delay(a6),d4
00200344 3D44 0004                  		move.w	d4,palFd_timer(a6)
00200348 182E 0003                  		move.b 	palFd_num(a6),d4
0020034C                            @next_in:
0020034C 3015                        		move.w	(a5),d0
0020034E 3214                        		move.w	(a4),d1
00200350 3400                       		move.w	d0,d2
00200352 3601                        		move.w	d1,d3
00200354 0242 000E                   		and.w	#$00E,d2
00200358 0243 000E                   		and.w	#$00E,d3
0020035C B642                        		cmp.w	d2,d3
0020035E 6700                        		beq.s	@goodin_b
00200360 0642 0002                  		add.w	#2,d2
00200364                            @goodin_b:
00200364 0240 0EE0                  		and.w	#$EE0,d0
00200368 8042                        		or.w	d2,d0
0020036A                            		
0020036A 3400                       		move.w	d0,d2
0020036C 3601                        		move.w	d1,d3
0020036E 0242 00E0                   		and.w	#$0E0,d2
00200372 0243 00E0                   		and.w	#$0E0,d3
00200376 B642                        		cmp.w	d2,d3
00200378 6700                        		beq.s	@goodin_g
0020037A 0642 0020                  		add.w	#$020,d2
0020037E                            @goodin_g:
0020037E 0240 0E0E                  		and.w	#$E0E,d0
00200382 8042                        		or.w	d2,d0
00200384                              		
00200384 3400                       		move.w	d0,d2
00200386 3601                        		move.w	d1,d3
00200388 0242 0E00                   		and.w	#$E00,d2
0020038C 0243 0E00                   		and.w	#$E00,d3
00200390 B642                        		cmp.w	d2,d3
00200392 6700                        		beq.s	@goodin_r
00200394 0642 0200                  		add.w	#$200,d2
00200398                            @goodin_r:
00200398 0240 00EE                  		and.w	#$0EE,d0
0020039C 8042                        		or.w	d2,d0
0020039E                             		
0020039E 3AC0                        		move.w	d0,(a5)+
002003A0 B05C                        		cmp.w	(a4)+,d0
002003A2 6600                        		bne.s	@nonz_fdin
002003A4 0645 0001                   		add.w	#1,d5
002003A8                            @nonz_fdin:
002003A8 51CC FFA2                  		dbf	d4,@next_in
002003AC                            		
002003AC 0445 0001                  		sub.w	#1,d5
002003B0 BA2E 0003                  		cmp.b	palFd_num(a6),d5
002003B4 6600                       		bne.s	fadeSet_Return
002003B6 4296                       		clr.l	(a6)
002003B8                            fadeSet_Return:
002003B8 4E75                       		rts
002003BA                            		
002003BA                            ; ---------------------------------
002003BA                            
002003BA                            fadeSet_out_timer:
002003BA 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
002003C0 6AF6                       		bpl.s	fadeSet_Return
002003C2 7400                       		moveq	#0,d2
002003C4 7600                       		moveq	#0,d3
002003C6 142E 0001                  		move.b 	palFd_delay(a6),d2
002003CA 3D42 0004                  		move.w	d2,palFd_timer(a6)
002003CE 142E 0003                  		move.b 	palFd_num(a6),d2
002003D2                            @setcol:
002003D2 3015                       		move.w	(a5),d0
002003D4 3200                       		move.w	d0,d1
002003D6 0241 000E                  		and.w	#$00E,d1
002003DA 6700                       		beq.s	@good_b
002003DC 0441 0002                  		sub.w	#2,d1
002003E0                            @good_b:
002003E0 0240 0EE0                  		and.w	#$EE0,d0
002003E4 8041                       		or.w	d1,d0
002003E6                            		
002003E6 3200                       		move.w	d0,d1
002003E8 0241 00E0                  		and.w	#$0E0,d1
002003EC 6700                       		beq.s	@good_g
002003EE 0441 0020                  		sub.w	#$020,d1
002003F2                            @good_g:
002003F2 0240 0E0E                  		and.w	#$E0E,d0
002003F6 8041                       		or.w	d1,d0
002003F8 3200                       		move.w	d0,d1
002003FA 0241 0E00                  		and.w	#$E00,d1
002003FE 6700                       		beq.s	@good_r
00200400 0441 0200                  		sub.w	#$200,d1
00200404                            @good_r:
00200404 0240 00EE                  		and.w	#$0EE,d0
00200408 8041                       		or.w	d1,d0
0020040A 3AC0                       		move.w	d0,(a5)+
0020040C 4A40                       		tst.w	d0
0020040E 6600                       		bne.s	@nonzero
00200410 0643 0001                  		add.w	#1,d3
00200414                            @nonzero:
00200414 51CA FFBC                  		dbf	d2,@setcol
00200418                            		
00200418 0443 0001                  		sub.w	#1,d3
0020041C B62E 0003                  		cmp.b	palFd_num(a6),d3
00200420 6696                       		bne.s	fadeSet_Return
00200422 4296                       		clr.l	(a6)
00200424 4E75                       		rts
00200426                            		
00200426                            ; ---------------------------------
00200426                            ; fadeSet_in_single
00200426                            ; 
00200426                            ; palFd_delay:
00200426                            ; RGBTTTTT - RGB increment bits
00200426                            ;            TTTTT timer
00200426                            ; ---------------------------------
00200426                            
00200426                            fadeSet_in_single:
00200426 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
0020042C 6A00 FF8A                  		bpl	fadeSet_Return
00200430                            
00200430 7A00                       		moveq	#0,d5
00200432 1A2E 0002                  		move.b	palFd_from(a6),d5
00200436 E34D                       		lsl.w	#1,d5
00200438 DAC5                       		adda	d5,a5
0020043A 162E 0001                  		move.b 	palFd_delay(a6),d3
0020043E 0243 00E0                  		and.w	#$E0,d3
00200442 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
00200448                            		
00200448 7800                       		moveq	#0,d4
0020044A 182E 0003                  		move.b 	palFd_num(a6),d4
0020044E                            @next_in:
0020044E 3015                        		move.w	(a5),d0
00200450 3400                       		move.w	d0,d2
00200452 0242 000E                   		and.w	#$00E,d2
00200456 0803 0005                  		btst	#5,d3
0020045A 6700                       		beq.s	@goodin_b
0020045C 0C42 000E                   		cmp.w	#$00E,d2
00200460 6C00                        		bge.s	@goodin_b
00200462 0642 0002                  		add.w	#2,d2
00200466                            @goodin_b:
00200466 0240 0EE0                  		and.w	#$EE0,d0
0020046A 8042                        		or.w	d2,d0
0020046C                            
0020046C 3400                       		move.w	d0,d2
0020046E 0242 00E0                   		and.w	#$0E0,d2
00200472 0803 0006                  		btst	#6,d3
00200476 6700                       		beq.s	@goodin_g
00200478 0C42 00E0                   		cmp.w	#$0E0,d2
0020047C 6C00                        		bge.s	@goodin_g
0020047E 0642 0020                  		add.w	#$020,d2
00200482                            @goodin_g:
00200482 0240 0E0E                  		and.w	#$E0E,d0
00200486 8042                        		or.w	d2,d0
00200488                            
00200488 3400                       		move.w	d0,d2
0020048A 0242 0E00                   		and.w	#$E00,d2
0020048E 0803 0007                  		btst	#7,d3
00200492 6700                       		beq.s	@goodin_r
00200494 0C42 0E00                   		cmp.w	#$E00,d2
00200498 6C00                        		bge.s	@goodin_r
0020049A 0642 0200                  		add.w	#$200,d2
0020049E                            @goodin_r:
0020049E 0240 00EE                  		and.w	#$0EE,d0
002004A2 8042                        		or.w	d2,d0
002004A4                            
002004A4 3AC0                        		move.w	d0,(a5)+
002004A6 51CC FFA6                  		dbf	d4,@next_in
002004AA                            		
002004AA 102E 0001                  		move.b	palFd_delay(a6),d0
002004AE 0240 001F                  		and.w	#$1F,d0
002004B2 0440 0001                  		sub.w	#1,d0
002004B6 6A00                       		bpl.s	fadeSet_Return_2
002004B8                            		
002004B8                            ; 		sub.w	#1,d5
002004B8                            ; 		cmp.b	palFd_num(a6),d5
002004B8                            ; 		bne.s	fadeSet_Return
002004B8 4296                       		clr.l	(a6)
002004BA 42AE 0004                  		clr.l	4(a6)
002004BE                            		
002004BE                            fadeSet_Return_2:
002004BE 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
002004C4 812E 0001                  		or.b	d0,palFd_delay(a6)
002004C8 4E75                       		rts
002004CA                            		
002004CA                            ; ---------------------------------
002004CA                            ; fadeSet_out_single
002004CA                            ; 
002004CA                            ; palFd_delay:
002004CA                            ; RGBTTTTT - RGB increment bits
002004CA                            ;            TTTTT timer
002004CA                            ; ---------------------------------
002004CA                            
002004CA                            fadeSet_out_single:
002004CA 046E 0001 0004             		sub.w	#1,palFd_timer(a6)
002004D0 6A00 FEE6                  		bpl	fadeSet_Return
002004D4                            
002004D4 7A00                       		moveq	#0,d5
002004D6 1A2E 0002                  		move.b	palFd_from(a6),d5
002004DA E34D                       		lsl.w	#1,d5
002004DC DAC5                       		adda	d5,a5
002004DE 162E 0001                  		move.b 	palFd_delay(a6),d3
002004E2 0243 00E0                  		and.w	#$E0,d3
002004E6 3D7C 0002 0004             		move.w	#2,palFd_timer(a6)
002004EC                            		
002004EC 7800                       		moveq	#0,d4
002004EE 182E 0003                  		move.b 	palFd_num(a6),d4
002004F2                            @next_in:
002004F2 3015                        		move.w	(a5),d0
002004F4 3400                       		move.w	d0,d2
002004F6 0242 000E                   		and.w	#$00E,d2
002004FA 0803 0005                  		btst	#5,d3
002004FE 6700                       		beq.s	@goodin_b
00200500                            ;  		tst.w	d2
00200500                            ;  		beq.s	@goodin_b
00200500 0442 0002                  		sub.w	#2,d2
00200504                            @goodin_b:
00200504 0240 0EE0                  		and.w	#$EE0,d0
00200508 8042                        		or.w	d2,d0
0020050A                            
0020050A 3400                       		move.w	d0,d2
0020050C 0242 00E0                   		and.w	#$0E0,d2
00200510 0803 0006                  		btst	#6,d3
00200514 6700                       		beq.s	@goodin_g
00200516                            ;  		tst.w	d2
00200516                            ;  		beq.s	@goodin_g
00200516 0442 0020                  		sub.w	#$020,d2
0020051A                            @goodin_g:
0020051A 0240 0E0E                  		and.w	#$E0E,d0
0020051E 8042                        		or.w	d2,d0
00200520                            
00200520 3400                       		move.w	d0,d2
00200522 0242 0E00                   		and.w	#$E00,d2
00200526 0803 0007                  		btst	#7,d3
0020052A 6700                       		beq.s	@goodin_r
0020052C                            ;  		tst.w	d2
0020052C                            ;  		beq.s	@goodin_r
0020052C 0442 0200                  		sub.w	#$200,d2
00200530                            @goodin_r:
00200530 0240 00EE                  		and.w	#$0EE,d0
00200534 8042                        		or.w	d2,d0
00200536                            
00200536 3AC0                        		move.w	d0,(a5)+
00200538 51CC FFB8                  		dbf	d4,@next_in
0020053C                            		
0020053C 102E 0001                  		move.b	palFd_delay(a6),d0
00200540 0240 001F                  		and.w	#$1F,d0
00200544 0440 0001                  		sub.w	#1,d0
00200548 6A00                       		bpl.s	@fadeSet_Return_2
0020054A                            		
0020054A                            ; 		sub.w	#1,d5
0020054A                            ; 		cmp.b	palFd_num(a6),d5
0020054A                            ; 		bne.s	fadeSet_Return
0020054A 4296                       		clr.l	(a6)
0020054C 42AE 0004                  		clr.l	4(a6)
00200550                            		
00200550                            @fadeSet_Return_2:
00200550 022E 00E0 0001             		and.b	#$E0,palFd_delay(a6)
00200556 812E 0001                  		or.b	d0,palFd_delay(a6)
0020055A 4E75                       		rts
0020055C                            		
0020055C                            ; --------------------------------------------
0020055C                            ; PalFade_Set
0020055C                            ; --------------------------------------------
0020055C                            
0020055C                            PalFade_Set:
0020055C 4E75                       		rts
0020055E                            		
0020055E                            ; ====================================================================
0020055E                            ; ---------------------------------------------
0020055E                            ; DMA
0020055E                            ; ---------------------------------------------
0020055E                            
0020055E                            ; ROM data
0020055E                            ; Size
0020055E                            ; VRAM Destiantion
0020055E                            
0020055E                            DMA_Read:
0020055E 4DF9 FFFF EB10              		lea	(RAM_DMA_Buffer),a6
00200564                            ;  		move.w	#64,d3
00200564 381E                         		move.w	(a6)+,d4
00200566                            ;   		sub.w	d4,d3
00200566                            ;   		bmi	@FinishList
00200566 4A44                         		tst.w	d4
00200568 6700 0000                    		beq	@FinishList
0020056C 0444 0001                    		sub.w	#1,d4
00200570                            ; 		dma 	on
00200570                            @NextEntry:
00200570 2A1E                       		move.l	(a6)+,d5
00200572 0685 0000 0002              		add.l	#2,d5
00200578                             		
00200578 E28D                         		lsr.l	#1,d5
0020057A 2C3C 9600 9500              		move.l	#$96009500,d6
00200580 1C05                        		move.b	d5,d6
00200582 E08D                        		lsr.l	#8,d5
00200584 4846                        		swap	d6
00200586 1C05                        		move.b	d5,d6
00200588 23C6 00C0 0004              		move.l	d6,(vdp_ctrl)
0020058E 3C3C 9700                   		move.w	#$9700,d6
00200592 E08D                        		lsr.l	#8,d5
00200594 1C05                        		move.b	d5,d6
00200596 33C6 00C0 0004              		move.w	d6,(vdp_ctrl)
0020059C                             		
0020059C 2C3C 9400 9300               		move.l	#$94009300,d6		;Size
002005A2 3A1E                         		move.w	(a6)+,d5
002005A4 1C05                         		move.b	d5,d6
002005A6 4846                        		swap	d6
002005A8 E04D                         		lsr.w	#8,d5
002005AA 1C05                         		move.b	d5,d6
002005AC 23C6 00C0 0004               		move.l	d6,(vdp_ctrl)
002005B2                             		
002005B2 3A1E                        		move.w	(a6)+,d5
002005B4 EB4D                        		lsl.w	#5,d5
002005B6 3C05                        		move.w	d5,d6
002005B8 0245 3FFF                   		and.w	#$3FFF,d5
002005BC 0045 4000                   		or.w	#$4000,d5
002005C0 E04E                        		lsr.w	#8,d6
002005C2 EC4E                        		lsr.w	#6,d6
002005C4 0246 0003                   		and.w	#%11,d6
002005C8 0046 0080                   		or.w	#$80,d6
002005CC 3F06                        		move.w	d6,-(sp)
002005CE 3F05                        		move.w	d5,-(sp)	
002005D0 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
002005D6 33FC 0100 00A1 1100         		move.w	#$100,($A11100).l
002005DE                            @hold_on:
002005DE 0839 0000 00A1 1100         		btst	#0,($A11100).l
002005E6 66F6                         		bne.s	@hold_on
002005E8                              		
002005E8 33DF 00C0 0004              		move.w	(sp)+,(vdp_ctrl)
002005EE 33FC 0000 00A1 1100          		move.w	#0,($A11100).l
002005F6                               		
002005F6 51CC FF78                   		dbf	d4,@NextEntry
002005FA                             		
002005FA                            @FinishList:
002005FA 4279 FFFF EB10             		clr.w	(RAM_DMA_Buffer)
00200600 4E75                        		rts
00200602                            
00200602                            @ResetAllList:
00200602 4E75                       		rts
00200604                            		
00200604                            ; -----------------------------------
00200604                            ; Set new entry to the list
00200604                            ; 
00200604                            ; Input:
00200604                            ; d0 - ROM Address
00200604                            ; d1 - Size
00200604                            ; d2 - VRAM
00200604                            ; 
00200604                            ; Uses:
00200604                            ; a2/d3
00200604                            ; -----------------------------------
00200604                            
00200604                            DMA_Set:
00200604 45F9 FFFF EB10             		lea	(RAM_DMA_Buffer),a2
0020060A 0C52 0040                  		cmp.w	#64,(a2)
0020060E 6C00                       		bge.s	@Return
00200610 3612                       		move.w	(a2),d3
00200612 E74B                       		lsl.w	#3,d3			;Size: 8
00200614 D4C3                       		adda 	d3,a2
00200616 D4FC 0002                  		adda	#2,a2
0020061A                            		
0020061A 24C0                       		move.l	d0,(a2)+		;ROM Address
0020061C 34C1                       		move.w	d1,(a2)+
0020061E 34C2                       		move.w	d2,(a2)+
00200620 0679 0001 FFFF EB10        		add.w	#1,(RAM_DMA_Buffer)
00200628                            @Return:
00200628 4E75                       		rts
0020062A                            		
0020062A                            ; ====================================================================
0020062A                            ; ---------------------------------------------
0020062A                            ; Sprites system
0020062A                            ; ---------------------------------------------
0020062A                            
0020062A                            ; ---------------------------------------------
0020062A                            ; Sprites_Reset
0020062A                            ; ---------------------------------------------
0020062A                            
0020062A                            Sprites_Clear:
0020062A                            ;  		lea	(RAM_Sprites),a6
0020062A                            ;  		move.w	#$4F,d6
0020062A                            ; @clrit:
0020062A 42B9 FFFF E340               		clr.l	(RAM_Sprites)
00200630 42B9 FFFF E344               		clr.l	(RAM_Sprites+4)
00200636 4E75                       		rts
00200638                            		
00200638                            ; ---------------------------------------------
00200638                            ; Sprites_Reset
00200638                            ; ---------------------------------------------
00200638                            
00200638                            Sprites_Reset:
00200638 4DF9 FFFF E5C0             		lea	(RAM_SprControl),a6
0020063E 2A6E 0000                  		movea.l	sprite_free(a6),a5
00200642 BAFC E340                  		cmpa	#((RAM_Sprites)&$FFFF),a5
00200646 6D00                       		blt.s	@Full
00200648                            @NextEntry:
00200648 BAFC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
0020064C 6E00                        		bgt.s	@Full
0020064E 429D                        		clr.l	(a5)+
00200650 429D                         		clr.l	(a5)+
00200652 BAFC E5C0                    		cmpa	#((RAM_Sprites+$280)&$FFFF),a5
00200656 6DF0                         		blt.s	@NextEntry
00200658                            @Full:
00200658 2D7C FFFF E340 0000        		move.l	#RAM_Sprites,sprite_free(a6)
00200660 3D7C 0001 0004             		move.w	#1,sprite_link(a6)
00200666                            @Return:
00200666 4E75                       		rts
00200666 4E75                       		rts
00200668                            		include	"system/sound/68k/main.asm"
00200668                            ; ================================================================
00200668                            ; SMEG Karasucia
00200668                            ; Sound and Music Engine for Genesis (also MCD* and 32X**)
00200668                            ;
00200668                            ; (C)2013-2017 GF64
00200668                            ; 
00200668                            ; Reads patterns from a ImpulseTracker file (.it)
00200668                            ;
00200668                            ; Ticks:
00200668                            ; 150 - NTSC
00200668                            ; 120 - PAL
00200668                            ;
00200668                            ; uses assembler settings:
00200668                            ; MCD     - for building to MCD (All the driver must be aligned
00200668                            ;              to WordRAM or PRG-RAM)
00200668                            ; MARS       - for building to 32x (CODE and
00200668                            ;              DATA(Music/Sfx/Voices/Z80 samples) must be aligned to
00200668                            ;              the 32x standards, uses bank 0 only,
00200668                            ;              PWM Samples can be anywhere in ROM)
00200668                            ; SMEG_Z80   - Use Z80, set to 0 while running from PRGRAM
00200668                            ;                 
00200668                            ; Limtations:
00200668                            ; (Driver) - Effects: only volume and panning (Xxx) works
00200668                            ; 
00200668                            ; (MCD) - You cant use Z80 samples if your program is running
00200668                            ;            on PRG-RAM (Z80 cant access RAM), if your program is
00200668                            ;            running on WORD-RAM, set the permission to
00200668                            ;            MainCPU (2M Mode) (not recommended)
00200668                            ;            
00200668                            ; * requires respective SubCPU code
00200668                            ; ** requires respective SH2 code
00200668                            ; ================================================================
00200668                            
00200668                            ;NOTE: Format
00200668                            ; SONGFILE:
00200668                            ; 		dc.b 12,0		; Numof_blocks, loop_block (-1 dont loop)
00200668                            ; 		dc.l @pattern		; Pattern data
00200668                            ;      		dc.l @instruments	; Instrument set
00200668                            ;      		dc.w 8			; Number of channel settings
00200668                            ;       	dc.b FM_6,64,$80,$0F	; Example of one (Channel,Vol,Pan,Extra)		
00200668                            ;		...
00200668                            ;
00200668                            ; Extra:
00200668                            ; FM: %????KEYS KEYS: FM Keys (ignored if not FM)
00200668                            ; PSG: (not yet)
00200668                            ; PCM/PWM: not yet
00200668                            ; 
00200668                            ; @instruments:
00200668                            ; 		dc.w @ymha-@instruments
00200668                            ; 		dc.w @psg-@instruments
00200668                            ; 		dc.w @noise-@instruments
00200668                            ; 		dc.w @psmpl-@instruments
00200668                            ; 		even
00200668                            ; @ymha:
00200668                            ; 		;FM
00200668                            ; 		dc.w INSTNUM,0
00200668                            ; 		dc.l fmVoice_bass_ambient
00200668                            ;    		
00200668                            ;    		;FM3
00200668                            ;    		dc.w $40|INSTNUM,0
00200668                            ;    		dc.l fm_hatopen
00200668                            ;    		dc.w $0511|$2000,$0328|$2000
00200668                            ;    		dc.w $005E|$2000,$0328|$2000
00200668                            ;    		
00200668                            ;    		;Samples
00200668                            ;   		dc.w $80|INSTNUM,12	; NUM,Pitch
00200668                            ;   		dc.l wav_kick		; WAV Start
00200668                            ;  		dc.l wav_kick_e		; WAV End
00200668                            ;  		dc.l -1			; WAV Loop sample (0: start -1: none)
00200668                            ;  		
00200668                            ; 		dc.w -1			; ENDOFLIST
00200668                            ; 		even
00200668                            ; @psmpl:
00200668                            ; 		dc.w -1			; Later
00200668                            ; 		even
00200668                            ; @psg:
00200668                            ; 		dc.w -1			; Later
00200668                            ; 		even
00200668                            ; @noise:
00200668                            ;  		dc.w 3,%101		; INSTNUM, PSG Noise setting
00200668                            ;  		
00200668                            ;  		dc.w 5,%101
00200668                            ;  		dc.w 7,%100
00200668                            ;  		
00200668                            ; 		dc.w -1
00200668                            ; 		even
00200668                            
00200668                            
00200668                            ; GEMS style tick
00200668                            ; 		dc.l fmSfx_Coin
00200668                            ; 		dc.w $00AB|$3800,$0457|$3000
00200668                            ; 		dc.w $0511|$3000,$0336|$2000
00200668                            ;
00200668                            ;    		dc.l fm_hatopen
00200668                            ;    		dc.w $0511|$2000,$0328|$2000
00200668                            ;    		dc.w $005E|$2000,$0328|$2000
00200668                            ;
00200668                            ;    		dc.l fm_hatclosed
00200668                            ;    		dc.w $051C|$2000,$0328|$2000
00200668                            ;    		dc.w $005E|$2000,$0328|$2000
00200668                            ;
00200668                            ;    		dc.l fm_hatclosed
00200668                            ;    		dc.w $051C|$2000,$0328|$2000
00200668                            ;    		dc.w $005E|$2000,$0328|$2000	
00200668                            
00200668                            ; ================================================================
00200668                            
00200668                            			rsreset
00200668 =00000000                  DrvStatus		rs.b 1		;Byte
00200668 =00000001                  snd_flags		rs.b 1		;Byte
00200668 =00000002                  PatternEnd		rs.b 1		;Byte
00200668 =00000003                  PatternLoop		rs.b 1		;Byte
00200668 =00000004                  SongRequest		rs.l 1 		;Long
00200668 =00000008                  SongStart		rs.l 1		;Long
00200668 =0000000C                  SongRead		rs.l 1		;Long
00200668 =00000010                  snd_instr		rs.l 1		;Long
00200668 =00000014                  SongPcmSamp		rs.l 1		;Long
00200668 =00000018                  TicksRequest		rs.w 1		;Word
00200668 =0000001A                  TicksRead		rs.w 1		;Word
00200668 =0000001C                  TicksSet		rs.w 1		;Word
00200668 =0000001E                  TempoRead 		rs.w 1		;Word
00200668 =00000020                  PattSize		rs.w 1		;Word
00200668 =00000022                  pattr_read		rs.w 1		;Word
00200668 =00000024                  CdOnlyFlags		rs.w 1		;Word
00200668 =00000026                  CurrPattern		rs.b 1		;Byte
00200668 =00000027                  PcmChnOnOff		rs.b 1		;Byte
00200668 =00000028                  PsgLast			rs.b 1		;Byte
00200668 =00000029                  snd_flagsBGM		rs.b 1		;Byte
00200668 =0000002A                  LastPattChn		rs.b 1		;Byte
00200668 =0000002B                  Psg_Vibrato		rs.b 1		;Byte
00200668 =0000002C                  Psg_AutoVol		rs.b 1		;Byte
00200668 =0000002E                  sizeof_SndBuff		rs.l 0
00200668                            
00200668                            ; --------------------------------------------
00200668                            ; Channel settings
00200668                            ; --------------------------------------------
00200668                            
00200668                            			rsreset
00200668 =00000000                  Chn_Freq		rs.w 1		;Word
00200668 =00000002                  Chn_Effect		rs.w 1		;Word
00200668 =00000004                  Chn_Portam		rs.w 1		;Word
00200668 =00000006                  Chn_Type		rs.b 1		;Byte
00200668 =00000007                  Chn_ID			rs.b 1		;Byte
00200668 =00000008                  Chn_Inst		rs.b 1		;Byte
00200668 =00000009                  Chn_Vol			rs.b 1		;Byte
00200668 =0000000A                  Chn_MainVol		rs.b 1		;Byte
00200668 =0000000B                  Chn_Note		rs.b 1		;Byte
00200668 =0000000C                  Chn_Pan			rs.b 1		;Byte
00200668 =0000000D                  Chn_FM_Key		rs.b 1		;Byte
00200668 =0000000E                  Chn_PCM_Pitch		rs.b 1		;Byte
00200668                            ; Chn_PSG_Vibrato		rs.b 1		;Byte
00200668 =0000000F                  Chn_Timer		rs.b 1
00200668 =00000010                  sizeof_Chn		rs.l 0
00200668                             
00200668                             
00200668                            			rsreset
00200668 =00000000                  instDYmha		rs.w 1
00200668 =00000002                  instDPsg		rs.w 1
00200668 =00000004                  instDNoise		rs.w 1
00200668 =00000006                  instDpsmpl		rs.w 1
00200668                            
00200668                            ; --------------------------------------------
00200668                            ; Bits
00200668                            ; --------------------------------------------
00200668                            
00200668 =00000000                  bitPriority		equ	0
00200668 =00000001                  bitSfxOn		equ	1
00200668 =00000002                  bitEnabled		equ	2
00200668                            
00200668                            ;Status
00200668 =00000000                  bitFmDac		equ	0
00200668 =00000001                  bitDacNote		equ	1
00200668 =00000002                  bitTone3		equ	2
00200668 =00000003                  bitSpecial3		equ	3
00200668                            
00200668                            ; --------------------------------------------
00200668                            ; Channel IDs
00200668                            ; --------------------------------------------
00200668                            
00200668 =00000000                  FM_1			equ	$00
00200668 =00000001                  FM_2			equ	$01
00200668 =00000002                  FM_3			equ	$02
00200668 =00000004                  FM_4			equ	$04
00200668 =00000005                  FM_5			equ	$05
00200668 =00000006                  FM_6			equ	$06
00200668 =00000080                  PSG_1			equ	$80
00200668 =000000A0                  PSG_2			equ	$A0
00200668 =000000C0                  PSG_3			equ	$C0
00200668 =000000E0                  NOISE			equ	$E0
00200668 =00000010                  PCM_1			equ	$10
00200668 =00000011                  PCM_2			equ	$11
00200668 =00000012                  PCM_3			equ	$12
00200668 =00000013                  PCM_4			equ	$13
00200668 =00000014                  PCM_5			equ	$14
00200668 =00000015                  PCM_6			equ	$15
00200668 =00000016                  PCM_7			equ	$16
00200668 =00000017                  PCM_8			equ	$17
00200668 =00000012                  max_chnl		equ	18
00200668                            
00200668                            ; --------------------------------------------
00200668                            ; .IT request ($80+) format
00200668                            ; --------------------------------------------
00200668                            
00200668 =00000000                  bitNote			equ	0
00200668 =00000001                  bitInst			equ	1
00200668 =00000002                  bitVolume		equ	2
00200668 =00000003                  bitEffect		equ	3
00200668 =00000004                  bitSameNote		equ	4
00200668 =00000005                  bitSameInst		equ	5
00200668 =00000006                  bitSameVol		equ	6
00200668 =00000007                  bitSameEffect		equ	7
00200668                            
00200668                            ; --------------------------------------------
00200668                            ; RAM
00200668                            ; 
00200668                            ; MAX: $400
00200668                            ; --------------------------------------------
00200668                            
00200668                            			rsset RAM_Audio
00200668 =FFFFEF00                  RAM_SMEG_Buffer		rs.b sizeof_SndBuff
00200668 =FFFFEF2E                  RAM_SMEG_SfxBuff	rs.b sizeof_SndBuff
00200668 =FFFFEF5C                  RAM_SMEG_PrioList	rs.b max_chnl
00200668 =FFFFEF6E                  RAM_SMEG_Chnls_BGM	rs.b $10*max_chnl
00200668 =FFFFF08E                  RAM_SMEG_Chnls_SFX	rs.b $10*max_chnl
00200668 =FFFFF1AE                  RAM_SMEG_PcmList	rs.l 64
00200668                            			
00200668 =FFFFF2AE                  sizeof_SMEG		rs.l 0
00200668                            ;      			inform 0,"SMEG Uses: %h",sizeof_SMEG-RAM_Audio
00200668                            			
00200668                            ; ================================================================
00200668                            ; -------------------------------------------
00200668                            ; Macros
00200668                            ; -------------------------------------------
00200668                            
00200668                            ; -----------------------------------------
00200668                            
00200668                            PCM_Entry	macro	cd_side,mars_side,loop,pitch
00200668                            		
00200668                            cdsize_size	= strlen(\cd_side)
00200668                            		if MCD
00200668                            		  if cdsize_size>$C
00200668                            		    inform 2,"(SMEG) CD FILENAME TOO LONG"
00200668                            		  elseif cdsize_size=$C
00200668                            		    dc.b \cd_side
00200668                            		  elseif cdsize_size<$C
00200668                            		    dc.b \cd_side
00200668                            		    rept $C-cdsize_size
00200668                            		      dc.b 0
00200668                            		    endr
00200668                            		  elseif cdsize_size<=0
00200668                            		    inform 2,"(SMEG) YOU FORGOT THE CD FILENAME"
00200668                            		  endif
00200668                            		  
00200668                            		elseif MARS
00200668                            		  dc.l mars_side
00200668                            		endif
00200668                            		
00200668                            		dc.w loop
00200668                            		dc.w pitch
00200668                            		endm
00200668                            
00200668                            ; 		inform 0,"%h",RAM_SMEG_Buffer
00200668                            
00200668                            ; ================================================================
00200668                            ; -------------------------------------------
00200668                            ; External Calls
00200668                            ; -------------------------------------------
00200668                            
00200668                            ;SegaPCM
00200668 =00000020                  CdTask_LoadPcm		equ	$20
00200668 =00000021                  CdTask_SetAddr		equ	$21
00200668 =00000022                  CdTask_SetFreq		equ	$22
00200668 =00000023                  CdTask_SetPan		equ	$23
00200668 =00000024                  CdTask_SetEnv		equ	$24
00200668 =00000025                  CdTask_SetOnOff		equ	$25
00200668 =00000026                  CdTask_ClearAllPcm	equ	$26
00200668                            
00200668                            ;MARS
00200668 =00000001                  marscall_Play		equ	1
00200668 =00000002                  marscall_Stop		equ	2
00200668 =00000003                  marscall_SetSmpl	equ	3
00200668 =00000004                  marscall_SetVol		equ	4
00200668 =00000005                  marscall_SetEntry	equ	5
00200668                            	
00200668                            ; ================================================================
00200668                            ; -------------------------------------------
00200668                            ; Init
00200668                            ; -------------------------------------------
00200668                            
00200668                            Audio_Init:
00200668 41F9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a0
0020066E 303C 02FF                  		move.w	#$2FF,d0
00200672                            @ClrAll:
00200672 4298                       		clr.l	(a0)+
00200674 51C8 FFFC                  		dbf	d0,@ClrAll
00200678                            		
00200678                            ; -------------------------------------------
00200678                            ; Z80
00200678                            ; -------------------------------------------
00200678                            
00200678                            SMEG_Z80_Init:
00200678 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00200680 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
00200688                            @WaitZ80:
00200688 0839 0000 00A1 1100        		btst	#0,($A11100).l
00200690 66F6                       		bne.s	@WaitZ80
00200692                            
00200692 41F9 00A0 0000             		lea	($A00000).l,a0
00200698 303C 1FFF                  		move.w	#$1FFF,d0
0020069C                            @cleanup:
0020069C 4218                       		clr.b	(a0)+
0020069E 51C8 FFFC                  		dbf	d0,@cleanup
002006A2                            		
002006A2 41FA 0000                  		lea	Z80_Driver(pc),a0
002006A6 43F9 00A0 0000             		lea	($A00000).l,a1
002006AC 323C 0000                  		move.w	#Z80_DriverEnd-Z80_Driver,d1
002006B0                            @ToZ80:
002006B0 12D8                       		move.b	(a0)+,(a1)+
002006B2 51C9 FFFC                  		dbf	d1,@ToZ80
002006B6                            
002006B6                            ; -----------------------------------
002006B6                            
002006B6 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
002006BE 4E71                       		nop
002006C0 4E71                       		nop
002006C2 4E71                       		nop
002006C4 4E71                       		nop
002006C6 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l
002006CE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
002006D6                            ; 		rts
002006D6                            		
002006D6                            ; -------------------------------------------
002006D6                            ; Stop ALL Sound
002006D6                            ; -------------------------------------------
002006D6                            
002006D6                            SMEG_StopSnd:
002006D6 103C 002B                  		move.b	#$2B,d0
002006DA 123C 0000                  		move.b	#$00,d1
002006DE 6100 0000                  		bsr	SMEG_Z80_Off
002006E2 6100 0000                  		bsr	FM_RegWrite_1
002006E6 6100 0000                  		bsr	SMEG_Z80_On
002006EA 6100 0000                  		bsr	Audio_Sample_Stop
002006EE                            		
002006EE 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
002006F4 0896 0002                  		bclr	#bitEnabled,(a6)
002006F8                            	
002006F8 6100 0000                  		bsr	SMEG_FM_Reset
002006FC 6100 0000                   		bsr	SMEG_PSG_Reset
00200700 6000 0000                  		bra	SMEG_PCM_Reset
00200704                            		
00200704                            ; -------------------------------------------
00200704                            ; Play Song
00200704                            ; -------------------------------------------
00200704                            
00200704                            SMEG_PlaySong:
00200704 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
0020070A 08D6 0002                  		bset	#bitEnabled,(a6)
0020070E 4E75                       		rts
00200710                            		
00200710                            ; -------------------------------------------
00200710                            ; Load Song
00200710                            ;
00200710                            ; d0 - StartOfSong
00200710                            ; d1 - Ticks
00200710                            ; d2 - Type (0 - song, 1 - sfx)
00200710                            ; -------------------------------------------
00200710                            
00200710                            Audio_Track_Play:
00200710 4A42                       		tst.w	d2
00200712 6600                       		bne.s	@Sfx
00200714                            		
00200714 23C0 FFFF EF04             		move.l	d0,(RAM_SMEG_Buffer+SongRequest)
0020071A 33C1 FFFF EF18             		move.w	d1,(RAM_SMEG_Buffer+TicksRequest)
00200720 4E75                       		rts
00200722                            @Sfx:
00200722                            ; 		clr.w	(RAM_SMEG_SfxBuff+pattr_read)
00200722                            ; 		clr.w	(RAM_SMEG_SfxBuff+CurrPattern)
00200722                            ; 		move.l	(RAM_SMEG_SfxBuff+SongStart),(RAM_SMEG_SfxBuff+SongRead)
00200722                            ; 		cmp.l	(RAM_SMEG_SfxBuff+SongRequest),d0
00200722                            ; 		bne.s	@SameSfx
00200722                            		
00200722 23C0 FFFF EF32             		move.l	d0,(RAM_SMEG_SfxBuff+SongRequest)
00200728 33C1 FFFF EF46             		move.w	d1,(RAM_SMEG_SfxBuff+TicksRequest)
0020072E                            @SameSfx:
0020072E 4E75                       		rts
00200730                            		
00200730                            ; ================================================================
00200730                            ; -------------------------------------------
00200730                            ; Run
00200730                            ; -------------------------------------------
00200730                            
00200730                            Audio_Run:
00200730 4DF9 FFFF EF00             		lea	(RAM_SMEG_Buffer),a6
00200736 6100 0000                  		bsr	@RequestSong
0020073A 0896 0000                  		bclr	#bitPriority,(a6)
0020073E 6100 0000                                  bsr	@ReadRow
00200742                            
00200742 4DF9 FFFF EF2E               		lea	(RAM_SMEG_SfxBuff),a6
00200748 6100 0000                   		bsr	@RequestSfx
0020074C 08D6 0000                  		bset	#bitPriority,(a6)
00200750 6100 0000                  		bsr	@ReadRow
00200754                            		
00200754                            ; -------------------------
00200754                            ; MARS ONLY
00200754                            ; Transfer 68k RAM using
00200754                            ; framebuffer (offside)
00200754                            ; -------------------------
00200754                            
00200754                            ; @marsturn:
00200754                            ; 		btst	#7,(marsreg)	
00200754                            ; 		bne.s	@busymars
00200754                            ; 		
00200754                            ; 		bchg	#0,($A1518B)
00200754                            ; @waitfb:	btst	#1,($A1518B)
00200754                            ; 		bne.s	@waitfb
00200754                            ; 		lea	(RAM_SMEG_Chnls_BGM),a0
00200754                            ; 		lea	(framebuffer+$14000),a1
00200754                            ; 		move.w	#$10*max_chnl,d0
00200754                            ; @copytomars:	
00200754                            ; 		move.b	(a0)+,(a1)+
00200754                            ; 		dbf	d0,@copytomars
00200754                            ; 		bchg	#0,($A1518B)
00200754                            ; @busymars:
00200754                            
00200754                            ; -------------------------
00200754                            
00200754                            @Wait:
00200754 4E75                       		rts
00200756                            
00200756                            ; -------------------------------------------
00200756                            ; Request song
00200756                            ; -------------------------------------------
00200756                            	
00200756                            @RequestSong:
00200756 4AAE 0004                  		tst.l	SongRequest(a6)
0020075A 6700                       		beq.s	@Same
0020075C 0896 0002                  		bclr	#bitEnabled,(a6)
00200760 6100 FF74                   		bsr	SMEG_StopSnd			;d0-d1 are gone
00200764 4AAE 0004                   		tst.l	SongRequest(a6)
00200768 6B00                        		bmi.s	@Same
0020076A                             		
0020076A 422E 0026                  		clr.b	CurrPattern(a6)
0020076E 422E 0002                  		clr.b	PatternEnd(a6)
00200772 426E 0020                  		clr.w	PattSize(a6)
00200776 426E 0022                  		clr.w	pattr_read(a6)
0020077A 4BF9 FFFF EF6E             		lea	(RAM_SMEG_Chnls_BGM),a5
00200780 422E 0027                  		clr.b	PcmChnOnOff(a6)
00200784 422E 0000                                  clr.b	DrvStatus(a6)
00200788 6100 0000                  		bsr	SMEG_Load_SetChnls
0020078C 6100 0000                   		bsr	SMEG_Load_SetExtChnls
00200790 08D6 0002                  		bset	#bitEnabled,(a6)
00200794                            
00200794 426E 0018                  		clr.w	TicksRequest(a6)
00200798 42AE 0004                  		clr.l	SongRequest(a6)
0020079C                            @Same:
0020079C 4E75                       		rts
0020079E                            		
0020079E                            ; -------------------------------------------
0020079E                            ; Request sfx
0020079E                            ; -------------------------------------------
0020079E                            
0020079E                            @RequestSfx:
0020079E 4AAE 0004                  		tst.l	SongRequest(a6)
002007A2 67F8                       		beq.s	@Same
002007A4 6BF6                       		bmi.s	@Same
002007A6                            		
002007A6 0896 0002                  		bclr	#bitEnabled,(a6)
002007AA 422E 0026                  		clr.b	CurrPattern(a6)
002007AE 422E 0002                  		clr.b	PatternEnd(a6)
002007B2 426E 0020                  		clr.w	PattSize(a6)
002007B6 426E 0022                  		clr.w	pattr_read(a6)
002007BA                            		
002007BA 422E 0027                  		clr.b	PcmChnOnOff(a6)
002007BE 422E 0000                                  clr.b	DrvStatus(a6)
002007C2                            ;                 bset	#bitSfxOn,(a6)
002007C2 4BF9 FFFF F08E             		lea	(RAM_SMEG_Chnls_SFX),a5
002007C8 6100 0000                  		bsr	SMEG_Load_SetChnls
002007CC 6100 0000                  		bsr	SMEG_Load_FixSfx
002007D0 08D6 0002                  		bset	#bitEnabled,(a6)
002007D4                            		
002007D4 426E 0018                  		clr.w	TicksRequest(a6)
002007D8 42AE 0004                  		clr.l	SongRequest(a6)
002007DC 4E75                       		rts
002007DE                            		
002007DE                            ; -------------------------------------------
002007DE                            ; Read row
002007DE                            ; -------------------------------------------
002007DE                            
002007DE                            @ReadRow:
002007DE 0816 0002                  		btst	#bitEnabled,(a6)
002007E2 6700 FF70                  		beq	@Wait
002007E6                            
002007E6 046E 0001 001A             		sub.w	#1,TicksRead(a6)
002007EC 6A00 FF66                  		bpl	@Wait
002007F0 3D6E 001C 001A              		move.w	TicksSet(a6),TicksRead(a6)
002007F6                            
002007F6                            @NewRow:
002007F6 286E 000C                                  movea.l	SongRead(a6),a4
002007FA                            
002007FA                            ; --------------------------------
002007FA                            ; New pattern
002007FA                            ; --------------------------------
002007FA                            
002007FA                            @Next:
002007FA 7A00                       		moveq	#0,d5
002007FC 7C00                       		moveq	#0,d6
002007FE 3C2E 0020                   		move.w	PattSize(a6),d6
00200802 0446 0001                    		sub.w	#1,d6
00200806 3A2E 0022                    		move.w	pattr_read(a6),d5
0020080A BC85                        		cmp.l	d5,d6
0020080C 6400                        		bcc.s	@NoNextRow
0020080E                             		
0020080E 426E 0022                  		clr.w	pattr_read(a6)
00200812 7A00                       		moveq	#0,d5
00200814 7C00                       		moveq	#0,d6
00200816 1C2E 0002                  		move.b	PatternEnd(a6),d6
0020081A 1A2E 0026                  		move.b	CurrPattern(a6),d5
0020081E BC45                       		cmp.w	d5,d6
00200820 6E00                       		bgt.s	@NotEnd
00200822                            		
00200822 0C2E 00FF 0003             		cmp.b	#-1,PatternLoop(a6)
00200828 6700                       		beq.s	@exit
0020082A                            		
0020082A 286E 0008                  		movea.l	SongStart(a6),a4
0020082E 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
00200832 1D5C 0020                   		move.b	(a4)+,PattSize(a6)
00200836 D8FC 0006                   		adda	#6,a4
0020083A 2D4C 000C                  		move.l	a4,SongRead(a6)
0020083E 1D6E 0003 0026             		move.b	PatternLoop(a6),CurrPattern(a6)
00200844 426E 001A                  		clr.w	TicksRead(a6)
00200848 4E75                       		rts
0020084A                            		
0020084A                            @exit:
0020084A 0896 0002                  		bclr	#bitEnabled,(a6)
0020084E 4E75                       		rts
00200850                            
00200850                            ; --------------------------------
00200850                            
00200850                            @NotEnd:
00200850 062E 0001 0026             		add.b	#1,CurrPattern(a6)
00200856 7000                       		moveq	#0,d0
00200858 102E 0026                  		move.b	CurrPattern(a6),d0
0020085C B02E 0003                  		cmp.b	PatternLoop(a6),d0
00200860 6600                       		bne.s	@DontSaveLoop
00200862 2D4C 0008                  		move.l	a4,SongStart(a6)
00200866                            @DontSaveLoop:
00200866 7200                       		moveq	#0,d1
00200868 121C                       		move.b	(a4)+,d1
0020086A 141C                       		move.b	(a4)+,d2
0020086C E14A                       		lsl.w	#8,d2
0020086E 8242                       		or	d2,d1
00200870 3D41 0020                  		move.w	d1,PattSize(a6)
00200874 D8FC 0006                  		adda	#6,a4
00200878                            		
00200878                            ; --------------------------------
00200878                            ; Current pattern
00200878                            ; --------------------------------
00200878                            
00200878                            @NoNextRow:
00200878 7C00                       		moveq	#0,d6
0020087A 7000                       		moveq	#0,d0
0020087C 101C                       		move.b	(a4)+,d0
0020087E                            
0020087E 4A40                       		tst.w	d0
00200880 6600                       		bne.s	@ValidNote
00200882                            
00200882 066E 0001 0022             		add.w	#1,pattr_read(a6)
00200888 2D4C 000C                  		move.l	a4,SongRead(a6)
0020088C 4E75                       		rts
0020088E                            
0020088E                            @ValidNote:
0020088E 4A00                       		tst.b	d0
00200890 6A00                       		bpl.s	@Not80
00200892 066E 0001 0022             		add.w	#1,pattr_read(a6)
00200898 0880 0007                  		bclr	#7,d0
0020089C 1C1C                       		move.b	(a4)+,d6
0020089E                            @Not80:
0020089E 066E 0001 0022             		add.w	#1,pattr_read(a6)
002008A4 0440 0001                  		sub.w	#1,d0
002008A8 1D40 002A                  		move.b	d0,LastPattChn(a6)
002008AC                            
002008AC 4BF9 FFFF EF6E             		lea 	(RAM_SMEG_Chnls_BGM),a5
002008B2 0816 0000                  		btst 	#bitPriority,(a6)
002008B6 6700                       		beq.s	@MusicPrio
002008B8 4BF9 FFFF F08E             		lea 	(RAM_SMEG_Chnls_SFX),a5	
002008BE                            @MusicPrio:
002008BE C0FC 0010                  		mulu.w	#sizeof_Chn,d0
002008C2 DAC0                       		adda	d0,a5
002008C4                            		
002008C4 4A46                       		tst.w	d6
002008C6 6700                       		beq.s	@NotRest
002008C8 1B46 0006                  		move.b	d6,Chn_Type(a5)
002008CC                            @NotRest:
002008CC                            
002008CC                            ; SFX: Mark used channel
002008CC                            
002008CC 0816 0000                  		btst 	#bitPriority,(a6)
002008D0 6700                       		beq.s	@MusicPrio2
002008D2 6100 0000                  		bsr	SMEG_FindPrioSlot
002008D6 16BC 0001                    		move.b	#1,(a3)
002008DA                            @MusicPrio2:
002008DA                             
002008DA                            ; -------------
002008DA                            ; Note
002008DA                            ; -------------
002008DA                            
002008DA 082D 0004 0006             		btst	#bitSameNote,Chn_Type(a5)
002008E0 6600                       		bne.s	@PlayOnly
002008E2 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
002008E8 6700                       		beq.s	@NoNote
002008EA                            
002008EA 426D 0004                  		clr.w	Chn_Portam(a5)
002008EE 1B5C 000B                                  move.b	(a4)+,Chn_Note(a5)
002008F2 066E 0001 0022             		add.w	#1,pattr_read(a6)
002008F8                            
002008F8                            @PlayOnly:
002008F8                            ; 		bsr	SMEG_ChannelRest
002008F8                            
002008F8                            @NoNote:
002008F8                            
002008F8                            ; -------------
002008F8                            ; Instrument
002008F8                            ; -------------
002008F8                            
002008F8 082D 0005 0006              		btst	#bitSameInst,Chn_Type(a5)
002008FE 6600                       		bne.s	@SameInst
00200900 082D 0001 0006             		btst	#bitInst,Chn_Type(a5)
00200906 6700                       		beq.s	@NoInst
00200908                            
00200908 1B5C 0008                  		move.b	(a4)+,Chn_Inst(a5)
0020090C 066E 0001 0022             		add.w	#1,pattr_read(a6)
00200912                            
00200912                            @SameInst:
00200912 6100 0000                  		bsr	SMEG_SetVoice
00200916                            @NoInst:
00200916                            
00200916                            ; -------------
00200916                            ; Volume
00200916                            ; -------------
00200916                            
00200916 082D 0006 0006              		btst	#bitSameVol,Chn_Type(a5)
0020091C 6600                        		bne.s	@SameVol
0020091E 082D 0002 0006             		btst	#bitVolume,Chn_Type(a5)
00200924 6700                       		beq.s	@NoVolume
00200926                            
00200926 7000                       		moveq 	#0,d0
00200928 101C                       		move.b 	(a4)+,d0
0020092A 1B40 0009                  		move.b	d0,chn_vol(a5)
0020092E 066E 0001 0022             		add.w 	#1,pattr_read(a6)
00200934                            @NoVolume:
00200934                            @SameVol:
00200934 6100 0000                   		bsr	@ChnVolume
00200938                             		
00200938                            ; -------------
00200938                            ; Effect
00200938                            ; -------------
00200938                            
00200938 082D 0007 0006              		btst	#bitSameEffect,Chn_Type(a5)
0020093E 6600                        		bne.s	@SameEffect
00200940 082D 0003 0006             		btst	#bitEffect,Chn_Type(a5)
00200946 6700                       		beq.s	@NoEffect
00200948                            
00200948 1B5C 0002                  		move.b	(a4)+,Chn_Effect(a5)
0020094C 066E 0001 0022             		add.w	#1,pattr_read(a6)
00200952 1B5C 0003                  		move.b	(a4)+,Chn_Effect+1(a5)
00200956 066E 0001 0022             		add.w	#1,pattr_read(a6)
0020095C                            @SameEffect:
0020095C 6100 0000                  		bsr	@ChannelEffects
00200960                            @NoEffect:
00200960                            
00200960                            ; --------------
00200960                            ; Play the note
00200960                            ; --------------
00200960                            
00200960 082D 0004 0006              		btst	#bitSameNote,Chn_Type(a5)
00200966 6600                        		bne.s	@SameNote
00200968 082D 0000 0006             		btst	#bitNote,Chn_Type(a5)
0020096E 6700 FE8A                  		beq	@Next
00200972                            @SameNote:
00200972 6100 0000                  		bsr	@ChannelPlay
00200976 6000 FE82                  		bra	@Next
0020097A                            
0020097A                            ; ================================================================
0020097A                            ; -------------------------------
0020097A                            ; PCM Frequencies
0020097A                            ; -------------------------------
0020097A                            
0020097A                            @Notes_PCM:
0020097A 0000 0000 0000 0000 0000+   		dc.w     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0	;0
00200992 0000 0000 0000 0000 0000+   		dc.w     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0	;1
002009AA 0000 0000 0000 0000 0000+  		dc.w     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0	;2
002009C2 00F6 0104 0113 0124 0135+  		dc.w $00F6,$0104,$0113,$0124,$0135,$0148,$015B,$0170,$0186,$019D,$01B5,$01D0	;3
002009DA 01EB 0208 0228 0248 026B+  		dc.w $01EB,$0208,$0228,$0248,$026B,$0291,$02B8,$02E1,$030E,$033C,$036E,$03A3	;4 16000hz
002009F2 03DA 0415 0454 0497 04DD+  		dc.w $03DA,$0415,$0454,$0497,$04DD,$0528,$0578,$05CB,$0625,$0684,$06E8,$0753	;5
00200A0A 07C4 083B 08B0 093D 09C7+  		dc.w $07C4,$083B,$08B0,$093D,$09C7,$0A60,$0AF8,$0BA8,$0C55,$0D10,$0DE2,$0EBE	;6
00200A22 0FA4 107A 1186 1280 1396+  		dc.w $0FA4,$107A,$1186,$1280,$1396,$14CC,$1624,$1746,$18DE,$1A38,$1BE0,$1D94	;7
00200A3A 1F65 20FF 2330 2526 2753+  		dc.w $1F65,$20FF,$2330,$2526,$2753,$29B7,$2C63,$2F63,$31E0,$347B,$377B,$3B41	;8
00200A52 3EE8 4206 4684 4A5A 4EB5+  		dc.w $3EE8,$4206,$4684,$4A5A,$4EB5,$5379,$58E1,$5DE0,$63C0,$68FF,$6EFF,$783C	;9
00200A6A 7FC2 83FC 8D14 9780 9D80+  		dc.w $7FC2,$83FC,$8D14,$9780,$9D80,$AA5D,$B1F9,$BBBA,$CC77,$D751,$E333,$F0B5
00200A82 0000 0000 0000 0000 0000+  		dc.w     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
00200A9A                            		even
00200A9A                            		
00200A9A                            		
00200A9A                            ; ================================================================
00200A9A                            ; -------------------------------
00200A9A                            ; Set Volume
00200A9A                            ; -------------------------------
00200A9A                            
00200A9A                            @ChnVolume:
00200A9A 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00200AA0 6700 0000                  		beq	@Return
00200AA4                            
00200AA4 0816 0000                  		btst	#bitPriority,(a6)
00200AA8 6600                       		bne.s	@SFX_ModeV
00200AAA 6100 0000                  		bsr	SMEG_FindPrioSlot
00200AAE 4A13                         		tst.b	(a3)
00200AB0 6600 0000                    		bne	@Return
00200AB4                            @SFX_ModeV:
00200AB4                            
00200AB4 4A2D 0007                  		tst.b	Chn_ID(a5)
00200AB8 6B00 0000                  		bmi	@ChnVol_PSG
00200ABC 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00200AC2 6C00 0000                  		bge	@ChnVol_PCM
00200AC6                            		
00200AC6 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
00200ACC 6600                       		bne.s	@NotSmplChk
00200ACE 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
00200AD4 6600 0000                  		bne	@Return
00200AD8                            @NotSmplChk:
00200AD8                            
00200AD8                            ; -------------------------------
00200AD8                            ; FM Volume
00200AD8                            ; -------------------------------
00200AD8                            
00200AD8 6100 0000                  		bsr	ChnlFM_srchIns
00200ADC 223C 7F7F 7F7F             		move.l	#$7F7F7F7F,d1
00200AE2 0C42 FFFF                  		cmp.w	#-1,d2
00200AE6 6700 0000                  		beq	@ForceOff
00200AEA 0802 0007                   		btst	#7,d2
00200AEE 6600 0000                   		bne	@ForceOff
00200AF2                             		
00200AF2                            ;  		cmp.b	#64,chn_vol(a5)
00200AF2                            ;  		bge	@Return
00200AF2                            	
00200AF2 D6FC 0004                   		adda.w	#4,a3
00200AF6 2653                       		movea.l	(a3),a3
00200AF8 D6FC 0015                    		adda	#$15,a3
00200AFC                            		
00200AFC 203C 4C44 4840             		move.l	#$4C444840,d0
00200B02 7200                        		moveq	#0,d1
00200B04 7400                        		moveq	#0,d2
00200B06 7600                        		moveq	#0,d3
00200B08 162D 0007                   		move.b	chn_id(a5),d3
00200B0C 0243 0003                   		and.w	#%11,d3
00200B10                            
00200B10                             		;TODO: checar bien los TL
00200B10 122B 0003                   		move.b	3(a3),d1
00200B14 142D 0009                   		move.b	chn_vol(a5),d2
00200B18 0402 0040                   		sub.b	#64,d2
00200B1C 9202                        		sub.b	d2,d1
00200B1E E189                        		lsl.l	#8,d1
00200B20                             		
00200B20 122B 0002                   		move.b	2(a3),d1
00200B24 142D 0009                   		move.b	chn_vol(a5),d2
00200B28 0402 0040                   		sub.b	#64,d2
00200B2C 9202                        		sub.b	d2,d1
00200B2E E189                         		lsl.l	#8,d1
00200B30                              		
00200B30 122B 0001                   		move.b	1(a3),d1
00200B34 142D 0009                   		move.b	chn_vol(a5),d2
00200B38 0402 0040                   		sub.b	#64,d2
00200B3C 9202                        		sub.b	d2,d1
00200B3E E189                         		lsl.l	#8,d1
00200B40                              		
00200B40 1213                        		move.b	(a3),d1
00200B42 142D 0009                   		move.b	chn_vol(a5),d2
00200B46 0402 0040                   		sub.b	#64,d2
00200B4A 9202                        		sub.b	d2,d1
00200B4C                            
00200B4C                            @ForceOff:
00200B4C 6100 0000                   		bsr	SMEG_Z80_OFF
00200B50                            ;  		or.b	d3,d0
00200B50                            ;  		bsr	SMEG_FM_FindWrite	;oops.
00200B50 E088                        		lsr.l	#8,d0
00200B52 E089                        		lsr.l	#8,d1
00200B54 8003                        		or.b	d3,d0
00200B56 6100 0000                    		bsr	SMEG_FM_FindWrite
00200B5A E088                        		lsr.l	#8,d0
00200B5C E089                        		lsr.l	#8,d1
00200B5E                            ;  		or.b	d3,d0
00200B5E                            ;   		bsr	SMEG_FM_FindWrite
00200B5E E088                        		lsr.l	#8,d0
00200B60 E089                        		lsr.l	#8,d1
00200B62 8003                        		or.b	d3,d0
00200B64 6100 0000                   		bsr	SMEG_FM_FindWrite
00200B68 6000 0000                   		bra	SMEG_Z80_On
00200B6C                             	
00200B6C                            ; -------------------------------
00200B6C                            ; PSG Volume
00200B6C                            ; -------------------------------
00200B6C                            
00200B6C                            @ChnVol_PSG:
00200B6C 162D 0007                  		move.b	Chn_ID(a5),d3
00200B70 0043 001F                  		or.w	#$1F,d3
00200B74 102D 000B                  		move.b	chn_note(a5),d0
00200B78 0C00 00FE                  		cmp.b	#-2,d0
00200B7C 6700 0000                  		beq	ChnPsg_Rest
00200B80 0C00 00FF                  		cmp.b	#-1,d0
00200B84 6700 0000                  		beq	ChnPsg_Rest
00200B88 6000 0000                  		bra	ChnPsg_SetVol
00200B8C                            @Return:
00200B8C 4E75                       		rts
00200B8E                            
00200B8E                            ; -------------------------------
00200B8E                            ; PCM Volume
00200B8E                            ; -------------------------------
00200B8E                            
00200B8E                            @ChnVol_PCM:
00200B8E                            		
00200B8E 7400                        		moveq	#0,d2
00200B90 7200                        		moveq	#0,d1
00200B92 143C 00FF                   		move.b	#$FF,d2				;$xx00
00200B96                            ;     		move.b	Chn_MainVol(a5),d1
00200B96                            ;       	lsr.w	#4,d1
00200B96                            ;      		lsl.w	#4,d1
00200B96                            ;    		sub.b	d1,d2
00200B96 122D 0009                      		move.b	Chn_Vol(a5),d1
00200B9A E849                             		lsr.w	#4,d1
00200B9C E949                            		lsl.w	#4,d1
00200B9E 9401                           		sub.b	d1,d2
00200BA0                               		
00200BA0 7200                        		moveq	#0,d1
00200BA2 122D 0007                   		move.b	Chn_ID(a5),d1
00200BA6 0241 000F                   		and.w	#$F,d1
00200BAA 13C1 00A1 2010              		move.b	d1,($A12000+CommDataM)
00200BB0 13C2 00A1 2011              		move.b	d2,($A12000+CommDataM+1)
00200BB6 7024                        		moveq	#CdTask_SetEnv,d0
00200BB8 6100 0000                   		bsr	SMEG_CD_Call
00200BBC                            
00200BBC 4E75                       		rts
00200BBE                            		
00200BBE                            ; ================================================================
00200BBE                            ; -------------------------------
00200BBE                            ; Channel effect
00200BBE                            ; -------------------------------
00200BBE                            
00200BBE                            @ChannelEffects:
00200BBE 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00200BC4 6700 0000                  		beq	@Null
00200BC8                            ; 		btst 	#bitPriority,(a6)
00200BC8                            ; 		bne.s	@SFX_Eff
00200BC8                            ; 		bsr	SMEG_FindPrioSlot
00200BC8                            ;   		tst.b	(a3)
00200BC8                            ;   		bne	@Return
00200BC8                            ; @SFX_Eff:
00200BC8                            
00200BC8 7000                       		moveq	#0,d0
00200BCA 102D 0002                  		move.b	Chn_Effect(a5),d0
00200BCE D040                       		add.w	d0,d0
00200BD0 323B 0000                  		move.w	@EffectList(pc,d0.w),d1
00200BD4 4EFB 1000                  		jmp	@EffectList(pc,d1.w)
00200BD8                            		
00200BD8                            ; -------------------------------
00200BD8                            
00200BD8 0000                       @EffectList:	dc.w	@Null-@EffectList
00200BDA 0000                       		dc.w	@Flag_A-@EffectList
00200BDC 0000                       		dc.w	@Null-@EffectList
00200BDE 0000                       		dc.w	@Null-@EffectList
00200BE0 0000                       		dc.w	@Flag_D-@EffectList
00200BE2 0000                       		dc.w	@Flag_E-@EffectList
00200BE4 0000                       		dc.w	@Flag_F-@EffectList
00200BE6 0000                       		dc.w	@Null-@EffectList
00200BE8 0000                       		dc.w	@Null-@EffectList
00200BEA 0000                       		dc.w	@Null-@EffectList
00200BEC 0000                       		dc.w	@Null-@EffectList
00200BEE 0000                       		dc.w	@Null-@EffectList
00200BF0 0000                       		dc.w	@Null-@EffectList
00200BF2 0000                       		dc.w	@Flag_M-@EffectList
00200BF4 0000                       		dc.w	@Null-@EffectList
00200BF6 0000                       		dc.w	@Null-@EffectList
00200BF8 0000                       		dc.w	@Null-@EffectList
00200BFA 0000                       		dc.w	@Null-@EffectList
00200BFC 0000                       		dc.w	@Null-@EffectList
00200BFE 0000                       		dc.w	@Null-@EffectList
00200C00 0000                       		dc.w	@Null-@EffectList
00200C02 0000                       		dc.w	@Null-@EffectList
00200C04 0000                       		dc.w	@Null-@EffectList
00200C06 0000                       		dc.w	@Null-@EffectList
00200C08 0000                       		dc.w	@Flag_X-@EffectList
00200C0A 0000                       		dc.w	@Null-@EffectList
00200C0C 0000                       		dc.w	@Flag_Z-@EffectList
00200C0E                            		even
00200C0E                            
00200C0E                            ; -------------------------------
00200C0E                            ; Null effect
00200C0E                            ; -------------------------------
00200C0E                            
00200C0E                            @Null:
00200C0E 4E75                       		rts
00200C10                            
00200C10                            ; -------------------------------
00200C10                            ; Flag A - Set Tick rate
00200C10                            ; -------------------------------
00200C10                            
00200C10                            @Flag_A:
00200C10 7000                       		moveq	#0,d0
00200C12 426E 001C                  		clr.w	TicksSet(a6)
00200C16 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00200C1A 0440 0001                  		sub.w	#1,d0
00200C1E 1D40 001D                  		move.b	d0,TicksSet+1(a6)
00200C22 4E75                       		rts
00200C24                            
00200C24                            ; -------------------------------
00200C24                            ; Flag D - Volume slide
00200C24                            ; -------------------------------
00200C24                            
00200C24                            @Flag_D:
00200C24 4E75                        rts
00200C26                            ; 		moveq	#0,d0
00200C26                            ; 		moveq	#0,d1
00200C26                            ; 		move.b	Chn_Effect+1(a5),d0
00200C26                            ; 		tst.b	Chn_ID(a5)
00200C26                            ; 		bpl	@NotPSG
00200C26                            ; 		lsl.w	#4,d0
00200C26                            ; @NotPSG:
00200C26                            ; 		move.b	Chn_Vol(a5),d1
00200C26                            ; 		add.b	d0,d1
00200C26                            ; 		move.b	d1,Chn_Vol(a5)
00200C26                            ; 		bra	@ChnVolume
00200C26                            
00200C26                            ; -------------------------------
00200C26                            ; Flag E - Portametro down
00200C26                            ; -------------------------------
00200C26                            
00200C26                            @Flag_E:
00200C26 7000                       		moveq	#0,d0
00200C28 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00200C2C 0640 0001                  		add.w	#1,d0
00200C30 4440                       		neg.w	d0
00200C32 6000                       		bra.s	@DoPortam
00200C34                            
00200C34                            ; -------------------------------
00200C34                            ; Flag F - Portametro up
00200C34                            ; -------------------------------
00200C34                            
00200C34                            @Flag_F:
00200C34 7000                       		moveq	#0,d0
00200C36 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00200C3A 0640 0001                  		add.w	#1,d0
00200C3E                            		
00200C3E                            ; ---------------------
00200C3E                            
00200C3E                            @DoPortam:
00200C3E 382D 0004                  		move.w	Chn_Portam(a5),d4
00200C42 4A44                       		tst.w	d4
00200C44 6700 FF46                  		beq	@return
00200C48                            		
00200C48 4A2D 0007                  		tst.b	Chn_ID(a5)
00200C4C 6B00                       		bmi.s	@psg_mode
00200C4E 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00200C54 6C00                       		bge.s	@pcm_mode
00200C56                            		
00200C56 E548                       		lsl.w	#2,d0
00200C58 D840                       		add.w	d0,d4
00200C5A 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00200C5E 6000 0000                  		bra	SMEG_SetFreqFM
00200C62                            		
00200C62                            @psg_mode:
00200C62 D040                       		add.w	d0,d0
00200C64 9840                       		sub.w	d0,d4
00200C66 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00200C6A 3004                       		move.w	d4,d0
00200C6C 122D 0007                  		move.b	Chn_ID(a5),d1
00200C70 6000 0000                  		bra	ChnPsg_NoteFreq
00200C74                            		
00200C74                            @pcm_mode:
00200C74 4E75                       		rts
00200C76                            		
00200C76                            ; -------------------------------
00200C76                            ; Flag M - Set Channel Volume
00200C76                            ; -------------------------------
00200C76                            
00200C76                            @Flag_M:
00200C76 4E75                        rts
00200C78                             
00200C78                            ; 		moveq	#0,d0
00200C78                            ; 		move.b	Chn_Effect+1(a5),d0
00200C78                            ; 	;	tst.b	Chn_ID(a5)
00200C78                            ; 	;	bpl	@NotPSG_H
00200C78                            ; 
00200C78                            ; 		neg.w	d0
00200C78                            ; 		sub.w	#$D0,d0
00200C78                            ; ;@NotPSG_H:
00200C78                            ; 		move.b	d0,Chn_MainVol(a5)
00200C78                            ; 		bra	@ChnVolume
00200C78                            
00200C78                            ; -------------------------------
00200C78                            ; Flag X - Stereo
00200C78                            ; -------------------------------
00200C78                            
00200C78                            @Flag_X:
00200C78                            ; 		tst.b	Chn_ID(a5)
00200C78                            ; 		bmi	@Null
00200C78                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
00200C78                            ; 		bge	@PCM_Pan
00200C78                            		
00200C78 1B6D 0003 000C             		move.b	Chn_Effect+1(a5),Chn_Pan(a5)
00200C7E 4E75                       		rts
00200C80                            		
00200C80                            ; 		moveq	#0,d0
00200C80                            ; 		move.w	#$C0,d0
00200C80                            ;                 cmp.b	#$80,Chn_Effect+1(a5)
00200C80                            ;                 beq.s	@SetPan
00200C80                            ; 		tst.b	Chn_Effect+1(a5)
00200C80                            ; 		bmi.s	@Right
00200C80                            ; 		bpl.s	@Left
00200C80                            ; @SetPan:
00200C80                            ; 		move.b	d0,Chn_Pan(a5)
00200C80                            ; 		rts
00200C80                            ; @Left:
00200C80                            ; 		move.w	#$80,d0
00200C80                            ; 		bra.s	@SetPan
00200C80                            ; @Right:
00200C80                            ; 		move.w	#$40,d0
00200C80                            ; 		bra.s	@SetPan
00200C80                            
00200C80                            ; ; -------------------------------
00200C80                            ; ; PCM Panning
00200C80                            ; ; -------------------------------
00200C80                            ; 
00200C80                            ; @PCM_Pan:
00200C80                            ; 		if MCD
00200C80                            ; 		
00200C80                            ; 		moveq	#0,d0
00200C80                            ; 		move.b	#%11001100,d0				;TODO: dejarlo así
00200C80                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
00200C80                            ; 		beq.s	@Return2
00200C80                            ;                  
00200C80                            ;  		tst.b	Chn_Effect+1(a5)
00200C80                            ;  		bmi.s	@Right2
00200C80                            ; 		bpl.s	@Left2
00200C80                            ; 		bra	@Return2
00200C80                            ; @Right2:
00200C80                            ;  		move.b	#%10000000,d0
00200C80                            ;  		bra	@Return2
00200C80                            ; @Left2:
00200C80                            ; 		move.b	#%00001000,d0
00200C80                            ; @Return2:
00200C80                            ; 		move.b	d0,Chn_Pan(a5)
00200C80                            ; 
00200C80                            ; ; -------------------------------------------------
00200C80                            ; 
00200C80                            ;  		elseif MARS
00200C80                            ;  
00200C80                            ; 		move.w	#%11000000,d0
00200C80                            ; 		cmp.b	#$80,Chn_Effect+1(a5)
00200C80                            ; 		beq	@Cont
00200C80                            ;  		tst.b	Chn_Effect+1(a5)
00200C80                            ;  		bmi.s	@pwmRight
00200C80                            ; 		bpl.s	@pwmLeft
00200C80                            ; 		bra	@Cont
00200C80                            ;  		
00200C80                            ; @pwmRight:
00200C80                            ;  		move.w	#%01000000,d0
00200C80                            ;  		bra.s	@Cont
00200C80                            ; @pwmLeft:
00200C80                            ; 		move.w	#%10000000,d0
00200C80                            ; 
00200C80                            ; @Cont:
00200C80                            ; 		move.b	d0,Chn_Pan(a5)   		
00200C80                            ; 		endif
00200C80                            ; 		rts
00200C80                            
00200C80                            ; ======================================================
00200C80                            ; -------------------------------
00200C80                            ; Flag Z
00200C80                            ; -------------------------------
00200C80                            
00200C80                            @Flag_Z:
00200C80 7000                       		moveq	#0,d0
00200C82 102D 0003                  		move.b	Chn_Effect+1(a5),d0
00200C86 E848                       		lsr.w	#4,d0
00200C88 D040                       		add.w	d0,d0
00200C8A 323B 0000                  		move.w	@HashList(pc,d0.w),d1
00200C8E 102D 0003                  		move.b	Chn_Effect+1(a5),d0		;d0 - $0-$F argument
00200C92 0200 000F                  		and.b	#$F,d0
00200C96 4EFB 1000                  		jmp	@HashList(pc,d1.w)
00200C9A                            
00200C9A FF74                       @HashList:	dc.w	@Null-@HashList		;$00
00200C9C 0000                       		dc.w	@FM_Key-@HashList		;$10 - FM Keys ON/OFF
00200C9E FF74                       		dc.w	@Null-@HashList			;$20
00200CA0 FF74                       		dc.w	@Null-@HashList			;$30
00200CA2 0000                       		dc.w	@PSG-@HashList			;$40 - PSG Settings
00200CA4 FF74                       		dc.w	@Null-@HashList			;$50
00200CA6 FF74                       		dc.w	@Null-@HashList			;$60
00200CA8 FF74                       		dc.w	@Null-@HashList			;$70
00200CAA FF74                       		dc.w	@Null-@HashList			;$80
00200CAC FF74                       		dc.w	@Null-@HashList			;$90
00200CAE FF74                       		dc.w	@Null-@HashList			;$A0
00200CB0 FF74                       		dc.w	@Null-@HashList			;$B0
00200CB2 FF74                       		dc.w	@Null-@HashList			;$C0
00200CB4 FF74                       		dc.w	@Null-@HashList			;$D0
00200CB6 FF74                       		dc.w	@Null-@HashList			;$E0
00200CB8 0000                       		dc.w	@FixSfx-@HashList		;$F0 - Finish SFX flag (SFX only)
00200CBA                            		even
00200CBA                            
00200CBA                            ; -------------------------------
00200CBA                            
00200CBA                            @DacStatus:
00200CBA 4E75                        rts
00200CBC                            
00200CBC                            ; -------------------------------
00200CBC                            
00200CBC                            @FM_Key:
00200CBC 0240 000F                  		and.w	#$F,d0
00200CC0 E948                       		lsl.w	#4,d0
00200CC2 1B40 000D                  		move.b	d0,Chn_FM_Key(a5)
00200CC6 4E75                       		rts
00200CC8                            
00200CC8                            ; -------------------------------
00200CC8                            
00200CC8                            @PSG:
00200CC8 4E75                        rts
00200CCA                            
00200CCA                            ; -------------------------------
00200CCA                            
00200CCA                            @FixSfx:
00200CCA                            ;    		btst	#bitPriority,(a6)
00200CCA                            ;   		bne	@Return
00200CCA                            		
00200CCA                            ;  		lea	(RAM_SMEG_Buffer),a3
00200CCA                            ;  		move.b	snd_flagsBGM(a3),snd_flags(a3)
00200CCA                            ; 		moveq 	#0,d0
00200CCA                            ;  		move.b	PsgLast(a3),d0
00200CCA                            ; 		add.w	#$E0,d0
00200CCA                            ; 		bsr	@PutPSG
00200CCA                            
00200CCA                            ;  		moveq	#0,d0
00200CCA                            ;  		move.b	LastPattChn(a6),d0
00200CCA                            ; 		bsr	SMEG_FindPrioSlot
00200CCA                            ;   		bclr	#0,(a3)
00200CCA                             		
00200CCA                            ;   		bclr	#bitSfxOn,(a6)				;SFX finished playing
00200CCA 4E75                       		rts
00200CCC                            		
00200CCC                            ; ================================================================
00200CCC                            ; -------------------------------
00200CCC                            ; Channel play
00200CCC                            ; -------------------------------
00200CCC                            
00200CCC                            @ChannelPlay:	
00200CCC 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
00200CD2 6700 0000                  		beq	@Disabled
00200CD6                            		
00200CD6                            ;                 moveq	#0,d0
00200CD6                            ; 		move.b	Chn_Note(a5),d0
00200CD6                            ; 		sub.w	#1,Chn_Portam(a5)
00200CD6                            ; 		tst.b	Chn_Portam(a5)
00200CD6                            ; 		beq.s	@NoUp
00200CD6                            ; 		add.b	Chn_Portam(a5),d0
00200CD6                            ; 		bra.s	@NoDown
00200CD6                            ; @NoUp:
00200CD6                            ; 		tst.b	Chn_Portam+1(a5)
00200CD6                            ; 		beq.s	@NoDown
00200CD6                            ; 		sub.b	Chn_Portam+1(a5),d0
00200CD6                            ; @NoDown:
00200CD6                            
00200CD6                            ; --------------------------------
00200CD6                            
00200CD6                            ; BGM: Block channel
00200CD6                            
00200CD6 0816 0000                  		btst 	#bitPriority,(a6)
00200CDA 6600                       		bne.s	@SFX_Check
00200CDC 6100 0000                  		bsr	SMEG_FindPrioSlot
00200CE0 4A13                         		tst.b	(a3)
00200CE2 6600 FEA8                    		bne	@Return
00200CE6                              		
00200CE6                            ; --------------------------------
00200CE6                            
00200CE6                            ; SFX: Check NoteOff/NoteCut
00200CE6                            ; then clear flag
00200CE6                            
00200CE6                            @SFX_Check:
00200CE6 0816 0000                  		btst 	#bitPriority,(a6)
00200CEA 6700                       		beq.s	@NotSFX
00200CEC                            ; 		cmp.b	#-1,chn_note(a5)
00200CEC                            ; 		beq	@DoIt
00200CEC 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
00200CF2 6600 0000                  		bne	@NotSFX
00200CF6                            @DoIt:
00200CF6 6100 0000                  		bsr	SMEG_FindPrioSlot
00200CFA 4213                         		clr.b	(a3)
00200CFC                            @NotSFX:
00200CFC                            
00200CFC                            ; --------------------------------
00200CFC                            
00200CFC 4A2D 0007                  		tst.b	Chn_ID(a5)
00200D00 6B00 0000                  		bmi	Chnl_PSG
00200D04 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00200D0A 6C00 0000                  		bge	@ChannelPlay_PCM
00200D0E 0C2D 0002 0007             		cmp.b	#FM_3,Chn_ID(a5)
00200D14 6700 0000                  		beq	@Chn3_ChkSpecial
00200D18 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
00200D1E 6700 0000                  		beq	@Chn6_ChkSmpl
00200D22 6000 0000                  		bra	@ChnPlay_FM
00200D26                            		
00200D26                            ; -------------------------------
00200D26                            ; Play FM6 or DAC sample
00200D26                            ; -------------------------------
00200D26                            
00200D26                            @Chn6_ChkSmpl:
00200D26 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
00200D2C 6700 0000                  		beq	@ChnPlay_FM6
00200D30 0C2D 00FF 000B             		cmp.b	#-1,chn_note(a5)
00200D36 6700 0000                  		beq	@StopSmpl
00200D3A 0C2D 00FE 000B             		cmp.b	#-2,chn_note(a5)
00200D40 6700 0000                  		beq	@StopSmpl
00200D44                            		
00200D44 7028                       		moveq	#$28,d0
00200D46 7206                       		moveq	#6,d1
00200D48 6100 0000                   		bsr	SMEG_Z80_Off
00200D4C 6100 0000                  		bsr	FM_RegWrite_1
00200D50 6100 0000                  		bsr	SMEG_FM_SetPan
00200D54 6100 0000                  		bsr	SMEG_Z80_On
00200D58                            		
00200D58                            ; 		btst 	#bitPriority,(a6)
00200D58                            ; 		beq.s	@MusicPrio3
00200D58                            ; 		bsr	SMEG_FindPrioSlot
00200D58                            ;   		btst	#0,(a3)
00200D58                            ;   		bne	@return
00200D58                            ; @MusicPrio3:
00200D58 6000 0000                  		bra	Audio_Sample_Play
00200D5C                            
00200D5C                            ; Stop
00200D5C                            
00200D5C                            @StopSmpl:
00200D5C                            ; 		btst 	#bitPriority,(a6)
00200D5C                            ; 		bne.s	@NotSfxDAC
00200D5C                            ; 		bsr	SMEG_FindPrioSlot
00200D5C                            ;   		bclr	#0,(a3)
00200D5C                            ; @NotSfxDAC:
00200D5C 6000 0000                  		bra	Audio_Sample_Stop
00200D60                            		
00200D60                            ; -------------------------------
00200D60                            ; Play FM6 Normally
00200D60                            ; -------------------------------
00200D60                            
00200D60                            @ChnPlay_FM6:
00200D60 103C 002B                  		move.b	#$2B,d0
00200D64 123C 0000                  		move.b	#$00,d1
00200D68 6100 0000                  		bsr	SMEG_Z80_Off
00200D6C 6100 0000                  		bsr	FM_RegWrite_1
00200D70 6100 0000                  		bsr	SMEG_Z80_On
00200D74 6100 0000                  		bsr	Audio_Sample_Stop
00200D78 6000 0000                  		bra	@ChnPlay_FM
00200D7C                            		
00200D7C                            ; -------------------------------
00200D7C                            ; Play FM3 Normally
00200D7C                            ; -------------------------------
00200D7C                            
00200D7C                            @Chn3_ChkSpecial:
00200D7C 6100 0000                  		bsr	SMEG_Z80_Off
00200D80 6100 0000                  		bsr	SMEG_FM_SetPan
00200D84 6100 0000                  		bsr	SMEG_Z80_On
00200D88                            		
00200D88 082E 0003 0001             		btst	#bitSpecial3,snd_flags(a6)
00200D8E 6700 0000                  		beq	@NoSpecial3
00200D92                            		
00200D92 6100 0000                  		bsr	ChnlFM_srchIns
00200D96 0C42 FFFF                  		cmp.w	#-1,d2
00200D9A 6700 0000                  		beq	@NoSpecial3
00200D9E 0802 0006                   		btst	#6,d2
00200DA2 6700 0000                   		beq	@NoSpecial3
00200DA6                            		
00200DA6                            ;   		moveq	#$22,d0
00200DA6                            ;  		move.w	#%00001011,d1
00200DA6                            ; 		bsr	FM_RegWrite_1
00200DA6                            		
00200DA6 7027                         		moveq	#$27,d0		;CH3 enable
00200DA8 323C 0040                   		move.w	#%01000000,d1
00200DAC 6100 0000                   		bsr	SMEG_Z80_Off
00200DB0 6100 0000                  		bsr	FM_RegWrite_1
00200DB4 6100 0000                  		bsr	SMEG_Z80_On
00200DB8                            		
00200DB8 203C A9AD AAAE              		move.l	#$A9ADAAAE,d0
00200DBE 322B 000E                   		move.w	$E(a3),d1
00200DC2 E059                        		ror.w	#8,d1
00200DC4 6100 0000                   		bsr	SMEG_Z80_Off
00200DC8 6100 0000                  		bsr	FM_RegWrite_1
00200DCC E088                       		lsr.l	#8,d0
00200DCE E089                       		lsr.l	#8,d1
00200DD0 6100 0000                  		bsr	FM_RegWrite_1
00200DD4 E088                       		lsr.l	#8,d0
00200DD6 322B 000C                   		move.w	$C(a3),d1
00200DDA E059                        		ror.w	#8,d1
00200DDC 6100 0000                  		bsr	FM_RegWrite_1
00200DE0 E088                       		lsr.l	#8,d0
00200DE2 E089                       		lsr.l	#8,d1
00200DE4 6100 0000                  		bsr	FM_RegWrite_1	
00200DE8 6100 0000                    		bsr	SMEG_Z80_On
00200DEC                              		
00200DEC 203C A2A6 A8AC              		move.l	#$A2A6A8AC,d0
00200DF2 322B 000A                   		move.w	$A(a3),d1
00200DF6 E059                        		ror.w	#8,d1
00200DF8 6100 0000                   		bsr	SMEG_Z80_Off
00200DFC 6100 0000                  		bsr	FM_RegWrite_1
00200E00 E088                       		lsr.l	#8,d0
00200E02 E089                       		lsr.l	#8,d1
00200E04 6100 0000                  		bsr	FM_RegWrite_1
00200E08 E088                       		lsr.l	#8,d0
00200E0A 322B 0008                   		move.w	8(a3),d1
00200E0E E059                        		ror.w	#8,d1
00200E10 6100 0000                  		bsr	FM_RegWrite_1
00200E14 E088                       		lsr.l	#8,d0
00200E16 E089                       		lsr.l	#8,d1
00200E18 6100 0000                  		bsr	FM_RegWrite_1
00200E1C 6100 0000                  		bsr	SMEG_Z80_On
00200E20                            		
00200E20 7028                       		moveq	#$28,d0
00200E22 7200                       		moveq	#0,d1
00200E24 122D 000D                  		move.b	Chn_FM_Key(a5),d1
00200E28 822D 0007                  		or.b	Chn_ID(a5),d1
00200E2C 6100 0000                  		bsr	SMEG_Z80_Off
00200E30 6100 0000                  		bsr	FM_RegWrite_1
00200E34 6000 0000                   		bra	SMEG_Z80_On
00200E38                             		
00200E38                            @NoSpecial3:
00200E38 7200                       		moveq	#0,d1
00200E3A 7027                         		moveq	#$27,d0
00200E3C 6100 0000                   		bsr	SMEG_Z80_Off
00200E40 6100 0000                  		bsr	FM_RegWrite_1
00200E44 6100 0000                   		bsr	SMEG_Z80_On
00200E48                            		
00200E48                            ; -------------------------------
00200E48                            ; Play FM1-FM5 normally
00200E48                            ; -------------------------------
00200E48                            
00200E48                            @ChnPlay_FM:
00200E48 6100 0000                  		bsr	SMEG_Z80_Off
00200E4C 6100 0000                  		bsr	SMEG_FM_SetPan
00200E50 6100 0000                  		bsr	SMEG_Z80_On
00200E54                            		
00200E54 7000                        		moveq	#0,d0
00200E56 102D 000B                  		move.b	chn_note(a5),d0
00200E5A 0C00 00FF                  		cmp.b	#-1,d0
00200E5E 6700 0000                  		beq	SMEG_FM_KeysOff
00200E62 0C00 00FE                  		cmp.b	#-2,d0
00200E66 6700 0000                  		beq	SMEG_FM_TotLvlOff
00200E6A                            		
00200E6A 6100 0000                  		bsr	SMEG_FM_KeysOff
00200E6E                            		
00200E6E 7000                       		moveq	#0,d0
00200E70 7200                       		moveq	#0,d1
00200E72 102D 000B                  		move.b	chn_note(a5),d0
00200E76 D040                       		add.w	d0,d0
00200E78 45F9 0000 0000              		lea	(FreqList_FM),a2
00200E7E 3832 0000                  		move.w	(a2,d0.w),d4
00200E82 3B44 0004                  		move.w	d4,Chn_Portam(a5)
00200E86 6000 0000                  		bra	SMEG_SetFreqFM
00200E8A                            @Disabled:
00200E8A 4E75                       		rts
00200E8C                            
00200E8C                            ; -------------------------------
00200E8C                            ; Play PCM
00200E8C                            ; -------------------------------
00200E8C                            
00200E8C                            @ChannelPlay_PCM:	
00200E8C                            ; 		if MCD
00200E8C                            ; 		
00200E8C                            ; 		tst.l	SongPcmSamp(a6)
00200E8C                            ; 		beq.s	@ReturnPCM
00200E8C                            ; 		bmi.s	@ReturnPCM
00200E8C                            ; 		
00200E8C                            ;  		moveq	#0,d1
00200E8C                            ;  		move.b	Chn_ID(a5),d1
00200E8C                            ;    		and.w	#$F,d1
00200E8C                            ;  		move.b	d1,($A12000+CommDataM)
00200E8C                            ;  		move.b	Chn_Pan(a5),d1
00200E8C                            ;  		move.b	d1,($A12000+CommDataM+1)
00200E8C                            ;  		moveq	#CdTask_SetPan,d0
00200E8C                            ;  		bsr	SMEG_CD_Call
00200E8C                            ;  		
00200E8C                            ; 		moveq	#0,d1
00200E8C                            ; 		move.b	Chn_ID(a5),d1
00200E8C                            ; 		and.b	#$F,d1
00200E8C                            ; 		move.b	d1,($A12000+CommDataM)
00200E8C                            ; 		move.w	Chn_Freq(a5),($A12000+CommDataM+2)
00200E8C                            ; 		moveq	#CdTask_SetFreq,d0
00200E8C                            ; 		bsr	SMEG_CD_Call
00200E8C                            ; 		bset	d1,PcmChnOnOff(a6)
00200E8C                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
00200E8C                            ; 		moveq	#CdTask_SetOnOff,d0
00200E8C                            ; 		bsr	SMEG_CD_Call
00200E8C                            ; 		
00200E8C                            ; @ReturnPCM:
00200E8C                            ;  		elseif MARS
00200E8C                            ; 
00200E8C                            ; 		tst.l	SongPcmSamp(a6)
00200E8C                            ; 		beq.s	@ReturnPCM
00200E8C                            ; 		bmi.s	@ReturnPCM
00200E8C                            ; 		
00200E8C                            ;   		moveq	#0,d1
00200E8C                            ;   		moveq	#0,d2
00200E8C                            ;        		move.b	Chn_ID(a5),d1
00200E8C                            ;      		and.w	#$F,d1
00200E8C                            ;       		or.b	Chn_Pan(a5),d1
00200E8C                            ;       		move.b	Chn_Note(a5),d2
00200E8C                            ;   		move.b	d1,(marsreg+comm2)			; Pan+Channel set
00200E8C                            ;   		move.b	d2,(marsreg+comm2+1)			; Note
00200E8C                            ;   		moveq 	#marscall_Play,d0
00200E8C                            ;   		bsr	SMEG_MARS_Call
00200E8C                            ; @ReturnPCM:
00200E8C                            ;  		endif
00200E8C                             		
00200E8C 4E75                       		rts
00200E8E                            
00200E8E                            ; --------------------------
00200E8E                            ; Set FM Frequency
00200E8E                            ; autodetected channel
00200E8E                            ; 
00200E8E                            ; d4 - Freq
00200E8E                            ; --------------------------
00200E8E                            
00200E8E                            SMEG_SetFreqFM:
00200E8E 7A00                       		moveq	#0,d5
00200E90 1A2D 0007                  		move.b	Chn_ID(a5),d5
00200E94 0C05 0004                  		cmp.b	#4,d5
00200E98 6D00                       		blt.s	@FirstFM
00200E9A 0405 0004                  		sub.b	#4,d5
00200E9E                            @FirstFM:
00200E9E 303C 00A4                  		move.w	#$A4,d0
00200EA2 D005                       		add.b	d5,d0
00200EA4 7200                       		moveq	#0,d1
00200EA6 E15C                       		rol.w	#8,d4
00200EA8 1204                       		move.b	d4,d1
00200EAA                            		
00200EAA 6100 0000                  		bsr	SMEG_Z80_Off
00200EAE 6100 0000                  		bsr	SMEG_FM_FindWrite
00200EB2 303C 00A0                  		move.w	#$A0,d0
00200EB6 D005                       		add.b	d5,d0
00200EB8 7200                       		moveq	#0,d1
00200EBA E15C                       		rol.w	#8,d4
00200EBC 1204                       		move.b	d4,d1
00200EBE 6100 0000                  		bsr	SMEG_FM_FindWrite
00200EC2                            
00200EC2 7028                       		moveq	#$28,d0
00200EC4 7200                       		moveq	#0,d1
00200EC6 122D 000D                  		move.b	Chn_FM_Key(a5),d1
00200ECA 822D 0007                  		or.b	Chn_ID(a5),d1
00200ECE 6100 0000                  		bsr	FM_RegWrite_1
00200ED2 6000 0000                  		bra	SMEG_Z80_On
00200ED6                            		
00200ED6                            ; Turn Total Level (the volume) off 
00200ED6                            
00200ED6                            SMEG_FM_TotLvlOff:
00200ED6 162D 0007                   		move.b	chn_id(a5),d3
00200EDA 0243 0003                   		and.w	#%11,d3
00200EDE 203C 4C44 4840             		move.l	#$4C444840,d0
00200EE4 323C 007F                  		move.w	#$7F,d1
00200EE8 6100 0000                   		bsr	SMEG_Z80_OFF
00200EEC 8003                        		or.b	d3,d0
00200EEE 6100 0000                   		bsr	SMEG_FM_FindWrite	;oops.
00200EF2 E088                        		lsr.l	#8,d0
00200EF4 8003                        		or.b	d3,d0
00200EF6 6100 0000                    		bsr	SMEG_FM_FindWrite
00200EFA E088                        		lsr.l	#8,d0
00200EFC 8003                        		or.b	d3,d0
00200EFE 6100 0000                    		bsr	SMEG_FM_FindWrite
00200F02 E088                        		lsr.l	#8,d0
00200F04 8003                        		or.b	d3,d0
00200F06 6100 0000                   		bsr	SMEG_FM_FindWrite
00200F0A 6100 0000                   		bsr	SMEG_Z80_On
00200F0E                             		
00200F0E                            ; Turn FM Keys off
00200F0E                            
00200F0E                            SMEG_FM_KeysOff:
00200F0E 7028                       		moveq	#$28,d0
00200F10 7200                       		moveq	#0,d1
00200F12 D22D 0007                  		add.b	Chn_ID(a5),d1
00200F16 6100 0000                   		bsr	SMEG_Z80_Off
00200F1A 6100 0000                  		bsr	FM_RegWrite_1
00200F1E 6000 0000                  		bra	SMEG_Z80_On
00200F22                            		
00200F22                            ; ----------------------------
00200F22                            ; PSG Channels
00200F22                            ; ----------------------------
00200F22                            
00200F22                            Chnl_PSG:
00200F22 122D 0007                  		move.b	Chn_ID(a5),d1
00200F26 0C2D 00E0 0007             		cmp.b	#NOISE,Chn_ID(a5)
00200F2C 6700                       		beq.s	Chnl_Noise
00200F2E                            
00200F2E 3601                       		move.w	d1,d3
00200F30 0043 001F                  		or.w	#$1F,d3
00200F34 102D 000B                  		move.b	chn_note(a5),d0
00200F38 0C00 00FE                  		cmp.b	#-2,d0
00200F3C 6700                       		beq.s	ChnPsg_Rest
00200F3E 0C00 00FF                  		cmp.b	#-1,d0
00200F42 6700                       		beq.s	ChnPsg_Rest
00200F44                            		
00200F44 45F9 0000 0000             		lea	(FreqList_PSG),a2
00200F4A D040                       		add.w	d0,d0
00200F4C 3032 0000                  		move.w	(a2,d0.w),d0
00200F50 3B40 0004                  		move.w	d0,Chn_Portam(a5)
00200F54 6100 0000                  		bsr	ChnPsg_NoteFreq
00200F58                            		
00200F58                            ChnPsg_SetVol:
00200F58 0043 0010                  		or.w	#$10,d3
00200F5C 0043 000F                  		or.w	#$F,d3
00200F60 4A2D 0009                  		tst.b	chn_vol(a5)
00200F64 6700                       		beq.s	ChnPsg_DoVol
00200F66 0243 00F0                  		and.w	#$F0,d3
00200F6A 0C2D 0040 0009             		cmp.b	#64,chn_vol(a5)
00200F70 6C00                         		bge.s	ChnPsg_DoVol
00200F72 7000                         		moveq	#0,d0
00200F74 102D 0009                     		move.b	chn_vol(a5),d0
00200F78 4440                        		neg.w	d0
00200F7A E448                          		lsr.w	#2,d0
00200F7C 0240 000F                    		and.w	#%1111,d0
00200F80 8640                         		or.w	d0,d3
00200F82                            
00200F82                            
00200F82                            ChnPsg_DoVol:
00200F82 13C3 00C0 0011              		move.b	d3,(sound_psg)
00200F88                            Chnl_Return:
00200F88 4E75                       		rts
00200F8A                            		
00200F8A                            ChnPsg_Rest:
00200F8A 61F6                        		bsr.s	ChnPsg_DoVol
00200F8C                            ; 		btst 	#bitPriority,(a6)
00200F8C                            ; 		bne.s	Chnl_Return
00200F8C                            ; 		bsr	SMEG_FindPrioSlot
00200F8C                            ;   		bclr	#0,(a3)
00200F8C 4E75                         		rts
00200F8E                              		
00200F8E                            ; ----------------------------
00200F8E                            ; PSG Noise channel
00200F8E                            ; ----------------------------
00200F8E                            
00200F8E                            Chnl_NOISE:
00200F8E 246E 0010                  		movea.l	snd_instr(a6),a2
00200F92 302A 0004                  		move.w	instDNoise(a2),d0
00200F96 D4C0                       		adda	d0,a2
00200F98                            		
00200F98 303C 0000                   		move.w	#%000,d0
00200F9C                            @next:
00200F9C 4A52                       		tst.w	(a2)
00200F9E 6B00                       		bmi.s	@default
00200FA0 7400                       		moveq	#0,d2
00200FA2 142D 0008                  		move.b	chn_inst(a5),d2
00200FA6 B452                       		cmp.w	(a2),d2
00200FA8 6700                       		beq.s	@found
00200FAA D4FC 0004                  		adda	#4,a2
00200FAE 60EC                       		bra.s	@next
00200FB0                            @found:
00200FB0 302A 0002                   		move.w	2(a2),d0
00200FB4                            
00200FB4                            @default:
00200FB4 323C 00E0                  		move.w	#$E0,d1
00200FB8 3601                       		move.w	d1,d3
00200FBA 0043 001F                  		or.w	#$1F,d3
00200FBE                            
00200FBE 142D 000B                  		move.b	chn_note(a5),d2
00200FC2 0C02 00FF                  		cmp.b	#-1,d2
00200FC6 67C2                       		beq.s	ChnPsg_Rest
00200FC8 0C02 00FE                  		cmp.b	#-2,d2
00200FCC 67BC                       		beq.s	ChnPsg_Rest
00200FCE                            		
00200FCE 08AE 0002 0001             		bclr	#bitTone3,snd_flags(a6)
00200FD4 0C40 0003                  		cmp.w	#%011,d0
00200FD8 6700                       		beq.s	@valdnoise
00200FDA 0C40 0007                  		cmp.w	#%111,d0
00200FDE 6600                       		bne.s	@deftone
00200FE0                            @valdnoise:
00200FE0 08EE 0002 0001             		bset	#bitTone3,snd_flags(a6)
00200FE6 13FC 00DF 00C0 0011        		move.b	#$C0|$1F,(sound_psg)
00200FEE 8240                       		or.w	d0,d1
00200FF0 13C1 00C0 0011             		move.b	d1,(sound_psg)
00200FF6                            		
00200FF6 102D 000B                  		move.b	chn_note(a5),d0
00200FFA 0C00 00FF                  		cmp.b	#-1,d0
00200FFE 6700 FF8A                  		beq	ChnPsg_Rest
00201002 0C00 00FE                  		cmp.b	#-2,d0
00201006 6700 FF82                  		beq	ChnPsg_Rest
0020100A 0640 000C                  		add.w	#12,d0		; TODO: checar
0020100E 323C 00C0                  		move.w	#$C0,d1		; PSG3 freq
00201012                            		
00201012 45F9 0000 0000             		lea	(FreqList_PSG),a2
00201018 D040                       		add.w	d0,d0
0020101A 3032 0000                  		move.w	(a2,d0.w),d0
0020101E 3B40 0004                  		move.w	d0,Chn_Portam(a5)
00201022 6000 0000                  		bra	ChnPsg_NoteFreq
00201026                            		
00201026                            ; 		move.w	#$E0,d3		; NOISE volume
00201026                            ; 		bra	ChnPsg_SetVol
00201026                            		
00201026                            @deftone:
00201026 3601                       		move.w	d1,d3
00201028 3400                       		move.w	d0,d2
0020102A 0242 0007                  		and.w	#%111,d2
0020102E 8242                       		or.w	d2,d1
00201030 13C1 00C0 0011             		move.b	d1,(sound_psg)
00201036 4E75                       		rts
00201038                            		
00201038                            ; 		move.w	#$E0,d3
00201038                            ; 		bra	ChnPsg_SetVol
00201038                            		
00201038                            ; ----------------------------
00201038                            ; PSG Noise channel Tone 3
00201038                            ; 
00201038                            ; input:
00201038                            ; d0 - freq
00201038                            ; d1 - channel
00201038                            ; 
00201038                            ; returns:
00201038                            ; d3 - last psg freq | channel
00201038                            ; ----------------------------
00201038                            
00201038                            ChnPsg_NoteFreq:
00201038 3601                       		move.w	d1,d3
0020103A 3400                       		move.w	d0,d2
0020103C 0242 000F                  		and.w	#%1111,d2
00201040 8242                       		or.w	d2,d1
00201042 13C1 00C0 0011             		move.b	d1,(sound_psg)
00201048 E848                       		lsr.w	#4,d0
0020104A 0240 003F                  		and.w	#%00111111,d0
0020104E 13C0 00C0 0011             		move.b	d0,(sound_psg)
00201054 4E75                       		rts
00201056                            
00201056                            ; -------------------------------
00201056                            ; PSG Frequencies
00201056                            ; -------------------------------
00201056                            
00201056                            FreqList_PSG:
00201056 0000                       		dc.w 0		;C-0 $0
00201058 0000                       		dc.w 0
0020105A 0000                       		dc.w 0
0020105C 0000                       		dc.w 0
0020105E 0000                       		dc.w 0
00201060 0000                       		dc.w 0
00201062 0000                       		dc.w 0
00201064 0000                       		dc.w 0
00201066 0000                       		dc.w 0
00201068 0000                       		dc.w 0
0020106A 0000                       		dc.w 0
0020106C 0000                       		dc.w 0
0020106E                            		
0020106E 0000                       		dc.w 0		;C-1 $C
00201070 0000                       		dc.w 0
00201072 0000                       		dc.w 0
00201074 0000                       		dc.w 0
00201076 0000                       		dc.w 0
00201078 0000                       		dc.w 0
0020107A 0000                       		dc.w 0
0020107C 0000                       		dc.w 0
0020107E 0000                       		dc.w 0
00201080 0000                       		dc.w 0
00201082 0000                       		dc.w 0
00201084 0000                       		dc.w 0
00201086                            		
00201086 0000                       		dc.w 0		;C-2 $18
00201088 0000                       		dc.w 0
0020108A 0000                       		dc.w 0
0020108C 0000                       		dc.w 0
0020108E 0000                       		dc.w 0
00201090 0000                       		dc.w 0
00201092 0000                       		dc.w 0
00201094 0000                       		dc.w 0
00201096 0000                       		dc.w 0
00201098 0000                       		dc.w 0
0020109A 0000                       		dc.w 0
0020109C 0000                       		dc.w 0
0020109E                            
0020109E 0000                       		dc.w 0		;C-3 $24
002010A0 0000                       		dc.w 0
002010A2 0000                       		dc.w 0
002010A4 0000                       		dc.w 0
002010A6 0000                       		dc.w 0
002010A8 0000                       		dc.w 0
002010AA 0000                       		dc.w 0
002010AC 0000                       		dc.w 0
002010AE 0000                       		dc.w 0
002010B0 03F8                       		dc.w $3F8
002010B2 03BF                                       dc.w $3BF
002010B4 0389                                       dc.w $389
002010B6                                            
002010B6 0356                       		dc.w $356	;C-4 $30
002010B8 0326                                       dc.w $326
002010BA 02F9                                       dc.w $2F9
002010BC 02CE                                       dc.w $2CE
002010BE 02A5                                       dc.w $2A5
002010C0 0280                                       dc.w $280
002010C2 025C                                       dc.w $25C
002010C4 023A                                       dc.w $23A
002010C6 021A                                       dc.w $21A
002010C8 01FB                       		dc.w $1FB
002010CA 01DF                                       dc.w $1DF
002010CC 01C4                                       dc.w $1C4
002010CE                                            
002010CE 01AB                                       dc.w $1AB	;C-5 $3C
002010D0 0193                                       dc.w $193
002010D2 017D                                       dc.w $17D
002010D4 0167                                       dc.w $167
002010D6 0153                                       dc.w $153
002010D8 0140                                       dc.w $140
002010DA 012E                       		dc.w $12E
002010DC 011D                                       dc.w $11D
002010DE 010D                                       dc.w $10D
002010E0 00FE                                       dc.w $FE
002010E2 00EF                                       dc.w $EF
002010E4 00E2                                       dc.w $E2
002010E6                                            
002010E6 00D6                                       dc.w $D6	;C-6 $48
002010E8 00C9                                       dc.w $C9
002010EA 00BE                                       dc.w $BE
002010EC 00B4                                       dc.w $B4
002010EE 00A9                       		dc.w $A9
002010F0 00A0                                       dc.w $A0
002010F2 0097                                       dc.w $97
002010F4 008F                                       dc.w $8F
002010F6 0087                                       dc.w $87
002010F8 007F                                       dc.w $7F
002010FA 0078                                       dc.w $78
002010FC 0071                                       dc.w $71
002010FE                                            
002010FE 006B                                       dc.w $6B	;C-7 $54
00201100 0065                                       dc.w $65
00201102 005F                       		dc.w $5F
00201104 005A                                       dc.w $5A
00201106 0055                                       dc.w $55
00201108 0050                                       dc.w $50
0020110A 004B                                       dc.w $4B
0020110C 0047                                       dc.w $47
0020110E 0043                                       dc.w $43
00201110 0040                                       dc.w $40
00201112 003C                                       dc.w $3C
00201114 0039                                       dc.w $39
00201116                                            
00201116 0036                       		dc.w $36	;C-8 $60
00201118 0033                                       dc.w $33
0020111A 0030                                       dc.w $30
0020111C 002D                                       dc.w $2D
0020111E 002B                                       dc.w $2B
00201120 0028                                       dc.w $28
00201122 0026                                       dc.w $26
00201124 0024                                       dc.w $24
00201126 0022                                       dc.w $22
00201128 0020                                       dc.w $20
0020112A 001F                       		dc.w $1F
0020112C 001D                                       dc.w $1D
0020112E                                            
0020112E 001B                                       dc.w $1B	;C-9 $6C
00201130 001A                                       dc.w $1A
00201132 0018                                       dc.w $18
00201134 0017                                       dc.w $17
00201136 0016                                       dc.w $16
00201138 0015                                       dc.w $15
0020113A 0013                                       dc.w $13
0020113C 0012                                       dc.w $12
0020113E 0011                       		dc.w $11
00201140 0010                        		dc.w $10 ;Custom...
00201142 0009                        		dc.w $9
00201144 0008                        		dc.w $8
00201146                            
00201146                            		even
00201146                            		
00201146                            ; -------------------------------
00201146                            ; FM Frequencies
00201146                            ; -------------------------------
00201146                            
00201146                            FreqList_FM:
00201146                            ; 		dc.w $269	;NULL
00201146 028D                       		dc.w $28d	;C-0 $00
00201148 02B4                       		dc.w $2b4
0020114A 02DD                       		dc.w $2dd
0020114C 0309                       		dc.w $309
0020114E 0337                       		dc.w $337
00201150 0368                       		dc.w $368
00201152 039C                       		dc.w $39c
00201154 03D3                       		dc.w $3d3
00201156 040D                       		dc.w $40d
00201158 044B                       		dc.w $44b
0020115A 048C                       		dc.w $48c
0020115C 0269                       		dc.w $269
0020115E 028D                       		dc.w $28d	;C-1 $0C
00201160 02B4                       		dc.w $2b4
00201162 02DD                       		dc.w $2dd
00201164 0309                       		dc.w $309
00201166 0337                       		dc.w $337
00201168 0368                       		dc.w $368
0020116A 039C                       		dc.w $39c
0020116C 03D3                       		dc.w $3d3
0020116E 040D                       		dc.w $40d
00201170 044B                       		dc.w $44b
00201172 048C                       		dc.w $48c
00201174 0A69                       		dc.w $a69
00201176 0A8D                       		dc.w $a8d	;C-2 $18
00201178 0AB4                       		dc.w $ab4
0020117A 0ADD                       		dc.w $add
0020117C 0B09                       		dc.w $b09
0020117E 0B37                       		dc.w $b37
00201180 0B68                       		dc.w $b68
00201182 0B9C                       		dc.w $b9c
00201184 0BD3                       		dc.w $bd3
00201186 0C0D                       		dc.w $c0d
00201188 0C4B                       		dc.w $c4b
0020118A 0C8C                       		dc.w $c8c
0020118C 1269                       		dc.w $1269
0020118E 128D                       		dc.w $128d	;C-3 $24
00201190 12B4                       		dc.w $12b4
00201192 12DD                       		dc.w $12dd
00201194 1309                       		dc.w $1309
00201196 1337                       		dc.w $1337
00201198 1368                       		dc.w $1368
0020119A 139C                       		dc.w $139c
0020119C 13D3                       		dc.w $13d3
0020119E 140D                       		dc.w $140d
002011A0 144B                       		dc.w $144b
002011A2 148C                       		dc.w $148c
002011A4 1A69                       		dc.w $1a69
002011A6 1A8D                       		dc.w $1a8d	;C-4 $30
002011A8 1AB4                       		dc.w $1ab4
002011AA 1ADD                       		dc.w $1add
002011AC 1B09                       		dc.w $1b09
002011AE 1B37                       		dc.w $1b37
002011B0 1B68                       		dc.w $1b68
002011B2 1B9C                       		dc.w $1b9c
002011B4 1BD3                       		dc.w $1bd3
002011B6 1C0D                       		dc.w $1c0d
002011B8 1C4B                       		dc.w $1c4b
002011BA 1C8C                       		dc.w $1c8c
002011BC 2269                       		dc.w $2269
002011BE 228D                       		dc.w $228d	;C-5 $3C
002011C0 22B4                       		dc.w $22b4
002011C2 22DD                       		dc.w $22dd
002011C4 2309                       		dc.w $2309
002011C6 2337                       		dc.w $2337
002011C8 2368                       		dc.w $2368
002011CA 239C                       		dc.w $239c
002011CC 23D3                       		dc.w $23d3
002011CE 240D                       		dc.w $240d
002011D0 244B                       		dc.w $244b
002011D2 248C                       		dc.w $248c
002011D4 2A69                       		dc.w $2a69
002011D6 2A8D                       		dc.w $2a8d	;C-6 $48
002011D8 2AB4                       		dc.w $2ab4
002011DA 2ADD                       		dc.w $2add
002011DC 2B09                       		dc.w $2b09
002011DE 2B37                       		dc.w $2b37
002011E0 2B68                       		dc.w $2b68
002011E2 2B9C                       		dc.w $2b9c
002011E4 2BD3                       		dc.w $2bd3
002011E6 2C0D                       		dc.w $2c0d
002011E8 2C4B                       		dc.w $2c4b
002011EA 2C8C                       		dc.w $2c8c
002011EC 3269                       		dc.w $3269	;C-7 $54
002011EE 328D                       		dc.w $328d
002011F0 32B4                       		dc.w $32b4
002011F2 32DD                       		dc.w $32dd
002011F4 3309                       		dc.w $3309
002011F6 3337                       		dc.w $3337
002011F8 3368                       		dc.w $3368
002011FA 339C                       		dc.w $339c
002011FC 33D3                       		dc.w $33d3
002011FE 340D                       		dc.w $340d
00201200 344B                       		dc.w $344b
00201202 348C                       		dc.w $348c
00201204                            		even
00201204                            		
00201204                            ; ; -------------------------------
00201204                            ; ; Mute/Rest channel
00201204                            ; ; -------------------------------
00201204                            ; 
00201204                            ; SMEG_ChannelRest:
00201204                            ; 		cmp.b	#$FF,Chn_ID(a5)
00201204                            ; 		beq	@Return
00201204                            ; 		
00201204                            ; ; 		btst	#bitPriority,(a6)
00201204                            ; ; 		beq.s	@SFX_Mode
00201204                            ; ; 		btst	#bitSfxOn,(RAM_SMEG_SfxBuff)
00201204                            ; ; 		beq.s	@SFX_Mode
00201204                            ; ;  		lea	(RAM_SMEG_PrioList),a3
00201204                            ; ;  		moveq	#0,d1
00201204                            ; ;  		move.b	LastPattChn(a6),d1
00201204                            ; ; 		btst	#0,(a3,d1.w)
00201204                            ; ; 		bne	@Return
00201204                            ; ; @SFX_Mode:
00201204                            ; 
00201204                            ; 		tst.b	Chn_ID(a5)
00201204                            ; 		bmi.s	@PSG_Rest
00201204                            ; 
00201204                            ;                 cmp.b	#6,Chn_ID(a5)
00201204                            ;                 bne.s	@NoChk6
00201204                            ; 		btst	#bitFmDac,snd_flags(a6)
00201204                            ; 		bne.s	@DAC_Rest
00201204                            ; 
00201204                            ; @NoChk6:
00201204                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
00201204                            ; 		bge	@PCM_Rest
00201204                            ; 		
00201204                            ; 		moveq	#$28,d0
00201204                            ;                 moveq	#0,d1
00201204                            ; 		move.b	Chn_ID(a5),d1
00201204                            ; 		bsr	SMEG_Z80_Off
00201204                            ; 		bsr	FM_RegWrite_1
00201204                            ; 		bsr	SMEG_Z80_On
00201204                            ; 
00201204                            ; @Return:
00201204                            ; 		rts
00201204                            ; 
00201204                            ; ; -------------------------------
00201204                            ; ; PSG Rest
00201204                            ; ; -------------------------------
00201204                            ; 
00201204                            ; @PSG_Rest:
00201204                            ; 		moveq	#0,d0
00201204                            ; 		move.b	Chn_ID(a5),d0
00201204                            ; 		add.b	#$1F,d0
00201204                            ; 		move.b	d0,($C00011)
00201204                            ; 
00201204                            ; @Disabled:
00201204                            ; 		rts
00201204                            ; 
00201204                            ; ; -------------------------------
00201204                            ; ; DAC Rest
00201204                            ; ; -------------------------------
00201204                            ; 
00201204                            ; @DAC_Rest:
00201204                            ;   		bsr	SMEG_Z80_Off
00201204                            ; 		moveq	#$2B,d0
00201204                            ;                 moveq	#0,d1
00201204                            ;   		bsr	FM_RegWrite_1
00201204                            ; 
00201204                            ; 		moveq	#0,d0
00201204                            ; 		move.b	d0,($A001E0+$D)
00201204                            ; 		bsr	SMEG_Z80_On
00201204                            ; 		rts
00201204                            ; 
00201204                            ; ; -------------------------------
00201204                            ; ; PCM Rest
00201204                            ; ; -------------------------------
00201204                            ; 
00201204                            ; @PCM_Rest:
00201204                            ;  		if MCD
00201204                            ;  		
00201204                            ; 		tst.l	SongPcmSamp(a6)
00201204                            ; 		beq.s	@ReturnPCM
00201204                            ; 		bmi.s	@ReturnPCM
00201204                            ; 		
00201204                            ; 		moveq	#0,d1
00201204                            ; 		move.b	Chn_ID(a5),d1
00201204                            ; 		and.b	#$F,d1
00201204                            ; 		bclr	d1,PcmChnOnOff(a6)
00201204                            ; 		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
00201204                            ; 		moveq	#CdTask_SetOnOff,d0
00201204                            ; 		bsr	SMEG_CD_Call
00201204                            ; 		
00201204                            ;  		elseif MARS
00201204                            ;  		
00201204                            ; 		tst.l	SongPcmSamp(a6)
00201204                            ; 		beq.s	@ReturnPCM
00201204                            ; 		bmi.s	@ReturnPCM
00201204                            ; 		
00201204                            ;   		moveq	#0,d0
00201204                            ;   		move.b	Chn_ID(a5),d0
00201204                            ;   		and.w	#$F,d0
00201204                            ;   		move.b	d0,(marsreg+comm2)
00201204                            ;   		moveq	#marscall_Stop,d0
00201204                            ;   		bsr	SMEG_MARS_Call
00201204                            ;     		
00201204                            ; 		endif
00201204                            ; @ReturnPCM:
00201204                            ; 		rts
00201204                            		
00201204                            ; ================================================================
00201204                            ; Subs
00201204                            ; ================================================================
00201204                            
00201204                            ; -------------------------------------------
00201204                            ; Extra channels communication
00201204                            ; -------------------------------------------
00201204                            
00201204                            SMEG_CD_Call:
00201204                            ; 		bra	SubCpu_Task_Wait
00201204 4E75                       		rts
00201206                            
00201206                            SMEG_MARS_Call:
00201206 4E75                        		rts
00201208                             		
00201208                            ; -------------------------------------------
00201208                            ; Set instrument
00201208                            ; -------------------------------------------
00201208                            
00201208                            SMEG_SetVoice:
00201208 0C2D 00FF 0007             		cmp.b	#-1,Chn_ID(a5)
0020120E 6700 0000                  		beq	@Return
00201212                            		
00201212 0816 0000                  		btst	#bitPriority,(a6)
00201216 6600                       		bne.s	@SFX_ModeV
00201218 6100 0000                  		bsr	SMEG_FindPrioSlot
0020121C 4A13                         		tst.b	(a3)
0020121E 6600 0000                    		bne	@Return
00201222                            @SFX_ModeV:
00201222                            
00201222                            
00201222 4AAE 0010                  		tst.l	snd_instr(a6)
00201226 6700 0000                  		beq	@Return
0020122A                            		
0020122A 4A2D 0007                  		tst.b	Chn_ID(a5)
0020122E 6B00                       		bmi.s	@Return
00201230 0C2D 0010 0007             		cmp.b	#PCM_1,Chn_ID(a5)
00201236 6C00 0000                  		bge	SMEG_SetVoice_PCM
0020123A 0C2D 0006 0007             		cmp.b	#FM_6,Chn_ID(a5)
00201240 6700 0000                  		beq	SMEG_SetVoice_DAC
00201244                            		
00201244 6000 0000                   		bra	SetVoice_FM
00201248                            @Return:
00201248 4E75                        		rts
0020124A                            		
0020124A                            ; -------------------------------------------
0020124A                            ; Send DAC
0020124A                            ; -------------------------------------------
0020124A                            
0020124A                            SMEG_SetVoice_DAC:
0020124A 6100 0000                  		bsr	ChnlFM_srchIns
0020124E 0C42 FFFF                  		cmp.w	#-1,d2
00201252 6700                       		beq.s	@Return
00201254                            		
00201254 0802 0007                   		btst	#7,d2
00201258 6600                        		bne.s	@Sample_Mode
0020125A 08AE 0000 0001             		bclr	#bitFmDac,snd_flags(a6)
00201260 6000 0000                  		bra	SetVoice_FM
00201264                             		
00201264                            @Sample_Mode:
00201264 08EE 0000 0001             		bset	#bitFmDac,snd_flags(a6)
0020126A 202B 0004                  		move.l	4(a3),d0
0020126E 222B 0008                  		move.l	8(a3),d1
00201272 0481 0000 0001             		sub.l	#1,d1
00201278 242B 000C                  		move.l	$C(a3),d2
0020127C 7600                       		moveq	#0,d3
0020127E 162D 000B                  		move.b	chn_note(a5),d3
00201282 D66B 0002                   		add.w	2(a3),d3
00201286 6000 0000                   		bra	Audio_Sample_Set
0020128A                            @Return:
0020128A 4E75                       		rts
0020128C                            		
0020128C                            ; -------------------------------------------
0020128C                            ; Send FM
0020128C                            ; -------------------------------------------
0020128C                            
0020128C                            SetVoice_FM:
0020128C 6100 0000                  		bsr	ChnlFM_srchIns
00201290 08AE 0003 0001             		bclr	#bitSpecial3,snd_flags(a6)
00201296 0C42 FFFF                  		cmp.w	#-1,d2
0020129A 6700 0000                  		beq	@Return
0020129E 0802 0007                   		btst	#7,d2
002012A2 6600 0000                   		bne	@Return
002012A6 0802 0006                   		btst	#6,d2
002012AA 6700                        		beq.s	@notFM3
002012AC 08EE 0003 0001              		bset	#bitSpecial3,snd_flags(a6)
002012B2                            @notFM3:
002012B2                            
002012B2                            ;  		adda.w	#4,a3
002012B2 266B 0004                  		movea.l	4(a3),a3
002012B6 7000                       		moveq	#0,d0
002012B8 102D 0007                  		move.b	Chn_ID(a5),d0
002012BC 0C00 0004                  		cmp.b	#4,d0
002012C0 6D00                       		blt.s	@Low3
002012C2 0400 0004                  		sub.b	#4,d0
002012C6                            @Low3:
002012C6                            
002012C6 4840                       		swap	d0
002012C8 303C 0028                  		move.w	#$28,d0
002012CC 7200                       		moveq	#0,d1
002012CE 122D 0007                  		move.b	Chn_ID(a5),d1
002012D2 6100 0000                  		bsr	SMEG_Z80_Off
002012D6 6100 0000                  		bsr	FM_RegWrite_1
002012DA 4840                       		swap	d0
002012DC                            
002012DC 45FA 0000                  		lea	SMEG_FM_RegList(pc),a2
002012E0 3C00                       		move.w	d0,d6
002012E2 7818                       		moveq	#$18,d4
002012E4                            @Next:
002012E4 3A06                       		move.w	d6,d5
002012E6 101A                       		move.b	(a2)+,d0
002012E8 3600                       		move.w	d0,d3
002012EA D045                       		add.w	d5,d0
002012EC 121B                       		move.b	(a3)+,d1
002012EE                            
002012EE 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
002012F4 6C00                       		bge.s	@Chn456
002012F6 6100 0000                  		bsr	FM_RegWrite_1
002012FA 51CC FFE8                  		dbf	d4,@Next
002012FE 6000                       		bra.s	@BackZ80
00201300                            
00201300                            @Chn456:
00201300 6100 0000                  		bsr	FM_RegWrite_2
00201304 51CC FFDE                  		dbf	d4,@Next
00201308                            @BackZ80:
00201308 6100 0000                  		bsr	SMEG_Z80_On
0020130C                            @Return:
0020130C 4E75                       		rts
0020130E                            
0020130E                            ; -------------------------------------------
0020130E                            ; Set FM panning
0020130E                            ; -------------------------------------------
0020130E                            
0020130E                            SMEG_FM_SetPan:
0020130E 4A2D 0007                  		tst.b	Chn_ID(a5)
00201312 6B00 0000                  		bmi	@Return
00201316                            		
00201316 7200                       		moveq	#0,d1
00201318 122D 000C                    		move.b	chn_pan(a5),d1
0020131C EC49                         		lsr.w	#6,d1
0020131E 0241 0003                    		and.w	#%11,d1
00201322 123B 1000                    		move.b	@list(pc,d1.w),d1
00201326 0241 00C0                    		and.w	#%11000000,d1
0020132A 303C 00B4                    		move.w	#$B4,d0
0020132E 142D 0007                    		move.b	chn_id(a5),d2
00201332 0242 0003                    		and.w	#%11,d2
00201336 8042                         		or.w	d2,d0
00201338 6000 0000                   		bra	SMEG_FM_FindWrite
0020133C                            		
0020133C 8080 C040                  @list:		dc.b $80,$80,$C0,$40
00201340                            		even
00201340                            		
00201340                            		
00201340 303C 00B4                  		move.w	#$B4,d0
00201344 7400                       		moveq	#0,d2
00201346 142D 0007                  		move.b	Chn_ID(a5),d2
0020134A 7200                       		moveq	#0,d1
0020134C 122D 000C                  		move.b	Chn_Pan(a5),d1
00201350                            
00201350 6100 0000                  		bsr	SMEG_Z80_Off
00201354 0C02 0003                  		cmp.b	#3,d2
00201358 6E00                       		bgt.s	@SecondFM
0020135A D042                       		add.w	d2,d0
0020135C 6100 0000                  		bsr	FM_RegWrite_1
00201360 6000                       		bra.s	@BackZ80
00201362                            @SecondFM:
00201362 0442 0004                  		sub.w	#4,d2
00201366 D042                       		add.w	d2,d0
00201368 6100 0000                  		bsr	FM_RegWrite_2
0020136C                            @BackZ80:
0020136C 6100 0000                  		bsr	SMEG_Z80_On
00201370                            @Return:
00201370 4E75                       		rts
00201372                            
00201372                            ; ---------------------
00201372                            
00201372                            ChnlFM_srchIns:
00201372 266E 0010                  		movea.l	snd_instr(a6),a3
00201376 302B 0000                   		move.w	instDYmha(a3),d0
0020137A D6C0                        		adda	d0,a3
0020137C                            @next:
0020137C 4841                       		swap	d1
0020137E 4A53                       		tst.w	(a3)
00201380 6B00 0000                   		bmi	@NoteOff
00201384 7000                        		moveq	#0,d0
00201386 102D 0008                  		move.b	chn_inst(a5),d0
0020138A 3213                       		move.w	(a3),d1
0020138C 3401                       		move.w	d1,d2
0020138E 0241 003F                  		and.w	#$3F,d1
00201392 B041                       		cmp.w	d1,d0
00201394 6700                       		beq.s	@found
00201396 D6FC 0008                  		adda	#8,a3		;inst,oct,firstlong
0020139A 0802 0007                  		btst	#7,d2
0020139E 6600                       		bne.s	@doit
002013A0 0802 0006                  		btst	#6,d2
002013A4 67D6                       		beq.s	@next
002013A6                            @doit:
002013A6 D6FC 0008                  		adda	#8,a3		;scndlong,thrdlong
002013AA 60D0                       		bra.s	@next
002013AC                            @NoteOff:
002013AC 4841                       		swap	d1
002013AE 74FF                       		moveq	#-1,d2
002013B0                            @found:
002013B0 4E75                       		rts
002013B2                            		
002013B2                            ; --------------------------------------------
002013B2                            ; Play a sample
002013B2                            ;
002013B2                            ; Input:
002013B2                            ; d0 | LONG - Start
002013B2                            ; d1 | LONG - End
002013B2                            ; d2 | LONG - Loop point
002013B2                            ;              0 = From start
002013B2                            ;             -1 = No loop
002013B2                            ; d3 | WORD - Note ($3C - default)
002013B2                            ; --------------------------------------------
002013B2                            
002013B2                            Audio_Sample_Set:
002013B2 6100 0000                  		bsr	SMEG_Z80_Off
002013B6                            		
002013B6 41F9 00A0 0180             		lea	($A00180),a0
002013BC E198                       		rol.l	#8,d0
002013BE 10C0                       		move.b	d0,(a0)+
002013C0 E198                       		rol.l	#8,d0
002013C2 10C0                       		move.b	d0,(a0)+		
002013C4 E198                       		rol.l	#8,d0
002013C6 10C0                       		move.b	d0,(a0)+
002013C8 E198                       		rol.l	#8,d0
002013CA 10C0                       		move.b	d0,(a0)+
002013CC                            		
002013CC 0481 0000 0001              		sub.l	#1,d1
002013D2 E199                       		rol.l	#8,d1
002013D4 10C1                       		move.b	d1,(a0)+
002013D6 E199                       		rol.l	#8,d1
002013D8 10C1                       		move.b	d1,(a0)+		
002013DA E199                       		rol.l	#8,d1
002013DC 10C1                       		move.b	d1,(a0)+
002013DE E199                       		rol.l	#8,d1
002013E0 10C1                       		move.b	d1,(a0)+
002013E2                            		
002013E2 7200                       		moveq	#0,d1
002013E4 2800                       		move.l	d0,d4
002013E6 0C82 FFFF FFFF             		cmp.l	#-1,d2
002013EC 6700                       		beq.s	@no_loop
002013EE 7202                       		moveq	#2,d1
002013F0 2800                       		move.l	d0,d4
002013F2 D882                       		add.l	d2,d4
002013F4                            @no_loop:
002013F4 E19C                       		rol.l	#8,d4
002013F6 10C4                       		move.b	d4,(a0)+
002013F8 E19C                       		rol.l	#8,d4
002013FA 10C4                       		move.b	d4,(a0)+		
002013FC E19C                       		rol.l	#8,d4
002013FE 10C4                       		move.b	d4,(a0)+
00201400 E19C                       		rol.l	#8,d4
00201402 10C4                       		move.b	d4,(a0)+
00201404                            
00201404 1081                       		move.b	d1,(a0)
00201406                            		
00201406 3003                       		move.w	d3,d0
00201408 6000 0000                  		bra	AudioSmplNote_go
0020140C                            
0020140C                            ; --------------------------------------------
0020140C                            ; Stop the current sample
0020140C                            ; --------------------------------------------
0020140C                            
0020140C                            Audio_Sample_Play:
0020140C 6100 0000                  		bsr	SMEG_Z80_Off
00201410                            		
00201410 1039 00A0 018C             		move.b	($A0018C).l,d0
00201416 08C0 0000                  		bset	#0,d0
0020141A 13C0 00A0 018C             		move.b	d0,($A0018C).l
00201420                             		
00201420 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00201428 4E75                       		rts
0020142A                            		
0020142A                            ; --------------------------------------------
0020142A                            ; Stop the current sample
0020142A                            ; --------------------------------------------
0020142A                            
0020142A                            Audio_Sample_Stop:
0020142A 6100 0000                  		bsr	SMEG_Z80_Off
0020142E                            		
0020142E 13FC 0040 00A0 018C        		move.b	#$40,($A0018C).l
00201436                             		
00201436 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0020143E 4E75                       		rts
00201440                            		
00201440                            ; --------------------------------------------
00201440                            ; Modify sample note
00201440                            ;
00201440                            ; d3 | WORD - Note
00201440                            ; --------------------------------------------
00201440                            
00201440                            Audio_Sample_Note:
00201440 6100 0000                  		bsr	SMEG_Z80_Off
00201444                            		
00201444                            AudioSmplNote_go:
00201444                            ; 		sub.w	#24,d0			; skip 2 octaves
00201444 ED48                       		lsl.w	#6,d0
00201446 0640 01C0                   		add.w	#$1C0,d0
0020144A 13C0 00A0 00DC             		move.b	d0,($A000DC)		; ld bc,(NEW ADDRESS)
00201450 E048                       		lsr.w	#8,d0			;
00201452 13C0 00A0 00DD              		move.b	d0,($A000DD)		;
00201458                             		
00201458 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00201460 4E75                       		rts
00201462                            
00201462                            ; -------------------------------------------
00201462                            ; Send PCM/PWM
00201462                            ; -------------------------------------------
00201462                            
00201462                            SMEG_SetVoice_PCM:
00201462                               		
00201462 7200                       		moveq	#0,d1
00201464 7400                          		moveq	#0,d2
00201466 4AAE 0014                  		tst.l	SongPcmSamp(a6)
0020146A 6700                       		beq.s	@FinishList
0020146C 6B00                       		bmi.s	@FinishList
0020146E 266E 0014                  		movea.l	SongPcmSamp(a6),a3
00201472 122D 0008                  		move.b	Chn_Inst(a5),d1
00201476                            @NextPcm:
00201476 4A53                       		tst.w	(a3)
00201478 6B00                       		bmi.s	@GiveUp
0020147A 1413                       		move.b	(a3),d2
0020147C B401                       		cmp.b	d1,d2
0020147E 6700                       		beq.s	@FoundPcm
00201480 D6FC 0002                  		adda	#2,a3
00201484 60F0                       		bra.s	@NextPcm
00201486                            @FoundPcm:
00201486 7200                       		moveq	#0,d1
00201488 122B 0001                  		move.b	1(a3),d1
0020148C                            @GiveUp:
0020148C 0441 0001                  		sub.w	#1,d1
00201490 E549                       		lsl.w	#2,d1
00201492 47F9 FFFF F1AE             		lea	(RAM_SMEG_PcmList),a3
00201498 D6C1                       		adda	d1,a3
0020149A                               		
0020149A 1B6B 0001 000E             		move.b	1(a3),Chn_PCM_Pitch(a5)
002014A0 13ED 0007 00A1 2010        		move.b	Chn_ID(a5),($A12000+CommDataM)
002014A8 13D3 00A1 2011             		move.b	(a3),($A12000+CommDataM+1)
002014AE 33EB 0002 00A1 2012        		move.w	2(a3),($A12000+CommDataM+2)
002014B6 7021                       		moveq	#CdTask_SetAddr,d0
002014B8 6100 FD4A                  		bsr	SMEG_CD_Call
002014BC                            
002014BC                            ; ---------------------------------
002014BC                            
002014BC                            @FinishList:
002014BC 4E75                       		rts
002014BE                            		
002014BE                            ; -------------------------------------------
002014BE                            ; Reset FM
002014BE                            ; -------------------------------------------
002014BE                            
002014BE                            SMEG_FM_Reset:
002014BE 6100 0000                  		bsr	SMEG_Z80_Off
002014C2                            
002014C2 7028                       		moveq	#$28,d0
002014C4 7200                       		moveq	#0,d1
002014C6 6100 0000                  		bsr	FM_RegWrite_1
002014CA 7028                       		moveq	#$28,d0
002014CC 7201                       		moveq	#1,d1
002014CE 6100 0000                  		bsr	FM_RegWrite_1
002014D2 7028                       		moveq	#$28,d0
002014D4 7202                       		moveq	#2,d1
002014D6 6100 0000                  		bsr	FM_RegWrite_1
002014DA 7028                       		moveq	#$28,d0
002014DC 7204                       		moveq	#4,d1
002014DE 6100 0000                  		bsr	FM_RegWrite_1
002014E2 7028                       		moveq	#$28,d0
002014E4 7205                       		moveq	#5,d1
002014E6 6100 0000                  		bsr	FM_RegWrite_1
002014EA 7028                       		moveq	#$28,d0
002014EC 7206                       		moveq	#6,d1
002014EE 6100 0000                  		bsr	FM_RegWrite_1
002014F2                            
002014F2 6000 0000                  		bra	SMEG_Z80_On
002014F6                            
002014F6                            ; -------------------------------------------
002014F6                            ; Find FM
002014F6                            ; -------------------------------------------
002014F6                            
002014F6                            SMEG_FM_FindWrite:
002014F6 0C2D 0004 0007             		cmp.b	#4,Chn_ID(a5)
002014FC 6C00                       		bge.s	@Second
002014FE 6000 0000                  		bra	FM_RegWrite_1
00201502                            @Second:
00201502 6000 0000                  		bra	FM_RegWrite_2
00201506                            
00201506                            ; -------------------------------------------
00201506                            ; Write to FM register
00201506                            ; -------------------------------------------
00201506                            
00201506                            FM_RegWrite_1:
00201506 1439 00A0 4000             		move.b	($A04000).l,d2
0020150C 0802 0007                  		btst	#7,d2
00201510 66F4                       		bne.s	FM_RegWrite_1
00201512 13C0 00A0 4000             		move.b	d0,($A04000).l
00201518                            @Loop:
00201518 1439 00A0 4000             		move.b	($A04000).l,d2
0020151E 0802 0007                  		btst	#7,d2
00201522 66F4                       		bne.s	@Loop
00201524 13C1 00A0 4001             		move.b	d1,($A04001).l
0020152A 4E75                       		rts
0020152C                            
0020152C                            FM_RegWrite_2:
0020152C 1439 00A0 4000             		move.b	($A04000).l,d2
00201532 0802 0007                  		btst	#7,d2
00201536 66F4                       		bne.s	FM_RegWrite_2
00201538 13C0 00A0 4002             		move.b	d0,($A04002).l
0020153E                            @Loop:
0020153E 1439 00A0 4000             		move.b	($A04000).l,d2
00201544 0802 0007                  		btst	#7,d2
00201548 66F4                       		bne.s	@Loop
0020154A 13C1 00A0 4003             		move.b	d1,($A04003).l
00201550 4E75                       		rts
00201552                            		
00201552                            SMEG_Z80_Off:
00201552 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0020155A                            @WaitZ80;\@:
0020155A 0839 0000 00A1 1100        		btst	#0,($A11100).l
00201562 66F6                       		bne.s	@WaitZ80;\@
00201564 4E75                       		rts
00201566                            		
00201566                            ; USES d2
00201566                            
00201566                            SMEG_Z80_On:
00201566 1439 00A0 018C             		move.b	($A0018C),d2
0020156C 0802 0007                  		btst	#7,d2
00201570 6700                       		beq.s	@stopped;\@
00201572                            @busywait;\@:
00201572 1439 00A0 4000             		move.b	($A04000).l,d2
00201578 0802 0007                  		btst	#7,d2
0020157C 66F4                       		bne.s	@busywait;\@
0020157E 13FC 002A 00A0 4000        		move.b	#$2A,(sound_ym_1)
00201586 1439 00A0 018F             		move.b	($A0018F),d2
0020158C 13C2 00A0 4001             		move.b	d2,(sound_ym_2)
00201592                            @stopped;\@:
00201592 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0020159A 4E75                       		rts
0020159C                            		
0020159C                            ; -----------------------
0020159C                            ; Setup channels
0020159C                            ; -----------------------
0020159C                            
0020159C                            SMEG_Load_SetChnls:
0020159C 286E 0004                  		movea.l	SongRequest(a6),a4				;a4 - Music data
002015A0 3D6E 0018 001C             		move.w	TicksRequest(a6),TicksSet(a6)
002015A6                            
002015A6                            ; -----------------------
002015A6                            ; Get the
002015A6                            ; PatternEnd/PatternLoop
002015A6                            ; numbers
002015A6                            ; -----------------------
002015A6                            
002015A6 1D5C 0002                  		move.b	(a4)+,PatternEnd(a6)
002015AA 1D5C 0003                  		move.b	(a4)+,PatternLoop(a6)
002015AE                            		
002015AE                            ; -----------------------
002015AE                            ; Get instruments
002015AE                            ; -----------------------
002015AE                            
002015AE 2D5C 0008                  		move.l	(a4)+,SongStart(a6)
002015B2 2D5C 0010                  		move.l	(a4)+,snd_instr(a6)
002015B6                            
002015B6                            ; -----------------------
002015B6                            ; Setup the channel IDs
002015B6                            ; -----------------------
002015B6                            
002015B6 303C 0011                  		move.w	#max_chnl-1,d0
002015BA 341C                       		move.w	(a4)+,d2
002015BC 0442 0001                  		sub.w	#1,d2
002015C0                            @SetId:
002015C0 1B7C 0001 0006             		move.b	#1,Chn_Type(a5)
002015C6 1B7C 00FF 0007             		move.b	#-1,Chn_ID(a5)
002015CC 4A42                       		tst.w	d2
002015CE 6B00                       		bmi.s	@Disabled
002015D0 0442 0001                  		sub.w	#1,d2
002015D4 1B5C 0007                  		move.b	(a4)+,Chn_ID(a5)
002015D8 1B5C 0009                   		move.b	(a4)+,Chn_Vol(a5)
002015DC 1B5C 000C                   		move.b	(a4)+,Chn_Pan(a5)
002015E0 161C                        		move.b	(a4)+,d3
002015E2 4A2D 0007                   		tst.b	chn_id(a5)
002015E6 6B00                        		bmi.s	@is_psg
002015E8 0C2D 0010 0007              		cmp.b	#PCM_1,chn_id(a5)
002015EE 6C00                        		bge.s	@is_pcm
002015F0                             		
002015F0 E94B                        		lsl.w	#4,d3
002015F2 1B43 000D                   		move.b	d3,Chn_FM_Key(a5)
002015F6 6000                       		bra.s	@Disabled
002015F8                            @is_pcm:
002015F8 4E71                       		nop 
002015FA 6000                       		bra.s	@Disabled
002015FC                            		
002015FC                            @is_psg:
002015FC 122D 0007                  		move.b	Chn_ID(a5),d1
00201600 0001 001F                  		or.b	#$1F,d1
00201604 13C1 00C0 0011             		move.b	d1,(sound_psg)
0020160A                             		
0020160A                            @Disabled:
0020160A DAFC 0010                  		adda 	#sizeof_Chn,a5
0020160E 51C8 FFB0                  		dbf	d0,@SetId
00201612                             		
00201612                            ; ; -----------------------
00201612                            ; ; Master volumes
00201612                            ; ; -----------------------
00201612                            ; 
00201612                            ; 		moveq	#(max_chnl)-1,d0
00201612                            ; @SetVol:
00201612                            ; 		move.b	(a4)+,Chn_MainVol(a5)
00201612                            ; 		adda 	#sizeof_Chn,a5
00201612                            ; 		dbf	d0,@SetVol
00201612                            
00201612                            ; -----------------------
00201612                            ; last steps
00201612                            ; -----------------------
00201612                            
00201612 286E 0008                  		movea.l	SongStart(a6),a4
00201616 1D5C 0021                  		move.b	(a4)+,PattSize+1(a6)
0020161A 1D5C 0020                  		move.b	(a4)+,PattSize(a6)
0020161E 426E 0022                  		clr.w	pattr_read(a6)
00201622 D8FC 0006                  		adda	#6,a4
00201626 2D4C 000C                  		move.l	a4,SongRead(a6)
0020162A 4E75                       		rts
0020162C                            		
0020162C                            ; -----------------------
0020162C                            ; Search used slot
0020162C                            ; 
0020162C                            ; Uses d3
0020162C                            ; -----------------------
0020162C                            
0020162C                            SMEG_FindPrioSlot:
0020162C 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
00201632                            ;  		inform 0,"%h",RAM_SMEG_PrioList
00201632                             		
00201632 7600                        		moveq	#0,d3
00201634 162D 0007                   		move.b	Chn_ID(a5),d3
00201638 0803 0007                   		btst	#7,d3
0020163C 6600                        		bne.s	@PSG_slots
0020163E 0C03 0010                   		cmp.b	#PCM_1,d3
00201642 6C00                        		bge.s	@PCM_Slots
00201644 0C03 0004                   		cmp.b	#4,d3
00201648 6D00                        		blt.s	@leftFM
0020164A 0443 0001                   		sub.w	#1,d3
0020164E                            @leftFM:
0020164E 6000                       		bra.s	@set_slot
00201650                            
00201650                            @PSG_slots:
00201650 EA4B                       		lsr.w	#5,d3
00201652 0243 0003                  		and.w	#%11,d3
00201656 0643 0006                  		add.w	#6,d3
0020165A 6000                       		bra.s	@set_slot
0020165C                            
0020165C                            @PCM_Slots:
0020165C 0443 0010                  		sub.w	#PCM_1,d3
00201660                            @set_slot:
00201660 D6C3                       		add.w	d3,a3
00201662 4E75                       		rts
00201664                            		
00201664                            ; -----------------------
00201664                            ; Turn off the unused
00201664                            ; channels
00201664                            ; -----------------------
00201664                            
00201664                            SMEG_Load_FixSfx:
00201664 47F9 FFFF EF5C              		lea	(RAM_SMEG_PrioList),a3
0020166A                             		
0020166A                            ; FM Check
0020166A                            
0020166A 7605                        		moveq	#6-1,d3
0020166C 7028                        		moveq	#$28,d0
0020166E 7200                        		moveq	#0,d1
00201670                            @chknextfm1:
00201670 4A13                       		tst.b	(a3)
00201672 6700                       		beq.s	@off_fm
00201674 4213                       		clr.b	(a3)
00201676                            		
00201676 0C01 0006                  		cmp.b	#6,d1
0020167A 6600                       		bne.s	@notdac
0020167C 082E 0000 0001             		btst	#bitFmDac,snd_flags(a6)
00201682 6700                       		beq.s	@notdac
00201684                            		
00201684 6100 FDA4                  		bsr	Audio_Sample_Stop
00201688 6000                       		bra.s	@off_fm
0020168A                            		
0020168A                            @notdac:
0020168A 6100 FEC6                  		bsr	SMEG_Z80_Off
0020168E 6100 FE76                  		bsr	FM_RegWrite_1
00201692 6100 FED2                  		bsr	SMEG_Z80_On
00201696                            @off_fm:
00201696 D6FC 0001                  		adda 	#1,a3
0020169A                            
0020169A 0641 0001                  		add.w	#1,d1
0020169E 0C41 0003                  		cmp.w	#3,d1
002016A2 6600                       		bne.s	@nope
002016A4 0641 0001                  		add.w	#1,d1
002016A8                            @nope:
002016A8 51CB FFC6                  		dbf	d3,@chknextfm1
002016AC                            		
002016AC                            ; PSG check
002016AC                            
002016AC 323C 009F                  		move.w	#$9F,d1
002016B0 303C 0003                  		move.w	#4-1,d0
002016B4                            @chknextpsg:
002016B4 4A13                       		tst.b	(a3)
002016B6 6700                       		beq.s	@off_psg
002016B8 4213                       		clr.b	(a3)
002016BA 13C1 00C0 0011             		move.b	d1,(sound_psg)
002016C0                            @off_psg:
002016C0 D6FC 0001                  		adda	#1,a3
002016C4 0641 0020                  		add.w	#$20,d1
002016C8 51C8 FFEA                  		dbf	d0,@chknextpsg
002016CC                            		
002016CC                            ; TODO: PCM check
002016CC                            
002016CC                            ; 		lea	(RAM_SMEG_Chnls_BGM),a5
002016CC                            ; 		moveq	#(max_chnl)-1,d4
002016CC                            ; @SetId:
002016CC                            ; 		move.b	#$80,Chn_Pan(a5)
002016CC                            ; 
002016CC                            ; 		tst.b	Chn_ID(a5)
002016CC                            ; 		bmi.s	@NotFM
002016CC                            ; 		cmp.b	#PCM_1,Chn_ID(a5)
002016CC                            ; 		bge.s	@NotFM
002016CC                            ; 
002016CC                            ; 		clr.b	Chn_FM_Key(a5)
002016CC                            ; 		move.b	#%00001111,Chn_FM_Key(a5)
002016CC                            ; 		move.b	#$C0,Chn_Pan(a5)
002016CC                            ; 		bsr	SMEG_FM_SetPan
002016CC                            ; @NotFM:
002016CC                            ; 		adda 	#sizeof_Chn,a5
002016CC                            ; 		dbf	d4,@SetId
002016CC                            		
002016CC                            ; 		bsr	SMEG_Z80_Off
002016CC                            ; 		moveq	#$2B,d0
002016CC                            ;                 moveq	#0,d1
002016CC                            ;   		bsr	FM_RegWrite_1
002016CC                            ;   		
002016CC                            ; 		moveq	#0,d0
002016CC                            ; 		move.b	d0,($A001E0+$D)
002016CC                            ; 		bsr	SMEG_Z80_On
002016CC                            		
002016CC 4E75                       		rts
002016CE                            		
002016CE                            ; -----------------------
002016CE                            ; Exclusive features
002016CE                            ;
002016CE                            ; TODO: creo que es
002016CE                            ; mala idea hacer esperar
002016CE                            ; al VBlank ya que moví
002016CE                            ; la rutina esta
002016CE                            ; -----------------------
002016CE                            
002016CE                            SMEG_Load_SetExtChnls:
002016CE                            
002016CE 7026                        		moveq	#CdTask_ClearAllPcm,d0
002016D0 6100 FB32                   		bsr	SMEG_CD_Call
002016D4                            		
002016D4 4DF9 FFFF EF00              		lea	(RAM_SMEG_Buffer),a6
002016DA 4AAE 0014                   		tst.l	SongPcmSamp(a6)
002016DE 6700 0000                   		beq	@Return
002016E2 6B00 0000                   		bmi	@Return
002016E6                             		
002016E6 2A6E 0014                   		movea.l	SongPcmSamp(a6),a5
002016EA 7200                        		moveq	#0,d1
002016EC 47F9 FFFF F1AE              		lea	(RAM_SMEG_PcmList),a3
002016F2                            @NextSamp:
002016F2 4A55                        		tst.w	(a5)
002016F4 6B00                        		bmi.s	@Finish
002016F6 1681                        		move.b	d1,(a3)				;ST Address
002016F8                            
002016F8 302D 000E                   		move.w	$E(a5),d0
002016FC 0240 00FF                   		and.w	#$FF,d0
00201700 1740 0001                   		move.b	d0,1(a3)
00201704 23D5 00A1 2010              		move.l	(a5),($A12000+CommDataM)	;\
0020170A 23ED 0004 00A1 2014         		move.l	4(a5),($A12000+CommDataM+4)	; > Filename
00201712 23ED 0008 00A1 2018         		move.l	8(a5),($A12000+CommDataM+8)	;/
0020171A 33FC 0000 00A1 201C          		move.w	#0,($A12000+CommDataM+$C)
00201722 13C1 00A1 201D              		move.b	d1,($A12000+CommDataM+$D)	;Bank to use
00201728 7020                        		moveq	#CdTask_LoadPcm,d0
0020172A 6100 FAD8                    		bsr	SMEG_CD_Call
0020172E                              		
0020172E 7400                         		moveq	#0,d2
00201730 7600                         		moveq	#0,d3
00201732 3439 00A1 2022              		move.w	($A12000+CommDataS+2),d2
00201738 0C6D FFFF 000C              		cmp.w	#$FFFF,$C(a5)
0020173E 6700                        		beq.s	@NotLoop
00201740 342D 000C                   		move.w	$C(a5),d2
00201744                            @NotLoop:
00201744                            ; 		move.b	d1,d3
00201744                            ; 		and.w	#$7F,d3
00201744                            ; 		lsl.w	#8,d3
00201744                            ; 		lsl.w	#4,d3
00201744                            ; 		add.w 	d3,d2
00201744                            		
00201744 3742 0002                   		move.w	d2,2(a3)			;Loop address
00201748 1239 00A1 2020              		move.b	($A12000+CommDataS),d1		;Next ST
0020174E                             		
0020174E DAFC 0010                   		adda	#$10,a5
00201752 D6FC 0004                   		adda	#4,a3
00201756 609A                        		bra.s	@NextSamp
00201758                            @Finish:
00201758 DAFC 0002                   		adda	#2,a5
0020175C 2D4D 0014                   		move.l	a5,SongPcmSamp(a6)		;Second list
00201760                            		
00201760                            ; -----------------------
00201760                            
00201760                            		
00201760                            @Return:
00201760 4E75                       		rts
00201762                            		
00201762                            ; -------------------------------------------
00201762                            ; Reset PSG
00201762                            ; -------------------------------------------
00201762                            
00201762                            SMEG_PSG_Reset:
00201762 13FC 009F 00C0 0011        		move.b	#$9F,($C00011).l
0020176A 13FC 00BF 00C0 0011        		move.b	#$BF,($C00011).l
00201772 13FC 00DF 00C0 0011        		move.b	#$DF,($C00011).l
0020177A 13FC 00FF 00C0 0011        		move.b	#$FF,($C00011).l
00201782 4E75                       		rts
00201784                            
00201784                            ; -------------------------------------------
00201784                            ; Reset PCM
00201784                            ; -------------------------------------------
00201784                            
00201784                            SMEG_PCM_Reset:
00201784 4AAE 0014                  		tst.l	SongPcmSamp(a6)
00201788 6700                       		beq.s	@NoResetPCM
0020178A 6B00 0000                  		bmi	@NoResetPCM
0020178E                            		
0020178E                            		
0020178E 422E 0027                  		clr.b	PcmChnOnOff(a6)
00201792 13EE 0027 00A1 2010        		move.b	PcmChnOnOff(a6),($A12000+CommDataM)
0020179A 7025                       		moveq	#CdTask_SetOnOff,d0
0020179C 6000 FA66                  		bra	SMEG_CD_Call
002017A0                            		
002017A0                            
002017A0                            @NoResetPCM:
002017A0 4E75                       		rts
002017A2                            
002017A2                            ; ================================================================
002017A2                            ; -------------------------------------------------
002017A2                            ; Data
002017A2                            ; -------------------------------------------------
002017A2                            
002017A2                            ; -------------------------------
002017A2                            ; FM Register list
002017A2                            ; -------------------------------
002017A2                            
002017A2                            SMEG_FM_RegList:
002017A2 B0                         		dc.b $B0
002017A3 3038 343C                  		dc.b $30,$38,$34,$3C
002017A7 5058 545C                  		dc.b $50,$58,$54,$5C
002017AB 6068 646C                  		dc.b $60,$68,$64,$6C
002017AF 7078 747C                  		dc.b $70,$78,$74,$7C
002017B3 8088 848C                  		dc.b $80,$88,$84,$8C
002017B7 4048 444C                  		dc.b $40,$48,$44,$4C
002017BC 00                         		even
002017BC                            	
002017BC                            ; -------------------------------
002017BC                            ; Z80 Driver
002017BC                            ; -------------------------------
002017BC                            
002017BC                            Z80_Driver:	incbin	"system/sound/z80/main.bin"
002028BC                            Z80_DriverEnd:
002028BC                            		even
002028BC                            		
002028BC                            ; ---------------------------------------------------
002028BC                            ; ---------------------------------------------------
002028BC                            		include	"system/misc.asm"
002028BC                            ; ====================================================================
002028BC                            ; System
002028BC                            ; ====================================================================
002028BC                            
002028BC                            ; ====================================================================
002028BC                            ; -------------------------------------------------
002028BC                            ; RAM
002028BC                            ; -------------------------------------------------
002028BC                            
002028BC                                            rsset	RAM_System
002028BC =FFFFDE00                  RAM_HintJumpTo	rs.w	1				; DONT
002028BC =FFFFDE02                  RAM_HintAddr	rs.l	1				; SEPARATE
002028BC =FFFFDE06                  RAM_VIntJumpTo	rs.w	1				; THESE
002028BC =FFFFDE08                  RAM_VintAddr	rs.l	1				; ONES
002028BC =FFFFDE0C                  RAM_VIntRegs	rs.l	16
002028BC =FFFFDE4C                  RAM_ModeReset	rs.w	1
002028BC =FFFFDE4E                  RAM_IntFlags	rs.b	1
002028BC =FFFFDE4F                  RAM_GameMode	rs.b	1
002028BC                            
002028BC =FFFFDE50                  sizeof_sys	rs.l	0
002028BC                            ; 		inform 0,"system ram: %h",(sizeof_sys-RAM_System)
002028BC                             				
002028BC                            ; ====================================================================
002028BC                            ; -------------------------------------------------
002028BC                            ; Variables
002028BC                            ; -------------------------------------------------
002028BC                            
002028BC                            ; --------------------------------------------
002028BC                            				
002028BC                            ; ====================================================================
002028BC                            ; -------------------------------------------------
002028BC                            ; Macros
002028BC                            ; -------------------------------------------------
002028BC                            
002028BC                            ; --------------------------------------------
002028BC                            
002028BC                            ; ====================================================================
002028BC                            ; -------------------------------------------------
002028BC                            ; Subs
002028BC                            ; -------------------------------------------------
002028BC                            
002028BC                            System_init:
002028BC 41F9 FFFF BC00             		lea	(RAM_ModeBuffer),a0
002028C2 303C 0BFF                  		move.w	#($1800/2)-1,d0
002028C6                            @clear_buff:
002028C6 4258                       		clr.w	(a0)+
002028C8 51C8 FFFC                  		dbf	d0,@clear_buff
002028CC                            		
002028CC 23FC 0000 0000 FFFF DE08   		move.l	#MD_Vint,(RAM_VIntAddr)
002028D6 23FC 0000 0000 FFFF DE02   		move.l	#MD_Hint,(RAM_HIntAddr)
002028E0 303C 4EF9                  		move.w	#$4EF9,d0
002028E4 33C0 FFFF DE06              		move.w	d0,(RAM_VIntJumpTo)
002028EA 33C0 FFFF DE00             		move.w	d0,(RAM_HIntJumpTo)
002028F0                            		
002028F0 4239 FFFF DE4F              		clr.b	(RAM_GameMode)
002028F6 4E75                       		rts
002028F8                            		
002028F8                            ; ---------------------------------------------
002028F8                            ; SRAM
002028F8                            ; ---------------------------------------------
002028F8                            
002028F8                            SRAM_Init:
002028F8 13FC 0003 00A1 30F1        		move.b	#%11,($A130F1)		;read+write
00202900 41F9 0020 0000             		lea	($200000),a0
00202906 0108 0001                  		movep.w	1(a0),d0
0020290A 0C80 0000 4745             		cmp.l	#"GE",d0
00202910 6700                       		beq.s	@exit
00202912 43FA 0000                  		lea	@SramHead(pc),a1
00202916 7006                       		moveq	#7-1,d0
00202918                            @header:
00202918 1019                       		move.b	(a1)+,d0
0020291A 1140 0001                  		move.b	d0,1(a0)
0020291E D0FC 0002                  		adda	#2,a0
00202922 51C8 FFF4                  		dbf	d0,@header
00202926                            @exit:
00202926 13FC 0000 00A1 30F1        		move.b	#0,($A130F1)
0020292E 4E75                       		rts
00202930                            
00202930                            ; ---------------------------------------------
00202930                            
00202930 4745 4E59 5341 5645 00     @SramHead:	dc.b "GENYSAVE",0
0020293A 00                         		even
0020293A                            		
0020293A                            ; ---------------------------------------------
0020293A                            ; CalcSine
0020293A                            ;
0020293A                            ; Input:
0020293A                            ; d0 | WORD
0020293A                            ;
0020293A                            ; Output:
0020293A                            ; d0 | WORD
0020293A                            ; d1 | WORD
0020293A                            ; ---------------------------------------------
0020293A                            
0020293A                            CalcSine:
0020293A 0240 00FF                  		and.w	#$FF,d0
0020293E D040                       		add.w	d0,d0
00202940 0640 0080                  		add.w	#$80,d0
00202944 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00202948 0440 0080                  		sub.w	#$80,d0
0020294C 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00202950 4E75                       		rts	
00202952                            
00202952                            Sine_Data:
00202952 0000 0006 000C 0012 0019+  		dc.w 0,	6, $C, $12, $19, $1F, $25, $2B,	$31, $38, $3E
00202968 0044 004A 0050 0056 005C+  		dc.w $44, $4A, $50, $56, $5C, $61, $67,	$6D, $73, $78
0020297C 007E 0083 0088 008E 0093+  		dc.w $7E, $83, $88, $8E, $93, $98, $9D,	$A2, $A7, $AB
00202990 00B0 00B5 00B9 00BD 00C1+  		dc.w $B0, $B5, $B9, $BD, $C1, $C5, $C9,	$CD, $D1, $D4
002029A4 00D8 00DB 00DE 00E1 00E4+  		dc.w $D8, $DB, $DE, $E1, $E4, $E7, $EA,	$EC, $EE, $F1
002029B8 00F3 00F4 00F6 00F8 00F9+  		dc.w $F3, $F4, $F6, $F8, $F9, $FB, $FC,	$FD, $FE, $FE
002029CC 00FF 00FF 00FF 0100 00FF+  		dc.w $FF, $FF, $FF, $100, $FF, $FF, $FF, $FE, $FE, $FD
002029E0 00FC 00FB 00F9 00F8 00F6+  		dc.w $FC, $FB, $F9, $F8, $F6, $F4, $F3,	$F1, $EE, $EC
002029F4 00EA 00E7 00E4 00E1 00DE+  		dc.w $EA, $E7, $E4, $E1, $DE, $DB, $D8,	$D4, $D1, $CD
00202A08 00C9 00C5 00C1 00BD 00B9+  		dc.w $C9, $C5, $C1, $BD, $B9, $B5, $B0,	$AB, $A7, $A2
00202A1C 009D 0098 0093 008E 0088+  		dc.w $9D, $98, $93, $8E, $88, $83, $7E,	$78, $73, $6D
00202A30 0067 0061 005C 0056 0050+  		dc.w $67, $61, $5C, $56, $50, $4A, $44,	$3E, $38, $31
00202A44 002B 0025 001F 0019 0012+  		dc.w $2B, $25, $1F, $19, $12, $C, 6, 0,	-6, -$C, -$12
00202A5A FFE7 FFE1 FFDB FFD5 FFCF+  		dc.w -$19, -$1F, -$25, -$2B, -$31, -$38, -$3E, -$44, -$4A
00202A6C FFB0 FFAA FFA4 FF9F FF99+  		dc.w -$50, -$56, -$5C, -$61, -$67, -$6D, -$75, -$78, -$7E
00202A7E FF7D FF78 FF72 FF6D FF68+  		dc.w -$83, -$88, -$8E, -$93, -$98, -$9D, -$A2, -$A7, -$AB
00202A90 FF50 FF4B FF47 FF43 FF3F+  		dc.w -$B0, -$B5, -$B9, -$BD, -$C1, -$C5, -$C9, -$CD, -$D1
00202AA2 FF2C FF28 FF25 FF22 FF1F+  		dc.w -$D4, -$D8, -$DB, -$DE, -$E1, -$E4, -$E7, -$EA, -$EC
00202AB4 FF12 FF0F FF0D FF0C FF0A+  		dc.w -$EE, -$F1, -$F3, -$F4, -$F6, -$F8, -$F9, -$FB, -$FC
00202AC6 FF03 FF02 FF02 FF01 FF01+  		dc.w -$FD, -$FE, -$FE, -$FF, -$FF, -$FF, -$100,	-$FF, -$FF
00202AD8 FF01 FF02 FF02 FF03 FF04+  		dc.w -$FF, -$FE, -$FE, -$FD, -$FC, -$FB, -$F9, -$F8, -$F6
00202AEA FF0C FF0D FF0F FF12 FF14+  		dc.w -$F4, -$F3, -$F1, -$EE, -$EC, -$EA, -$E7, -$E4, -$E1
00202AFC FF22 FF25 FF28 FF2C FF2F+  		dc.w -$DE, -$DB, -$D8, -$D4, -$D1, -$CD, -$C9, -$C5, -$C1
00202B0E FF43 FF47 FF4B FF50 FF55+  		dc.w -$BD, -$B9, -$B5, -$B0, -$AB, -$A7, -$A2, -$9D, -$98
00202B20 FF6D FF72 FF78 FF7D FF82+  		dc.w -$93, -$8E, -$88, -$83, -$7E, -$78, -$75, -$6D, -$67
00202B32 FF9F FFA4 FFAA FFB0 FFB6+  		dc.w -$61, -$5C, -$56, -$50, -$4A, -$44, -$3E, -$38, -$31
00202B44 FFD5 FFDB FFE1 FFE7 FFEE+  		dc.w -$2B, -$25, -$1F, -$19, -$12, -$C,	-6, 0, 6, $C, $12
00202B5A 0019 001F 0025 002B 0031+  		dc.w $19, $1F, $25, $2B, $31, $38, $3E,	$44, $4A, $50
00202B6E 0056 005C 0061 0067 006D+  		dc.w $56, $5C, $61, $67, $6D, $73, $78,	$7E, $83, $88
00202B82 008E 0093 0098 009D 00A2+  		dc.w $8E, $93, $98, $9D, $A2, $A7, $AB,	$B0, $B5, $B9
00202B96 00BD 00C1 00C5 00C9 00CD+  		dc.w $BD, $C1, $C5, $C9, $CD, $D1, $D4,	$D8, $DB, $DE
00202BAA 00E1 00E4 00E7 00EA 00EC+  		dc.w $E1, $E4, $E7, $EA, $EC, $EE, $F1,	$F3, $F4, $F6
00202BBE 00F8 00F9 00FB 00FC 00FD+  		dc.w $F8, $F9, $FB, $FC, $FD, $FE, $FE,	$FF, $FF, $FF
00202BD2                            		even
00202BD2                            	
00202BD2                            ; ---------------------------------------------
00202BD2                            ; HexToByte_Byte
00202BD2                            ; 
00202BD2                            ; Uses:
00202BD2                            ; d4-d5
00202BD2                            ; ---------------------------------------------
00202BD2                            
00202BD2                            ; HexToDec_Byte:
00202BD2                            ; 		move.w	d0,d4
00202BD2                            ; 		and.w	#$FF,d4
00202BD2                            ; 		clr.w	d0
00202BD2                            ; @hexloop:
00202BD2                            ; 		sub.w	#1,d4
00202BD2                            ; 		bcs.s	@finish
00202BD2                            ; 		add.w	#1,d0
00202BD2                            ; 		move.w	d0,d5
00202BD2                            ;  		and.w	#$F,d5
00202BD2                            ; 		cmp.w	#$A,d5
00202BD2                            ; 		bcs.s	@lowbyte1
00202BD2                            ; 		add.w	#6,d0
00202BD2                            ; @lowbyte1:
00202BD2                            ; 		move.w	d0,d5
00202BD2                            ;  		and.w	#$F0,d5
00202BD2                            ; 		cmp.w	#$A0,d5
00202BD2                            ; 		bcs.s	@lowbyte2
00202BD2                            ; 		add.w	#$60,d0
00202BD2                            ; @lowbyte2:
00202BD2                            ; 		bra.s	@hexloop
00202BD2                            ; @finish:
00202BD2                            ; 		rts
00202BD2                            
00202BD2                            ; ---------------------------
00202BD2                            ; Convert HEX to DEC
00202BD2                            ; MAX: 65535 ($FFFF)
00202BD2                            ; 
00202BD2                            ; input:
00202BD2                            ; d2
00202BD2                            ; 
00202BD2                            ; output:
00202BD2                            ; d2
00202BD2                            ; Uses:
00202BD2                            ; d4 WORD (swapped)
00202BD2                            ; d5 LONG
00202BD2                            ; ---------------------------
00202BD2                            
00202BD2                            HexToDec:
00202BD2 7A00                       		moveq	#0,d5
00202BD4 4844                       		swap	d4
00202BD6                            
00202BD6 4842                       		swap	d2
00202BD8 3802                       		move.w	d2,d4
00202BDA 4842                       		swap	d2
00202BDC 4A44                       		tst.w	d4
00202BDE 6700 0000                  		beq	@jumpy
00202BE2                            		
00202BE2 3802                       		move.w	d2,d4
00202BE4 E04C                       		lsr.w	#8,d4
00202BE6 0244 000F                  		and.w	#$F,d4
00202BEA D844                       		add.w	d4,d4
00202BEC 3A3B 4000                  		move.w	@grab256(pc,d4.w),d5
00202BF0 3802                       		move.w	d2,d4
00202BF2 E04C                       		lsr.w	#8,d4
00202BF4 E44C                       		lsr.w	#2,d4
00202BF6 0244 003C                  		and.w	#%111100,d4
00202BFA DABB 4000                  		add.l	@grab4096(pc,d4.w),d5
00202BFE 6100 0000                  		bsr	@fixhexdec
00202C02 4842                       		swap	d2
00202C04 3802                       		move.w	d2,d4
00202C06 4842                       		swap	d2
00202C08 E54C                       		lsl.w	#2,d4
00202C0A 0244 003C                  		and.w	#%111100,d4
00202C0E DABB 4000                  		add.l	@grab65536(pc,d4.w),d5
00202C12 6100 0000                  		bsr	@fixhexdec
00202C16 6000 0000                  		bra	@jumpy
00202C1A                            ; --------------------------------
00202C1A 0000                       @grab256:	dc.w 0
00202C1C 0256                       		dc.w $256
00202C1E 0512                       		dc.w $512
00202C20 0768                       		dc.w $768
00202C22 1024                       		dc.w $1024
00202C24 1280                       		dc.w $1280
00202C26 1536                       		dc.w $1536
00202C28 1792                       		dc.w $1792
00202C2A 2048                       		dc.w $2048
00202C2C 2304                       		dc.w $2304
00202C2E 2560                       		dc.w $2560
00202C30 2816                       		dc.w $2816
00202C32 3072                       		dc.w $3072
00202C34 3328                       		dc.w $3328
00202C36 3584                       		dc.w $3584
00202C38 3840                       		dc.w $3840
00202C3A                            		even
00202C3A 0000 0000                  @grab4096:	dc.l 0
00202C3E 0000 4096                  		dc.l $4096
00202C42 0000 8192                  		dc.l $8192
00202C46 0001 2288                  		dc.l $12288
00202C4A 0001 6384                  		dc.l $16384
00202C4E 0002 0480                  		dc.l $20480
00202C52 0002 4576                  		dc.l $24576
00202C56 0002 8672                  		dc.l $28672
00202C5A 0003 2768                  		dc.l $32768
00202C5E 0003 6864                  		dc.l $36864
00202C62 0004 0960                  		dc.l $40960
00202C66 0004 5056                  		dc.l $45056
00202C6A 0004 9152                  		dc.l $49152
00202C6E 0005 3248                  		dc.l $53248
00202C72 0005 7344                  		dc.l $57344
00202C76 0006 1440                  		dc.l $61440
00202C7A                            		even
00202C7A 0000 0000                  @grab65536: 	dc.l 0
00202C7E 0006 5536                  		dc.l $65536
00202C82 0013 1072                  		dc.l $131072
00202C86 0019 6608                  		dc.l $196608
00202C8A 0026 2144                  		dc.l $262144
00202C8E 0032 7680                  		dc.l $327680
00202C92 0039 3216                  		dc.l $393216
00202C96 0045 8752                  		dc.l $458752
00202C9A 0052 4288                  		dc.l $524288
00202C9E 0058 9824                  		dc.l $589824
00202CA2 0065 5360                  		dc.l $655360
00202CA6 0072 0896                  		dc.l $720896
00202CAA 0078 6432                  		dc.l $786432
00202CAE 0085 1968                  		dc.l $851968
00202CB2 0091 7504                  		dc.l $917504
00202CB6 0098 3040                  		dc.l $983040
00202CBA                            		even
00202CBA                            ; --------------------------------
00202CBA                            
00202CBA                            @jumpy:
00202CBA 0802 0007                  		btst	#7,d2
00202CBE 6700                       		beq.s	@not80
00202CC0 0685 0000 0128             		add.l	#$128,d5
00202CC6 6100 0000                  		bsr	@fixhexdec
00202CCA                            @not80:
00202CCA 0282 0000 007F             		and.l	#$7F,d2
00202CD0 4A82                       		tst.l	d2
00202CD2 6700                       		beq.s	@lowrend
00202CD4 0442 0001                  		sub.w	#1,d2
00202CD8                            @lelno:
00202CD8 0685 0000 0001             		add.l	#1,d5
00202CDE 6100 0000                  		bsr	@fixhexdec
00202CE2 51CA FFF4                  		dbf	d2,@lelno
00202CE6                            @lowrend:
00202CE6 2405                       		move.l	d5,d2
00202CE8 4844                       		swap	d4
00202CEA 4E75                       		rts
00202CEC                            
00202CEC                            ; --------------------------------
00202CEC                            
00202CEC                            @fixhexdec:
00202CEC 3805                       		move.w	d5,d4
00202CEE 0244 000F                  		and.w	#$F,d4
00202CF2 0C44 000A                  		cmp.w	#$A,d4
00202CF6 6D00                       		blt.s	@lowr1
00202CF8 0685 0000 0006             		add.l	#6,d5
00202CFE                            @lowr1:
00202CFE 3805                       		move.w	d5,d4
00202D00 0244 00F0                  		and.w	#$F0,d4
00202D04 0C44 00A0                  		cmp.w	#$A0,d4
00202D08 6D00                       		blt.s	@lowr2
00202D0A 0685 0000 0060             		add.l	#$60,d5
00202D10                            @lowr2:
00202D10 3805                       		move.w	d5,d4
00202D12 0244 0F00                  		and.w	#$F00,d4
00202D16 0C44 0A00                  		cmp.w	#$A00,d4
00202D1A 6D00                       		blt.s	@lowr3
00202D1C 0685 0000 0600             		add.l	#$600,d5
00202D22                            @lowr3:
00202D22 3805                       		move.w	d5,d4
00202D24 0244 F000                  		and.w	#$F000,d4
00202D28 0C44 A000                  		cmp.w	#$A000,d4
00202D2C 6500                       		bcs.s	@lowr4
00202D2E 0685 0000 6000             		add.l	#$6000,d5
00202D34                            @lowr4:
00202D34 4845                       		swap	d5
00202D36 3805                       		move.w	d5,d4
00202D38 0244 000F                  		and.w	#$F,d4
00202D3C 0C44 000A                  		cmp.w	#$A,d4
00202D40 6500                       		bcs.s	@lowr5
00202D42 0685 0000 0006             		add.l	#$6,d5
00202D48                            @lowr5:
00202D48 3805                       		move.w	d5,d4
00202D4A 0244 00F0                  		and.w	#$F0,d4
00202D4E 0C44 00A0                  		cmp.w	#$A0,d4
00202D52 6500                       		bcs.s	@lowr6
00202D54 0685 0000 0060             		add.l	#$60,d5
00202D5A                            @lowr6:
00202D5A 3805                       		move.w	d5,d4
00202D5C 0244 0F00                  		and.w	#$F00,d4
00202D60 0C44 0A00                  		cmp.w	#$A00,d4
00202D64 6500                       		bcs.s	@lowr7
00202D66 0685 0000 0600             		add.l	#$600,d5
00202D6C                            @lowr7:
00202D6C 4845                       		swap	d5
00202D6E 4E75                       		rts
00202D6E 4E75                       		rts
00202D70                            		include	"system/input/map.asm"
00202D70                            ; ====================================================================
00202D70                            ; Input
00202D70                            ; ====================================================================
00202D70                            
00202D70                            ; ====================================================================
00202D70                            ; -------------------------------------------------
00202D70                            ; Variables
00202D70                            ; -------------------------------------------------
00202D70                            
00202D70 =00000001                  JoyUp		equ	%00000001
00202D70 =00000002                  JoyDown		equ	%00000010
00202D70 =00000004                  JoyLeft		equ	%00000100
00202D70 =00000008                  JoyRight	equ	%00001000
00202D70 =00000010                  JoyB		equ	%00010000
00202D70 =00000020                  JoyC		equ	%00100000
00202D70 =00000040                  JoyA		equ	%01000000
00202D70 =00000080                  JoyStart	equ	%10000000
00202D70 =00000000                  bitJoyUp	equ	0
00202D70 =00000001                  bitJoyDown	equ	1
00202D70 =00000002                  bitJoyLeft	equ	2
00202D70 =00000003                  bitJoyRight	equ	3
00202D70 =00000004                  bitJoyB		equ	4
00202D70 =00000005                  bitJoyC		equ	5
00202D70 =00000006                  bitJoyA		equ	6
00202D70 =00000007                  bitJoyStart	equ	7
00202D70                            
00202D70 =00000001                  JoyZ		equ	%00000001
00202D70 =00000002                  JoyY		equ	%00000010
00202D70 =00000004                  JoyX		equ	%00000100
00202D70 =00000008                  JoyMode		equ	%00001000
00202D70 =00000000                  bitJoyZ		equ	0
00202D70 =00000001                  bitJoyY		equ	1
00202D70 =00000002                  bitJoyX		equ	2
00202D70 =00000003                  bitJoyMode	equ	3
00202D70                            
00202D70                            ; --------------------------------------------
00202D70                            
00202D70                            		rsreset
00202D70 =00000000                  CtrlID		rs.b	1
00202D70 =00000001                  PadType		rs.b	1		;only TRUE $01 or FALSE $00
00202D70 =00000002                  ExOnHold	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
00202D70 =00000003                  OnHold		rs.b	1		;SACBRLDU
00202D70 =00000004                  ExOnPress	rs.b	1		;MYXZ		DONT SEPARATE (so this can be read as a word)
00202D70 =00000005                  OnPress		rs.b	1		;SACBRLDU
00202D70 =00000006                  MouseX		rs.w	1		;TODO
00202D70 =00000008                  MouseY		rs.w	1
00202D70 =0000000A                  sizeof_control	rs.l	0
00202D70                            
00202D70                            ; ====================================================================
00202D70                            ; -------------------------------------------------
00202D70                            ; RAM
00202D70                            ; -------------------------------------------------
00202D70                            
00202D70                                            rsset	RAM_Input
00202D70 =FFFFDE80                  RAM_Control_1	rs.b sizeof_control
00202D70 =FFFFDE8A                  RAM_Control_2	rs.b sizeof_control
00202D70                            
00202D70                            ; --------------------------------------------
00202D70                            
00202D70 =FFFFDE94                  sizeof_input	rs.l	0
00202D70                            ; 		inform 0,"input ram: %h",(sizeof_input-RAM_Input)
00202D70                             				
00202D70                            ; ====================================================================
00202D70                            ; -------------------------------------------------
00202D70                            ; Macros
00202D70                            ; -------------------------------------------------
00202D70                            
00202D70                            ; --------------------------------------------
00202D70                            ; --------------------------------------------
00202D70                            		include	"system/hardware/mcd/m68k/comm/calls.asm"
00202D70                            ; =====================================================================
00202D70                            ; -------------------------------------------
00202D70                            ; Calls
00202D70                            ; -------------------------------------------
00202D70                            
00202D70                            			rsset $FFFF9800
00202D70 =FFFF9800                  MD_Hint			rs.w 3
00202D70 =FFFF9806                  MD_VInt			rs.w 3
00202D70 =FFFF980C                  SubCpu_Task_Wait	rs.w 3
00202D70 =FFFF9812                  SubCpu_Task		rs.w 3
00202D70 =FFFF9818                  SubCpu_Wait		rs.w 3
00202D70 =FFFF981E                  SubCpu_Wait_Flag	rs.w 3
00202D70 =FFFF9824                  Input_Read		rs.w 3
00202D70                            
00202D70                            
00202D70                            
00202D70                            		
00202D70                            ; ====================================================================
00202D70                            ; --------------------------------------------
00202D70                            ; Code
00202D70                            ; --------------------------------------------
00202D70                            
00202D70                            MD_Main:
00202D70                            		include	"engine/modes/level/md.asm"
00202D70                            ; ====================================================================
00202D70                            ; -------------------------------------------------
00202D70                            ; Level
00202D70                            ; 
00202D70                            ; CODE ONLY
00202D70                            ; -------------------------------------------------
00202D70                            
00202D70                            ; --------------------------------------------
00202D70                            ; RAM
00202D70                            ; --------------------------------------------
00202D70                            
00202D70                            		rsset RAM_ModeBuffer
00202D70                            ;Prize data: $FF0000-$FF87FF
00202D70 =FFFFBC00                  RAM_Level	rs.b $440
00202D70 =FFFFC040                  RAM_ObjectSys	rs.b $1B80
00202D70 =FFFFDBC0                  sizeof_lvl	rs.l 0
00202D70                            ;       		inform 0,"Level mode uses: %h",(sizeof_lvl-RAM_ModeBuffer)
00202D70                            		
00202D70                            ; --------------------------------------------
00202D70                            ; Init
00202D70                            ; --------------------------------------------
00202D70                            
00202D70                            mode_Level:
00202D82 46FC 2700                  		move.w	#$2700,sr
00202D86 4279 FFFF DC06             		clr.w	(RAM_CurrLevel)
00202D8C 6100 D2D4                  		bsr	Video_ClearAll
00202D90                            		
00202D90                            ; --------------
00202D90                            ; Load resources
00202D90                            ; --------------
00202D90                            
00202D90 41F9 0000 0000             		lea	(Pal_LvlCoinItms),a0
00202D96 43F9 FFFF EA10             		lea	(RAM_PalFade+$40),a1
00202D9C 303C 000F                  		move.w	#16-1,d0
00202DA0                            @copyextpal:
00202DA0 32D8                       		move.w	(a0)+,(a1)+
00202DA2 51C8 FFFC                  		dbf	d0,@copyextpal
00202DA6                            		
00202DA6 41F9 0000 0000             		lea	(Pal_Player),a0
00202DAC 303C 000F                  		move.w	#16-1,d0
00202DB0                            @copychrpal:
00202DB0 32D8                       		move.w	(a0)+,(a1)+
00202DB2 51C8 FFFC                  		dbf	d0,@copychrpal
00202DB6                            		
00202DB6                            		;Same art for everything
00202DB6 41F9 0000 0000             		lea	(Art_Lvl_Test),a0
00202DBC 23FC 4000 0000 00C0 0004   		move.l	#$40000000,(vdp_ctrl)
00202DC6 303C 0000                  		move.w	#((Art_Lvl_Test_e-Art_Lvl_Test)/4)-1,d0
00202DCA                            @copy_art:
00202DCA 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
00202DD0 51C8 FFF8                  		dbf	d0,@copy_art
00202DD4                            		
00202DD4 41F9 0000 0000             		lea	(Art_LvlBG_Test),a0
00202DDA 23FC 7800 0000 00C0 0004   		move.l	#$78000000,(vdp_ctrl)
00202DE4 303C 0000                  		move.w	#((Art_LvlBG_Test_e-Art_LvlBG_Test)/4)-1,d0
00202DE8                            @dobgart:
00202DE8 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
00202DEE 51C8 FFF8                  		dbf	d0,@dobgart
00202DF2                               				
00202DF2 6100 0000                  		bsr	Level_Init
00202DF6 43F9 0000 0000                		lea	(artdata_Level_Test),a1
00202DFC 6100 0000                     		bsr	Level_LoadArtList
00202E00                            
00202E00                            ; **************
00202E00                            ; DEBUG ONLY
00202E00                            ; **************
00202E00                            
00202E00 23FC 5000 0003 00C0 0004   		move.l	#$50000003,(vdp_ctrl)
00202E0A 41F9 0000 0000             		lea	(Art_DebugFont),a0
00202E10 303C 0000                  		move.w	#((Art_DebugFont_e-Art_DebugFont)/4)-1,d0
00202E14                            @dbg_loop:
00202E14 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
00202E1A 51C8 FFF8                  		dbf	d0,@dbg_loop
00202E1E                            		
00202E1E                            ;    		move.l	#$40800001,(vdp_ctrl)		
00202E1E                            ;    		move.l	#$17100000,(vdp_data)
00202E1E                            ;    		move.l	#$71700000,(vdp_data)
00202E1E                            ;    		move.l	#$17100000,(vdp_data)
00202E1E                            ;      		move.w	#1,(RAM_CurrLevel)
00202E1E                                 		
00202E1E                            ;      		if MCD=0
00202E1E                            ;  		move.l	#TEST_IT,d0
00202E1E                            ;  		moveq 	#7,d1
00202E1E                            ;  		moveq	#0,d2
00202E1E                            ;   		bsr	Audio_Track_play
00202E1E                            ;   		endif
00202E1E                            		
00202E1E                            ; --------------
00202E1E                            ; Restart
00202E1E                            ; --------------
00202E1E                            
00202E1E                            @restart:
00202E1E 6100 D29A                  		bsr	Video_ClearScroll
00202E22 6100 D254                  		bsr	Video_ClearSprites
00202E26 6100 0000                    		bsr	Objects_Init
00202E2A 6100 0000                  		bsr	Level_FromList
00202E2E 6100 0000                    		bsr	Level_Draw
00202E32 6100 0000                     		bsr	Level_Run
00202E36                               		
00202E36 41F9 0000 0000             		lea	(Map_LvlBG_Test),a0
00202E3C 7001                        		moveq	#1,d0
00202E3E 223C 0000 0000              		move.l	#$00000000,d1
00202E44 243C 003F 001F                		move.l	#$003F001F,d2
00202E4A 363C 21C0                     		move.w	#$21C0,d3
00202E4E 6100 D3E8                     		bsr	Video_MakeMap
00202E52                               		
00202E52 203C 0000 0000               		move.l	#Music_Level1,d0
00202E58 7201                         		moveq 	#1,d1
00202E5A 7400                         		moveq	#0,d2
00202E5C 6100 D8B2                    		bsr	Audio_Track_play
00202E60                              		
00202E60 46FC 2000                   		move.w	#$2000,sr
00202E64                             		
00202E64 6100 0000                    		bsr	Objects_Run
00202E68                            ; 		bsr	Level_DbgInit
00202E7A                             		
00202E7A                            ; --------------------------------------------
00202E7A                            ; Loop
00202E7A                            ; --------------------------------------------
00202E7A                            
00202E7A                            @loop:
00202E7A 6100 D444                   		bsr	Video_vsync
00202E7E                             		
00202E7E 6100 0000                     		bsr	Level_BlockUpd	
00202E82 6100 0000                    		bsr	Objects_Run
00202E86 6100 0000                     		bsr	Level_Run
00202E8A                            ;    		bsr	Level_Debug
00202E8A                            		
00202E8A                            ; -----------------------------------------
00202E8A                            
00202E8A 0839 0007 FFFF DE85        		btst	#bitJoyStart,(RAM_Control_1+OnPress)
00202E92 6700                        		beq.s	@ignore_st
00202E94 4239 FFFF DE4F              		clr.b	(RAM_GameMode)
00202E9A 4E75                        		rts
00202E9C                            @ignore_st:
00202E9C                            ; 		btst	#bitJoyA,(RAM_Control_2+OnHold)
00202E9C                            ;  		beq.s	@ignore_d
00202E9C                            ;  		move.b	#1,(RAM_ModeReset)
00202E9C                            ;   		add.w	#1,(RAM_CurrLevel)
00202E9C                            ; 
00202E9C                            ; @ignore_d:
00202E9C 4A39 FFFF DE4C             		tst.b	(RAM_ModeReset)
00202EA2 6700 FFD6                  		beq	@loop
00202EA6 4239 FFFF DE4C             		clr.b	(RAM_ModeReset)
00202EAC                            		
00202EAC 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
00202EB2 6700                       		beq.s	@gameover
00202EC6 46FC 2700                   		move.w	#$2700,sr
00202ECA 6000 FF52                   		bra	@Restart
00202ECE                            
00202ECE                            ; --------------------------------------------
00202ECE                            ; Game Over
00202ECE                            ; --------------------------------------------
00202ECE                            
00202ECE                            @gameover:
00202ECE 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
00202ED4 4E75                       		rts
00202ED6                            		
00202ED6                            ; ====================================================================
00202ED6                            ; --------------------------------------------
00202ED6                            ; Subs
00202ED6                            ; --------------------------------------------
00202ED6                            
00202ED6                            Level_DbgInit:
00202ED6                            ; 		move.w	#$EEE,(RAM_PalFade+$42)
00202ED6 41FA 0000                  		lea	ascDebugTop(pc),a0
00202EDA 7002                       		moveq	#2,d0
00202EDC 223C 0000 0000             		move.l	#$00000000,d1
00202EE2 343C 0680                  		move.w	#$680,d2
00202EE6 6100 D3A6                  		bsr	Video_PrintText
00202EEA                            		
00202EEA 23FC 9100 9201 00C0 0004   		move.l	#$91009201,(vdp_ctrl)
00202EF4                            		
00202EF4                            Level_Debug:
00202EF4                            ;  		moveq	#2,d0
00202EF4                            ; 		move.l	#$00060000,d1
00202EF4                            ; 		moveq	#0,d2
00202EF4                            ; 		move.w	(RAM_P1_Coins),d2
00202EF4                            ; 		move.w	#$680,d3
00202EF4                            ; 		moveq	#4,d4
00202EF4                            ; 		bsr	Video_PrintVal
00202EF4                            ; 
00202EF4                            ;  		moveq	#2,d0
00202EF4                            ; 		move.l	#$000F0000,d1
00202EF4                            ; 		moveq	#0,d2
00202EF4                            ; 		move.w	(RAM_P1_Hits),d2
00202EF4                            ; 		move.w	#$680,d3
00202EF4                            ; 		moveq	#4,d4
00202EF4                            ; 		bsr	Video_PrintVal
00202EF4                            
00202EF4 7002                        		moveq	#2,d0
00202EF6 223C 001B 0000             		move.l	#$001B0000,d1
00202EFC 2439 0000 0000             		move.l	(RAM_ObjBuffer+obj_y_spd),d2
00202F02 363C 0680                  		move.w	#$680,d3
00202F06 7802                       		moveq	#2,d4
00202F08 6100 D2C2                  		bsr	Video_PrintVal
00202F0C                            		
00202F0C 7002                        		moveq	#2,d0
00202F0E 223C 0018 0000             		move.l	#$00180000,d1
00202F14 7400                       		moveq	#0,d2
00202F16 1439 0000 0000             		move.b	(RAM_ObjBuffer+obj_col),d2
00202F1C 363C 0680                  		move.w	#$680,d3
00202F20 7800                       		moveq	#0,d4
00202F22 6100 D2A8                  		bsr	Video_PrintVal
00202F26                            		
00202F26 7002                        		moveq	#2,d0
00202F28 223C 000C 0000             		move.l	#$000C0000,d1
00202F2E 7400                       		moveq	#0,d2
00202F30 1439 0000 0000             		move.b	(RAM_ObjBuffer+obj_status),d2
00202F36 363C 0680                  		move.w	#$680,d3
00202F3A 7800                       		moveq	#0,d4
00202F3C 6000 D28E                  		bra	Video_PrintVal
00202F40                            		
00202F40                            ; -----------------------
00202F40                            
00202F40                            Level_FromList:
00202F40 3039 FFFF DC06             		move.w	(RAM_CurrLevel),d0
00202F46 E948                       		lsl.w	#4,d0
00202F48 49F9 0000 0000             		lea	(LevelList),a4
00202F4E 2074 0000                  		movea.l	(a4,d0.w),a0
00202F52 6100 0000                  		bsr	Level_Load
00202F56 43F9 0000 0000             		lea	(RAM_LvlPlanes),a1
00202F5C 1374 0000 0000             		move.b	(a4,d0.w),lvl_type(a1)
00202F62                            		
00202F62 41F9 0000 0000             		lea	(Pal_LvlMain_Gray),a0
00202F68 43F9 FFFF E9D0             		lea	(RAM_PalFade),a1
00202F6E 7000                       		moveq	#0,d0
00202F70 303C 001F                  		move.w	#32-1,d0
00202F74                            @copy_pal:
00202F74 32D8                       		move.w	(a0)+,(a1)+
00202F76 51C8 FFFC                  		dbf	d0,@copy_pal
00202F7A                            		
00202F7A 3239 FFFF DC06             		move.w	(RAM_CurrLevel),d1
00202F80 E949                       		lsl.w	#4,d1
00202F82                            		
00202F82 7000                       		moveq	#0,d0
00202F84 3034 1008                   		move.w	8(a4,d1.w),d0
00202F88 4840                        		swap	d0
00202F8A 3034 100A                     		move.w	$A(a4,d1.w),d0
00202F8E 4239 0000 0000                 		clr.b	(RAM_ObjBuffer+obj_index)
00202F94 23FC 0000 0000 0000 0000       		move.l	#Obj_Player,(RAM_ObjBuffer)
00202F9E 6100 0000                      		bsr	Plyr_SetStartPos
00202FA2                            		
00202FA2 3239 FFFF DC06             		move.w	(RAM_CurrLevel),d1
00202FA8 E949                       		lsl.w	#4,d1
00202FAA 43F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*4)),a1
00202FB0 3374 100C 0000              		move.w	$C(a4,d1.w),obj_x(a1)
00202FB6 3374 100E 0000                		move.w	$E(a4,d1.w),obj_y(a1)
00202FBC 237C 0000 0000 0000        		move.l	#Obj_EndFlag,obj_code(a1)
00202FC4 43F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*6)),a1	
00202FCA 237C 0000 0000 0000        		move.l	#Obj_HudInfo,obj_code(a1)
00202FD2 337C 0000 0000             		move.w	#0,obj_x(a1)
00202FD8 337C 0000 0000             		move.w	#0,obj_y(a1)
00202FDE 4E75                       		rts
00202FE0                            		
00202FE0 6F62 6A5F 7374 6174 7573+  ascDebugTop:	dc.b "obj_status: 00 obj_col: 00              ",0
00203009                            ; 		dc.b "                              00000000",0
0020300A 00                         		even
0020300A                            		
0020300A                            ; --------------------------------------------
0020300A                            
0020300A                            		include	"engine/modes/level/subs/level.asm"
0020300A                            ; ====================================================================
0020300A                            ; ---------------------------------------------
0020300A                            ; Level system
0020300A                            ; ---------------------------------------------
0020300A                            
0020300A                            ; *** NOTES ***
0020300A                            ; MAX Prize size: $7FFF
0020300A                            
0020300A                            ; --------------------------------------------
0020300A                            ; Variables
0020300A                            ; --------------------------------------------
0020300A                            
0020300A                            		rsreset
0020300A =00000000                  lvl_objects	rs.l 1
0020300A =00000004                  lvl_blocks	rs.l 1
0020300A =00000008                  lvl_przblocks	rs.l 1
0020300A =0000000C                  lvl_layout	rs.l 1
0020300A =00000010                  lvl_hilayout	rs.l 1
0020300A =00000014                  lvl_collision	rs.l 1
0020300A =00000018                  lvl_prizes	rs.l 1
0020300A =0000001C                  lvl_x		rs.l 1
0020300A =00000020                  lvl_y		rs.l 1
0020300A =00000024                  lvl_x_camspd	rs.l 1
0020300A =00000028                  lvl_y_camspd	rs.l 1
0020300A =0000002C                  lvl_timer	rs.l 1
0020300A =00000030                  lvl_size_x	rs.w 1
0020300A =00000032                  lvl_size_y	rs.w 1
0020300A =00000034                  lvl_maxcam_x	rs.w 1
0020300A =00000036                  lvl_maxcam_y	rs.w 1
0020300A =00000038                  lvl_camflags	rs.w 1
0020300A =0000003A                  lvl_flags	rs.w 1
0020300A =0000003C                  lvl_type	rs.w 1
0020300A =0000003E                  lvl_lastx	rs.w 1
0020300A =00000040                  lvl_lasty	rs.w 1
0020300A =00000042                  sizeof_lvlpln	rs.l 0
0020300A                            
0020300A                            ; --------------------------------------------
0020300A                            
0020300A =00000046                  max_lvlobj	equ	70
0020300A                            
0020300A =00000000                  bitLvlDirR	equ	0
0020300A =00000001                  bitLvlDirL	equ	1
0020300A =00000002                  bitLvlDirD	equ	2
0020300A =00000003                  bitLvlDirU	equ	3
0020300A =00000004                  bitLvlDontUpd	equ	4
0020300A                            
0020300A                            ; RAM_LevelPrizes	equ	$FF0000
0020300A                            
0020300A                            ; --------------------------------------------
0020300A                            ; RAM
0020300A                            ; --------------------------------------------
0020300A                            
0020300A                            		rsset RAM_Level
0020300A =FFFFBC00                  RAM_LvlPlanes	rs.b sizeof_lvlpln
0020300A =FFFFBC42                  RAM_LevelObjPos	rs.w (max_lvlobj)*5
0020300A =FFFFBEFE                  RAM_LvlAnim	rs.w 16
0020300A =FFFFBF1E                  RAM_PrizeHide	rs.w 1+(2*16)
0020300A =FFFFBF60                  RAM_PrizeShow	rs.w 1+(2*16)
0020300A =FFFFBFA2                  RAM_PrizeUsed	rs.w 1+(2*16)
0020300A                            
0020300A =FFFFBFE4                  sizeof_lvl2	rs.l 0
0020300A                            ;    		inform 0,"Level system uses: %h",(sizeof_lvl2-RAM_Level)
0020300A                            		
0020300A                            ; ====================================================================	
0020300A                            ; --------------------------------------------
0020300A                            ; Init
0020300A                            ; --------------------------------------------
0020300A                            
0020300A                            Level_Init:
0020300A 4279 FFFF DC02             		clr.w	(RAM_P1_Coins)
00203010 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
00203016 6600                       		bne.s	@firsttime
00203018 33FC 0003 FFFF DC00        		move.w	#3,(RAM_P1_Lives)
00203020                            @firsttime:
00203020 13FC 0003 FFFF ED1B          		move.b	#%11,(RAM_VidRegs+$B)		; H: line V: full
00203028                            ;      		move.b	#%10000111,(RAM_VidRegs+$C)	; H40 + Double interlace
00203028 13FC 0001 FFFF ED20          		move.b	#1,(RAM_VidRegs+$10)		; 512x256 layer size
00203030 6100 D0B6                    		bsr	Video_Update
00203034                             		
00203034 41F9 0000 0000             		lea	(Art_LvlPrizes),a0
0020303A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,(vdp_ctrl)
00203044 303C 0000                  		move.w	#((Art_LvlPrizes_e-Art_LvlPrizes)/4)-1,d0
00203048                            @doprzart:
00203048 23D8 00C0 0000             		move.l	(a0)+,(vdp_data)
0020304E 51C8 FFF8                  		dbf	d0,@doprzart
00203052                            		
00203052                            ; 		move.w	#-1,(RAM_LvlPlanes+lvl_lastx)b
00203052                            ; 		move.w	#-1,(RAM_LvlPlanes+lvl_lasty)		
00203052 4E75                       		rts
00203054                            		
00203054                            ; ====================================================================		
00203054                            ; --------------------------------------------
00203054                            ; Loop
00203054                            ; --------------------------------------------
00203054                            
00203054                            Level_Run:
00203054 4DF9 FFFF BC00             		lea	(RAM_LvlPlanes),a6
0020305A                            		
0020305A 6100 0000                   		bsr	Lvl_RefreshObj
0020305E 6100 0000                  		bsr	Lvl_DrawScrl
00203062 6100 0000                  		bsr	Lvl_Animation
00203066 6000 0000                  		bra	Lvl_Deform
0020306A                            		
0020306A                            ; -----------------------------------
0020306A                             
0020306A                            Level_BlockUpd:
0020306A 4DF9 FFFF BC00             		lea	(RAM_LvlPlanes),a6
00203070 4BF9 FFFF BF1E             		lea	(RAM_PrizeHide),a5
00203076 3C15                       		move.w	(a5),d6
00203078 425D                       		clr.w	(a5)+
0020307A 4A46                       		tst.w	d6
0020307C 6700                       		beq.s	@skip_hide
0020307E 0446 0001                  		sub.w	#1,d6
00203082                            @next_hide:
00203082 2015                       		move.l	(a5),d0
00203084 6100 0000                   		bsr	Lvl_DoHidePrz
00203088 429D                        		clr.l	(a5)+
0020308A 51CE FFF6                   		dbf	d6,@next_hide
0020308E                            @skip_hide:
0020308E                            
0020308E 4BF9 FFFF BF60             		lea	(RAM_PrizeShow),a5
00203094 3C15                       		move.w	(a5),d6
00203096 425D                       		clr.w	(a5)+
00203098 4A46                       		tst.w	d6
0020309A 6700                       		beq.s	@skip_show
0020309C 0446 0001                  		sub.w	#1,d6
002030A0                            @next_show:
002030A0 2015                       		move.l	(a5),d0
002030A2 6100 0000                   		bsr	Lvl_DoShowPrz
002030A6 429D                        		clr.l	(a5)+
002030A8 51CE FFF6                   		dbf	d6,@next_show
002030AC                            @skip_show:
002030AC                            		
002030AC 4E75                       		rts
002030AE                            		
002030AE                            ; ====================================================================
002030AE                            ; --------------------------------------------
002030AE                            ; Subs
002030AE                            ; --------------------------------------------
002030AE                            
002030AE                            Lvl_DrawScrl:
002030AE                            
002030AE                            ; -----------------------------------
002030AE                            ; RIGHT
002030AE                            ; -----------------------------------
002030AE                            
002030AE 302E 003E                  		move.w	lvl_lastx(a6),d0
002030B2 322E 001C                  		move.w	lvl_x(a6),d1
002030B6 B240                       		cmp.w	d0,d1
002030B8 6700 0000                  		beq	@dontupdL
002030BC 3D41 003E                  		move.w	d1,lvl_lastx(a6)
002030C0                            		
002030C0 082E 0000 003A             		btst	#bitLvlDirR,lvl_flags(a6)
002030C6 6700 0000                  		beq	@dontupdR
002030CA 08AE 0000 003A             		bclr	#bitLvlDirR,lvl_flags(a6)
002030D0 303C 4000                  		move.w	#$4000,d0
002030D4 2A6E 000C                  		movea.l	lvl_layout(a6),a5
002030D8 286E 0010                  		movea.l lvl_hilayout(a6),a4
002030DC 266E 0018                  		movea.l	lvl_prizes(a6),a3
002030E0                            		
002030E0 382E 0020                  		move.w	lvl_y(a6),d4
002030E4 3404                       		move.w	d4,d2
002030E6 E84A                       		lsr.w	#4,d2
002030E8 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
002030EC DAC2                        		adda	d2,a5
002030EE D8C2                        		adda 	d2,a4
002030F0 D6C2                        		adda	d2,a3
002030F2                             		
002030F2 3604                        		move.w	d4,d3
002030F4 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
002030F8 0644 0150                  		add.w	#$150,d4
002030FC 3204                       		move.w	d4,d1
002030FE E849                       		lsr.w	#4,d1
00203100 DAC1                        		adda	d1,a5
00203102 D8C1                        		adda 	d1,a4
00203104 D6C1                        		adda	d1,a3
00203106                            
00203106 E44C                       		lsr.w	#2,d4
00203108 0244 007C                  		and.w	#$7C,d4
0020310C E94B                       		lsl.w	#4,d3			; VDP YPOS
0020310E 0243 0F00                  		and.w	#$F00,d3
00203112 D843                       		add.w	d3,d4
00203114 8840                       		or.w	d0,d4
00203116 4844                       		swap	d4
00203118 383C 0003                   		move.w	#3,d4
0020311C                             		
0020311C 363C 000F                   		move.w	#$F,d3
00203120                            ;   		move.l	#$00010001,d1
00203120                            @nextblkR:
00203120 7000                       		moveq	#0,d0
00203122 246E 0004                  		movea.l	lvl_blocks(a6),a2
00203126 1013                       		move.b	(a3),d0
00203128 4A00                        		tst.b	d0
0020312A 6700                        		beq.s	@noPrzR
0020312C 0800 0007                   		btst	#7,d0
00203130 6600                        		bne.s	@noPrzR
00203132 0240 007F                   		and.w	#$7F,d0
00203136 246E 0008                  		movea.l	lvl_przblocks(a6),a2
0020313A 6000                       		bra.s	@hasprzR
0020313C                            @noPrzR:
0020313C 1015                       		move.b	(a5),d0
0020313E 4A14                       		tst.b 	(a4)
00203140 6700                       		beq.s 	@hasprzR
00203142 1014                       		move.b 	(a4),d0
00203144                            @hasprzR:
00203144                            		
00203144 E748                       		lsl.w	#3,d0
00203146 3232 0002                  		move.w	2(a2,d0.w),d1
0020314A 4841                       		swap	d1
0020314C 3232 0000                  		move.w	(a2,d0.w),d1
00203150 3432 0006                   		move.w	6(a2,d0.w),d2
00203154 4842                        		swap	d2
00203156 3432 0004                   		move.w	4(a2,d0.w),d2
0020315A                            
0020315A 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00203160 0684 0080 0000              		add.l	#$00800000,d4
00203166 0284 4FFE 0003               		and.l	#$4FFE0003,d4
0020316C                              		
0020316C 4843                         		swap	d3
0020316E 1639 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d3
00203174 0243 0006                   		and.w	#%110,d3
00203178 6700                        		beq.s	@dontShftV_R
0020317A E249                        		lsr.w	#1,d1
0020317C E24A                        		lsr.w	#1,d2
0020317E                            @dontShftV_R:
0020317E 4843                       		swap	d3
00203180 4A14                       		tst.b 	(a4)
00203182 6700                       		beq.s 	@nohiprioR
00203184 0041 8000                  		or.w 	#$8000,d1
00203188 0042 8000                  		or.w 	#$8000,d2
0020318C                            @nohiprioR:
0020318C 33C1 00C0 0000              		move.w	d1,(vdp_data)
00203192 33C2 00C0 0000              		move.w	d2,(vdp_data)
00203198                             		
00203198 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
0020319E 0241 0006                   		and.w	#%110,d1
002031A2 6600                        		bne.s	@dontupdR_2
002031A4                             		
002031A4 4841                        		swap	d1
002031A6 4842                        		swap	d2
002031A8 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
002031AE 0684 0080 0000              		add.l	#$00800000,d4
002031B4 0284 4FFE 0003               		and.l	#$4FFE0003,d4
002031BA 4A14                         		tst.b 	(a4)
002031BC 6700                       		beq.s 	@nohiprioR_2
002031BE 0041 8000                  		or.w 	#$8000,d1
002031C2 0042 8000                  		or.w 	#$8000,d2
002031C6                            @nohiprioR_2:
002031C6 33C1 00C0 0000              		move.w	d1,(vdp_data)
002031CC 33C2 00C0 0000              		move.w	d2,(vdp_data)
002031D2                             		
002031D2                            @dontupdR_2:
002031D2 DAEE 0030                   		add.w	lvl_size_x(a6),a5
002031D6 D8EE 0030                   		add.w 	lvl_size_x(a6),a4
002031DA D6EE 0030                   		add.w	lvl_size_x(a6),a3
002031DE 51CB FF40                  		dbf	d3,@nextblkR
002031E2                            @dontupdR:
002031E2                            	
002031E2                            ; -----------------------------------
002031E2                            ; LEFT
002031E2                            ; -----------------------------------
002031E2                            
002031E2 082E 0001 003A             		btst	#bitLvlDirL,lvl_flags(a6)
002031E8 6700 0000                  		beq	@dontupdL
002031EC 08AE 0001 003A             		bclr	#bitLvlDirL,lvl_flags(a6)
002031F2 303C 4000                  		move.w	#$4000,d0
002031F6 2A6E 000C                  		movea.l	lvl_layout(a6),a5
002031FA 286E 0010                  		movea.l lvl_hilayout(a6),a4
002031FE 266E 0018                  		movea.l	lvl_prizes(a6),a3
00203202                            		
00203202 382E 0020                  		move.w	lvl_y(a6),d4
00203206 3404                       		move.w	d4,d2
00203208 E84A                       		lsr.w	#4,d2
0020320A C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
0020320E DAC2                        		adda	d2,a5
00203210 D8C2                        		adda	d2,a4
00203212 D6C2                        		adda	d2,a3
00203214 3604                        		move.w	d4,d3
00203216                             		
00203216 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
0020321A 0444 0010                       		sub.w	#$010,d4		; TODO CHECAR SI FUNCIONA BIEN
0020321E 3204                       		move.w	d4,d1
00203220 E849                       		lsr.w	#4,d1
00203222 DAC1                        		adda	d1,a5
00203224 D8C1                        		adda	d1,a4
00203226 D6C1                        		adda	d1,a3
00203228                             		
00203228 E44C                       		lsr.w	#2,d4
0020322A 0244 007C                  		and.w	#$7C,d4
0020322E E94B                       		lsl.w	#4,d3			; VDP YPOS
00203230 0243 0F00                  		and.w	#$F00,d3
00203234 D843                       		add.w	d3,d4
00203236 8840                       		or.w	d0,d4
00203238 4844                       		swap	d4
0020323A 383C 0003                   		move.w	#3,d4
0020323E                             		
0020323E 363C 000F                   		move.w	#$F,d3
00203242                            ;  		move.l	#$00010001,d1
00203242                            @nextblkL:
00203242 7000                       		moveq	#0,d0
00203244 246E 0004                  		movea.l	lvl_blocks(a6),a2
00203248 1013                       		move.b	(a3),d0
0020324A 4A00                        		tst.b	d0
0020324C 6700                        		beq.s	@noPrzL
0020324E 0800 0007                   		btst	#7,d0
00203252 6600                        		bne.s	@noPrzL
00203254 0240 007F                   		and.w	#$7F,d0
00203258 246E 0008                  		movea.l	lvl_przblocks(a6),a2
0020325C 6000                       		bra.s	@hasprzL
0020325E                            @noPrzL:
0020325E 1015                       		move.b	(a5),d0
00203260 4A14                       		tst.b 	(a4)
00203262 6700                       		beq.s 	@hasprzL
00203264 1014                       		move.b 	(a4),d0
00203266                            @hasprzL:
00203266 E748                       		lsl.w	#3,d0
00203268 3232 0002                  		move.w	2(a2,d0.w),d1
0020326C 4841                       		swap	d1
0020326E 3232 0000                  		move.w	(a2,d0.w),d1
00203272 3432 0006                   		move.w	6(a2,d0.w),d2
00203276 4842                        		swap	d2
00203278 3432 0004                   		move.w	4(a2,d0.w),d2
0020327C                            
0020327C 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
00203282 0684 0080 0000              		add.l	#$00800000,d4
00203288 0284 4FFE 0003               		and.l	#$4FFE0003,d4
0020328E                              		
0020328E 4843                         		swap	d3
00203290 1639 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d3
00203296 0243 0006                   		and.w	#%110,d3
0020329A 6700                        		beq.s	@dontShftV_L
0020329C E249                        		lsr.w	#1,d1
0020329E E24A                        		lsr.w	#1,d2
002032A0                            @dontShftV_L:
002032A0 4843                       		swap	d3
002032A2 4A14                       		tst.b 	(a4)
002032A4 6700                       		beq.s 	@nohiprioL
002032A6 0041 8000                  		or.w	#$8000,d1
002032AA 0042 8000                  		or.w 	#$8000,d2
002032AE                            @nohiprioL:
002032AE 33C1 00C0 0000              		move.w	d1,(vdp_data)
002032B4 33C2 00C0 0000              		move.w	d2,(vdp_data)
002032BA                             		
002032BA 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
002032C0 0241 0006                   		and.w	#%110,d1
002032C4 6600                        		bne.s	@dontupdL_2
002032C6                             		
002032C6 4841                        		swap	d1
002032C8 4842                        		swap	d2
002032CA 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
002032D0 0684 0080 0000              		add.l	#$00800000,d4
002032D6 0284 4FFE 0003               		and.l	#$4FFE0003,d4
002032DC 4A14                       		tst.b 	(a4)
002032DE 6700                       		beq.s 	@nohiprioL_2
002032E0 0041 8000                  		or.w	#$8000,d1
002032E4 0042 8000                  		or.w 	#$8000,d2
002032E8                            @nohiprioL_2:
002032E8 33C1 00C0 0000              		move.w	d1,(vdp_data)
002032EE 33C2 00C0 0000              		move.w	d2,(vdp_data)
002032F4                             		
002032F4                            @dontupdL_2:
002032F4 DAEE 0030                   		add.w	lvl_size_x(a6),a5
002032F8 D8EE 0030                   		add.w	lvl_size_x(a6),a4
002032FC D6EE 0030                   		add.w	lvl_size_x(a6),a3
00203300 51CB FF40                  		dbf	d3,@nextblkL
00203304                            @dontupdL:
00203304                            
00203304                            ; -----------------------------------
00203304                            ; DOWN
00203304                            ; -----------------------------------
00203304                            
00203304 302E 0040                  		move.w	lvl_lasty(a6),d0
00203308 322E 0020                  		move.w	lvl_y(a6),d1
0020330C B240                       		cmp.w	d0,d1
0020330E 6700 0000                  		beq	@dontupdU
00203312 3D41 0040                  		move.w	d1,lvl_lasty(a6)
00203316                            		
00203316 082E 0002 003A             		btst	#bitLvlDirD,lvl_flags(a6)
0020331C 6700 0000                  		beq	@dontupdD
00203320 08AE 0002 003A             		bclr	#bitLvlDirD,lvl_flags(a6)
00203326                            			
00203326 2A6E 000C                  		movea.l	lvl_layout(a6),a5
0020332A 286E 0010                  		movea.l lvl_hilayout(a6),a4
0020332E 266E 0018                  		movea.l	lvl_prizes(a6),a3
00203332                            
00203332 382E 0020                  		move.w	lvl_y(a6),d4
00203336 303C 4000                  		move.w	#$4000,d0
0020333A 0644 00E0                  		add.w	#$0E0,d4
0020333E 3404                       		move.w	d4,d2
00203340 E84A                       		lsr.w	#4,d2
00203342 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
00203346 DAC2                        		adda	d2,a5
00203348 D8C2                        		adda	d2,a4
0020334A D6C2                        		adda	d2,a3
0020334C 3604                        		move.w	d4,d3
0020334E                            
0020334E 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
00203352 3404                       		move.w	d4,d2
00203354 3204                       		move.w	d4,d1
00203356 E849                       		lsr.w	#4,d1
00203358 DAC1                        		adda	d1,a5
0020335A D8C1                        		adda 	d1,a4
0020335C D6C1                        		adda	d1,a3
0020335E E44C                       		lsr.w	#2,d4
00203360 0244 007C                  		and.w	#$7C,d4
00203364 E94B                       		lsl.w	#4,d3			; VDP YPOS
00203366 0243 0F00                  		and.w	#$F00,d3
0020336A 8843                       		or.w	d3,d4
0020336C 8840                       		or.w	d0,d4
0020336E 4844                       		swap	d4
00203370 383C 0003                   		move.w	#3,d4
00203374                            
00203374 363C 0015                   		move.w	#$15,d3
00203378                            ;  		move.l	#$00010001,d1
00203378 2A04                        		move.l	d4,d5
0020337A 0285 4F80 0003              		and.l	#$4F800003,d5
00203380 0284 007E 0000              		and.l	#$007E0000,d4
00203386                            @nextblkD:
00203386                            
00203386 7000                       		moveq	#0,d0
00203388 246E 0004                  		movea.l	lvl_blocks(a6),a2
0020338C 1013                       		move.b	(a3),d0
0020338E 4A00                       		tst.b	d0
00203390 6700                       		beq.s	@noPrzD
00203392 0800 0007                  		btst	#7,d0
00203396 6600 0000                  		bne	@noPrzD
0020339A 0240 007F                  		and.w	#$7F,d0
0020339E 246E 0008                  		movea.l	lvl_przblocks(a6),a2
002033A2 6000                       		bra.s	@hasprzD
002033A4                            @noPrzD:
002033A4 1015                       		move.b	(a5),d0
002033A6 4A14                       		tst.b 	(a4)
002033A8 6700                       		beq.s 	@hasprzD
002033AA 1014                       		move.b 	(a4),d0
002033AC                            @hasprzD:
002033AC                            
002033AC                            
002033AC                            ; 		moveq	#0,d0
002033AC                            ; 		movea.l	lvl_przblocks(a6),a2
002033AC                            ; 		move.b	(a3),d0
002033AC                            ; 		tst.b	d0
002033AC                            ; 		bne.s	@hasprzD
002033AC                            ; 		movea.l	lvl_blocks(a6),a2
002033AC                            ; 		move.b	(a5),d0
002033AC                            ; 		tst.b 	(a4)
002033AC                            ; 		beq.s 	@hasprzD
002033AC                            ; 		move.b	(a4),d0
002033AC                            ; @hasprzD:
002033AC E748                       		lsl.w	#3,d0
002033AE                            		
002033AE 3232 0000                  		move.w	(a2,d0.w),d1
002033B2 4841                       		swap	d1
002033B4 3232 0004                  		move.w	4(a2,d0.w),d1
002033B8 3432 0002                   		move.w	2(a2,d0.w),d2
002033BC 4842                        		swap	d2
002033BE 3432 0006                   		move.w	6(a2,d0.w),d2
002033C2                             		
002033C2 8885                       		or.l	d5,d4
002033C4 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
002033CA                             		
002033CA                            *  		move.b	(RAM_VidRegs+$C),d2
002033CA                            *  		and.w	#%110,d2
002033CA                            *  		beq.s	@dontshftD
002033CA                            *  		swap 	d1
002033CA                            *  		move.w	d1,d2
002033CA                            *  		and.w	#$7FF,d2
002033CA                            *  		and.w	#$F800,d1
002033CA                            *  		lsr.w	#1,d2
002033CA                            *  		or.w	d2,d1
002033CA                            *  		swap 	d1
002033CA                            *  		move.w	d1,d2
002033CA                            *  		and.w	#$7FF,d2
002033CA                            *  		and.w	#$F800,d1
002033CA                            *  		lsr.w	#1,d2
002033CA                            *  		or.w	d2,d1
002033CA                            *  		
002033CA                            * @dontshftD:
002033CA                             		
002033CA 4A14                         		tst.b 	(a4)
002033CC 6700                        		beq.s	@nohiprioD
002033CE 0081 8000 8000              		or.l	#$80008000,d1
002033D4                            @nohiprioD:
002033D4 23C1 00C0 0000              		move.l	d1,(vdp_data)
002033DA                            
002033DA                            *   		move.b	(RAM_VidRegs+$C),d0
002033DA                            *  		and.w	#%110,d0
002033DA                            *  		bne.s	@dontshftD_2
002033DA                             		
002033DA 2005                         		move.l	d5,d0
002033DC 8084                       		or.l	d4,d0
002033DE 0680 0080 0000               		add.l	#$00800000,d0
002033E4 23C0 00C0 0004               		move.l	d0,(vdp_ctrl)
002033EA 4A14                         		tst.b 	(a4)
002033EC 6700                        		beq.s	@nohiprioD_2
002033EE 0082 8000 8000              		or.l	#$80008000,d2
002033F4                            @nohiprioD_2:
002033F4 23C2 00C0 0000              		move.l	d2,(vdp_data)
002033FA                             		
002033FA                            @dontshftD_2:
002033FA 0684 0004 0000              		add.l	#$040000,d4
00203400 0284 007E 0000               		and.l	#$7E0000,d4
00203406                              		
00203406 DAFC 0001                   		add.w	#1,a5
0020340A D8FC 0001                   		add.w	#1,a4
0020340E D6FC 0001                   		add.w	#1,a3
00203412 51CB FF72                  		dbf	d3,@nextblkD
00203416                            @dontupdD:
00203416                            
00203416                            ; -----------------------------------
00203416                            ; UP
00203416                            ; -----------------------------------
00203416                            
00203416 082E 0003 003A             		btst	#bitLvlDirU,lvl_flags(a6)
0020341C 6700 0000                  		beq	@dontupdU
00203420 08AE 0003 003A             		bclr	#bitLvlDirU,lvl_flags(a6)
00203426 2A6E 000C                  		movea.l	lvl_layout(a6),a5
0020342A 286E 0010                  		movea.l lvl_hilayout(a6),a4
0020342E 266E 0018                  		movea.l	lvl_prizes(a6),a3
00203432                            
00203432 303C 4000                  		move.w	#$4000,d0
00203436 382E 0020                  		move.w	lvl_y(a6),d4
0020343A 3204                       		move.w	d4,d1
0020343C 4841                       		swap	d1
0020343E 3404                       		move.w	d4,d2
00203440 E84A                       		lsr.w	#4,d2
00203442 C4EE 0030                  		mulu.w	lvl_size_x(a6),d2
00203446 DAC2                        		adda	d2,a5
00203448 D8C2                        		adda 	d2,a4
0020344A D6C2                        		adda	d2,a3
0020344C 3604                        		move.w	d4,d3
0020344E                             		
0020344E 382E 001C                  		move.w	lvl_x(a6),d4		; VDP XPOS
00203452 3404                       		move.w	d4,d2
00203454 3204                       		move.w	d4,d1
00203456 E849                       		lsr.w	#4,d1
00203458 DAC1                        		adda	d1,a5
0020345A D8C1                        		adda 	d1,a4
0020345C D6C1                        		adda	d1,a3
0020345E E44C                       		lsr.w	#2,d4
00203460 0244 007C                  		and.w	#$7C,d4
00203464 E94B                       		lsl.w	#4,d3			; VDP YPOS
00203466 0243 0F00                  		and.w	#$F00,d3
0020346A 8843                       		or.w	d3,d4
0020346C 8840                       		or.w	d0,d4
0020346E 4844                       		swap	d4
00203470 383C 0003                   		move.w	#3,d4
00203474                             		
00203474 4841                        		swap	d1
00203476 3401                        		move.w	d1,d2
00203478 363C 0015                   		move.w	#$15,d3
0020347C                            ;  		move.l	#$00010001,d1
0020347C 2A04                        		move.l	d4,d5
0020347E 0285 4F80 0003              		and.l	#$4F800003,d5
00203484 0284 007E 0000              		and.l	#$007E0000,d4
0020348A                            @nextblkU:
0020348A 7000                       		moveq	#0,d0
0020348C 246E 0004                  		movea.l	lvl_blocks(a6),a2
00203490 1013                       		move.b	(a3),d0
00203492 4A00                       		tst.b	d0
00203494 6700                       		beq.s	@noPrzU
00203496 0800 0007                  		btst	#7,d0
0020349A 6600 0000                  		bne	@noPrzU
0020349E 0240 007F                  		and.w	#$7F,d0
002034A2 246E 0008                  		movea.l	lvl_przblocks(a6),a2
002034A6 6000                       		bra.s	@hasprzU
002034A8                            @noPrzU:
002034A8 1015                       		move.b	(a5),d0
002034AA 4A14                       		tst.b 	(a4)
002034AC 6700                       		beq.s 	@hasprzU
002034AE 1014                       		move.b 	(a4),d0
002034B0                            @hasprzU:
002034B0                            
002034B0                            ; 		moveq	#0,d0
002034B0                            ; 		movea.l	lvl_przblocks(a6),a2
002034B0                            ; 		move.b	(a3),d0
002034B0                            ; 		tst.b	d0
002034B0                            ; 		bne.s	@hasprzU
002034B0                            ; 		movea.l	lvl_blocks(a6),a2
002034B0                            ; 		move.b	(a5),d0
002034B0                            ; 		tst.b 	(a4)
002034B0                            ; 		beq.s 	@hasprzU
002034B0                            ; 		move.b 	(a4),d0
002034B0                            ; @hasprzU:
002034B0 E748                       		lsl.w	#3,d0
002034B2                            		
002034B2 3232 0000                  		move.w	(a2,d0.w),d1
002034B6 4841                       		swap	d1
002034B8 3232 0004                  		move.w	4(a2,d0.w),d1
002034BC 3432 0002                   		move.w	2(a2,d0.w),d2
002034C0 4842                        		swap	d2
002034C2 3432 0006                   		move.w	6(a2,d0.w),d2
002034C6                             		
002034C6 8885                       		or.l	d5,d4
002034C8 23C4 00C0 0004              		move.l	d4,(vdp_ctrl)
002034CE 4A14                        		tst.b 	(a4)
002034D0 6700                        		beq.s	@nohiprioU
002034D2 0081 8000 8000              		or.l	#$80008000,d1
002034D8                            @nohiprioU:
002034D8 23C1 00C0 0000              		move.l	d1,(vdp_data)
002034DE 2005                         		move.l	d5,d0
002034E0 8084                       		or.l	d4,d0
002034E2 0680 0080 0000               		add.l	#$00800000,d0
002034E8 23C0 00C0 0004              		move.l	d0,(vdp_ctrl)
002034EE 4A14                        		tst.b 	(a4)
002034F0 6700                        		beq.s	@nohiprioU_2
002034F2 0082 8000 8000              		or.l	#$80008000,d2
002034F8                            @nohiprioU_2:
002034F8 23C2 00C0 0000              		move.l	d2,(vdp_data)
002034FE                             		
002034FE                            @nohiprioU_3:
002034FE 0684 0004 0000              		add.l	#$040000,d4
00203504 0284 007E 0000               		and.l	#$7E0000,d4
0020350A                              		
0020350A DAFC 0001                   		add.w	#1,a5
0020350E D8FC 0001                   		add.w 	#1,a4
00203512 D6FC 0001                   		add.w	#1,a3
00203516 51CB FF72                  		dbf	d3,@nextblkU
0020351A                            @dontupdU:
0020351A 4E75                       		rts
0020351C                            	
0020351C                            ; --------------------------------------------
0020351C                            ; Lvl_Animation
0020351C                            ; --------------------------------------------
0020351C                            
0020351C                            Lvl_Animation
0020351C 4BF9 FFFF BEFE             		lea	(RAM_LvlAnim),a5
00203522                            ; 		lea	(Art_AnimCoin),a4
00203522                            		
00203522 0455 0001                  		sub.w	#1,(a5)
00203526 6A00 0000                  		bpl	@pluswait
0020352A 3ABC 0005                  		move.w	#5,(a5)
0020352E                            		
0020352E 7200                       		moveq	#0,d1
00203530 7400                       		moveq	#0,d2
00203532 203C 0000 0000             		move.l	#Art_AnimCoin,d0
00203538 322D 0002                  		move.w	2(a5),d1
0020353C 0641 0001                  		add.w	#1,d1
00203540 0C41 0006                  		cmp.w	#6,d1
00203544 6600                       		bne.s	@stay
00203546 4241                       		clr.w	d1
00203548                            @stay:
00203548 3B41 0002                  		move.w	d1,2(a5)
0020354C E149                       		lsl.w	#8,d1
0020354E D081                       		add.l	d1,d0
00203550                            		
00203550 23FC 9400 9380 00C0 0004   		move.l	#$94009380,(vdp_ctrl)	; Size: $40
0020355A                            
0020355A 0680 0000 0002              		add.l	#2,d0
00203560                             		
00203560 E288                        		lsr.l	#1,d0
00203562 2200                       		move.l	d0,d1
00203564 4841                       		swap	d1
00203566 0241 00FF                  		and.w	#$FF,d1
0020356A 0041 9700                  		or.w	#$9700,d1
0020356E 3400                       		move.w	d0,d2
00203570 0240 00FF                  		and.w	#$FF,d0
00203574 0040 9500                  		or.w	#$9500,d0
00203578 E04A                       		lsr.w	#8,d2
0020357A 0242 00FF                  		and.w	#$FF,d2
0020357E 0042 9600                  		or.w	#$9600,d2
00203582 4842                       		swap	d2
00203584 8082                       		or.l	d2,d0
00203586 23C0 00C0 0004             		move.l	d0,(vdp_ctrl)
0020358C 33C1 00C0 0004             		move.w	d1,(vdp_ctrl)
00203592                            		
00203592                            		;At: $380
00203592 3F3C 0082                  		move.w	#$0002|$80,-(sp)
00203596 3F3C 7400                  		move.w	#$7400,-(sp)
0020359A 33DF 00C0 0004             		move.w	(sp)+,(vdp_ctrl)
002035A0 33FC 0100 00A1 1100         		move.w	#$100,($A11100)
002035A8                            @WaitZ80:
002035A8 0839 0000 00A1 1100         		btst	#0,($A11100)
002035B0 66F6                         		bne.s	@WaitZ80
002035B2 33DF 00C0 0004             		move.w	(sp)+,(vdp_ctrl)
002035B8 33FC 0000 00A1 1100         		move.w	#0,($A11100).l
002035C0                            @pluswait:
002035C0 4E75                       		rts
002035C2                            		
002035C2                            ; --------------------------------------------
002035C2                            ; Lvl_Deform
002035C2                            ; --------------------------------------------
002035C2                            
002035C2                            Lvl_Deform:
002035C2 302E 0020                  		move.w	lvl_y(a6),d0
002035C6 33C0 FFFF E2C0             		move.w	d0,(RAM_ScrlVer)
002035CC 3800                       		move.w	d0,d4
002035CE E844                       		asr.w	#4,d4
002035D0 33C4 FFFF E2C2             		move.w	d4,(RAM_ScrlVer+2)
002035D6 7A00                       		moveq	#0,d5
002035D8 41F9 FFFF DF00             		lea	(RAM_ScrlHor),a0
002035DE 362E 001C                  		move.w	lvl_x(a6),d3
002035E2 4443                       		neg.w	d3
002035E4                            		
002035E4                            ; Sun
002035E4 7000                       		moveq	#0,d0
002035E6 343C 001B                  		move.w	#(28)-1,d2
002035EA 9444                       		sub.w	d4,d2
002035EC 6B00 0000                  		bmi	@rest_fg
002035F0                            @lyr1:
002035F0 30C3                       		move.w	d3,(a0)+
002035F2 30C0                       		move.w	d0,(a0)+
002035F4 0645 0001                  		add.w	#1,d5
002035F8 0C45 00E0                  		cmp.w	#224,d5
002035FC 6E00 0000                  		bgt	@exit_now
00203600 51CA FFEE                  		dbf	d2,@lyr1
00203604                            		
00203604                            ; Clouds 1
00203604 3003                       		move.w	d3,d0
00203606 E840                       		asr.w	#4,d0
00203608 343C 001B                  		move.w	#(28)-1,d2
0020360C 0C44 001C                  		cmp.w	#28,d4
00203610 6D00                       		blt.s	@lyr2
00203612 9444                       		sub.w	d4,d2
00203614 6B00                       		bmi.s	@rest_fg
00203616                            @lyr2:
00203616 30C3                       		move.w	d3,(a0)+
00203618 30C0                       		move.w	d0,(a0)+
0020361A 0645 0001                  		add.w	#1,d5
0020361E 0C45 00E0                  		cmp.w	#224,d5
00203622 6E00                       		bgt.s	@exit_now
00203624 51CA FFF0                  		dbf	d2,@lyr2
00203628                            		
00203628                            ; Clouds 2
00203628 3003                       		move.w	d3,d0
0020362A EA40                       		asr.w	#5,d0
0020362C 343C 001F                  		move.w	#(32)-1,d2
00203630                            ; 		cmp.w	#28,d4
00203630                            ; 		blt.s	@lyr3
00203630                            ; 		sub.w	d4,d2
00203630                            ; 		bmi.s	@rest_fg
00203630                            @lyr3:
00203630 30C3                       		move.w	d3,(a0)+
00203632 30C0                       		move.w	d0,(a0)+
00203634 0645 0001                  		add.w	#1,d5
00203638 0C45 00E0                  		cmp.w	#224,d5
0020363C 6E00                       		bgt.s	@exit_now
0020363E 51CA FFF0                  		dbf	d2,@lyr3
00203642                            
00203642                            ; Mountains 1
00203642 3003                       		move.w	d3,d0
00203644 E840                       		asr.w	#4,d0
00203646 343C 0024                  		move.w	#(37)-1,d2
0020364A                            @lyr4:
0020364A 30C3                       		move.w	d3,(a0)+
0020364C 30C0                       		move.w	d0,(a0)+
0020364E 0645 0001                  		add.w	#1,d5
00203652 0C45 00E0                  		cmp.w	#224,d5
00203656 6E00                       		bgt.s	@exit_now
00203658 51CA FFF0                  		dbf	d2,@lyr4
0020365C                            
0020365C                            ; Mountains 2
0020365C 3003                       		move.w	d3,d0
0020365E E640                       		asr.w	#3,d0
00203660 343C 0024                  		move.w	#(37)-1,d2
00203664                            @lyr5:
00203664 30C3                       		move.w	d3,(a0)+
00203666 30C0                       		move.w	d0,(a0)+
00203668 0645 0001                  		add.w	#1,d5
0020366C 0C45 00E0                  		cmp.w	#224,d5
00203670 6E00                       		bgt.s	@exit_now
00203672 51CA FFF0                  		dbf	d2,@lyr5
00203676                            		
00203676                            ; Mountains 2
00203676 3003                       		move.w	d3,d0
00203678 E440                       		asr.w	#2,d0
0020367A 343C 002F                  		move.w	#(48)-1,d2
0020367E                            @lyr6:
0020367E 30C3                       		move.w	d3,(a0)+
00203680 30C0                       		move.w	d0,(a0)+
00203682 0645 0001                  		add.w	#1,d5
00203686 0C45 00E0                  		cmp.w	#224,d5
0020368A 6E00                       		bgt.s	@exit_now
0020368C 51CA FFF0                  		dbf	d2,@lyr6
00203690                            		
00203690                            ; ----------------
00203690                            ; Rest of BG
00203690                            
00203690                            @rest_fg:
00203690 30C3                       		move.w	d3,(a0)+
00203692 4258                       		clr.w	(a0)+
00203694 0645 0001                  		add.w	#1,d5
00203698 0C45 00E0                  		cmp.w	#224,d5
0020369C 6DF2                       		blt.s	@rest_fg
0020369E                            
0020369E                            @exit_now:
0020369E 06AE 0000 0001 002C        		add.l	#1,lvl_timer(a6)
002036A6 4E75                       		rts
002036A8                            		
002036A8                            ; 		lea	(RAM_ScrlHor),a0
002036A8                            ; 		move.w	#224-1,d1
002036A8                            ; @nxt_h:
002036A8                            ; 		move.w	lvl_x(a6),d0
002036A8                            ; 		neg.w	d0
002036A8                            ; 		move.w	d0,(a0)+
002036A8                            ; 		asr.w	#2,d0
002036A8                            ; 		move.w	d0,(a0)+
002036A8                            ; 		dbf	d1,@nxt_h
002036A8                            ; 		
002036A8                            ; 		move.w	lvl_y(a6),d0
002036A8                            ; 		move.w	d0,(RAM_ScrlVer)
002036A8                            ; 		asr.w	#2,d0
002036A8                            ; 		move.w	d0,(RAM_ScrlVer+2)
002036A8                            
002036A8                            ; --------------------------------------------
002036A8                            ; Level_Load
002036A8                            ; 
002036A8                            ; a0 | Data
002036A8                            ; --------------------------------------------
002036A8                            
002036A8                            Level_Load:
002036A8                            ; 		lea	(Level_Test),a0
002036A8 43F9 00FF 0000             		lea	($FF0000),a1
002036AE 303C 1FFF                  		move.w	#(($8000)/4)-1,d0
002036B2                            @clrram:
002036B2 4299                       		clr.l	(a1)+
002036B4 51C8 FFFC                  		dbf	d0,@clrram
002036B8                            		
002036B8 43F9 FFFF BC00             		lea	(RAM_LvlPlanes),a1
002036BE 4279 FFFF BF1E             		clr.w	(RAM_PrizeHide)
002036C4 4279 FFFF BF60             		clr.w	(RAM_PrizeShow)
002036CA 4269 001C                  		clr.w	lvl_x(a1)
002036CE 4269 0020                  		clr.w	lvl_y(a1)
002036D2 283C FFFF 0000             		move.l	#$FFFF0000,d4
002036D8 3018                       		move.w	(a0)+,d0
002036DA 3340 0030                  		move.w	d0,lvl_size_x(a1)
002036DE 3340 0034                  		move.w	d0,lvl_maxcam_x(a1)
002036E2 3018                       		move.w	(a0)+,d0
002036E4 3340 0032                  		move.w	d0,lvl_size_y(a1)
002036E8 3340 0036                  		move.w	d0,lvl_maxcam_y(a1)
002036EC 2358 0000                  		move.l	(a0)+,lvl_objects(a1)
002036F0                            @loop:
002036F0                            ; 		tst.w	(a0)
002036F0                            ; 		bmi.s	@exit
002036F0                            		
002036F0 2358 0004                  		move.l	(a0)+,lvl_blocks(a1)
002036F4 2018                       		move.l	(a0)+,d0
002036F6 4A80                       		tst.l	d0
002036F8 6A00                       		bpl.s	@nullprz
002036FA 237C 0000 0000 0008        		move.l	#vram_prizes,lvl_przblocks(a1)
00203702                            @nullprz:
00203702 2358 000C                  		move.l	(a0)+,lvl_layout(a1)
00203706 2358 0010                  		move.l	(a0)+,lvl_hilayout(a1)
0020370A                            		
0020370A 2358 0014                  		move.l	(a0)+,lvl_collision(a1)
0020370E 2344 0018                  		move.l	d4,lvl_prizes(a1)
00203712 2458                       		movea.l	(a0)+,a2
00203714 2644                       		movea.l	d4,a3
00203716                            @nextrle:
00203716 7000                       		moveq	#0,d0
00203718 7200                       		moveq	#0,d1
0020371A 101A                       		move.b	(a2)+,d0
0020371C 0C00 00FF                  		cmp.b	#-1,d0
00203720 6700                       		beq.s	@Finish
00203722 121A                       		move.b	(a2)+,d1
00203724 4A40                       		tst.w	d0
00203726 6700                       		beq.s	@oops
00203728 0440 0001                  		sub.w	#1,d0
0020372C                            @CopyIt:
0020372C 16C1                       		move.b	d1,(a3)+
0020372E 0684 0000 0001             		add.l	#1,d4
00203734 51C8 FFF6                  		dbf	d0,@CopyIt
00203738                            @oops:
00203738 60DC                       		bra.s	@nextrle
0020373A                            @Finish:
0020373A                            ; 		adda	#sizeof_lvlpln,a1
0020373A                            ; 		bra.s	@loop
0020373A                            ; @exit:
0020373A                            		
0020373A                            ; ----------------------------------		
0020373A                            ; Load object from the list
0020373A                            ; ----------------------------------
0020373A                            
0020373A 47F9 FFFF BC42             		lea	(RAM_LevelObjPos),a3
00203740 323C 0045                  		move.w	#max_lvlobj-1,d1
00203744                            @clrlist:
00203744 429B                       		clr.l	(a3)+
00203746 429B                       		clr.l	(a3)+
00203748 425B                       		clr.w	(a3)+
0020374A 51C9 FFF8                  		dbf	d1,@clrlist
0020374E                            		
0020374E 2479 FFFF BC00             		movea.l	(RAM_LvlPlanes+lvl_objects),a2
00203754 47F9 FFFF BC42             		lea	(RAM_LevelObjPos),a3
0020375A 323C 0045                  		move.w	#max_lvlobj-1,d1
0020375E                            @NextObj:
0020375E 4A92                       		tst.l	(a2)
00203760 6700                       		beq.s	@Nothing
00203762 201A                        		move.l	(a2)+,d0
00203764 0280 00FF FFFF              		and.l 	#$FFFFFF,d0
0020376A 26C0                        		move.l	d0,(a3)+
0020376C 26DA                       		move.l	(a2)+,(a3)+
0020376E 36DA                       		move.w	(a2)+,(a3)+
00203770 51C9 FFEC                  		dbf	d1,@NextObj
00203774                            @Nothing:
00203774 4E75                       		rts
00203776                            		
00203776                            ; --------------------------------------------
00203776                            ; Draw the level on screen
00203776                            ; 
00203776                            ; Uses:
00203776                            ; d0-d5/a2-a5
00203776                            ; --------------------------------------------
00203776                            
00203776                            Level_Draw:
00203776 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020377C 203C 4000 0003             		move.l	#$40000003,d0		; VDP Address
00203782 322D 001C                    		move.w	lvl_x(a5),d1		; X pos
00203786 342D 0020                    		move.w	lvl_y(a5),d2		; Y pos
0020378A E84A                          		lsr.w	#4,d2			; Ypos: xxx0 > 0xxx
0020378C 0242 000F                     		and.w	#$F,d2			; 0xxx > 00xx
00203790 E14A                          		lsl.w	#8,d2			; 00xx > xx00
00203792 0242 3FFF                     		and.w	#$3FFF,d2
00203796 E849                          		lsr.w	#4,d1			; Xpos: xxx0 > 0xxx
00203798 E549                           		lsl.w	#2,d1			; 0xxx * 2
0020379A 4840                           		swap	d0
0020379C D042                          		add.w	d2,d0			; +Y VDP
0020379E D001                         		add.b	d1,d0			; +X VDP
002037A0 0200 007F                         		and.b	#$7F,d0
002037A4 4840                             		swap	d0
002037A6                            		
002037A6 382D 0020                  		move.w	lvl_y(a5),d4
002037AA E84C                       		lsr.w	#4,d4
002037AC C8ED 0030                  		mulu.w	lvl_size_x(a5),d4
002037B0 3A2D 001C                  		move.w	lvl_x(a5),d5
002037B4 E84D                       		lsr.w	#4,d5
002037B6 DA44                       		add.w	d4,d5
002037B8 0245 7FFF                  		and.w	#$7FFF,d5
002037BC 4845                       		swap 	d5
002037BE                            		
002037BE 3A3C 0016                  		move.w	#$16,d5
002037C2                            @do_row:
002037C2 286D 000C                   		movea.l	lvl_layout(a5),a4
002037C6 266D 0010                   		movea.l	lvl_hilayout(a5),a3
002037CA 246D 0018                   		movea.l	lvl_prizes(a5),a2
002037CE 4845                        		swap	d5
002037D0 D8C5                        		adda 	d5,a4
002037D2 D6C5                        		adda 	d5,a3
002037D4 D4C5                        		adda	d5,a2
002037D6 4845                        		swap 	d5
002037D8                             		
002037D8 2600                       		move.l	d0,d3
002037DA 780F                        		moveq	#$F,d4
002037DC                            ;  		move.b	(RAM_VidRegs+$C),d2
002037DC                            ;   		and.w	#%110,d2
002037DC                            ;   		beq.s	@block
002037DC                            ;   		moveq	#$1F,d4
002037DC                            ;  
002037DC                            @block:
002037DC 226D 0008                  		movea.l	lvl_przblocks(a5),a1
002037E0 7400                        		moveq	#0,d2	
002037E2 1412                        		move.b	(a2),d2
002037E4 4A02                        		tst.b	d2
002037E6 6700                        		beq.s	@noprzblk
002037E8 0802 0007                   		btst	#7,d2
002037EC 6700                        		beq.s	@hasPrzDrw
002037EE                            @noprzblk:
002037EE 1414                         		move.b	(a4),d2
002037F0 226D 0004                     		movea.l	lvl_blocks(a5),a1
002037F4 4A13                        		tst.b	(a3)
002037F6 6700                        		beq.s	@hasprzDrw
002037F8 1413                        		move.b	(a3),d2
002037FA                            @hasprzDrw:
002037FA E74A                       		lsl.w	#3,d2
002037FC 3231 2000                  		move.w	(a1,d2.w),d1
00203800 4841                        		swap	d1
00203802 3231 2004                   		move.w	4(a1,d2.w),d1
00203806                             		
00203806 4844                        		swap	d4
00203808 1839 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d4
0020380E 0244 0006                   		and.w	#%110,d4
00203812 6700                        		beq.s	@NoDouble
00203814 E249                        		lsr.w	#1,d1
00203816 4841                        		swap	d1
00203818 E249                        		lsr.w	#1,d1
0020381A 4841                        		swap	d1
0020381C                            @NoDouble:
0020381C 4844                       		swap	d4
0020381E 23C3 00C0 0004              		move.l	d3,(vdp_ctrl)
00203824 4A13                        		tst.b	(a3)
00203826 6700                        		beq.s	@nohiprio
00203828 0081 8000 8000              		or.l 	#$80008000,d1
0020382E                            @nohiprio:
0020382E 23C1 00C0 0000              		move.l	d1,(vdp_data)
00203834 0683 0080 0000              		add.l	#$00800000,d3
0020383A                              		
0020383A 1239 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d1
00203840 0241 0006                   		and.w	#%110,d1
00203844 6600                        		bne.s	@NoDouble2
00203846 3231 2002                  		move.w	2(a1,d2.w),d1
0020384A 4841                        		swap	d1
0020384C 3231 2006                   		move.w	6(a1,d2.w),d1
00203850 23C3 00C0 0004             		move.l	d3,(vdp_ctrl)
00203856 4A13                        		tst.b	(a3)
00203858 6700                        		beq.s	@nohiprio2
0020385A 0081 8000 8000              		or.l 	#$80008000,d1
00203860                            @nohiprio2:
00203860 23C1 00C0 0000              		move.l	d1,(vdp_data)
00203866 0683 0080 0000              		add.l	#$00800000,d3
0020386C 0283 4F7C 0003              		and.l	#$4F7C0003,d3
00203872                            @NoDouble2:		
00203872 322D 0030                  		move.w	lvl_size_x(a5),d1
00203876 D8C1                       		adda	d1,a4
00203878 D6C1                       		adda	d1,a3
0020387A D4C1                       		adda	d1,a2
0020387C 51CC FF5E                  		dbf	d4,@block
00203880                            	
00203880 0680 0004 0000             		add.l	#$40000,d0
00203886 0280 4F7C 0003             		and.l	#$4F7C0003,d0
0020388C 4845                       		swap 	d5
0020388E 0645 0001                  		add.w	#1,d5
00203892 4845                       		swap 	d5
00203894 51CD FF2C                  		dbf	d5,@do_row
00203898                            
00203898                            ; ----------------------------------
00203898                            ; Check for objects ON the
00203898                            ; same screen as the player
00203898                            ; ----------------------------------
00203898                            
00203898 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
0020389E 49F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*16)),a4	;Start of level objects
002038A4 7601                       		moveq	#1,d3			; Starting at 1
002038A6                            @next_obj:
002038A6 4A95                       		tst.l	(a5)
002038A8 6700 0000                  		beq	@finish
002038AC 0815 0007                   		btst	#7,(a5)			;ON SCREEN flag?
002038B0 6600 0000                   		bne	@next
002038B4                            @found_obj:
002038B4 7800                         		moveq	#(max_objects-8)-1,d4
002038B6                            @nxtav_obj:
002038B6 4AAC 0000                  		tst.l	obj_code(a4)	
002038BA 6700                       		beq.s	@valid
002038BC D8FC 0000                  		adda	#sizeof_obj,a4
002038C0 51CC FFF4                  		dbf	d4,@nxtav_obj
002038C4                            		
002038C4                            @valid:
002038C4 396D 0004 0000             		move.w	4(a5),obj_x(a4)
002038CA 396D 0006 0000             		move.w	6(a5),obj_y(a4)
002038D0 1943 0000                  		move.b	d3,obj_spwnindx(a4)
002038D4                            		
002038D4 7200                          		moveq	#0,d1
002038D6 122D 0008                      		move.b	8(a5),d1
002038DA 422C 0000                      		clr.b	obj_status(a4)
002038DE 0801 0007                      		btst	#7,d1
002038E2 6700                           		beq.s	@dont_flip_l
002038E4 08EC 008C 0000               		bset	#bitobj_flipH,obj_status(a4)
002038EA                            @dont_flip_l:
002038EA 0801 0006                      		btst	#6,d1
002038EE 6700                           		beq.s	@dont_flip_d
002038F0 08EC 00CC 0000               		bset	#bitobj_flipV,obj_status(a4)
002038F6                            @dont_flip_d:
002038F6 122D 0008                   		move.b	8(a5),d1
002038FA 0241 003F                   		and.w	#$3F,d1
002038FE 1941 0000                  		move.b	d1,obj_subid(a4)
00203902 2015                        		move.l	(a5),d0
00203904 0280 00FF FFFF               		and.l 	#$FFFFFF,d0
0020390A 2940 0000                   		move.l	d0,obj_code(a4)
0020390E 08D5 0007                   		bset	#7,(a5)			;SET ON SCREEN flag
00203912 D8FC 0000                  		adda	#sizeof_obj,a4
00203916                            @next:
00203916 0643 0001                  		add.w	#1,d3
0020391A DAFC 000A                  		adda	#$A,a5
0020391E 6000 FF86                  		bra	@next_obj
00203922                            @finish:
00203922 4E75                            		rts
00203924                            		
00203924                            ; ----------------------------------		
00203924                            
00203924                            Level_HidePrize:
00203924 49F9 FFFF BF20             		lea	(RAM_PrizeHide+2),a4
0020392A 3839 FFFF BF1E             		move.w	(RAM_PrizeHide),d4
00203930 E54C                       		lsl.w	#2,d4
00203932 D8C4                       		adda	d4,a4
00203934                            ; @chknext:
00203934                            ; 		tst.l	(a4)
00203934                            ; 		beq.s	@free
00203934                            ; 		adda	#4,a4
00203934                            ; 		bra.s	@chknext
00203934                            ; @free:
00203934 2880                       		move.l	d0,(a4)
00203936 0679 0001 FFFF BF1E        		add.w	#1,(RAM_PrizeHide)
0020393E                            @same:
0020393E 4E75                       		rts
00203940                            		
00203940                            ; ----------------------------------
00203940                            
00203940                            Level_ShowPrize:
00203940 49F9 FFFF BF62             		lea	(RAM_PrizeShow+2),a4
00203946 3839 FFFF BF60             		move.w	(RAM_PrizeShow),d4
0020394C E54C                       		lsl.w	#2,d4
0020394E D8C4                       		adda	d4,a4
00203950                            ; @chknext:
00203950                            ; 		tst.l	(a4)
00203950                            ; 		beq.s	@free
00203950                            ; 		adda	#4,a4
00203950                            ; 		bra.s	@chknext
00203950                            ; @free:
00203950 2880                       		move.l	d0,(a4)
00203952 0679 0001 FFFF BF60        		add.w	#1,(RAM_PrizeShow)
0020395A                            @same:
0020395A 4E75                       		rts
0020395C                            
0020395C                            ; ----------------------------------
0020395C                            
0020395C                            ; Level_CheckPrize:
0020395C                            ;  		moveq	#0,d4
0020395C                            ;  		lea	(RAM_PrizeHide),a3
0020395C                            ;  		move.w	(a3)+,d5
0020395C                            ;  		tst.w	d5
0020395C                            ;  		beq.s	@free
0020395C                            ; 		sub.w	#1,d5
0020395C                            ; @chknext:
0020395C                            ;  		cmp.l	(a3)+,d0
0020395C                            ;  		beq.s	@found
0020395C                            ;  		dbf	d5,@chknext
0020395C                            ;  		bra.s	@free
0020395C                            ; 
0020395C                            ; @found:
0020395C                            ;  nop
0020395C                            ; ;  		bra.s * ;moveq	#-1,d4
0020395C                            ;  		
0020395C                            ; @free:
0020395C                            ;  		tst.l	d4
0020395C                            ; 		rts
0020395C                            		
0020395C                            ; ----------------------------------		
0020395C                            ; load level objects while moving
0020395C                            ; ----------------------------------
0020395C                            
0020395C                            Lvl_RefreshObj:
0020395C 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
00203962 49F9 0000 0000             		lea	(RAM_ObjBuffer+(sizeof_obj*16)),a4
00203968 7601                       		moveq	#1,d3			; Starting at 1
0020396A                            @next_obj:
0020396A 4A95                       		tst.l	(a5)
0020396C 6700 0000                  		beq	@finish
00203970 0815 0006                  		btst	#6,(a5)			; GONE flag?
00203974 6600 0000                  		bne	@next
00203978 0815 0007                   		btst	#7,(a5)			; ON SCREEN flag?
0020397C 6600 0000                   		bne	@next
00203980                            		
00203980 4843                       		swap	d3
00203982                            
00203982 302E 001C                     		move.w	lvl_x(a6),d0
00203986 322D 0004                         		move.w	4(a5),d1
0020398A 3400                           		move.w	d0,d2
0020398C 0642 0140                      		add.w	#320,d2
00203990                                		
00203990 0642 0038                     		add.w	#$38,d2
00203994 B242                            		cmp.w	d2,d1
00203996 6E00 0000                        		bgt	@tooright  		
0020399A 0442 0008                     		sub.w	#$8,d2
0020399E B242                            		cmp.w	d2,d1
002039A0 6D00 0000                        		blt	@tooright
002039A4 363C 0001                        		move.w	#1,d3
002039A8                            @tooright:
002039A8 0440 0038                     		sub.w	#$38,d0
002039AC B240                             		cmp.w	d0,d1
002039AE 6D00 0000                         		blt	@tooleft
002039B2 0640 0008                     		add.w	#$8,d0
002039B6 B240                            		cmp.w	d0,d1
002039B8 6C00 0000                        		bge	@tooleft
002039BC 363C 0001                        		move.w	#1,d3
002039C0                            @tooleft:
002039C0                            
002039C0                            		
002039C0 302E 0020                      		move.w	lvl_y(a6),d0
002039C4 322D 0006                         		move.w	6(a5),d1
002039C8 3400                            		move.w	d0,d2
002039CA 0642 00E0                      		add.w	#224,d2
002039CE                            		
002039CE 0642 0058                     		add.w	#$58,d2
002039D2 B242                            		cmp.w	d2,d1
002039D4 6C00 0000                        		bge	@toodown 		
002039D8 0442 0008                     		sub.w	#$8,d2
002039DC B242                            		cmp.w	d2,d1
002039DE 6D00 0000                        		blt	@toodown
002039E2 363C 0001                        		move.w	#1,d3
002039E6                            @toodown:
002039E6 0440 0058                     		sub.w	#$58,d0
002039EA B240                             		cmp.w	d0,d1
002039EC 6D00 0000                         		blt	@tooup
002039F0 0640 0008                     		add.w	#$8,d0
002039F4 B240                            		cmp.w	d0,d1
002039F6 6C00 0000                        		bge	@tooup
002039FA 363C 0001                        		move.w	#1,d3
002039FE                            @tooup:
002039FE                            
002039FE                            
002039FE 3003                       		move.w	d3,d0
00203A00 4843                       		swap	d3
00203A02 4A40                       		tst.w	d0
00203A04 6700                       		beq.s	@next
00203A06                              		
00203A06                            @found_obj:
00203A06 7800                         		moveq	#(max_objects-16)-1,d4
00203A08                            @nxtav_obj:
00203A08 4AAC 0000                  		tst.l	obj_code(a4)
00203A0C 6700                       		beq.s	@valid
00203A0E B62C 0000                  		cmp.b	obj_spwnindx(a4),d3
00203A12 6700                       		beq.s	@next
00203A14 D8FC 0000                  		adda	#sizeof_obj,a4
00203A18 51CC FFEE                  		dbf	d4,@nxtav_obj
00203A1C 6000                       		bra.s	@next
00203A1E                            		
00203A1E                            @valid:
00203A1E 264C                       		movea.l	a4,a3
00203A20 323C 0000                  		move.w	#sizeof_obj,d1
00203A24                            @cleanup:
00203A24 421B                       		clr.b	(a3)+
00203A26 51C9 FFFC                  		dbf	d1,@cleanup
00203A2A                            		
00203A2A 396D 0004 0000             		move.w	4(a5),obj_x(a4)
00203A30 396D 0006 0000             		move.w	6(a5),obj_y(a4)
00203A36 1943 0000                  		move.b	d3,obj_spwnindx(a4)
00203A3A                            		
00203A3A 7200                          		moveq	#0,d1
00203A3C 122D 0008                      		move.b	8(a5),d1
00203A40 422C 0000                      		clr.b	obj_status(a4)
00203A44 0801 0007                      		btst	#7,d1
00203A48 6700                           		beq.s	@dont_flip_l
00203A4A 08EC 008C 0000               		bset	#bitobj_flipH,obj_status(a4)
00203A50                            
00203A50                            @dont_flip_l:
00203A50 0801 0006                      		btst	#6,d1
00203A54 6700                           		beq.s	@dont_flip_d
00203A56 08EC 00CC 0000               		bset	#bitobj_flipV,obj_status(a4)
00203A5C                            @dont_flip_d:
00203A5C 122D 0008                   		move.b	8(a5),d1
00203A60 0241 003F                   		and.w	#$3F,d1
00203A64 1941 0000                  		move.b	d1,obj_subid(a4)
00203A68 2015                        		move.l	(a5),d0
00203A6A 0280 00FF FFFF               		and.l 	#$FFFFFF,d0
00203A70 2940 0000                   		move.l	d0,obj_code(a4)
00203A74 08D5 0007                   		bset	#7,(a5)			;SET ON SCREEN flag
00203A78 D8FC 0000                  		adda	#sizeof_obj,a4
00203A7C                            @next:
00203A7C 0643 0001                  		add.w	#1,d3
00203A80 DAFC 000A                  		adda	#$A,a5
00203A84 6000 FEE4                  		bra	@next_obj
00203A88                            @finish:
00203A88 4E75                       		rts
00203A8A                             	
00203A8A                            ; ----------------------------------
00203A8A                            ; d0 - ID
00203A8A                            ; ----------------------------------
00203A8A                            
00203A8A                            Lvl_DoHidePrz:
00203A8A                            		;TODO: Up/Left checks
00203A8A 2800                       		move.l	d0,d4
00203A8C E88C                       		lsr.l	#4,d4
00203A8E 0244 FFF0                  		and.w	#$FFF0,d4
00203A92 3A2E 0020                   		move.w	lvl_y(a6),d5
00203A96 B845                        		cmp.w	d5,d4
00203A98 6D00                        		blt.s	LvlPrzReadRet
00203A9A 2800                       		move.l	d0,d4
00203A9C 4844                       		swap	d4
00203A9E 0244 FFF0                  		and.w	#$FFF0,d4
00203AA2 3A2E 001C                   		move.w	lvl_x(a6),d5
00203AA6 B845                        		cmp.w	d5,d4
00203AA8 6D00                        		blt.s	LvlPrzReadRet
00203AAA                             		
00203AAA 2800                        		move.l	d0,d4			;Postion | XXX?????
00203AAC 4844                        		swap	d4			;????XXX?
00203AAE E44C                        		lsr.w	#2,d4			;????0XXX
00203AB0 0284 0000 007C              		and.l	#$7C,d4
00203AB6 2A00                        		move.l	d0,d5			;???YYY??
00203AB8 0245 0F00                    		and.w	#$F00,d5
00203ABC D845                          		add.w	d5,d4
00203ABE 2A3C 4000 0003              		move.l	#$40000003,d5
00203AC4 4845                        		swap	d5
00203AC6 8A44                        		or.w	d4,d5
00203AC8 4845                        		swap	d5
00203ACA                             		
00203ACA 286E 000C                    		movea.l	lvl_layout(a6),a4	;Layout data
00203ACE 2800                        		move.l	d0,d4
00203AD0 0284 000F FF00              		and.l	#$000FFF00,d4
00203AD6 E08C                        		lsr.l	#8,d4
00203AD8 0284 0000 0FFF              		and.l	#$FFF,d4
00203ADE C8EE 0030                   		mulu.w	lvl_size_x(a6),d4
00203AE2 D8C4                        		adda	d4,a4	
00203AE4 2800                         		move.l	d0,d4
00203AE6 0284 FFF0 0000              		and.l	#$FFF00000,d4
00203AEC 4844                         		swap	d4
00203AEE E84C                         		lsr.w	#4,d4
00203AF0 D8C4                          		add.w 	d4,a4
00203AF2 7800                           		moveq	#0,d4
00203AF4 1814                          		move.b	(a4),d4
00203AF6 286E 0004                  		movea.l	lvl_blocks(a6),a4	;Draw blocks
00203AFA 6000                       		bra.s	LvlPrzReadBlk
00203AFC                            LvlPrzReadRet:
00203AFC 4E75                       		rts
00203AFE                            		
00203AFE                            ; ----------------------------------
00203AFE                            ; d0 - ID
00203AFE                            ; ----------------------------------
00203AFE                            
00203AFE                            Lvl_DoShowPrz:
00203AFE                            		;TODO: Up/Left checks
00203AFE 2800                       		move.l	d0,d4
00203B00 E88C                       		lsr.l	#4,d4
00203B02 0244 FFF0                  		and.w	#$FFF0,d4
00203B06 3A2E 0020                   		move.w	lvl_y(a6),d5
00203B0A B845                        		cmp.w	d5,d4
00203B0C 6DEE                        		blt.s	LvlPrzReadRet
00203B0E 2800                       		move.l	d0,d4
00203B10 4844                       		swap	d4
00203B12 0244 FFF0                  		and.w	#$FFF0,d4
00203B16 3A2E 001C                   		move.w	lvl_x(a6),d5
00203B1A B845                        		cmp.w	d5,d4
00203B1C 6DDE                        		blt.s	LvlPrzReadRet
00203B1E                             		
00203B1E 2800                        		move.l	d0,d4			;Postion | XXX?????
00203B20 4844                        		swap	d4			;????XXX?
00203B22 E44C                        		lsr.w	#2,d4			;????0XXX
00203B24 0284 0000 007C              		and.l	#$7C,d4
00203B2A 2A00                        		move.l	d0,d5			;???YYY??
00203B2C 0285 0000 0F00               		and.l	#$F00,d5
00203B32 8845                          		or.w	d5,d4
00203B34 2A3C 4000 0003              		move.l	#$40000003,d5
00203B3A 4845                        		swap	d5
00203B3C 8A44                        		or.w	d4,d5
00203B3E 4845                        		swap	d5 		
00203B40 286E 0018                    		movea.l	lvl_prizes(a6),a4	;Layout data
00203B44 2800                        		move.l	d0,d4
00203B46 0284 000F FF00              		and.l	#$000FFF00,d4
00203B4C E08C                        		lsr.l	#8,d4
00203B4E 0284 0000 0FFF              		and.l	#$FFF,d4
00203B54 C8EE 0030                   		mulu.w	lvl_size_x(a6),d4
00203B58                            ;  		lsl.w	#1,d4
00203B58 D8C4                        		adda	d4,a4	
00203B5A 2800                         		move.l	d0,d4
00203B5C 0284 FFF0 0000              		and.l	#$FFF00000,d4
00203B62 4844                         		swap	d4
00203B64 E84C                         		lsr.w	#4,d4
00203B66                            ;    		lsl.w	#1,d4
00203B66 D8C4                          		add.w	d4,a4
00203B68 7800                           		moveq	#0,d4
00203B6A 1814                          		move.b	(a4),d4
00203B6C 286E 0008                  		movea.l	lvl_przblocks(a6),a4	;Draw blocks
00203B70                            		
00203B70                            LvlPrzReadBlk:
00203B70 E78C                         		lsl.l	#3,d4
00203B72 0284 0000 FFFF               		and.l	#$FFFF,d4
00203B78 D8C4                          		adda 	d4,a4
00203B7A                               		
00203B7A 23C5 00C0 0004              		move.l	d5,(vdp_ctrl).l
00203B80 3814                        		move.w	(a4),d4
00203B82 4844                        		swap	d4
00203B84 382C 0004                   		move.w	4(a4),d4
00203B88 23C4 00C0 0000              		move.l	d4,(vdp_data).l
00203B8E 0685 0080 0000              		add.l	#$800000,d5
00203B94 23C5 00C0 0004              		move.l	d5,(vdp_ctrl).l
00203B9A 382C 0002                   		move.w	2(a4),d4
00203B9E 4844                        		swap	d4
00203BA0 382C 0006                   		move.w	6(a4),d4
00203BA4 23C4 00C0 0000              		move.l	d4,(vdp_data).l
00203BAA                            @ignore:
00203BAA 4E75                        		rts	
00203BAC                            		
00203BAC                            ; ----------------------------------		
00203BAC                            ; Load art data
00203BAC                            ; 
00203BAC                            ; a1 - the list
00203BAC                            ; ----------------------------------
00203BAC                            
00203BAC                            Level_LoadArtList:
00203BAC 4A51                       		tst.w	(a1)
00203BAE 6B00                       		bmi.s	@Finish
00203BB0 2059                       		move.l	(a1)+,a0		;Addr
00203BB2 3019                        		move.w	(a1)+,d0		;VRAM
00203BB4 3219                        		move.w	(a1)+,d1		;Size
00203BB6 6100 C566                   		bsr	VDP_SendData_L
00203BBA 60F0                        		bra.s	Level_LoadArtList
00203BBC                             		
00203BBC                            @Finish:
00203BBC 4E75                       		rts
00203BBE                            		
00203BBE                            ; =================================================================
00203BBE                            ; --------------------------------------------
00203BBE                            ; Data
00203BBE                            ; --------------------------------------------
00203BBE                            
00203BBE                            vram_prizes:
00203BBE 0000 0001 0000 0001        		dc.l $0001,$0001		; $00 FILLER
00203BC6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $01 Breakable: normal
00203BCE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $02  **  **  : 1 coin
00203BD6 0580 0581 0582 0583         		dc.w $580,$581,$582,$583	; $03  **  **  : 10 coins
00203BDE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $04  **  **  : ???
00203BE6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $05  **  **  : ???
00203BEE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $06  **  **  : ???
00203BF6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	; $07  **  **  : 1 up
00203BFE 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $08 Block ! : 1 coin
00203C06 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $09  ****   : 10 coins
00203C0E 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0A  ****   : ???
00203C16 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0B  ****   : ???
00203C1E 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0C  ****   : ???
00203C26 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0D  ****   : ???
00203C2E 0584 0585 0586 0587        		dc.w $584,$585,$586,$587	; $0E  ****   : 1 up
00203C36 059C 059D 059E 059F        		dc.w $59C,$59D,$59E,$59F	; $0F Empty block
00203C3E                            		
00203C3E 4580 4581 4582 4583        		dc.w $4580,$4581,$4582,$4583	;$10+
00203C46 4580 4581 4582 4583        		dc.w $4580,$4581,$4582,$4583
00203C4E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C56 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C5E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C66 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C6E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C76 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C7E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
00203C86 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C8E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C96 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203C9E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CA6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CAE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CB6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CBE                            
00203CBE 4594 4595 4596 4597        		dc.w $4594,$4595,$4596,$4597	;$20+ Bouncing block
00203CC6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CCE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CD6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CDE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CE6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CEE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CF6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203CFE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
00203D06 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D0E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D16 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D1E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D26 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D2E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D36 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D3E                            		
00203D3E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	;$30+
00203D46 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D4E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D56 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D5E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D66 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D6E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D76 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D7E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583	
00203D86 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D8E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D96 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203D9E 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203DA6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203DAE 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203DB6 0580 0581 0582 0583        		dc.w $580,$581,$582,$583
00203DBE                            		
00203DBE 45A0 45A1 45A2 45A3        		dc.w $45A0,$45A1,$45A2,$45A3	;$40 - Coins
00203DC6 45A4 45A5 45A6 45A7        		dc.w $45A4,$45A5,$45A6,$45A7
00203DCE                            		even
00203DCE                            
00203DCE                            ; --------------------------------------------
00203DCE                            
00203DCE                            col_SlopeData:
00203DCE 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00203DDE 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;$01
00203DEE 0F0E 0D0C 0B0A 0908 0706+  		dc.b $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00	;$02
00203DFE 0001 0203 0405 0607 0809+  		dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F	;$03
00203E0E                            		
00203E0E 0F0F 0E0E 0D0D 0C0C 0B0B+  		dc.b $0F,$0F,$0E,$0E,$0D,$0D,$0C,$0C,$0B,$0B,$0A,$0A,$09,$09,$08,$08
00203E1E 0707 0606 0505 0404 0303+  		dc.b $07,$07,$06,$06,$05,$05,$04,$04,$03,$03,$02,$02,$01,$01,$00,$00
00203E2E                            		
00203E2E 0000 0101 0202 0303 0404+  		dc.b $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
00203E3E 0808 0909 0A0A 0B0B 0C0C+  		dc.b $08,$08,$09,$09,$0A,$0A,$0B,$0B,$0C,$0C,$0D,$0D,$0E,$0E,$0F,$0F
00203E4E                            		
00203E4E 0F0F 0F0F 0E0E 0E0E 0D0D+  		dc.b $0F,$0F,$0F,$0F,$0E,$0E,$0E,$0E,$0D,$0D,$0D,$0D,$0C,$0C,$0C,$0C
00203E5E 0B0B 0B0B 0A0A 0A0A 0909+  		dc.b $0B,$0B,$0B,$0B,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$08,$08,$08,$08
00203E6E 0707 0707 0606 0606 0505+  		dc.b $07,$07,$07,$07,$06,$06,$06,$06,$05,$05,$05,$05,$04,$04,$04,$04
00203E7E 0303 0303 0202 0202 0101+  		dc.b $03,$03,$03,$03,$02,$02,$02,$02,$01,$01,$01,$01,$00,$00,$00,$00
00203E8E                            		
00203E8E 0000 0000 0101 0101 0202+  		dc.b $00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03
00203E9E 0404 0404 0505 0505 0606+  		dc.b $04,$04,$04,$04,$05,$05,$05,$05,$06,$06,$06,$06,$07,$07,$07,$07
00203EAE 0808 0808 0909 0909 0A0A+  		dc.b $08,$08,$08,$08,$09,$09,$09,$09,$0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B
00203EBE 0C0C 0C0C 0D0D 0D0D 0E0E+  		dc.b $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D,$0E,$0E,$0E,$0E,$0F,$0F,$0F,$0F
00203ECE                            		even
00203ECE                            		
00203ECE                            		
00203ECE                            		include	"engine/modes/level/subs/objects.asm"
00203ECE                            ; ====================================================================
00203ECE                            ; -------------------------------------------------
00203ECE                            ; Objects system
00203ECE                            ; -------------------------------------------------
00203ECE                            
00203ECE                            ; NOTES:
00203ECE                            ; Current object Slots:
00203ECE                            ;   00   | Player 1 (HARD-CODED)
00203ECE                            ;   01   | PLANNED (Second player if needed)
00203ECE                            ;   02   | HUD (TODO)
00203ECE                            ;   03   | Eng flag
00203ECE                            ;   04   | FREE
00203ECE                            ;   05   | FREE
00203ECE                            ;   06   | FREE
00203ECE                            ;   07   | FREE
00203ECE                            ; 08-15  | Blocks+Action objects (Auto-arrangled)
00203ECE                            ; 16-MAX | Level objects (Auto-arrangled)
00203ECE                            
00203ECE                            ; --------------------------------------------
00203ECE                            ; Variables
00203ECE                            ; --------------------------------------------
00203ECE                            
00203ECE =00000040                  max_objects	equ	64
00203ECE =00000040                  max_microspr	equ	64
00203ECE                            
00203ECE                            ; --------------------------------------------
00203ECE                            
00203ECE                            		rsreset
00203ECE =00000000                  obj_code	rs.l	1		; Object code 
00203ECE =00000004                  obj_size	rs.l	1		; Object size (see below)
00203ECE                            
00203ECE =00000008                  obj_x		rs.l	1		; Object X Position
00203ECE =0000000C                  obj_y		rs.l	1		; Object Y Position
00203ECE =00000010                  obj_x_spd	rs.l	1		; Object X Speed
00203ECE =00000014                  obj_y_spd	rs.l	1		; Object Y Gravity
00203ECE                            ; obj_maps	rs.l	1
00203ECE                            
00203ECE =00000018                  obj_anim_next	rs.w	1		; Object animation increment (obj_anim + obj_anim_next)
00203ECE =0000001A                  obj_anim_id	rs.w	1		; Object animation to read (current|saved)
00203ECE                            ; obj_vram	rs.w	1		; Object VRAM
00203ECE =0000001C                  obj_anim_spd	rs.b	1		; Object animation delay
00203ECE =0000001D                  obj_index	rs.b	1		; Object code index
00203ECE =0000001E                  obj_status	rs.b	1		; Object status
00203ECE =0000001F                  obj_subid	rs.b	1		; Object SubID
00203ECE =00000020                  obj_frame	rs.b	1		; Object display frame
00203ECE                            ; obj_frame_old	rs.b	1		; Object last frame (DMA)
00203ECE =00000021                  obj_spwnindx	rs.b	1		; Object respawn index (this - 1)
00203ECE =00000022                  obj_col		rs.b	1		; Object collision
00203ECE =00000023                  obj_null	rs.b	1		; FILLER
00203ECE                            
00203ECE =00000024                  obj_ram		rs.b	$40		; Object RAM
00203ECE =00000064                  sizeof_obj	rs.l	0
00203ECE                            
00203ECE                            ; --------------------------------
00203ECE                            ; obj_size
00203ECE                            ; --------------------------------
00203ECE                            
00203ECE                            		rsreset
00203ECE =00000000                  objsize_l	rs.b	1
00203ECE =00000001                  objsize_r	rs.b	1
00203ECE =00000002                  objsize_u	rs.b	1
00203ECE =00000003                  objsize_d	rs.b	1
00203ECE                            
00203ECE                            ; --------------------------------
00203ECE                            ; obj_status
00203ECE                            ; --------------------------------
00203ECE                            
00203ECE =00000000                  bitobj_flipH	equ	0		; set to flip Sprite Horizontally
00203ECE =00000001                  bitobj_flipV	equ	1		; set to flip Sprite Vertically
00203ECE =00000002                  bitobj_air	equ	2		; set if floating/jumping
00203ECE =00000003                  bitobj_hurt	equ	3		; set if we are hurt (Touched by enemy or player)
00203ECE                            
00203ECE =00000006                  bitobj_hit	equ	6		; set to we can hit objects
00203ECE =00000007                  bitobj_stay	equ	7		; set to stay on-screen
00203ECE                            
00203ECE                            ; --------------------------------
00203ECE                            ; obj_col
00203ECE                            ; --------------------------------
00203ECE                            
00203ECE =00000000                  bitcol_floor	equ	0		; Set for Touching floor
00203ECE =00000001                  bitcol_ceiling	equ	1		; 
00203ECE =00000002                  bitcol_wall_r	equ	2		; set for Touching floor/wall/Ceiling
00203ECE =00000003                  bitcol_wall_l	equ	3		;
00203ECE =00000004                  bitcol_obj	equ	4
00203ECE =00000005                  bitcol_obju	equ	5
00203ECE =00000006                  bitcol_objl	equ	6
00203ECE =00000007                  bitcol_objr	equ	7
00203ECE                            
00203ECE                            ; =================================================================
00203ECE                            ; ------------------------------------------------
00203ECE                            ; RAM
00203ECE                            ; ------------------------------------------------
00203ECE                            
00203ECE                            		rsset RAM_ObjectSys
00203ECE =FFFFC040                  RAM_ObjBuffer	rs.b (sizeof_obj*max_objects)
00203ECE =FFFFD940                  RAM_ObjBackup	rs.l 2
00203ECE =FFFFD948                  RAM_MicrSprBuff	rs.l max_microspr*2
00203ECE =FFFFDB48                  RAM_ObjMaxCoins	rs.l 16
00203ECE =FFFFDB88                  RAM_MicrSprCntr	rs.w 1
00203ECE =FFFFDB8A                  RAM_ObjCount	rs.w 1
00203ECE =FFFFDB8C                  sizeof_objbuff	rs.l 0
00203ECE                            ; 		inform 0,"Objects system uses: %h",sizeof_objbuff-RAM_ObjectSys
00203ECE                            		
00203ECE                            ; ====================================================================		
00203ECE                            ; --------------------------------------------
00203ECE                            ; Init
00203ECE                            ; --------------------------------------------
00203ECE                            
00203ECE                            Objects_Init:
00203ECE 41F9 FFFF C040              		lea	(RAM_ObjBuffer),a0
00203ED4 303C 18FF                  		move.w	#(sizeof_obj*max_objects)-1,d0
00203ED8                            @ClrObjs:
00203ED8 4218                        		clr.b	(a0)+
00203EDA 51C8 FFFC                   		dbf	d0,@ClrObjs
00203EDE 4279 FFFF DB88              		clr.w	(RAM_MicrSprCntr)
00203EE4 4E75                       		rts
00203EE6                             
00203EE6                            ; ====================================================================	
00203EE6                            ; --------------------------------------------
00203EE6                            ; Loop
00203EE6                            ; --------------------------------------------
00203EE6                            
00203EE6                            Objects_Run:
00203EE6 6100 C750                    		bsr	Sprites_Reset
00203EEA                            
00203EEA                            ; -----------------------------
00203EEA                            ; Run objects
00203EEA                            ; -----------------------------
00203EEA                            
00203EEA 4279 FFFF DB8A             		clr.w	(RAM_ObjCount)
00203EF0 4DF9 FFFF C040              		lea	(RAM_ObjBuffer),a6
00203EF6 3E3C 003F                   		move.w	#max_objects-1,d7
00203EFA                            @Next:
00203EFA 4A96                        		tst.l	(a6)
00203EFC 6700                        		beq.s	@NoAddr
00203EFE                             		
00203EFE 48F9 4080 FFFF D940         		movem.l	a6/d7,(RAM_ObjBackup)
00203F06 2A6E 0000                    		movea.l	obj_code(a6),a5
00203F0A 4E95                         		jsr	(a5)
00203F0C 4CF9 4080 FFFF D940         		movem.l	(RAM_ObjBackup),a6/d7
00203F14 0679 0001 FFFF DB8A          		add.w	#1,(RAM_ObjCount)
00203F1C                            @NoAddr:
00203F1C DCFC 0064                   		adda	#sizeof_obj,a6
00203F20 51CF FFD8                   		dbf	d7,@Next
00203F24                             		
00203F24                            ; -----------------------------
00203F24                            ; Show the sprites
00203F24                            ; -----------------------------
00203F24                            
00203F24                            ; Object_DrawObjects:
00203F24 45F9 FFFF D948              		lea	(RAM_MicrSprBuff),a2
00203F2A                            @NextFrm:
00203F2A 4A92                        		tst.l	(a2)
00203F2C 6700                        		beq.s	@NoAddrFrm
00203F2E 6100 0000                   		bsr	Object_MicroToSpr
00203F32 429A                        		clr.l	(a2)+
00203F34 429A                        		clr.l	(a2)+
00203F36 60F2                         		bra.s	@NextFrm
00203F38                            @NoAddrFrm:
00203F38 4279 FFFF DB88               		clr.w	(RAM_MicrSprCntr)
00203F3E 4E75                       		rts
00203F40                            ; 		inform 0,"%h",RAM_MicrSprBuff
00203F40                            		
00203F40                            ; ====================================================================
00203F40                            ; ----------------------------------------------
00203F40                            ; Subs
00203F40                            ; ----------------------------------------------
00203F40                            
00203F40                            ; **********************************************
00203F40                            ; Object display
00203F40                            ; **********************************************
00203F40                            
00203F40                            ; ----------------------------------------------
00203F40                            ; Object_DynArt
00203F40                            ; 
00203F40                            ; Input:
00203F40                            ; d0 | LONG - VRAM|Frame
00203F40                            ; d1 | LONG - DPLC data
00203F40                            ; d2 | LONG - Art data
00203F40                            ;
00203F40                            ; Uses:
00203F40                            ; a3/d3-d7
00203F40                            ; ----------------------------------------------
00203F40                             
00203F40                            Object_DPLC:
00203F40                            ; 		cmp.b	obj_frame_old(a6),d0
00203F40                            ; 		beq.s	@EndAll
00203F40 0240 00FF                  		and.w	#$FF,d0
00203F44                            ; 		move.b	d0,obj_frame_old(a6)
00203F44 2641                       		movea.l	d1,a3
00203F46 E348                       		lsl.w	#1,d0
00203F48 D6F3 0000                      		adda	(a3,d0.w),a3
00203F4C 7C00                          		moveq	#0,d6
00203F4E 3C1B                          		move.w	(a3)+,d6
00203F50 6700 0000                     		beq	@EndAll
00203F54 0446 0001                     		sub.w	#1,d6
00203F58 4840                          		swap	d0
00203F5A 0240 07FF                     		and.w	#$7FF,d0
00203F5E 7A00                          		moveq	#0,d5
00203F60 3A00                          		move.w	d0,d5		;d5 - VRAM (base)
00203F62 2E02                          		move.l	d2,d7
00203F64                            @Next:
00203F64 3213                            		move.w	(a3),d1
00203F66 E049                            		lsr.w	#8,d1
00203F68 3801                            		move.w	d1,d4
00203F6A E84C                            		lsr.w	#4,d4		;d4 - Next VRAM
00203F6C 0244 000F                       		and.w	#$F,d4
00203F70 0644 0001                       		add.w	#1,d4
00203F74 0641 0010                       		add.w	#$10,d1		;Size + 1
00203F78 4841                            		swap	d1		;Size|ROM+Here
00203F7A 321B                             		move.w	(a3)+,d1
00203F7C 0241 0FFF                        		and.w	#$FFF,d1
00203F80 EB49                            		lsl.w	#5,d1
00203F82 2007                            		move.l	d7,d0
00203F84 7600                             		moveq	#0,d3
00203F86 3601                             		move.w	d1,d3
00203F88 D083                             		add.l	d3,d0		;ROM Addr + Cell number
00203F8A                                 		
00203F8A 4841                       		swap	d1		;(Broken)|Size
00203F8C 3405                       		move.w	d5,d2
00203F8E 6100 C674                      		bsr	DMA_Set		;** TODO **
00203F92 DA44                       		add.w	d4,d5		;Next VRAM
00203F94 51CE FFCE                     		dbf	d6,@Next
00203F98                             
00203F98                            @EndAll:
00203F98 4E75                        		rts
00203F9A                             
00203F9A                            ; ----------------------------------------------
00203F9A                            ; Object_Show
00203F9A                            ; 
00203F9A                            ; Input:
00203F9A                            ; a6 - Current object
00203F9A                            ; d0 - VRAM | Frame
00203F9A                            ; 
00203F9A                            ; Uses:
00203F9A                            ; a3/d0-d1
00203F9A                            ; 
00203F9A                            ; WARNING: WITH THIS METHOD, OBJECTS MUST BE
00203F9A                            ; AFTER $FF8000 SO IT CAN CORRECTLY
00203F9A                            ; CHECK BETWEEN OBJECTS AND
00203F9A                            ; SEPARATE SPRITES
00203F9A                            ; ----------------------------------------------
00203F9A                            
00203F9A                            Object_Show:	
00203F9A 47F9 FFFF D948             		lea	(RAM_MicrSprBuff),a3
00203FA0 3439 FFFF DB88             		move.w	(RAM_MicrSprCntr),d2
00203FA6 E74A                       		lsl.w	#3,d2
00203FA8 D6C2                       		adda	d2,a3
00203FAA                            ; @next:		
00203FAA                            ; 		tst.l	(a3)
00203FAA                            ; 		beq.s	@free
00203FAA                            ; 		adda	#8,a3
00203FAA                            ; 		bra.s	@next
00203FAA                            @free:
00203FAA B6FC DB48                   		cmpa.w	#(RAM_MicrSprBuff+($200))&$FFFF,a3	; TODO: mejor check
00203FAE 6C00                        		bge.s	@full
00203FB0                             		
00203FB0 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00203FB6 342E 0008                   		move.w	obj_x(a6),d2
00203FBA 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00203FC0 6600                        		bne.s	@onscrn_X
00203FC2 946D 001C                   		sub.w	lvl_x(a5),d2
00203FC6                            @onscrn_X:
00203FC6 0642 0080                   		add.w	#$80,d2
00203FCA 0C42 0040                    		cmp.w	#$40,d2
00203FCE 6D00 0000                    		blt	@full
00203FD2 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
00203FD6 6E00 0000                   		bgt	@full
00203FDA                            
00203FDA 4842                        		swap	d2
00203FDC 342E 000C                   		move.w	obj_y(a6),d2
00203FE0 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00203FE6 6600                        		bne.s	@onscrn_Y
00203FE8 946D 0020                  		sub.w	lvl_y(a5),d2
00203FEC                            @onscrn_Y:
00203FEC 0642 0080                   		add.w	#$80,d2
00203FF0 0C42 0040                   		cmp.w	#$40,d2
00203FF4 6D00 0000                   		blt	@full
00203FF8 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
00203FFC 6E00 0000                  		bgt	@full
00204000                                		
00204000 36CE                       		move.w	a6,(a3)+	; (Object_RAM & $FFFF)
00204002 0240 00FF                  		and.w	#$FF,d0
00204006 E148                       		lsl.w	#8,d0
00204008 4840                       		swap	d0
0020400A 36C0                       		move.w	d0,(a3)+	; VRAM
0020400C 4240                       		clr.w	d0
0020400E 8280                        		or.l	d0,d1	
00204010 26C1                       		move.l	d1,(a3)+	; Frame | Maps data
00204012                            		
00204012 0679 0001 FFFF DB88        		add.w	#1,(RAM_MicrSprCntr)
0020401A                            @full:		
0020401A 4E75                        		rts
0020401C                            
0020401C                            ; ----------------------------------------------
0020401C                            ; Object_ExtSprite
0020401C                            ; 
0020401C                            ; Input:
0020401C                            ; d0 -    X | Y
0020401C                            ; d1 - Size | VRAM
0020401C                            ; 
0020401C                            ; Uses:
0020401C                            ; d4-d5, a3/d5
0020401C                            ; ----------------------------------------------
0020401C                            
0020401C                            Object_ExtSprite:
0020401C 47F9 FFFF D948             		lea	(RAM_MicrSprBuff),a3
00204022 3839 FFFF DB88             		move.w	(RAM_MicrSprCntr),d4
00204028 E74C                       		lsl.w	#3,d4
0020402A D6C4                       		adda	d4,a3
0020402C                            ; @next:		
0020402C                            ; 		tst.l	(a3)
0020402C                            ; 		beq.s	@free
0020402C                            ; 		adda	#8,a3
0020402C                            ; 		bra.s	@next
0020402C                            @free:
0020402C B6FC DB48                   		cmpa.w	#(RAM_MicrSprBuff+($200))&$FFFF,a3	; TODO: mejor check
00204030 6C00                        		bge.s	@full
00204032                             		
00204032 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204038                            		
00204038 2A00                       		move.l	d0,d5
0020403A 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00204040 6600                        		bne.s	@onscrn_Y
00204042 9A6D 0020                    		sub.w	lvl_y(a5),d5
00204046                            @onscrn_Y:
00204046 0645 0080                    		add.w	#$80,d5
0020404A 0C45 0040                   		cmp.w	#$40,d5
0020404E 6D00 0000                   		blt	@full
00204052 0C45 01A0                  		cmp.w	#(224+$80)+$40,d5
00204056 6E00 0000                  		bgt	@full
0020405A 0245 7FFF                   		and.w	#$7FFF,d5
0020405E 3685                         		move.w	d5,(a3)
00204060                            
00204060 4845                       		swap	d5
00204062 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
00204068 6600                        		bne.s	@onscrn_X
0020406A 9A6D 001C                     		sub.w	lvl_x(a5),d5
0020406E                            @onscrn_X:
0020406E 0645 0080                    		add.w	#$80,d5
00204072 0C45 0040                    		cmp.w	#$40,d5
00204076 6D00 0000                    		blt	@full
0020407A 0C45 0200                   		cmp.w	#(320+$80)+$40,d5
0020407E 6E00 0000                   		bgt	@full
00204082 0245 7FFF                  		and.w	#$7FFF,d5
00204086 3745 0006                    		move.w	d5,6(a3)
0020408A                            
0020408A 2801                         		move.l	d1,d4
0020408C 3744 0004                   		move.w	d4,4(a3)
00204090 4844                        		swap	d4
00204092 3A04                        		move.w	d4,d5
00204094 0245 000F                   		and.w	#$F,d5
00204098 3745 0002                     		move.w	d5,2(a3)
0020409C 4844                          		swap	d4
0020409E                               		
0020409E 0679 0001 FFFF DB88           		add.w	#1,(RAM_MicrSprCntr)
002040A6                            @full:		
002040A6 4E75                        		rts
002040A8                             		
002040A8                            ; ----------------------------------------------
002040A8                            ; Object_Delete
002040A8                            ; 
002040A8                            ; Input:
002040A8                            ; a6 - Current object
002040A8                            ; ----------------------------------------------
002040A8                            
002040A8                            Object_Delete:
002040A8 7000                       		moveq	#0,d0
002040AA 102E 0021                  		move.b 	obj_spwnindx(a6),d0
002040AE 4A00                       		tst.b	d0
002040B0 6700                       		beq.s	@offindx
002040B2 0440 0001                  		sub.w	#1,d0
002040B6 C0FC 000A                  		mulu.w	#$A,d0
002040BA 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
002040C0 DAC0                       		adda	d0,a5
002040C2 0895 0007                  		bclr	#7,(a5)			;Reset ON SCREEN flag
002040C6                            @offindx:
002040C6                            
002040C6                            ;  		clr.l	obj_code(a6)
002040C6                            ; 		clr.b	obj_index(a6)
002040C6                            		
002040C6 303C 0063                  		move.w	#sizeof_obj-1,d0
002040CA                            @delete:
002040CA 421E                       		clr.b	(a6)+
002040CC 51C8 FFFC                  		dbf	d0,@delete
002040D0 4E75                        		rts
002040D2                             		
002040D2                            ; ----------------------------------------------
002040D2                            ; Object_MicroToSpr
002040D2                            ; 
002040D2                            ; grab an entry from the microlist
002040D2                            ; and convert it to sprites
002040D2                            ; ----------------------------------------------
002040D2                            
002040D2                            Object_MicroToSpr:
002040D2 7000                       		moveq	#0,d0
002040D4 3012                       		move.w	(a2),d0
002040D6 4A40                       		tst.w	d0
002040D8 6B00                       		bmi.s	@FromObject
002040DA                            		
002040DA 4BF9 FFFF E5C0              		lea	(RAM_SprControl),a5
002040E0 286D 0000                  		movea.l	sprite_free(a5),a4
002040E4 B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
002040E8 6E00 0000                   		bgt	Object_Return
002040EC                             		
002040EC 3412                         		move.w	(a2),d2
002040EE 0C42 0040                   		cmp.w	#$40,d2
002040F2 6D00 0000                   		blt	@no_sprite
002040F6 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
002040FA 6E00 0000                  		bgt	@no_sprite
002040FE 3882                        		move.w	d2,(a4)
00204100 342A 0006                   		move.w	6(a2),d2
00204104 0C42 0040                    		cmp.w	#$40,d2
00204108 6D00 0000                    		blt	@no_sprite
0020410C 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
00204110 6E00 0000                   		bgt	@no_sprite
00204114 3942 0006                   		move.w	d2,6(a4)
00204118                            	
00204118 342A 0002                  		move.w	2(a2),d2
0020411C 302D 0004                  		move.w	sprite_link(a5),d0
00204120 066D 0001 0004              		add.w	#1,sprite_link(a5)
00204126 E14A                            		lsl.w	#8,d2
00204128 0242 0F00                  		and.w	#$0F00,d2
0020412C 8042                       		or.w	d2,d0
0020412E 3940 0002                  		move.w	d0,2(a4)
00204132 396A 0004 0004             		move.w	4(a2),4(a4)
00204138                             
00204138 D8FC 0008                    		adda	#8,a4
0020413C 2B4C 0000                  		move.l	a4,sprite_free(a5)
00204140 4E75                       		rts
00204142                            
00204142                            @no_sprite:
00204142 4294                       		clr.l	(a4)
00204144 42AC 0004                  		clr.l	4(a4)
00204148 4E75                       		rts
0020414A                            		
0020414A                            ; ----------------------------------------------
0020414A                            
0020414A                            @FromObject:
0020414A 0080 00FF 0000             		or.l	#$FF0000,d0
00204150 2C40                       		movea.l	d0,a6
00204152 302A 0002                   		move.w	2(a2),d0
00204156 4840                       		swap	d0
00204158 102A 0004                  		move.b	4(a2),d0
0020415C 0240 00FF                  		and.w	#$FF,d0
00204160 222A 0004                  		move.l	4(a2),d1
00204164 0281 00FF FFFF             		and.l	#$FFFFFF,d1
0020416A                            		
0020416A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204170 342E 0008                   		move.w	obj_x(a6),d2
00204174 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
0020417A 6600                        		bne.s	@onscrn_X_obj
0020417C 946D 001C                   		sub.w	lvl_x(a5),d2
00204180                            @onscrn_X_obj:
00204180 0642 0080                   		add.w	#$80,d2
00204184 0C42 0040                    		cmp.w	#$40,d2
00204188 6D00 0000                    		blt	Object_Return
0020418C 0C42 0200                   		cmp.w	#(320+$80)+$40,d2
00204190 6E00 0000                   		bgt	Object_Return
00204194 4842                        		swap	d2
00204196 342E 000C                   		move.w	obj_y(a6),d2
0020419A 082E 0007 001E              		btst	#bitobj_stay,obj_status(a6)
002041A0 6600                        		bne.s	@onscrn_Y_obj
002041A2 946D 0020                  		sub.w	lvl_y(a5),d2
002041A6                            @onscrn_Y_obj:
002041A6 0642 0080                   		add.w	#$80,d2
002041AA 0C42 0040                   		cmp.w	#$40,d2
002041AE 6D00 0000                   		blt	Object_Return
002041B2 0C42 01A0                  		cmp.w	#(224+$80)+$40,d2
002041B6 6E00 0000                  		bgt	Object_Return
002041BA                            
002041BA 4243                       		clr.w	d3
002041BC 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
002041C2 6700                       		beq.s	@Right_LR
002041C4 08C3 0000                  		bset	#0,d3
002041C8                            @Right_LR:
002041C8 082E 0001 001E             		btst	#bitobj_flipV,obj_status(a6)
002041CE 6700                       		beq.s	@Right_UD
002041D0 08C3 0001                  		bset	#1,d3
002041D4                            @Right_UD:
002041D4                            
002041D4                            ; ----------------------------------------------
002041D4                            ; Object_BldSpr_List
002041D4                            ; 
002041D4                            ; Input:
002041D4                            ; d0 - VRAM|Frame
002041D4                            ; d1 - Mappings data address
002041D4                            ; d2 - X-pos|Y-pos 
002041D4                            ; d3 - Flags
002041D4                            ;
002041D4                            ; Output:
002041D4                            ; d3 - New sprite link
002041D4                            ; 
002041D4                            ; Uses:
002041D4                            ; a3-a5/d4
002041D4                            ; ----------------------------------------------
002041D4                            
002041D4                            ; TODO: esto no checa el final
002041D4                            
002041D4                            Object_BldSpr_List:
002041D4 4BF9 FFFF E5C0              		lea	(RAM_SprControl),a5
002041DA 286D 0000                  		movea.l	sprite_free(a5),a4
002041DE B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
002041E2 6E00 0000                   		bgt	Object_Return
002041E6                             		
002041E6 2641                        		movea.l	d1,a3
002041E8 E348                        		lsl.w	#1,d0
002041EA D6F3 0000                   		adda	(a3,d0.w),a3
002041EE                             		
002041EE 0283 0000 FFFF             		and.l	#$FFFF,d3
002041F4 7C00                        		moveq	#0,d6
002041F6 1C1B                        		move.b	(a3)+,d6
002041F8 6700 0000                   		beq	Object_Return
002041FC 0446 0001                   		sub.w	#1,d6
00204200                            @Next:
00204200                            
00204200                            ; ------------
00204200                            ; Ypos check
00204200                            ; ------------
00204200                            
00204200                            ; TODO: hacer el mismo fix de abajo despues
00204200                            
00204200 3202                       		move.w	d2,d1
00204202 1013                        		move.b	(a3),d0
00204204 4880                        		ext.w	d0
00204206                             		
00204206 0803 0001                     		btst	#1,d3		; VFlip flag?
0020420A 6700 0000                    		beq	@DontFlip
0020420E 182B 0001                   		move.b	1(a3),d4
00204212 0244 0003                    		and.w	#%11,d4
00204216 E74C                         		lsl.w	#3,d4
00204218 D044                         		add.w	d4,d0
0020421A 4440                       		neg.w	d0
0020421C                            @DontFlip:
0020421C D240                        		add.w	d0,d1
0020421E 1039 FFFF ED1C              		move.b	(RAM_VidRegs+$C),d0
00204224 0240 0006                   		and.w	#%00000110,d0
00204228 6700                        		beq.s	@normal
0020422A 0641 0070                  		add.w	#$70,d1	
0020422E                            @normal:
0020422E 38C1                        		move.w	d1,(a4)+
00204230                            		
00204230                            ; ------------
00204230                            ; Size
00204230                            ; ------------
00204230                            
00204230 18EB 0001                   		move.b	1(a3),(a4)+		; Size
00204234 4240                        		clr.w	d0
00204236 102D 0005                   		move.b	5(a5),d0
0020423A D02D 0004                   		add.b	sprite_link(a5),d0
0020423E 18C0                        		move.b	d0,(a4)+		; Link
00204240 066D 0001 0004              		add.w	#1,sprite_link(a5)
00204246                             
00204246                            ; ------------
00204246                            ; Vram
00204246                            ; ------------
00204246                            
00204246 4240                         		clr.w	d0			; Vram
00204248 102B 0002                    		move.b	2(a3),d0
0020424C E148                         		lsl.w	#8,d0
0020424E 102B 0003                    		move.b	3(a3),d0
00204252 4840                         		swap	d0
00204254 3200                         		move.w	d0,d1
00204256 4840                         		swap	d0
00204258 D240                         		add.w	d0,d1
0020425A                              	
0020425A 0803 0000                     		btst	#0,d3			;Left flag?
0020425E 6700                          		beq.s	@Right
00204260 0041 0800                     		or.w	#$800,d1
00204264                            @Right:
00204264 0803 0001                     		btst	#1,d3			;V flag?
00204268 6700                          		beq.s	@Down
0020426A 0041 1000                     		or.w	#$1000,d1
0020426E                            @Down:
0020426E 38C1                         		move.w	d1,(a4)+
00204270                            		
00204270                            ; ------------
00204270                            ; Xpos check
00204270                            ; ------------
00204270                            
00204270 4240                        		clr.w	d0
00204272 7200                        		moveq	#0,d1
00204274 7800                        		moveq	#0,d4
00204276 4842                        		swap	d2
00204278 3202                        		move.w	d2,d1
0020427A 4842                        		swap	d2
0020427C                             		
0020427C 102B 0004                   		move.b	4(a3),d0
00204280 4880                        		ext.w	d0
00204282 0803 0000                     		btst	#0,d3			;Left flag?
00204286 6700 0000                    		beq	@ContX
0020428A                            
0020428A 182B 0001                   		move.b	1(a3),d4
0020428E 0244 000C                    		and.w	#%1100,d4
00204292 E34C                         		lsl.w	#1,d4
00204294 D044                         		add.w	d4,d0
00204296 4440                       		neg.w	d0
00204298 0440 0008                    		sub.w	#8,d0			;TODO: mala idea
0020429C                            
0020429C                            @ContX:
0020429C D240                        		add.w	d0,d1
0020429E 38C1                        		move.w	d1,(a4)+
002042A0 D6FC 0005                   		adda 	#5,a3
002042A4 51CE FF5A                   		dbf	d6,@Next
002042A8 2B4C 0000                   		move.l	a4,sprite_free(a5)
002042AC                             		
002042AC B8FC E5C0                   		cmpa	#((RAM_Sprites+$280)&$FFFF),a4
002042B0 6E00                        		bgt.s	Object_Return
002042B2 429C                        		clr.l	(a4)+
002042B4 429C                        		clr.l	(a4)+
002042B6                            Object_Return:
002042B6 4E75                        		rts
002042B8                             		
002042B8                            ; ----------------------------------------------
002042B8                            ; Object_IsGone
002042B8                            ; ----------------------------------------------
002042B8                            
002042B8                            Object_IsGone:
002042B8 7000                       		moveq	#0,d0
002042BA 102E 0021                  		move.b 	obj_spwnindx(a6),d0
002042BE 4A00                       		tst.b	d0
002042C0 6700                       		beq.s	@offindx
002042C2 0440 0001                  		sub.w	#1,d0
002042C6 C0FC 000A                  		mulu.w	#$A,d0
002042CA 4BF9 FFFF BC42             		lea	(RAM_LevelObjPos),a5
002042D0 DAC0                       		adda	d0,a5
002042D2 08D5 0006                  		bset	#6,(a5)			; Set GONE flag
002042D6                            @offindx:
002042D6 4E75                       		rts
002042D8                            		
002042D8                            ; ----------------------------------------------
002042D8                            ; Object_OffCheck
002042D8                            ; ----------------------------------------------
002042D8                            
002042D8                            Object_OffCheck:
002042D8 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
002042DE 49F9 FFFF BC42             		lea	(RAM_LevelObjPos),a4
002042E4                            		
002042E4 7000                       		moveq	#0,d0
002042E6 102E 0021                  		move.b 	obj_spwnindx(a6),d0
002042EA 4A00                       		tst.b	d0
002042EC 6700                       		beq.s	@return
002042EE 0440 0001                  		sub.w	#1,d0
002042F2 C0FC 000A                  		mulu.w	#$A,d0
002042F6 D8C0                       		adda	d0,a4
002042F8                            		
002042F8 302D 0020                     		move.w	lvl_y(a5),d0
002042FC 3400                          		move.w	d0,d2
002042FE 322E 000C                       		move.w	obj_y(a6),d1
00204302 0641 0060                       		add.w	#$60,d1
00204306 B240                            		cmp.w	d0,d1
00204308 6D00                            		blt.s	Object_OffDelete
0020430A 0642 0140                         		add.w	#224+$60,d2
0020430E 322E 000C                        		move.w	obj_y(a6),d1
00204312 B242                             		cmp.w	d2,d1
00204314 6E00                             		bgt.s	Object_OffDelete
00204316                                 		
00204316 302D 001C                    		move.w	lvl_x(a5),d0
0020431A 3400                         		move.w	d0,d2
0020431C 322E 0008                      		move.w	obj_x(a6),d1
00204320 0641 0040                      		add.w	#$40,d1
00204324 B240                           		cmp.w	d0,d1
00204326 6D00                           		blt.s	Object_OffDelete
00204328 0642 0180                        		add.w	#320+$40,d2		;TODO: horizontal mode 
0020432C 322E 0008                       		move.w	obj_x(a6),d1
00204330 B242                            		cmp.w	d2,d1
00204332 6E00                            		bgt.s	Object_OffDelete
00204334                                 		
00204334                            ;      		; Check for suicide
00204334                            ; 		move.w	lvl_size_y(a5),d0		; Bottomless pit
00204334                            ; 		lsl.w	#4,d0
00204334                            ; 		move.w	obj_y(a6),d1
00204334                            ; 		moveq	#0,d2
00204334                            ; 		move.b	obj_size+2(a6),d2
00204334                            ; 		lsl.w	#3,d2
00204334                            ; 		sub.w	d2,d1
00204334                            ; 		cmp.w	d0,d1
00204334                            ; 		blt	@return
00204334                            ; 		
00204334                            ; 		bset	#7,(a4)
00204334                            ; 		clr.l	obj_code(a6)
00204334                            ; 		clr.b	obj_index(a6)
00204334                            @return:
00204334 4E75                       		rts
00204336                            		
00204336                            ; a4 - respawn slot of this object
00204336                            
00204336                            Object_OffDelete:
00204336 0894 0007                  		bclr	#7,(a4)			; Reset ON SCREEN flag
0020433A                            @offindx:
0020433A                            
0020433A 42AE 0000                  		clr.l	obj_code(a6)
0020433E 422E 001D                  		clr.b	obj_index(a6)
00204342                            @Return:
00204342 4E75                        		rts
00204344                            		
00204344                            ; ----------------------------------------------
00204344                            ; Object animation
00204344                            ; 
00204344                            ; Input
00204344                            ; d1 | LONG - Animation data
00204344                            ; 
00204344                            ; Output
00204344                            ; d0 | WORD - Frame
00204344                            ; 
00204344                            ; Uses:
00204344                            ; d2
00204344                            ; ----------------------------------------------
00204344                             
00204344                            Object_Animate:
00204344 4A81                        		tst.l	d1
00204346 6700                         		beq.s	@Return
00204348 7400                        		moveq	#0,d2
0020434A 142E 001B                   		move.b	obj_anim_id+1(a6),d2
0020434E B42E 001A                   		cmp.b	obj_anim_id(a6),d2
00204352 6700                        		beq.s	@SameThing
00204354 1D6E 001A 001B              		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
0020435A 426E 0018                   		clr.w	obj_anim_next(a6)
0020435E                            @SameThing:
0020435E 142E 001A                   		move.b	obj_anim_id(a6),d2
00204362 0C02 00FF                   		cmp.b	#-1,d2
00204366 6700                        		beq.s	@Return
00204368 E34A                        		lsl.w	#1,d2
0020436A 2041                       		movea.l	d1,a0
0020436C D0F0 2000                   		adda	(a0,d2.w),a0
00204370                             
00204370 1418                        		move.b	(a0)+,d2
00204372 0C02 00FF                   		cmp.b	#-1,d2
00204376 6700                        		beq.s	@keepspd
00204378 042E 0001 001C              		sub.b	#1,obj_anim_spd(a6)
0020437E 6A00                        		bpl.s	@Return
00204380 1D42 001C                  		move.b	d2,obj_anim_spd(a6)
00204384                            @keepspd:
00204384 7200                        		moveq	#0,d1
00204386 342E 0018                   		move.w	obj_anim_next(a6),d2
0020438A 1210                        		move.b	(a0),d1
0020438C D0C2                        		adda	d2,a0
0020438E                             
0020438E 0280 FFFF 0000              		and.l	#$FFFF0000,d0
00204394 1010                        		move.b	(a0),d0
00204396 0C00 00FF                   		cmp.b	#$FF,d0
0020439A 6700                        		beq.s	@NoAnim
0020439C 0C00 00FE                   		cmp.b	#$FE,d0
002043A0 6700                        		beq.s	@GoToFrame
002043A2 0C00 00FD                   		cmp.b	#$FD,d0
002043A6 6700                        		beq.s	@LastFrame
002043A8                             		
002043A8 1D40 0020                   		move.b	d0,obj_frame(a6)
002043AC 066E 0001 0018              		add.w	#1,obj_anim_next(a6)
002043B2                            @Return:
002043B2 4E75                        		rts
002043B4                             
002043B4                            @NoAnim:
002043B4 3D7C 0001 0018              		move.w	#1,obj_anim_next(a6)
002043BA 3001                        		move.w	d1,d0
002043BC 1D40 0020                   		move.b	d0,obj_frame(a6)
002043C0 4E75                       		rts
002043C2                            @LastFrame:
002043C2 422E 001C                   		clr.b	obj_anim_spd(a6)
002043C6 4E75                       		rts
002043C8                            @GoToFrame:
002043C8 426E 0018                  		clr.w	obj_anim_next(a6)
002043CC 1D68 0001 0019             		move.b	1(a0),obj_anim_next+1(a6)
002043D2 4E75                       		rts
002043D4                            	
002043D4                            ; ------------------------------------------------
002043D4                            
002043D4                            Object_ShowPoints:
002043D4 302E 0008                   		move.w	obj_x(a6),d0
002043D8 0440 0004                   		sub.w	#4,d0
002043DC 4840                        		swap	d0
002043DE 302E 000C                   		move.w	obj_y(a6),d0
002043E2 0440 0004                   		sub.w	#4,d0
002043E6 7200                        		moveq	#0,d1
002043E8 323C 0587                   		move.w	#$587,d1
002043EC 6000 FC2E                   		bra	Object_ExtSprite
002043F0                             		
002043F0                             		
002043F0 382E 000C                   		move.w	obj_y(a6),d4
002043F4 7400                        		moveq	#0,d2
002043F6 142E 0007                   		move.b	obj_size+3(a6),d2
002043FA E74A                        		lsl.w	#3,d2
002043FC D842                        		add.w	d2,d4
002043FE 6100 0000                   		bsr	@leftright
00204402 382E 000C                   		move.w	obj_y(a6),d4
00204406 7400                        		moveq	#0,d2
00204408 142E 0006                   		move.b	obj_size+2(a6),d2
0020440C E74A                        		lsl.w	#3,d2
0020440E 9842                        		sub.w	d2,d4
00204410                            
00204410                            ;  		rts
00204410                            @leftright:
00204410 302E 0008                   		move.w	obj_x(a6),d0
00204414 0440 0002                   		sub.w	#2,d0
00204418 4840                        		swap	d0
0020441A 3004                        		move.w	d4,d0
0020441C 7200                        		moveq	#0,d1
0020441E 323C 0587                   		move.w	#$587,d1
00204422 6100 FBF8                   		bsr	Object_ExtSprite
00204426                             		
00204426 302E 0008                   		move.w	obj_x(a6),d0
0020442A 7400                        		moveq	#0,d2
0020442C 142E 0004                   		move.b	obj_size(a6),d2
00204430 E74A                        		lsl.w	#3,d2
00204432 9042                        		sub.w	d2,d0
00204434 4840                        		swap	d0
00204436 3004                        		move.w	d4,d0
00204438 6100 FBE2                   		bsr	Object_ExtSprite
0020443C                             		
0020443C 302E 0008                   		move.w	obj_x(a6),d0
00204440 0440 0003                   		sub.w	#3,d0
00204444 7400                        		moveq	#0,d2
00204446 142E 0005                   		move.b	obj_size+1(a6),d2
0020444A E74A                        		lsl.w	#3,d2
0020444C D042                        		add.w	d2,d0
0020444E 4840                        		swap	d0
00204450 3004                        		move.w	d4,d0
00204452 6000 FBC8                   		bra	Object_ExtSprite
00204456                             	
00204456                            ; **********************************************
00204456                            ; Object level collision
00204456                            ; **********************************************
00204456                            
00204456                            ; ************************
00204456                            ; Find floor collision
00204456                            ; CENTER
00204456                            ; 
00204456                            ; Input:
00204456                            ; a6 - Object to read
00204456                            ; a5 - Level buffer
00204456                            ; a4 - Layout data
00204456                            ; 
00204456                            ; Output:
00204456                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
00204456                            ; 
00204456                            ; Uses:
00204456                            ; a3-a4 | d4-d5
00204456                            ; ************************
00204456                            
00204456                            object_FindPrz_Floor:
00204456 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020445C 286D 0018                    		movea.l	lvl_prizes(a5),a4
00204460 6000                         		bra.s	objSearchCol_Floor
00204462                              		
00204462                            object_FindCol_Floor:
00204462 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204468 286D 0014                    		movea.l	lvl_collision(a5),a4
0020446C                            
0020446C                            objSearchCol_Floor:
0020446C 7000                       		moveq	#0,d0
0020446E 7800                       		moveq	#0,d4
00204470 7A00                       		moveq	#0,d5
00204472 382E 000C                   		move.w	obj_y(a6),d4
00204476 1A2E 0007                   		move.b	obj_size+3(a6),d5
0020447A E74D                        		lsl.w	#3,d5
0020447C D845                        		add.w	d5,d4
0020447E 4A44                        		tst.w	d4
00204480 6B00 0000                   		bmi	@no_col
00204484 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00204488 E94D                        		lsl.w	#4,d5
0020448A B845                        		cmp.w	d5,d4
0020448C 6C00 0000                   		bge	@no_col
00204490 3A04                        		move.w	d4,d5
00204492 E98D                          		lsl.l	#4,d5
00204494 2005                           		move.l	d5,d0
00204496 E84C                         		lsr.w	#4,d4
00204498 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0020449C D8C4                         		adda	d4,a4
0020449E                             		
0020449E                            ; ------------------------
0020449E                            ; X check
0020449E                            ; ------------------------
0020449E                            
0020449E 264C                         		movea.l	a4,a3
002044A0 382E 0008                   		move.w	obj_x(a6),d4
002044A4 4A44                        		tst.w	d4
002044A6 6B00                        		bmi.s	@force_on
002044A8 3A2D 0030                   		move.w	lvl_size_x(a5),d5
002044AC E94D                        		lsl.w	#4,d5
002044AE B845                         		cmp.w	d5,d4
002044B0 6C00                         		bge.s	@force_on
002044B2 E84C                        		lsr.w	#4,d4
002044B4 D6C4                        		adda 	d4,a3
002044B6                            ;  		btst	#7,(a3)
002044B6                            ;  		bne.s	@no_col
002044B6                            ;  		tst.b	(a3)
002044B6                            ;  		beq.s	@no_col
002044B6 E94C                        		lsl.w	#4,d4
002044B8 4844                        		swap	d4
002044BA 8084                        		or.l	d4,d0			;XXXYYY00
002044BC                               		
002044BC 1013                        		move.b	(a3),d0	
002044BE 4E75                        		rts
002044C0                             		
002044C0                            @force_on:
002044C0 7001                        		moveq	#1,d0
002044C2                            @no_col:
002044C2 4E75                       		rts
002044C4                            		
002044C4                            ; ************************
002044C4                            ; Find side collision
002044C4                            ; CENTER
002044C4                            ;
002044C4                            ; Input:
002044C4                            ; a6 - Object to read
002044C4                            ; a5 - Level buffer
002044C4                            ; a4 - Layout data
002044C4                            ; 
002044C4                            ; Output:
002044C4                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
002044C4                            ; 
002044C4                            ; Uses:
002044C4                            ; a3-a4 | d4-d5
002044C4                            ; ************************
002044C4                            
002044C4                            object_FindPrz_Wall:
002044C4 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
002044CA 286D 0018                    		movea.l	lvl_prizes(a5),a4
002044CE 6000                         		bra.s	objSearchCol_Wall
002044D0                              		
002044D0                            object_FindCol_Wall:
002044D0 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
002044D6 286D 0014                    		movea.l	lvl_collision(a5),a4
002044DA                            
002044DA                            objSearchCol_Wall:
002044DA 7000                       		moveq	#0,d0
002044DC 7800                       		moveq	#0,d4
002044DE 7A00                       		moveq	#0,d5
002044E0 382E 000C                   		move.w	obj_y(a6),d4
002044E4 1A2E 0007                   		move.b	obj_size+3(a6),d5
002044E8 E74D                        		lsl.w	#3,d5
002044EA D845                        		add.w	d5,d4
002044EC 0444 0001                   		sub.w	#1,d4
002044F0 4A44                        		tst.w	d4
002044F2 6B00 0000                   		bmi	@no_col
002044F6 3A2D 0032                   		move.w	lvl_size_y(a5),d5
002044FA E94D                        		lsl.w	#4,d5
002044FC B845                        		cmp.w	d5,d4
002044FE 6C00 0000                   		bge	@no_col
00204502 E84C                        		lsr.w	#4,d4
00204504 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
00204508 D8C4                        		adda	d4,a4
0020450A E18C                        		lsl.l	#8,d4
0020450C 2004                        		move.l	d4,d0
0020450E                             		
0020450E                            ; ------------------------
0020450E                            ; X check
0020450E                            ; ------------------------
0020450E                            
0020450E 264C                        		movea.l	a4,a3
00204510 382E 0008                   		move.w	obj_x(a6),d4
00204514 4A44                        		tst.w	d4
00204516 6B00                        		bmi.s	@force_on
00204518 3A2D 0030                   		move.w	lvl_size_x(a5),d5
0020451C E94D                        		lsl.w	#4,d5
0020451E B845                         		cmp.w	d5,d4
00204520 6C00                         		bge.s	@force_on
00204522 E84C                        		lsr.w	#4,d4
00204524 D6C4                        		adda 	d4,a3
00204526 E94C                        		lsl.w	#4,d4
00204528 4844                        		swap	d4
0020452A                             		
0020452A 7A00                       		moveq	#0,d5
0020452C 382E 000C                     		move.w	obj_y(a6),d4
00204530 1A2E 0007                     		move.b	obj_size+3(a6),d5
00204534 E74D                          		lsl.w	#3,d5
00204536 D845                          		add.w	d5,d4
00204538                               		
00204538 0444 0001                     		sub.w	#1,d4
0020453C 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00204540 E94D                        		lsl.w	#4,d5
00204542 4845                        		swap	d5
00204544 1A2E 0006                   		move.b	obj_size+2(a6),d5
00204548 0245 00FF                    		and.w	#$FF,d5
0020454C E24D                         		lsr.w	#1,d5
0020454E 4A45                          		tst.w	d5
00204550 6700                          		beq.s	@nxt_y
00204552 0445 0001                     		sub.w	#1,d5
00204556                            @nxt_y:
00204556 4845                       		swap	d5
00204558 4A44                        		tst.w	d4
0020455A 6B00                        		bmi.s	@force_on
0020455C B845                        		cmp.w	d5,d4
0020455E 6C00                        		bge.s	@zero_y
00204560 0813 0007                   		btst	#7,(a3)
00204564 6600                        		bne.s	@zero_y
00204566 4A13                       		tst.b	(a3)
00204568 6700                       		beq.s	@zero_y
0020456A 8084                         		or.l	d4,d0
0020456C 4844                         		swap	d4
0020456E E98C                         		lsl.l	#4,d4
00204570 0284 000F FF00               		and.l	#$000FFF00,d4
00204576 8084                         		or.l	d4,d0
00204578 1013                        		move.b	(a3),d0
0020457A 4E75                        		rts
0020457C                            @zero_y:
0020457C 96ED 0030                   		suba	lvl_size_x(a5),a3
00204580 0444 0010                   		sub.w	#$10,d4
00204584 4845                       		swap	d5
00204586 51CD FFCE                    		dbf	d5,@nxt_y
0020458A                            
0020458A                            @force_on:
0020458A 103C 0000                  		move.b	#0,d0
0020458E                            @no_col:
0020458E 4E75                       		rts
00204590                            
00204590                            ; ************************
00204590                            ; Find Ceiling collision
00204590                            ; CENTER
00204590                            ; 
00204590                            ; Input:
00204590                            ; a6 - Object to read
00204590                            ; a5 - Level buffer
00204590                            ; a4 - Layout data
00204590                            
00204590                            ; Output:
00204590                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
00204590                            ; 
00204590                            ; Uses:
00204590                            ; a3-a4 | d4-d5
00204590                            ; ************************
00204590                            
00204590                            object_FindPrz_Ceiling:
00204590 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204596 286D 0018                    		movea.l	lvl_prizes(a5),a4
0020459A 6000                         		bra.s	objSearchCol_Ceiling
0020459C                              		
0020459C                            object_FindCol_Ceiling:
0020459C 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
002045A2 286D 0014                    		movea.l	lvl_collision(a5),a4
002045A6                              		
002045A6                            objSearchCol_Ceiling:
002045A6 7000                       		moveq	#0,d0
002045A8 7800                       		moveq	#0,d4
002045AA 7A00                       		moveq	#0,d5
002045AC 382E 000C                   		move.w	obj_y(a6),d4
002045B0 1A2E 0006                      		move.b	obj_size+2(a6),d5
002045B4 E74D                           		lsl.w	#3,d5
002045B6 9845                           		sub.w	d5,d4			;UP SIZE
002045B8 4A44                        		tst.w	d4
002045BA 6B00 0000                   		bmi	@no_col
002045BE 3A2D 0032                   		move.w	lvl_size_y(a5),d5
002045C2 E94D                        		lsl.w	#4,d5
002045C4 B845                        		cmp.w	d5,d4
002045C6 6C00 0000                   		bge	@no_col
002045CA E84C                        		lsr.w	#4,d4
002045CC 0244 0FFF                   		and.w	#$FFF,d4
002045D0 3004                        		move.w	d4,d0
002045D2 E188                        		lsl.l	#8,d0			;000YYY00
002045D4 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
002045D8 D8C4                        		adda	d4,a4
002045DA                            		
002045DA                            ; ------------------------
002045DA                            ; X check
002045DA                            ; ------------------------
002045DA                            
002045DA 264C                        		movea.l	a4,a3
002045DC 382E 0008                   		move.w	obj_x(a6),d4
002045E0 0444 0001                   		sub.w	#1,d4
002045E4 4A44                        		tst.w	d4
002045E6 6B00                        		bmi.s	@no_col
002045E8 3A2D 0030                   		move.w	lvl_size_x(a5),d5
002045EC E94D                        		lsl.w	#4,d5
002045EE B845                          		cmp.w	d5,d4
002045F0 6C00                          		bge.s	@no_col
002045F2 E84C                        		lsr.w	#4,d4
002045F4 D6C4                        		adda 	d4,a3
002045F6                            ;  		btst	#7,(a3)
002045F6                            ;  		bne.s	@no_col
002045F6                            ;  		tst.b	(a3)
002045F6                            ;  		beq.s	@no_col
002045F6 E94C                        		lsl.w	#4,d4
002045F8 4844                        		swap	d4
002045FA 8084                        		or.l	d4,d0			;XXXYYY00
002045FC 1013                        		move.b	(a3),d0	
002045FE                            @no_col:
002045FE 4E75                       		rts
00204600                            		
00204600                            ; ************************
00204600                            ; Find floor collision
00204600                            ; Left/Right points
00204600                            ;
00204600                            ; Input:
00204600                            ; a6 - Object to read
00204600                            ; a5 - Level buffer
00204600                            ; a4 - Layout data
00204600                            ; 
00204600                            ; Output:
00204600                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
00204600                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
00204600                            ; 
00204600                            ; Uses:
00204600                            ; a3 | d4-d5
00204600                            ; ************************
00204600                            
00204600                            object_FindPrz_FloorSides:
00204600 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204606 286D 0018                    		movea.l	lvl_prizes(a5),a4
0020460A 6000                       		bra.s	objSearchCol_FloorSides
0020460C                            		
0020460C                            object_FindCol_FloorSides:
0020460C 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204612 286D 0014                    		movea.l	lvl_collision(a5),a4
00204616                              		
00204616                            objSearchCol_FloorSides:
00204616 7000                       		moveq	#0,d0
00204618 7200                       		moveq	#0,d1
0020461A                            
0020461A 7800                       		moveq	#0,d4
0020461C 7A00                       		moveq	#0,d5
0020461E 382E 000C                   		move.w	obj_y(a6),d4
00204622 1A2E 0007                    		move.b	obj_size+3(a6),d5
00204626 E74D                        		lsl.w	#3,d5
00204628 D845                        		add.w	d5,d4
0020462A 4A44                        		tst.w	d4
0020462C 6B00 0000                   		bmi	@no_col
00204630 3A2D 0032                    		move.w	lvl_size_y(a5),d5
00204634 E94D                         		lsl.w	#4,d5
00204636 B845                         		cmp.w	d5,d4
00204638 6C00 0000                    		bge	@no_col
0020463C E84C                        		lsr.w	#4,d4
0020463E 3004                         		move.w	d4,d0
00204640 3204                         		move.w	d4,d1
00204642 E188                         		lsl.l	#8,d0			; LEFT 000YYY00
00204644 E189                         		lsl.l	#8,d1			;RIGHT 000YYY00
00204646 C8ED 0030                   		mulu.w	lvl_size_x(a5),d4
0020464A D8C4                        		adda	d4,a4
0020464C                            
0020464C                            ; ------------------------
0020464C                            ; X check
0020464C                            ; 
0020464C                            ; LEFT
0020464C                            ; ------------------------
0020464C                            
0020464C 7800                        		moveq	#0,d4
0020464E 7A00                       		moveq	#0,d5
00204650 3A2E 0008                    		move.w	obj_x(a6),d5
00204654 382D 0030                   		move.w	lvl_size_x(a5),d4
00204658 E94C                        		lsl.w	#4,d4
0020465A BA44                             		cmp.w	d4,d5
0020465C 6D00                             		blt.s	@dontfix_l
0020465E 0445 0001                        		sub.w	#1,d5
00204662                            @dontfix_l:
00204662 4A45                        		tst.w	d5
00204664 6B00                        		bmi.s	@zero_l
00204666                             		
00204666 3805                        		move.w	d5,d4
00204668 E84C                        		lsr.w	#4,d4
0020466A 264C                        		movea.l	a4,a3
0020466C D6C4                        		adda 	d4,a3
0020466E 4845                        		swap	d5		; d5 - XRead | Free
00204670 1A2E 0004                   		move.b	obj_size(a6),d5
00204674 0245 00FF                   		and.w	#$FF,d5		; d5 - XRead | Loop
00204678 4A45                        		tst.w	d5
0020467A 6700                        		beq.s	@zero_l
0020467C                            @Next_col_l:
0020467C 4845                        		swap	d5		; d5 - Loop | Xread
0020467E                             		
0020467E 4A13                        		tst.b	(a3)
00204680 6700                        		beq.s	@No_col_l
00204682 0813 0007                   		btst	#7,(a3)
00204686 6600                        		bne.s	@No_col_l
00204688 3805                        		move.w	d5,d4
0020468A 0244 FFF0                   		and.w	#$FFF0,d4
0020468E 4844                        		swap	d4
00204690 8284                        		or.l	d4,d1		; LEFT XXXYYY00
00204692 1213                       		move.b	(a3),d1
00204694 6000                        		bra.s	@zero_l
00204696                            @No_col_l:
00204696                            
00204696 0445 0008                   		sub.w	#8,d5
0020469A 6A00                          		bpl.s	@Fine_l
0020469C 4245                          		clr.w	d5
0020469E                            @Fine_l:
0020469E 3805                        		move.w	d5,d4
002046A0 E84C                        		lsr.w	#4,d4
002046A2 264C                        		movea.l	a4,a3
002046A4 D6C4                        		adda 	d4,a3
002046A6 4845                        		swap	d5		; d5 - XRead | Loop
002046A8 51CD FFD2                   		dbf	d5,@Next_col_l
002046AC                            @zero_l:
002046AC                            		
002046AC                            ; ------------------------
002046AC                            ; X check
002046AC                            ; 
002046AC                            ; RIGHT
002046AC                            ; ------------------------
002046AC                            
002046AC 7800                        		moveq	#0,d4
002046AE 7A00                        		moveq	#0,d5
002046B0 3A2E 0008                   		move.w	obj_x(a6),d5
002046B4 0445 0001                   		sub.w	#1,d5
002046B8 4A45                        		tst.w	d5
002046BA 6B00                        		bmi.s	@no_col
002046BC 382D 0030                   		move.w	lvl_size_x(a5),d4
002046C0 E94C                        		lsl.w	#4,d4
002046C2 BA44                          		cmp.w	d4,d5
002046C4 6C00                           		bge.s	@no_col
002046C6                            
002046C6 3805                        		move.w	d5,d4
002046C8 E84C                        		lsr.w	#4,d4
002046CA 264C                        		movea.l	a4,a3
002046CC D6C4                        		adda 	d4,a3
002046CE 4845                        		swap	d5		;d5 - XRead | Free
002046D0 1A2E 0005                   		move.b	obj_size+1(a6),d5
002046D4 0245 00FF                   		and.w	#$FF,d5		;d5 - XRead | Loop
002046D8 4A45                        		tst.w	d5
002046DA 6700                        		beq.s	@no_col
002046DC                             		
002046DC                            @Next_col_r:
002046DC 4845                        		swap	d5		;d5 - Loop | Xread
002046DE 4A13                        		tst.b	(a3)
002046E0 6700                        		beq.s	@No_col_r
002046E2 0813 0007                   		btst	#7,(a3)
002046E6 6600                        		bne.s	@No_col_r
002046E8 382D 0030                   		move.w	lvl_size_x(a5),d4
002046EC E94C                        		lsl.w	#4,d4
002046EE BA44                          		cmp.w	d4,d5
002046F0 6C00                           		bge.s	@no_col
002046F2                                		
002046F2 3805                        		move.w	d5,d4
002046F4 0244 FFF0                   		and.w	#$FFF0,d4
002046F8 4844                        		swap	d4
002046FA 8084                        		or.l	d4,d0		; RIGHT XXXYYY00
002046FC 1013                       		move.b	(a3),d0
002046FE 4E75                        		rts
00204700                             		
00204700                            @No_col_r:
00204700 0645 0008                   		add.w	#8,d5
00204704 3805                        		move.w	d5,d4
00204706 E84C                        		lsr.w	#4,d4
00204708 264C                        		movea.l	a4,a3
0020470A D6C4                        		adda 	d4,a3
0020470C 4845                        		swap	d5		;d5 - XRead | Loop
0020470E 51CD FFCC                   		dbf	d5,@Next_col_r
00204712                             		
00204712                            ; ------------------------
00204712                            
00204712                            @no_col:
00204712 4E75                       		rts
00204714                            
00204714                            ; ************************
00204714                            ; Find side collision
00204714                            ; LEFT/RIGHT
00204714                            ;
00204714                            ; Input:
00204714                            ; (Nothing)
00204714                            ; 
00204714                            ; Output:
00204714                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
00204714                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
00204714                            ; 
00204714                            ; Uses:
00204714                            ; a3-a4 | d4-d5
00204714                            ; ************************
00204714                            
00204714                            object_FindPrz_WallSides:
00204714 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020471A 286D 0018                    		movea.l	lvl_prizes(a5),a4
0020471E 6000                         		bra.s	objSearchCol_WallSides
00204720                              		
00204720                            object_FindCol_WallSides:
00204720 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204726 286D 0014                    		movea.l	lvl_collision(a5),a4
0020472A                              		
0020472A                            objSearchCol_WallSides:
0020472A 7000                        		moveq	#0,d0
0020472C 7200                        		moveq	#0,d1
0020472E 7800                        		moveq	#0,d4
00204730 7A00                        		moveq	#0,d5
00204732                            
00204732                            ; ------------------------
00204732                            ; Left
00204732                            ; ------------------------
00204732                            
00204732 4A2E 0004                  		tst.b	obj_size(a6)
00204736 6700 0000                  		beq	@ignore_l
0020473A                            			
0020473A                            ; --------------
0020473A                            ; LEFT DOWN
0020473A                            ; --------------
0020473A                            
0020473A 3A2E 000C                    		move.w	obj_y(a6),d5
0020473E 4A45                         		tst.w	d5
00204740 6B00 0000                  		bmi	@ignore_l
00204744 382D 0032                  		move.w	lvl_size_y(a5),d4
00204748 E94C                       		lsl.w	#4,d4
0020474A BA44                       		cmp.w	d4,d5
0020474C 6C00 0000                  		bge	@ignore_l
00204750 4845                         		swap	d5
00204752 4245                         		clr.w	d5
00204754 1A2E 0007                    		move.b	obj_size+3(a6),d5	
00204758 4A45                         		tst.w	d5
0020475A 6700 0000                    		beq	@ignore_l
0020475E 0445 0001                    		sub.w	#1,d5
00204762                            @next_passld:
00204762 4845                       		swap	d5
00204764 4A45                       		tst.w	d5
00204766 6B00 0000                  		bmi	@ignore_l
0020476A 3805                       		move.w	d5,d4
0020476C 4844                       		swap	d4
0020476E 382E 0008                  		move.w	obj_x(a6),d4
00204772 0444 0001                  		sub.w	#1,d4
00204776 4245                       		clr.w	d5
00204778 1A2E 0004                  		move.b	obj_size(a6),d5
0020477C E74D                       		lsl.w	#3,d5
0020477E 9845                       		sub.w	d5,d4			; left X size
00204780 4A44                       		tst.w	d4
00204782 6B00 0000                  		bmi	@forceset_l
00204786 E84C                       		lsr.w	#4,d4
00204788 264C                        		movea.l	a4,a3
0020478A D6C4                       		adda	d4,a3
0020478C 4844                       		swap	d4
0020478E 3A04                       		move.w	d4,d5
00204790 E84C                         		lsr.w	#4,d4
00204792 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
00204796 D6C4                         		adda	d4,a3
00204798                              		
00204798 0813 0007                    		btst	#7,(a3)
0020479C 6600                         		bne.s	@next_ld
0020479E 4A13                         		tst.b	(a3)
002047A0 6600 0000                    		bne	@found_l
002047A4                            @next_ld:
002047A4 0645 0008                  		add.w	#8,d5
002047A8 382D 0032                  		move.w	lvl_size_y(a5),d4
002047AC E94C                       		lsl.w	#4,d4
002047AE BA44                       		cmp.w	d4,d5
002047B0 6C00                       		bge.s	@gone_ld
002047B2                            		
002047B2 4845                       		swap	d5
002047B4 51CD FFAC                  		dbf	d5,@next_passld
002047B8                            @gone_ld:
002047B8                            
002047B8                            ; --------------
002047B8                            ; LEFT UP
002047B8                            ; --------------
002047B8                            
002047B8 3A2E 000C                    		move.w	obj_y(a6),d5
002047BC 4A45                         		tst.w	d5
002047BE 6B00 0000                  		bmi	@ignore_l
002047C2 382D 0032                  		move.w	lvl_size_y(a5),d4
002047C6 E94C                       		lsl.w	#4,d4
002047C8 BA44                       		cmp.w	d4,d5
002047CA 6C00 0000                  		bge	@ignore_l
002047CE 4845                         		swap	d5
002047D0 4245                         		clr.w	d5
002047D2 1A2E 0006                    		move.b	obj_size+2(a6),d5	
002047D6 4A45                         		tst.w	d5
002047D8 6700                         		beq.s	@ignore_l
002047DA 0445 0001                    		sub.w	#1,d5
002047DE                            @next_passlu:
002047DE 4845                       		swap	d5
002047E0 4A45                       		tst.w	d5
002047E2 6B00                       		bmi.s	@ignore_l
002047E4 3805                       		move.w	d5,d4
002047E6 4844                       		swap	d4
002047E8 382E 0008                  		move.w	obj_x(a6),d4
002047EC 0444 0001                  		sub.w	#1,d4
002047F0 4245                       		clr.w	d5
002047F2 1A2E 0004                  		move.b	obj_size(a6),d5
002047F6 E74D                       		lsl.w	#3,d5
002047F8 9845                       		sub.w	d5,d4			; left X size
002047FA 4A44                       		tst.w	d4
002047FC 6B00                       		bmi.s	@forceset_l
002047FE E84C                       		lsr.w	#4,d4
00204800 264C                        		movea.l	a4,a3
00204802 D6C4                       		adda	d4,a3
00204804 4844                       		swap	d4
00204806 3A04                       		move.w	d4,d5
00204808 E84C                         		lsr.w	#4,d4
0020480A C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0020480E D6C4                         		adda	d4,a3
00204810                              		
00204810 0813 0007                    		btst	#7,(a3)
00204814 6600                         		bne.s	@next_lu
00204816 4A13                         		tst.b	(a3)
00204818 6600                         		bne.s	@found_l	
0020481A                            @next_lu:
0020481A 0445 0008                  		sub.w	#8,d5
0020481E 4A45                       		tst.w	d5
00204820 6B00                       		bmi.s	@ignore_l
00204822 4845                       		swap	d5
00204824 51CD FFB8                  		dbf	d5,@next_passlu
00204828                            		
00204828 6000                       		bra.s	@ignore_l
0020482A                            		
0020482A                            ; --------------
0020482A                            ; Found left
0020482A                            ; --------------
0020482A                            
0020482A                            @forceset_l:
0020482A 123C 0001                  		move.b	#1,d1
0020482E 6000                       		bra.s	@ignore_l
00204830                            		
00204830                            @found_l:
00204830 0285 0000 FFF0             		and.l	#$FFF0,d5
00204836 E98D                       		lsl.l	#4,d5
00204838 8285                       		or.l	d5,d1
0020483A 7A00                        		moveq	#0,d5
0020483C 382E 0008                  		move.w	obj_x(a6),d4
00204840 0444 0001                  		sub.w	#1,d4
00204844 1A2E 0004                  		move.b	obj_size(a6),d5
00204848 E74D                       		lsl.w	#3,d5
0020484A 9845                       		sub.w	d5,d4
0020484C 0284 0000 FFF0             		and.l	#$FFF0,d4
00204852 4844                       		swap	d4
00204854 8284                       		or.l	d4,d1
00204856 1213                        		move.b	(a3),d1
00204858                            @ignore_l:
00204858                            
00204858                            ; ------------------------
00204858                            ; Right
00204858                            ; ------------------------
00204858                             
00204858 4A2E 0005                  		tst.b	obj_size+1(a6)
0020485C 6700 0000                  		beq	@ignore_r
00204860                            		
00204860                            ; --------------
00204860                            ; RIGHT DOWN
00204860                            ; --------------
00204860                            
00204860 7A00                       		moveq	#0,d5
00204862 3A2E 000C                    		move.w	obj_y(a6),d5
00204866 4A45                         		tst.w	d5
00204868 6B00 0000                  		bmi	@ignore_r
0020486C 382D 0032                  		move.w	lvl_size_y(a5),d4
00204870 E94C                       		lsl.w	#4,d4
00204872 BA44                       		cmp.w	d4,d5
00204874 6C00 0000                  		bge	@ignore_r
00204878 4845                         		swap	d5
0020487A 4245                         		clr.w	d5
0020487C 1A2E 0007                    		move.b	obj_size+3(a6),d5	
00204880 4A45                         		tst.w	d5
00204882 6700 0000                    		beq	@ignore_r
00204886 0445 0001                    		sub.w	#1,d5
0020488A                            @next_passrd:
0020488A 4845                       		swap	d5
0020488C 4A45                       		tst.w	d5
0020488E 6B00 0000                  		bmi	@ignore_r
00204892                            		
00204892 3805                       		move.w	d5,d4
00204894 4844                       		swap	d4
00204896 382E 0008                  		move.w	obj_x(a6),d4
0020489A 4245                       		clr.w	d5
0020489C 1A2E 0005                  		move.b	obj_size+1(a6),d5
002048A0 E74D                       		lsl.w	#3,d5
002048A2 D845                       		add.w	d5,d4			; left X size
002048A4 3A2D 0030                  		move.w	lvl_size_x(a5),d5
002048A8 E94D                       		lsl.w	#4,d5
002048AA B845                       		cmp.w	d5,d4
002048AC 6C00 0000                  		bge	@forceset_r
002048B0                            		
002048B0 E84C                       		lsr.w	#4,d4
002048B2 264C                        		movea.l	a4,a3
002048B4 D6C4                       		adda	d4,a3
002048B6 4844                       		swap	d4
002048B8 3A04                       		move.w	d4,d5
002048BA E84C                         		lsr.w	#4,d4
002048BC C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
002048C0 D6C4                         		adda	d4,a3
002048C2                              		
002048C2 0813 0007                    		btst	#7,(a3)
002048C6 6600                         		bne.s	@next_rd
002048C8 4A13                         		tst.b	(a3)
002048CA 6600 0000                    		bne	@found_r
002048CE                            @next_rd:
002048CE 0645 0008                  		add.w	#8,d5
002048D2 382D 0032                  		move.w	lvl_size_y(a5),d4
002048D6 E94C                       		lsl.w	#4,d4
002048D8 BA44                       		cmp.w	d4,d5
002048DA 6C00                       		bge.s	@gone_rd
002048DC 4845                       		swap	d5
002048DE 51CD FFAA                  		dbf	d5,@next_passrd
002048E2                            @gone_rd:
002048E2                            
002048E2                            ; --------------
002048E2                            ; RIGHT UP
002048E2                            ; --------------
002048E2                            
002048E2 7A00                       		moveq	#0,d5
002048E4 3A2E 000C                    		move.w	obj_y(a6),d5
002048E8 4A45                         		tst.w	d5
002048EA 6B00 0000                  		bmi	@ignore_r
002048EE 382D 0032                  		move.w	lvl_size_y(a5),d4
002048F2 E94C                       		lsl.w	#4,d4
002048F4 BA44                       		cmp.w	d4,d5
002048F6 6C00 0000                  		bge	@ignore_r
002048FA 4845                         		swap	d5
002048FC 4245                         		clr.w	d5
002048FE 1A2E 0006                    		move.b	obj_size+2(a6),d5	
00204902 4A45                         		tst.w	d5
00204904 6700                         		beq.s	@ignore_r
00204906 0445 0001                    		sub.w	#1,d5
0020490A                            @next_passru:
0020490A 4845                       		swap	d5
0020490C 4A45                       		tst.w	d5
0020490E 6B00                       		bmi.s	@ignore_r
00204910                            		
00204910 3805                       		move.w	d5,d4
00204912 4844                       		swap	d4
00204914 382E 0008                  		move.w	obj_x(a6),d4
00204918 4245                       		clr.w	d5
0020491A 1A2E 0005                  		move.b	obj_size+1(a6),d5
0020491E E74D                       		lsl.w	#3,d5
00204920 D845                       		add.w	d5,d4			; left X size
00204922 3A2D 0030                  		move.w	lvl_size_x(a5),d5
00204926 E94D                       		lsl.w	#4,d5
00204928 B845                       		cmp.w	d5,d4
0020492A 6C00                       		bge.s	@forceset_r
0020492C                            		
0020492C E84C                       		lsr.w	#4,d4
0020492E 264C                        		movea.l	a4,a3
00204930 D6C4                       		adda	d4,a3
00204932 4844                       		swap	d4
00204934                            		
00204934 3A04                       		move.w	d4,d5
00204936 E84C                         		lsr.w	#4,d4
00204938 C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
0020493C D6C4                         		adda	d4,a3
0020493E                              		
0020493E 0813 0007                    		btst	#7,(a3)
00204942 6600                         		bne.s	@next_ru
00204944 4A13                         		tst.b	(a3)
00204946 6600                         		bne.s	@found_r
00204948                            @next_ru:
00204948 0445 0008                  		sub.w	#8,d5
0020494C 4A45                       		tst.w	d5
0020494E 6B00                       		bmi.s	@ignore_r
00204950                            		
00204950 4845                       		swap	d5
00204952 51CD FFB6                  		dbf	d5,@next_passru
00204956                            
00204956 6000                       		bra.s	@ignore_r
00204958                            
00204958                            ; --------------
00204958                            ; Found right
00204958                            ; --------------
00204958                            
00204958                            @forceset_r:
00204958 103C 0001                  		move.b	#1,d0
0020495C 6000                       		bra.s	@ignore_r
0020495E                            		
0020495E                            @found_r:
0020495E 0285 0000 FFF0             		and.l	#$FFF0,d5
00204964 E98D                       		lsl.l	#4,d5
00204966 8085                       		or.l	d5,d0
00204968 7A00                        		moveq	#0,d5
0020496A 382E 0008                  		move.w	obj_x(a6),d4
0020496E 1A2E 0005                  		move.b	obj_size+1(a6),d5
00204972 E74D                       		lsl.w	#3,d5
00204974 D845                       		add.w	d5,d4
00204976 0284 0000 FFF0             		and.l	#$FFF0,d4
0020497C 4844                       		swap	d4
0020497E 8084                       		or.l	d4,d0
00204980 1013                        		move.b	(a3),d0	
00204982                            @ignore_r:
00204982                            		
00204982                            ; ------------------------
00204982                            ; Finish checking
00204982                            ; ------------------------
00204982                            
00204982 4E75                       		rts
00204984                            		
00204984                            ; ************************
00204984                            ; Find ceiling collision
00204984                            ; LEFT/RIGHT
00204984                            ; 
00204984                            ; Input:
00204984                            ; (Nothing)
00204984                            ; 
00204984                            ; Output:
00204984                            ; d0 | LONG - RIGHT FEET Xpos|Ypos|ID $XXXYYYID
00204984                            ; d1 | LONG - LEFT FEET Xpos|Ypos|ID $XXXYYYID
00204984                            ; 
00204984                            ; Uses:
00204984                            ; a3-a4 | d4-d5
00204984                            ; ************************
00204984                            
00204984                            object_FindPrz_CeilingSides:
00204984 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020498A 286D 0018                    		movea.l	lvl_prizes(a5),a4
0020498E 6000                         		bra.s	objSearchCol_CeilingSides
00204990                              		
00204990                            object_FindCol_CeilingSides:
00204990 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204996 286D 0014                    		movea.l	lvl_collision(a5),a4
0020499A                              		
0020499A                            objSearchCol_CeilingSides:
0020499A 7000                       		moveq	#0,d0
0020499C 7200                       		moveq	#0,d1
0020499E 7800                        		moveq	#0,d4
002049A0 3A2E 000C                    		move.w	obj_y(a6),d5
002049A4                            ;   		add.w	#4,d5
002049A4 182E 0006                     		move.b	obj_size+2(a6),d4
002049A8 E74C                          		lsl.w	#3,d4
002049AA                            ;     		sub.w	#1,d4
002049AA 9A44                          		sub.w	d4,d5			;UP SIZE
002049AC 4A45                         		tst.w	d5
002049AE 6B00 0000                    		bmi	@no_col
002049B2 382D 0032                   		move.w	lvl_size_y(a5),d4
002049B6 E94C                        		lsl.w	#4,d4
002049B8 BA44                        		cmp.w	d4,d5
002049BA 6C00 0000                   		bge	@no_col
002049BE                             		
002049BE E84D                         		lsr.w	#4,d5
002049C0 3005                         		move.w	d5,d0
002049C2 3205                         		move.w	d5,d1
002049C4 E188                         		lsl.l	#8,d0			; LEFT 000YYY00
002049C6 E189                         		lsl.l	#8,d1			;RIGHT 000YYY00
002049C8 CAED 0030                   		mulu.w	lvl_size_x(a5),d5
002049CC D8C5                         		adda	d5,a4
002049CE                            
002049CE                            ; ------------------------
002049CE                            ; X check
002049CE                            ; 
002049CE                            ; LEFT
002049CE                            ; ------------------------
002049CE                            
002049CE 7800                        		moveq	#0,d4
002049D0 7A00                       		moveq	#0,d5
002049D2 3A2E 0008                    		move.w	obj_x(a6),d5
002049D6 382D 0030                   		move.w	lvl_size_x(a5),d4
002049DA E94C                        		lsl.w	#4,d4
002049DC BA44                             		cmp.w	d4,d5
002049DE 6D00                             		blt.s	@dontfix_l
002049E0 0445 0001                        		sub.w	#1,d5
002049E4                            @dontfix_l:
002049E4 4A45                        		tst.w	d5
002049E6 6B00                        		bmi.s	@zero_l
002049E8 3805                        		move.w	d5,d4
002049EA E84C                        		lsr.w	#4,d4
002049EC 264C                        		movea.l	a4,a3
002049EE D6C4                        		adda 	d4,a3
002049F0                             		
002049F0 4845                        		swap	d5		; d5 - XRead | Free
002049F2 1A2E 0004                   		move.b	obj_size(a6),d5
002049F6 0245 00FF                   		and.w	#$FF,d5		; d5 - XRead | Loop
002049FA 4A45                        		tst.w	d5
002049FC 6700                        		beq.s	@zero_l
002049FE                            @Next_col_l:
002049FE 4845                        		swap	d5		; d5 - Loop | Xread
00204A00                             		
00204A00 4A13                        		tst.b	(a3)
00204A02 6700                        		beq.s	@No_col_l
00204A04 3805                        		move.w	d5,d4
00204A06 0244 FFF0                   		and.w	#$FFF0,d4
00204A0A 4844                        		swap	d4
00204A0C 8284                        		or.l	d4,d1		; LEFT XXXYYY00
00204A0E 1213                       		move.b	(a3),d1
00204A10 6000                        		bra.s	@zero_l
00204A12                            @No_col_l:
00204A12                            
00204A12 0445 0008                   		sub.w	#8,d5
00204A16 6A00                          		bpl.s	@Fine_l
00204A18 4245                          		clr.w	d5
00204A1A                            @Fine_l:
00204A1A 3805                        		move.w	d5,d4
00204A1C E84C                        		lsr.w	#4,d4
00204A1E 264C                        		movea.l	a4,a3
00204A20 D6C4                        		adda 	d4,a3
00204A22 4845                        		swap	d5		; d5 - XRead | Loop
00204A24 51CD FFD8                   		dbf	d5,@Next_col_l
00204A28                            @zero_l:
00204A28                            		
00204A28                            ; ------------------------
00204A28                            ; X check
00204A28                            ; 
00204A28                            ; RIGHT
00204A28                            ; ------------------------
00204A28                            
00204A28 7800                        		moveq	#0,d4
00204A2A 7A00                        		moveq	#0,d5
00204A2C 3A2E 0008                   		move.w	obj_x(a6),d5
00204A30 0445 0001                   		sub.w	#1,d5
00204A34 4A45                        		tst.w	d5
00204A36 6B00                        		bmi.s	@no_col
00204A38 382D 0030                   		move.w	lvl_size_x(a5),d4
00204A3C E94C                        		lsl.w	#4,d4
00204A3E BA44                          		cmp.w	d4,d5
00204A40 6C00                           		bge.s	@no_col
00204A42                            
00204A42 3805                        		move.w	d5,d4
00204A44 E84C                        		lsr.w	#4,d4
00204A46 264C                        		movea.l	a4,a3
00204A48 D6C4                        		adda 	d4,a3
00204A4A                             		
00204A4A 4845                        		swap	d5		;d5 - XRead | Free
00204A4C 1A2E 0005                   		move.b	obj_size+1(a6),d5
00204A50 0245 00FF                   		and.w	#$FF,d5		;d5 - XRead | Loop
00204A54 4A45                        		tst.w	d5
00204A56 6700                        		beq.s	@no_col
00204A58                             		
00204A58                            @Next_col_r:
00204A58 4845                        		swap	d5		;d5 - Loop | Xread
00204A5A 4A13                        		tst.b	(a3)
00204A5C 6700                        		beq.s	@No_col_r
00204A5E 382D 0030                   		move.w	lvl_size_x(a5),d4
00204A62 E94C                        		lsl.w	#4,d4
00204A64 BA44                          		cmp.w	d4,d5
00204A66 6C00                           		bge.s	@no_col
00204A68                                		
00204A68 3805                        		move.w	d5,d4
00204A6A 0244 FFF0                   		and.w	#$FFF0,d4
00204A6E 4844                        		swap	d4
00204A70 8084                        		or.l	d4,d0		; RIGHT XXXYYY00
00204A72 1013                       		move.b	(a3),d0
00204A74 4E75                        		rts
00204A76                             		
00204A76                            @No_col_r:
00204A76 0645 0008                   		add.w	#8,d5
00204A7A 3805                        		move.w	d5,d4
00204A7C E84C                        		lsr.w	#4,d4
00204A7E 264C                        		movea.l	a4,a3
00204A80 D6C4                        		adda 	d4,a3
00204A82 4845                        		swap	d5		;d5 - XRead | Loop
00204A84 51CD FFD2                   		dbf	d5,@Next_col_r
00204A88                             		
00204A88                            ; ------------------------
00204A88                            
00204A88                            @no_col:
00204A88 4E75                       		rts
00204A8A                             	
00204A8A                            ; ************************
00204A8A                            ; Find Center collision
00204A8A                            ;
00204A8A                            ; Input:
00204A8A                            ; a6 - Object
00204A8A                            ; a5 - RAM_LvlPlanes
00204A8A                            ; a4 - Collision data
00204A8A                            ; 
00204A8A                            ; Output:
00204A8A                            ; d0 | LONG - Xpos|Ypos|ID $XXXYYYID
00204A8A                            ; 
00204A8A                            ; Uses:
00204A8A                            ; a3 | d4-d5
00204A8A                            ; ************************
00204A8A                            
00204A8A                            ; TODO: no agarra los X/Y
00204A8A                            
00204A8A                            object_FindPrz_Center:
00204A8A 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204A90 286D 0018                    		movea.l	lvl_prizes(a5),a4
00204A94 6000                         		bra.s	objSearchCol_Center
00204A96                              		
00204A96                            object_FindCol_Center:
00204A96 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204A9C 286D 0014                    		movea.l	lvl_collision(a5),a4
00204AA0                            
00204AA0                            objSearchCol_Center:
00204AA0 7000                       		moveq	#0,d0
00204AA2 7800                       		moveq	#0,d4
00204AA4 7A00                       		moveq	#0,d5
00204AA6 382E 000C                   		move.w	obj_y(a6),d4
00204AAA 4A44                        		tst.w	d4
00204AAC 6B00 0000                   		bmi	@no_col
00204AB0 3A2D 0032                   		move.w	lvl_size_y(a5),d5
00204AB4 E94D                        		lsl.w	#4,d5
00204AB6 B845                        		cmp.w	d5,d4
00204AB8 6C00 0000                   		bge	@no_col
00204ABC E84C                         		lsr.w	#4,d4
00204ABE C8ED 0030                    		mulu.w	lvl_size_x(a5),d4
00204AC2 D8C4                         		adda	d4,a4
00204AC4 0284 0000 0FFF               		and.l	#$FFF,d4
00204ACA E18C                         		lsl.l	#8,d4
00204ACC 8084                          		or.l	d4,d0
00204ACE                            
00204ACE                            ; ------------------------
00204ACE                            		
00204ACE 264C                         		movea.l	a4,a3
00204AD0 382E 0008                   		move.w	obj_x(a6),d4
00204AD4 4A44                        		tst.w	d4
00204AD6 6B00                        		bmi.s	@force_on
00204AD8 3A2D 0030                   		move.w	lvl_size_x(a5),d5
00204ADC E94D                         		lsl.w	#4,d5
00204ADE B845                         		cmp.w	d5,d4
00204AE0 6C00                         		bge.s	@force_on
00204AE2 3A04                         		move.w	d4,d5
00204AE4 4845                        		swap	d5
00204AE6 8085                        		or.l	d5,d0			; XXXYYY00
00204AE8 E84C                        		lsr.w	#4,d4
00204AEA D6C4                        		adda 	d4,a3
00204AEC                              		
00204AEC 4A13                       		tst.b	(a3)
00204AEE 6700                       		beq.s	@no_col		
00204AF0 1013                       		move.b	(a3),d0
00204AF2 4E75                       		rts
00204AF4                            @force_on:
00204AF4 7000                       		moveq	#0,d0
00204AF6                            @no_col:
00204AF6 4E75                       		rts
00204AF8                            		
00204AF8                            ; ************************
00204AF8                            ; Sets a object in the floor
00204AF8                            ; DOWN/UP
00204AF8                            ; CENTER
00204AF8                            ; 
00204AF8                            ; Input:
00204AF8                            ; d0 - Floor ID
00204AF8                            ; (Object's current Ypos)
00204AF8                            ; 
00204AF8                            ; Output:
00204AF8                            ; d7 | LONG - Y speed result
00204AF8                            ; 
00204AF8                            ; Uses:
00204AF8                            ; a3-a4 | d3-d4
00204AF8                            ; ************************
00204AF8                            
00204AF8                            object_SetCol_Floor:
00204AF8 0800 0006                  		btst	#6,d0
00204AFC 6600 0000                  		bne	@check_special
00204B00 0C00 0001                  		cmp.b	#1,d0
00204B04 6700 0000                  		beq	@floorsolid
00204B08 4A87                          		tst.l	d7
00204B0A 6B00                          		bmi.s	@NoCol
00204B0C                               		
00204B0C 222E 000C                     		move.l	obj_y(a6),d1
00204B10 2601                          		move.l	d1,d3
00204B12 47F9 0020 3DCE               		lea	(col_SlopeData),a3
00204B18 0240 003F                    		and.w	#$3F,d0
00204B1C 3200                         		move.w	d0,d1
00204B1E E949                         		lsl.w	#4,d1
00204B20 D6C1                         		adda	d1,a3
00204B22 202E 0008                   		move.l	obj_x(a6),d0
00204B26 4840                        		swap	d0
00204B28 0240 000F                   		and.w	#$F,d0
00204B2C 1033 0000                   		move.b	(a3,d0.w),d0
00204B30 0280 0000 000F                 		and.l	#$F,d0
00204B36 0281 FFF0 0000                 		and.l	#$FFF00000,d1
00204B3C 4840                         		swap	d0
00204B3E D280                        		add.l	d0,d1
00204B40                             		
00204B40                            ; 		btst	#bitobj_air,obj_status(a6)
00204B40                            ; 		beq.s	@dontchk
00204B40 D687                         		add.l	d7,d3
00204B42 B681                         		cmp.l	d1,d3
00204B44 6D00                         		blt.s	@NoCol
00204B46                            @dontchk:
00204B46 2D41 000C                    		move.l	d1,obj_y(a6)	; TODO: REPARAME
00204B4A                              		
00204B4A 08AE 0002 001E                		bclr	#bitobj_air,obj_status(a6)
00204B50 4287                        		clr.l	d7
00204B52 4A86                            		tst.l	d6
00204B54 6700                            		beq.s	@NoCol
00204B56 2E3C 0001 0000                 		move.l	#$10000,d7
00204B5C                            @NoCol:
00204B5C 4E75                       		rts
00204B5E                            
00204B5E                            @floorsolid:
00204B5E 08AE 0002 001E             		bclr	#bitobj_air,obj_status(a6)	
00204B64 02AE FFF8 0000 000C        		and.l	#$FFF80000,obj_y(a6)		; TODO: REPARAME
00204B6C 4287                       		clr.l	d7
00204B6E 4E75                       		rts
00204B70                            
00204B70                            ; ---------------------
00204B70                            ; Check $80+ collision
00204B70                            ; Floor
00204B70                            ; ---------------------
00204B70                            
00204B70                            @check_special:
00204B70 4E75                       		rts
00204B72                            		
00204B72                            ; ************************
00204B72                            ; Sets collision on the object
00204B72                            ; Ceiling
00204B72                            ; 
00204B72                            ; Input:
00204B72                            ; d0 - Floor ID
00204B72                            ; 
00204B72                            ; Output:
00204B72                            ; d7 | LONG - Y speed result
00204B72                            ; 
00204B72                            ; Uses:
00204B72                            ; a3-a4 | d3-d4
00204B72                            ; ************************
00204B72                            
00204B72                            object_SetCol_Ceiling:
00204B72 0800 0006                  		btst	#6,d0
00204B76 6600 0000                  		bne	@floorsolid
00204B7A 0C00 0001                  		cmp.b	#1,d0
00204B7E 6700 0000                  		beq	@floorsolid
00204B82                            ;    		tst.l	d7
00204B82                            ;    		bpl.s	@NoCol
00204B82                               		
00204B82                            ;    		move.l	obj_y(a6),d1
00204B82                            ;    		move.l	d1,d3
00204B82                            ;   		lea	(col_SlopeData),a3
00204B82                            ;   		and.w	#$3F,d0
00204B82                            ;   		move.w	d0,d1
00204B82                            ;   		lsl.w	#4,d1
00204B82                            ;   		adda	d1,a3
00204B82                            ;  		move.l	obj_x(a6),d0
00204B82                            ;  		swap	d0
00204B82                            ;  		and.w	#$F,d0
00204B82                            ;  		move.b	(a3,d0.w),d0
00204B82                            ;     		and.l	#$F,d0
00204B82                            ;     		and.l	#$FFF00000,d1
00204B82                            ;   		swap	d0
00204B82                            ;  		add.l	d0,d1
00204B82                            ;  		
00204B82                            ; ; 		btst	#bitobj_air,obj_status(a6)
00204B82                            ; ; 		beq.s	@dontchk
00204B82                            ;   		add.l	d7,d3
00204B82                            ;   		cmp.l	d1,d3
00204B82                            ;   		blt.s	@NoCol
00204B82                            ; @dontchk:
00204B82                            ;   		move.l	d1,obj_y(a6)	; TODO: REPARAME
00204B82                            ;   		
00204B82                            ;    		bclr	#bitobj_air,obj_status(a6)
00204B82                            ;  		clr.l	d7
00204B82                            ;      		tst.l	d6
00204B82                            ;      		beq.s	@NoCol
00204B82                            ;     		move.l	#$10000,d7
00204B82                            ; @NoCol:
00204B82                            ; 		rts
00204B82                            ; 
00204B82                            @floorsolid:
00204B82 4287                       		clr.l	d7
00204B84 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
00204B8A 02AE FFF8 0000 000C        		and.l	#$FFF80000,obj_y(a6)
00204B92 7800                       		moveq	#0,d4
00204B94 182E 0007                  		move.b	obj_size+3(a6),d4
00204B98 E74C                       		lsl.w	#3,d4
00204B9A D96E 000C                  		add.w	d4,obj_y(a6)
00204B9E                            @NoCol:
00204B9E 4E75                       		rts
00204BA0                            		
00204BA0                            ; ************************
00204BA0                            ; Sets a object in the wall
00204BA0                            ; LEFT/RIGHT
00204BA0                            ; CENTER
00204BA0                            ; 
00204BA0                            ; Input:
00204BA0                            ; d0 - Floor ID
00204BA0                            ; (Object's current Ypos)
00204BA0                            ; 
00204BA0                            ; Output:
00204BA0                            ; d7 | LONG - Y speed result
00204BA0                            ; 
00204BA0                            ; Uses:
00204BA0                            ; a3-a4 | d3-d4
00204BA0                            ; ************************
00204BA0                            
00204BA0                            ; TODO: para que mierdas era esto
00204BA0                            
00204BA0                            object_SetCol_Wall:
00204BA0                            ; 		move.w	obj_y(a6),d1		;TODO: REPARAME
00204BA0                            ; 		sub.w	#1,d1
00204BA0                            ; 		move.w	d1,d3
00204BA0                            ; 		and.w	#$FFF0,d1 		
00204BA0                            ;      		lea	(col_SlopeData),a3
00204BA0                            ;       		and.w	#$FF,d0
00204BA0                            ;      		lsl.w	#4,d0
00204BA0                            ;       		adda	d0,a3
00204BA0                            ;       		move.w	obj_x(a6),d0
00204BA0                            ;       		and.w	#$F,d0
00204BA0                            ;       		move.b	(a3,d0.w),d2
00204BA0                            ;       		and.w	#$F,d2
00204BA0                            ;       		add.w	d2,d1
00204BA0                            ;       		
00204BA0                            ;  		btst	#bitobj_air,obj_status(a6)
00204BA0                            ; 		beq.s	@dontchkLR
00204BA0                            ;   		cmp.w	d1,d3
00204BA0                            ;   		blt.s	@NoCol_LR
00204BA0                            ; @dontchkLR:
00204BA0                            ;    		move.w	d1,obj_y(a6)		;TODO: REPARAME
00204BA0                            
00204BA0                            @NoCol_LR:
00204BA0 4E75                       		rts
00204BA2                            	
00204BA2                            ; **********************************************
00204BA2                            ; Object interaction
00204BA2                            ; **********************************************
00204BA2                            
00204BA2                            ; ----------------------------------
00204BA2                            ; objTouch
00204BA2                            ; 
00204BA2                            ; touch/hit detection
00204BA2                            ; 
00204BA2                            ; Uses: d0-d4
00204BA2                            ; ----------------------------------
00204BA2                            
00204BA2                            objTouch:
00204BA2 6100 0000                  		bsr	objTouch_Top
00204BA6 3600                       		move.w	d0,d3
00204BA8 6100 0000                  		bsr	objTouch_Bottom
00204BAC 8640                       		or.w	d0,d3
00204BAE 6100 0000                  		bsr	objTouch_Sides
00204BB2 8640                       		or.w	d0,d3
00204BB4 4840                       		swap	d0
00204BB6 8640                       		or.w	d0,d3
00204BB8 3003                       		move.w	d3,d0
00204BBA 4E75                       		rts
00204BBC                            		
00204BBC                            ; ---------------------------
00204BBC                            ; Seperate touches
00204BBC                            ; ---------------------------
00204BBC                            
00204BBC                            objTouch_Top:
00204BBC 4200                       		clr.b	d0
00204BBE 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204BC4 780F                       		moveq	#16-1,d4
00204BC6                            @check_again:
00204BC6 4AAC 0000                  		tst.l	obj_code(a4)
00204BCA 6700 0000                  		beq	@notfound
00204BCE 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
00204BD4 6700                       		beq.s	@notfound
00204BD6                            		
00204BD6                            ;  		tst.l	obj_y_spd(a4)
00204BD6                            ;  		bmi.s	@lowrY
00204BD6                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
00204BD6                            ;  		bne.s	@lowrY
00204BD6 7200                       		moveq	#0,d1
00204BD8                            		
00204BD8                            		; Check LEFT
00204BD8 7400                          		moveq	#0,d2
00204BDA 322E 0008                     		move.w	obj_x(a6),d1
00204BDE 142E 0004                     		move.b	obj_size(a6),d2
00204BE2 E74A                          		lsl.w	#3,d2
00204BE4 9242                          		sub.w	d2,d1
00204BE6 342C 0008                     		move.w	obj_x(a4),d2
00204BEA 4841                           		swap	d1
00204BEC 122C 0005                     		move.b	obj_size+1(a4),d1
00204BF0 E749                          		lsl.w	#3,d1
00204BF2 D441                             		add.w	d1,d2
00204BF4 4841                           		swap	d1
00204BF6 B242                          		cmp.w	d2,d1
00204BF8 6C00                          		bge.s	@lowrY
00204BFA                               		; Check RIGHT
00204BFA 7400                          		moveq	#0,d2
00204BFC 322E 0008                     		move.w	obj_x(a6),d1
00204C00 142E 0005                     		move.b	obj_size+1(a6),d2
00204C04 E74A                          		lsl.w	#3,d2
00204C06 D242                          		add.w	d2,d1
00204C08 342C 0008                     		move.w	obj_x(a4),d2
00204C0C 4841                           		swap	d1
00204C0E 122C 0004                     		move.b	obj_size(a4),d1
00204C12 E749                          		lsl.w	#3,d1
00204C14 9441                       		sub.w	d1,d2
00204C16 4841                           		swap	d1
00204C18 B242                           		cmp.w	d2,d1
00204C1A 6F00                           		ble.s	@lowrY
00204C1C                            
00204C1C                                		; Check Top, and $C pixels more
00204C1C 322E 000C                     		move.w	obj_y(a6),d1
00204C20 7400                          		moveq	#0,d2
00204C22 142E 0006                     		move.b	obj_size+2(a6),d2
00204C26 E74A                          		lsl.w	#3,d2
00204C28 9242                          		sub.w	d2,d1
00204C2A 4841                          		swap	d1
00204C2C 342C 000C                     		move.w	obj_y(a4),d2
00204C30 122C 0007                     		move.b	obj_size+3(a4),d1
00204C34 E749                          		lsl.w	#3,d1
00204C36 D441                          		add.w	d1,d2
00204C38 4841                          		swap	d1
00204C3A B242                          		cmp.w	d2,d1
00204C3C 6E00                          		bgt.s	@lowrY
00204C3E 0641 000C                       		add.w	#$C,d1
00204C42 B242                           		cmp.w	d2,d1
00204C44 6D00                           		blt.s	@lowrY
00204C46                                		
00204C46 103C 0001                     		move.b	#1,d0
00204C4A                            @lowrY:
00204C4A                            
00204C4A 4A00                       		tst.b	d0
00204C4C 6600 0000                  		bne	@wecanhurt
00204C50                            @notfound:
00204C50 D8FC 0064                  		adda	#sizeof_obj,a4
00204C54 51CC FF70                  		dbf	d4,@check_again
00204C58                            @wecanhurt:
00204C58 4E75                          		rts
00204C5A                               		
00204C5A                            ; ----------------------------------
00204C5A                            
00204C5A                            objTouch_Bottom:
00204C5A 4200                       		clr.b	d0
00204C5C 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204C62 780F                       		moveq	#16-1,d4
00204C64                            @check_again:
00204C64 4AAC 0000                  		tst.l	obj_code(a4)
00204C68 6700 0000                  		beq	@notfound
00204C6C 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
00204C72 6700 0000                  		beq	@notfound
00204C76                            		
00204C76                            ;  		tst.l	obj_y_spd(a4)
00204C76                            ;  		bmi.s	@lowrY
00204C76                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
00204C76                            ;  		bne.s	@lowrY
00204C76 7200                       		moveq	#0,d1
00204C78                            		
00204C78                            		; Check LEFT
00204C78 7400                          		moveq	#0,d2
00204C7A 322E 0008                     		move.w	obj_x(a6),d1
00204C7E 142E 0004                     		move.b	obj_size(a6),d2
00204C82 E74A                          		lsl.w	#3,d2
00204C84 9242                          		sub.w	d2,d1
00204C86 342C 0008                     		move.w	obj_x(a4),d2
00204C8A 4841                           		swap	d1
00204C8C 122C 0005                     		move.b	obj_size+1(a4),d1
00204C90 E749                          		lsl.w	#3,d1
00204C92 D441                             		add.w	d1,d2
00204C94 4841                           		swap	d1
00204C96 B242                          		cmp.w	d2,d1
00204C98 6C00                          		bge.s	@lowrY
00204C9A                               		; Check RIGHT
00204C9A 7400                          		moveq	#0,d2
00204C9C 322E 0008                     		move.w	obj_x(a6),d1
00204CA0 142E 0005                     		move.b	obj_size+1(a6),d2
00204CA4 E74A                          		lsl.w	#3,d2
00204CA6 D242                          		add.w	d2,d1
00204CA8 342C 0008                     		move.w	obj_x(a4),d2
00204CAC 4841                           		swap	d1
00204CAE 122C 0004                     		move.b	obj_size(a4),d1
00204CB2 E749                          		lsl.w	#3,d1
00204CB4 9441                       		sub.w	d1,d2
00204CB6 4841                           		swap	d1
00204CB8 B242                           		cmp.w	d2,d1
00204CBA 6F00                           		ble.s	@lowrY
00204CBC                            
00204CBC                                		; Check Top, and $C pixels more
00204CBC 322E 000C                     		move.w	obj_y(a6),d1
00204CC0 7400                          		moveq	#0,d2
00204CC2 142E 0007                     		move.b	obj_size+3(a6),d2
00204CC6 E74A                          		lsl.w	#3,d2
00204CC8 D242                          		add.w	d2,d1
00204CCA 4841                          		swap	d1
00204CCC 342C 000C                     		move.w	obj_y(a4),d2
00204CD0 122C 0006                     		move.b	obj_size+2(a4),d1
00204CD4 E749                          		lsl.w	#3,d1
00204CD6 9441                          		sub.w	d1,d2
00204CD8 4841                          		swap	d1
00204CDA B441                          		cmp.w	d1,d2
00204CDC 6E00                          		bgt.s	@lowrY
00204CDE 0441 000C                       		sub.w	#$C,d1
00204CE2 B441                           		cmp.w	d1,d2
00204CE4 6D00                           		blt.s	@lowrY
00204CE6                                		
00204CE6 103C 0001                     		move.b	#1,d0
00204CEA                            @lowrY:
00204CEA                            
00204CEA 4A00                       		tst.b	d0
00204CEC 6600 0000                  		bne	@wecanhurt
00204CF0                            @notfound:
00204CF0 D8FC 0064                  		adda	#sizeof_obj,a4
00204CF4 51CC FF6E                  		dbf	d4,@check_again
00204CF8                            @wecanhurt:
00204CF8 4E75                          		rts
00204CFA                            
00204CFA                            ; ----------------------------------
00204CFA                            
00204CFA                            objTouch_Sides:
00204CFA 7000                       		moveq	#0,d0
00204CFC 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204D02 780F                       		moveq	#16-1,d4
00204D04                            @check_again:
00204D04 4AAC 0000                  		tst.l	obj_code(a4)
00204D08 6700 0000                  		beq	@notfound
00204D0C 082C 0006 001E             		btst	#bitobj_hit,obj_status(a4)
00204D12 6700 0000                  		beq	@notfound
00204D16                            		
00204D16                            ;  		btst	#bitPlyrClimb,plyr_status(a4)
00204D16                            ;  		bne	@lowrY
00204D16                             		
00204D16 7200                            		moveq	#0,d1
00204D18 7400                          		moveq	#0,d2
00204D1A 322E 000C                      		move.w	obj_y(a6),d1
00204D1E 7400                           		moveq	#0,d2
00204D20 142E 0006                      		move.b	obj_size+2(a6),d2
00204D24 E74A                           		lsl.w	#3,d2
00204D26 9242                           		sub.w	d2,d1
00204D28 4841                           		swap	d1
00204D2A 342C 000C                      		move.w	obj_y(a4),d2
00204D2E 122C 0007                      		move.b	obj_size+3(a4),d1
00204D32 E749                           		lsl.w	#3,d1
00204D34 D441                           		add.w	d1,d2
00204D36 4841                           		swap	d1
00204D38 B242                           		cmp.w	d2,d1
00204D3A 6E00 0000                      		bgt	@lowrY
00204D3E                                		
00204D3E 322E 000C                      		move.w	obj_y(a6),d1
00204D42 7400                           		moveq	#0,d2
00204D44 142E 0007                      		move.b	obj_size+3(a6),d2
00204D48 E74A                           		lsl.w	#3,d2
00204D4A D242                           		add.w	d2,d1
00204D4C 4841                           		swap	d1
00204D4E 342C 000C                      		move.w	obj_y(a4),d2
00204D52 122C 0006                      		move.b	obj_size+2(a4),d1
00204D56 E749                           		lsl.w	#3,d1
00204D58 9441                           		sub.w	d1,d2
00204D5A 4841                           		swap	d1
00204D5C B242                           		cmp.w	d2,d1
00204D5E 6D00 0000                      		blt	@lowrY
00204D62                            
00204D62                                 		; X Sides check
00204D62 7200                            		moveq	#0,d1
00204D64 7400                          		moveq	#0,d2
00204D66 322E 0008                     		move.w	obj_x(a6),d1
00204D6A 142E 0005                     		move.b	obj_size+1(a6),d2
00204D6E E74A                          		lsl.w	#3,d2
00204D70 D242                          		add.w	d2,d1
00204D72 242C 0008                     		move.l	obj_x(a4),d2
00204D76 D4AC 0010                     		add.l	obj_x_spd(a4),d2
00204D7A 4842                          		swap	d2
00204D7C 4841                           		swap	d1
00204D7E 122C 0004                      		move.b	obj_size(a4),d1
00204D82 E749                            		lsl.w	#3,d1
00204D84 9441                            		sub.w	d1,d2
00204D86 4841                            		swap	d1
00204D88 B441                           		cmp.w	d1,d2
00204D8A 6E00                           		bgt.s	@lowrY_L
00204D8C 0441 0008                      		sub.w	#8,d1
00204D90 B441                           		cmp.w	d1,d2
00204D92 6D00                           		blt.s	@lowrY_L 
00204D94 303C 0001                      		move.w	#1,d0
00204D98                            
00204D98                            @lowrY_L:
00204D98 4840                            		swap	d0
00204D9A 7200                            		moveq	#0,d1
00204D9C 7400                          		moveq	#0,d2
00204D9E 322E 0008                     		move.w	obj_x(a6),d1
00204DA2 142E 0004                     		move.b	obj_size(a6),d2
00204DA6 E74A                          		lsl.w	#3,d2
00204DA8 9242                          		sub.w	d2,d1
00204DAA 342C 0008                     		move.w	obj_x(a4),d2
00204DAE 4841                           		swap	d1
00204DB0 122C 0005                      		move.b	obj_size+1(a4),d1
00204DB4 E749                           		lsl.w	#3,d1
00204DB6 D441                           		add.w	d1,d2
00204DB8 4841                           		swap	d1
00204DBA B242                          		cmp.w	d2,d1
00204DBC 6E00                          		bgt.s	@lowrY
00204DBE 0641 0008                     		add.w	#8,d1
00204DC2 B242                          		cmp.w	d2,d1
00204DC4 6D00                          		blt.s	@lowrY 
00204DC6 303C 0001                     		move.w	#1,d0
00204DCA                            @lowrY:
00204DCA                            		
00204DCA 4A80                       		tst.l	d0
00204DCC 6600 0000                  		bne	@wecanhurt
00204DD0                            @notfound:
00204DD0 D8FC 0064                  		adda	#sizeof_obj,a4
00204DD4 51CC FF2E                  		dbf	d4,@check_again
00204DD8                            @wecanhurt:
00204DD8 4E75                          		rts
00204DDA                               			
00204DDA                            ; ----------------------------------
00204DDA                            
00204DDA                            objPlyrSetFloor:
00204DDA 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204DE0 4AAC 0014                  		tst.l	obj_y_spd(a4)
00204DE4 6B00                       		bmi.s	@return
00204DE6 082C 001C 0000             		btst	#bitPlyrClimb,plyr_status(a4)
00204DEC 6600                       		bne.s	@return
00204DEE                            ; 		lea	(RAM_LvlPlanes),a5
00204DEE                            		
00204DEE 42AC 0014                     		clr.l	obj_y_spd(a4)
00204DF2 302E 000C                   		move.w	obj_y(a6),d0
00204DF6 3200                        		move.w	d0,d1
00204DF8 7400                          		moveq	#0,d2
00204DFA 142E 0006                     		move.b	obj_size+2(a6),d2
00204DFE E74A                          		lsl.w	#3,d2
00204E00 9042                          		sub.w	d2,d0
00204E02 7400                          		moveq	#0,d2
00204E04 142C 0007                     		move.b	obj_size+3(a4),d2
00204E08 E74A                          		lsl.w	#3,d2
00204E0A 9042                          		sub.w	d2,d0
00204E0C                            ;    		cmp.w	d0,d1
00204E0C                            ;    		blt.s	@lowrY
00204E0C 297C 0001 0000 0014           		move.l	#$10000,obj_y_spd(a4)
00204E14                            ; @lowrY:
00204E14 3940 000C                     		move.w	d0,obj_y(a4)
00204E18                               		
00204E18                            ; 		bsr	object_PlyrFlgs_floor
00204E18 08AC 0002 001E                  		bclr	#bitobj_air,obj_status(a4)
00204E1E 08EC 0004 0022                  		bset	#bitcol_obj,obj_col(a4)
00204E24 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
00204E2C 6600 0000                  		bne	@return
00204E30 397C 0000 0000                 		move.w	#varJumpTimer,plyr_jumptmr(a4)
00204E36                            @return:
00204E36 4E75                          		rts
00204E38                              	
00204E38                            ; ----------------------------------
00204E38                            
00204E38                            objPlyrSetCeiling:
00204E38 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204E3E 082C 001C 0000             		btst	#bitPlyrClimb,plyr_status(a4)
00204E44 6600                       		bne.s	@return
00204E46 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204E4C 42AC 0014                  		clr.l	obj_y_spd(a4)
00204E50 08EC 0002 001E                  		bset	#bitobj_air,obj_status(a4)
00204E56                            ;      		bset	#bitcol_obju,obj_col(a4)
00204E56                                 		
00204E56                            ;      		bset	#bitcol_floor,obj_col(a4)
00204E56                            ;  		move.w	obj_y(a6),d0
00204E56                            ;    		moveq	#0,d2
00204E56                            ;    		move.b	obj_size+2(a6),d2
00204E56                            ;    		lsl.w	#3,d2
00204E56                            ;    		sub.w	d2,d0
00204E56                            ;    		move.w	d0,obj_y(a4)
00204E56                            @return:
00204E56 4E75                          		rts
00204E58                               		
00204E58                            ; ----------------------------------
00204E58                            
00204E58                            objPlyrSetWall_R:
00204E58 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204E5E 082C 001C 0000             		btst	#bitPlyrClimb,plyr_status(a4)
00204E64 6600                       		bne.s	objPlyrColReturn
00204E66 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204E6C 42AC 0010                  		clr.l	obj_x_spd(a4)
00204E70 08EC 0002 0022                  		bset	#bitcol_wall_r,obj_col(a4)
00204E76 302E 0008                   		move.w	obj_x(a6),d0
00204E7A 7400                          		moveq	#0,d2
00204E7C 142E 0004                     		move.b	obj_size(a6),d2
00204E80 E74A                          		lsl.w	#3,d2
00204E82 9042                          		sub.w	d2,d0
00204E84 7400                          		moveq	#0,d2
00204E86 142C 0005                     		move.b	obj_size+1(a4),d2
00204E8A E74A                          		lsl.w	#3,d2
00204E8C 9042                          		sub.w	d2,d0
00204E8E 6000                          		bra.s	objPlyrSetWLX
00204E90                            		
00204E90                            ; ----------------------------------
00204E90                            
00204E90                            objPlyrSetWall_L:
00204E90 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00204E96 082C 001C 0000             		btst	#bitPlyrClimb,plyr_status(a4)
00204E9C 6600                       		bne.s	objPlyrColReturn
00204E9E 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204EA4 42AC 0010                  		clr.l	obj_x_spd(a4)
00204EA8 08EC 0003 0022                  		bset	#bitcol_wall_l,obj_col(a4)
00204EAE 302E 0008                   		move.w	obj_x(a6),d0
00204EB2                            ;  		add.w	#1,d0
00204EB2 7400                          		moveq	#0,d2
00204EB4 142E 0005                     		move.b	obj_size+1(a6),d2
00204EB8 E74A                          		lsl.w	#3,d2
00204EBA D042                          		add.w	d2,d0
00204EBC                               		
00204EBC 7400                          		moveq	#0,d2
00204EBE 142C 0004                     		move.b	obj_size(a4),d2
00204EC2 E74A                          		lsl.w	#3,d2
00204EC4 D042                          		add.w	d2,d0
00204EC6                            objPlyrSetWLX:
00204EC6 4A40                          		tst.w	d0
00204EC8 6A00                          		bpl.s	@plus_x
00204ECA 4240                          		clr.w	d0
00204ECC                            @plus_x:
00204ECC 342D 0030                  		move.w	lvl_size_x(a5),d2
00204ED0 E94A                       		lsl.w	#4,d2
00204ED2 B042                       		cmp.w	d2,d0
00204ED4 6D00                       		blt.s	@plusr_x
00204ED6 3002                       		move.w	d2,d0
00204ED8                            @plusr_x:
00204ED8 3940 0008                     		move.w	d0,obj_x(a4)
00204EDC                            objPlyrColReturn:
00204EDC 4E75                          		rts
00204EDE                               		
00204EDE                            ; ----------------------------------
00204EDE                            ; What to do if object touched the
00204EDE                            ; player
00204EDE                            ; 
00204EDE                            ; Input:
00204EDE                            ; a4 - Player object
00204EDE                            ; 
00204EDE                            ; Uses:
00204EDE                            ; d4
00204EDE                            ; 
00204EDE                            ; Returns:
00204EDE                            ; beq.s Nothing
00204EDE                            ; bne.s Touched
00204EDE                            ; ----------------------------------
00204EDE                            
00204EDE                            objPlyrHurtKill:
00204EDE 7800                       		moveq	#0,d4
00204EE0 200C                       		move.l	a4,d0
00204EE2 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0	; Player?
00204EE8 6600                       		bne.s	@settrue
00204EEA 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
00204EF0 0C2C 0000 001D             		cmp.b	#varPlyrMdDead,obj_index(a4)
00204EF6 6700                       		beq.s	@return
00204EF8 08EC 0003 001E             		bset	#bitobj_hurt,obj_status(a4)
00204EFE 0C2C 0000 001A             		cmp.b	#varPlyAniJump,obj_anim_id(a4)
00204F04 6700                       		beq.s	@stomppikudo
00204F06 082C 0002 001E              		btst	#bitobj_air,obj_status(a4)
00204F0C 6600                        		bne.s	@stomppikudo
00204F0E 6000                       		bra.s	@return
00204F10                            		
00204F10                            @stomppikudo:
00204F10 082C 0004 0022             		btst	#bitcol_obj,obj_col(a4)
00204F16 66FE                       		bne.s	*;@return
00204F18 4AAC 0014                   		tst.l	obj_y_spd(a4)
00204F1C 6B00                       		bmi.s	@return
00204F1E 6700                       		beq.s	@return	
00204F20                            @hurtanywy:
00204F20 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
00204F26                            @settrue:
00204F26 7801                       		moveq	#1,d4
00204F28                            @return:
00204F28 4A44                       		tst.w	d4
00204F2A 4E75                       		rts
00204F2C                            		
00204F2C                            ; Object_ChkPlyrHit:
00204F2C                            ; 		lea	(RAM_ObjBuffer),a4
00204F2C                            ; 		moveq	#0,d5
00204F2C                            ; 		cmp.b	#varPlyAniJump,obj_anim_id(a4)
00204F2C                            ; 		bne.s	@objhit
00204F2C                            ; 		moveq	#-1,d5
00204F2C                            ; @objhit:
00204F2C                            ; 		tst.w	d5
00204F2C                            ; 		rts
00204F2C                            
00204F2C                            ; ----------------------------------
00204F2C                            ; Prize ceiling action
00204F2C                            ; 
00204F2C                            ; Output:
00204F2C                            ; d4 - Collision out
00204F2C                            ; ----------------------------------
00204F2C                            
00204F2C                            Object_PrzActionCeil:
00204F2C 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00204F32 7A00                       		moveq	#0,d5
00204F34 1A00                       		move.b	d0,d5
00204F36 0805 0007                  		btst	#7,d5
00204F3A 6600                       		bne.s	@its_hidden
00204F3C DA45                       		add.w	d5,d5
00204F3E 3C3B 5000                  		move.w	@block_list(pc,d5.w),d6
00204F42 4EFB 6000                  		jmp	@block_list(pc,d6.w)
00204F46                            		
00204F46                            ; --------------------------
00204F46                            ; Reveral hidden block
00204F46                            ; --------------------------
00204F46                            
00204F46                            @its_hidden:
00204F46 6100 0000                   		bsr	Prize_Locate
00204F4A 0200 007F                   		and.b	#$7F,d0
00204F4E 1680                        		move.b	d0,(a3)
00204F50                             		
00204F50                            ;  		bsr	Level_HidePrize
00204F50 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00204F56 264C                       		movea.l	a4,a3
00204F58 323C 0007                  		move 	#8-1,d1
00204F5C                            @chksame2:
00204F5C B0AB 0024                  		cmp.l	obj_ram(a3),d0
00204F60 6700 0000                  		beq	@solidblock
00204F64 D6FC 0064                  		adda 	#sizeof_obj,a3
00204F68 51C9 FFF2                  		dbf	d1,@chksame2	
00204F6C                            
00204F6C 323C 0003                  		move 	#4-1,d1
00204F70                            @next_obj2:
00204F70 4AAC 0000                  		tst.l	obj_code(a4)
00204F74 6700                       		beq.s	@free2
00204F76 D8FC 0064                  		adda	#sizeof_obj,a4
00204F7A 51C9 FFF4                  		dbf	d1,@next_obj2
00204F7E 6000                       		bra.s	@ranout2
00204F80                            @free2:
00204F80 6100 0000                   		bsr	blkobj_setcoords
00204F84 197C 0001 001F             		move.b	#1,obj_subid(a4)
00204F8A 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00204F92 2940 0024                  		move.l	d0,obj_ram(a4)
00204F96                            		
00204F96 203C 0000 0000               		move.l	#SndSfx_BONK,d0
00204F9C 323C 0003                    		move.w 	#3,d1
00204FA0 7401                         		moveq	#1,d2
00204FA2 6100 B76C                    		bsr	Audio_Track_play
00204FA6                            @ranout2:
00204FA6                            ; 		moveq	#0,d4
00204FA6 4E75                        		rts
00204FA8                             		
00204FA8                            ; ----------------------------------
00204FA8                            
00204FA8                            @block_list:
00204FA8 0000                       		dc.w 0
00204FAA 0000                       		dc.w @break_block-@block_list
00204FAC 0000                       		dc.w @bump_1coin-@block_list
00204FAE 0000                       		dc.w @bump_10coin-@block_list
00204FB0 0000                       		dc.w @break_block-@block_list
00204FB2 0000                       		dc.w @break_block-@block_list
00204FB4 0000                       		dc.w @break_block-@block_list
00204FB6 0000                       		dc.w @bump_1up-@block_list
00204FB8 0000                       		dc.w @bump_1coin-@block_list
00204FBA 0000                       		dc.w @bump_10coin-@block_list
00204FBC 0000                       		dc.w @bump_1up-@block_list
00204FBE 0000                       		dc.w @bump_block-@block_list
00204FC0 0000                       		dc.w @bump_block-@block_list
00204FC2 0000                       		dc.w @bump_block-@block_list
00204FC4 0000                       		dc.w @bump_block-@block_list
00204FC6 0000                       		dc.w @bump_block-@block_list
00204FC8                            		
00204FC8 0000                       		dc.w @break_block-@block_list	
00204FCA 0000                       		dc.w @break_block-@block_list
00204FCC 0000                       		dc.w @break_block-@block_list
00204FCE 0000                       		dc.w @break_block-@block_list
00204FD0 0000                       		dc.w @break_block-@block_list
00204FD2 0000                       		dc.w @break_block-@block_list
00204FD4 0000                       		dc.w @break_block-@block_list
00204FD6 0000                       		dc.w @break_block-@block_list
00204FD8 0000                       		dc.w @break_block-@block_list
00204FDA 0000                       		dc.w @break_block-@block_list
00204FDC 0000                       		dc.w @break_block-@block_list
00204FDE 0000                       		dc.w @break_block-@block_list
00204FE0 0000                       		dc.w @break_block-@block_list
00204FE2 0000                       		dc.w @break_block-@block_list
00204FE4 0000                       		dc.w @break_block-@block_list	
00204FE6 0000                       		dc.w @break_block-@block_list
00204FE8                            		
00204FE8 0000                       		dc.w @trampoline-@block_list	
00204FEA 0000                       		dc.w @break_block-@block_list
00204FEC 0000                       		dc.w @break_block-@block_list
00204FEE 0000                       		dc.w @break_block-@block_list
00204FF0 0000                       		dc.w @break_block-@block_list
00204FF2 0000                       		dc.w @break_block-@block_list
00204FF4 0000                       		dc.w @break_block-@block_list
00204FF6 0000                       		dc.w @break_block-@block_list
00204FF8 0000                       		dc.w @break_block-@block_list
00204FFA 0000                       		dc.w @break_block-@block_list
00204FFC 0000                       		dc.w @break_block-@block_list
00204FFE 0000                       		dc.w @break_block-@block_list
00205000 0000                       		dc.w @break_block-@block_list
00205002 0000                       		dc.w @break_block-@block_list
00205004 0000                       		dc.w @break_block-@block_list	
00205006 0000                       		dc.w @break_block-@block_list
00205008                            		
00205008 0000                       		dc.w @break_block-@block_list	
0020500A 0000                       		dc.w @break_block-@block_list
0020500C 0000                       		dc.w @break_block-@block_list
0020500E 0000                       		dc.w @break_block-@block_list
00205010 0000                       		dc.w @break_block-@block_list
00205012 0000                       		dc.w @break_block-@block_list
00205014 0000                       		dc.w @break_block-@block_list
00205016 0000                       		dc.w @break_block-@block_list
00205018 0000                       		dc.w @break_block-@block_list
0020501A 0000                       		dc.w @break_block-@block_list
0020501C 0000                       		dc.w @break_block-@block_list
0020501E 0000                       		dc.w @break_block-@block_list
00205020 0000                       		dc.w @break_block-@block_list
00205022 0000                       		dc.w @break_block-@block_list
00205024 0000                       		dc.w @break_block-@block_list	
00205026 0000                       		dc.w @break_block-@block_list
00205028                            		
00205028 0000                       		dc.w @coin_red-@block_list
0020502A 0000                       		dc.w @coin_blue-@block_list
0020502C                            		
0020502C                            ; ----------------------------------
0020502C                            ; Normal breakable block
0020502C                            ; ----------------------------------
0020502C                            
0020502C                            @break_block:
0020502C 6100 0000                  		bsr	@chk_breakblk
00205030 6600                       		bne.s	@oops
00205032 6100 0000                   		bsr	Prize_Delete
00205036 6100 0000                   		bsr	blkobj_overwrite
0020503A                            		
0020503A 6100 0000                  		bsr	blkobj_setcoords
0020503E 2940 0024                  		move.l	d0,obj_ram(a4)
00205042 422C 001F                  		clr.b	obj_subid(a4)
00205046 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
0020504E                            		
0020504E 203C 0000 0000               		move.l	#SndSfx_PUM,d0
00205054 323C 0004                    		move.w 	#4,d1
00205058 7401                         		moveq	#1,d2
0020505A 6100 B6B4                    		bsr	Audio_Track_play
0020505E                            @oops:
0020505E 7801                         		moveq	#1,d4
00205060 2E3C 0001 0000               		move.l	#$10000,d7
00205066 4E75                         		rts
00205068                            		
00205068                            ; ----------------------------------
00205068                            ; BUMP block
00205068                            ; ----------------------------------
00205068                            
00205068                            @bump_1coin:
00205068 7601                       		moveq	#1,d3
0020506A 6000                       		bra.s	@bump_coinarg
0020506C                            @bump_10coin:
0020506C 760A                       		moveq	#10,d3
0020506E 6000                       		bra.s	@bump_coinarg
00205070                            
00205070                            ; ----------------------------------
00205070                            
00205070                            @bump_block:
00205070 7600                       		moveq	#0,d3
00205072                            @bump_coinarg:
00205072 6100 0000                  		bsr	blkobj_chkdupl
00205076 66E6                       		bne.s	@oops
00205078                            
00205078 6100 0000                  		bsr	blkobj_overwrite
0020507C 6100 0000                   		bsr	blkobj_setcoords
00205080 2400                       		move.l	d0,d2
00205082 2940 0024                  		move.l	d0,obj_ram(a4)
00205086 197C 0001 001F             		move.b	#1,obj_subid(a4)
0020508C 4A03                       		tst.b	d3
0020508E 6700                       		beq.s	@noexsubid
00205090 197C 0002 001F             		move.b	#2,obj_subid(a4)
00205096 0C03 000A                  		cmp.b	#10,d3
0020509A 6600                       		bne.s	@noexsubid
0020509C 197C 0003 001F             		move.b	#3,obj_subid(a4)
002050A2                            @noexsubid:
002050A2                            
002050A2 0C02 000F                  		cmp.b	#$F,d2
002050A6 6700                       		beq.s	@SolidOnly
002050A8 D779 FFFF DC02             		add.w	d3,(RAM_P1_Coins)
002050AE 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
002050B6 6D00                         		blt.s	@dontadd1up2
002050B8 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
002050BE 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
002050C6                            @dontadd1up2:
002050C6                            
002050C6                            ; 		add.b	#1,obj_subid(a4)
002050C6                            @SolidOnly:
002050C6 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
002050CE                            
002050CE 203C 0000 0000               		move.l	#SndSfx_BonkCoin,d0
002050D4 7202                         		moveq 	#2,d1
002050D6                              		
002050D6 0C02 000F                  		cmp.b	#$F,d2
002050DA 6600                       		bne.s	@Alt_Sfx
002050DC 203C 0000 0000               		move.l	#SndSfx_BONK,d0
002050E2 323C 0003                    		move.w 	#3,d1
002050E6 0C43 000A                    		cmp.w	#10,d3
002050EA 6600                         		bne.s	@Alt_Sfx
002050EC 7201                         		moveq	#1,d1
002050EE                            @Alt_Sfx:
002050EE 7401                       		moveq	#1,d2
002050F0 6100 B61E                    		bsr	Audio_Track_play
002050F4                              		
002050F4 6000                       		bra.s	@solidblock
002050F6                            		
002050F6                            ; ----------------------------------
002050F6                            
002050F6                            @bump_1up:
002050F6 6100 0000                  		bsr	blkobj_chkdupl
002050FA 6600 FF62                  		bne	@oops
002050FE                            
002050FE 6100 0000                  		bsr	blkobj_overwrite
00205102 6100 0000                   		bsr	blkobj_setcoords
00205106 2400                       		move.l	d0,d2
00205108 2940 0024                  		move.l	d0,obj_ram(a4)
0020510C 197C 0004 001F             		move.b	#4,obj_subid(a4)
00205112 0679 0001 FFFF DC00        		add.w	#1,(RAM_P1_Lives)
0020511A 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00205122                            		
00205122                            		;TODO: 1up sound
00205122                            		
00205122                            @solidblock:
00205122 7801                         		moveq	#1,d4
00205124 2E3C 0001 0000               		move.l	#$10000,d7
0020512A 4E75                         		rts
0020512C                              		
0020512C                            ; ----------------------------------
0020512C                            ; A Coin, from top
0020512C                            ; ----------------------------------
0020512C                            
0020512C                            @coin_red:
0020512C 7801                       		moveq	#1,d4
0020512E 6000                       		bra.s	@setcoin
00205130                            @coin_blue:
00205130 7805                       		moveq	#5,d4
00205132                            @setcoin:
00205132 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
00205138 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
00205140 6D00                         		blt.s	@dontadd1up
00205142 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
00205148 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
00205150                            @dontadd1up:
00205150                              		
00205150 6100 0000                   		bsr	Prize_Delete
00205154 6100 E7CE                  		bsr	Level_HidePrize
00205158                              		
00205158 203C 0000 0000               		move.l	#SndSfx_COIN,d0
0020515E 7202                         		moveq 	#2,d1
00205160 7401                         		moveq	#1,d2
00205162 6100 B5AC                    		bsr	Audio_Track_play
00205166 7800                       		moveq	#0,d4		
00205168 4E75                       		rts
0020516A                            		
0020516A                            ; ----------------------------------
0020516A                            ; Normal breakable block
0020516A                            ; ----------------------------------
0020516A                            
0020516A                            @trampoline:
0020516A 6100 0000                  		bsr	goToTrampolineWhy
0020516E                            		
0020516E 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00205174 2E3C 0008 0000             		move.l	#$80000,d7
0020517A 4E75                       		rts
0020517C                            		
0020517C                            ; -------------------------------
0020517C                            ; check for active object
0020517C                            ; d2 - sub-id
0020517C                            ; -------------------------------
0020517C                            
0020517C                            @chk_breakblk:
0020517C 7401                       		moveq	#1,d2
0020517E 7800                       		moveq	#0,d4
00205180 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
00205186 264C                       		movea.l	a4,a3
00205188 7207                       		moveq 	#8-1,d1
0020518A                            @checkhdnbmp:
0020518A 0CAB 0000 0000 0000        		cmp.l	#obj_prize,obj_code(a3)
00205192 6600                       		bne.s	@notprz
00205194 B42B 001F                  		cmp.b	obj_subid(a3),d2
00205198 6600                       		bne.s	@notprz
0020519A 7801                       		moveq	#1,d4
0020519C 7200                       		moveq	#0,d1
0020519E                            @notprz:
0020519E D6FC 0064                  		adda 	#sizeof_obj,a3
002051A2 51C9 FFE6                  		dbf	d1,@checkhdnbmp
002051A6 4A44                       		tst.w	d4
002051A8 4E75                       		rts
002051AA                            
002051AA                            ; -------------------------------
002051AA                            ; check for duplicate object
002051AA                            ; using obj_ram
002051AA                            ; -------------------------------
002051AA                            
002051AA                            blkobj_chkdupl:
002051AA 7800                       		moveq	#0,d4
002051AC 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
002051B2 7207                       		moveq 	#8-1,d1
002051B4                            @chksame234:
002051B4 B0AC 0024                   		cmp.l	obj_ram(a4),d0
002051B8 6600                        		bne.s	@notequl
002051BA 0644 0001                   		add.w	#1,d4
002051BE                            @notequl:
002051BE D8FC 0064                   		adda 	#sizeof_obj,a4
002051C2 51C9 FFF0                   		dbf	d1,@chksame234
002051C6 4A44                        		tst.w	d4
002051C8 4E75                        		rts
002051CA                             		
002051CA                            ; -------------------------------
002051CA                            ; Overwrite prize object if its
002051CA                            ; the same
002051CA                            ; -------------------------------
002051CA                            
002051CA                            blkobj_overwrite:
002051CA 7800                       		moveq	#0,d4
002051CC 49F9 FFFF C360             		lea	(RAM_ObjBuffer+(sizeof_obj*8)),a4
002051D2 7207                       		moveq 	#8-1,d1
002051D4                            @chksame23:
002051D4 B0AC 0024                   		cmp.l	obj_ram(a4),d0
002051D8 6600 0000                   		bne	@notsame
002051DC                             		
002051DC 264C                        		movea.l	a4,a3
002051DE 343C 0063                   		move.w	#sizeof_obj-1,d2
002051E2                            @delete:
002051E2 421B                        		clr.b	(a3)+
002051E4 51CA FFFC                   		dbf	d2,@delete
002051E8                            @notsame:
002051E8 0CAC 0000 0000 0000        		cmp.l	#obj_prize,obj_code(a4)
002051F0 6600                       		bne.s	@found
002051F2 D8FC 0064                   		adda 	#sizeof_obj,a4
002051F6 51C9 FFDC                   		dbf	d1,@chksame23
002051FA                            @found:
002051FA 4E75                       		rts
002051FC                            		
002051FC                            ; ----------------------------------
002051FC                            ; obj_coords
002051FC                            ; ----------------------------------
002051FC                            
002051FC                            blkobj_setcoords:
002051FC 2800                       		move.l	d0,d4
002051FE E88C                       		lsr.l	#4,d4
00205200 0244 FFF0                  		and.w	#$FFF0,d4
00205204 0644 0008                   		add.w	#8,d4
00205208 3944 000C                   		move.w	d4,obj_y(a4)
0020520C E08C                       		lsr.l	#8,d4
0020520E E88C                       		lsr.l	#4,d4
00205210 0244 FFF0                  		and.w	#$FFF0,d4
00205214 0644 0008                   		add.w	#8,d4
00205218 3944 0008                   		move.w	d4,obj_x(a4)
0020521C                             		
0020521C 206D 0008                  		movea.l	lvl_przblocks(a5),a0
00205220 3800                       		move.w	d0,d4
00205222 0244 00FF                  		and.w	#$FF,d4
00205226 E74C                       		lsl.w	#3,d4
00205228 3830 4000                  		move.w	(a0,d4.w),d4
0020522C 3944 0028                  		move.w	d4,obj_ram+4(a4)
00205230 4E75                        		rts
00205232                             	
00205232                            goToTrampolineWhy:
00205232 6100 FF76                  		bsr	blkobj_chkdupl
00205236 6600 0000                  		bne	@oopstr
0020523A                            
0020523A 6100 FF8E                  		bsr	blkobj_overwrite
0020523E 6100 FFBC                   		bsr	blkobj_setcoords
00205242 2940 0024                  		move.l	d0,obj_ram(a4)
00205246 197C 0005 001F             		move.b	#5,obj_subid(a4)
0020524C 297C 0000 0000 0000        		move.l	#obj_prize,obj_code(a4)
00205254 6100 E6CE                  		bsr	Level_HidePrize
00205258                            @oopstr:
00205258 7801                       		moveq	#1,d4
0020525A 4E75                       		rts
0020525C                            		
0020525C                            ; ----------------------------------
0020525C                            ; block subs
0020525C                            ; 
0020525C                            ; d0 - XXXYYYID
0020525C                            ; a5 - RAM_LvlPlanes
0020525C                            ; ----------------------------------
0020525C                            
0020525C                            Prize_Locate:
0020525C 266D 0018                  		movea.l	lvl_prizes(a5),a3
00205260 2800                       		move.l	d0,d4
00205262 E08C                       		lsr.l	#8,d4
00205264 0284 0000 0FFF             		and.l	#$FFF,d4
0020526A C8ED 0030                  		mulu.w	lvl_size_x(a5),d4
0020526E D6C4                       		adda	d4,a3
00205270 2800                       		move.l	d0,d4
00205272 4844                       		swap	d4
00205274 E84C                       		lsr.w	#4,d4
00205276 0284 0000 0FFF             		and.l	#$FFF,d4
0020527C D6C4                       		adda	d4,a3
0020527E 4E75                       		rts
00205280                            		
00205280                            Prize_Delete:
00205280 61DA                       		bsr.s	Prize_Locate
00205282 4213                       		clr.b	(a3)
00205284 4E75                       		rts
00205286                            		
00205286                            ; **********************************************
00205286                            ; Object action
00205286                            ; **********************************************
00205286                            
00205286                            ; ---------------------------
00205286                            ; Object action: mark 
00205286                            ; stomped by player
00205286                            ; 
00205286                            ; Input:
00205286                            ; d0 | LONG - Mappings
00205286                            ; d1 | WORD - VRAM
00205286                            ; d2 | BYTE - Frame
00205286                            ; a4 | Object who touched it
00205286                            ; ---------------------------
00205286                            
00205286                            objAction_SetStomp:
00205286 422E 001D                  		clr.b	obj_index(a6)		; Clear index
0020528A 422E 001F                  		clr.b	obj_subid(a6)		; Subaction: Stomp
0020528E 2D40 0024                  		move.l	d0,obj_ram(a6)		; Last frame
00205292 3D41 0028                  		move.w	d1,obj_ram+4(a6)
00205296 1D42 002A                  		move.b	d2,obj_ram+6(a6)
0020529A 2D43 002C                  		move.l	d3,obj_ram+8(a6)
0020529E 2D7C 0000 0000 0000        		move.l	#obj_actionscript,obj_code(a6)
002052A6 4E75                       		rts
002052A8                            		
002052A8                            ; =================================================================
002052A8                            ; --------------------------------------------
002052A8                            ; Includes
002052A8                            ; --------------------------------------------
002052A8                            
002052A8                              		include	"engine/modes/level/data/objects/player/code.asm"
002052A8                            ; =================================================================
002052A8                            ; Object
002052A8                            ; 
002052A8                            ; Player
002052A8                            ; =================================================================
002052A8                            
002052A8                            ; =================================================================
002052A8                            ; ------------------------------------------------
002052A8                            ; Variables
002052A8                            ; ------------------------------------------------
002052A8                            
002052A8 =00006780                  varPlyrVRAM	equ	$6000|$780
002052A8 =00000140                  varScrlHor	equ	320
002052A8 =0000000B                  varJumpTimer	equ	11
002052A8 =00000060                  varHurtTimer	equ	96
002052A8                            
002052A8 =00000002                  varPlyAniJump	equ	2
002052A8 =00000002                  varPlyrMdDead	equ	2
002052A8                            
002052A8 =00000005                  bitPlyrClimb	equ	5
002052A8 =00000006                  bitPlyrCancelY	equ	6
002052A8 =00000007                  bitPlyrBusy	equ	7
002052A8                            
002052A8                            ; =================================================================
002052A8                            ; ------------------------------------------------
002052A8                            ; RAM
002052A8                            ; ------------------------------------------------
002052A8                            
002052A8                            		rsset obj_ram
002052A8 =00000024                  plyr_lvltrgt	rs.w	1
002052A8 =00000026                  plyr_jumptmr	rs.w	1
002052A8 =00000028                  plyr_hits	rs.w	1
002052A8 =0000002A                  plyr_hittime	rs.w	1
002052A8 =0000002C                  plyr_spccol	rs.b	1		; %00000LCR
002052A8 =0000002D                  plyr_status	rs.b	1		; %000000FB
002052A8                            
002052A8                            ; =================================================================
002052A8                            ; ------------------------------------------------
002052A8                            ; Code start
002052A8                            ; ------------------------------------------------
002052A8                            
002052A8                            Obj_Player:
002052A8 7000                        		moveq	#0,d0
002052AA 102E 001D                   		move.b	obj_index(a6),d0
002052AE D040                        		add.w	d0,d0
002052B0 323B 0000                   		move.w	@Index(pc,d0.w),d1
002052B4 4EBB 1000                   		jsr	@Index(pc,d1.w)
002052B8                             		
002052B8                             		;Render
002052B8 7000                        		moveq	#0,d0
002052BA 303C 6780                      		move.w	#varPlyrVRAM,d0
002052BE 0C2E 0002 001D             		cmp.b	#varPlyrMdDead,obj_index(a6)
002052C4 6600                       		bne.s	@dontforce
002052C6 0040 8000                  		or.w	#$8000,d0
002052CA                            @dontforce:
002052CA 4840                           		swap	d0
002052CC 102E 0020                     		move.b	obj_frame(a6),d0
002052D0 223C 0000 0000              		move.l	#ani_player,d1
002052D6 6100 F06C                  		bsr	Object_Animate
002052DA                            		
002052DA 082E 0000 002B             		btst	#0,plyr_hittime+1(a6)
002052E0 6600                       		bne.s	@return
002052E2                            		
002052E2 102E 0020                     		move.b	obj_frame(a6),d0	
002052E6 223C 0000 0000              		move.l	#map_player,d1
002052EC 6100 ECAC                    		bsr	Object_Show
002052F0                             		
002052F0 203C 6780 0000                		move.l	#(varPlyrVRAM<<16),d0
002052F6 102E 0020                     		move.b	obj_frame(a6),d0
002052FA 223C 0000 0000             		move.l	#dplc_player,d1
00205300 243C 0000 0000             		move.l	#art_player,d2
00205306 6000 EC38                  		bra	Object_DPLC
0020530A                            
0020530A                            @return:
0020530A 4E75                       		rts
0020530C                            		
0020530C                            ; ------------------------------------------------
0020530C                            
0020530C                            @Index:
0020530C 0000                       		dc.w ObjPlyr_Init-@Index
0020530E 0000                       		dc.w ObjPlyr_Main-@Index
00205310 0000                       		dc.w ObjPlyr_Die-@Index
00205312                            		even
00205312                            
00205312                            ; =================================================================
00205312                            ; ------------------------------------------------
00205312                            ; Index $00: Init
00205312                            ; ------------------------------------------------
00205312                            
00205312                            ObjPlyr_Init:
00205312 062E 0001 001D             		add.b	#1,obj_index(a6)
00205318 2D7C 0101 0202 0004        		move.l	#$01010202,obj_size(a6)
00205320                            ; 		bset	#bitobj_flipV,obj_status(a6)
00205320                            		
00205320                            ; 		tst.w	(RAM_P1_Hits)
00205320                            ; 		beq.s	@iszerohits
00205320                            ; 		bpl.s	@dontresthit
00205320                            ; @iszerohits:
00205320 33FC 0003 FFFF DC04        		move.w	#3,(RAM_P1_Hits)
00205328                            @dontresthit:
00205328 426E 002A                  		clr.w	plyr_hittime(a6)
0020532C 08EE 0006 001E              		bset	#bitobj_hit,obj_status(a6)
00205332                             		
00205332                            ; =================================================================
00205332                            ; ------------------------------------------------
00205332                            ; Index $01: Main
00205332                            ; ------------------------------------------------
00205332                            
00205332                            ObjPlyr_Main:
00205332                            ; 		btst	#bitJoyA,(RAM_Control_2+OnPress)
00205332                            ; 		beq.s	@NotDbg
00205332                            ; 		clr.l	obj_x(a6)
00205332                            ; 		clr.l	obj_y(a6)
00205332                            ; 		clr.l	obj_x_spd(a6)
00205332                            ; 		clr.l	obj_y_spd(a6)
00205332                            ; 		lea	(RAM_LvlPlanes),a5
00205332                            ; 		clr.w	lvl_x(a5)
00205332                            ; 		clr.w	lvl_y(a5)
00205332                            ; 		movem.l	a6,-(sp)
00205332                            ; 		bsr	Level_Draw
00205332                            ; 		movem.l	(sp)+,a6
00205332                            ; @NotDbg:
00205332 0839 0003 FFFF DE82        		btst	#bitJoyMode,(RAM_Control_1+ExOnHold)
0020533A 6700                       		beq.s	@NotWnd
0020533C 6000 0000                  		bra	PlyrDebugMove
00205340                            @NotWnd:
00205340                            
00205340                            ; 		btst	#bitJoyX,(RAM_Control_1+ExOnPress)
00205340                            ; 		beq.s	@NotWnd3
00205340                            ; 		bchg	#3,(RAM_VidRegs+$C)
00205340                            ; 		bchg	#bitobj_flipH,obj_status(a6)
00205340                            ; 		bsr	Video_Update
00205340                            ; @NotWnd3:
00205340                            ; 		btst	#bitJoyY,(RAM_Control_1+ExOnPress)
00205340                            ; 		beq.s	@NotWnd2
00205340                            ; 		bchg	#bitobj_flipV,obj_status(a6)
00205340                            ; @NotWnd2:
00205340                            
00205340                            ; ----------------------------------
00205340                            ; Falling frame
00205340                            ; ----------------------------------
00205340                            
00205340                            ; 		btst	#bitobj_air,obj_status(a6)
00205340                            ; 		beq.s	@idleanim
00205340                            ; 		tst.l	obj_y_spd(a6)
00205340                            ; 		beq.s	@idleanim
00205340                            ; 		bmi.s	@idleanim
00205340                            ; 		move.b	#3,obj_anim_id(a6)
00205340                            ; @idleanim:
00205340                            
00205340 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
00205346 302D 0032                  		move.w	lvl_size_y(a5),d0		; Bottomless pit
0020534A E948                       		lsl.w	#4,d0
0020534C 322E 000C                  		move.w	obj_y(a6),d1
00205350 7400                       		moveq	#0,d2
00205352 142E 0006                  		move.b	obj_size+2(a6),d2
00205356 E74A                       		lsl.w	#3,d2
00205358 9242                       		sub.w	d2,d1
0020535A B240                       		cmp.w	d0,d1
0020535C 6E00 0000                  		bgt	PlyrLevelReset
00205360                            		
00205360 4A6E 002A                  		tst.w	plyr_hittime(a6)
00205364 6600                       		bne.s	@counting
00205366 082E 0003 001E             		btst	#bitobj_hurt,obj_status(a6)
0020536C 6700                       		beq.s	@no_action
0020536E                            		
0020536E 4A6E 002A                  		tst.w	plyr_hittime(a6)
00205372 6600                       		bne.s	@ignore
00205374 0479 0001 FFFF DC04        		sub.w	#1,(RAM_P1_Hits)
0020537C 3D7C 0060 002A             		move.w	#varHurtTimer,plyr_hittime(a6)
00205382                            		
00205382 4A79 FFFF DC04             		tst.w	(RAM_P1_Hits)
00205388 6600                       		bne.s	@counting
0020538A 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00205390 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
00205396 1D7C 0002 001D             		move.b	#2,obj_index(a6)		; Mode $02: dead
0020539C 1D7C 0005 001A             		move.b	#5,obj_anim_id(a6)		; Animation $05
002053A2 2D7C 0001 0000 0010        		move.l	#$10000,obj_x_spd(a6)
002053AA 2D7C FFFC 0000 0014        		move.l	#-$40000,obj_y_spd(a6)
002053B2                            @ignore:
002053B2 4E75                       		rts
002053B4                            		
002053B4                            @counting:
002053B4 046E 0001 002A             		sub.w	#1,plyr_hittime(a6)
002053BA 6600                       		bne.s	@no_action
002053BC 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
002053C2                            @no_action:
002053C2 6000 0000                  		bra	PlyrPhysics
002053C6                            		
002053C6                            ; =================================================================
002053C6                            ; ------------------------------------------------
002053C6                            ; Index $01: Main
002053C6                            ; ------------------------------------------------
002053C6                            
002053C6                            ObjPlyr_Die:
002053C6 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
002053CC 2C2E 0010                  		move.l	obj_x_spd(a6),d6
002053D0 2E2E 0014                  		move.l	obj_y_spd(a6),d7
002053D4 0687 0000 4000             		add.l	#$4000,d7
002053DA                            		
002053DA DDAE 0008                  		add.l	d6,obj_x(a6)
002053DE DFAE 000C                  		add.l	d7,obj_y(a6)
002053E2                            		
002053E2 302D 0032                  		move.w	lvl_size_y(a5),d0
002053E6 E948                       		lsl.w	#4,d0
002053E8 322E 000C                  		move.w	obj_y(a6),d1
002053EC 7400                       		moveq	#0,d2
002053EE 142E 0006                  		move.b	obj_size+2(a6),d2
002053F2 E74A                       		lsl.w	#3,d2
002053F4 9242                       		sub.w	d2,d1
002053F6 B240                       		cmp.w	d0,d1
002053F8 6E00                       		bgt.s	PlyrLevelReset
002053FA                            		
002053FA 2D46 0010                  		move.l	d6,obj_x_spd(a6)
002053FE 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00205402 4E75                       		rts
00205404                            		
00205404                            ; =================================================================
00205404                            ; ----------------------------------
00205404                            ; Level reset
00205404                            ; ----------------------------------
00205404                            
00205404                            PlyrLevelReset:
00205404 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
0020540C                            		
0020540C 0479 0001 FFFF DC00        		sub.w	#1,(RAM_P1_Lives)
00205414 4A79 FFFF DC00             		tst.w	(RAM_P1_Lives)
0020541A 6600                       		bne.s	@ignore
0020541C                            		;GAME OVER stuff goes here
0020541C 4239 FFFF DE4F             		clr.b	(RAM_GameMode)
00205422                            		
00205422                            @ignore:
00205422 4E75                       		rts
00205424                            		
00205424                            ; ----------------------------------
00205424                            
00205424                            PlyrDebugMove:
00205424 08AE 0005 002D             		bclr	#bitPlyrClimb,plyr_status(a6)
0020542A 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
00205430 422E 0022                  		clr.b	obj_col(a6)
00205434                            		
00205434 0839 0003 FFFF DE83        		btst	#bitJoyRight,(RAM_Control_1+OnHold)
0020543C 6700                       		beq.s	@DNotRight
0020543E 06AE 0005 0000 0008        		add.l	#$50000,obj_x(a6)
00205446 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
0020544C                            @DNotRight:
0020544C 0839 0002 FFFF DE83        		btst	#bitJoyLeft,(RAM_Control_1+OnHold)
00205454 6700                       		beq.s	@DNotLeft
00205456 04AE 0005 0000 0008        		sub.l	#$50000,obj_x(a6)
0020545E 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
00205464                            @DNotLeft:
00205464 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
0020546C 6700                       		beq.s	@DNotDown
0020546E 06AE 0005 0000 000C        		add.l	#$50000,obj_y(a6)
00205476                            @DNotDown:
00205476 0839 0000 FFFF DE83        		btst	#bitJoyUp,(RAM_Control_1+OnHold)
0020547E 6700                       		beq.s	@DNotUp
00205480 04AE 0005 0000 000C        		sub.l	#$50000,obj_y(a6)
00205488                            @DNotUp:
00205488 2D7C 0000 0001 0010        		move.l	#1,obj_x_spd(a6)		;Temporal
00205490 2D7C 0000 0001 0014        		move.l	#1,obj_y_spd(a6)
00205498                            		
00205498 6000 0000                    		bra	Plyr_LvlCamera
0020549C                              		
0020549C                            ; ----------------------------------
0020549C                            ; Player physics
0020549C                            ; ----------------------------------
0020549C                            
0020549C                            PlyrPhysics:
0020549C 2C2E 0010                  		move.l	obj_x_spd(a6),d6
002054A0 2E2E 0014                  		move.l	obj_y_spd(a6),d7
002054A4                            
002054A4                            ; ------------------------
002054A4                            ; Animation ID
002054A4                            ; ------------------------
002054A4                            
002054A4 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
002054AA 6600                       		bne.s	@walking
002054AC 082E 0002 001E             		btst	#bitobj_air,obj_status(a6)
002054B2 6600                       		bne.s	@walking
002054B4                            
002054B4 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
002054BA 4A86                       		tst.l	d6
002054BC 6600                       		bne.s	@walking
002054BE 422E 001A                  		clr.b	obj_anim_id(a6)
002054C2                            @walking:
002054C2                            
002054C2                            ; ***************
002054C2                            ; X Speed stuff
002054C2                            ; ***************
002054C2                            
002054C2 6100 0000                  		bsr	@Player_Friction
002054C6 6100 0000                  		bsr	@Player_Walk
002054CA DDAE 0008                  		add.l	d6,obj_x(a6)			;X + X Speed
002054CE 6100 0000                  		bsr	PlyrColRead_Wall
002054D2                            		
002054D2                            ; ***************
002054D2                            ; Y Speed stuff
002054D2                            ; ***************
002054D2                            ; 
002054D2 6100 0000                  		bsr	@Player_Jump
002054D6 DFAE 000C                  		add.l	d7,obj_y(a6)			;Y + Y Speed
002054DA 6100 0000                    		bsr	PlyrColRead_Ceiling
002054DE 6100 0000                  		bsr	PlyrColRead_Floor
002054E2                            
002054E2                            ; ***************
002054E2                            ; Save them
002054E2                            ; ***************
002054E2                            
002054E2 2D46 0010                  		move.l	d6,obj_x_spd(a6)
002054E6 2D47 0014                  		move.l	d7,obj_y_spd(a6)
002054EA                            		
002054EA 6000 0000                   		bra	Plyr_LvlCamera
002054EE                            	
002054EE                            ; =================================================================
002054EE                            ; ------------------------------------------------
002054EE                            ; Subs
002054EE                            ; ------------------------------------------------
002054EE                            
002054EE                            ; **********************************
002054EE                            ; Player Walk
002054EE                            ; **********************************
002054EE                            
002054EE                            @Player_Walk:
002054EE 2806                       		move.l	d6,d4
002054F0 0839 0003 FFFF DE83        		btst	#bitJoyRight,(RAM_Control_1+OnHold)
002054F8 6700                       		beq.s	@NotRight
002054FA 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00205500 6600                       		bne.s	@NotMuchRight
00205502 7000                       		moveq	#0,d0
00205504 3039 FFFF BC34             		move.w	(RAM_LvlPlanes+lvl_maxcam_x),d0
0020550A E948                       		lsl.w	#4,d0
0020550C 322E 0008                  		move.w	obj_x(a6),d1
00205510 B240                       		cmp.w	d0,d1
00205512 6E00                       		bgt.s	@NotRight
00205514                            	
00205514                            ; 		tst.l	d4
00205514                            ; 		bpl.s	@NotRunningR
00205514 203C 0001 E000             		move.l	#$1E000,d0
0020551A 0839 0004 FFFF DE83         		btst	#bitJoyB,(RAM_Control_1+OnHold)
00205522 6700                        		beq.s	@NotRunningR
00205524 203C 0002 8000              		move.l	#$28000,d0
0020552A                            @NotRunningR:
0020552A                            
0020552A 0686 0000 4800             		add.l	#$4800,d6
00205530 BC80                       		cmp.l	d0,d6
00205532 6D00                       		blt.s	@NotMuchRight
00205534 2C00                       		move.l	d0,d6
00205536                            @NotMuchRight:
00205536 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
0020553C                            
0020553C                            @NotRight:
0020553C 0839 0002 FFFF DE83        		btst	#bitJoyLeft,(RAM_Control_1+OnHold)
00205544 6700                       		beq.s	@NotLeft
00205546 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0020554C 6600                       		bne.s	@NotMuchLeft
0020554E 4AAE 0008                  		tst.l	obj_x(a6)
00205552 6700                       		beq.s	@NotLeft
00205554 6B00                       		bmi.s	@NotLeft
00205556                            		
00205556                            ; 		tst.l	d4
00205556                            ; 		bmi.s	@NotRunningL
00205556 203C FFFE 0000             		move.l	#-$20000,d0
0020555C 0839 0004 FFFF DE83         		btst	#bitJoyB,(RAM_Control_1+OnHold)
00205564 6700                        		beq.s	@NotRunningL
00205566 203C FFFD 0000              		move.l	#-$30000,d0
0020556C                            @NotRunningL:
0020556C                            
0020556C                            		
0020556C 0486 0000 4800             		sub.l	#$4800,d6
00205572 BC80                       		cmp.l	d0,d6
00205574 6E00                       		bgt.s	@NotMuchLeft
00205576 2C00                       		move.l	d0,d6
00205578                            @NotMuchLeft:
00205578 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
0020557E                            @NotLeft:		
0020557E 4E75                       		rts
00205580                            		
00205580                            ; **********************************
00205580                            ; Player Friction
00205580                            ; **********************************
00205580                            
00205580                            @Player_Friction:
00205580 283C 0000 2400             		move.l	#$2400,d4			;Friction
00205586 4A86                       		tst.l	d6
00205588 6700                       		beq.s	@FineSpeed
0020558A 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
00205590 6600                       		bne.s	@Left
00205592 9C84                       		sub.l	d4,d6
00205594 6A00                       		bpl.s	@FineSpeed
00205596 4286                       		clr.l	d6
00205598 4E75                       		rts
0020559A                            @Left:
0020559A DC84                       		add.l	d4,d6
0020559C 6B00                       		bmi.s	@FineSpeed
0020559E                            		
0020559E                            @ignoreR:
0020559E 4286                       		clr.l	d6
002055A0                            @FineSpeed:	
002055A0 4E75                       		rts
002055A2                            
002055A2                            ; **********************************
002055A2                            ; Player jump
002055A2                            ; **********************************
002055A2                            
002055A2                            @Player_Jump:
002055A2 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
002055A8 6600                       		bne.s	@JumpFromLadder
002055AA 082E 0006 002D             		btst	#bitPlyrCancelY,plyr_status(a6)
002055B0 6600                       		bne.s	@JumpFromLadder
002055B2                            		
002055B2 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
002055BA 6700 0000                  		beq	@IsFalling
002055BE                            		
002055BE 0C6E 000B 0026              		cmp.w	#varJumpTimer,plyr_jumptmr(a6)
002055C4 6600                        		bne.s	@onair
002055C6 082E 0004 0022               		btst	#bitcol_obj,obj_col(a6)
002055CC 6600                           		bne.s	@onair
002055CE 082E 0000 0022               		btst	#bitcol_floor,obj_col(a6)
002055D4 6700                           		beq.s	@IsFalling
002055D6                            @onair:
002055D6                            
002055D6 046E 0001 0026             		sub.w	#1,plyr_jumptmr(a6)
002055DC 6B00                       		bmi.s	@IsFalling
002055DE                            
002055DE 082E 0002 001E              		btst	#bitobj_air,obj_status(a6)
002055E4 6600                        		bne.s	@onair2
002055E6                            
002055E6 1D7C 0002 001A              		move.b	#varPlyAniJump,obj_anim_id(a6)
002055EC 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
002055F2 08AE 0000 0022                  		bclr	#bitcol_floor,obj_col(a6)
002055F8 08AE 0004 0022                  		bclr	#bitcol_obj,obj_col(a6)
002055FE 2E3C FFFB E000                		move.l	#-$42000,d7
00205604 2006                          		move.l	d6,d0
00205606 E480                          		asr.l	#2,d0
00205608 4A80                          		tst.l	d0
0020560A 6B00                          		bmi.s	@dontnegx
0020560C 4480                          		neg.l	d0
0020560E                            @dontnegx:
0020560E DE80                       		add.l	d0,d7
00205610                            		
00205610 203C 0000 0000               		move.l	#SndSfx_PlyrJump,d0
00205616 7201                         		moveq 	#1,d1
00205618 7401                         		moveq	#1,d2
0020561A 6100 B0F4                    		bsr	Audio_Track_play
0020561E                            @onair2:
0020561E 4E75                          		rts
00205620                              
00205620                            ; ----------------------------------
00205620                            
00205620                            @JumpFromLadder:
00205620 0839 0005 FFFF DE85        		btst	#bitJoyC,(RAM_Control_1+OnPress)
00205628 6700 0000                  		beq	@IsFalling
0020562C                            		
0020562C 08AE 0005 002D             		bclr	#bitPlyrClimb,plyr_status(a6)
00205632 08EE 0002 001E              		bset	#bitobj_air,obj_status(a6)
00205638 1D7C 0002 001A              		move.b	#2,obj_anim_id(a6)
0020563E 4286                          		clr.l	d6
00205640 4287                          		clr.l	d7
00205642 4E75                        		rts
00205644                             		
00205644                            ; ----------------------------------
00205644                            
00205644                            @IsFalling:
00205644 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
0020564A 6600                       		bne.s	@low_fall
0020564C 082E 0000 0022                		btst	#bitcol_floor,obj_col(a6)
00205652 6600                           		bne.s	@low_fall
00205654                            
00205654 0687 0000 4800              		add.l	#$4800,d7
0020565A 0C87 0010 0000             		cmp.l	#$100000,d7
00205660 6D00                       		blt.s	@low_fall
00205662 2E3C 0010 0000             		move.l	#$100000,d7
00205668                            @low_fall:
00205668 4E75                       		rts
0020566A                            		
0020566A                            ; **********************************
0020566A                            ; Object to Level layout collision
0020566A                            ; **********************************
0020566A                            
0020566A                            ; ----------------------------------
0020566A                            ; floor collision
0020566A                            ; ----------------------------------
0020566A                            
0020566A                            PlyrColRead_Floor:
0020566A 08AE 0000 0022              		bclr	#bitcol_floor,obj_col(a6)
00205670 08AE 0002 001E              		bclr	#bitobj_air,obj_status(a6)
00205676                             		
00205676 082E 0004 0022              		btst	#bitcol_obj,obj_col(a6)
0020567C 6600                        		bne.s	@dont
0020567E 08EE 0002 001E              		bset	#bitobj_air,obj_status(a6)
00205684                            @dont:
00205684 08AE 0004 0022              		bclr	#bitcol_obj,obj_col(a6)
0020568A                             		
0020568A 4A87                       		tst.l	d7
0020568C 6B00                       		bmi.s	@going_up
0020568E                            
0020568E                            ; 		bsr	object_FindPrz_Floor		;TODO: no sirve en prizes
0020568E                            ;  		btst	#7,d0
0020568E                            ;  		beq.s	@cntrnrml
0020568E                            ; 		clr.b	d0
0020568E                            ; @cntrnrml:
0020568E                            ; 		tst.b	d0
0020568E                            ; 		bne	@przfloor_center
0020568E                            
0020568E 6100 EF70                   		bsr 	object_FindPrz_FloorSides
00205692                             		
00205692 4A00                       		tst.b	d0
00205694 6600 0000                  		bne	@przfloor_right
00205698 2001                       		move.l	d1,d0
0020569A 4A00                       		tst.b	d0
0020569C 6600 0000                  		bne	@przfloor_left
002056A0                            
002056A0 6100 EDC0                  		bsr	object_FindCol_Floor
002056A4 6100 0000                  		bsr	@center_special
002056A8 4A00                       		tst.b	d0
002056AA 6600                       		bne.s	@found_center
002056AC 6100 EF5E                   		bsr 	object_FindCol_FloorSides
002056B0 6100 0000                  		bsr	@right_special
002056B4 4A00                       		tst.b	d0
002056B6 6600 0000                  		bne	@found_sides
002056BA 2001                       		move.l	d1,d0
002056BC 6100 0000                  		bsr	@left_special
002056C0 4A00                       		tst.b	d0
002056C2 6600 0000                  		bne	@found_sides
002056C6                            @going_up:
002056C6                            
002056C6 4E75                       		rts
002056C8                            		
002056C8                            ; ----------------------------------
002056C8                            
002056C8                            @found_center:
002056C8 0C00 0001                  		cmp.b	#1,d0
002056CC 6700 0000                  		beq	@floorsolid
002056D0                            
002056D0 6000                       		bra.s	@SlopeCenter
002056D2                            		
002056D2                            ; ----------------------------------
002056D2                            
002056D2                            @found_sides:
002056D2 0C00 0001                  		cmp.b	#1,d0
002056D6 6700 0000                  		beq	@floorsolid
002056DA 4E75                       		rts
002056DC                            
002056DC                            ; ----------------------------------
002056DC                            
002056DC                            @SlopeCenter:
002056DC 4A87                          		tst.l	d7
002056DE 6B00 0000                     		bmi	@NoCol
002056E2                               				
002056E2 222E 000C                     		move.l	obj_y(a6),d1
002056E6 2401                          		move.l	d1,d2
002056E8 47F9 0020 3DCE               		lea	(col_SlopeData),a3
002056EE 0240 00FF                    		and.w	#$FF,d0
002056F2 3200                         		move.w	d0,d1
002056F4 E949                         		lsl.w	#4,d1
002056F6 D6C1                         		adda	d1,a3
002056F8 202E 0008                   		move.l	obj_x(a6),d0
002056FC 4840                        		swap	d0
002056FE 0240 000F                   		and.w	#$F,d0
00205702 1033 0000                   		move.b	(a3,d0.w),d0
00205706 0240 000F                      		and.w	#$F,d0
0020570A 0281 FFF0 0000                 		and.l	#$FFF00000,d1
00205710 4840                         		swap	d0
00205712 0280 FFFF 0000               		and.l	#$FFFF0000,d0
00205718 D280                        		add.l	d0,d1
0020571A                             		
0020571A                             		;TODO: no recuerdo pa que
0020571A                             		;era este fix
0020571A                             		; tambien ver que pedo
0020571A                             		; porque dominou no
0020571A                             		; se queda pegado a los slopes
0020571A                             		
0020571A                            ;  		move.l	obj_x_spd(a6),d0
0020571A                            ;  		btst	#bitobj_flipH,obj_status(a6)
0020571A                            ;  		beq.s	@right
0020571A                            ;  		neg.l	d0
0020571A                            ; @right:
0020571A                            ; 		cmp.l	#$20000,d0
0020571A                            ; 		bge.s	@dontchk
0020571A 082E 0002 001E               		btst	#bitobj_air,obj_status(a6)
00205720 6700                         		beq.s	@dontchk
00205722 B481                         		cmp.l	d1,d2
00205724 6D00                         		blt.s	@NoCol
00205726                            @dontchk:
00205726 2E3C 0005 0000              		move.l	#$50000,d7
0020572C 2D41 000C                    		move.l	d1,obj_y(a6)
00205730 6100 0000                     		bsr	@objFloorFlags
00205734                            @NoCol:
00205734 4E75                       		rts
00205736                            		
00205736                            ; ----------------------------------
00205736                            ; Event block: on floor
00205736                            ; ----------------------------------
00205736                            
00205736                            @center_special:
00205736 0800 0006                  		btst	#6,d0
0020573A 6700                       		beq.s	@return
0020573C 6100 0000                  		bsr	plyrColEntry
00205740 3814                       		move.w	(a4),d4
00205742 6000 0000                  		bra	plyrColGo
00205746                            		
00205746                            @left_special:
00205746 0800 0006                  		btst	#6,d0
0020574A 6700                       		beq.s	@return
0020574C 6100 0000                  		bsr	plyrColEntry
00205750 382C 0002                  		move.w	2(a4),d4
00205754 6000 0000                  		bra	plyrColGo
00205758                            		
00205758                            @right_special:
00205758 0800 0006                  		btst	#6,d0
0020575C 6700                       		beq.s	@return
0020575E 6100 0000                  		bsr	plyrColEntry
00205762 382C 0004                  		move.w	4(a4),d4
00205766 6000 0000                  		bra	plyrColGo
0020576A                            @return:
0020576A 4E75                       		rts
0020576C                            
0020576C                            ; ----------------------------------
0020576C                            ; Prizes on floor
0020576C                            ; ----------------------------------
0020576C                            
0020576C                            @przfloor_center:
0020576C                            @przfloor_left:
0020576C                            @przfloor_right:
0020576C 7801                       		moveq	#1,d4
0020576E                            		
0020576E 0C00 0020                  		cmp.b	#$20,d0
00205772 6700                       		beq.s	@trampoline
00205774                            		
00205774 0C00 0040                  		cmp.b	#$40,d0		;> $40?
00205778 6D00                       		blt.s	@a_coin
0020577A 0200 003F                  		and.b	#$3F,d0
0020577E 7801                       		moveq	#1,d4
00205780 4A00                       		tst.b	d0
00205782 6700                       		beq.s	@setcoin
00205784 7805                       		moveq	#5,d4
00205786                            @setcoin:
00205786 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
0020578C 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
00205794 6D00                         		blt.s	@dontadd1up
00205796 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
0020579C 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
002057A4                            @dontadd1up:
002057A4                            
002057A4 6100 FADA                  		bsr	Prize_Delete
002057A8 6100 E17A                  		bsr	Level_HidePrize
002057AC                            		
002057AC 203C 0000 0000               		move.l	#SndSfx_COIN,d0
002057B2 7202                         		moveq 	#2,d1
002057B4 7401                         		moveq	#1,d2
002057B6 6100 AF58                    		bsr	Audio_Track_play
002057BA 7800                       		moveq	#0,d4
002057BC                            @a_coin:
002057BC 4A44                       		tst.w	d4
002057BE 6600                       		bne.s	@floorsolid
002057C0 4E75                       		rts
002057C2                            		
002057C2                            ; $20
002057C2                            
002057C2                            @trampoline:
002057C2 6100 FA6E                  		bsr	goToTrampolineWhy
002057C6                            		
002057C6 2E3C FFF8 0000             		move.l	#-$80000,d7
002057CC 7801                       		moveq	#1,d4
002057CE 4E75                       		rts
002057D0                            		
002057D0                            ; ----------------------------------
002057D0                            
002057D0                            ; @check_prz_id:
002057D0                            ;    		bsr	Object_PrzActionCeil
002057D0                            ;   		tst.w	d4
002057D0                            ;   		bne	@ceilingsolid
002057D0                            ; 		rts
002057D0                            		
002057D0                            ;       	bsr	level_CheckPrize
002057D0                            ;        	bne	@floorsolid
002057D0                            ;        	rts
002057D0                            
002057D0                            ; ----------------------------------
002057D0                            		
002057D0                            @floorsolid:
002057D0 6100 0000                  		bsr	@objFloorFlags
002057D4 02AE FFF0 0000 000C         		and.l	#$FFF00000,obj_y(a6)
002057DC 4287                       		clr.l	d7
002057DE 4E75                       		rts
002057E0                            
002057E0                            ; ----------------------------------
002057E0                            
002057E0                            @objFloorFlags:
002057E0 08EE 0000 0022               		bset	#bitcol_floor,obj_col(a6)
002057E6 08AE 0002 001E             		bclr	#bitobj_air,obj_status(a6)
002057EC                            		
002057EC 0839 0005 FFFF DE83        		btst	#bitJoyC,(RAM_Control_1+OnHold)
002057F4 6600 0000                  		bne	@onhold
002057F8 3D7C 000B 0026                 		move.w	#varJumpTimer,plyr_jumptmr(a6)
002057FE                            @onhold:
002057FE 08AE 0005 002D              		bclr	#bitPlyrClimb,plyr_status(a6)
00205804 08AE 0006 002D             		bclr	#bitPlyrCancelY,plyr_status(a6)
0020580A 4E75                       		rts
0020580C                            		
0020580C                            ; ----------------------------------
0020580C                            ; ceiling collision
0020580C                            ; ----------------------------------
0020580C                            
0020580C                            PlyrColRead_Ceiling:
0020580C 08AE 0001 0022             		bclr	#bitcol_ceiling,obj_col(a6)
00205812 4A87                       		tst.l	d7
00205814 6A00                       		bpl.s	@doing_down
00205816                            		
00205816 6100 F178                   		bsr 	object_FindCol_CeilingSides
0020581A 2400                        		move.l	d0,d2
0020581C 2601                        		move.l	d1,d3
0020581E 6100 F164                   		bsr 	object_FindPrz_CeilingSides
00205822 4A00                       		tst.b	d0
00205824 6600 0000                  		bne	@przceil_right
00205828 2002                       		move.l	d2,d0
0020582A 6100 0000                  		bsr	@right_special
0020582E 4A00                       		tst.b	d0
00205830 6600 0000                   		bne	@ceiling_sides
00205834 2001                       		move.l	d1,d0
00205836 4A00                       		tst.b	d0
00205838 6600 0000                  		bne	@przceil_left
0020583C 2003                       		move.l	d3,d0
0020583E 6100 0000                  		bsr	@left_special
00205842 4A00                       		tst.b	d0
00205844 6600 0000                  		bne	@ceiling_sides
00205848                            		
00205848 6100 ED46                  		bsr	object_FindPrz_Ceiling
0020584C 4A00                       		tst.b	d0
0020584E 6600 0000                  		bne	@przceil_center
00205852 6100 ED48                  		bsr	object_FindCol_Ceiling
00205856 6100 0000                  		bsr	@center_special
0020585A 4A00                       		tst.b	d0
0020585C 6600                       		bne.s	@ceiling_center
0020585E                            		
0020585E                            @doing_down:
0020585E 4E75                       		rts
00205860                            
00205860                            ; ----------------------------------
00205860                            
00205860                            @ceiling_center:
00205860                            ; 		cmp.b	#1,d0
00205860                            ;  		beq.s	@ceilingsolid
00205860                            ;  		rts
00205860                            
00205860                            ; ----------------------------------
00205860                            
00205860                            @ceiling_sides:
00205860 0C00 0001                  		cmp.b	#1,d0
00205864 6700                       		beq.s	@ceilingsolid
00205866 4E75                       		rts
00205868                            
00205868                            ; ----------------------------------
00205868                            
00205868                            @ceilingsolid:
00205868 08EE 0002 001E             		bset	#bitobj_air,obj_status(a6)
0020586E 08EE 0001 0022              		bset	#bitcol_ceiling,obj_col(a6)
00205874 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
0020587A                            ; 		move.l	#$10000,d7
0020587A                            ;         	add.w	#$10,obj_y(a6)
0020587A                            ;       	and.l	#$FFF80000,obj_y(a6)
0020587A                            
0020587A                            ; 		move.l	d0,d1
0020587A                            ; 		lsr.l	#4,d1
0020587A                            ; 		and.w	#$FFF0,d1
0020587A                            ; 		add.w	#$10,d1
0020587A                            ; 		add.w	#$20,d1
0020587A                            ; 		move.w	d1,obj_y(a6)
0020587A                            		
0020587A 4E75                        		rts
0020587C                            		
0020587C                            ; ----------------------------------
0020587C                            ; Event block: ceiling
0020587C                            ; ----------------------------------
0020587C                            
0020587C                            @center_special:
0020587C 0800 0006                  		btst	#6,d0
00205880 6700                       		beq.s	@return
00205882 6100 0000                  		bsr	plyrColEntry
00205886 382C 000C                  		move.w	$C(a4),d4
0020588A 6000 0000                  		bra	plyrColGo
0020588E                            		
0020588E                            @left_special:
0020588E 0800 0006                  		btst	#6,d0
00205892 6700                       		beq.s	@return
00205894 6100 0000                  		bsr	plyrColEntry
00205898 382C 000E                  		move.w	$E(a4),d4
0020589C 6000 0000                  		bra	plyrColGo
002058A0                            		
002058A0                            @right_special:
002058A0 0800 0006                  		btst	#6,d0
002058A4 6700                       		beq.s	@return
002058A6 6100 0000                  		bsr	plyrColEntry
002058AA 382C 0010                  		move.w	$10(a4),d4
002058AE 6000 0000                  		bra	plyrColGo
002058B2                            		
002058B2                            @return:
002058B2 4E75                       		rts
002058B4                            		
002058B4                            ; ----------------------------------
002058B4                            
002058B4                            @przceil_center:
002058B4                            @przceil_left:
002058B4                            @przceil_right:
002058B4 6100 F676                     		bsr	Object_PrzActionCeil
002058B8 4A44                         		tst.w	d4
002058BA 6600 FFAC                    		bne	@ceilingsolid
002058BE 4E75                       		rts
002058C0                            		
002058C0                            ; ----------------------------------
002058C0                            ; d0 - LEFT
002058C0                            ; d1 - RIGHT
002058C0                            ; d2 - CENTER
002058C0                            ; ----------------------------------
002058C0                            
002058C0                            ; @prizes_ceiling:
002058C0                            ; 		move.l	d0,d3
002058C0                            ; 		btst	#bitobj_flipH,obj_status(a6)
002058C0                            ; 		beq.s	@itsleft
002058C0                            ; 		exg.l	d1,d3
002058C0                            ; @itsleft:
002058C0                            ; 
002058C0                            ;    		move.l	d2,d0
002058C0                            ;    		tst.b	d0
002058C0                            ;    		beq.s	@przc_no_c
002058C0                            ;   		bsr	Object_PrzActionCeil
002058C0                            ;  		tst.w	d4
002058C0                            ;  		bne	@ceilingsolid
002058C0                            ; @przc_no_c:
002058C0                            ; 
002058C0                            ; 		move.l	d1,d0
002058C0                            ; 		tst.b	d0
002058C0                            ; 		beq.s	@przc_no_r
002058C0                            ; 		bsr	Object_PrzActionCeil
002058C0                            ; 		tst.w	d4
002058C0                            ; 		bne	@ceilingsolid
002058C0                            ; @przc_no_r:
002058C0                            ;  		move.l	d3,d0
002058C0                            ;  		tst.b	d0
002058C0                            ;  		beq.s	@przc_no_l
002058C0                            ;  		bsr	Object_PrzActionCeil
002058C0                            ; 		tst.w	d4
002058C0                            ; 		bne	@ceilingsolid
002058C0                            ; @przc_no_l:
002058C0                            ; 		rts
002058C0                            		
002058C0                            ; **********************************
002058C0                            ; Wall collision
002058C0                            ; **********************************
002058C0                            
002058C0                            PlyrColRead_Wall:
002058C0 08AE 0002 0022             		bclr	#bitcol_wall_r,obj_col(a6)
002058C6 08AE 0003 0022             		bclr	#bitcol_wall_l,obj_col(a6)
002058CC                            		
002058CC                            		; Ignorar PRIZEs si Player esta
002058CC                            		; en modo escalera
002058CC 082E 0005 002D              		btst	#bitPlyrClimb,plyr_status(a6)
002058D2 6600                        		bne.s	@okaydntchk
002058D4 6100 EBEE                  		bsr	object_FindPrz_Wall
002058D8 2400                       		move.l	d0,d2
002058DA 6100 EE38                  		bsr	object_FindPrz_WallSides
002058DE 0800 0007                   		btst	#7,d0
002058E2 6700                        		beq.s	@righthidn
002058E4 4200                        		clr.b	d0
002058E6                            @righthidn:
002058E6 4A00                       		tst.b	d0
002058E8 6600 0000                  		bne	@przwall_right
002058EC 2001                       		move.l	d1,d0
002058EE 0800 0007                   		btst	#7,d0
002058F2 6700                        		beq.s	@lefthidn
002058F4 4200                        		clr.b	d0
002058F6                            @lefthidn:
002058F6 4A00                       		tst.b	d0
002058F8 6600 0000                  		bne	@przwall_left
002058FC                            @okaydntchk:
002058FC                            
002058FC 6100 EBD2                  		bsr	object_FindCol_Wall
00205900 6100 0000                  		bsr	@center_special
00205904 4A00                       		tst.b	d0
00205906 6600                       		bne.s	@wall_center
00205908                            		
00205908 6100 EE16                   		bsr 	object_FindCol_WallSides
0020590C 6100 0000                  		bsr	@right_special
00205910 4A00                       		tst.b	d0
00205912 6600 0000                  		bne	@wall_right
00205916                            		
00205916 2001                       		move.l	d1,d0
00205918 6100 0000                  		bsr	@left_special
0020591C 4A00                       		tst.b	d0
0020591E 6600 0000                  		bne	@wall_left
00205922 4E75                       		rts
00205924                            		
00205924                            ; ----------------------------------
00205924                            
00205924                            @wall_center:
00205924 0C40 0001                  		cmp.w	#1,d0
00205928 6700 0000                   		beq	@wallsolid_slope
0020592C                            		
0020592C 4A87                       		tst.l	d7
0020592E 6B00                       		bmi.s	@NoCol_LR
00205930 082E 0002 001E                		btst	#bitobj_air,obj_status(a6)
00205936 6600                          		bne.s	@NoCol_LR
00205938 4287                           		clr.l	d7	
0020593A 08AE 0002 001E                 		bclr	#bitobj_air,obj_status(a6)
00205940                                		
00205940 322E 000C                  		move.w	obj_y(a6),d1
00205944 0441 0001                  		sub.w	#1,d1
00205948 3601                       		move.w	d1,d3
0020594A 0241 FFF0                  		and.w	#$FFF0,d1 		
0020594E 47F9 0020 3DCE                  		lea	(col_SlopeData),a3
00205954 0240 00FF                        		and.w	#$FF,d0
00205958 E948                            		lsl.w	#4,d0
0020595A D6C0                             		adda	d0,a3
0020595C 302E 0008                        		move.w	obj_x(a6),d0
00205960 0240 000F                        		and.w	#$F,d0
00205964 1433 0000                        		move.b	(a3,d0.w),d2
00205968 0242 000F                        		and.w	#$F,d2
0020596C D242                             		add.w	d2,d1
0020596E                                  		
0020596E 082E 0002 001E              		btst	#bitobj_air,obj_status(a6)
00205974 6700                       		beq.s	@dontchkLR
00205976 B641                         		cmp.w	d1,d3
00205978 6D00                         		blt.s	@NoCol_LR
0020597A                            @dontchkLR:
0020597A 3D41 000C                     		move.w	d1,obj_y(a6)
0020597E                            
0020597E                            @NoCol_LR:
0020597E 4E75                       		rts
00205980                            
00205980                            ; ----------------------------------
00205980                            ; Prizes on walls
00205980                            ; ----------------------------------	
00205980                            
00205980                            @przwall_left:
00205980 6100 0000                  		bsr	@check_wll_prz
00205984 4A44                          		tst.w	d4
00205986 6600 0000                     		bne	@wallsolid_l
0020598A 4E75                       		rts
0020598C                            @przwall_right:
0020598C 6100 0000                  		bsr	@check_wll_prz
00205990 4A44                          		tst.w	d4
00205992 6600 0000                     		bne	@wallsolid_r
00205996 4E75                       		rts
00205998                            	
00205998                            ; ----------------------------------
00205998                            
00205998                            @check_wll_prz:
00205998 7801                       		moveq	#1,d4
0020599A                            		
0020599A 0C00 0020                  		cmp.b	#$20,d0
0020599E 6700                       		beq.s	@trampolinewll
002059A0                            		
002059A0 0C00 0040                  		cmp.b	#$40,d0		;> $40?
002059A4 6D00                       		blt.s	@notcoin
002059A6 0200 003F                  		and.b	#$3F,d0
002059AA 7801                       		moveq	#1,d4
002059AC 4A00                       		tst.b	d0
002059AE 6700                       		beq.s	@setcoin
002059B0 7805                       		moveq	#5,d4
002059B2                            @setcoin:
002059B2 D979 FFFF DC02             		add.w	d4,(RAM_P1_Coins)
002059B8 0C79 0064 FFFF DC02          		cmp.w	#100,(RAM_P1_Coins)
002059C0 6D00                         		blt.s	@dontadd1up2
002059C2 4279 FFFF DC02               		clr.w	(RAM_P1_Coins)
002059C8 0679 0001 FFFF DC00          		add.w	#1,(RAM_P1_Lives)
002059D0                            @dontadd1up2:
002059D0                            
002059D0 6100 F8AE                  		bsr	Prize_Delete
002059D4 6100 DF4E                  		bsr	Level_HidePrize
002059D8                            ; 		move.l	d0,(RAM_LvlPlanes+lvl_przreq)
002059D8                            ; 		bset	#bitLvlHidePrz,(RAM_LvlPlanes+lvl_flags)
002059D8                            
002059D8 203C 0000 0000               		move.l	#SndSfx_COIN,d0
002059DE 7202                         		moveq 	#2,d1
002059E0 7401                         		moveq	#1,d2
002059E2 6100 AD2C                    		bsr	Audio_Track_play
002059E6 7800                       		moveq	#0,d4
002059E8                            		
002059E8                            @notcoin:
002059E8 4E75                       		rts
002059EA                            		
002059EA                            @trampolinewll:
002059EA 6100 F846                  		bsr	goToTrampolineWhy
002059EE                            
002059EE                            ; 		and.w	#$FFF8,obj_x(a6)
002059EE                            		
002059EE 203C FFF8 0000             		move.l	#-$80000,d0
002059F4                            ; 		btst	#bitobj_flipH,obj_status(a6)
002059F4                            ; 		bne.s	@lefty
002059F4                            ; 		tst.l	d6
002059F4                            ; 		bpl.s	@righy
002059F4                            ; @lefty:
002059F4                            ; 		neg.l	d0
002059F4                            ; @righy:
002059F4 2C00                       		move.l	d0,d6
002059F6 7800                       		moveq	#0,d4
002059F8 4E75                       		rts
002059FA                            		
002059FA                            ; ----------------------------------
002059FA                            
002059FA                            @wall_right:
002059FA                            ; 		btst	#bitobj_flipH,obj_status(a6)
002059FA                            ; 		bne.s	@return_w
002059FA 0C00 0002                    		cmp.b	#2,d0
002059FE 6C00                         		bge.s	@return_w
00205A00 0C00 0001                   		cmp.b	#1,d0
00205A04 6700                         		beq.s	@wallsolid_r
00205A06 4E75                         		rts
00205A08                              		
00205A08                            @wall_left:
00205A08                            ; 		btst	#bitobj_flipH,obj_status(a6)
00205A08                            ; 		beq.s	@return_w
00205A08 0C00 0002                    		cmp.b	#2,d0
00205A0C 6C00                         		bge.s	@return_w
00205A0E 0C00 0001                    		cmp.b	#1,d0
00205A12 6700                         		beq.s	@wallsolid_l
00205A14                            @return_w:
00205A14 4E75                       		rts
00205A16                            		
00205A16                            ; ----------------------------------
00205A16                            
00205A16                            @wallsolid_r:
00205A16 026E FFF8 0008             		and.w	#$FFF8,obj_x(a6)
00205A1C                            		
00205A1C 4286                       		clr.l	d6
00205A1E 08EE 0002 0022             		bset	#bitcol_wall_r,obj_col(a6)
00205A24 4E75                       		rts
00205A26                            
00205A26                            ; ----------------------------------
00205A26                            
00205A26                            @wallsolid_l:
00205A26 066E 0004 0008             		add.w	#4,obj_x(a6)
00205A2C 026E FFF8 0008             		and.w	#$FFF8,obj_x(a6)
00205A32                            		
00205A32                            ; 		moveq	#0,d4
00205A32                            ; 		move.b	obj_size(a6),d4
00205A32                            ; 		lsl.w	#3,d4
00205A32                            ; 		move.w	obj_x(a6),d5
00205A32                            ; 		sub.w	#1,d5
00205A32                            ; 		sub.w	d4,d5
00205A32                            ; 		tst.w	d5
00205A32                            ; 		bpl.s	@noleftlvl
00205A32                            ; 		
00205A32                            ; 		moveq	#0,d0
00205A32                            ; 		add.w	d4,d0
00205A32                            ; 		move.w	d0,obj_x(a6)
00205A32                            ; 		bra.s	@leftend
00205A32                            ; @noleftlvl:
00205A32                            ; 		move.l	d0,d2
00205A32                            ; 		swap	d2
00205A32                            ; 		and.w	#$FFF0,d2
00205A32                            ; 		add.w	#$10,d2
00205A32                            ; 		add.w	#8,d2
00205A32                            ; 		move.w	d2,obj_x(a6)
00205A32                            ; @leftend:
00205A32 4286                       		clr.l	d6
00205A34 08EE 0003 0022             		bset	#bitcol_wall_l,obj_col(a6)
00205A3A 4E75                       		rts
00205A3C                            
00205A3C                            ; ----------------------------------
00205A3C                            
00205A3C                            @wallsolid_slope:
00205A3C 082E 0000 001E                  		btst	#bitobj_flipH,obj_status(a6)
00205A42 6600                       		bne.s	@wllflg_l
00205A44 08EE 0002 0022             		bset	#bitcol_wall_r,obj_col(a6)
00205A4A 4E75                       		rts
00205A4C                            @wllflg_l:
00205A4C 08EE 0003 0022             		bset	#bitcol_wall_l,obj_col(a6)
00205A52 4E75                       		rts
00205A54                             		
00205A54                            ; ----------------------------------
00205A54                            ; Event block: on wall
00205A54                            ; ----------------------------------
00205A54                            
00205A54                            @center_special:
00205A54 0800 0006                  		btst	#6,d0
00205A58 6700                       		beq.s	@return
00205A5A 6100 0000                  		bsr	plyrColEntry
00205A5E 382C 0006                  		move.w	6(a4),d4
00205A62 6000 0000                  		bra	plyrColGo
00205A66                            		
00205A66                            @left_special:
00205A66 0800 0006                  		btst	#6,d0
00205A6A 6700                       		beq.s	@return
00205A6C 6100 0000                  		bsr	plyrColEntry
00205A70 382C 0008                  		move.w	8(a4),d4
00205A74 6000 0000                  		bra	plyrColGo
00205A78                            		
00205A78                            @right_special:
00205A78 0800 0006                  		btst	#6,d0
00205A7C 6700                       		beq.s	@return
00205A7E 6100 0000                  		bsr	plyrColEntry
00205A82 382C 000A                  		move.w	$A(a4),d4
00205A86 6000 0000                  		bra	plyrColGo
00205A8A                            		
00205A8A                            @return:
00205A8A 4E75                       		rts
00205A8C                            		
00205A8C                            ; ---------------------------------------------
00205A8C                            ; EVENT BLOCKS ($80+)
00205A8C                            ; ---------------------------------------------
00205A8C                            
00205A8C                            plyrColEntry:
00205A8C 2800                       		move.l	d0,d4
00205A8E 0244 003F                  		and.w	#$3F,d4
00205A92 C8FC 0012                  		mulu.w	#$12,d4
00205A96 49FA 0000                  		lea	plyEvnList(pc),a4
00205A9A D8C4                       		adda	d4,a4
00205A9C 4E75                       		rts
00205A9E                            plyrColGo:
00205A9E 0284 0000 FFFF             		and.l	#$FFFF,d4
00205AA4 0684 0000 0000             		add.l	#plyEvnList,d4
00205AAA 2844                       		movea.l	d4,a4
00205AAC 4ED4                       		jmp	(a4)
00205AAE                            	
00205AAE                            ; ---------------------------------------------
00205AAE                            ;   Floor Center |   Floor Left |   Floor Right
00205AAE                            ;    Wall Center |    Wall Left |    Wall Right
00205AAE                            ; Ceiling Center | Ceiling Left | Ceiling Right
00205AAE                            ; 
00205AAE                            ; d0 - Return collision (xpos|ypos|byte)
00205AAE                            ; DO NOT USE d1 WHILE CHECKING SIDES
00205AAE                            ; ---------------------------------------------
00205AAE                            
00205AAE                            plyEvnList:
00205AAE                            	; $40 - Exit level (old)
00205AAE 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
00205AB4 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
00205ABA 0000 0000 0000             	dc.w @event40-plyEvnList,@event40-plyEvnList,@event40-plyEvnList
00205AC0                            	; $41 - Ladder (climbing mode)
00205AC0 0000 0000 0000             	dc.w @event41_flr-plyEvnList,@event41_flrsd-plyEvnList,@event41_flrsd-plyEvnList
00205AC6 0000 0000 0000             	dc.w @event41_wll-plyEvnList,       @unused-plyEvnList,       @unused-plyEvnList
00205ACC 0000 0000 0000             	dc.w      @unused-plyEvnList,       @unused-plyEvnList,       @unused-plyEvnList
00205AD2                            	; $42 - Spikes (Up)
00205AD2 0000 0000 0000             	dc.w @event42-plyEvnList,@event42-plyEvnList,@event42-plyEvnList
00205AD8 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205ADE 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205AE4                            	;$83
00205AE4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205AEA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205AF0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205AF6                            	;$84
00205AF6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205AFC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B02 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B08                            	;$85
00205B08 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B0E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B14 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B1A                            	;$86
00205B1A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B20 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B26 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B2C                            	;$87
00205B2C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B32 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B38 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B3E                            	;$88
00205B3E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B44 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B4A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B50                            	;$89
00205B50 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B56 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B5C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B62                            	;$8A
00205B62 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B68 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B6E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B74                            	;$8B
00205B74 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B7A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B80 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B86                            	;$8C
00205B86 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B8C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B92 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B98                            	;$8D
00205B98 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205B9E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205BA4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205BAA                            	;$8E
00205BAA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205BB0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205BB6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205BBC                            	;$8F
00205BBC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205BC2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205BC8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205BCE                            	
00205BCE                            	;$90
00205BCE 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
00205BD4 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
00205BDA 0000 0000 0000             	dc.w @event50_check-plyEvnList,@event50_check-plyEvnList,@event50_check-plyEvnList
00205BE0                            	;$91
00205BE0 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
00205BE6 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
00205BEC 0000 0000 0000             	dc.w @event51_check-plyEvnList,@event51_check-plyEvnList,@event51_check-plyEvnList
00205BF2                            	;$92
00205BF2 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
00205BF8 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
00205BFE 0000 0000 0000             	dc.w @event52_check-plyEvnList,@event52_check-plyEvnList,@event52_check-plyEvnList
00205C04                            	;$93
00205C04 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
00205C0A 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
00205C10 0000 0000 0000             	dc.w @event53_check-plyEvnList,@event53_check-plyEvnList,@event53_check-plyEvnList
00205C16                            	;$94
00205C16 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C1C 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C22 0000 0000 0000             	dc.w @event54_cei-plyEvnList,@event54_cei-plyEvnList,@event54_cei-plyEvnList
00205C28                            	;$95
00205C28 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C2E 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C34 0000 0000 0000             	dc.w @event55_cei-plyEvnList,@event55_cei-plyEvnList,@event55_cei-plyEvnList
00205C3A                            	;$96
00205C3A 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C40 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C46 0000 0000 0000             	dc.w @event56_cei-plyEvnList,@event56_cei-plyEvnList,@event56_cei-plyEvnList
00205C4C                            	;$97
00205C4C 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C52 0000 0000 0000             	dc.w @event_solid-plyEvnList,@event_solid-plyEvnList,@event_solid-plyEvnList
00205C58 0000 0000 0000             	dc.w @event57_cei-plyEvnList,@event57_cei-plyEvnList,@event57_cei-plyEvnList
00205C5E                            	;$98
00205C5E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C64 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C6A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C70                            	;$99
00205C70 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C76 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C7C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C82                            	;$9A
00205C82 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C88 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C8E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C94                            	;$9B
00205C94 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205C9A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CA0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CA6                            	;$9C
00205CA6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CAC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CB2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CB8                            	;$9D
00205CB8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CBE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CC4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CCA                            	;$9E
00205CCA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CD0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CD6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CDC                            	;$9F
00205CDC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CE2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CE8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CEE                            
00205CEE                            	;$A0
00205CEE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CF4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205CFA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D00                            	;$A1
00205D00 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D06 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D0C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D12                            	;$A2
00205D12 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D18 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D1E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D24                            	;$A3
00205D24 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D2A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D30 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D36                            	;$A4
00205D36 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D3C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D42 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D48                            	;$A5
00205D48 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D4E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D54 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D5A                            	;$A6
00205D5A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D60 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D66 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D6C                            	;$A7
00205D6C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D72 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D78 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D7E                            	;$A8
00205D7E 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D84 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D8A 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D90                            	;$A9
00205D90 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D96 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205D9C 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DA2                            	;$AA
00205DA2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DA8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DAE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DB4                            	;$AB
00205DB4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DBA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DC0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DC6                            	;$AC
00205DC6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DCC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DD2 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DD8                            	;$AD
00205DD8 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DDE 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DE4 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DEA                            	;$AE
00205DEA 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DF0 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DF6 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205DFC                            	;$AF
00205DFC 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205E02 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205E08 0000 0000 0000             	dc.w @unused-plyEvnList,@unused-plyEvnList,@unused-plyEvnList
00205E0E                            		
00205E0E                            ; ----------------------------------
00205E0E                            ; EVENT $80
00205E0E                            ; ----------------------------------
00205E0E                            
00205E0E                            @event40:
00205E0E 4200                       		clr.b	d0
00205E10 4A39 FFFF DE4C             		tst.b	(RAM_ModeReset)
00205E16 6600                       		bne.s	@already
00205E18 0679 0001 FFFF DC06          		add.w	#1,(RAM_CurrLevel)
00205E20 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
00205E28                            @already:
00205E28 4E75                       		rts
00205E2A                            		
00205E2A                            ; ----------------------------------
00205E2A                            ; EVENT $41
00205E2A                            ; ----------------------------------
00205E2A                            
00205E2A                            @event41_flr:
00205E2A 4282                       		clr.l	d2
00205E2C 6100 EC68                  		bsr	object_FindCol_Center
00205E30 0C00 0041                  		cmp.b	#$41,d0
00205E34 6700 0000                  		beq	@unused_flag
00205E38 7401                       		moveq	#1,d2	
00205E3A                            @notclimb:
00205E3A                            
00205E3A                            		
00205E3A 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
00205E42 6700 0000                  		beq	@unused_flag
00205E46                            		
00205E46 2400                       		move.l	d0,d2
00205E48 6100 E7C2                  		bsr	object_FindCol_FloorSides
00205E4C 0C00 0041                  		cmp.b	#$41,d0
00205E50 6700                       		beq.s	@usethis
00205E52 2001                       		move.l	d1,d0
00205E54 0C00 0041                  		cmp.b	#$41,d0
00205E58 6700                       		beq.s	@usethis
00205E5A 2002                       		move.l	d2,d0
00205E5C                            @usethis:
00205E5C 4286                       		clr.l	d6
00205E5E 4287                       		clr.l	d7
00205E60 0280 FFF0 0000             		and.l	#$FFF00000,d0
00205E66 0680 0008 0000             		add.l	#$80000,d0
00205E6C 2D40 0008                  		move.l	d0,obj_x(a6)
00205E70 08EE 0005 002D             		bset	#bitPlyrClimb,plyr_status(a6)
00205E76 08AE 0000 0022             		bclr	#bitcol_floor,obj_col(a6)
00205E7C 1D7C 0004 001A               		move.b	#4,obj_anim_id(a6)
00205E82 1D7C 000C 0020              		move.b	#12,obj_frame(a6)		;FRAME 12
00205E88 066E 0008 000C             		add.w	#8,obj_y(a6)
00205E8E 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
00205E94                            
00205E94                            ; 		clr.l	d0
00205E94 4E75                       		rts
00205E96                             		
00205E96                            ; --------------------
00205E96                            
00205E96                            @event41_flrsd:
00205E96                            ; 		clr.l	d0
00205E96                            ; 		rts
00205E96                            		
00205E96                            ; --------------------
00205E96                            
00205E96                            @event41_cei:
00205E96 4280                       		clr.l	d0
00205E98 4E75                       		rts
00205E9A                            		
00205E9A                            ; --------------------
00205E9A                            
00205E9A                            @event41_wll:
00205E9A                            ;  		clr.l	d0
00205E9A 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00205EA0 6700                       		beq.s	@notwaitclmb
00205EA2 1D7C 00FF 001A              		move.b	#-1,obj_anim_id(a6)
00205EA8 4286                       		clr.l	d6
00205EAA 4287                       		clr.l	d7
00205EAC                            @notwaitclmb:
00205EAC                            ; 		move.l	d0,d2
00205EAC 0839 0000 FFFF DE83         		btst	#bitJoyUp,(RAM_Control_1+OnHold)
00205EB4 6700                        		beq.s	@dontclimb
00205EB6 1D7C 0004 001A               		move.b	#4,obj_anim_id(a6)
00205EBC 082E 0005 002D              		btst	#bitPlyrClimb,plyr_status(a6)
00205EC2 6600                        		bne.s	@alrdup
00205EC4                             		
00205EC4 6100 EBD0                    		bsr	object_FindCol_Center
00205EC8 0C00 0041                   		cmp.b	#$41,d0
00205ECC 6700                        		beq.s	@canclimb
00205ECE 6100 E592                     		bsr	object_FindCol_Floor
00205ED2 0C00 0041                   		cmp.b	#$41,d0
00205ED6 6600                        		bne.s	@dontclimb
00205ED8                            @canclimb:
00205ED8 0280 FFF0 0000              		and.l	#$FFF00000,d0
00205EDE 0680 0008 0000               		add.l	#$80000,d0
00205EE4 2D40 0008                   		move.l	d0,obj_x(a6)
00205EE8                             		
00205EE8                            @alrdup:
00205EE8 04AE 0001 6000 000C         		sub.l	#$16000,obj_y(a6)
00205EF0 4286                        		clr.l	d6
00205EF2 4287                        		clr.l	d7
00205EF4 08EE 0005 002D               		bset	#bitPlyrClimb,plyr_status(a6)
00205EFA 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
00205F00                             
00205F00                            @dontclimb:
00205F00 0839 0001 FFFF DE83        		btst	#bitJoyDown,(RAM_Control_1+OnHold)
00205F08 6700                       		beq.s	@dontclimbd
00205F0A                            		
00205F0A 082E 0005 002D             		btst	#bitPlyrClimb,plyr_status(a6)
00205F10 6600                       		bne.s	@alrddwn
00205F12 6100 EB82                  		bsr	object_FindCol_Center
00205F16 0C00 0041                  		cmp.b	#$41,d0
00205F1A 6600                       		bne.s	@dontclimbd
00205F1C 0280 FFF0 0000             		and.l	#$FFF00000,d0
00205F22 0680 0008 0000              		add.l	#$80000,d0
00205F28 2D40 0008                  		move.l	d0,obj_x(a6)
00205F2C                            @alrddwn:
00205F2C 06AE 0001 6000 000C        		add.l	#$16000,obj_y(a6)
00205F34 4286                       		clr.l	d6
00205F36 4287                       		clr.l	d7
00205F38 08EE 0005 002D              		bset	#bitPlyrClimb,plyr_status(a6)
00205F3E 1D7C 0004 001A              		move.b	#4,obj_anim_id(a6)
00205F44 3D7C FFFF 0026             		move.w	#-1,plyr_jumptmr(a6)
00205F4A                            @dontclimbd:
00205F4A                            
00205F4A 4280                       		clr.l	d0
00205F4C 4E75                       		rts
00205F4E                            
00205F4E                            ; --------------------
00205F4E                            
00205F4E                            @unused_flag:
00205F4E 1002                        		move.b	d2,d0
00205F50 4E75                        		rts
00205F52                            
00205F52                            ; ----------------------------------
00205F52                            ; EVENT $82
00205F52                            ; ----------------------------------
00205F52                            
00205F52                            @event42:
00205F52 08EE 0003 001E             		bset	#bitobj_hurt,obj_status(a6)
00205F58                            		
00205F58 103C 0001                  		move.b	#1,d0
00205F5C 4E75                       		rts
00205F5E                            		
00205F5E                            ; ----------------------------------
00205F5E                            ; EVENT $90
00205F5E                            ;
00205F5E                            ; CHECKS COLOR
00205F5E                            ; ----------------------------------
00205F5E                            
00205F5E                            @event50_check:
00205F5E 0C79 000E FFFF E8F6        		cmp.w	#$00E,(RAM_Palette+$26)
00205F66 6700 0000                  		beq	@event_solid
00205F6A 6000 0000                  		bra	@unused
00205F6E                            
00205F6E                            ; ----------------------------------
00205F6E                            ; EVENT $91
00205F6E                            ;
00205F6E                            ; CHECKS COLOR
00205F6E                            ; ----------------------------------
00205F6E                            
00205F6E                            @event51_check:
00205F6E 0C79 0E00 FFFF E8FC        		cmp.w	#$E00,(RAM_Palette+$2C)
00205F76 6700 0000                  		beq	@event_solid
00205F7A 6000 0000                  		bra	@unused
00205F7E                            		
00205F7E                            ; ----------------------------------
00205F7E                            ; EVENT $92
00205F7E                            ;
00205F7E                            ; CHECKS COLOR
00205F7E                            ; ----------------------------------
00205F7E                            
00205F7E                            @event52_check:
00205F7E 0C79 00E0 FFFF E902        		cmp.w	#$0E0,(RAM_Palette+$32)
00205F86 6700 0000                  		beq	@event_solid
00205F8A 6000 0000                  		bra	@unused
00205F8E                            
00205F8E                            ; ----------------------------------
00205F8E                            ; EVENT $93
00205F8E                            ;
00205F8E                            ; CHECKS COLOR
00205F8E                            ; ----------------------------------
00205F8E                            
00205F8E                            @event53_check:
00205F8E 0C79 00EE FFFF E908        		cmp.w	#$0EE,(RAM_Palette+$38)
00205F96 6700 0000                  		beq	@event_solid
00205F9A 6000 0000                  		bra	@unused
00205F9E                            		
00205F9E                            ; ----------------------------------
00205F9E                            ; EVENT $94
00205F9E                            ; 
00205F9E                            ; CHECKS COLOR
00205F9E                            ; ----------------------------------
00205F9E                            
00205F9E                            @event54_cei:
00205F9E 243C 0323 1102             		move.l	#$03231102,d2
00205FA4 0C79 000E FFFF E8F6        		cmp.w	#$00E,(RAM_Palette+$26)
00205FAC 6600                       		bne.s	@fade_this
00205FAE 243C 0423 1102             		move.l	#$04231102,d2
00205FB4                            @fade_this:
00205FB4 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00205FBA 6600                       		bne.s	@busy_pal
00205FBC 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
00205FC2                            @busy_pal:
00205FC2 103C 0001                  		move.b	#1,d0
00205FC6 4E75                       		rts
00205FC8                            
00205FC8                            ; ----------------------------------
00205FC8                            ; EVENT $95
00205FC8                            ; 
00205FC8                            ; CHECKS COLOR
00205FC8                            ; ----------------------------------
00205FC8                            
00205FC8                            @event55_cei:
00205FC8 243C 0383 1402             		move.l	#$03831402,d2
00205FCE 0C79 0E00 FFFF E8FC        		cmp.w	#$E00,(RAM_Palette+$2C)
00205FD6 6600                       		bne.s	@fade_this_b
00205FD8 243C 0483 1402             		move.l	#$04831402,d2
00205FDE                            @fade_this_b:
00205FDE 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00205FE4 6600                       		bne.s	@busy_pal_b
00205FE6 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
00205FEC                            @busy_pal_b:
00205FEC 103C 0001                  		move.b	#1,d0
00205FF0 4E75                       		rts
00205FF2                            	
00205FF2                            ; ----------------------------------
00205FF2                            ; EVENT $96
00205FF2                            ; 
00205FF2                            ; CHECKS COLOR
00205FF2                            ; ----------------------------------
00205FF2                            
00205FF2                            @event56_cei:
00205FF2 243C 0343 1702             		move.l	#$03431702,d2
00205FF8 0C79 00E0 FFFF E902        		cmp.w	#$0E0,(RAM_Palette+$32)
00206000 6600                       		bne.s	@fade_this_g
00206002 243C 0443 1702             		move.l	#$04431702,d2
00206008                            @fade_this_g:
00206008 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
0020600E 6600                       		bne.s	@busy_pal_g
00206010 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
00206016                            @busy_pal_g:
00206016 103C 0001                  		move.b	#1,d0
0020601A 4E75                       		rts
0020601C                            
0020601C                            ; ----------------------------------
0020601C                            ; EVENT $97
0020601C                            ; 
0020601C                            ; CHECKS COLOR
0020601C                            ; ----------------------------------
0020601C                            
0020601C                            @event57_cei:
0020601C 243C 0363 1A02             		move.l	#$03631A02,d2
00206022 0C79 00EE FFFF E908        		cmp.w	#$0EE,(RAM_Palette+$38)
0020602A 6600                       		bne.s	@fade_this_y
0020602C 243C 0463 1A02             		move.l	#$04631A02,d2
00206032                            @fade_this_y:
00206032 4A39 FFFF EAE8             		tst.b	(RAM_PalFadeSys+$18)
00206038 6600                       		bne.s	@busy_pal_y
0020603A 23C2 FFFF EAE8             		move.l	d2,(RAM_PalFadeSys+$18)
00206040                            @busy_pal_y:
00206040 103C 0001                  		move.b	#1,d0
00206044 4E75                       		rts
00206046                            		
00206046                            ; ----------------------------------
00206046                            ; Full solid
00206046                            ; ----------------------------------
00206046                            
00206046                            @event_solid:
00206046 103C 0001                  		move.b	#1,d0
0020604A 4E75                       		rts
0020604C                            		
0020604C                            ; ----------------------------------
0020604C                            ; Return
0020604C                            ; ----------------------------------
0020604C                            
0020604C                            @unused:
0020604C 4280                       		clr.l	d0
0020604E 4E75                       		rts
00206050                            		
00206050                            ; ---------------------------------------------
00206050                            ; Move level camera
00206050                            ; ---------------------------------------------
00206050                            
00206050                            Plyr_LvlCamera:
00206050 4BF9 FFFF BC00              		lea	(RAM_LvlPlanes),a5
00206056                             		
00206056                            ; 		move.b	lvl_settings(a5),d0
00206056                            ; 		and.w	#$F,d0
00206056                            ; 		add.w	d0,d0
00206056                            ; 		move.w	@ScrollTypes(pc,d0.w),d1
00206056                            ; 		jmp	@ScrollTypes(pc,d1.w)
00206056                            ; 		
00206056                            ; ; -----------------------------------
00206056                            ; 
00206056                            ; @ScrollTypes:
00206056                            ; 		dc.w @Scrl_Normal-@ScrollTypes
00206056                            ; 		dc.w @Scrl_Section-@Scrolltypes
00206056                            ; 		dc.w 0
00206056                            ; 		dc.w 0
00206056                            ; 		dc.w 0
00206056                            ; 		dc.w 0
00206056                            ; 		dc.w 0
00206056                            ; 		dc.w 0
00206056                            ; 		dc.w 0
00206056                            	
00206056                            ; -----------------------------------
00206056                            ; Default scroll
00206056                            ; 
00206056                            ; Autochecks the level size
00206056                            ; -----------------------------------
00206056                            
00206056                            @Scrl_Normal:
00206056 7400                       		moveq	#0,d2
00206058 7600                       		moveq	#0,d3
0020605A                            		
0020605A 383C 0140                  		move.w	#320,d4
0020605E 1039 FFFF ED1C             		move.b	(RAM_VidRegs+$C),d0
00206064 0240 0081                  		and.w	#%10000001,d0
00206068 6600                       		bne.s	@normal_hor
0020606A 383C 0100                  		move.w	#256,d4
0020606E                            @normal_hor:
0020606E 3004                       		move.w	d4,d0
00206070 E848                       		lsr.w	#4,d0
00206072 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00206076 B240                       		cmp.w	d0,d1
00206078 6F00                       		ble.s	@DontScrollHor
0020607A                            		
0020607A 302E 0008                  		move.w	obj_x(a6),d0
0020607E 7A00                       		moveq	#0,d5
00206080 3204                       		move.w	d4,d1
00206082 E249                       		lsr.w	#1,d1
00206084 9041                       		sub.w	d1,d0
00206086 6B00                       		bmi.s	@Wait_X
00206088 3A00                       		move.w	d0,d5
0020608A                            		
0020608A 322D 001C                   		move.w	lvl_x(a5),d1
0020608E B245                        		cmp.w	d5,d1
00206090 6700                        		beq.s	@Wait_X		
00206092 7000                        		moveq	#bitLvlDirR,d0
00206094 BA41                         		cmp.w	d1,d5
00206096 6E00                         		bgt.s	@RightDir
00206098 7001                         		moveq	#bitLvlDirL,d0	
0020609A                            @RightDir:
0020609A 01ED 003A                    		bset	d0,lvl_flags(a5)
0020609E                             		
0020609E                            @Wait_X:
0020609E 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
002060A2 3004                       		move.w	d4,d0
002060A4 E848                       		lsr.w	#4,d0
002060A6 9240                       		sub.w	d0,d1
002060A8 3005                       		move.w	d5,d0
002060AA 0440 0001                  		sub.w	#1,d0
002060AE E949                       		lsl.w	#4,d1
002060B0 B041                       		cmp.w	d1,d0
002060B2 6D00                       		blt.s	@NotEnd_X
002060B4 3A01                       		move.w	d1,d5
002060B6                            @NotEnd_X:
002060B6 3005                       		move.w	d5,d0
002060B8 E848                       		lsr.w	#4,d0
002060BA 3B45 001C                  		move.w	d5,lvl_x(a5)
002060BE                            
002060BE                            @DontScrollHor:
002060BE                            
002060BE                            ; ------------------------
002060BE                            ; Update Vertical
002060BE                            ; scrolling
002060BE                            ; ------------------------
002060BE                            
002060BE 0C6D 000E 0036              		cmp.w	#(224/16),lvl_maxcam_y(a5)
002060C4 6F00 0000                   		ble	@single_Y
002060C8                             		
002060C8 3A2D 0020                    		move.w	lvl_y(a5),d5
002060CC 382E 000C                    		move.w	obj_y(a6),d4
002060D0 986D 0020                    		sub.w	lvl_y(a5),d4
002060D4                              		
002060D4 0C44 0068                    		cmp.w	#(224/2)-8,d4
002060D8 6D00                         		blt.s	@Do_Up
002060DA 0C44 007E                    		cmp.w	#(224/2)+14,d4
002060DE 6F00                         		ble.s	@Set_Y
002060E0                              		
002060E0 302E 000C                  		move.w	obj_y(a6),d0
002060E4 0440 007E                  		sub.w	#(224/2)+14,d0
002060E8 3A00                       		move.w	d0,d5
002060EA 08ED 0002 003A                   		bset	#bitLvlDirD,lvl_flags(a5)
002060F0 6000                             		bra.s	@Set_Y
002060F2                                  		
002060F2                            @Do_Up:
002060F2 302E 000C                  		move.w	obj_y(a6),d0
002060F6 0440 0068                  		sub.w	#(224/2)-8,d0
002060FA 3A00                       		move.w	d0,d5
002060FC 08ED 0003 003A                   		bset	#bitLvlDirU,lvl_flags(a5)
00206102                                  		
00206102 6000                       		bra.s	@Set_Y
00206104                            		
00206104                            @old_yscrl:
00206104 3A2E 000C                    		move.w	obj_y(a6),d5			; Old
00206108 383C 0080                   		move.w	#(224/2)+$10,d4
0020610C 9A44                        		sub.w	d4,d5
0020610E 08ED 0002 003A                  		bset	#bitLvlDirD,lvl_flags(a5)
00206114 08ED 0003 003A                  		bset	#bitLvlDirU,lvl_flags(a5)
0020611A                                 		
0020611A                            ;  		sub.w	#((224/2)+$10),d5
0020611A                            ;  		move.w	obj_y(a6),d0			; New
0020611A                            ;  		sub.w	#((224/2)+$20),d0
0020611A                            ;  		add.w	lvl_y(a5),d0
0020611A                            ;  		asr.w	#3,d0
0020611A                            ;  		add.w	d0,d0
0020611A                            ;  		move.w	d0,d5
0020611A                             		
0020611A                            ;  		moveq	#bitLvlDirD,d2
0020611A                            ;    		cmp.w	d5,d1
0020611A                            ;    		bgt.s	@drwydown
0020611A                            ;    		bset	#bitLvlDirU,d2
0020611A                            ; @drwydown:
0020611A                            
0020611A                            ;     		bset	#bitLvlDirD,lvl_flags(a5)
0020611A                            ;     		bset	#bitLvlDirU,lvl_flags(a5)
0020611A                               		
0020611A                            ; --------------------------------
0020611A                             	
0020611A                            @Set_Y:
0020611A 4A45                        		tst.w	d5
0020611C 6A00                        		bpl.s	@onyplus
0020611E 4245                        		clr.w	d5
00206120                            @onyplus:
00206120 7200                       		moveq	#0,d1
00206122 322D 0036                    		move.w	lvl_maxcam_y(a5),d1
00206126 0441 000E                    		sub.w	#(224/16),d1
0020612A E949                         		lsl.w	#4,d1
0020612C                            ;   		swap	d1
0020612C BA41                         		cmp.w	d1,d5
0020612E 6D00                         		blt.s	@notbotmd
00206130 3A01                         		move.w	d1,d5
00206132                            @notbotmd:
00206132 3B45 0020                  		move.w	d5,lvl_y(a5)
00206136                            		
00206136                            @single_Y:
00206136 4E75                       		rts
00206138                            ; 		
00206138                            ; ; -----------------------------------
00206138                            ; ; Dungeon Scroll
00206138                            ; ; -----------------------------------
00206138                            ; 
00206138                            ; @Scrl_Section:
00206138                            ; 		btst	#bitobj_flipH,obj_status(a6)
00206138                            ; 		bne.s	@LeftCheck
00206138                            ; 		
00206138                            ; ; RIGHT
00206138                            ; 
00206138                            ;  		btst	#0,plyr_status(a6)
00206138                            ;  		bne.s	@MoveRight
00206138                            ;  		
00206138                            ; 		move.w	obj_x(a6),d1
00206138                            ; 		move.w	#320,d0
00206138                            ; 		move.w	d0,d2
00206138                            ; 		add.w	lvl_x(a5),d2
00206138                            ; 		move.w	d2,plyr_lvltrgt(a6)
00206138                            ; 		add.w	#8,d0
00206138                            ;  		add.w	lvl_x(a5),d0
00206138                            ;  		cmp.w	d0,d1
00206138                            ; 		blt.s	@UpDownChk
00206138                            ;  		
00206138                            ;  		bset	#0,plyr_status(a6)
00206138                            ;  		clr.l	obj_x_spd(a6)
00206138                            ;  		clr.l	obj_y_spd(a6)
00206138                            ; 
00206138                            ; @MoveRight:
00206138                            ;   		move.w	lvl_x(a5),d1
00206138                            ;  		lea	(RAM_ScrlHor),a4
00206138                            ;  		move.w	#224-1,d3
00206138                            ; @doline2:
00206138                            ;  		move.w	d1,d0
00206138                            ;  		neg.w	d0
00206138                            ;  		move.w	d0,(a4)+
00206138                            ;  		asr.w	#4,d0
00206138                            ;  		move.w	d0,(a4)+
00206138                            ;  		dbf	d3,@doline2
00206138                            ;  		
00206138                            ;   		move.w	plyr_lvltrgt(a6),d0
00206138                            ;   		move.w	lvl_x(a5),d1
00206138                            ;   		cmp.w 	d0,d1
00206138                            ;   		bcs.s	@KeepScrlR
00206138                            ;  		bclr	#0,plyr_status(a6)
00206138                            ;   		move.w	d1,lvl_x(a5)
00206138                            ; 		rts
00206138                            ; @KeepScrlR:
00206138                            ;  		add.w	#4,lvl_x(a5)
00206138                            ;       		bset	#bitLvlDirR,lvl_flags(a5)
00206138                            ;        		rts
00206138                            ; 		
00206138                            ; @LeftCheck:
00206138                            ;        		
00206138                            ; 		
00206138                            ; @UpDownChk:
00206138                            ;  		bclr	#0,plyr_status(a6)
00206138                            ; 		rts
00206138                            		
00206138                            ; =================================================================
00206138                            ; 
00206138                            Plyr_SetStartPos:
00206138 4DF9 FFFF C040               		lea	(RAM_ObjBuffer),a6
0020613E 4BF9 FFFF BC00              		lea	(RAM_LvlPlanes),a5
00206144                             		
00206144 3D40 000C                   		move.w	d0,obj_y(a6)
00206148 4840                        		swap	d0
0020614A 3D40 0008                   		move.w	d0,obj_x(a6)
0020614E                             		
0020614E                            ; ----------------------------------------
0020614E                             
0020614E 383C 0140                  		move.w	#320,d4
00206152                            ; 		btst	#bit_hortype,lvl_prio(a5)
00206152                            ; 		beq.s	@normal_hor
00206152                            ; 		move.w	#256,d4
00206152                            ; @normal_hor:
00206152 3004                       		move.w	d4,d0
00206154 E848                       		lsr.w	#4,d0
00206156 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
0020615A B240                       		cmp.w	d0,d1
0020615C 6F00                       		ble.s	@DontScrollHor
0020615E                            		
0020615E 362E 0008                  		move.w	obj_x(a6),d3
00206162 7400                       		moveq	#0,d2
00206164 3204                       		move.w	d4,d1
00206166 E249                       		lsr.w	#1,d1
00206168 9641                       		sub.w	d1,d3
0020616A 6B00                       		bmi.s	@Wait_X
0020616C 3403                       		move.w	d3,d2
0020616E                            @Wait_X:
0020616E 322D 0034                  		move.w	lvl_maxcam_x(a5),d1
00206172 3004                       		move.w	d4,d0
00206174 E848                       		lsr.w	#4,d0
00206176 9240                       		sub.w	d0,d1
00206178 3002                       		move.w	d2,d0
0020617A 0440 0001                  		sub.w	#1,d0
0020617E E949                       		lsl.w	#4,d1
00206180 B041                       		cmp.w	d1,d0
00206182 6D00                       		blt.s	@NotEnd_X
00206184 3401                       		move.w	d1,d2
00206186                            @NotEnd_X:
00206186 3002                       		move.w	d2,d0
00206188 E848                       		lsr.w	#4,d0
0020618A 3B42 001C                  		move.w	d2,lvl_x(a5)
0020618E                            
0020618E                            @DontScrollHor:
0020618E                            
0020618E                            ; ----------------------------------------
0020618E                            
0020618E 426D 0020                  		clr.w	lvl_y(a5)
00206192 0C6D 000E 0036              		cmp.w	#(224/16),lvl_maxcam_y(a5)
00206198 6F00                        		ble.s	@Return
0020619A 362E 000C                  		move.w	obj_y(a6),d3
0020619E 7400                       		moveq	#0,d2
002061A0 0443 0084                  		sub.w	#((224/2)+$14),d3	;aprox
002061A4 6B00                       		bmi.s	@Wait_Y
002061A6 3403                       		move.w	d3,d2
002061A8                            @Wait_Y:
002061A8 322D 0036                   		move.w	lvl_maxcam_y(a5),d1
002061AC 0441 000E                   		sub.w	#(224/16),d1
002061B0 3002                        		move.w	d2,d0
002061B2 0440 0001                   		sub.w	#1,d0
002061B6 E949                        		lsl.w	#4,d1
002061B8 B041                        		cmp.w	d1,d0
002061BA 6D00                        		blt.s	@NotEnd_Y
002061BC 3401                        		move.w	d1,d2
002061BE                            @NotEnd_Y:
002061BE 3B42 0020                  		move.w	d2,lvl_y(a5)
002061C2                             		
002061C2                            @Return:
002061C2 4E75                        		rts
002061C4                            
002061C4                            ; =================================================================
002061C4                            ; ------------------------------------------------
002061C4                            ; EXTERNAL Routines for the player
002061C4                            ; ------------------------------------------------
002061C4                            
002061C4                            ; TODO
002061C4                            
002061C4                            ; =================================================================
002061C4                            ; ------------------------------------------------
002061C4                            ; Data
002061C4                            ; ------------------------------------------------
002061C4                            		
002061C4                            Ani_Player:
002061C4 0000                       		dc.w @Idle-Ani_Player		;$00
002061C6 0000                       		dc.w @Walk-Ani_Player
002061C8 0000                       		dc.w @Jump_1-Ani_Player
002061CA 0000                        		dc.w @Jump_2-Ani_Player
002061CC 0000                        		dc.w @ClimbMove-Ani_Player	;$04
002061CE 0000                        		dc.w @Die-Ani_Player
002061D0                            		even
002061D0                            @Idle:
002061D0 06                          		dc.b 6
002061D1 0000 0000 0000 0000 0000+   		dc.b 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
002061ED FF                         		dc.b -1
002061EE                            		even
002061EE                            @Jump_1:	
002061EE 04                          		dc.b 4
002061EF 0A                          		dc.b $A
002061F0 FF                         		dc.b -1
002061F2 00                         		even
002061F2                            @Jump_2:	
002061F2 04                          		dc.b 4
002061F3 0B                           		dc.b $B
002061F4 FF                          		dc.b -1
002061F6 00                          		even
002061F6                            @Walk:
002061F6 03                          		dc.b 3
002061F7 0203 0405 0607 0809         		dc.b 2,3,4,5,6,7,8,9
002061FF FF                         		dc.b -1
00206200                            		even
00206200                            @ClimbMove:
00206200 04                         		dc.b 4
00206201 0C0D 0E0F 0E0D             		dc.b 12,13,14,15,14,13
00206207 FF                         		dc.b -1
00206208                            		even	
00206208                            @Die:
00206208 04                         		dc.b 4
00206209 10                         		dc.b 16
0020620A FF                         		dc.b -1
0020620C 00                         		even
0020620C 00                         		even
0020620C                               		include	"engine/modes/level/data/objects/dadou/code.asm"
0020620C                            ; =================================================================
0020620C                            ; Object
0020620C                            ; 
0020620C                            ; Dadou
0020620C                            ; =================================================================
0020620C                            
0020620C                            ; =================================================================
0020620C                            ; ------------------------------------------------
0020620C                            ; Variables
0020620C                            ; ------------------------------------------------
0020620C                            
0020620C =00006420                  varVramDadou	equ	$6000|$420
0020620C                            
0020620C                            ; =================================================================
0020620C                            ; ------------------------------------------------
0020620C                            ; RAM
0020620C                            ; ------------------------------------------------
0020620C                            
0020620C                            		rsset Obj_Ram
0020620C =00000024                  timer_1		rs.w 1
0020620C                            
0020620C                            ; =================================================================
0020620C                            ; ------------------------------------------------
0020620C                            ; Code start
0020620C                            ; ------------------------------------------------
0020620C                            
0020620C                            Obj_Dadou:
0020620C 7000                        		moveq	#0,d0
0020620E 102E 001D                   		move.b	obj_index(a6),d0
00206212 D040                        		add.w	d0,d0
00206214 323B 0000                   		move.w	@Index(pc,d0.w),d1
00206218 4EBB 1000                   		jsr	@Index(pc,d1.w)
0020621C                             		
0020621C 6100 E0BA                   		bsr	Object_OffCheck
00206220 203C 6420 0000                		move.l	#(varVramDadou<<16),d0
00206226 223C 0000 0000              		move.l	#ani_dadou,d1
0020622C 6100 E116                  		bsr	Object_Animate
00206230                            		
00206230 203C 6420 0000                 		move.l	#(varVramDadou<<16),d0
00206236 102E 0020                   		move.b	obj_frame(a6),d0
0020623A 223C 0000 0000             		move.l	#map_dadou,d1
00206240 6000 DD58                   		bra	Object_Show
00206244                             		
00206244                            ; ------------------------------------------------
00206244                            
00206244                            @Index:
00206244 0000                       		dc.w @Init-@Index
00206246 0000                       		dc.w @Stand-@Index
00206248 0000                       		dc.w @Walk-@Index
0020624A                            		even
0020624A                            		
0020624A                            ; =================================================================
0020624A                            ; ------------------------------------------------
0020624A                            ; Index $00: Init
0020624A                            ; ------------------------------------------------
0020624A                            
0020624A                            @Init:
0020624A 2D7C 0101 0102 0004        		move.l	#$01010102,obj_size(a6)
00206252 2D7C 0000 8000 0014        		move.l	#$8000,obj_y_spd(a6)
0020625A                            		
0020625A 3D7C 00C0 0024             		move.w	#$C0,timer_1(a6)
00206260 6100 0000                  		bsr	@Go_Stand
00206264                            		
00206264                            ; =================================================================
00206264                            ; ------------------------------------------------                  
00206264                            ; Index $01: Stand
00206264                            ; ------------------------------------------------
00206264                            
00206264                            @Stand:
00206264                            ; 		sub.w	#1,timer_1(a6)
00206264                            ; 		bpl.s	@Pyhsics
00206264                            ; 
00206264                            ; 		move.w	#$C0,timer_1(a6)
00206264 6000 0000                  		bra	@Go_Walk
00206268                            		
00206268                            ; =================================================================
00206268                            ; ------------------------------------------------                  
00206268                            ; Index $01: Walk
00206268                            ; ------------------------------------------------
00206268                            
00206268                            @Walk:
00206268                            ; 		sub.w	#1,timer_1(a6)
00206268                            ; 		bpl.s	@Pyhsics
00206268                            ; 		
00206268                            ; 		move.w	#$C0,timer_1(a6)
00206268                            ; 		bchg	#bitobj_flipH,obj_status(a6)
00206268                            ; 		bra	@Go_Stand
00206268                            		
00206268 6000 0000                  		bra	@Pyhsics
0020626C                            		
0020626C                            ; =================================================================
0020626C                            ; ------------------------------------------------
0020626C                            ; Subs
0020626C                            ; ------------------------------------------------
0020626C                            
0020626C                            @Go_Stand:
0020626C 42AE 0010                  		clr.l	obj_x_spd(a6)
00206270 422E 001A                  		clr.b	obj_anim_id(a6)
00206274 1D7C 0001 001D             		move.b	#1,obj_index(a6)
0020627A 4E75                       		rts
0020627C                            	
0020627C                            ; --------------------------------------
0020627C                            
0020627C                            @Go_Walk:
0020627C 2D7C 0000 4000 0010        		move.l	#$4000,obj_x_spd(a6)
00206284 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
0020628A 6600                       		bne.s	@right
0020628C 2D7C FFFF C000 0010        		move.l	#-$4000,obj_x_spd(a6)
00206294                            @right:
00206294 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
0020629A 1D7C 0002 001D             		move.b	#2,obj_index(a6)
002062A0 4E75                       		rts
002062A2                            	
002062A2                            ; ------------------------------------------------
002062A2                            ; Pyhsics
002062A2                            ; ------------------------------------------------
002062A2                            
002062A2                            @Pyhsics:
002062A2 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
002062A8 2C2E 0010                   		move.l	obj_x_spd(a6),d6
002062AC 2E2E 0014                   		move.l	obj_y_spd(a6),d7
002062B0                             		
002062B0 DDAE 0008                   		add.l	d6,obj_x(a6)
002062B4 6100 0000                   		bsr	@WallCheck
002062B8                            		
002062B8                            ; ----------------------------------
002062B8                            
002062B8 0687 0000 8000               		add.l	#$8000,d7
002062BE 0C87 0004 0000               		cmp.l	#$40000,d7
002062C4 6D00                         		blt.s	@low_y
002062C6 2E3C 0004 0000               		move.l	#$40000,d7
002062CC                            @low_y:
002062CC DFAE 000C                    		add.l	d7,obj_y(a6)
002062D0                              		
002062D0                            ; 		lea	(RAM_LvlPlanes),a5
002062D0                            ; 		move.w	lvl_size_y(a5),d0
002062D0                            ; 		lsl.w	#4,d0
002062D0                            ; 		move.w	obj_y(a6),d1
002062D0                            ; 		moveq	#0,d2
002062D0                            ; 		move.b	obj_size+2(a6),d2
002062D0                            ; 		lsl.w	#3,d2
002062D0                            ; 		sub.w	d2,d1
002062D0                            ; 		cmp.w	d0,d1
002062D0                            ; 		bge	@delete
002062D0                            ; 		
002062D0 4A87                         		tst.l	d7
002062D2 6B00                         		bmi.s	@no_floor
002062D4                              
002062D4 6100 E180                  		bsr	object_FindPrz_Floor
002062D8 2400                       		move.l	d0,d2
002062DA 4A00                       		tst.b	d0
002062DC 6600                       		bne.s	@from_prize
002062DE 6100 E320                   		bsr 	object_FindPrz_FloorSides
002062E2 4A00                       		tst.b	d0
002062E4 6600 0000                  		bne	@from_prize;@swap_dir_wl
002062E8 2001                       		move.l	d1,d0
002062EA 4A00                       		tst.b	d0
002062EC 6600 0000                  		bne	@from_prize
002062F0                            		
002062F0 6100 E170                  		bsr	object_FindCol_Floor
002062F4 2400                       		move.l	d0,d2
002062F6 4A00                       		tst.b	d0
002062F8 6600                       		bne.s	@set_floor
002062FA 6100 E310                   		bsr 	object_FindCol_FloorSides
002062FE 4A00                       		tst.b	d0
00206300 6600 0000                  		bne	@set_floor;@swap_dir_wl
00206304 2001                       		move.l	d1,d0
00206306 4A00                       		tst.b	d0
00206308 6700 0000                  		beq	@no_floor
0020630C                            		
0020630C 6000                       		bra.s	@set_floor
0020630E                            ; @swap_dir_wl:
0020630E                            ; 		neg.l	d6
0020630E                            ; 		bchg	#bitobj_flipH,obj_status(a6)
0020630E                            ; 		bra.s	@no_floor
0020630E                            
0020630E                            @from_prize:
0020630E 0C00 0040                  		cmp.b	#$40,d0
00206312 6C00                       		bge.s	@set_floor
00206314 103C 0001                  		move.b	#1,d0
00206318                            		
00206318                            @set_floor:
00206318 6100 E7DE                    		bsr 	object_SetCol_Floor
0020631C                              		
0020631C                            @no_floor:
0020631C                            
0020631C 2D46 0010                   		move.l	d6,obj_x_spd(a6)
00206320 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00206324                             		
00206324                            ; ----------------------------------
00206324                            ; Check if touched
00206324                            ; ----------------------------------
00206324                            
00206324                            @check_touch:
00206324 6100 E896                  		bsr	objTouch_Top
00206328 4A00                       		tst.b	d0
0020632A 6600                       		bne.s	@touch_flag
0020632C 6100 E92C                  		bsr	objTouch_Bottom
00206330 4A00                       		tst.b	d0
00206332 6600                       		bne.s	@touch_flag
00206334                            		
00206334 6100 E9C4                  		bsr	objTouch_Sides
00206338 4A00                       		tst.b	d0
0020633A 6600                       		bne.s	@touch_flag
0020633C 4840                       		swap	d0
0020633E 4A00                       		tst.b	d0
00206340 6600                       		bne.s	@touch_flag
00206342 4E75                       		rts
00206344                            		
00206344                            ; -----------------------------------
00206344                            
00206344                            @touch_flag:
00206344 6100 EB98                  		bsr	objPlyrHurtKill
00206348 6700                       		beq.s	@return
0020634A 323C 6420                     		move.w	#varVramDadou,d1
0020634E 142E 0020                   		move.b	obj_frame(a6),d2
00206352 203C 0000 0000             		move.l	#map_dadou,d0
00206358 260C                       		move.l	a4,d3
0020635A 6100 EF2A                  		bsr	objAction_SetStomp
0020635E 6000 DF58                  		bra	Object_IsGone
00206362                            @return:
00206362 4E75                       		rts
00206364                            		
00206364                            ; =================================================================
00206364                            
00206364                            @WallCheck:
00206364 6100 E15E                     		bsr	object_FindPrz_Wall
00206368 4A00                          		tst.b	d0
0020636A 6600                          		bne.s	@foundprzwl
0020636C 6100 E162                    		bsr	object_FindCol_Wall
00206370 4A00                         		tst.b	d0
00206372 6700                         		beq.s	@chk_right
00206374                            @foundprzwl:
00206374 0800 0006                    		btst	#6,d0
00206378 6600                         		bne.s	@chk_right
0020637A                            ;    		cmp.b	#2,d0
0020637A                            ;    		blt.s	@chk_right
0020637A 6100 E824                    		bsr	object_SetCol_Wall
0020637E                            ;    		bra.s	@endchk
0020637E                            @chk_right:
0020637E                            
0020637E                            		;TODO: Prize check
0020637E                            ;   		bsr	object_FindPrz_WallSides
0020637E                            ;   		tst.b	d0
0020637E                            ;   		bne.s	@przrotx
0020637E                            ;   		move.l	d1,d0
0020637E                            ;   		tst.b	d0
0020637E                            ;   		bne.s	@przrotx
0020637E                            
0020637E 6100 E3A0                    		bsr	object_FindCol_WallSides
00206382 0800 0006                    		btst	#6,d0
00206386 6600                         		bne.s	@endchk
00206388 0801 0006                    		btst	#6,d1
0020638C 6600                         		bne.s	@endchk
0020638E 4A00                         		tst.b	d0
00206390 6600                         		bne.s	@leftws
00206392 4A01                         		tst.b	d1
00206394 6600                         		bne.s	@rightws
00206396 6000                          		bra.s	@endchk
00206398                            @przrotx:
00206398                            	
00206398                            @leftws:
00206398 0C01 0002                  		cmp.b	#2,d1
0020639C 6C00                       		bge.s	@endchk
0020639E 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
002063A4 6700                       		beq.s	@endchk
002063A6 6000                       		bra.s	@rotatex
002063A8                            @rightws:
002063A8 0C01 0002                  		cmp.b	#2,d1
002063AC 6C00                       		bge.s	@endchk
002063AE 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
002063B4 6600                       		bne.s	@endchk
002063B6                            @rotatex:
002063B6 4486                        		neg.l	d6
002063B8 086E 0000 001E              		bchg	#bitobj_flipH,obj_status(a6)
002063BE                            @endchk:
002063BE 4E75                       		rts
002063C0                            		
002063C0                            ; ------------------------------------------------
002063C0                            ; Data
002063C0                            ; ------------------------------------------------
002063C0                            		
002063C0                            ; ----------------------------------------
002063C0                            
002063C0                            ani_dadou:
002063C0 0000                       		dc.w @Idle-ani_dadou
002063C2 0000                       		dc.w @Walk-ani_dadou
002063C4                            		even
002063C4                            @Idle:
002063C4 08                          		dc.b 8
002063C5 0000 0000 0000 0000 0001+   		dc.b 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
002063D6 FF                         		dc.b $FF
002063D8 00                         		even
002063D8                            @Walk:
002063D8 06                          		dc.b 6
002063D9 0203 0405 0607 0809         		dc.b 2,3,4,5,6,7,8,9
002063E1 FF                         		dc.b $FF
002063E2                            		even	
002063E2                            		even	
002063E2                               		include	"engine/modes/level/data/objects/pikudo/code.asm"
002063E2                            ; =================================================================
002063E2                            ; Object
002063E2                            ; 
002063E2                            ; Pikudo
002063E2                            ; =================================================================
002063E2                            
002063E2                            ; =================================================================
002063E2                            ; ------------------------------------------------
002063E2                            ; Variables
002063E2                            ; ------------------------------------------------
002063E2                            
002063E2 =000004D0                  varVramPikudo	equ	$4D0
002063E2 =000000AA                  varTimerWait	equ	170
002063E2 =0000001E                  varTimerAttck	equ	30
002063E2                            
002063E2                            ; =================================================================
002063E2                            ; ------------------------------------------------
002063E2                            ; RAM
002063E2                            ; ------------------------------------------------
002063E2                            
002063E2                            		rsset Obj_Ram
002063E2 =00000024                  timerpik1	rs.w 1
002063E2 =00000026                  timerpik2	rs.w 1
002063E2 =00000028                  lastx		rs.w 1
002063E2 =0000002A                  lasty		rs.w 1
002063E2                            
002063E2                            ; =================================================================
002063E2                            ; ------------------------------------------------
002063E2                            ; Code start
002063E2                            ; ------------------------------------------------
002063E2                            
002063E2                            Obj_Pikudo:
002063E2 7000                        		moveq	#0,d0
002063E4 102E 001D                   		move.b	obj_index(a6),d0
002063E8 D040                        		add.w	d0,d0
002063EA 323B 0000                   		move.w	@Index(pc,d0.w),d1
002063EE 4EBB 1000                   		jsr	@Index(pc,d1.w)
002063F2                             		
002063F2 6100 DEE4                   		bsr	Object_OffCheck
002063F6 203C 04D0 0000                		move.l	#(varVramPikudo<<16),d0
002063FC 223C 0000 0000              		move.l	#ani_pikudo,d1
00206402 6100 DF40                  		bsr	Object_Animate
00206406                            		
00206406 203C 04D0 0000                 		move.l	#(varVramPikudo<<16),d0
0020640C 102E 0020                   		move.b	obj_frame(a6),d0
00206410 223C 0000 0000             		move.l	#map_pikudo,d1
00206416 6000 DB82                   		bra	Object_Show
0020641A                             		
0020641A                            ; ------------------------------------------------
0020641A                            
0020641A                            @Index:
0020641A 0000                       		dc.w @Init-@Index
0020641C 0000                       		dc.w @Stand-@Index
0020641E 0000                       		dc.w @Attack-@Index
00206420                            		even
00206420                            		
00206420                            ; =================================================================
00206420                            ; ------------------------------------------------
00206420                            ; Index $00: Init
00206420                            ; ------------------------------------------------
00206420                            
00206420                            @Init:
00206420 062E 0001 001D             		add.b	#1,obj_index(a6)
00206426 422E 001A                  		clr.b	obj_anim_id(a6)
0020642A 422E 0020                  		clr.b	obj_frame(a6)
0020642E 2D7C 0101 0202 0004        		move.l	#$01010202,obj_size(a6)
00206436 42AE 0010                  		clr.l	obj_x_spd(a6)
0020643A 3D7C 00AA 0024             		move.w	#varTimerWait,timerpik1(a6)
00206440 3D6E 0008 0028             		move.w	obj_x(a6),lastx(a6)
00206446 3D6E 000C 002A             		move.w	obj_y(a6),lasty(a6)
0020644C                            		
0020644C                            ; =================================================================
0020644C                            ; ------------------------------------------------                  
0020644C                            ; Index $01: Stand
0020644C                            ; ------------------------------------------------
0020644C                            
0020644C                            @Stand:
0020644C 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00206452 08AE 0000 001E             		bclr	#bitobj_flipH,obj_status(a6)
00206458 302C 0008                  		move.w	obj_x(a4),d0
0020645C B06E 0008                  		cmp.w	obj_x(a6),d0
00206460 6D00                       		blt.s	@leftside
00206462 08EE 0000 001E             		bset	#bitobj_flipH,obj_status(a6)
00206468                            @leftside:
00206468                            
00206468 6100 E132                  		bsr	object_FindCol_Ceiling
0020646C 4A00                       		tst.b	d0
0020646E 6600                       		bne.s	@ignore
00206470 6100 E51E                  		bsr	object_FindCol_CeilingSides
00206474 4A00                       		tst.b	d0
00206476 6600                       		bne.s	@ignore	
00206478 4A01                       		tst.b	d1
0020647A 6600                       		bne.s	@ignore
0020647C                            		
0020647C 302E 000C                  		move.w	obj_y(a6),d0
00206480 B06E 002A                  		cmp.w	lasty(a6),d0
00206484 6F00                       		ble.s	@ignore
00206486                            		
00206486                            ; 		
00206486                            ; 		bsr	object_FindPrz_CeilingSides
00206486                            ; 		move.l	d0,d2
00206486                            ; 		bsr	object_FindPrz_CeilingSides
00206486                            ; 		or.l	d1,d0
00206486                            ; 		or.l	d2,d0
00206486                            ; 		btst	#7,d0
00206486                            ; 		bne.s	@cont2
00206486                            ; 		btst	#6,d0
00206486                            ; 		bne.s	@cont2
00206486                            ; 		tst.b	d0
00206486                            ; 		bne.s	@ignore
00206486                            ; @cont2:
00206486                            
00206486 046E 0001 000C             		sub.w	#1,obj_y(a6)
0020648C                            @ignore:
0020648C                            
0020648C 046E 0001 0024             		sub.w	#1,timerpik1(a6)
00206492 6A00                       		bpl.s	@waitpik1
00206494                            		
00206494 203C 0000 0000               		move.l	#SndSfx_BEEBUZZ,d0
0020649A 7202                         		moveq 	#2,d1
0020649C 7401                         		moveq	#1,d2
0020649E 6100 A270                    		bsr	Audio_Track_play
002064A2                              		
002064A2 1D7C 0002 001D             		move.b	#2,obj_index(a6)
002064A8 3D7C 001E 0024             		move.w	#varTimerAttck,timerpik1(a6)
002064AE 1D7C 0001 001A             		move.b	#1,obj_anim_id(a6)
002064B4 2D7C FFFE 1000 0010        		move.l	#-$1F000,obj_x_spd(a6)
002064BC 2D7C 0002 0000 0014        		move.l	#$20000,obj_y_spd(a6)
002064C4 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
002064CA 6700                       		beq.s	@waitpik1
002064CC 44AE 0010                  		neg.l	obj_x_spd(a6)
002064D0                            
002064D0                            @waitpik1:
002064D0 6000 0000                  		bra	@check_touch
002064D4                            		
002064D4                            ; =================================================================
002064D4                            ; ------------------------------------------------                  
002064D4                            ; Index $02: Attack
002064D4                            ; ------------------------------------------------
002064D4                            
002064D4                            @Attack:
002064D4 2C2E 0010                  		move.l	obj_x_spd(a6),d6
002064D8 2E2E 0014                  		move.l	obj_y_spd(a6),d7
002064DC                            		
002064DC DDAE 0008                  		add.l	d6,obj_x(a6)
002064E0 DFAE 000C                  		add.l	d7,obj_y(a6)
002064E4                            		
002064E4                            ; Check for floor or walls
002064E4                            
002064E4 6100 DF7C                  		bsr	object_FindCol_Floor
002064E8 4A00                       		tst.b	d0
002064EA 6600                       		bne.s	@forceend
002064EC 6100 DF68                  		bsr	object_FindPrz_Floor
002064F0 0800 0007                  		btst	#7,d0
002064F4 6600                       		bne.s	@cont
002064F6 0800 0006                  		btst	#6,d0
002064FA 6600                       		bne.s	@cont	
002064FC 4A00                       		tst.b	d0
002064FE 6600                       		bne.s	@forceend
00206500                            @cont:
00206500                            
00206500 6100 DFCE                  		bsr	object_FindCol_Wall
00206504 4A00                       		tst.b	d0
00206506 6684                       		bne.s	@ignore
00206508 6100 E216                  		bsr	object_FindCol_WallSides
0020650C 4A00                       		tst.b	d0
0020650E 6600 FF7C                  		bne	@ignore		
00206512 4A01                       		tst.b	d1
00206514 6600 FF76                  		bne	@ignore
00206518                            		
00206518 6100 E1FA                  		bsr	object_FindPrz_WallSides
0020651C 2400                       		move.l	d0,d2
0020651E 6100 E1F4                  		bsr	object_FindPrz_WallSides
00206522 8081                       		or.l	d1,d0
00206524 8082                       		or.l	d2,d0
00206526 0800 0007                  		btst	#7,d0
0020652A 6600                       		bne.s	@cont3
0020652C 0800 0006                  		btst	#6,d0
00206530 6600                       		bne.s	@cont3
00206532 4A00                       		tst.b	d0
00206534 6600                       		bne.s	@forceend
00206536                            @cont3:
00206536                            
00206536 046E 0001 0024             		sub.w	#1,timerpik1(a6)
0020653C 6A00                       		bpl.s	@waitpik2
0020653E 6000                       		bra.s	@end2
00206540                            @forceend:
00206540 046E 0008 002A             		sub.w	#8,lasty(a6)
00206546                            @end2:
00206546                            
00206546 1D7C 0001 001D             		move.b	#1,obj_index(a6)
0020654C 3D7C 00AA 0024             		move.w	#varTimerWait,timerpik1(a6)
00206552 422E 001A                  		clr.b	obj_anim_id(a6)
00206556 4286                       		clr.l	d6
00206558 4287                       		clr.l	d7
0020655A                            @waitpik2:
0020655A                            
0020655A 2D46 0010                  		move.l	d6,obj_x_spd(a6)
0020655E 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00206562 6000 0000                  		bra	@check_touch
00206566                            		
00206566                            ; =================================================================
00206566                            ; ------------------------------------------------
00206566                            ; Subs
00206566                            ; ------------------------------------------------
00206566                            
00206566                            ; @Go_Stand:
00206566                            ; 		clr.l	obj_x_spd(a6)
00206566                            ; 		clr.b	obj_anim_id(a6)
00206566                            ; 		move.b	#1,obj_index(a6)
00206566                            ; 		rts
00206566                            ; 	
00206566                            ; ; --------------------------------------
00206566                            ; 
00206566                            ; @Go_Walk:
00206566                            ; 		move.l	#$4000,obj_x_spd(a6)
00206566                            ; 		btst	#bitobj_flipH,obj_status(a6)
00206566                            ; 		bne.s	@right
00206566                            ; 		move.l	#-$4000,obj_x_spd(a6)
00206566                            ; @right:
00206566                            ; 		move.b	#1,obj_anim_id(a6)
00206566                            ; 		move.b	#2,obj_index(a6)
00206566                            ; 		rts
00206566                            ; 	
00206566                            ; ; ------------------------------------------------
00206566                            ; ; Pyhsics
00206566                            ; ; ------------------------------------------------
00206566                            ; 
00206566                            ; @Pyhsics:
00206566                            ; 		lea	(RAM_LvlPlanes),a5
00206566                            ;  		move.l	obj_x_spd(a6),d6
00206566                            ;  		move.l	obj_y_spd(a6),d7
00206566                            ;  		
00206566                            ;  		add.l	d6,obj_x(a6)
00206566                            ;  		bsr	@WallCheck
00206566                            ; 		
00206566                            ; ; ----------------------------------
00206566                            ; 
00206566                            ;   		add.l	#$8000,d7
00206566                            ;   		cmp.l	#$40000,d7
00206566                            ;   		blt.s	@low_y
00206566                            ;   		move.l	#$40000,d7
00206566                            ; @low_y:
00206566                            ;   		add.l	d7,obj_y(a6)
00206566                            ;   		
00206566                            ; ; 		lea	(RAM_LvlPlanes),a5
00206566                            ; ; 		move.w	lvl_size_y(a5),d0
00206566                            ; ; 		lsl.w	#4,d0
00206566                            ; ; 		move.w	obj_y(a6),d1
00206566                            ; ; 		moveq	#0,d2
00206566                            ; ; 		move.b	obj_size+2(a6),d2
00206566                            ; ; 		lsl.w	#3,d2
00206566                            ; ; 		sub.w	d2,d1
00206566                            ; ; 		cmp.w	d0,d1
00206566                            ; ; 		bge	@delete
00206566                            ; ; 		
00206566                            ;   		tst.l	d7
00206566                            ;   		bmi.s	@no_floor
00206566                            ;   
00206566                            ; 		bsr	object_FindPrz_Floor
00206566                            ; 		move.l	d0,d2
00206566                            ; 		tst.b	d0
00206566                            ; 		bne.s	@from_prize
00206566                            ;  		bsr 	object_FindPrz_FloorSides
00206566                            ; 		tst.b	d0
00206566                            ; 		bne	@from_prize;@swap_dir_wl
00206566                            ; 		move.l	d1,d0
00206566                            ; 		tst.b	d0
00206566                            ; 		bne	@from_prize
00206566                            ; 		
00206566                            ; 		bsr	object_FindCol_Floor
00206566                            ; 		move.l	d0,d2
00206566                            ; 		tst.b	d0
00206566                            ; 		bne.s	@set_floor
00206566                            ;  		bsr 	object_FindCol_FloorSides
00206566                            ; 		tst.b	d0
00206566                            ; 		bne	@set_floor;@swap_dir_wl
00206566                            ; 		move.l	d1,d0
00206566                            ; 		tst.b	d0
00206566                            ; 		beq	@no_floor
00206566                            ; 		
00206566                            ; 		bra.s	@set_floor
00206566                            ; ; @swap_dir_wl:
00206566                            ; ; 		neg.l	d6
00206566                            ; ; 		bchg	#bitobj_flipH,obj_status(a6)
00206566                            ; ; 		bra.s	@no_floor
00206566                            ; 
00206566                            ; @from_prize:
00206566                            ; 		cmp.b	#$40,d0
00206566                            ; 		bge.s	@set_floor
00206566                            ; 		move.b	#1,d0
00206566                            ; 		
00206566                            ; @set_floor:
00206566                            ;   		bsr 	object_SetCol_Floor
00206566                            ;   		
00206566                            ; @no_floor:
00206566                            ; 
00206566                            ;  		move.l	d6,obj_x_spd(a6)
00206566                            ;  		move.l	d7,obj_y_spd(a6)
00206566                             		
00206566                            ; ----------------------------------
00206566                            ; Check if touched
00206566                            ; ----------------------------------
00206566                            
00206566                            @check_touch:
00206566 6100 E654                  		bsr	objTouch_Top
0020656A 4A00                       		tst.b	d0
0020656C 6600                       		bne.s	@touch_flag
0020656E 6100 E6EA                  		bsr	objTouch_Bottom
00206572 4A00                       		tst.b	d0
00206574 6600                       		bne.s	@touch_flag
00206576                            		
00206576 6100 E782                  		bsr	objTouch_Sides
0020657A 4A00                       		tst.b	d0
0020657C 6600                       		bne.s	@touch_flag;_side
0020657E 4840                       		swap	d0
00206580 4A00                       		tst.b	d0
00206582 6600                       		bne.s	@touch_flag;_side
00206584 4E75                       		rts
00206586                            		
00206586                            ; -----------------------------------
00206586                            
00206586                            @touch_flag:
00206586 6100 E956                  		bsr	objPlyrHurtKill
0020658A 6700                       		beq.s	@return
0020658C                            		
0020658C 08AC 0003 001E             		bclr	#bitobj_hurt,obj_status(a4)
00206592 323C 04D0                     		move.w	#varVramPikudo,d1
00206596 142E 0020                   		move.b	obj_frame(a6),d2
0020659A 203C 0000 0000             		move.l	#map_pikudo,d0
002065A0 260C                       		move.l	a4,d3
002065A2 6100 ECE2                  		bsr	objAction_SetStomp
002065A6 6000 DD10                  		bra	Object_IsGone
002065AA                            @return:
002065AA 4E75                       		rts
002065AC                            		
002065AC                            ; =================================================================
002065AC                            
002065AC                            @WallCheck:
002065AC 6100 DF16                     		bsr	object_FindPrz_Wall
002065B0 4A00                          		tst.b	d0
002065B2 6600                          		bne.s	@foundprzwl
002065B4 6100 DF1A                    		bsr	object_FindCol_Wall
002065B8 4A00                         		tst.b	d0
002065BA 6700                         		beq.s	@chk_right
002065BC                            @foundprzwl:
002065BC 0800 0006                    		btst	#6,d0
002065C0 6600                         		bne.s	@chk_right
002065C2                            ;    		cmp.b	#2,d0
002065C2                            ;    		blt.s	@chk_right
002065C2 6100 E5DC                    		bsr	object_SetCol_Wall
002065C6                            ;    		bra.s	@endchk
002065C6                            @chk_right:
002065C6                            
002065C6                            		;TODO: Prize check
002065C6                            ;   		bsr	object_FindPrz_WallSides
002065C6                            ;   		tst.b	d0
002065C6                            ;   		bne.s	@przrotx
002065C6                            ;   		move.l	d1,d0
002065C6                            ;   		tst.b	d0
002065C6                            ;   		bne.s	@przrotx
002065C6                            
002065C6 6100 E158                    		bsr	object_FindCol_WallSides
002065CA 0800 0006                    		btst	#6,d0
002065CE 6600                         		bne.s	@endchk
002065D0 0801 0006                    		btst	#6,d1
002065D4 6600                         		bne.s	@endchk
002065D6 4A00                         		tst.b	d0
002065D8 6600                         		bne.s	@leftws
002065DA 4A01                         		tst.b	d1
002065DC 6600                         		bne.s	@rightws
002065DE 6000                          		bra.s	@endchk
002065E0                            @przrotx:
002065E0                            	
002065E0                            @leftws:
002065E0 0C01 0002                  		cmp.b	#2,d1
002065E4 6C00                       		bge.s	@endchk
002065E6 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
002065EC 6700                       		beq.s	@endchk
002065EE 6000                       		bra.s	@rotatex
002065F0                            @rightws:
002065F0 0C01 0002                  		cmp.b	#2,d1
002065F4 6C00                       		bge.s	@endchk
002065F6 082E 0000 001E             		btst	#bitobj_flipH,obj_status(a6)
002065FC 6600                       		bne.s	@endchk
002065FE                            @rotatex:
002065FE 4486                        		neg.l	d6
00206600 086E 0000 001E              		bchg	#bitobj_flipH,obj_status(a6)
00206606                            @endchk:
00206606 4E75                       		rts
00206608                            
00206608                            ; ------------------------------------------------
00206608                            ; Data
00206608                            ; ------------------------------------------------
00206608                            		
00206608                            ; ----------------------------------------
00206608                            
00206608                            ani_pikudo:
00206608 0000                       		dc.w @Idle-ani_pikudo
0020660A 0000                       		dc.w @Attack-ani_pikudo
0020660C                            		even
0020660C                            @Idle:
0020660C 03                          		dc.b 3
0020660D 0001 0001 0001 0001 0001+   		dc.b 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2
0020662C 0100 0100 0100 0100 0100+   		dc.b 1,0,1,0,1,0,1,0,1,0,1
00206637 FF                         		dc.b $FF
00206638                            		even
00206638                            @Attack:
00206638 02                          		dc.b 2
00206639 0304                        		dc.b 3,4
0020663B FF                         		dc.b $FF
0020663C                            		even
0020663C                            		even
0020663C                               		include	"engine/modes/level/data/objects/platform/code.asm"
0020663C                            ; =================================================================
0020663C                            ; Object
0020663C                            ; 
0020663C                            ; Platforms
0020663C                            ; =================================================================
0020663C                            
0020663C                            ; =================================================================
0020663C                            ; ------------------------------------------------
0020663C                            ; Variables
0020663C                            ; ------------------------------------------------
0020663C                            
0020663C =00002530                  varVramPlatfrm	equ	$2000|$530
0020663C                            
0020663C                            ; =================================================================
0020663C                            ; ------------------------------------------------
0020663C                            ; RAM
0020663C                            ; ------------------------------------------------
0020663C                            
0020663C                            		rsset obj_ram
0020663C =00000024                  last_x		rs.w	1
0020663C =00000026                  last_y		rs.w	1
0020663C =00000028                  tanvalue	rs.w	1
0020663C                            
0020663C                            ; =================================================================
0020663C                            ; ------------------------------------------------
0020663C                            ; Code start
0020663C                            ; ------------------------------------------------
0020663C                            
0020663C                            Obj_Platform:
0020663C 7000                        		moveq	#0,d0
0020663E 102E 001D                   		move.b	obj_index(a6),d0
00206642 D040                        		add.w	d0,d0
00206644 323B 0000                   		move.w	@Index(pc,d0.w),d1
00206648 4EBB 1000                   		jsr	@Index(pc,d1.w)
0020664C                             		
0020664C                             		;TODO: si hago este check se 
0020664C                             		;desincronizan
0020664C                            ;  		bsr	Object_OffCheck
0020664C                            
0020664C                            ;    		move.l	#(varVramPlatfrm<<16),d0
0020664C                            ;  		move.l	#ani_chamoy,d1
0020664C                            ; 		bsr	Object_Animate
0020664C 203C 2530 0000              		move.l	#(varVramPlatfrm<<16),d0
00206652 102E 0020                   		move.b	obj_frame(a6),d0
00206656 223C 0000 0000             		move.l	#objMap_platform,d1
0020665C 6000 D93C                   		bra	Object_Show
00206660                             		
00206660                            ; =================================================================
00206660                            ; ------------------------------------------------
00206660                            ; Code index
00206660                            ; ------------------------------------------------
00206660                            
00206660                            @Index:
00206660 0000                       		dc.w	@Init-@Index
00206662 0000                       		dc.w	@Main-@Index
00206664                            		even
00206664                            		
00206664                            ; =================================================================
00206664                            ; ------------------------------------------------
00206664                            ; Sub-id
00206664                            ; ------------------------------------------------
00206664                            
00206664                            @id_list:
00206664 0000 0000                  		dc.w @left_right_sin-@id_list,0
00206668 0303 0100                  		dc.l $03030100
0020666C 0000 0000                  		dc.w @left_right_cos-@id_list,0
00206670 0303 0100                  		dc.l $03030100
00206674 0000 0000                  		dc.w @up_down_sin-@id_list,0
00206678 0303 0100                  		dc.l $03030100
0020667C 0000 0000                  		dc.w @up_down_cos-@id_list,0
00206680 0303 0100                  		dc.l $03030100
00206684 0000 0000                  		dc.w @rotate_right-@id_list,0
00206688 0303 0100                  		dc.l $03030100
0020668C 0000 0000                  		dc.w @rotate_left-@id_list,0
00206690 0303 0100                  		dc.l $03030100	
00206694 0000 0000                  		dc.w @stepfall-@id_list,0
00206698 0303 0100                  		dc.l $03030100
0020669C                            		
0020669C                            ; =================================================================
0020669C                            ; ------------------------------------------------
0020669C                            ; Index $00: Init
0020669C                            ; ------------------------------------------------
0020669C                            
0020669C                            @Init:
0020669C 062E 0001 001D             		add.b	#1,obj_index(a6)
002066A2 2D7C 0303 0001 0004        		move.l	#$03030001,obj_size(a6)		;failsafe
002066AA 2D7C 0000 8000 0014        		move.l	#$8000,obj_y_spd(a6)
002066B2 3D6E 0008 0024             		move.w	obj_x(a6),last_x(a6)
002066B8 3D6E 000C 0026             		move.w	obj_y(a6),last_y(a6)
002066BE 422E 0020                  		clr.b	obj_frame(a6)
002066C2                            		
002066C2                            ; =================================================================
002066C2                            ; ------------------------------------------------                  
002066C2                            ; Index $01: Main
002066C2                            ; ------------------------------------------------
002066C2                            
002066C2                            @Main:
002066C2 7A00                        		moveq	#0,d5
002066C4                             		
002066C4 7000                       		moveq	#0,d0
002066C6 102E 001F                  		move.b	obj_subid(a6),d0
002066CA E748                       		lsl.w	#3,d0
002066CC 2D7B 009A 0004              		move.l	@id_list+4(pc,d0.w),obj_size(a6)
002066D2 323B 0090                  		move.w	@id_list(pc,d0.w),d1
002066D6 4EBB 108C                  		jsr	@id_list(pc,d1.w)
002066DA                             		
002066DA 6100 E4E0                  		bsr	objTouch_Top
002066DE 200C                       		move.l	a4,d0
002066E0 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
002066E6 6600                       		bne.s	@return
002066E8 4A00                       		tst.b	d0
002066EA 6700                       		beq.s	@return
002066EC 0C2C 0002 001D             		cmp.b	#varPlyrMdDead,obj_index(a4)
002066F2 6700                       		beq.s	@return
002066F4 6100 E6E4                  		bsr	objPlyrSetFloor
002066F8 4AAC 0014                  		tst.l	obj_y_spd(a4)
002066FC 6B00                       		bmi.s	@return
002066FE 9B6C 0008                     		sub.w	d5,obj_x(a4)
00206702                            @return:
00206702 4E75                       		rts
00206704                             	
00206704                            ; ---------------------------
00206704                            ; Left/Right
00206704                            ; ---------------------------
00206704                            	
00206704                            @left_right_cos:
00206704 302E 0028                    		move.w	tanvalue(a6),d0
00206708                            
00206708 6000 0000                    		bra	@do_lr
0020670C                              
0020670C                            @left_right_sin:
0020670C 302E 0028                    		move.w	tanvalue(a6),d0
00206710 4440                         		neg.w	d0
00206712                              		
00206712                            @do_lr:
00206712 6100 C226                    		bsr	CalcSine
00206716 E640                         		asr.w	#3,d0
00206718 342E 0024                    		move.w	last_x(a6),d2
0020671C D440                         		add.w	d0,d2
0020671E 3A2E 0008                    		move.w	obj_x(a6),d5
00206722 9A42                         		sub.w	d2,d5
00206724 3D42 0008                    		move.w	d2,obj_x(a6)
00206728                              		
00206728 066E 0001 0028              		add.w	#1,tanvalue(a6)
0020672E 4E75                         		rts
00206730                             
00206730                            ; ---------------------------
00206730                            ; Up/Down
00206730                            ; ---------------------------
00206730                            
00206730                            @up_down_cos:
00206730 302E 0028                  		move.w	tanvalue(a6),d0
00206734 4440                       		neg.w	d0
00206736 6000                       		bra.s	@do_ud
00206738                            @up_down_sin:
00206738 302E 0028                    		move.w	tanvalue(a6),d0
0020673C                            @do_ud:
0020673C 6100 C1FC                    		bsr	CalcSine
00206740 E640                         		asr.w	#3,d0
00206742 342E 0026                    		move.w	last_y(a6),d2
00206746 D440                         		add.w	d0,d2
00206748                            ;   		move.w	obj_y(a6),d4
00206748                            ;   		sub.w	d2,d4
00206748 3D42 000C                     		move.w	d2,obj_y(a6)
0020674C                            
0020674C 066E 0001 0028              		add.w	#1,tanvalue(a6)
00206752 4E75                        		rts
00206754                             		
00206754                            ; ---------------------------
00206754                            ; rotate_right
00206754                            ; ---------------------------
00206754                            
00206754                            @rotate_right:
00206754                            ;   		move.w	#$20,d4
00206754                              		
00206754 302E 0028                    		move.w	tanvalue(a6),d0
00206758 6100 C1E0                    		bsr	CalcSine
0020675C C1FC 0040                    		muls	#$40,d0
00206760 E080                         		asr.l	#8,d0
00206762 342E 0024                    		move.w	last_x(a6),d2
00206766 D440                         		add.w	d0,d2
00206768 3A2E 0008                    		move.w	obj_x(a6),d5
0020676C 9A42                         		sub.w	d2,d5
0020676E 3D42 0008                    		move.w	d2,obj_x(a6)
00206772                               		
00206772 302E 0028                    		move.w	tanvalue(a6),d0
00206776 E348                         		lsl.w	#1,d0
00206778 6100 C1C0                    		bsr	CalcSine
0020677C C3FC 0030                    		muls	#$30,d1
00206780 E081                         		asr.l	#8,d1
00206782 342E 0026                    		move.w	last_y(a6),d2
00206786 D441                         		add.w	d1,d2
00206788 3D42 000C                     		move.w	d2,obj_y(a6)
0020678C                            
0020678C 066E 0001 0028              		add.w	#1,tanvalue(a6)
00206792 4E75                        		rts
00206794                             		
00206794                            ; ---------------------------
00206794                            ; rotate_left
00206794                            ; ---------------------------
00206794                            
00206794                            @rotate_left:
00206794 066E 0001 0028              		add.w	#1,tanvalue(a6)
0020679A 4E75                        		rts
0020679C                            
0020679C                            ; ---------------------------
0020679C                            ; StepFall
0020679C                            ; ---------------------------
0020679C                            
0020679C                            @stepfall:
0020679C 6100 E41E                  		bsr	objTouch_Top
002067A0 4A00                       		tst.b	d0
002067A2 6700 FF5E                  		beq	@return
002067A6 200C                       		move.l	a4,d0
002067A8 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
002067AE 6600 FF52                  		bne	@return
002067B2 4AAC 0014                  		tst.l	obj_y_spd(a4)
002067B6 6B00 FF4A                  		bmi	@return
002067BA                            		
002067BA 066E 0003 000C             		add.w	#3,obj_y(a6)
002067C0 4E75                       		rts
002067C0 4E75                       		rts
002067C2                               		include	"engine/modes/level/data/objects/prize/code.asm"
002067C2                            ; =================================================================
002067C2                            ; Object
002067C2                            ; 
002067C2                            ; The prize
002067C2                            ; =================================================================
002067C2                            
002067C2                            ; =================================================================
002067C2                            ; ------------------------------------------------
002067C2                            ; Variables
002067C2                            ; ------------------------------------------------
002067C2                            
002067C2 =0000C5A8                  vramCoinRed	equ	$C000|$5A8
002067C2 =0000C5AC                  vramCoinBlue	equ	$C000|$5AC
002067C2 =0000C5B0                  vram1up		equ	$C000|$5B0
002067C2 =0000C594                  vramJmpBlock	equ	$C000|$594
002067C2                            
002067C2                            ; =================================================================
002067C2                            ; ------------------------------------------------
002067C2                            ; RAM
002067C2                            ; ------------------------------------------------
002067C2                            
002067C2                            		rsset obj_ram
002067C2 =00000024                  this_pos	rs.l 1			; Block type and X/Y position
002067C2 =00000028                  this_vram	rs.w 1			; Vram (top left)
002067C2 =0000002A                  this_counter	rs.w 1			; Counter (coins, etc.)
002067C2                            
002067C2 =0000002C                  y_coin_spd	rs.l 1
002067C2 =00000030                  y_pos_coin	rs.l 1
002067C2 =00000034                  x_pos_main	rs.w 1
002067C2 =00000036                  y_pos_main	rs.w 1
002067C2 =00000038                  x_pos_l		rs.w 1
002067C2 =0000003A                  x_pos_r		rs.w 1
002067C2 =0000003C                  tmr_1		rs.w 1
002067C2 =0000003E                  block_flags	rs.b 1
002067C2                            
002067C2                            ; =================================================================
002067C2                            ; ------------------------------------------------
002067C2                            ; Code start
002067C2                            ; ------------------------------------------------
002067C2                            
002067C2                            obj_prize:
002067C2 7000                        		moveq	#0,d0
002067C4 102E 001D                   		move.b	obj_index(a6),d0
002067C8 D040                        		add.w	d0,d0
002067CA 323B 0000                   		move.w	@Index(pc,d0.w),d1
002067CE 4EFB 1000                   		jmp	@Index(pc,d1.w)
002067D2                             		
002067D2                            ; ------------------------------------------------
002067D2                            
002067D2                            @Index:
002067D2 0000                       		dc.w	@Init-@Index
002067D4 0000                       		dc.w	@Main-@Index
002067D6                            		even
002067D6                            		
002067D6                            ; =================================================================
002067D6                            ; ------------------------------------------------
002067D6                            ; Index $00: Init
002067D6                            ; ------------------------------------------------
002067D6                            
002067D6                            @Init:
002067D6 062E 0001 001D             		add.b	#1,obj_index(a6)
002067DC 202E 0024                  		move.l	this_pos(a6),d0
002067E0 4840                        		swap	d0
002067E2 0240 FFF0                   		and.w	#$FFF0,d0
002067E6 3D40 0008                   		move.w	d0,obj_x(a6)
002067EA 4840                        		swap	d0
002067EC E848                        		lsr.w	#4,d0
002067EE 0240 FFF0                   		and.w	#$FFF0,d0
002067F2 3D40 000C                   		move.w	d0,obj_y(a6)
002067F6                            
002067F6 202E 0024                   		move.l	this_pos(a6),d0
002067FA 6100 D128                  		bsr	Level_HidePrize
002067FE                            
002067FE 2D7C FFFC 0000 0014         		move.l	#-$40000,obj_y_spd(a6)
00206806 4A2E 001F                   		tst.b	obj_subid(a6)
0020680A 6700                        		beq.s	@not_brick
0020680C 2D7C FFFE 0000 0014         		move.l	#-$20000,obj_y_spd(a6)
00206814                            @not_brick:
00206814 3D6E 0008 0034              		move.w	obj_x(a6),x_pos_main(a6)
0020681A 302E 000C                   		move.w	obj_y(a6),d0
0020681E 3D40 0036                   		move.w	d0,y_pos_main(a6)
00206822 0440 0010                   		sub.w	#$10,d0
00206826 4840                        		swap	d0
00206828 2D40 0030                   		move.l	d0,y_pos_coin(a6)
0020682C                             		
0020682C 3D6E 0008 0038              		move.w	obj_x(a6),x_pos_l(a6)
00206832 3D6E 0008 003A              		move.w	obj_x(a6),x_pos_r(a6)
00206838 066E 0008 003A              		add.w	#8,x_pos_r(a6)
0020683E 2D7C FFFC 0000 002C         		move.l	#-$40000,y_coin_spd(a6)
00206846                             		
00206846 2D7C 0101 0101 0004         		move.l	#$01010101,obj_size(a6)
0020684E 08EE 0006 001E              		bset	#bitobj_hit,obj_status(a6)
00206854                             		
00206854                            ; =================================================================
00206854                            ; ------------------------------------------------                  
00206854                            ; Index $01: Main
00206854                            ; ------------------------------------------------
00206854                            
00206854                            @Main:
00206854 4BF9 FFFF BC00             		lea	(RAM_LvlPlanes),a5
0020685A 7000                        		moveq	#0,d0
0020685C 102E 001F                   		move.b	obj_subid(a6),d0
00206860 0200 007F                   		and.b	#$7F,d0
00206864 D040                        		add.w	d0,d0
00206866 323B 0000                   		move.w	@subtypes(pc,d0.w),d1
0020686A 4EFB 1000                   		jmp	@subtypes(pc,d1.w)
0020686E                            		
0020686E                            ; ------------------------------------------------
0020686E                            ; Subs
0020686E                            ; ------------------------------------------------
0020686E                            
0020686E                            @subtypes:
0020686E 0000                       		dc.w @destroy-@subtypes		; $00 - Breakable block
00206870 0000                       		dc.w @bump_solid-@subtypes	; $01 - Bump, normal
00206872 0000                       		dc.w @bump_coin-@subtypes	; $02 - Bump, add red coin (1)
00206874 0000                       		dc.w @bump_coin_blue-@subtypes	; $03 - Bump, add blue coin (2)
00206876 0000                       		dc.w @bump_1up-@subtypes	; $04 - Bump, add extra life
00206878 0000                       		dc.w @trampoline-@subtypes	; $05 - Trampoline animation
0020687A                            		
0020687A                            ; ------------------------------------------------
0020687A                            ; Return
0020687A                            ; ------------------------------------------------
0020687A                            
0020687A                            @return:
0020687A 4E75                       		rts
0020687C                            		
0020687C                            ; ------------------------------------------------
0020687C                            ; Destroy block
0020687C                            ; ------------------------------------------------
0020687C                            
0020687C                            @destroy:
0020687C 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00206880                            		
00206880 223C 0000 0000             		move.l	#$0000,d1
00206886 4841                       		swap	d1
00206888 322E 0028                  		move.w	this_vram(a6),d1
0020688C 0041 8000                  		or.w	#$8000,d1
00206890                            		
00206890 362E 003A                  		move.w	x_pos_r(a6),d3
00206894 066E 0001 003A             		add.w	#1,x_pos_r(a6)
0020689A 4843                       		swap	d3
0020689C 342E 0038                  		move.w	x_pos_l(a6),d2
002068A0 046E 0001 0038             		sub.w	#1,x_pos_l(a6)
002068A6 4842                       		swap	d2
002068A8                            	
002068A8 2002                       		move.l	d2,d0
002068AA 302E 000C                  		move.w	obj_y(a6),d0
002068AE 0480 0006 0000             		sub.l	#$60000,d0
002068B4 0440 0010                  		sub.w	#$10,d0
002068B8 6100 D762                  		bsr	Object_ExtSprite
002068BC 2003                       		move.l	d3,d0
002068BE 0641 0002                   		add.w	#2,d1
002068C2 302E 000C                  		move.w	obj_y(a6),d0
002068C6 0680 0004 0000             		add.l	#$40000,d0	
002068CC 0440 0014                  		sub.w	#$14,d0
002068D0 6100 D74A                  		bsr	Object_ExtSprite
002068D4 2002                       		move.l	d2,d0
002068D6 0441 0001                   		sub.w	#1,d1
002068DA 302E 000C                  		move.w	obj_y(a6),d0
002068DE 0480 0001 0000             		sub.l	#$10000,d0
002068E4 6100 D736                  		bsr	Object_ExtSprite
002068E8 2003                       		move.l	d3,d0
002068EA 0641 0002                   		add.w	#2,d1
002068EE 302E 000C                  		move.w	obj_y(a6),d0
002068F2 0680 0003 0000             		add.l	#$30000,d0
002068F8 0440 0004                  		sub.w	#4,d0
002068FC 6100 D71E                  		bsr	Object_ExtSprite
00206900                            		
00206900 0687 0000 4000              		add.l	#$4000,d7
00206906 4A87                        		tst.l	d7
00206908 6B00                        		bmi.s	@minus
0020690A 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00206910                            @minus:
00206910 DFAE 000C                  		add.l	d7,obj_y(a6)
00206914                            		
00206914 322E 000C                  		move.w	obj_y(a6),d1
00206918 303C 0140                  		move.w	#320,d0
0020691C D06D 0020                  		add.w	lvl_y(a5),d0
00206920 B240                       		cmp.w	d0,d1
00206922 6D00                       		blt.s	@lower_y
00206924 4EF9 0020 40A8             		jmp	Object_Delete
0020692A                            @lower_y:
0020692A 2D47 0014                   		move.l	d7,obj_y_spd(a6)
0020692E 4E75                           		rts
00206930                            		
00206930                            ; ------------------------------------------------
00206930                            ; Bump, nothing (or reveral hidden block)
00206930                            ; ------------------------------------------------
00206930                            
00206930                            @bump_solid:
00206930 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00206934 2C2E 002C                  		move.l	y_coin_spd(a6),d6
00206938                            		
00206938                            ; 		move.l	#$0005,d1
00206938                            ; 		swap	d1
00206938                            ; 		move.w	#vramCoinRed,d1
00206938                            ;  		move.l	y_pos_coin(a6),d0
00206938                            ;  		move.w	obj_x(a6),d0
00206938                            ;  		swap	d0
00206938                            ; 		bsr	Object_ExtSprite
00206938                            		
00206938 082E 0000 003E              		btst	#0,block_flags(a6)
0020693E 6600                        		bne.s	@stopblock
00206940 223C 0000 0005             		move.l	#$0005,d1
00206946 4841                       		swap	d1
00206948 322E 0028                  		move.w	this_vram(a6),d1
0020694C 0041 8000                  		or.w	#$8000,d1
00206950                            		
00206950 302E 0008                  		move.w	obj_x(a6),d0
00206954 4840                       		swap	d0
00206956 302E 000C                  		move.w	obj_y(a6),d0
0020695A 6100 D6C0                  		bsr	Object_ExtSprite
0020695E 0687 0000 4000              		add.l	#$4000,d7
00206964 4A87                        		tst.l	d7
00206966 6B00                        		bmi.s	@minus2
00206968 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
0020696E                            @minus2:
0020696E DFAE 000C                  		add.l	d7,obj_y(a6)
00206972                            @stopblock:
00206972 0686 0000 4000              		add.l	#$4000,d6
00206978 DDAE 0030                  		add.l	d6,y_pos_coin(a6)
0020697C                            		
0020697C 302E 000C                  		move.w	obj_y(a6),d0
00206980 322E 0036                  		move.w	y_pos_main(a6),d1
00206984 B041                       		cmp.w	d1,d0
00206986 6F00                       		ble.s	@return3
00206988                            		
00206988 202E 0024                   		move.l	this_pos(a6),d0
0020698C 6100 E8CE                  		bsr	Prize_Locate
00206990                            ; 		move.b	#$F,d0
00206990                            ; 		move.b	d0,(a3)
00206990 6100 CFAE                   		bsr	Level_ShowPrize
00206994 08EE 0000 003E              		bset	#0,block_flags(a6)
0020699A 4EF9 0020 40A8              		jmp	Object_Delete
002069A0                             		
002069A0                            @return3:
002069A0                            
002069A0                            ; 		move.w	y_pos_coin(a6),d0
002069A0                            ; 		move.w	y_pos_main(a6),d1
002069A0                            ; 		sub.w	#$10,d1
002069A0                            ; 		cmp.w	d1,d0
002069A0                            ; 		ble.s	@return2
002069A0                            ;   		jmp	Object_Delete
002069A0                            ;   		
002069A0                            ; @return2:
002069A0 2D46 002C                  		move.l	d6,y_coin_spd(a6)
002069A4 2D47 0014                   		move.l	d7,obj_y_spd(a6)
002069A8 4E75                        		rts
002069AA                             		
002069AA                            ; ------------------------------------------------
002069AA                            ; Bump block
002069AA                            ; ------------------------------------------------
002069AA                            
002069AA                            @bump_1up:
002069AA 223C 0000 0005             		move.l	#$0005,d1
002069B0 4841                       		swap	d1
002069B2 323C C5B0                  		move.w	#vram1up,d1
002069B6 202E 0030                   		move.l	y_pos_coin(a6),d0
002069BA 302E 0008                   		move.w	obj_x(a6),d0
002069BE 4840                        		swap	d0
002069C0 6100 D65A                  		bsr	Object_ExtSprite
002069C4 6000                       		bra.s	@from_coin_blue
002069C6                            		
002069C6                            @bump_coin_blue:
002069C6 223C 0000 0005             		move.l	#$0005,d1
002069CC 4841                       		swap	d1
002069CE 323C C5AC                  		move.w	#vramCoinBlue,d1
002069D2 202E 0030                   		move.l	y_pos_coin(a6),d0
002069D6 302E 0008                   		move.w	obj_x(a6),d0
002069DA 4840                        		swap	d0
002069DC 6100 D63E                  		bsr	Object_ExtSprite
002069E0 6000                       		bra.s	@from_coin_blue
002069E2                            		
002069E2                            @bump_coin:
002069E2 223C 0000 0005             		move.l	#$0005,d1
002069E8 4841                       		swap	d1
002069EA 323C C5A8                  		move.w	#vramCoinRed,d1
002069EE 202E 0030                   		move.l	y_pos_coin(a6),d0
002069F2 302E 0008                   		move.w	obj_x(a6),d0
002069F6 4840                        		swap	d0
002069F8 6100 D622                  		bsr	Object_ExtSprite
002069FC                            		
002069FC                            @from_coin_blue:
002069FC 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00206A00 2C2E 002C                  		move.l	y_coin_spd(a6),d6
00206A04                            		
00206A04 082E 0000 003E              		btst	#0,block_flags(a6)
00206A0A 6600                        		bne.s	@stopblock2
00206A0C 223C 0000 0005             		move.l	#$0005,d1
00206A12 4841                       		swap	d1
00206A14 322E 0028                  		move.w	this_vram(a6),d1
00206A18 0041 8000                  		or.w	#$8000,d1
00206A1C                            		
00206A1C 302E 0008                  		move.w	obj_x(a6),d0
00206A20 4840                       		swap	d0
00206A22 302E 000C                  		move.w	obj_y(a6),d0
00206A26 6100 D5F4                  		bsr	Object_ExtSprite
00206A2A 0687 0000 4000              		add.l	#$4000,d7
00206A30 4A87                        		tst.l	d7
00206A32 6B00                        		bmi.s	@minus3
00206A34 08AE 0006 001E              		bclr	#bitobj_hit,obj_status(a6)
00206A3A                            @minus3:
00206A3A DFAE 000C                  		add.l	d7,obj_y(a6)
00206A3E                            @stopblock2:
00206A3E 0686 0000 4000              		add.l	#$4000,d6
00206A44 DDAE 0030                  		add.l	d6,y_pos_coin(a6)
00206A48                            		
00206A48 302E 000C                  		move.w	obj_y(a6),d0
00206A4C 322E 0036                  		move.w	y_pos_main(a6),d1
00206A50 B041                       		cmp.w	d1,d0
00206A52 6F00                       		ble.s	@return4
00206A54                            		
00206A54 202E 0024                   		move.l	this_pos(a6),d0
00206A58 6100 E802                  		bsr	Prize_Locate
00206A5C 103C 000F                  		move.b	#$F,d0
00206A60 1680                       		move.b	d0,(a3)
00206A62 6100 CEDC                   		bsr	Level_ShowPrize
00206A66 08EE 0000 003E              		bset	#0,block_flags(a6)
00206A6C 4EF9 0020 40A8              		jmp	Object_Delete
00206A72                             		
00206A72                            @return4:
00206A72                            
00206A72 302E 0030                  		move.w	y_pos_coin(a6),d0
00206A76 322E 0036                  		move.w	y_pos_main(a6),d1
00206A7A 0441 0010                  		sub.w	#$10,d1
00206A7E B041                       		cmp.w	d1,d0
00206A80 6F00                       		ble.s	@return5
00206A82 4EF9 0020 40A8               		jmp	Object_Delete
00206A88                              		
00206A88                            @return5:
00206A88 2D46 002C                  		move.l	d6,y_coin_spd(a6)
00206A8C 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00206A90 4E75                       		rts
00206A92                            		
00206A92                            ; ------------------------------------------------
00206A92                            ; Trampoline
00206A92                            ; ------------------------------------------------
00206A92                            
00206A92                            @trampoline:
00206A92 062E 0001 003C             		add.b	#1,tmr_1(a6)
00206A98 0C2E 0010 003C             		cmp.b	#16,tmr_1(a6)
00206A9E 6C00                       		bge.s	@finish
00206AA0                            		
00206AA0 223C 0000 0005             		move.l	#$0005,d1
00206AA6 4841                       		swap	d1
00206AA8 323C C594                  		move.w	#vramJmpBlock,d1
00206AAC 102E 003D                  		move.b	tmr_1+1(a6),d0
00206AB0 0600 0001                  		add.b	#1,d0
00206AB4 0240 0002                  		and.w	#%10,d0
00206AB8 E348                       		lsl.w	#1,d0
00206ABA D240                       		add.w	d0,d1
00206ABC 062E 0001 003D             		add.b	#1,tmr_1+1(a6)
00206AC2                            		
00206AC2 302E 0008                   		move.w	obj_x(a6),d0
00206AC6 4840                        		swap	d0
00206AC8 302E 000C                   		move.w	obj_y(a6),d0
00206ACC 6000 D54E                  		bra	Object_ExtSprite
00206AD0                            		
00206AD0                            @finish:
00206AD0 202E 0024                   		move.l	this_pos(a6),d0
00206AD4 6100 CE6A                  		bsr	Level_ShowPrize
00206AD8 4EF9 0020 40A8               		jmp	Object_Delete
00206ADE                              		
00206ADE                            ; =================================================================
00206ADE                            ; ------------------------------------------------
00206ADE                            ; Subs
00206ADE                            ; ------------------------------------------------
00206ADE                            
00206ADE                            		
00206ADE                            ; =================================================================
00206ADE                            		
00206ADE                            		
00206ADE                                		include	"engine/modes/level/data/objects/ball/code.asm" 
00206ADE                            ; =================================================================
00206ADE                            ; Object
00206ADE                            ; 
00206ADE                            ; A Ball
00206ADE                            ; =================================================================
00206ADE                            
00206ADE                            ; =================================================================
00206ADE                            ; ------------------------------------------------
00206ADE                            ; Variables
00206ADE                            ; ------------------------------------------------
00206ADE                            
00206ADE =000044B8                  varVramBall	equ	$4000|$4B8
00206ADE                            
00206ADE                            ; =================================================================
00206ADE                            ; ------------------------------------------------
00206ADE                            ; Code start
00206ADE                            ; ------------------------------------------------
00206ADE                            
00206ADE                            Obj_Ball:
00206ADE 7000                        		moveq	#0,d0
00206AE0 102E 001D                   		move.b	obj_index(a6),d0
00206AE4 D040                        		add.w	d0,d0
00206AE6 323B 0000                   		move.w	@Index(pc,d0.w),d1
00206AEA 4EBB 1000                   		jsr	@Index(pc,d1.w)
00206AEE 6100 D7E8                   		bsr	Object_OffCheck
00206AF2                             		
00206AF2 203C 44B8 0000             		move.l	#(varVramBall<<16),d0
00206AF8 102E 0020                  		move.b	obj_frame(a6),d0
00206AFC 223C 0000 0000             		move.l	#map_Ball,d1
00206B02 6000 D496                   		bra	Object_Show
00206B06                             		
00206B06                            ; ------------------------------------------------
00206B06                            
00206B06                            @Index:
00206B06 0000                       		dc.w	@Init-@Index
00206B08 0000                       		dc.w	@Main-@Index
00206B0A                            		even
00206B0A                            		
00206B0A                            ; =================================================================
00206B0A                            ; ------------------------------------------------
00206B0A                            ; Index $00: Init
00206B0A                            ; ------------------------------------------------
00206B0A                            
00206B0A                            @Init:
00206B0A 062E 0001 001D             		add.b	#1,obj_index(a6)
00206B10 2D7C 0101 0101 0004        		move.l	#$01010101,obj_size(a6)
00206B18 2D7C 0000 6000 0014        		move.l	#$6000,obj_y_spd(a6)
00206B20 422E 0020                  		clr.b	obj_frame(a6)
00206B24 422E 001C                  		clr.b	obj_anim_spd(a6)
00206B28 2D7C FFFE 8000 0010        		move.l	#-$18000,obj_x_spd(a6)
00206B30                            		
00206B30                            ; =================================================================
00206B30                            ; ------------------------------------------------                  
00206B30                            ; Index $01: Main
00206B30                            ; ------------------------------------------------
00206B30                            
00206B30                            @Main:
00206B30                            ; 		bsr.s	@move_ball
00206B30                            ; 		bra	@check_touch
00206B30                            		
00206B30                            ; =================================================================
00206B30                            ; ------------------------------------------------
00206B30                            ; Subs
00206B30                            ; ------------------------------------------------
00206B30                            
00206B30                            @move_ball:
00206B30 2C2E 0010                   		move.l	obj_x_spd(a6),d6
00206B34 2E2E 0014                   		move.l	obj_y_spd(a6),d7
00206B38 DDAE 0008                   		add.l	d6,obj_x(a6)
00206B3C DFAE 000C                   		add.l	d7,obj_y(a6)
00206B40                             		
00206B40 4AAE 0008                   		tst.l	obj_x(a6)
00206B44 6A00                        		bpl.s	@fine_x
00206B46 42AE 0008                   		clr.l	obj_x(a6)
00206B4A 2C3C 0002 0000             		move.l	#$20000,d6
00206B50                            @fine_x:
00206B50 7000                       		moveq	#0,d0
00206B52 3039 FFFF BC30             		move.w	(RAM_LvlPlanes+lvl_size_x),d0
00206B58 E948                       		lsl.w	#4,d0
00206B5A 4840                       		swap	d0
00206B5C 222E 0008                  		move.l	obj_x(a6),d1
00206B60 B280                       		cmp.l	d0,d1
00206B62 6D00                       		blt.s	@fine_x_r
00206B64 2C3C FFFE 0000             		move.l	#-$20000,d6
00206B6A                            @fine_x_r:
00206B6A                            	
00206B6A                            ; ----------------------------------
00206B6A                            
00206B6A 0687 0000 4000              		add.l	#$4000,d7
00206B70 0C87 0008 0000              		cmp.l	#$80000,d7
00206B76 6D00                        		blt.s	@low_y
00206B78 2E3C 0008 0000              		move.l	#$80000,d7
00206B7E                            @low_y:
00206B7E                             		
00206B7E 4A87                        		tst.l	d7
00206B80 6A00                        		bpl.s	@Freec
00206B82 6100 DA0C                  		bsr	object_FindPrz_Ceiling
00206B86 4A00                       		tst.b	d0
00206B88 6600                       		bne.s	@FndCeilPrz
00206B8A 6100 DDF8                  		bsr	object_FindPrz_CeilingSides
00206B8E 4A00                       		tst.b	d0
00206B90 6600                       		bne.s	@FndCeilPrz
00206B92 2001                       		move.l	d1,d0
00206B94 4A00                       		tst.b	d0
00206B96 6600                       		bne.s	@FndCeilPrz
00206B98                            		
00206B98 6100 DA02                  		bsr	object_FindCol_Ceiling
00206B9C 0800 0006                  		btst	#6,d0
00206BA0 6600                       		bne.s	@Freec
00206BA2 4A00                       		tst.b	d0
00206BA4 6600                       		bne.s	@FoundCeiling
00206BA6 6100 DDE8                  		bsr	object_FindCol_CeilingSides
00206BAA 4A00                       		tst.b	d0
00206BAC 6600                       		bne.s	@FoundCeiling
00206BAE 2001                       		move.l	d1,d0
00206BB0 4A00                       		tst.b	d0
00206BB2 6600                       		bne.s	@FoundCeiling
00206BB4 6000                       		bra.s	@Freec
00206BB6                            @FndCeilPrz:
00206BB6 0800 0007                  		btst	#7,d0
00206BBA 6600                       		bne.s	@Freec
00206BBC                            @FoundCeiling:
00206BBC 0800 0006                  		btst	#6,d0
00206BC0 6600                       		bne.s	@Freec
00206BC2                            		
00206BC2 6100 DFAE                  		bsr	object_SetCol_Ceiling
00206BC6                            		
00206BC6                            ; ----------------------------------
00206BC6                            
00206BC6                            @Freec:	
00206BC6 4A87                        		tst.l	d7
00206BC8 6B00                        		bmi.s	@Free
00206BCA                             	
00206BCA 6100 D88A                  		bsr	object_FindPrz_Floor
00206BCE 0800 0007                  		btst	#7,d0
00206BD2 6600                       		bne.s	@Free
00206BD4 0800 0006                  		btst	#6,d0
00206BD8 6600                       		bne.s	@Free
00206BDA 4A00                       		tst.b	d0
00206BDC 6600                       		bne.s	@przflr
00206BDE                            		
00206BDE 6100 D882                  		bsr	object_FindCol_Floor
00206BE2 0800 0006                  		btst	#6,d0
00206BE6 6600                       		bne.s	@Free
00206BE8 4A00                       		tst.b	d0
00206BEA 6700                       		beq.s	@Free
00206BEC                            
00206BEC                            @przflr:
00206BEC 6100 DF0A                  		bsr	object_SetCol_Floor
00206BF0 2E3C FFFA 0000              		move.l	#-$60000,d7
00206BF6                            
00206BF6 203C 0000 0000               		move.l	#SndSfx_PING,d0
00206BFC 7202                         		moveq 	#2,d1
00206BFE 7401                         		moveq	#1,d2
00206C00 6100 9B0E                    		bsr	Audio_Track_play
00206C04                            @Free:
00206C04                            
00206C04                            ; ----------------------------------------
00206C04                            
00206C04                            ;  		bsr	object_FindPrz_WallSides
00206C04                            ; ;  		tst.l	d6
00206C04                            ; ;  		bmi.s	@to_left
00206C04                            ; 		btst	#7,d0
00206C04                            ; 		bne.s	@FreeWall2
00206C04                            ; 		btst	#6,d0
00206C04                            ; 		bne.s	@FreeWall2
00206C04                            ; 		tst.b	d0
00206C04                            ; 		bne.s	@FoundW
00206C04                            ; 		bra.s	@FreeWall2
00206C04                            ; @to_left:
00206C04                            ; ; 		tst.l	d6
00206C04                            ; ; 		bpl.s	@FreeWall2
00206C04                            ; 		btst	#7,d1
00206C04                            ; 		bne.s	@FreeWall2
00206C04                            ; 		btst	#6,d1
00206C04                            ; 		bne.s	@FreeWall2
00206C04                            ; 		tst.b	d1
00206C04                            ; 		bne.s	@FoundW
00206C04                            ; 		
00206C04                            ; @FreeWall2:
00206C04 6100 DB1A                  		bsr	object_FindCol_WallSides
00206C08 4A86                       		tst.l	d6
00206C0A 6B00                       		bmi.s	@dontlft
00206C0C 4A00                        		tst.b	d0
00206C0E 6600                        		bne.s	@FoundW
00206C10                            @dontlft:
00206C10 4A86                       		tst.l	d6
00206C12 6A00                       		bpl.s	@FreeWall
00206C14 2001                       		move.l	d1,d0
00206C16 4A00                         		tst.b	d0
00206C18 6600                        		bne.s	@FoundW
00206C1A 6000                       		bra.s	@FreeWall
00206C1C                            
00206C1C                            @FoundW:
00206C1C 0C00 0002                  		cmp.b	#2,d0
00206C20 6C00                       		bge.s	@FreeWall
00206C22                            ; 		bsr	object_SetCol_Wall
00206C22 4486                       		neg.l	d6
00206C24 086E 0000 001E             		bchg	#bitobj_flipH,obj_status(a6)
00206C2A                            @FreeWall:
00206C2A                            
00206C2A                            ; ------------------------------------
00206C2A                            
00206C2A 042E 0001 001C              		sub.b	#1,obj_anim_spd(a6)
00206C30 6A00                        		bpl.s	@plusanim
00206C32 1D7C 0007 001C              		move.b	#7,obj_anim_spd(a6)
00206C38 062E 0001 0020               		add.b	#1,obj_frame(a6)
00206C3E 022E 0003 0020              		and.b	#%11,obj_frame(a6)
00206C44                            @plusanim:
00206C44                            
00206C44                            ; ------------------------------------
00206C44                            
00206C44 2D46 0010                   		move.l	d6,obj_x_spd(a6)
00206C48 2D47 0014                   		move.l	d7,obj_y_spd(a6)
00206C4C                            ; 		rts
00206C4C                            		
00206C4C                            ; =================================================================
00206C4C                            ; ----------------------------------
00206C4C                            ; Check if touched
00206C4C                            ; ----------------------------------
00206C4C                            
00206C4C                            @check_touch:
00206C4C 6100 DF6E                  		bsr	objTouch_Top
00206C50 4A00                       		tst.b	d0
00206C52 6600                       		bne.s	@touch_flag
00206C54 6100 E004                  		bsr	objTouch_Bottom
00206C58 4A00                       		tst.b	d0
00206C5A 6600                       		bne.s	@touch_flag
00206C5C                            		
00206C5C 6100 E09C                  		bsr	objTouch_Sides
00206C60 4A00                       		tst.b	d0
00206C62 6600                       		bne.s	@touch_flag
00206C64 4840                       		swap	d0
00206C66 4A00                       		tst.b	d0
00206C68 6600                       		bne.s	@touch_flag
00206C6A 4E75                       		rts
00206C6C                            		
00206C6C                            ; -----------------------------------
00206C6C                            
00206C6C                            @touch_flag:
00206C6C 6100 E270                  		bsr	objPlyrHurtKill
00206C70 6700                       		beq.s	@return
00206C72 323C 44B8                     		move.w	#varVramBall,d1
00206C76 142E 0020                   		move.b	obj_frame(a6),d2
00206C7A 203C 0000 0000             		move.l	#map_Ball,d0
00206C80 260C                       		move.l	a4,d3
00206C82 6100 E602                  		bsr	objAction_SetStomp
00206C86 6000 D630                  		bra	Object_IsGone
00206C8A                            @return:
00206C8A 4E75                       		rts
00206C8A 4E75                       		rts
00206C8C                               		include	"engine/modes/level/data/objects/endflag/code.asm"
00206C8C                            ; =================================================================
00206C8C                            ; Object
00206C8C                            ; 
00206C8C                            ; Level end flag
00206C8C                            ; =================================================================
00206C8C                            
00206C8C                            ; =================================================================
00206C8C                            ; ------------------------------------------------
00206C8C                            ; Variables
00206C8C                            ; ------------------------------------------------
00206C8C                            
00206C8C =00006540                  varEndFlagVRAM	equ	$6000|$540
00206C8C                            
00206C8C                            ; =================================================================
00206C8C                            ; ------------------------------------------------
00206C8C                            ; Code start
00206C8C                            ; ------------------------------------------------
00206C8C                            
00206C8C                            Obj_EndFlag:
00206C8C 7000                        		moveq	#0,d0
00206C8E 102E 001D                   		move.b	obj_index(a6),d0
00206C92 D040                        		add.w	d0,d0
00206C94 323B 0000                   		move.w	@Index(pc,d0.w),d1
00206C98 4EBB 1000                   		jsr	@Index(pc,d1.w)
00206C9C                            		
00206C9C 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00206CA2 302E 0008                  		move.w	obj_x(a6),d0
00206CA6 0440 0140                  		sub.w	#320,d0
00206CAA 322C 0008                  		move.w	obj_x(a4),d1
00206CAE B240                       		cmp.w	d0,d1
00206CB0 6D00                       		blt.s	@im_gone
00206CB2                            		
00206CB2 203C 6540 0000                 		move.l	#(varEndFlagVRAM<<16),d0
00206CB8 102E 0020                     		move.b	obj_frame(a6),d0	
00206CBC 223C 0000 0000              		move.l	#mapObj_EndFlag,d1
00206CC2 6100 D2D6                    		bsr	Object_Show
00206CC6                             		
00206CC6 203C 6540 0000                		move.l	#(varEndFlagVRAM<<16),d0
00206CCC 102E 0020                     		move.b	obj_frame(a6),d0
00206CD0 223C 0000 0000             		move.l	#dplcObj_EndFlag,d1
00206CD6 243C 0000 0000             		move.l	#artObj_EndFlag,d2
00206CDC 6000 D262                  		bra	Object_DPLC
00206CE0                            		
00206CE0                            @im_gone:
00206CE0 4E75                       		rts
00206CE2                            		
00206CE2                            ; ------------------------------------------------
00206CE2                            
00206CE2                            @Index:
00206CE2 0000                       		dc.w	@Init-@Index
00206CE4 0000                       		dc.w	@Main-@Index
00206CE6                            		even
00206CE6                            		
00206CE6                            ; =================================================================
00206CE6                            ; ------------------------------------------------
00206CE6                            ; Index $00: Init
00206CE6                            ; ------------------------------------------------
00206CE6                            
00206CE6                            @Init:
00206CE6 062E 0001 001D             		add.b	#1,obj_index(a6)
00206CEC 2D7C 0202 0303 0004        		move.l	#$02020303,obj_size(a6)
00206CF4 4E75                       		rts
00206CF6                            		
00206CF6                            ; =================================================================
00206CF6                            ; ------------------------------------------------                  
00206CF6                            ; Index $01: Main
00206CF6                            ; ------------------------------------------------
00206CF6                            
00206CF6                            @Main:
00206CF6 042E 0001 001C             		sub.b	#1,obj_anim_spd(a6)
00206CFC 6A00                       		bpl.s	@plus
00206CFE 1D7C 0006 001C             		move.b	#6,obj_anim_spd(a6)
00206D04 062E 0001 0020             		add.b	#1,obj_frame(a6)
00206D0A 0C2E 0003 0020             		cmp.b	#3,obj_frame(a6)
00206D10 6D00                       		blt.s	@plus
00206D12 422E 0020                  		clr.b	obj_frame(a6)
00206D16                            @plus:
00206D16 6100 DE8A                  		bsr	objTouch
00206D1A 4A00                       		tst.b	d0
00206D1C 6700                       		beq.s	@return
00206D1E                            
00206D1E 0679 0001 FFFF DC06          		add.w	#1,(RAM_CurrLevel)
00206D26 13FC 0001 FFFF DE4C        		move.b	#1,(RAM_ModeReset)
00206D2E                            @return:
00206D2E 4E75                       		rts
00206D30                            		
00206D30                            ; =================================================================
00206D30                            		
00206D30                            		
00206D30                                		include	"engine/modes/level/data/objects/actionscript/code.asm"  
00206D30                            ; =================================================================
00206D30                            ; Object (SPECIAL)
00206D30                            ; 
00206D30                            ; Action script
00206D30                            ; =================================================================
00206D30                            
00206D30                            ; =================================================================
00206D30                            ; ------------------------------------------------
00206D30                            ; Variables
00206D30                            ; ------------------------------------------------
00206D30                            
00206D30                            		rsset obj_ram
00206D30 =00000024                  gotMaps		rs.l 1
00206D30 =00000028                  gotVram		rs.w 1
00206D30 =0000002A                  gotFrame	rs.w 1 		;its a byte
00206D30 =0000002C                  gotWho		rs.l 1
00206D30                            
00206D30                            ; =================================================================
00206D30                            ; ------------------------------------------------
00206D30                            ; Code start
00206D30                            ; ------------------------------------------------
00206D30                            
00206D30                            obj_actionscript:
00206D30 7000                       		moveq	#0,d0
00206D32 102E 001D                  		move.b	obj_index(a6),d0
00206D36 D040                       		add.w	d0,d0
00206D38 323B 0000                  		move.w	@list(pc,d0.w),d1
00206D3C 4EFB 1000                  		jmp	@list(pc,d1.w)
00206D40                            	
00206D40                            ; ------------------------------------------------
00206D40                            
00206D40                            @list:
00206D40 0000                       		dc.w @killobj_init-@list
00206D42 0000                       		dc.w @killobj_main-@list
00206D44                            
00206D44 0000                       		dc.w 0
00206D46 0000                       		dc.w 0
00206D48                            		
00206D48                            ; ------------------------------------------------
00206D48                            ; Action: kill object
00206D48                            ; ------------------------------------------------
00206D48                            
00206D48                            @killobj_init:
00206D48 002E 0001 001D             		or.b	#1,obj_index(a6)
00206D4E 08AE 0003 001E             		bclr	#bitobj_hurt,obj_status(a6)
00206D54 08AE 0006 001E             		bclr	#bitobj_hit,obj_status(a6)
00206D5A                            		
00206D5A 08EE 0001 001E             		bset	#bitobj_FlipV,obj_status(a6)
00206D60 2D7C FFFC 0000 0014        		move.l	#-$40000,obj_y_spd(a6)
00206D68                            
00206D68                            		;Read player
00206D68 202E 002C                  		move.l	gotWho(a6),d0
00206D6C 0C80 FFFF C040             		cmp.l	#RAM_ObjBuffer,d0
00206D72 6600                       		bne.s	@notplayer
00206D74 49F9 FFFF C040             		lea	(RAM_ObjBuffer),a4
00206D7A 297C FFFD 0000 0014        		move.l	#-$30000,obj_y_spd(a4)
00206D82 197C 0002 001A              		move.b	#varPlyAniJump,obj_anim_id(a4)
00206D88 08EC 0002 001E             		bset 	#bitobj_air,obj_status(a4)
00206D8E                            @notplayer:
00206D8E 203C 0000 0000               		move.l	#SndSfx_HitEnemy,d0
00206D94 7202                         		moveq 	#2,d1
00206D96 7401                         		moveq	#1,d2
00206D98 6100 9976                    		bsr	Audio_Track_play
00206D9C                              		
00206D9C                            ; --------------------------
00206D9C                            
00206D9C                            @killobj_main:
00206D9C 2C2E 0010                  		move.l	obj_x_spd(a6),d6
00206DA0 2E2E 0014                  		move.l	obj_y_spd(a6),d7
00206DA4 0687 0000 4000             		add.l	#$4000,d7
00206DAA DDAE 0008                  		add.l	d6,obj_x(a6)
00206DAE DFAE 000C                  		add.l	d7,obj_y(a6)
00206DB2 2D46 0010                  		move.l	d6,obj_x_spd(a6)
00206DB6 2D47 0014                  		move.l	d7,obj_y_spd(a6)
00206DBA                            		
00206DBA 6100 D51C                   		bsr	Object_OffCheck
00206DBE 7000                       		moveq	#0,d0
00206DC0 302E 0028                      		move.w	gotVram(a6),d0
00206DC4 4840                           		swap	d0
00206DC6 102E 002A                   		move.b	gotFrame(a6),d0
00206DCA 222E 0024                  		move.l	gotMaps(a6),d1
00206DCE 6000 D1CA                   		bra	Object_Show
00206DD2                            		
00206DD2                            ; ------------------------------------------------
00206DD2                            ; Action: hurt the enemy
00206DD2                            ; ------------------------------------------------
00206DD2                            
00206DD2                            ; =================================================================
00206DD2                            ; =================================================================
00206DD2                                		include	"engine/modes/level/data/objects/hudinfo/code.asm"  
00206DD2                            ; =================================================================
00206DD2                            ; Object
00206DD2                            ; 
00206DD2                            ; Level end flag
00206DD2                            ; =================================================================
00206DD2                            
00206DD2                            ; =================================================================
00206DD2                            ; ------------------------------------------------
00206DD2                            ; Variables
00206DD2                            ; ------------------------------------------------
00206DD2                            
00206DD2 =0000C580                  varHudBase	equ	$C000|$580
00206DD2 =0000C5A8                  varVramHudCoinR	equ	$C000|$5A8
00206DD2 =0000C5AC                  varVramHudCoinB	equ	$C000|$5AC
00206DD2 =0000C5B0                  varHudLife	equ	$C000|$5B0
00206DD2 =0000C5BC                  varHudLifeBar	equ	$C000|$5BC
00206DD2 =0000C5C0                  varHudDigits	equ	$C000|$5C0
00206DD2                            
00206DD2                            		rsset obj_ram
00206DD2 =00000024                  ramLastCoins	rs.w	1
00206DD2 =00000026                  ramDecCoins 	rs.w	1
00206DD2 =00000028                  ramLastLives	rs.w	1
00206DD2 =0000002A                  ramDecLives 	rs.w	1
00206DD2                            
00206DD2                            ; =================================================================
00206DD2                            ; ------------------------------------------------
00206DD2                            ; Code start
00206DD2                            ; ------------------------------------------------
00206DD2                            
00206DD2                            obj_HudInfo:
00206DD2 7000                        		moveq	#0,d0
00206DD4 102E 001D                   		move.b	obj_index(a6),d0
00206DD8 D040                        		add.w	d0,d0
00206DDA 323B 0000                   		move.w	@Index(pc,d0.w),d1
00206DDE 4EFB 1000                   		jmp	@Index(pc,d1.w)
00206DE2                             		
00206DE2                            ; ------------------------------------------------
00206DE2                            
00206DE2                            @Index:
00206DE2 0000                       		dc.w	@Init-@Index
00206DE4 0000                       		dc.w	@Main-@Index
00206DE6                            		even
00206DE6                            		
00206DE6                            ; =================================================================
00206DE6                            ; ------------------------------------------------
00206DE6                            ; Index $00: Init
00206DE6                            ; ------------------------------------------------
00206DE6                            
00206DE6                            @Init:
00206DE6 062E 0001 001D             		add.b	#1,obj_index(a6)
00206DEC 08EE 0007 001E              		bset	#bitobj_stay,obj_status(a6)
00206DF2 3D7C 0000 0024             		move.w	#0,ramLastCoins(a6)
00206DF8                            		
00206DF8 3D7C 0001 0024             		move.w	#1,ramLastCoins(a6)
00206DFE 3D7C 0001 0028             		move.w	#1,ramLastLives(a6)
00206E04                            		
00206E04                            ; =================================================================
00206E04                            ; ------------------------------------------------                  
00206E04                            ; Index $01: Main
00206E04                            ; ------------------------------------------------
00206E04                            
00206E04                            @Main:
00206E04 203C 0008 0008             		move.l	#8<<16|8,d0
00206E0A 223C 0005 C5A8             		move.l	#5<<16|varVramHudCoinR,d1
00206E10 6100 D20A                  		bsr	Object_ExtSprite
00206E14 203C 0008 0018             		move.l	#8<<16|24,d0
00206E1A 223C 0005 C5B0             		move.l	#5<<16|varHudLife,d1
00206E20 6100 D1FA                  		bsr	Object_ExtSprite
00206E24                            		
00206E24                            
00206E24 203C 0008 0030             		move.l	#8<<16|48,d0
00206E2A 223C 0000 C5BC             		move.l	#varHudLifeBar,d1
00206E30 3439 FFFF DC04             		move.w	(RAM_P1_Hits),d2
00206E36 0C42 0008                  		cmp.w	#8,d2
00206E3A 6D00                       		blt.s	@lower
00206E3C 343C 0008                  		move.w	#8,d2
00206E40                            @lower:
00206E40 4A42                       		tst.w	d2
00206E42 6700                       		beq.s	@dead
00206E44 0442 0001                  		sub.w	#1,d2
00206E48 4A42                       		tst.w	d2
00206E4A 6600                       		bne.s	@addbox
00206E4C 0641 0001                  		add.w	#1,d1
00206E50                            @addbox:
00206E50 6100 D1CA                  		bsr	Object_ExtSprite
00206E54 0680 0008 0000             		add.l	#$80000,d0
00206E5A 51CA FFF4                  		dbf	d2,@addbox
00206E5E                            @dead:
00206E5E                            
00206E5E 7400                       		moveq	#0,d2
00206E60 3439 FFFF DC02             		move.w	(RAM_P1_Coins),d2
00206E66 B46E 0024                  		cmp.w	ramLastCoins(a6),d2
00206E6A 6700                       		beq.s	@dontupdc
00206E6C 3D42 0024                  		move.w	d2,ramLastCoins(a6)
00206E70 6100 BD60                  		bsr	HexToDec
00206E74 3D42 0026                  		move.w	d2,ramDecCoins(a6)
00206E78                            @dontupdc:
00206E78 203C 0018 0010             		move.l	#24<<16|16,d0
00206E7E 342E 0026                  		move.w	ramDecCoins(a6),d2
00206E82 6100 0000                  		bsr	@showsprval
00206E86                            		
00206E86 7400                       		moveq	#0,d2
00206E88 3439 FFFF DC00             		move.w	(RAM_P1_Lives),d2
00206E8E B46E 0028                  		cmp.w	ramLastLives(a6),d2
00206E92 6700                       		beq.s	@dontupdlvs
00206E94 3D42 0028                  		move.w	d2,ramLastLives(a6)
00206E98 6100 BD38                  		bsr	HexToDec
00206E9C 3D42 002A                  		move.w	d2,ramDecLives(a6)
00206EA0                            @dontupdlvs:
00206EA0 203C 0018 0020             		move.l	#24<<16|32,d0
00206EA6 342E 002A                  		move.w	ramDecLives(a6),d2
00206EAA                            		
00206EAA                            ; -----------------------------
00206EAA                            
00206EAA                            @showsprval:
00206EAA 7601                       		moveq	#1,d3
00206EAC E89A                       		ror.l	#4,d2
00206EAE                            @nxtcoinnum:
00206EAE 7200                       		moveq	#0,d1
00206EB0 1202                       		move.b	d2,d1
00206EB2 0201 000F                  		and.b	#$F,d1
00206EB6 0641 C5C0                  		add.w	#varHudDigits,d1
00206EBA E99A                       		rol.l	#4,d2
00206EBC 0680 0008 0000             		add.l	#$00080000,d0
00206EC2 6100 D158                  		bsr	Object_ExtSprite	
00206EC6 51CB FFE6                  		dbf	d3,@nxtcoinnum
00206ECA 4E75                       		rts
00206ECC                            		
00206ECC                            ; =================================================================
00206ECC                            		
00206ECC                            		
00206ECC                                		
00206ECC                                		
00206ECC                            		
00206ECC                            ; ====================================================================
00206ECC                            ; --------------------------------------------
00206ECC                            ; VBlank
00206ECC                            ; --------------------------------------------
00206ECC                            
00206ECC                            ; ====================================================================		
00206ECC                            ; --------------------------------------------
00206ECC                            ; HBlank
00206ECC                            ; --------------------------------------------
00206ECC                            		
00206ECC                            ; ====================================================================
00206ECC                            ; ====================================================================
00206ECC                            		
00206ECC                            ; ====================================================================		
00206ECC                            ; --------------------------------------------
00206ECC                            ; Data
00206ECC                            ; --------------------------------------------
00206ECC                            
00206ECC                            		include	"engine/modes/level/data.asm"
00206ECC                            ; =================================================================
00206ECC                            ; ------------------------------------------------
00206ECC                            ; DMA art
00206ECC                            ; ------------------------------------------------
00206ECC                            
00206ECC                            		cnop 0,$4000
00208000                            Art_Player:	incbin	"engine/modes/level/data/objects/player/data/art.bin"
002098C0                            		even
002098C0                            artObj_EndFlag:	incbin	"engine/modes/level/data/objects/endflag/data/art.bin"
0020A780                             		even
0020A780                            Art_AnimCoin:	incbin	"engine/modes/level/data/layouts/coin_art.bin"
0020AD80                            		even
0020AD80                            
0020AD80                            ; =================================================================
0020AD80                            ; ------------------------------------------------
0020AD80                            ; Non-DMA art
0020AD80                            ; ------------------------------------------------
0020AD80                            	
0020AD80                            ; ---------------------------
0020AD80                            ; Objects
0020AD80                            ; ---------------------------
0020AD80                            
0020AD80                            		cnop 0,$800
0020B000                            Art_dadou:	incbin	"engine/modes/level/data/objects/dadou/data/art.bin"
0020C100                            art_dadou_end:
0020C100                             		even
0020C100                            Art_pikudo:	incbin	"engine/modes/level/data/objects/pikudo/data/art.bin"
0020C9A0                            art_pikudo_end:
0020C9A0                             		even
0020C9A0                             		
0020C9A0                            artObj_Platform:
0020C9A0                            		incbin	"engine/modes/level/data/objects/platform/data/art.bin"
0020CA60                            artObj_Platform_e:
0020CA60                             		even
0020CA60                            artObj_Ball:	incbin	"engine/modes/level/data/objects/ball/data/art.bin"
0020CD60                            artObj_Ball_e:	even
0020CD60                             		
0020CD60                            ; =================================================================
0020CD60                            ; ------------------------------------------------
0020CD60                            ; Other stuff
0020CD60                            ; ------------------------------------------------
0020CD60                            
0020CD60                            ; ---------------------------
0020CD60                            ; Player
0020CD60                            ; ---------------------------
0020CD60                            
0020CD60                            Map_Player:	include	"engine/modes/level/data/objects/player/data/map.asm"
0020CD60                            @mappings:
0020CD60 0000                       		dc.w @frame_0-@mappings
0020CD62 0000                       		dc.w @frame_1-@mappings
0020CD64 0000                       		dc.w @frame_2-@mappings
0020CD66 0000                       		dc.w @frame_3-@mappings
0020CD68 0000                       		dc.w @frame_4-@mappings
0020CD6A 0000                       		dc.w @frame_5-@mappings
0020CD6C 0000                       		dc.w @frame_6-@mappings
0020CD6E 0000                       		dc.w @frame_7-@mappings
0020CD70 0000                       		dc.w @frame_8-@mappings
0020CD72 0000                       		dc.w @frame_9-@mappings
0020CD74 0000                       		dc.w @frame_10-@mappings
0020CD76 0000                       		dc.w @frame_11-@mappings
0020CD78 0000                       		dc.w @frame_12-@mappings
0020CD7A 0000                       		dc.w @frame_13-@mappings
0020CD7C 0000                       		dc.w @frame_14-@mappings
0020CD7E 0000                       		dc.w @frame_15-@mappings
0020CD80 0000                       		dc.w @frame_16-@mappings
0020CD82                            @frame_0:
0020CD82 03                         		dc.b $3
0020CD83                            
0020CD83 000C 0000 F0               		dc.b $0,$C,$0,$0,$F0
0020CD88 F005 0004 F8               		dc.b $F0,$5,$0,$4,$F8
0020CD8D 0804 0008 F8               		dc.b $8,$4,$0,$8,$F8
0020CD92                            		even
0020CD92                            @frame_1:
0020CD92 03                         		dc.b $3
0020CD93                            
0020CD93 000C 0000 F0               		dc.b $0,$C,$0,$0,$F0
0020CD98 F005 0004 F8               		dc.b $F0,$5,$0,$4,$F8
0020CD9D 0804 0008 F8               		dc.b $8,$4,$0,$8,$F8
0020CDA2                            		even
0020CDA2                            @frame_2:
0020CDA2 04                         		dc.b $4
0020CDA3                            
0020CDA3 0009 0000 F0               		dc.b $0,$9,$0,$0,$F0
0020CDA8 F005 0006 F8               		dc.b $F0,$5,$0,$6,$F8
0020CDAD F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0020CDB2 0800 000B 08               		dc.b $8,$0,$0,$B,$8
0020CDB8 00                         		even
0020CDB8                            @frame_3:
0020CDB8 03                         		dc.b $3
0020CDB9                            
0020CDB9 F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0020CDBE F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0020CDC3 0800 0009 08               		dc.b $8,$0,$0,$9,$8
0020CDC8                            		even
0020CDC8                            @frame_4:
0020CDC8 02                         		dc.b $2
0020CDC9                            
0020CDC9 F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0020CDCE F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0020CDD4 00                         		even
0020CDD4                            @frame_5:
0020CDD4 03                         		dc.b $3
0020CDD5                            
0020CDD5 080C 0000 F0               		dc.b $8,$C,$0,$0,$F0
0020CDDA F006 0004 F8               		dc.b $F0,$6,$0,$4,$F8
0020CDDF F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0020CDE4                            		even
0020CDE4                            @frame_6:
0020CDE4 04                         		dc.b $4
0020CDE5                            
0020CDE5 0009 0000 F0               		dc.b $0,$9,$0,$0,$F0
0020CDEA F005 0006 F8               		dc.b $F0,$5,$0,$6,$F8
0020CDEF F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0020CDF4 0800 000B 08               		dc.b $8,$0,$0,$B,$8
0020CDFA 00                         		even
0020CDFA                            @frame_7:
0020CDFA 03                         		dc.b $3
0020CDFB                            
0020CDFB F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0020CE00 F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0020CE05 0800 0009 08               		dc.b $8,$0,$0,$9,$8
0020CE0A                            		even
0020CE0A                            @frame_8:
0020CE0A 02                         		dc.b $2
0020CE0B                            
0020CE0B F007 0000 F8               		dc.b $F0,$7,$0,$0,$F8
0020CE10 F800 0008 08               		dc.b $F8,$0,$0,$8,$8
0020CE16 00                         		even
0020CE16                            @frame_9:
0020CE16 03                         		dc.b $3
0020CE17                            
0020CE17 080C 0000 F0               		dc.b $8,$C,$0,$0,$F0
0020CE1C F006 0004 F8               		dc.b $F0,$6,$0,$4,$F8
0020CE21 F800 000A 08               		dc.b $F8,$0,$0,$A,$8
0020CE26                            		even
0020CE26                            @frame_10:
0020CE26 04                         		dc.b $4
0020CE27                            
0020CE27 F807 0000 F0               		dc.b $F8,$7,$0,$0,$F0
0020CE2C F008 0008 F8               		dc.b $F0,$8,$0,$8,$F8
0020CE31 F802 000B 00               		dc.b $F8,$2,$0,$B,$0
0020CE36 F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0020CE3C 00                         		even
0020CE3C                            @frame_11:
0020CE3C 04                         		dc.b $4
0020CE3D                            
0020CE3D F807 0000 F0               		dc.b $F8,$7,$0,$0,$F0
0020CE42 F008 0008 F8               		dc.b $F0,$8,$0,$8,$F8
0020CE47 F802 000B 00               		dc.b $F8,$2,$0,$B,$0
0020CE4C F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0020CE52 00                         		even
0020CE52                            @frame_12:
0020CE52 03                         		dc.b $3
0020CE53                            
0020CE53 F008 0000 F0               		dc.b $F0,$8,$0,$0,$F0
0020CE58 F803 0003 F8               		dc.b $F8,$3,$0,$3,$F8
0020CE5D F802 0007 00               		dc.b $F8,$2,$0,$7,$0
0020CE62                            		even
0020CE62                            @frame_13:
0020CE62 04                         		dc.b $4
0020CE63                            
0020CE63 F009 0000 F0               		dc.b $F0,$9,$0,$0,$F0
0020CE68 0002 0006 F8               		dc.b $0,$2,$0,$6,$F8
0020CE6D 0001 0009 00               		dc.b $0,$1,$0,$9,$0
0020CE72 F800 000B 08               		dc.b $F8,$0,$0,$B,$8
0020CE78 00                         		even
0020CE78                            @frame_14:
0020CE78 03                         		dc.b $3
0020CE79                            
0020CE79 F00D 0000 F0               		dc.b $F0,$D,$0,$0,$F0
0020CE7E 0005 0008 F8               		dc.b $0,$5,$0,$8,$F8
0020CE83 1000 000C 00               		dc.b $10,$0,$0,$C,$0
0020CE88                            		even
0020CE88                            @frame_15:
0020CE88 03                         		dc.b $3
0020CE89                            
0020CE89 F808 0000 F0               		dc.b $F8,$8,$0,$0,$F0
0020CE8E F008 0003 F8               		dc.b $F0,$8,$0,$3,$F8
0020CE93 0006 0006 F8               		dc.b $0,$6,$0,$6,$F8
0020CE98                            		even
0020CE98                            @frame_16:
0020CE98 05                         		dc.b $5
0020CE99                            
0020CE99 F80C 0000 E8               		dc.b $F8,$C,$0,$0,$E8
0020CE9E 000D 0004 F0               		dc.b $0,$D,$0,$4,$F0
0020CEA3 1000 000C 00               		dc.b $10,$0,$0,$C,$0
0020CEA8 F001 000D 08               		dc.b $F0,$1,$0,$D,$8
0020CEAD F801 000F 10               		dc.b $F8,$1,$0,$F,$10
0020CEB2                            		even
0020CEB2                            		even
0020CEB2                            		even
0020CEB2                            DPLC_Player:	include	"engine/modes/level/data/objects/player/data/plc.asm"
0020CEB2                            @dplc:
0020CEB2 0000                       		dc.w @frame_0-@dplc
0020CEB4 0000                       		dc.w @frame_1-@dplc
0020CEB6 0000                       		dc.w @frame_2-@dplc
0020CEB8 0000                       		dc.w @frame_3-@dplc
0020CEBA 0000                       		dc.w @frame_4-@dplc
0020CEBC 0000                       		dc.w @frame_5-@dplc
0020CEBE 0000                       		dc.w @frame_6-@dplc
0020CEC0 0000                       		dc.w @frame_7-@dplc
0020CEC2 0000                       		dc.w @frame_8-@dplc
0020CEC4 0000                       		dc.w @frame_9-@dplc
0020CEC6 0000                       		dc.w @frame_10-@dplc
0020CEC8 0000                       		dc.w @frame_11-@dplc
0020CECA 0000                       		dc.w @frame_12-@dplc
0020CECC 0000                       		dc.w @frame_13-@dplc
0020CECE 0000                       		dc.w @frame_14-@dplc
0020CED0 0000                       		dc.w @frame_15-@dplc
0020CED2 0000                       		dc.w @frame_16-@dplc
0020CED4                            @frame_0:
0020CED4 0003                       		dc.w $3
0020CED6                            
0020CED6 3000                       		dc.w $3000
0020CED8 3004                       		dc.w $3004
0020CEDA 1008                       		dc.w $1008
0020CEDC                            @frame_1:
0020CEDC 0003                       		dc.w $3
0020CEDE                            
0020CEDE 300A                       		dc.w $300A
0020CEE0 300E                       		dc.w $300E
0020CEE2 1012                       		dc.w $1012
0020CEE4                            @frame_2:
0020CEE4 0004                       		dc.w $4
0020CEE6                            
0020CEE6 5014                       		dc.w $5014
0020CEE8 301A                       		dc.w $301A
0020CEEA 001E                       		dc.w $1E
0020CEEC 001F                       		dc.w $1F
0020CEEE                            @frame_3:
0020CEEE 0003                       		dc.w $3
0020CEF0                            
0020CEF0 7020                       		dc.w $7020
0020CEF2 0028                       		dc.w $28
0020CEF4 0029                       		dc.w $29
0020CEF6                            @frame_4:
0020CEF6 0002                       		dc.w $2
0020CEF8                            
0020CEF8 702A                       		dc.w $702A
0020CEFA 0032                       		dc.w $32
0020CEFC                            @frame_5:
0020CEFC 0003                       		dc.w $3
0020CEFE                            
0020CEFE 3033                       		dc.w $3033
0020CF00 5037                       		dc.w $5037
0020CF02 003D                       		dc.w $3D
0020CF04                            @frame_6:
0020CF04 0004                       		dc.w $4
0020CF06                            
0020CF06 503E                       		dc.w $503E
0020CF08 3044                       		dc.w $3044
0020CF0A 0048                       		dc.w $48
0020CF0C 0049                       		dc.w $49
0020CF0E                            @frame_7:
0020CF0E 0003                       		dc.w $3
0020CF10                            
0020CF10 704A                       		dc.w $704A
0020CF12 0052                       		dc.w $52
0020CF14 0053                       		dc.w $53
0020CF16                            @frame_8:
0020CF16 0002                       		dc.w $2
0020CF18                            
0020CF18 7054                       		dc.w $7054
0020CF1A 005C                       		dc.w $5C
0020CF1C                            @frame_9:
0020CF1C 0003                       		dc.w $3
0020CF1E                            
0020CF1E 305D                       		dc.w $305D
0020CF20 5061                       		dc.w $5061
0020CF22 0067                       		dc.w $67
0020CF24                            @frame_10:
0020CF24 0004                       		dc.w $4
0020CF26                            
0020CF26 7068                       		dc.w $7068
0020CF28 2070                       		dc.w $2070
0020CF2A 2073                       		dc.w $2073
0020CF2C 0076                       		dc.w $76
0020CF2E                            @frame_11:
0020CF2E 0004                       		dc.w $4
0020CF30                            
0020CF30 7077                       		dc.w $7077
0020CF32 207F                       		dc.w $207F
0020CF34 2082                       		dc.w $2082
0020CF36 0085                       		dc.w $85
0020CF38                            @frame_12:
0020CF38 0003                       		dc.w $3
0020CF3A                            
0020CF3A 2086                       		dc.w $2086
0020CF3C 3089                       		dc.w $3089
0020CF3E 208D                       		dc.w $208D
0020CF40                            @frame_13:
0020CF40 0004                       		dc.w $4
0020CF42                            
0020CF42 5090                       		dc.w $5090
0020CF44 2096                       		dc.w $2096
0020CF46 1099                       		dc.w $1099
0020CF48 009B                       		dc.w $9B
0020CF4A                            @frame_14:
0020CF4A 0003                       		dc.w $3
0020CF4C                            
0020CF4C 709C                       		dc.w $709C
0020CF4E 30A4                       		dc.w $30A4
0020CF50 00A8                       		dc.w $A8
0020CF52                            @frame_15:
0020CF52 0003                       		dc.w $3
0020CF54                            
0020CF54 20A9                       		dc.w $20A9
0020CF56 20AC                       		dc.w $20AC
0020CF58 50AF                       		dc.w $50AF
0020CF5A                            @frame_16:
0020CF5A 0005                       		dc.w $5
0020CF5C                            
0020CF5C 30B5                       		dc.w $30B5
0020CF5E 70B9                       		dc.w $70B9
0020CF60 00C1                       		dc.w $C1
0020CF62 10C2                       		dc.w $10C2
0020CF64 10C4                       		dc.w $10C4
0020CF64 10C4                       		dc.w $10C4
0020CF66                            		even
0020CF66                            Pal_Player:	incbin	"engine/modes/level/data/objects/player/data/pal.bin"
0020CF86                            Pal_Player_End:
0020CF86                            		even
0020CF86                            
0020CF86                            ; ---------------------------
0020CF86                            ; Objects
0020CF86                            ; ---------------------------
0020CF86                            
0020CF86                            Map_dadou:	include	"engine/modes/level/data/objects/dadou/data/map.asm"
0020CF86                            @mappings:
0020CF86 0000                       		dc.w @frame_0-@mappings
0020CF88 0000                       		dc.w @frame_1-@mappings
0020CF8A 0000                       		dc.w @frame_2-@mappings
0020CF8C 0000                       		dc.w @frame_3-@mappings
0020CF8E 0000                       		dc.w @frame_4-@mappings
0020CF90 0000                       		dc.w @frame_5-@mappings
0020CF92 0000                       		dc.w @frame_6-@mappings
0020CF94 0000                       		dc.w @frame_7-@mappings
0020CF96 0000                       		dc.w @frame_8-@mappings
0020CF98 0000                       		dc.w @frame_9-@mappings
0020CF9A                            @frame_0:
0020CF9A 03                         		dc.b $3
0020CF9B                            
0020CF9B F80A 0000 F0               		dc.b $F8,$A,$0,$0,$F0
0020CFA0 F004 0009 00               		dc.b $F0,$4,$0,$9,$0
0020CFA5 F801 000B 08               		dc.b $F8,$1,$0,$B,$8
0020CFAA                            		even
0020CFAA                            @frame_1:
0020CFAA 03                         		dc.b $3
0020CFAB                            
0020CFAB F80A 000D F0               		dc.b $F8,$A,$0,$D,$F0
0020CFB0 F004 0016 00               		dc.b $F0,$4,$0,$16,$0
0020CFB5 F801 0018 08               		dc.b $F8,$1,$0,$18,$8
0020CFBA                            		even
0020CFBA                            @frame_2:
0020CFBA 02                         		dc.b $2
0020CFBB                            
0020CFBB F80A 001A F0               		dc.b $F8,$A,$0,$1A,$F0
0020CFC0 F801 0023 08               		dc.b $F8,$1,$0,$23,$8
0020CFC6 00                         		even
0020CFC6                            @frame_3:
0020CFC6 02                         		dc.b $2
0020CFC7                            
0020CFC7 F00E 0025 F0               		dc.b $F0,$E,$0,$25,$F0
0020CFCC 0808 0031 F8               		dc.b $8,$8,$0,$31,$F8
0020CFD2 00                         		even
0020CFD2                            @frame_4:
0020CFD2 02                         		dc.b $2
0020CFD3                            
0020CFD3 F00E 0034 F0               		dc.b $F0,$E,$0,$34,$F0
0020CFD8 0808 0040 F8               		dc.b $8,$8,$0,$40,$F8
0020CFDE 00                         		even
0020CFDE                            @frame_5:
0020CFDE 02                         		dc.b $2
0020CFDF                            
0020CFDF F00E 0043 F0               		dc.b $F0,$E,$0,$43,$F0
0020CFE4 0804 004F F8               		dc.b $8,$4,$0,$4F,$F8
0020CFEA 00                         		even
0020CFEA                            @frame_6:
0020CFEA 02                         		dc.b $2
0020CFEB                            
0020CFEB F80A 0051 F0               		dc.b $F8,$A,$0,$51,$F0
0020CFF0 F801 005A 08               		dc.b $F8,$1,$0,$5A,$8
0020CFF6 00                         		even
0020CFF6                            @frame_7:
0020CFF6 02                         		dc.b $2
0020CFF7                            
0020CFF7 F00E 005C F0               		dc.b $F0,$E,$0,$5C,$F0
0020CFFC 0804 0068 F8               		dc.b $8,$4,$0,$68,$F8
0020D002 00                         		even
0020D002                            @frame_8:
0020D002 02                         		dc.b $2
0020D003                            
0020D003 F00E 006A F0               		dc.b $F0,$E,$0,$6A,$F0
0020D008 0808 0076 F8               		dc.b $8,$8,$0,$76,$F8
0020D00E 00                         		even
0020D00E                            @frame_9:
0020D00E 02                         		dc.b $2
0020D00F                            
0020D00F F00E 0079 F0               		dc.b $F0,$E,$0,$79,$F0
0020D014 0808 0085 F8               		dc.b $8,$8,$0,$85,$F8
0020D01A 00                         		even
0020D01A 00                         		even
0020D01A                             		even
0020D01A                            Map_pikudo:	include	"engine/modes/level/data/objects/pikudo/data/map.asm"
0020D01A                            @mappings:
0020D01A 0000                       		dc.w @frame_0-@mappings
0020D01C 0000                       		dc.w @frame_1-@mappings
0020D01E 0000                       		dc.w @frame_2-@mappings
0020D020 0000                       		dc.w @frame_3-@mappings
0020D022 0000                       		dc.w @frame_4-@mappings
0020D024                            @frame_0:
0020D024 04                         		dc.b $4
0020D025                            
0020D025 F009 0000 F0               		dc.b $F0,$9,$0,$0,$F0
0020D02A E804 0006 F8               		dc.b $E8,$4,$0,$6,$F8
0020D02F 0009 0008 F8               		dc.b $0,$9,$0,$8,$F8
0020D034 F800 000E 08               		dc.b $F8,$0,$0,$E,$8
0020D03A 00                         		even
0020D03A                            @frame_1:
0020D03A 04                         		dc.b $4
0020D03B                            
0020D03B F009 000F F0               		dc.b $F0,$9,$0,$F,$F0
0020D040 E804 0015 F8               		dc.b $E8,$4,$0,$15,$F8
0020D045 0009 0017 F8               		dc.b $0,$9,$0,$17,$F8
0020D04A F800 001D 08               		dc.b $F8,$0,$0,$1D,$8
0020D050 00                         		even
0020D050                            @frame_2:
0020D050 04                         		dc.b $4
0020D051                            
0020D051 F009 001E F0               		dc.b $F0,$9,$0,$1E,$F0
0020D056 E804 0024 F8               		dc.b $E8,$4,$0,$24,$F8
0020D05B 0009 0026 F8               		dc.b $0,$9,$0,$26,$F8
0020D060 F800 002C 08               		dc.b $F8,$0,$0,$2C,$8
0020D066 00                         		even
0020D066                            @frame_3:
0020D066 01                         		dc.b $1
0020D067                            
0020D067 F00B 002D F8               		dc.b $F0,$B,$0,$2D,$F8
0020D06C                            		even
0020D06C                            @frame_4:
0020D06C 01                         		dc.b $1
0020D06D                            
0020D06D F00B 0039 F8               		dc.b $F0,$B,$0,$39,$F8
0020D072                            		even
0020D072                            		even
0020D072                             		even
0020D072                            Map_ball:	include	"engine/modes/level/data/objects/ball/data/map.asm"
0020D072                            @mappings:
0020D072 0000                       		dc.w @frame_0-@mappings
0020D074 0000                       		dc.w @frame_1-@mappings
0020D076 0000                       		dc.w @frame_2-@mappings
0020D078 0000                       		dc.w @frame_3-@mappings
0020D07A                            @frame_0:
0020D07A 01                         		dc.b $1
0020D07B                            
0020D07B F806 0000 F8               		dc.b $F8,$6,$0,$0,$F8
0020D080                            		even
0020D080                            @frame_1:
0020D080 01                         		dc.b $1
0020D081                            
0020D081 F806 0006 F8               		dc.b $F8,$6,$0,$6,$F8
0020D086                            		even
0020D086                            @frame_2:
0020D086 01                         		dc.b $1
0020D087                            
0020D087 F806 000C F8               		dc.b $F8,$6,$0,$C,$F8
0020D08C                            		even
0020D08C                            @frame_3:
0020D08C 01                         		dc.b $1
0020D08D                            
0020D08D F806 0012 F8               		dc.b $F8,$6,$0,$12,$F8
0020D092                            		even
0020D092                            		even
0020D092                             		even
0020D092                            objMap_Platform:include	"engine/modes/level/data/objects/platform/data/map.asm"
0020D092                            @mappings:
0020D092 0000                       		dc.w @frame_0-@mappings
0020D094                            @frame_0:
0020D094 02                         		dc.b $2
0020D095                            
0020D095 F80C 0000 E8               		dc.b $F8,$C,$0,$0,$E8
0020D09A F804 0004 08               		dc.b $F8,$4,$0,$4,$8
0020D0A0 00                         		even
0020D0A0 00                         		even
0020D0A0                             		even
0020D0A0                            mapObj_EndFlag:	include	"engine/modes/level/data/objects/endflag/data/map.asm"
0020D0A0                            @mappings:
0020D0A0 0000                       		dc.w @frame_0-@mappings
0020D0A2 0000                       		dc.w @frame_1-@mappings
0020D0A4 0000                       		dc.w @frame_2-@mappings
0020D0A6                            @frame_0:
0020D0A6 07                         		dc.b $7
0020D0A7                            
0020D0A7 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
0020D0AC E00B 0004 E8               		dc.b $E0,$B,$0,$4,$E8
0020D0B1 0005 0010 E8               		dc.b $0,$5,$0,$10,$E8
0020D0B6 000C 0014 F8               		dc.b $0,$C,$0,$14,$F8
0020D0BB E80E 0018 00               		dc.b $E8,$E,$0,$18,$0
0020D0C0 E004 0024 08               		dc.b $E0,$4,$0,$24,$8
0020D0C5 0000 0026 18               		dc.b $0,$0,$0,$26,$18
0020D0CA                            		even
0020D0CA                            @frame_1:
0020D0CA 07                         		dc.b $7
0020D0CB                            
0020D0CB 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
0020D0D0 E00F 0004 E8               		dc.b $E0,$F,$0,$4,$E8
0020D0D5 0005 0014 E8               		dc.b $0,$5,$0,$14,$E8
0020D0DA 000C 0018 F8               		dc.b $0,$C,$0,$18,$F8
0020D0DF E80A 001C 08               		dc.b $E8,$A,$0,$1C,$8
0020D0E4 E000 0025 10               		dc.b $E0,$0,$0,$25,$10
0020D0E9 0000 0026 18               		dc.b $0,$0,$0,$26,$18
0020D0EE                            		even
0020D0EE                            @frame_2:
0020D0EE 07                         		dc.b $7
0020D0EF                            
0020D0EF 100C 0000 E0               		dc.b $10,$C,$0,$0,$E0
0020D0F4 E00F 0004 E8               		dc.b $E0,$F,$0,$4,$E8
0020D0F9 0005 0014 E8               		dc.b $0,$5,$0,$14,$E8
0020D0FE 000C 0018 F8               		dc.b $0,$C,$0,$18,$F8
0020D103 E007 001C 08               		dc.b $E0,$7,$0,$1C,$8
0020D108 E001 0024 18               		dc.b $E0,$1,$0,$24,$18
0020D10D F801 0026 18               		dc.b $F8,$1,$0,$26,$18
0020D112                            		even
0020D112                            		even
0020D112                             		even
0020D112                            dplcObj_EndFlag:include	"engine/modes/level/data/objects/endflag/data/plc.asm"
0020D112                            @dplc:
0020D112 0000                       		dc.w @frame_0-@dplc
0020D114 0000                       		dc.w @frame_1-@dplc
0020D116 0000                       		dc.w @frame_2-@dplc
0020D118                            @frame_0:
0020D118 0007                       		dc.w $7
0020D11A                            
0020D11A 3000                       		dc.w $3000
0020D11C B004                       		dc.w $B004
0020D11E 3010                       		dc.w $3010
0020D120 3014                       		dc.w $3014
0020D122 B018                       		dc.w $B018
0020D124 1024                       		dc.w $1024
0020D126 0026                       		dc.w $26
0020D128                            @frame_1:
0020D128 0007                       		dc.w $7
0020D12A                            
0020D12A 3027                       		dc.w $3027
0020D12C F02B                       		dc.w $F02B
0020D12E 303B                       		dc.w $303B
0020D130 303F                       		dc.w $303F
0020D132 8043                       		dc.w $8043
0020D134 004C                       		dc.w $4C
0020D136 004D                       		dc.w $4D
0020D138                            @frame_2:
0020D138 0007                       		dc.w $7
0020D13A                            
0020D13A 304E                       		dc.w $304E
0020D13C F052                       		dc.w $F052
0020D13E 3062                       		dc.w $3062
0020D140 3066                       		dc.w $3066
0020D142 706A                       		dc.w $706A
0020D144 1072                       		dc.w $1072
0020D146 1074                       		dc.w $1074
0020D146 1074                       		dc.w $1074
0020D148                            		even
0020D148                            		
0020D148                            ; ====================================================================
0020D148                            ; -------------------------------------------------
0020D148                            ; Level DATA
0020D148                            ; -------------------------------------------------
0020D148                            
0020D148                            LevelList:
0020D148 0000 0000                  		dc.l $01<<24|Lvl_Zone1		; Level data
0020D14C 0000 0000                  		dc.l Pal_LvlMain_Gray		; Palette
0020D150 0020 00F0                  		dc.w $20,$F0			; Player X/Y
0020D154 1140 0068                  		dc.w $1140,$68			; End flag X/Y
0020D158                            ; 		dc.l $01<<24|Lvl_Zone2
0020D158                            ; 		dc.l Pal_LvlMain_Gray
0020D158                            ; 		dc.w $20,$D0
0020D158                            ; 		dc.w 0,0
0020D158                            ; 		dc.l Lvl_Zone3
0020D158                            ; 		dc.l Pal_LvlMain_Gray
0020D158                            ; 		dc.w $28,$250
0020D158                            ; 		dc.w 0,0
0020D158                            ; 		dc.l Lvl_Zone1
0020D158                            ; 		dc.l Pal_LvlMain_Gray
0020D158                            ; 		dc.w $10,0
0020D158                            ; 		dc.w 0,0
0020D158                            ; 		dc.l Lvl_Zone1
0020D158                            ; 		dc.l Pal_LvlMain_Gray
0020D158                            ; 		dc.w $10,0
0020D158                            ; 		dc.w 0,0
0020D158                            ; 		even
0020D158                            		
0020D158                            artdata_Level_Test:
0020D158 0020 B000                   		dc.l art_dadou
0020D15C 6420                       		dc.w varVramDadou
0020D15E 043F                        		dc.w ((art_dadou_end-art_dadou)/4)-1
0020D160 0020 CA60                    		dc.l artObj_Ball
0020D164 44B8                       		dc.w varVramBall
0020D166 00BF                        		dc.w ((artObj_Ball_e-artObj_Ball)/4)-1
0020D168 0020 C100                   		dc.l Art_pikudo
0020D16C 04D0                       		dc.w varVramPikudo
0020D16E 0227                        		dc.w ((Art_pikudo_end-Art_pikudo)/4)-1
0020D170                             		
0020D170 0020 C9A0                   		dc.l artObj_Platform
0020D174 2530                        		dc.w varVramPlatfrm
0020D176 002F                        		dc.w ((artObj_Platform_e-artObj_Platform)/4)-1
0020D178                             		
0020D178 FFFF                        		dc.w -1
0020D17A                             		even
0020D17A                             		
0020D17A                            ; --------------------------------------------
0020D17A                            ; Levels
0020D17A                            ; --------------------------------------------
0020D17A                            
0020D17A 0118 0018                  Lvl_Zone1:	dc.w 280,24
0020D17E 0000 0000                  		dc.l @objects
0020D182 0000 0000 FFFF FFFF        		dc.l @FG_blk,-1			; Block VRAM / Prize VRAM (-1, use defaults) 
0020D18A 0000 0000 0000 0000        		dc.l @FG_lay_low,@FG_lay_hi	; Level layout hi/low
0020D192 0000 0000 0000 0000        		dc.l @FG_col,@FG_prz		; Collision / Prizes
0020D19A                            ; 		dc.w -1
0020D19A                            		
0020D19A                            @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/1/fg_lay_low.bin"
0020EBDA                             		even
0020EBDA                            @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/1/fg_lay_hi.bin"
0021061A                             		even	
0021061A                            @FG_col:	incbin	"engine/modes/level/data/layouts/main/1/fg_col.bin"
0021205A                             		even
0021205A                            @FG_prz:	incbin	"engine/modes/level/data/layouts/main/1/fg_prz.bin"
00212104                             		even 
00212104                            @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
00212904                             		even
00212904                            @objects:	include	"engine/modes/level/data/layouts/main/1/objlist.asm"
00212904 0020 620C                  		dc.l obj_dadou
00212908 01F8 00AC                  		dc.w 504,172
0021290C 00                         		dc.b 0
0021290D 00                         		dc.b 0
0021290E                            
0021290E 0020 663C                  		dc.l obj_platform
00212912 0348 00E0                  		dc.w 840,224
00212916 00                         		dc.b 0
00212917 00                         		dc.b 0
00212918                            
00212918 0020 663C                  		dc.l obj_platform
0021291C 03E8 00F8                  		dc.w 1000,248
00212920 01                         		dc.b 1
00212921 00                         		dc.b 0
00212922                            
00212922 0020 63E2                  		dc.l obj_pikudo
00212926 049C 00DC                  		dc.w 1180,220
0021292A 00                         		dc.b 0
0021292B 00                         		dc.b 0
0021292C                            
0021292C 0020 663C                  		dc.l obj_platform
00212930 0358 0178                  		dc.w 856,376
00212934 01                         		dc.b 1
00212935 00                         		dc.b 0
00212936                            
00212936 0020 663C                  		dc.l obj_platform
0021293A 03E0 0168                  		dc.w 992,360
0021293E 00                         		dc.b 0
0021293F 00                         		dc.b 0
00212940                            
00212940 0020 663C                  		dc.l obj_platform
00212944 0610 00C8                  		dc.w 1552,200
00212948 01                         		dc.b 1
00212949 00                         		dc.b 0
0021294A                            
0021294A 0020 6ADE                  		dc.l obj_ball
0021294E 064C 0100                  		dc.w 1612,256
00212952 00                         		dc.b 0
00212953 00                         		dc.b 0
00212954                            
00212954 0020 620C                  		dc.l obj_dadou
00212958 080C 00CC                  		dc.w 2060,204
0021295C 00                         		dc.b 0
0021295D 00                         		dc.b 0
0021295E                            
0021295E 0020 63E2                  		dc.l obj_pikudo
00212962 0648 0084                  		dc.w 1608,132
00212966 00                         		dc.b 0
00212967 00                         		dc.b 0
00212968                            
00212968 0020 6ADE                  		dc.l obj_ball
0021296C 0900 0104                  		dc.w 2304,260
00212970 00                         		dc.b 0
00212971 00                         		dc.b 0
00212972                            
00212972 0020 620C                  		dc.l obj_dadou
00212976 09A8 00EC                  		dc.w 2472,236
0021297A 00                         		dc.b 0
0021297B 00                         		dc.b 0
0021297C                            
0021297C 0020 620C                  		dc.l obj_dadou
00212980 0A94 0108                  		dc.w 2708,264
00212984 00                         		dc.b 0
00212985 00                         		dc.b 0
00212986                            
00212986 0020 663C                  		dc.l obj_platform
0021298A 09E8 0100                  		dc.w 2536,256
0021298E 02                         		dc.b 2
0021298F 00                         		dc.b 0
00212990                            
00212990 0020 620C                  		dc.l obj_dadou
00212994 0CB8 0140                  		dc.w 3256,320
00212998 00                         		dc.b 0
00212999 00                         		dc.b 0
0021299A                            
0021299A 0020 620C                  		dc.l obj_dadou
0021299E 0CC4 0080                  		dc.w 3268,128
002129A2 00                         		dc.b 0
002129A3 00                         		dc.b 0
002129A4                            
002129A4 0020 620C                  		dc.l obj_dadou
002129A8 0BFC 00C0                  		dc.w 3068,192
002129AC 80                         		dc.b 0x80
002129AD 00                         		dc.b 0
002129AE                            
002129AE 0000 0000                  		dc.l 0
002129AE 0000 0000                  		dc.l 0
002129B2                             		even
002129B2                            
002129B2                            ; --------------------------------------------
002129B2                            
002129B2                            ; Lvl_Zone2:	dc.w 228,14
002129B2                            ; 		dc.l @objects
002129B2                            ; 		dc.l @FG_blk,-1			;Block VRAM / Prize VRAM (-1, use defaults) 
002129B2                            ; 		dc.l @FG_lay_low,@FG_lay_hi	;Level layout hi/low
002129B2                            ; 		dc.l @FG_col,@FG_prz		;Collision / Prizes
002129B2                            ; ; 		dc.w -1
002129B2                            ; 		
002129B2                            ; @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/2/fg_lay_low.bin"
002129B2                            ;  		even
002129B2                            ; @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/2/fg_lay_hi.bin"
002129B2                            ;  		even	
002129B2                            ; @FG_col:	incbin	"engine/modes/level/data/layouts/main/2/fg_col.bin"
002129B2                            ;  		even
002129B2                            ; @FG_prz:	incbin	"engine/modes/level/data/layouts/main/2/fg_prz.bin"
002129B2                            ;  		even 
002129B2                            ; @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
002129B2                            ;  		even
002129B2                            ; @objects:	include	"engine/modes/level/data/layouts/main/2/objlist.asm"
002129B2                            ;  		even
002129B2                             
002129B2                            ; --------------------------------------------
002129B2                            
002129B2                            ; Lvl_Zone3:	dc.w 20,40
002129B2                            ; 		dc.l @objects
002129B2                            ; 		dc.l @FG_blk,-1			;Block VRAM / Prize VRAM (-1, use defaults) 
002129B2                            ; 		dc.l @FG_lay_low,@FG_lay_hi	;Level layout hi/low
002129B2                            ; 		dc.l @FG_col,@FG_prz		;Collision / Prizes
002129B2                            ; ; 		dc.w -1
002129B2                            ; 		
002129B2                            ; @FG_lay_low:	incbin	"engine/modes/level/data/layouts/main/3/fg_lay_low.bin"
002129B2                            ;  		even
002129B2                            ; @FG_lay_hi:	incbin	"engine/modes/level/data/layouts/main/3/fg_lay_hi.bin"
002129B2                            ;  		even	
002129B2                            ; @FG_col:	incbin	"engine/modes/level/data/layouts/main/3/fg_col.bin"
002129B2                            ;  		even
002129B2                            ; @FG_prz:	incbin	"engine/modes/level/data/layouts/main/3/fg_prz.bin"
002129B2                            ;  		even 
002129B2                            ; @FG_blk:	incbin	"engine/modes/level/data/layouts/main/lvl_blk.bin"
002129B2                            ;  		even
002129B2                            ; @objects:	include	"engine/modes/level/data/layouts/main/3/objlist.asm"
002129B2                            ;  		even
002129B2                            
002129B2                            ; --------------------------------------------
002129B2                            
002129B2                            Pal_LvlMain_Gray:
002129B2                            		incbin	"engine/modes/level/data/layouts/main/lvl_pal.bin"
002129D2                            		incbin	"engine/modes/level/data/layouts/main/bg_pal.bin"
002129F2                            		even
002129F2                            		
002129F2                            Art_Lvl_Test:	incbin	"engine/modes/level/data/layouts/main/lvl_art.bin"
00216052                            Art_Lvl_Test_e:	even
00216052                            
00216052                            Art_LvlBG_Test:	incbin	"engine/modes/level/data/layouts/main/bg_art.bin"
0021AC12                            Art_LvlBG_Test_e:
0021AC12                            		even
0021AC12                            Map_LvlBG_Test:	incbin	"engine/modes/level/data/layouts/main/bg_map.bin"
0021BC12                            Map_LvlBG_Test_e:
0021BC12                            		even
0021BC12                            		
0021BC12                            ; --------------------------------------------
0021BC12                            
0021BC12                            Art_LvlPrizes:	incbin	"engine/modes/level/data/layouts/prizes_art.bin"
0021C812                            		even
0021C812                            Art_LvlPrizes_e:
0021C812                            
0021C812                            Pal_LvlCoinItms	incbin	"engine/modes/level/data/layouts/lvlitems_pal.bin"
0021C832                            		even
0021C832                            		
0021C832                            ; ====================================================================
0021C832                            ; -------------------------------------------------
0021C832                            ; Sound data
0021C832                            ; -------------------------------------------------
0021C832                            
0021C832                            ; --------------------------
0021C832                            ; MUSIC level 1
0021C832                            ; --------------------------
0021C832                            
0021C832                            Music_Level1:
0021C832 0B02                       		dc.b 11,2
0021C834 0000 0000                  		dc.l @notes
0021C838 0000 0000                       		dc.l @ins
0021C83C 000A                            		dc.w 10
0021C83E 0040 800F                        		dc.b FM_1,64,$80,$0F
0021C842 0140 800F                        		dc.b FM_2,64,$80,$0F
0021C846 0240 800F                        		dc.b FM_3,64,$80,$0F
0021C84A 0440 800F                  		dc.b FM_4,64,$80,$0F
0021C84E 0540 800F                  		dc.b FM_5,64,$80,$0F
0021C852 0640 800F                   		dc.b FM_6,64,$80,$0F
0021C856 8040 800F                   		dc.b PSG_1,64,$80,$0F
0021C85A A040 800F                   		dc.b PSG_2,64,$80,$0F
0021C85E C040 800F                   		dc.b PSG_3,64,$80,$0F
0021C862 E040 800F                   		dc.b NOISE,64,$80,$0F
0021C866                             		even
0021C866                            @notes:		incbin "engine/sound/music/level0.it",$50+$11B
0021DF4C                                  		even
0021DF4C 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins
0021DF52                            		even
0021DF52                            		
0021DF52 0001 0000                  @ymha: 		dc.w 1,0
0021DF56 0000 0000                  		dc.l fmBass_jazz
0021DF5A 0042 0000                  		dc.w 2|$40,0
0021DF5E 0000 0000                  		dc.l fm3drum_tick
0021DF62 38AB 3457                  		dc.w $00AB|$3800,$0457|$3000
0021DF66 3511 2336                  		dc.w $0511|$3000,$0336|$2000
0021DF6A 0083 FFE8                    		dc.w 3|$80,-24
0021DF6E 0000 0000                    		dc.l wav_stKick
0021DF72 0000 0000                   		dc.l wav_stKick_e
0021DF76 FFFF FFFF                   		dc.l -1
0021DF7A 0084 FFE8                    		dc.w 4|$80,-24
0021DF7E 0000 0000                    		dc.l wav_stSnare
0021DF82 0000 0000                   		dc.l wav_stSnare_e
0021DF86 FFFF FFFF                   		dc.l -1
0021DF8A FFFF                       		dc.w -1
0021DF8C                            		even
0021DF8C                            
0021DF8C 0005 0004                  @noise: 	dc.w 5,%100
0021DF90 FFFF                       		dc.w -1
0021DF92                            		even
0021DF92                            		
0021DF92                            ; --------------------------
0021DF92                            ; SFX: BONK
0021DF92                            ; --------------------------
0021DF92                            
0021DF92 00FF                       SndSfx_BONK:	dc.b 0,-1
0021DF94 0000 0000                  		dc.l @pattern
0021DF98 0000 0000                       		dc.l @instruments
0021DF9C 0003                            		dc.w 3
0021DF9E 0540 800E                        		dc.b FM_5,64,$80,%1110
0021DFA2 0640 800F                        		dc.b FM_6,64,$80,$F
0021DFA6 A040 800F                        		dc.b PSG_2,64,$80,$F
0021DFAA                            @pattern:	incbin "engine/sound/sfx/bonk.it",$50+$FC+$28
0021E04C                                  		even
0021E04C                            
0021E04C 0000                       @instruments: 	dc.w @ymha-@instruments
0021E04E FFFF                       		dc.w -1
0021E050 0000                       		dc.w @noise-@instruments
0021E052 FFFF                       		dc.w -1
0021E054                            		even
0021E054                            		
0021E054 0002 0000                  @ymha: 		dc.w 2,0
0021E058 0000 0000                     		dc.l FMSfx_Bump
0021E05C                            
0021E05C 0083 FFF0                     		dc.w $80|3,-16
0021E060 0000 0000                     		dc.l WAVE_lwpnch
0021E064 0000 0000                     		dc.l WAVE_lwpnch_e
0021E068 FFFF FFFF                     		dc.l -1
0021E06C                               		
0021E06C FFFF                       		dc.w -1	;EOL
0021E06E                            		even
0021E06E 0002 0005                  @noise: 	dc.w 2,%101
0021E072 FFFF                       		dc.w -1
0021E074                            		even
0021E074                            		
0021E074                            ; --------------------------
0021E074                            ; SFX: Bonk a coin
0021E074                            ; --------------------------
0021E074                            
0021E074                            SndSfx_BonkCoin:
0021E074 00FF                       		dc.b 0,-1
0021E076 0000 0000                  		dc.l @pattern
0021E07A 0000 0000                       		dc.l @instruments
0021E07E 0004                            		dc.w 4
0021E080 0540 800E                        		dc.b FM_5,64,$80,%1110
0021E084 0640 800F                        		dc.b FM_6,64,$80,$F
0021E088 A040 800F                        		dc.b PSG_2,64,$80,$F
0021E08C C040 800F                        		dc.b PSG_3,64,$80,$F
0021E090                            @pattern:	incbin "engine/sound/sfx/bonkcoin.it",$50+$12C
0021E15C 00                               		even
0021E15C                            
0021E15C 0000                       @instruments: 	dc.w @ymha-@instruments
0021E15E FFFF                       		dc.w -1
0021E160 0000                       		dc.w @noise-@instruments
0021E162 FFFF                       		dc.w -1
0021E164                            		even
0021E164                            		
0021E164 0002 0000                  @ymha: 		dc.w 2,0
0021E168 0000 0000                     		dc.l FMSfx_Bump
0021E16C                            
0021E16C 0083 FFF0                     		dc.w $80|3,-16
0021E170 0000 0000                     		dc.l WAVE_lwpnch
0021E174 0000 0000                     		dc.l WAVE_lwpnch_e
0021E178 FFFF FFFF                     		dc.l -1
0021E17C                               		
0021E17C FFFF                       		dc.w -1	;EOL
0021E17E                            		even
0021E17E 0002 0005                  @noise: 	dc.w 2,%101
0021E182 FFFF                       		dc.w -1
0021E184                            		even
0021E184                            		
0021E184                            ; --------------------------
0021E184                            ; SFX: PUM
0021E184                            ; --------------------------
0021E184                            
0021E184                            SndSfx_PUM:
0021E184 00FF                       		dc.b 0,-1
0021E186 0000 0000                  		dc.l @pattern
0021E18A 0000 0000                       		dc.l @instruments
0021E18E 0003                            		dc.w 3
0021E190 0540 800F                        		dc.b FM_5,64,$80,$0F
0021E194 E040 800F                        		dc.b NOISE,64,$80,$0F
0021E198 0640 800F                        		dc.b FM_6,64,$80,$0F
0021E19C                            @pattern:	incbin "engine/sound/sfx/blkbump.it",$F4+$50+$20
0021E23E                                  		even
0021E23E                            
0021E23E 0000                       @instruments:	dc.w @ymha-@instruments
0021E240 FFFF                       		dc.w -1
0021E242 0000                       		dc.w @noise-@instruments
0021E244                            		even
0021E244                            
0021E244 0001 0000                  @ymha: 		dc.w 1,0
0021E248 0000 0000                     		dc.l FMSfx_Punch
0021E24C                               		
0021E24C 0083 0000                     		dc.w $80|3,0
0021E250 0000 0000                     		dc.l WAVE_lwpnch
0021E254 0000 0000                     		dc.l WAVE_lwpnch_e
0021E258 FFFF FFFF                     		dc.l -1
0021E25C                               		
0021E25C FFFF                       		dc.w -1	;EOL
0021E25E                            		even
0021E25E                            @noise:
0021E25E 0002 0006                   		dc.w 2,%110
0021E262 FFFF                       		dc.w -1
0021E264                            		even
0021E264                            
0021E264                            ; --------------------------
0021E264                            ; SFX: PING
0021E264                            ; --------------------------
0021E264                            
0021E264                            SndSfx_PING:
0021E264 00FF                       		dc.b 0,-1
0021E266 0000 0000                  		dc.l @notes
0021E26A 0000 0000                       		dc.l @ins
0021E26E 0002                            		dc.w 2
0021E270 E040 800F                        		dc.b NOISE,64,$80,$0F
0021E274 0640 800F                        		dc.b FM_6,64,$80,$0F
0021E278                            @notes:		incbin "engine/sound/sfx/pingball.it",$50+$DC
0021E312                                  		even
0021E312 0000                       @ins: 		dc.w @ymha-@ins
0021E314 FFFF                       		dc.w -1
0021E316 0000                       		dc.w @noise-@ins
0021E318                            		even
0021E318                            @noise:
0021E318 0001 0004                   		dc.w 1,%100
0021E31C FFFF                       		dc.w -1
0021E31E                            		even
0021E31E                            @ymha:
0021E31E 0081 0000                  		dc.w $80|1,0
0021E322 0000 0000                  		dc.l WAVE_sfxBall
0021E326 0000 0000                  		dc.l WAVE_sfxBall_e
0021E32A FFFF FFFF                  		dc.l -1
0021E32E                            		
0021E32E FFFF                       		dc.w -1
0021E330                            		even
0021E330                            		
0021E330                            ; --------------------------
0021E330                            ; SFX: COIN
0021E330                            ; --------------------------
0021E330                            
0021E330                            SndSfx_COIN:
0021E330 00FF                       		dc.b 0,-1
0021E332 0000 0000                  		dc.l @notes
0021E336 0000 0000                       		dc.l @ins
0021E33A 0002                            		dc.w 2
0021E33C 8040 800F                        		dc.b PSG_1,64,$80,$F
0021E340 A040 800F                        		dc.b PSG_2,64,$80,$F
0021E344                            @notes:		incbin "engine/sound/sfx/coin.it",$50+$D4+8
0021E3EA                                  		even
0021E3EA FFFF                       @ins: 		dc.w -1
0021E3EC FFFF                       		dc.w -1
0021E3EE FFFF                       		dc.w -1
0021E3F0                            		even
0021E3F0                            		
0021E3F0                            ; --------------------------
0021E3F0                            ; SFX: COIN
0021E3F0                            ; --------------------------
0021E3F0                            
0021E3F0                            SndSfx_BEEBUZZ:
0021E3F0 00FF                       		dc.b 0,-1
0021E3F2 0000 0000                  		dc.l @notes
0021E3F6 0000 0000                       		dc.l @ins
0021E3FA 0001                            		dc.w 1
0021E3FC 0540 800F                        		dc.b FM_5,64,$80,$F
0021E400                            @notes:		incbin "engine/sound/sfx/beebuzz.it",$50+$D4
0021E4B0                                  		even
0021E4B0 0000                       @ins: 		dc.w @ymha-@ins
0021E4B2 FFFF                       		dc.w -1
0021E4B4 FFFF                       		dc.w -1
0021E4B6                            		even
0021E4B6                            @ymha:
0021E4B6 0001 0000                  		dc.w 1,0
0021E4BA 0000 0000                  		dc.l fmSfx_BUZZ
0021E4BE FFFF FFFF                  		dc.l -1
0021E4C2                            		
0021E4C2 FFFF                       		dc.w -1
0021E4C4                            		even
0021E4C4                            		
0021E4C4                            ; --------------------------
0021E4C4                            ; SFX: COIN
0021E4C4                            ; --------------------------
0021E4C4                            
0021E4C4                            SndSfx_PlyrJump:
0021E4C4 00FF                       		dc.b 0,-1
0021E4C6 0000 0000                  		dc.l @notes
0021E4CA 0000 0000                       		dc.l @ins
0021E4CE 0001                            		dc.w 1
0021E4D0 E040 800F                        		dc.b NOISE,64,$80,$F
0021E4D4                            @notes:		incbin "engine/sound/sfx/plyrjump.it",$50+$DC
0021E584 00                               		even
0021E584 FFFF FFFF 0000             @ins:		dc.w -1,-1,@noise-@ins
0021E58A 0001 0004                  @noise:		dc.w 1,%100
0021E58E                            		even
0021E58E                               
0021E58E                            ; --------------------------
0021E58E                            ; SFX: COIN
0021E58E                            ; --------------------------
0021E58E                            
0021E58E                            SndSfx_HitEnemy:
0021E58E 00FF                       		dc.b 0,-1
0021E590 0000 0000                  		dc.l @notes
0021E594 0000 0000                  		dc.l @ins
0021E598 0002                       		dc.w 2
0021E59A 0640 800F                  		dc.b FM_6,64,$80,$F
0021E59E E040 800F                  		dc.b NOISE,64,$80,$F
0021E5A2                            @notes:		incbin "engine/sound/sfx/bumpenemy.it",$50+$D4
0021E64E 00                         		even
0021E64E 0000 FFFF 0000             @ins:		dc.w @ymha-@ins,-1,@noise-@ins
0021E654 0001 0000                  @ymha:		dc.w 1,0
0021E658 0000 0000                  		dc.l FMSfx_Punch
0021E65C 0002 0006                  @noise:		dc.w 2,%110
0021E660                            		
0021E660                            ; --------------------------
0021E660                            ; instruments
0021E660                            ; --------------------------
0021E660                            
0021E660                            fmBass_jazz:	incbin	"engine/sound/instruments/FM/bass/bass_jazz.bin"
0021E67A 00                         		even
0021E67A                            fm3drum_tick: 	incbin	"engine/sound/instruments/fm/drums/fm3_tick.bin"
0021E694 00                         		even
0021E694                            		
0021E694                            FMSfx_Punch:	incbin	"engine/sound/instruments/FM/fmsfx_boomlong.bin"
0021E6AE 00                         		even
0021E6AE                            FMSfx_Bump:	incbin	"engine/sound/instruments/FM/fmsfx_bump.bin"
0021E6C8 00                         		even
0021E6C8                            fmSfx_BUZZ:	incbin	"engine/sound/instruments/FM/old/socket_voiceset.bin",$19*18,$19
0021E6E2 00                         		even
0021E6E2                            		
0021E6E2                            WAVE_lwbonk:	incbin	"engine/sound/instruments/DAC/sfxbonk.wav",$2C
0021FBA8 00                         WAVE_lwbonk_e:	even
0021FBA8                            WAVE_lwpnch:	incbin	"engine/sound/instruments/DAC/sfxhithard.wav",$2C
00221760 00                         WAVE_lwpnch_e:	even
00221760                            WAVE_sfxBall:	incbin	"engine/sound/instruments/DAC/sfxBallTick.wav",$2C
002236B4                            WAVE_sfxBall_e:	even
002236B4                            wav_stKick:	incbin	"engine/sound/instruments/DAC/stKick.wav",$2C
0022469C                            wav_stKick_e:	even
0022469C                            wav_stSnare:	incbin	"engine/sound/instruments/DAC/stSnare.wav",$2C
0022679C                            wav_stSnare_e:	even
0022679C                            wav_stSnare_e:	even
0022679C                            		
0022679C                            		;SOLO PARA MCD
0022679C                            Art_DebugFont:	incbin "engine/shared/dbgfont.bin"
0022779C                            Art_DebugFont_e:
0022779C                                            even
0022779C                            
0022779C                            ; ====================================================================	
0022779C                            
0022779C                            		inform 0,"LEVEL MODE ROM uses: %h",*-$200000
0022779C                            		objend
0002779C                            		align $40000
